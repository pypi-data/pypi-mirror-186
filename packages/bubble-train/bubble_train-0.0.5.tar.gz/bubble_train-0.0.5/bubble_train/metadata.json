{
  "src/lib/components/BubbleTrain.react.js": {
    "description": "ExampleComponent is an example component.\r\nIt takes a property, `label`, and\r\ndisplays it.\r\nIt renders an input with the property `value`\r\nwhich is editable by the user.",
    "displayName": "BubbleTrain",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "A label that will be printed when this component is rendered."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value displayed in the input."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\r\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/GridLayout.react.js": {
    "description": "GridLayout is a component for building\r\ndashboards with draggable and resizable items.\r\nIt takes a list of children and display them in\r\ndiv elements that can be moved around the page.\r\nThe initial size of each element can either be\r\ndefined with the layout argument or by wrapping\r\neach element with the DashboardItem component.\r\nBy default, GridLayout will saved the\r\nposition of the elements on client side, when\r\nmoved on the page. But you can also save it\r\non server side by defining a callback with :\r\n`Input(\"<my-id>\", \"layout\")`.",
    "displayName": "GridLayout",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "(string) The ID used to identify this component in Dash callbacks.\r\nThe id is also used to automatically save the layout on client side."
      },
      "layout": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "Layout is a list of dictionnary with the format:\r\n{x: number, y: number, w: number, h: number}\r\nThe index into the layout must match the id used on each item component with DashboardItem.\r\nIf you choose to use custom keys, you can specify that key in the layout\r\narray objects like so:\r\n{i: string, x: number, y: number, w: number, h: number}\r\nThe ID used to identify this component in Dash callbacks.\r\nThe id is also used to automatically save the layout on client side."
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "Children is a list of the elements to drag and resize on the dashboard.\r\nIt can be a list of dash Components and/or DashboardItem.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "save": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "(bool) If False, then the layout is not saved in the browser.\r\nDefault value is True.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "clearSavedLayout": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "(bool) If set to true, then the layout saved in the client browser\r\nwill be cleared on page load.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "ncols": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "(number) the default number of columns by item.\r\nDefault value is 6."
      },
      "nrows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "(number) the default number of row by item.\r\nDefault value is 8."
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "(number) width (in px).\r\nDefault value is 1200."
      },
      "gridCols": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "(number) number of columns in the grid layout.\r\nDefault value is 12."
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "(number) height of a row (in px).\r\nDefault value is 30."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "(string) class passed to the react-grid-layout component",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "(dict) css style passed to the react-grid-layout component",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "autoSize": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "draggableCancel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "draggableHandle": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "verticalCompact": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "compactType": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'vertical'",
              "computed": false
            },
            {
              "value": "'horizontal'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'vertical'",
          "computed": false
        }
      },
      "margin": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "[10, 10]",
          "computed": false
        }
      },
      "containerPadding": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "[10, 10]",
          "computed": false
        }
      },
      "isDraggable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isResizable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isBounded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "useCSSTransforms": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "transformScale": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "preventCollision": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isDroppable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "resizeHandles": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "'s'",
                "computed": false
              },
              {
                "value": "'w'",
                "computed": false
              },
              {
                "value": "'e'",
                "computed": false
              },
              {
                "value": "'n'",
                "computed": false
              },
              {
                "value": "'sw'",
                "computed": false
              },
              {
                "value": "'nw'",
                "computed": false
              },
              {
                "value": "'se'",
                "computed": false
              },
              {
                "value": "'ne'",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "['se']",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\r\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/TextInput.react.js": {
    "description": "",
    "displayName": "TextInput",
    "methods": [
      {
        "name": "handleInputChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      }
    }
  }
}