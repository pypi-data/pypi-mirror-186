"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>   # noqa: E501

    The version of the OpenAPI document: 0.32.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from synctera_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from synctera_client.exceptions import ApiAttributeError


def lazy_import():
    from synctera_client.model.internal_transfer import InternalTransfer
    from synctera_client.model.internal_transfer_response_all_of import InternalTransferResponseAllOf
    globals()['InternalTransfer'] = InternalTransfer
    globals()['InternalTransferResponseAllOf'] = InternalTransferResponseAllOf


class InternalTransferResponse(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('type',): {
            'ACCOUNT_TO_ACCOUNT': "ACCOUNT_TO_ACCOUNT",
            'ACH_CREDIT_SWEEP': "ACH_CREDIT_SWEEP",
            'ACH_DEBIT_SWEEP': "ACH_DEBIT_SWEEP",
            'ACH_FLOAT_TRANSFER': "ACH_FLOAT_TRANSFER",
            'ACH_SWEEP': "ACH_SWEEP",
            'CASHBACK': "CASHBACK",
            'FEE': "FEE",
            'INCOMING_WIRE': "INCOMING_WIRE",
            'INTEREST_PAYOUT': "INTEREST_PAYOUT",
            'LOAN_DISBURSEMENT': "LOAN_DISBURSEMENT",
            'LOAN_FUNDING': "LOAN_FUNDING",
            'MANUAL_ADJUSTMENT': "MANUAL_ADJUSTMENT",
            'MANUAL_ADJUSTMENT_REVERSAL': "MANUAL_ADJUSTMENT_REVERSAL",
            'MANUAL_CARD_SWEEP': "MANUAL_CARD_SWEEP",
            'OUTGOING_INTERNATIONAL_REMITTANCE': "OUTGOING_INTERNATIONAL_REMITTANCE",
            'OUTGOING_INTERNATIONAL_REMITTANCE_REVERSAL': "OUTGOING_INTERNATIONAL_REMITTANCE_REVERSAL",
            'PROMOTIONAL_CREDIT': "PROMOTIONAL_CREDIT",
            'SIGN_UP_BONUS': "SIGN_UP_BONUS",
            'SUBSCRIPTION_FEE': "SUBSCRIPTION_FEE",
            'TRANSFER_FEE': "TRANSFER_FEE",
            'TRANSFER_FEE_REVERSAL': "TRANSFER_FEE_REVERSAL",
            'WIRE_SETTLEMENT_CREDIT': "WIRE_SETTLEMENT_CREDIT",
            'WIRE_SETTLEMENT_DEBIT': "WIRE_SETTLEMENT_DEBIT",
        },
        ('status',): {
            'PENDING': "PENDING",
            'COMPLETE': "COMPLETE",
            'CANCELED': "CANCELED",
            'EXPIRED': "EXPIRED",
        },
        ('capture_mode',): {
            'IMMEDIATE': "IMMEDIATE",
            'MANUAL': "MANUAL",
        },
    }

    validations = {
        ('amount',): {
            'inclusive_minimum': 1,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'amount': (int,),  # noqa: E501
            'currency': (str,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'id': (str,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'capture_mode': (str,),  # noqa: E501
            'expires_at': (datetime,),  # noqa: E501
            'final_customer_id': (str,),  # noqa: E501
            'memo': (str,),  # noqa: E501
            'metadata': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'originating_account_alias': (str,),  # noqa: E501
            'originating_account_customer_id': (str,),  # noqa: E501
            'originating_account_id': (str,),  # noqa: E501
            'receiving_account_alias': (str,),  # noqa: E501
            'receiving_account_customer_id': (str,),  # noqa: E501
            'receiving_account_id': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'amount': 'amount',  # noqa: E501
        'currency': 'currency',  # noqa: E501
        'type': 'type',  # noqa: E501
        'id': 'id',  # noqa: E501
        'status': 'status',  # noqa: E501
        'capture_mode': 'capture_mode',  # noqa: E501
        'expires_at': 'expires_at',  # noqa: E501
        'final_customer_id': 'final_customer_id',  # noqa: E501
        'memo': 'memo',  # noqa: E501
        'metadata': 'metadata',  # noqa: E501
        'originating_account_alias': 'originating_account_alias',  # noqa: E501
        'originating_account_customer_id': 'originating_account_customer_id',  # noqa: E501
        'originating_account_id': 'originating_account_id',  # noqa: E501
        'receiving_account_alias': 'receiving_account_alias',  # noqa: E501
        'receiving_account_customer_id': 'receiving_account_customer_id',  # noqa: E501
        'receiving_account_id': 'receiving_account_id',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """InternalTransferResponse - a model defined in OpenAPI

        Keyword Args:
            amount (int): The amount (in cents) to transfer from originating account to receiving account.
            currency (str): ISO 4217 alphabetic currency code of the transfer amount
            type (str): The desired transaction type to use for this transfer
            id (str): The transaction id associated with the transfer
            status (str): The status of the internal transfer auth. A value of `PENDING` indicates that the funds have been reserved and the transaction is ready to be either completed or canceled. A value of `COMPLETE` indicates the funds have been successfully moved and no more action can be performed. A value of `CANCELED` or `EXPIRED` means that the transaction has rolled back and the funds have been returned to the originating account, either by explicitly canceling via the API, or due to the expiry time having passed.
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            capture_mode (str): Controls when the transfer will take effect. A value of `IMMEDIATE` (the default) means that the transfer will be completed immediately. A value of `MANUAL` means that the transaction will remain in a \"pending\" state until explicitly completed or cancelled (or the auth expires).. [optional] if omitted the server will use the default value of "IMMEDIATE"  # noqa: E501
            expires_at (datetime): When `capture_mode` is `MANUAL`, this field describes when the pending transaction should expire.. [optional]  # noqa: E501
            final_customer_id (str): The customer id of the international customer that receives the final remittance transfer (required for remittance payments).. [optional]  # noqa: E501
            memo (str): A short note to the recipient. [optional]  # noqa: E501
            metadata ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Arbitrary key-value metadata to associate with the transaction. [optional]  # noqa: E501
            originating_account_alias (str): An alias representing a GL account to debit. This is alternative to specifying by account id. [optional]  # noqa: E501
            originating_account_customer_id (str): The customer id of the owner of the originating account.. [optional]  # noqa: E501
            originating_account_id (str): The UUID of the account being debited. [optional]  # noqa: E501
            receiving_account_alias (str): An alias representing a GL account to credit. This is an alternative to specifying by account id. [optional]  # noqa: E501
            receiving_account_customer_id (str): The customer id of the owner of the receiving account.. [optional]  # noqa: E501
            receiving_account_id (str): The UUID of the account being credited. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """InternalTransferResponse - a model defined in OpenAPI

        Keyword Args:
            amount (int): The amount (in cents) to transfer from originating account to receiving account.
            currency (str): ISO 4217 alphabetic currency code of the transfer amount
            type (str): The desired transaction type to use for this transfer
            id (str): The transaction id associated with the transfer
            status (str): The status of the internal transfer auth. A value of `PENDING` indicates that the funds have been reserved and the transaction is ready to be either completed or canceled. A value of `COMPLETE` indicates the funds have been successfully moved and no more action can be performed. A value of `CANCELED` or `EXPIRED` means that the transaction has rolled back and the funds have been returned to the originating account, either by explicitly canceling via the API, or due to the expiry time having passed.
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            capture_mode (str): Controls when the transfer will take effect. A value of `IMMEDIATE` (the default) means that the transfer will be completed immediately. A value of `MANUAL` means that the transaction will remain in a \"pending\" state until explicitly completed or cancelled (or the auth expires).. [optional] if omitted the server will use the default value of "IMMEDIATE"  # noqa: E501
            expires_at (datetime): When `capture_mode` is `MANUAL`, this field describes when the pending transaction should expire.. [optional]  # noqa: E501
            final_customer_id (str): The customer id of the international customer that receives the final remittance transfer (required for remittance payments).. [optional]  # noqa: E501
            memo (str): A short note to the recipient. [optional]  # noqa: E501
            metadata ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Arbitrary key-value metadata to associate with the transaction. [optional]  # noqa: E501
            originating_account_alias (str): An alias representing a GL account to debit. This is alternative to specifying by account id. [optional]  # noqa: E501
            originating_account_customer_id (str): The customer id of the owner of the originating account.. [optional]  # noqa: E501
            originating_account_id (str): The UUID of the account being debited. [optional]  # noqa: E501
            receiving_account_alias (str): An alias representing a GL account to credit. This is an alternative to specifying by account id. [optional]  # noqa: E501
            receiving_account_customer_id (str): The customer id of the owner of the receiving account.. [optional]  # noqa: E501
            receiving_account_id (str): The UUID of the account being credited. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
              InternalTransfer,
              InternalTransferResponseAllOf,
          ],
          'oneOf': [
          ],
        }
