# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FailJobIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_type': 'RimeJobType',
        'term_reason': 'RimeTerminationReason',
        'archived_job_logs': 'RimeArchivedJobLogs'
    }

    attribute_map = {
        'job_type': 'jobType',
        'term_reason': 'termReason',
        'archived_job_logs': 'archivedJobLogs'
    }

    def __init__(self, job_type=None, term_reason=None, archived_job_logs=None):  # noqa: E501
        """FailJobIdBody - a model defined in Swagger"""  # noqa: E501
        self._job_type = None
        self._term_reason = None
        self._archived_job_logs = None
        self.discriminator = None
        if job_type is not None:
            self.job_type = job_type
        if term_reason is not None:
            self.term_reason = term_reason
        if archived_job_logs is not None:
            self.archived_job_logs = archived_job_logs

    @property
    def job_type(self):
        """Gets the job_type of this FailJobIdBody.  # noqa: E501


        :return: The job_type of this FailJobIdBody.  # noqa: E501
        :rtype: RimeJobType
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this FailJobIdBody.


        :param job_type: The job_type of this FailJobIdBody.  # noqa: E501
        :type: RimeJobType
        """

        self._job_type = job_type

    @property
    def term_reason(self):
        """Gets the term_reason of this FailJobIdBody.  # noqa: E501


        :return: The term_reason of this FailJobIdBody.  # noqa: E501
        :rtype: RimeTerminationReason
        """
        return self._term_reason

    @term_reason.setter
    def term_reason(self, term_reason):
        """Sets the term_reason of this FailJobIdBody.


        :param term_reason: The term_reason of this FailJobIdBody.  # noqa: E501
        :type: RimeTerminationReason
        """

        self._term_reason = term_reason

    @property
    def archived_job_logs(self):
        """Gets the archived_job_logs of this FailJobIdBody.  # noqa: E501


        :return: The archived_job_logs of this FailJobIdBody.  # noqa: E501
        :rtype: RimeArchivedJobLogs
        """
        return self._archived_job_logs

    @archived_job_logs.setter
    def archived_job_logs(self, archived_job_logs):
        """Sets the archived_job_logs of this FailJobIdBody.


        :param archived_job_logs: The archived_job_logs of this FailJobIdBody.  # noqa: E501
        :type: RimeArchivedJobLogs
        """

        self._archived_job_logs = archived_job_logs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FailJobIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FailJobIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
