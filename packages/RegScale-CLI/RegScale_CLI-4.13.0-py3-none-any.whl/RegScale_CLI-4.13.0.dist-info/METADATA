Metadata-Version: 2.1
Name: RegScale-CLI
Version: 4.13.0
Summary: Command Line Interface (CLI) for bulk processing/loading data into RegScale
Home-page: https://github.com/RegScale/regscale-cli
Author: Travis Howerton
Author-email: thowerton@regscale.com
License: MIT
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3.9
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: PyMuPDF (==1.21.0)
Requires-Dist: aiohttp (==3.8.3)
Requires-Dist: bs4
Requires-Dist: click (==8.1.3)
Requires-Dist: colorama (==0.4.5)
Requires-Dist: cryptography (==36.0.2)
Requires-Dist: docx (==0.2.4)
Requires-Dist: fitz (==0.0.1.dev2)
Requires-Dist: frontend
Requires-Dist: gql (==3.4.0)
Requires-Dist: jira (==3.3.1)
Requires-Dist: jwt (==1.3.1)
Requires-Dist: matplotlib
Requires-Dist: msal (==1.18.0)
Requires-Dist: numpy (==1.23.3)
Requires-Dist: openpyxl
Requires-Dist: pandas
Requires-Dist: pdfplumber (==0.7.6)
Requires-Dist: pyTenable
Requires-Dist: pyaml (==21.10.1)
Requires-Dist: python-docx
Requires-Dist: regscale-python-ssp
Requires-Dist: requests (==2.28.1)
Requires-Dist: rich (==12.5.1)
Requires-Dist: setuptools
Requires-Dist: static
Requires-Dist: tools
Requires-Dist: xmltodict
Provides-Extra: dev
Requires-Dist: black ; extra == 'dev'
Requires-Dist: coveralls ; extra == 'dev'
Requires-Dist: flake8 ; extra == 'dev'
Requires-Dist: isort ; extra == 'dev'
Requires-Dist: pre-commit ; extra == 'dev'
Requires-Dist: pytest-cov ; extra == 'dev'
Requires-Dist: pytest (>=5) ; extra == 'dev'

# RegScale Command Line Interface (CLI)

This CLI application is for supporting advanced automation and bulk data processing related to the [RegScale Compliance Automation Platform](https://www.regscale.com).  This application is intended to run as a "side car" that be scheduled via CRON job or serverless function to perform sophisticated data processing.  The CLI includes multiple libraries for processing data, connecting to RegScale Application Programming Interfaces (APIs), and commercial integrations.  This software may be packaged and included in other commercial software to lower the level of effort associated with building RegScale integrations to other commercial tools.

[![Code Check](https://github.com/RegScale/regscale-cli/actions/workflows/code_check.yml/badge.svg)](https://github.com/RegScale/regscale-cli/actions/workflows/code_check.yml)
[![Run Tests](https://github.com/RegScale/regscale-cli/actions/workflows/test.yaml/badge.svg)](https://github.com/RegScale/regscale-cli/actions/workflows/test.yaml)

## Installation

Create a virtual environment and install required Python libraries.

```
# create and activate python virtual environment
python -m venv venv
source venv/bin/activate

# upgrade pip
pip install --upgrade pip

# install required python libraries
pip install -r requirements.txt
```

## Use Cases

- Sidecar for bulk processing compliance data such as vulnerability scans or continuous monitoring logs
- Processing and ingest of data such as National Institute of Standards and Technology (NIST) Open Security Control Assessment Language (OSCAL)
- Running CRON jobs to bulk-process data
- Managing users and identities from external sources
- Threat intelligence feeds

## Specific Integrations
- Commmercial Tool CLI Functions
    - Active Directory (AD) - authenticates to AD, lists all available "regscale" groups, and syncs specific named groups based on a standard naming convention and auto-assigns roles
    - Jira - creates and manages ITIL tickets based on RegScale Issues/POAMs
    - Microsoft Defender - syncs Microsoft Defender 365 recommendations and Microsoft Defender for Cloud alerts as Issues/POAMs in RegScale
    - ServiceNow - creates and manages ITIL tickets based on RegScale Issues/POAMs
    - Tenable Security - integrates vulnerability data from Tenable scans
    - Wiz.io - integrates vulnerability, misconfiguration, and asset data from Wiz.io
- NIST OSCAL
    - Catalogs - creates a RegScale catalog by importing an OSCAL Catalog JSON file
    - Profiles - creates a RegScale profile by importing an OSCAL Profile JSON file
- RegScale Specific Integrations
    - About - provides specific information about the CLI
    - Compare - allows you to compare two files and creates an assessment in RegScale of the results (acceptable files: .csv, .xls, or .xlsx)
    - Encrypt - encrypt/decrypt the provided file with a password (acceptable files: .csv, .json, .txt, or .yaml)
    - Healthcheck - provides status on system health for your RegScale instance
    - Login - logs into RegScale and stores a token for secure access to API calls
    - Migrations - migrates legacy RegScale data into the new schema
    - Reminder - sends email reminders to users with outstanding or upcoming: Assessments, Data Calls, Issues, Security Plans, and Tasks. (NOTE: The user must have email notifications enabled.)
- Scanners
    - Microsoft 365 Defender - integrates recommendations into as RegScale issues
    - Tenable Security - integrates vulnerability data from Tenable scans
    - Wiz.io - integrates vulnerability, misconfiguration, and asset data from Wiz.io
- Threat Feeds
    - DHS CISA - integrates DHS Alerts and the Known Exploitable Vulnerability (KEV) database

## Testing

Run `pytest -v ./tests/{test_filename}.py` and replace `{test_filename}` with name of test file.


