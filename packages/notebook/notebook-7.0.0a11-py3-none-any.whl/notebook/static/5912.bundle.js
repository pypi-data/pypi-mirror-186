"use strict";(self.webpackChunk_JUPYTERLAB_CORE_OUTPUT=self.webpackChunk_JUPYTERLAB_CORE_OUTPUT||[]).push([[5912],{15912:(e,t,n)=>{n.r(t),n.d(t,{addCommands:()=>p,default:()=>w});var a,r=n(63156),i=n(50645),o=n(35909),s=n(1191),c=n(61795),d=n(68770),m=n(79657),l=n(41420),u=n(82589),h=n(52086),g=n(22202);!function(e){e.copy="terminal:copy",e.createNew="terminal:create-new",e.open="terminal:open",e.refresh="terminal:refresh",e.increaseFont="terminal:increase-font",e.decreaseFont="terminal:decrease-font",e.paste="terminal:paste",e.setTheme="terminal:set-theme",e.shutdown="terminal:shut-down"}(a||(a={}));const _={activate:function(e,t,n,r,o,s,c,d,m){const l=n.load("jupyterlab"),{serviceManager:u,commands:w}=e,f=l.__("Terminal"),b=new i.WidgetTracker({namespace:"terminal"});if(!u.terminals.isAvailable())return console.warn("Disabling terminals plugin because they are not available on the server"),b;s&&s.restore(b,{command:a.createNew,args:e=>({name:e.content.session.name}),name:e=>e.content.session.name});const T={};function I(e){Object.keys(e.composite).forEach((t=>{T[t]=e.composite[t]}))}function v(){b.forEach((e=>function(e){const t=e.content;t&&Object.keys(T).forEach((e=>{t.setOption(e,T[e])}))}(e)))}if(t.load(_.id).then((e=>{I(e),v(),e.changed.connect((()=>{I(e),v()}))})).catch(y.showErrorMessage),null==d||d.themeChanged.connect(((e,t)=>{b.forEach((e=>{const t=e.content;"inherit"===t.getOption("theme")&&t.setOption("theme","inherit")}))})),p(e,b,t,n,T),c){const e=new g.Menu({commands:w});e.title.label=l._p("menu","Terminal Theme"),e.addItem({command:a.setTheme,args:{theme:"inherit",displayName:l.__("Inherit"),isPalette:!1}}),e.addItem({command:a.setTheme,args:{theme:"light",displayName:l.__("Light"),isPalette:!1}}),e.addItem({command:a.setTheme,args:{theme:"dark",displayName:l.__("Dark"),isPalette:!1}}),c.settingsMenu.addGroup([{command:a.increaseFont},{command:a.decreaseFont},{type:"submenu",submenu:e}],40),c.fileMenu.newMenu.addItem({command:a.createNew,rank:20}),c.fileMenu.closeAndCleaners.add({id:a.shutdown,isEnabled:e=>null!==b.currentWidget&&b.has(e)})}return r&&([a.createNew,a.refresh,a.increaseFont,a.decreaseFont].forEach((e=>{r.addItem({command:e,category:f,args:{isPalette:!0}})})),r.addItem({command:a.setTheme,category:f,args:{theme:"inherit",displayName:l.__("Inherit"),isPalette:!0}}),r.addItem({command:a.setTheme,category:f,args:{theme:"light",displayName:l.__("Light"),isPalette:!0}}),r.addItem({command:a.setTheme,category:f,args:{theme:"dark",displayName:l.__("Dark"),isPalette:!0}})),o&&o.add({command:a.createNew,category:l.__("Other"),rank:0}),m&&function(e,t,n){const a=n.load("jupyterlab"),r=t.serviceManager.terminals;class i{constructor(e){this._model=e}open(){t.commands.execute("terminal:open",{name:this._model.name})}icon(){return h.terminalIcon}label(){return`terminals/${this._model.name}`}shutdown(){return r.shutdown(this._model.name)}}e.add({name:a.__("Terminals"),running:()=>Array.from(r.running()).map((e=>new i(e))),shutdownAll:()=>r.shutdownAll(),refreshRunning:()=>r.refreshRunning(),runningChanged:r.runningChanged,shutdownLabel:a.__("Shut Down"),shutdownAllLabel:a.__("Shut Down All"),shutdownAllConfirmationText:a.__("Are you sure you want to permanently shut down all running terminals?")})}(m,e,n),b},id:"@jupyterlab/terminal-extension:plugin",provides:l.ITerminalTracker,requires:[m.ISettingRegistry,u.ITranslator],optional:[i.ICommandPalette,o.ILauncher,r.ILayoutRestorer,s.IMainMenu,i.IThemeManager,c.IRunningSessionManagers],autoStart:!0},w=_;function p(e,t,n,r,o){const s=r.load("jupyterlab"),{commands:c,serviceManager:m}=e,l=()=>null!==t.currentWidget&&t.currentWidget===e.shell.currentWidget;c.addCommand(a.createNew,{label:e=>e.isPalette?s.__("New Terminal"):s.__("Terminal"),caption:s.__("Start a new terminal session"),icon:e=>e.isPalette?void 0:h.terminalIcon,execute:async n=>{let a;try{a=(await y.ensureWidget()).Terminal}catch(e){return void y.showErrorMessage(e)}const s=n.name,c=n.cwd;let l;l=s?(await d.TerminalAPI.listRunning()).map((e=>e.name)).includes(s)?m.terminals.connectTo({model:{name:s}}):await m.terminals.startNew({name:s,cwd:c}):await m.terminals.startNew({cwd:c});const u=new a(l,o,r);u.title.icon=h.terminalIcon,u.title.label="...";const g=new i.MainAreaWidget({content:u});return e.shell.add(g,"main",{type:"Terminal"}),t.add(g),e.shell.activateById(g.id),g}}),c.addCommand(a.open,{label:s.__("Open a terminal by its `name`."),execute:n=>{const r=n.name,i=t.find((e=>e.content.session.name===r||!1));if(!i)return c.execute(a.createNew,{name:r});e.shell.activateById(i.id)}}),c.addCommand(a.refresh,{label:s.__("Refresh Terminal"),caption:s.__("Refresh the current terminal session"),execute:async()=>{const n=t.currentWidget;if(n){e.shell.activateById(n.id);try{await n.content.refresh(),n&&n.content.activate()}catch(e){y.showErrorMessage(e)}}},icon:e=>e.isPalette?void 0:h.refreshIcon.bindprops({stylesheet:"menuItem"}),isEnabled:l}),c.addCommand(a.copy,{execute:()=>{var e;const n=null===(e=t.currentWidget)||void 0===e?void 0:e.content;if(!n)return;const a=n.getSelection();a&&i.Clipboard.copyToSystem(a)},isEnabled:()=>{var e;if(!l())return!1;const n=null===(e=t.currentWidget)||void 0===e?void 0:e.content;return!!n&&n.hasSelection()},icon:h.copyIcon.bindprops({stylesheet:"menuItem"}),label:s.__("Copy")}),c.addCommand(a.paste,{execute:async()=>{var e;const n=null===(e=t.currentWidget)||void 0===e?void 0:e.content;if(!n)return;const a=window.navigator.clipboard,r=await a.readText();r&&n.paste(r)},isEnabled:()=>{var e;return Boolean(l()&&(null===(e=t.currentWidget)||void 0===e?void 0:e.content))},icon:h.pasteIcon.bindprops({stylesheet:"menuItem"}),label:s.__("Paste")}),c.addCommand(a.shutdown,{label:s.__("Shutdown Terminal"),execute:()=>{const e=t.currentWidget;if(e)return e.content.session.shutdown()},isEnabled:l}),c.addCommand(a.increaseFont,{label:s.__("Increase Terminal Font Size"),execute:async()=>{const{fontSize:e}=o;if(e&&e<72)try{await n.set(_.id,"fontSize",e+1)}catch(e){y.showErrorMessage(e)}}}),c.addCommand(a.decreaseFont,{label:s.__("Decrease Terminal Font Size"),execute:async()=>{const{fontSize:e}=o;if(e&&e>9)try{await n.set(_.id,"fontSize",e-1)}catch(e){y.showErrorMessage(e)}}});const u={inherit:s.__("Inherit"),light:s.__("Light"),dark:s.__("Dark")};c.addCommand(a.setTheme,{label:e=>{if(void 0===e.theme)return s.__("Set terminal theme to the provided `theme`.");const t=e.theme,n=t in u?u[t]:s.__(t[0].toUpperCase()+t.slice(1));return e.isPalette?s.__("Use Terminal Theme: %1",n):n},caption:s.__("Set the terminal theme"),isToggled:e=>{const{theme:t}=o;return e.theme===t},execute:async e=>{const t=e.theme;try{await n.set(_.id,"theme",t),c.notifyCommandChanged(a.setTheme)}catch(e){console.log(e),y.showErrorMessage(e)}}})}var y;!function(e){e.ensureWidget=function(){return e.widgetReady||(e.widgetReady=Promise.all([n.e(753),n.e(6103),n.e(8732),n.e(189)]).then(n.bind(n,40753))),e.widgetReady},e.showErrorMessage=function(e){console.error(`Failed to configure ${_.id}: ${e.message}`)}}(y||(y={}))}}]);