{"version":3,"file":"chunks/app_views_settings_project_projectServiceHookDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectServiceHookDetails.tsx","webpack:///./app/views/settings/project/serviceHookSettingsForm.tsx"],"sourcesContent":["import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {Button} from 'sentry/components/button';\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {t} from 'sentry/locale';\nimport {Organization, ServiceHook} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport ServiceHookSettingsForm from 'sentry/views/settings/project/serviceHookSettingsForm';\n\ntype Params = {\n  hookId: string;\n  orgId: string;\n  projectId: string;\n};\n\ntype StatsProps = {\n  params: Params;\n};\n\ntype StatsState = {\n  stats: {total: number; ts: number}[] | null;\n} & AsyncComponent['state'];\n\nclass HookStats extends AsyncComponent<StatsProps, StatsState> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const until = Math.floor(new Date().getTime() / 1000);\n    const since = until - 3600 * 24 * 30;\n    const {hookId, orgId, projectId} = this.props.params;\n    return [\n      [\n        'stats',\n        `/projects/${orgId}/${projectId}/hooks/${hookId}/stats/`,\n        {\n          query: {\n            since,\n            until,\n            resolution: '1d',\n          },\n        },\n      ],\n    ];\n  }\n\n  renderBody() {\n    const {stats} = this.state;\n    if (stats === null) {\n      return null;\n    }\n    let emptyStats = true;\n\n    const series = {\n      seriesName: t('Events'),\n      data: stats.map(p => {\n        if (p.total) {\n          emptyStats = false;\n        }\n        return {\n          name: p.ts * 1000,\n          value: p.total,\n        };\n      }),\n    };\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Events in the last 30 days (by day)')}</PanelHeader>\n        <PanelBody withPadding>\n          {!emptyStats ? (\n            <MiniBarChart\n              isGroupedByDate\n              showTimeInTooltip\n              labelYAxisExtents\n              series={[series]}\n              height={150}\n            />\n          ) : (\n            <EmptyMessage\n              title={t('Nothing recorded in the last 30 days.')}\n              description={t('Total webhooks fired for this configuration.')}\n            />\n          )}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\ntype Props = {\n  organization: Organization;\n  params: Params;\n};\ntype State = {\n  hook: ServiceHook | null;\n} & AsyncView['state'];\n\nexport default class ProjectServiceHookDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization} = this.props;\n    const {projectId, hookId} = this.props.params;\n    return [['hook', `/projects/${organization.slug}/${projectId}/hooks/${hookId}/`]];\n  }\n\n  onDelete = () => {\n    const {organization} = this.props;\n    const {projectId, hookId} = this.props.params;\n    addLoadingMessage(t('Saving changes\\u2026'));\n    this.api.request(`/projects/${organization.slug}/${projectId}/hooks/${hookId}/`, {\n      method: 'DELETE',\n      success: () => {\n        clearIndicators();\n        browserHistory.push(\n          normalizeUrl(`/settings/${organization.slug}/projects/${projectId}/hooks/`)\n        );\n      },\n      error: () => {\n        addErrorMessage(t('Unable to remove application. Please try again.'));\n      },\n    });\n  };\n\n  renderBody() {\n    const {organization} = this.props;\n    const {projectId, hookId} = this.props.params;\n    const {hook} = this.state;\n    if (!hook) {\n      return null;\n    }\n    const params = {...this.props.params, orgId: organization.slug};\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title={t('Service Hook Details')} />\n\n        <ErrorBoundary>\n          <HookStats params={params} />\n        </ErrorBoundary>\n\n        <ServiceHookSettingsForm\n          orgId={organization.slug}\n          projectId={projectId}\n          hookId={hookId}\n          initialData={{\n            ...hook,\n            isActive: hook.status !== 'disabled',\n          }}\n        />\n        <Panel>\n          <PanelHeader>{t('Event Validation')}</PanelHeader>\n          <PanelBody>\n            <PanelAlert type=\"info\" showIcon>\n              Sentry will send the <code>X-ServiceHook-Signature</code> header built using{' '}\n              <code>HMAC(SHA256, [secret], [payload])</code>. You should always verify\n              this signature before trusting the information provided in the webhook.\n            </PanelAlert>\n            <FieldGroup\n              label={t('Secret')}\n              flexibleControlStateSize\n              inline={false}\n              help={t('The shared secret used for generating event HMAC signatures.')}\n            >\n              <TextCopyInput>\n                {getDynamicText({\n                  value: hook.secret,\n                  fixed: 'a dynamic secret value',\n                })}\n              </TextCopyInput>\n            </FieldGroup>\n          </PanelBody>\n        </Panel>\n        <Panel>\n          <PanelHeader>{t('Delete Hook')}</PanelHeader>\n          <PanelBody>\n            <FieldGroup\n              label={t('Delete Hook')}\n              help={t('Removing this hook is immediate and permanent.')}\n            >\n              <div>\n                <Button priority=\"danger\" onClick={this.onDelete}>\n                  {t('Delete Hook')}\n                </Button>\n              </div>\n            </FieldGroup>\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport ApiForm from 'sentry/components/forms/apiForm';\nimport MultipleCheckbox from 'sentry/components/forms/controls/multipleCheckbox';\nimport BooleanField from 'sentry/components/forms/fields/booleanField';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport FormField from 'sentry/components/forms/formField';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {ServiceHook} from 'sentry/types';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\nconst EVENT_CHOICES = ['event.alert', 'event.created'];\n\ntype Props = {\n  initialData: Partial<ServiceHook> & {isActive: boolean};\n  orgId: string;\n  projectId: string;\n  hookId?: string;\n};\n\nexport default class ServiceHookSettingsForm extends Component<Props> {\n  onSubmitSuccess = () => {\n    const {orgId, projectId} = this.props;\n    browserHistory.push(normalizeUrl(`/settings/${orgId}/projects/${projectId}/hooks/`));\n  };\n\n  render() {\n    const {initialData, orgId, projectId, hookId} = this.props;\n\n    const endpoint = hookId\n      ? `/projects/${orgId}/${projectId}/hooks/${hookId}/`\n      : `/projects/${orgId}/${projectId}/hooks/`;\n\n    return (\n      <Panel>\n        <ApiForm\n          apiMethod={hookId ? 'PUT' : 'POST'}\n          apiEndpoint={endpoint}\n          initialData={initialData}\n          onSubmitSuccess={this.onSubmitSuccess}\n          footerStyle={{\n            marginTop: 0,\n            paddingRight: 20,\n          }}\n          submitLabel={hookId ? t('Save Changes') : t('Create Hook')}\n        >\n          <PanelHeader>{t('Hook Configuration')}</PanelHeader>\n          <PanelBody>\n            <BooleanField name=\"isActive\" label={t('Active')} />\n            <TextField\n              name=\"url\"\n              label={t('URL')}\n              required\n              help={t('The URL which will receive events.')}\n            />\n            <FormField\n              name=\"events\"\n              label={t('Events')}\n              inline={false}\n              help={t('The event types you wish to subscribe to.')}\n            >\n              {({name, value, onChange}) => (\n                <MultipleCheckbox onChange={onChange} value={value} name={name}>\n                  {EVENT_CHOICES.map(event => (\n                    <MultipleCheckbox.Item key={event} value={event}>\n                      {event}\n                    </MultipleCheckbox.Item>\n                  ))}\n                </MultipleCheckbox>\n              )}\n            </FormField>\n          </PanelBody>\n        </ApiForm>\n      </Panel>\n    );\n  }\n}\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","HookStats","getEndpoints","until","Math","floor","Date","getTime","since","hookId","orgId","projectId","props","params","query","resolution","renderBody","stats","state","emptyStats","series","seriesName","t","data","map","p","total","name","ts","value","withPadding","description","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","height","ProjectServiceHookDetails","organization","addLoadingMessage","api","request","slug","method","success","clearIndicators","browserHistory","normalizeUrl","error","addErrorMessage","hook","Fragment","initialData","isActive","status","type","showIcon","label","flexibleControlStateSize","inline","help","getDynamicText","secret","fixed","priority","onClick","onDelete","EVENT_CHOICES","ServiceHookSettingsForm","Component","endpoint","apiMethod","apiEndpoint","onSubmitSuccess","footerStyle","marginTop","paddingRight","submitLabel","required","onChange","event"],"sourceRoot":""}