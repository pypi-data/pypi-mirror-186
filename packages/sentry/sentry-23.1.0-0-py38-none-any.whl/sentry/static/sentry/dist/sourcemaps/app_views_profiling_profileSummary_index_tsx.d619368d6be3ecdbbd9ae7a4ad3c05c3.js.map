{"version":3,"file":"chunks/app_views_profiling_profileSummary_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/profiling/breadcrumb.tsx","webpack:///./app/views/profiling/profileSummary/index.tsx"],"sourcesContent":["import {useMemo} from 'react';\nimport {Location} from 'history';\nimport omit from 'lodash/omit';\n\nimport _Breadcrumbs, {Crumb} from 'sentry/components/breadcrumbs';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {\n  generateProfileDetailsRouteWithQuery,\n  generateProfileFlamechartRouteWithQuery,\n  generateProfileSummaryRouteWithQuery,\n  generateProfilingRouteWithQuery,\n} from 'sentry/utils/profiling/routes';\n\ninterface BreadcrumbsProps {\n  organization: Organization;\n  trails: Trail[];\n}\n\nfunction Breadcrumb({organization, trails}: BreadcrumbsProps) {\n  const crumbs = useMemo(\n    () => trails.map(trail => trailToCrumb(trail, {organization})),\n    [organization, trails]\n  );\n  return <_Breadcrumbs crumbs={crumbs} />;\n}\n\nfunction trailToCrumb(\n  trail: Trail,\n  {\n    organization,\n  }: {\n    organization: Organization;\n  }\n): Crumb {\n  switch (trail.type) {\n    case 'landing': {\n      return {\n        to: generateProfilingRouteWithQuery({\n          // cursor and query are not used in the landing page\n          // and break the API call as the qs gets forwarded to the API\n          query: omit(trail.payload.query, ['cursor', 'query']),\n          orgSlug: organization.slug,\n        }),\n        label: t('Profiling'),\n        preservePageFilters: true,\n      };\n    }\n    case 'profile summary': {\n      return {\n        to: generateProfileSummaryRouteWithQuery({\n          // cursor and query are not used in the summary page\n          // and break the API call as the qs gets forwarded to the API\n          query: omit(trail.payload.query, ['cursor', 'query']),\n          orgSlug: organization.slug,\n          projectSlug: trail.payload.projectSlug,\n          transaction: trail.payload.transaction,\n        }),\n        label: t('Profile Summary'),\n        preservePageFilters: true,\n      };\n    }\n    case 'flamechart': {\n      const generateRouteWithQuery =\n        trail.payload.tab === 'flamechart'\n          ? generateProfileFlamechartRouteWithQuery\n          : generateProfileDetailsRouteWithQuery;\n      return {\n        to: generateRouteWithQuery({\n          query: trail.payload.query,\n          orgSlug: organization.slug,\n          projectSlug: trail.payload.projectSlug,\n          profileId: trail.payload.profileId,\n        }),\n        label: trail.payload.transaction,\n        preservePageFilters: true,\n      };\n    }\n    default:\n      throw new Error(`Unknown breadcrumb type: ${JSON.stringify(trail)}`);\n  }\n}\n\ntype ProfilingTrail = {\n  payload: {\n    query: Location['query'];\n  };\n  type: 'landing';\n};\n\ntype ProfileSummaryTrail = {\n  payload: {\n    projectSlug: Project['slug'];\n    query: Location['query'];\n    transaction: string;\n  };\n  type: 'profile summary';\n};\n\ntype FlamegraphTrail = {\n  payload: {\n    profileId: string;\n    projectSlug: string;\n    query: Location['query'];\n    tab: 'flamechart' | 'details';\n    transaction: string;\n  };\n  type: 'flamechart';\n};\n\ntype Trail = ProfilingTrail | ProfileSummaryTrail | FlamegraphTrail;\n\nexport {Breadcrumb};\n","import {Fragment, useCallback, useEffect, useMemo} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport IdBadge from 'sentry/components/idBadge';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport {Breadcrumb} from 'sentry/components/profiling/breadcrumb';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport SmartSearchBar, {SmartSearchBarProps} from 'sentry/components/smartSearchBar';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {PageFilters, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {isAggregateField} from 'sentry/utils/discover/fields';\nimport {useProfileFilters} from 'sentry/utils/profiling/hooks/useProfileFilters';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport {ProfileSummaryContent} from './content';\n\ninterface ProfileSummaryPageProps {\n  location: Location;\n  params: {\n    projectId?: Project['slug'];\n  };\n  selection: PageFilters;\n}\n\nfunction ProfileSummaryPage(props: ProfileSummaryPageProps) {\n  const organization = useOrganization();\n  const {projects} = useProjects({\n    slugs: defined(props.params.projectId) ? [props.params.projectId] : [],\n  });\n\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('profiling_views.profile_summary', {\n      organization,\n    });\n  }, [organization]);\n\n  // Extract the project matching the provided project slug,\n  // if it doesn't exist, set this to null and handle it accordingly.\n  const project = projects.length === 1 ? projects[0] : null;\n\n  const transaction = decodeScalar(props.location.query.transaction);\n\n  const rawQuery = useMemo(\n    () => decodeScalar(props.location.query.query, ''),\n    [props.location.query.query]\n  );\n\n  const query = useMemo(() => {\n    const search = new MutableSearch(rawQuery);\n\n    if (defined(transaction)) {\n      search.setFilterValues('transaction', [transaction]);\n    }\n\n    // there are no aggregations happening on this page,\n    // so remove any aggregate filters\n    Object.keys(search.filters).forEach(field => {\n      if (isAggregateField(field)) {\n        search.removeFilter(field);\n      }\n    });\n\n    return search.formatString();\n  }, [rawQuery, transaction]);\n\n  const filtersQuery = useMemo(() => {\n    // To avoid querying for the filters each time the query changes,\n    // do not pass the user query to get the filters.\n    const search = new MutableSearch('');\n\n    if (defined(transaction)) {\n      search.setFilterValues('transaction_name', [transaction]);\n    }\n\n    return search.formatString();\n  }, [transaction]);\n\n  const profileFilters = useProfileFilters({\n    query: filtersQuery,\n    selection: props.selection,\n  });\n\n  const handleSearch: SmartSearchBarProps['onSearch'] = useCallback(\n    (searchQuery: string) => {\n      browserHistory.push({\n        ...props.location,\n        query: {\n          ...props.location.query,\n          query: searchQuery || undefined,\n          cursor: undefined,\n        },\n      });\n    },\n    [props.location]\n  );\n\n  return (\n    <SentryDocumentTitle\n      title={t('Profiling \\u2014 Profile Summary')}\n      orgSlug={organization.slug}\n    >\n      <PageFiltersContainer\n        shouldForceProject={defined(project)}\n        forceProject={project}\n        specificProjectSlugs={defined(project) ? [project.slug] : []}\n      >\n        <NoProjectMessage organization={organization}>\n          <Layout.Page>\n            {project && transaction && (\n              <Fragment>\n                <Layout.Header>\n                  <Layout.HeaderContent>\n                    <Breadcrumb\n                      organization={organization}\n                      trails={[\n                        {\n                          type: 'landing',\n                          payload: {\n                            query: props.location.query,\n                          },\n                        },\n                        {\n                          type: 'profile summary',\n                          payload: {\n                            projectSlug: project.slug,\n                            query: props.location.query,\n                            transaction,\n                          },\n                        },\n                      ]}\n                    />\n                    <Layout.Title>\n                      {project ? (\n                        <IdBadge\n                          project={project}\n                          avatarSize={28}\n                          hideName\n                          avatarProps={{hasTooltip: true, tooltip: project.slug}}\n                        />\n                      ) : null}\n                      {transaction}\n                    </Layout.Title>\n                  </Layout.HeaderContent>\n                </Layout.Header>\n                <Layout.Body>\n                  <Layout.Main fullWidth>\n                    <ActionBar>\n                      <PageFilterBar condensed>\n                        <EnvironmentPageFilter />\n                        <DatePageFilter alignDropdown=\"left\" />\n                      </PageFilterBar>\n                      <SmartSearchBar\n                        organization={organization}\n                        hasRecentSearches\n                        searchSource=\"profile_summary\"\n                        supportedTags={profileFilters}\n                        query={rawQuery}\n                        onSearch={handleSearch}\n                        maxQueryLength={MAX_QUERY_LENGTH}\n                      />\n                    </ActionBar>\n                    <ProfileSummaryContent\n                      location={props.location}\n                      project={project}\n                      selection={props.selection}\n                      transaction={transaction}\n                      query={query}\n                    />\n                  </Layout.Main>\n                </Layout.Body>\n              </Fragment>\n            )}\n          </Layout.Page>\n        </NoProjectMessage>\n      </PageFiltersContainer>\n    </SentryDocumentTitle>\n  );\n}\n\nconst ActionBar = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  grid-template-columns: min-content auto;\n  margin-bottom: ${space(2)};\n`;\n\nexport default withPageFilters(ProfileSummaryPage);\n"],"names":["Breadcrumb","organization","trails","crumbs","useMemo","map","trail","type","to","generateProfilingRouteWithQuery","query","omit","payload","orgSlug","slug","label","t","preservePageFilters","generateProfileSummaryRouteWithQuery","projectSlug","transaction","tab","generateProfileFlamechartRouteWithQuery","generateProfileDetailsRouteWithQuery","profileId","Error","JSON","stringify","trailToCrumb","ProfileSummaryPage","props","useOrganization","projects","useProjects","slugs","defined","params","projectId","useEffect","trackAdvancedAnalyticsEvent","project","length","decodeScalar","location","rawQuery","search","MutableSearch","setFilterValues","Object","keys","filters","forEach","field","isAggregateField","removeFilter","formatString","filtersQuery","profileFilters","useProfileFilters","selection","handleSearch","useCallback","searchQuery","browserHistory","undefined","cursor","title","shouldForceProject","forceProject","specificProjectSlugs","Fragment","avatarSize","hideName","avatarProps","hasTooltip","tooltip","fullWidth","ActionBar","condensed","alignDropdown","hasRecentSearches","searchSource","supportedTags","onSearch","maxQueryLength","MAX_QUERY_LENGTH","space","withPageFilters"],"sourceRoot":""}