{"version":3,"file":"chunks/app_views_settings_project_projectSettingsLayout_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/projects/appStoreConnectContext.tsx","webpack:///./app/components/projects/missingProjectMembership.tsx","webpack:///./app/utils/appStoreValidationErrorMessage.tsx","webpack:///./app/views/projects/projectContext.tsx","webpack:///./app/views/settings/project/projectSettingsNavigation.tsx","webpack:///./app/views/settings/project/projectSettingsLayout.tsx"],"sourcesContent":["import {createContext, useEffect, useMemo, useState} from 'react';\n\nimport {Organization, Project} from 'sentry/types';\nimport {\n  AppStoreConnectCredentialsStatus,\n  AppStoreConnectStatusData,\n} from 'sentry/types/debugFiles';\nimport {getAppStoreValidationErrorMessage} from 'sentry/utils/appStoreValidationErrorMessage';\nimport useApi from 'sentry/utils/useApi';\n\nexport type AppStoreConnectContextProps =\n  | Record<string, AppStoreConnectStatusData>\n  | undefined;\n\nconst AppStoreConnectContext = createContext<AppStoreConnectContextProps>(undefined);\n\ntype ProviderProps = {\n  children: React.ReactNode;\n  organization: Organization;\n  project?: Project;\n};\n\nconst Provider = ({children, project, organization}: ProviderProps) => {\n  const api = useApi();\n\n  const [projectDetails, setProjectDetails] = useState<undefined | Project>();\n  const [appStoreConnectStatusData, setAppStoreConnectStatusData] =\n    useState<AppStoreConnectContextProps>(undefined);\n\n  const appStoreConnectSymbolSources = useMemo(() => {\n    return (\n      projectDetails?.symbolSources ? JSON.parse(projectDetails.symbolSources) : []\n    ).reduce((acc, {type, id, ...symbolSource}) => {\n      if (type.toLowerCase() === 'appstoreconnect') {\n        acc[id] = {type, ...symbolSource};\n      }\n      return acc;\n    }, {});\n  }, [projectDetails?.symbolSources]);\n\n  useEffect(() => {\n    if (!project || projectDetails) {\n      return undefined;\n    }\n\n    if (project.symbolSources) {\n      setProjectDetails(project);\n      return undefined;\n    }\n\n    let unmounted = false;\n\n    api\n      .requestPromise(`/projects/${organization.slug}/${project.slug}/`)\n      .then(responseProjectDetails => {\n        if (unmounted) {\n          return;\n        }\n\n        setProjectDetails(responseProjectDetails);\n      })\n      .catch(() => {\n        // We do not care about the error\n      });\n\n    return () => {\n      unmounted = true;\n    };\n  }, [project, organization, api]);\n\n  useEffect(() => {\n    if (!projectDetails) {\n      return undefined;\n    }\n\n    if (!Object.keys(appStoreConnectSymbolSources).length) {\n      return undefined;\n    }\n\n    let unmounted = false;\n\n    api\n      .requestPromise(\n        `/projects/${organization.slug}/${projectDetails.slug}/appstoreconnect/status/`\n      )\n      .then(appStoreConnectStatus => {\n        if (unmounted) {\n          return;\n        }\n        setAppStoreConnectStatusData(appStoreConnectStatus);\n      })\n      .catch(() => {\n        // We do not care about the error\n      });\n\n    return () => {\n      unmounted = true;\n    };\n  }, [projectDetails, organization, appStoreConnectSymbolSources, api]);\n\n  function getUpdateAlertMessage(\n    respository: NonNullable<Parameters<typeof getAppStoreValidationErrorMessage>[1]>,\n    credentials: AppStoreConnectCredentialsStatus\n  ) {\n    if (credentials?.status === 'valid') {\n      return undefined;\n    }\n\n    return getAppStoreValidationErrorMessage(credentials, respository);\n  }\n\n  return (\n    <AppStoreConnectContext.Provider\n      value={\n        appStoreConnectStatusData && project\n          ? Object.keys(appStoreConnectStatusData).reduce((acc, key) => {\n              const appStoreConnect = appStoreConnectStatusData[key];\n              return {\n                ...acc,\n                [key]: {\n                  ...appStoreConnect,\n                  updateAlertMessage: getUpdateAlertMessage(\n                    {\n                      name: appStoreConnectSymbolSources[key].name,\n                      link: `/settings/${organization.slug}/projects/${project.slug}/debug-symbols/?customRepository=${key}`,\n                    },\n                    appStoreConnect.credentials\n                  ),\n                },\n              };\n            }, {})\n          : undefined\n      }\n    >\n      {children}\n    </AppStoreConnectContext.Provider>\n  );\n};\n\nexport {Provider};\n\nexport default AppStoreConnectContext;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {joinTeam} from 'sentry/actionCreators/teams';\nimport {Client} from 'sentry/api';\nimport {Button} from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport {Panel} from 'sentry/components/panels';\nimport {IconFlag} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport TeamStore from 'sentry/stores/teamStore';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  project?: Project | null;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  team: string | null;\n  project?: Project | null;\n};\n\nclass MissingProjectMembership extends Component<Props, State> {\n  state: State = {\n    loading: false,\n    error: false,\n    project: this.props.project,\n    team: '',\n  };\n\n  joinTeam(teamSlug: string) {\n    this.setState({\n      loading: true,\n    });\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: this.props.organization.slug,\n        teamId: teamSlug,\n      },\n      {\n        success: () => {\n          this.setState({\n            loading: false,\n            error: false,\n          });\n          addSuccessMessage(t('Request to join team sent.'));\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n            error: true,\n          });\n          addErrorMessage(t('There was an error while trying to request access.'));\n        },\n      }\n    );\n  }\n\n  renderJoinTeam(teamSlug: string, features: Set<string>) {\n    const team = TeamStore.getBySlug(teamSlug);\n\n    if (!team) {\n      return null;\n    }\n    if (this.state.loading) {\n      if (features.has('open-membership')) {\n        return <Button busy>{t('Join Team')}</Button>;\n      }\n      return <Button busy>{t('Request Access')}</Button>;\n    }\n    if (team?.isPending) {\n      return <Button disabled>{t('Request Pending')}</Button>;\n    }\n    if (features.has('open-membership')) {\n      return (\n        <Button priority=\"primary\" onClick={this.joinTeam.bind(this, teamSlug)}>\n          {t('Join Team')}\n        </Button>\n      );\n    }\n    return (\n      <Button priority=\"primary\" onClick={this.joinTeam.bind(this, teamSlug)}>\n        {t('Request Access')}\n      </Button>\n    );\n  }\n\n  getTeamsForAccess() {\n    const request: string[] = [];\n    const pending: string[] = [];\n    const teams = this.state.project?.teams ?? [];\n    teams.forEach(({slug}) => {\n      const team = TeamStore.getBySlug(slug);\n      if (!team) {\n        return;\n      }\n      team.isPending ? pending.push(team.slug) : request.push(team.slug);\n    });\n\n    return [request, pending];\n  }\n\n  getPendingTeamOption = (team: string) => {\n    return {\n      value: team,\n      label: <DisabledLabel>{`#${team}`}</DisabledLabel>,\n    };\n  };\n\n  render() {\n    const {organization} = this.props;\n    const teamSlug = this.state.team;\n    const teams = this.state.project?.teams ?? [];\n    const features = new Set(organization.features);\n\n    const teamAccess = [\n      {\n        label: t('Request Access'),\n        options: this.getTeamsForAccess()[0].map(request => ({\n          value: request,\n          label: `#${request}`,\n        })),\n      },\n      {\n        label: t('Pending Requests'),\n        options: this.getTeamsForAccess()[1].map(pending =>\n          this.getPendingTeamOption(pending)\n        ),\n      },\n    ];\n\n    return (\n      <StyledPanel>\n        {!teams.length ? (\n          <EmptyMessage icon={<IconFlag size=\"xl\" />}>\n            {t(\n              'No teams have access to this project yet. Ask an admin to add your team to this project.'\n            )}\n          </EmptyMessage>\n        ) : (\n          <EmptyMessage\n            icon={<IconFlag size=\"xl\" />}\n            title={t(\"You're not a member of this project.\")}\n            description={t(\n              `You'll need to join a team with access before you can view this data.`\n            )}\n            action={\n              <Field>\n                <StyledSelectControl\n                  name=\"select\"\n                  placeholder={t('Select a Team')}\n                  options={teamAccess}\n                  onChange={teamObj => {\n                    const team = teamObj ? teamObj.value : null;\n                    this.setState({team});\n                  }}\n                />\n                {teamSlug ? (\n                  this.renderJoinTeam(teamSlug, features)\n                ) : (\n                  <Button disabled>{t('Select a Team')}</Button>\n                )}\n              </Field>\n            }\n          />\n        )}\n      </StyledPanel>\n    );\n  }\n}\n\nconst StyledPanel = styled(Panel)`\n  margin: ${space(2)} 0;\n`;\n\nconst Field = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  gap: ${space(2)};\n  text-align: left;\n`;\n\nconst StyledSelectControl = styled(SelectControl)`\n  width: 250px;\n`;\n\nconst DisabledLabel = styled('div')`\n  display: flex;\n  opacity: 0.5;\n  overflow: hidden;\n`;\n\nexport default withApi(MissingProjectMembership);\n","import * as Sentry from '@sentry/react';\n\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport {AppStoreConnectValidationError} from 'sentry/types/debugFiles';\n\nexport const unexpectedErrorMessage = t(\n  'An unexpected error occurred while configuring the App Store Connect integration'\n);\n\nexport function getAppStoreValidationErrorMessage(\n  error: AppStoreConnectValidationError,\n  repo?: {link: string; name: string}\n) {\n  switch (error.code) {\n    case 'app-connect-authentication-error':\n      return repo\n        ? tct(\n            'App Store Connect credentials are invalid or missing. [linkToCustomRepository]',\n            {\n              linkToCustomRepository: (\n                <Link to={repo.link}>\n                  {tct(\n                    \"Make sure the credentials of the '[customRepositoryName]' repository are correct and exist.\",\n                    {\n                      customRepositoryName: repo.name,\n                    }\n                  )}\n                </Link>\n              ),\n            }\n          )\n        : t('The supplied App Store Connect credentials are invalid or missing.');\n    case 'app-connect-forbidden-error':\n      return t('The supplied API key does not have sufficient permissions.');\n    case 'app-connect-multiple-sources-error':\n      return t('Only one App Store Connect application is allowed in this project.');\n    default: {\n      // this shall not happen\n      Sentry.captureException(new Error('Unknown app store connect error.'));\n      return unexpectedErrorMessage;\n    }\n  }\n}\n","import {Component, createRef} from 'react';\nimport DocumentTitle from 'react-document-title';\nimport styled from '@emotion/styled';\n\nimport {fetchOrgMembers} from 'sentry/actionCreators/members';\nimport {setActiveProject} from 'sentry/actionCreators/projects';\nimport {Client} from 'sentry/api';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport MissingProjectMembership from 'sentry/components/projects/missingProjectMembership';\nimport {t} from 'sentry/locale';\nimport SentryTypes from 'sentry/sentryTypes';\nimport MemberListStore from 'sentry/stores/memberListStore';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport space from 'sentry/styles/space';\nimport {Organization, Project, User} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\n\nenum ErrorTypes {\n  MISSING_MEMBERSHIP = 'MISSING_MEMBERSHIP',\n  PROJECT_NOT_FOUND = 'PROJECT_NOT_FOUND',\n  UNKNOWN = 'UNKNOWN',\n}\n\ntype ChildFuncProps = {\n  project: Project;\n};\n\ntype Props = {\n  api: Client;\n  children: ((props: ChildFuncProps) => React.ReactNode) | React.ReactNode;\n  loadingProjects: boolean;\n  orgId: string;\n  organization: Organization;\n  projectId: string;\n  projects: Project[];\n  /**\n   * If true, this will not change `state.loading` during `fetchData` phase\n   */\n  skipReload?: boolean;\n};\n\ntype State = {\n  error: boolean;\n  errorType: ErrorTypes | null;\n  loading: boolean;\n  memberList: User[];\n  project: Project | null;\n};\n\n/**\n * Higher-order component that sets `project` as a child context\n * value to be accessed by child elements.\n *\n * Additionally delays rendering of children until project XHR has finished\n * and context is populated.\n */\nclass ProjectContext extends Component<Props, State> {\n  static childContextTypes = {\n    project: SentryTypes.Project,\n  };\n\n  state = this.getInitialState();\n\n  getInitialState(): State {\n    return {\n      loading: true,\n      error: false,\n      errorType: null,\n      memberList: [],\n      project: null,\n    };\n  }\n\n  getChildContext() {\n    return {\n      project: this.state.project,\n    };\n  }\n\n  componentDidMount() {\n    // Wait for withProjects to fetch projects before making request\n    // Once loaded we can fetchData in componentDidUpdate\n    const {loadingProjects} = this.props;\n    if (!loadingProjects) {\n      this.fetchData();\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.projectId === this.props.projectId) {\n      return;\n    }\n\n    if (!nextProps.skipReload) {\n      this.remountComponent();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (prevProps.projectId !== this.props.projectId) {\n      this.fetchData();\n    }\n\n    // Project list has changed. Likely indicating that a new project has been\n    // added. Re-fetch project details in case that the new project is the active\n    // project.\n    //\n    // For now, only compare lengths. It is possible that project slugs within\n    // the list could change, but it doesn't seem to be broken anywhere else at\n    // the moment that would require deeper checks.\n    if (prevProps.projects.length !== this.props.projects.length) {\n      this.fetchData();\n    }\n\n    // Call forceUpdate() on <DocumentTitle/> if either project or organization\n    // state has changed. This is because <DocumentTitle/>'s shouldComponentUpdate()\n    // returns false unless props differ; meaning context changes for project/org\n    // do NOT trigger renders for <DocumentTitle/> OR any subchildren. The end result\n    // being that child elements that listen for context changes on project/org will\n    // NOT update (without this hack).\n    // See: https://github.com/gaearon/react-document-title/issues/35\n\n    // intentionally shallow comparing references\n    if (prevState.project !== this.state.project) {\n      const docTitle = this.docTitleRef.current;\n      if (!docTitle) {\n        return;\n      }\n      docTitle.forceUpdate();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeMembers();\n    this.unsubscribeProjects();\n  }\n\n  docTitleRef = createRef<DocumentTitle>();\n\n  unsubscribeProjects = ProjectsStore.listen(\n    (projectIds: Set<string>) => this.onProjectChange(projectIds),\n    undefined\n  );\n\n  unsubscribeMembers = MemberListStore.listen(\n    (memberList: typeof MemberListStore['state']) => this.setState({memberList}),\n    undefined\n  );\n\n  remountComponent() {\n    this.setState(this.getInitialState());\n  }\n\n  getTitle() {\n    return this.state.project?.slug ?? 'Sentry';\n  }\n\n  onProjectChange(projectIds: Set<string>) {\n    if (!this.state.project) {\n      return;\n    }\n    if (!projectIds.has(this.state.project.id)) {\n      return;\n    }\n    this.setState({\n      project: {...ProjectsStore.getById(this.state.project.id)} as Project,\n    });\n  }\n\n  identifyProject() {\n    const {projects, projectId} = this.props;\n    const projectSlug = projectId;\n    return projects.find(({slug}) => slug === projectSlug) || null;\n  }\n\n  async fetchData() {\n    const {orgId, projectId, skipReload} = this.props;\n    // we fetch core access/information from the global organization data\n    const activeProject = this.identifyProject();\n    const hasAccess = activeProject && activeProject.hasAccess;\n\n    this.setState((state: State) => ({\n      // if `skipReload` is true, then don't change loading state\n      loading: skipReload ? state.loading : true,\n      // we bind project initially, but it'll rebind\n      project: activeProject,\n    }));\n\n    if (activeProject && hasAccess) {\n      setActiveProject(null);\n      const projectRequest = this.props.api.requestPromise(\n        `/projects/${orgId}/${projectId}/`\n      );\n\n      try {\n        const project = await projectRequest;\n        this.setState({\n          loading: false,\n          project,\n          error: false,\n          errorType: null,\n        });\n\n        // assuming here that this means the project is considered the active project\n        setActiveProject(project);\n      } catch (error) {\n        this.setState({\n          loading: false,\n          error: false,\n          errorType: ErrorTypes.UNKNOWN,\n        });\n      }\n\n      fetchOrgMembers(this.props.api, orgId, [activeProject.id]);\n\n      return;\n    }\n\n    // User is not a memberof the active project\n    if (activeProject && !activeProject.isMember) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.MISSING_MEMBERSHIP,\n      });\n\n      return;\n    }\n\n    // There is no active project. This likely indicates either the project\n    // *does not exist* or the project has not yet been added to the store.\n    // Either way, make a request to check for existence of the project.\n    try {\n      await this.props.api.requestPromise(`/projects/${orgId}/${projectId}/`);\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.PROJECT_NOT_FOUND,\n      });\n    }\n  }\n\n  renderBody() {\n    const {children, organization} = this.props;\n    const {error, errorType, loading, project} = this.state;\n\n    if (loading) {\n      return (\n        <div className=\"loading-full-layout\">\n          <LoadingIndicator />\n        </div>\n      );\n    }\n\n    if (!error && project) {\n      return typeof children === 'function' ? children({project}) : children;\n    }\n\n    switch (errorType) {\n      case ErrorTypes.PROJECT_NOT_FOUND:\n        // TODO(chrissy): use scale for margin values\n        return (\n          <div className=\"container\">\n            <div className=\"alert alert-block\" style={{margin: '30px 0 10px'}}>\n              {t('The project you were looking for was not found.')}\n            </div>\n          </div>\n        );\n      case ErrorTypes.MISSING_MEMBERSHIP:\n        // TODO(dcramer): add various controls to improve this flow and break it\n        // out into a reusable missing access error component\n        return (\n          <ErrorWrapper>\n            <MissingProjectMembership organization={organization} project={project} />\n          </ErrorWrapper>\n        );\n      default:\n        return <LoadingError onRetry={this.remountComponent} />;\n    }\n  }\n\n  render() {\n    return (\n      <DocumentTitle ref={this.docTitleRef} title={this.getTitle()}>\n        {this.renderBody()}\n      </DocumentTitle>\n    );\n  }\n}\n\nexport {ProjectContext};\n\nexport default withApi(withOrganization(withProjects(ProjectContext)));\n\nconst ErrorWrapper = styled('div')`\n  width: 100%;\n  margin: ${space(2)} ${space(4)};\n`;\n","import {useContext} from 'react';\n\nimport AppStoreConnectContext from 'sentry/components/projects/appStoreConnectContext';\nimport {Organization, Project} from 'sentry/types';\nimport withProject from 'sentry/utils/withProject';\nimport SettingsNavigation from 'sentry/views/settings/components/settingsNavigation';\nimport getConfiguration from 'sentry/views/settings/project/navigationConfiguration';\n\ntype Props = {\n  organization: Organization;\n  project?: Project;\n};\n\nconst ProjectSettingsNavigation = ({organization, project}: Props) => {\n  const appStoreConnectContext = useContext(AppStoreConnectContext);\n\n  const debugFilesNeedsReview = appStoreConnectContext\n    ? Object.keys(appStoreConnectContext).some(\n        key => appStoreConnectContext[key].credentials.status === 'invalid'\n      )\n    : false;\n\n  return (\n    <SettingsNavigation\n      navigationObjects={getConfiguration({project, organization, debugFilesNeedsReview})}\n      access={new Set(organization.access)}\n      features={new Set(organization.features)}\n      organization={organization}\n      project={project}\n    />\n  );\n};\n\nexport default withProject(ProjectSettingsNavigation);\n","import {cloneElement, isValidElement} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport * as AppStoreConnectContext from 'sentry/components/projects/appStoreConnectContext';\nimport {Organization, Project} from 'sentry/types';\nimport useRouteAnalyticsParams from 'sentry/utils/routeAnalytics/useRouteAnalyticsParams';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport ProjectContext from 'sentry/views/projects/projectContext';\nimport SettingsLayout from 'sentry/views/settings/components/settingsLayout';\nimport ProjectSettingsNavigation from 'sentry/views/settings/project/projectSettingsNavigation';\n\ntype Props = {\n  children: React.ReactNode;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype InnerProps = Props & {project: Project};\n\nfunction InnerProjectSettingsLayout({\n  params,\n  routes,\n  project,\n  organization,\n  children,\n  ...props\n}: InnerProps) {\n  // set analytics params for route based analytics\n  useRouteAnalyticsParams({\n    project_id: project.id,\n    project_platform: project.platform,\n  });\n  return (\n    <AppStoreConnectContext.Provider project={project} organization={organization}>\n      <SettingsLayout\n        params={params}\n        routes={routes}\n        {...props}\n        renderNavigation={() => <ProjectSettingsNavigation organization={organization} />}\n      >\n        {children && isValidElement(children)\n          ? cloneElement<any>(children, {organization, project})\n          : children}\n      </SettingsLayout>\n    </AppStoreConnectContext.Provider>\n  );\n}\n\nfunction ProjectSettingsLayout({organization, params, ...props}: Props) {\n  return (\n    <ProjectContext orgId={organization.slug} projectId={params.projectId}>\n      {({project}) => (\n        <InnerProjectSettingsLayout {...{params, project, organization, ...props}} />\n      )}\n    </ProjectContext>\n  );\n}\n\nexport default withOrganization(ProjectSettingsLayout);\n"],"names":["AppStoreConnectContext","createContext","undefined","Provider","children","project","organization","api","useApi","projectDetails","setProjectDetails","useState","appStoreConnectStatusData","setAppStoreConnectStatusData","appStoreConnectSymbolSources","useMemo","symbolSources","JSON","parse","reduce","acc","type","id","symbolSource","toLowerCase","getUpdateAlertMessage","respository","credentials","status","getAppStoreValidationErrorMessage","useEffect","unmounted","requestPromise","slug","then","responseProjectDetails","catch","Object","keys","length","appStoreConnectStatus","value","key","appStoreConnect","updateAlertMessage","name","link","MissingProjectMembership","Component","loading","error","this","props","team","label","DisabledLabel","joinTeam","teamSlug","setState","orgId","teamId","success","addSuccessMessage","t","addErrorMessage","renderJoinTeam","features","TeamStore","state","has","busy","isPending","disabled","priority","onClick","bind","getTeamsForAccess","request","pending","teams","forEach","push","render","Set","teamAccess","options","map","getPendingTeamOption","StyledPanel","icon","size","title","description","action","Field","StyledSelectControl","placeholder","onChange","teamObj","Panel","space","SelectControl","withApi","unexpectedErrorMessage","repo","code","tct","linkToCustomRepository","to","customRepositoryName","Sentry","Error","ErrorTypes","ProjectContext","getInitialState","createRef","ProjectsStore","projectIds","onProjectChange","MemberListStore","memberList","errorType","getChildContext","componentDidMount","loadingProjects","fetchData","componentWillReceiveProps","nextProps","projectId","skipReload","remountComponent","componentDidUpdate","prevProps","prevState","projects","docTitle","docTitleRef","current","forceUpdate","componentWillUnmount","unsubscribeMembers","unsubscribeProjects","getTitle","identifyProject","projectSlug","find","async","activeProject","hasAccess","setActiveProject","projectRequest","UNKNOWN","fetchOrgMembers","isMember","PROJECT_NOT_FOUND","MISSING_MEMBERSHIP","renderBody","className","style","margin","ErrorWrapper","onRetry","ref","SentryTypes","withOrganization","withProjects","ProjectSettingsNavigation","appStoreConnectContext","useContext","debugFilesNeedsReview","some","navigationObjects","getConfiguration","access","withProject","InnerProjectSettingsLayout","params","routes","useRouteAnalyticsParams","project_id","project_platform","platform","renderNavigation","isValidElement","cloneElement","ProjectSettingsLayout"],"sourceRoot":""}