{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/links/listLink.tsx","webpack:///./app/views/settings/organizationTeams/teamDetails.tsx"],"sourcesContent":["import {Link as RouterLink} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport * as qs from 'query-string';\n\nimport useRouter from 'sentry/utils/useRouter';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = LinkProps & {\n  /**\n   * Link target. We don't want to expose the ToLocationFunction on this component.\n   */\n  to: LocationDescriptor;\n  /**\n   * The class to apply when the link is 'active'\n   */\n  activeClassName?: string;\n  disabled?: boolean;\n  index?: boolean;\n  /**\n   * Should be should be supplied by the parent component\n   */\n  isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n  query?: string;\n};\n\nfunction ListLink({\n  children,\n  className,\n  isActive,\n  query,\n  to,\n  activeClassName = 'active',\n  index = false,\n  disabled = false,\n  ...props\n}: Props) {\n  const router = useRouter();\n  const queryData = query ? qs.parse(query) : undefined;\n  const targetLocation = typeof to === 'string' ? {pathname: to, query: queryData} : to;\n  const target = normalizeUrl(targetLocation);\n\n  const active = isActive?.(target, index) ?? router.isActive(target, index);\n\n  return (\n    <StyledLi\n      className={classNames({[activeClassName]: active}, className)}\n      disabled={disabled}\n    >\n      <RouterLink {...props} onlyActiveOnIndex={index} to={disabled ? '' : target}>\n        {children}\n      </RouterLink>\n    </StyledLi>\n  );\n}\n\nexport default ListLink;\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import {cloneElement, isValidElement, useState} from 'react';\nimport type {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {joinTeam} from 'sentry/actionCreators/teams';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport IdBadge from 'sentry/components/idBadge';\nimport ListLink from 'sentry/components/links/listLink';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NavTabs from 'sentry/components/navTabs';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport useApi from 'sentry/utils/useApi';\nimport {useParams} from 'sentry/utils/useParams';\nimport useTeams from 'sentry/utils/useTeams';\n\ntype Props = {\n  children: React.ReactNode;\n} & RouteComponentProps<{orgId: string; teamId: string}, {}>;\n\nfunction TeamDetails({children, ...props}: Props) {\n  const api = useApi();\n  const params = useParams();\n  const [requesting, setRequesting] = useState(false);\n  const {teams, initiallyLoaded} = useTeams({slugs: [params.teamId]});\n  const team = teams.find(({slug}) => slug === params.teamId);\n\n  function handleRequestAccess(teamSlug: string) {\n    setRequesting(true);\n\n    joinTeam(\n      api,\n      {\n        orgId: params.orgId,\n        teamId: teamSlug,\n      },\n      {\n        success: () => {\n          addSuccessMessage(\n            tct('You have requested access to [team]', {\n              team: `#${teamSlug}`,\n            })\n          );\n          setRequesting(false);\n        },\n        error: () => {\n          addErrorMessage(\n            tct('Unable to request access to [team]', {\n              team: `#${teamSlug}`,\n            })\n          );\n          setRequesting(false);\n        },\n      }\n    );\n  }\n\n  const routePrefix = `/settings/${params.orgId}/teams/${params.teamId}/`;\n  const navigationTabs = [\n    <ListLink key={0} to={`${routePrefix}members/`}>\n      {t('Members')}\n    </ListLink>,\n    <ListLink key={1} to={`${routePrefix}projects/`}>\n      {t('Projects')}\n    </ListLink>,\n    <ListLink key={2} to={`${routePrefix}notifications/`}>\n      {t('Notifications')}\n    </ListLink>,\n    <ListLink key={3} to={`${routePrefix}settings/`}>\n      {t('Settings')}\n    </ListLink>,\n  ];\n\n  if (!initiallyLoaded) {\n    return <LoadingIndicator />;\n  }\n\n  if (!team) {\n    return (\n      <Alert type=\"warning\">\n        <div>{t('You do not have access to this team.')}</div>\n      </Alert>\n    );\n  }\n\n  return (\n    <div>\n      <SentryDocumentTitle title={t('Team Details')} orgSlug={props.params.orgId} />\n      {team.hasAccess ? (\n        <div>\n          <h3>\n            <IdBadge hideAvatar team={team} avatarSize={36} />\n          </h3>\n\n          <NavTabs underlined>{navigationTabs}</NavTabs>\n\n          {isValidElement(children) ? cloneElement<any>(children, {team}) : null}\n        </div>\n      ) : (\n        <Alert type=\"warning\">\n          <RequestAccessWrapper>\n            {tct('You do not have access to the [teamSlug] team.', {\n              teamSlug: <strong>{`#${team.slug}`}</strong>,\n            })}\n            <Button\n              disabled={requesting || team.isPending}\n              size=\"sm\"\n              onClick={() => handleRequestAccess(team.slug)}\n            >\n              {team.isPending ? t('Request Pending') : t('Request Access')}\n            </Button>\n          </RequestAccessWrapper>\n        </Alert>\n      )}\n    </div>\n  );\n}\n\nexport default TeamDetails;\n\nconst RequestAccessWrapper = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n"],"names":["ListLink","children","className","isActive","query","to","activeClassName","index","disabled","props","router","useRouter","queryData","qs","undefined","targetLocation","pathname","target","normalizeUrl","active","StyledLi","classNames","onlyActiveOnIndex","shouldForwardProp","prop","p","theme","TeamDetails","api","useApi","params","useParams","requesting","setRequesting","useState","teams","initiallyLoaded","useTeams","slugs","teamId","team","find","slug","routePrefix","orgId","navigationTabs","t","title","orgSlug","hasAccess","hideAvatar","avatarSize","underlined","isValidElement","cloneElement","type","RequestAccessWrapper","tct","teamSlug","isPending","size","onClick","handleRequestAccess","joinTeam","success","addSuccessMessage","error","addErrorMessage"],"sourceRoot":""}