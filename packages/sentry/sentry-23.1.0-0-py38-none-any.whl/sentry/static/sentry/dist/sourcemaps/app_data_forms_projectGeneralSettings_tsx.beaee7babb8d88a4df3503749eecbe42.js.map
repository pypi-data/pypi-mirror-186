{"version":3,"file":"chunks/app_data_forms_projectGeneralSettings_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/projectGeneralSettings.tsx","webpack:///./app/utils/slugify.tsx"],"sourcesContent":["import {createFilter} from 'react-select';\nimport styled from '@emotion/styled';\nimport {PlatformIcon} from 'platformicons';\n\nimport {Field} from 'sentry/components/forms/types';\nimport platforms from 'sentry/data/platforms';\nimport {t, tct, tn} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {convertMultilineFieldValue, extractMultilineFields} from 'sentry/utils';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport slugify from 'sentry/utils/slugify';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/';\n\nconst getResolveAgeAllowedValues = () => {\n  let i = 0;\n  const values: number[] = [];\n  while (i <= 720) {\n    values.push(i);\n    if (i < 12) {\n      i += 1;\n    } else if (i < 24) {\n      i += 3;\n    } else if (i < 36) {\n      i += 6;\n    } else if (i < 48) {\n      i += 12;\n    } else {\n      i += 24;\n    }\n  }\n  return values;\n};\n\nconst RESOLVE_AGE_ALLOWED_VALUES = getResolveAgeAllowedValues();\n\nconst ORG_DISABLED_REASON = t(\n  \"This option is enforced by your organization's settings and cannot be customized per-project.\"\n);\n\nconst PlatformWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  margin-right: ${space(1)};\n`;\n\nexport const fields: Record<string, Field> = {\n  name: {\n    name: 'name',\n    type: 'string',\n    required: true,\n    label: t('Name'),\n    placeholder: t('my-awesome-project'),\n    help: t('A name for this project'),\n    transformInput: slugify,\n    getData: (data: {name?: string}) => {\n      return {\n        name: data.name,\n        slug: data.name,\n      };\n    },\n\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t('You will be redirected to the new project slug after saving'),\n  },\n\n  platform: {\n    name: 'platform',\n    type: 'select',\n    label: t('Platform'),\n    options: platforms.map(({id, name}) => ({\n      value: id,\n      label: (\n        <PlatformWrapper key={id}>\n          <StyledPlatformIcon platform={id} />\n          {name}\n        </PlatformWrapper>\n      ),\n    })),\n    help: t('The primary platform for this project'),\n    filterOption: createFilter({\n      stringify: option => {\n        const matchedPlatform = platforms.find(({id}) => id === option.value);\n        return `${matchedPlatform?.name} ${option.value}`;\n      },\n    }),\n  },\n\n  subjectPrefix: {\n    name: 'subjectPrefix',\n    type: 'string',\n    label: t('Subject Prefix'),\n    placeholder: t('e.g. [my-org]'),\n    help: t('Choose a custom prefix for emails from this project'),\n  },\n\n  resolveAge: {\n    name: 'resolveAge',\n    type: 'range',\n    allowedValues: RESOLVE_AGE_ALLOWED_VALUES,\n    label: t('Auto Resolve'),\n    help: t(\n      \"Automatically resolve an issue if it hasn't been seen for this amount of time\"\n    ),\n    formatLabel: val => {\n      val = Number(val);\n      if (val === 0) {\n        return t('Disabled');\n      }\n\n      if (val > 23 && val % 24 === 0) {\n        // Based on allowed values, val % 24 should always be true\n        val = val / 24;\n        return tn('%s day', '%s days', val);\n      }\n\n      return tn('%s hour', '%s hours', val);\n    },\n    saveOnBlur: false,\n    saveMessage: tct(\n      '[strong:Caution]: Enabling auto resolve will immediately resolve anything that has not been seen within this period of time. There is no undo!',\n      {\n        strong: <strong />,\n      }\n    ),\n    saveMessageAlertType: 'warning',\n  },\n  allowedDomains: {\n    name: 'allowedDomains',\n    type: 'string',\n    multiline: true,\n    autosize: true,\n    maxRows: 10,\n    rows: 1,\n    placeholder: t('https://example.com or example.com'),\n    label: t('Allowed Domains'),\n    help: t(\n      'Examples: https://example.com, *, *.example.com, *:80. Separate multiple entries with a newline'\n    ),\n    getValue: val => extractMultilineFields(val),\n    setValue: val => convertMultilineFieldValue(val),\n  },\n  scrapeJavaScript: {\n    name: 'scrapeJavaScript',\n    type: 'boolean',\n    // if this is off for the organization, it cannot be enabled for the project\n    disabled: ({organization, name}) => !organization[name],\n    disabledReason: ORG_DISABLED_REASON,\n    // `props` are the props given to FormField\n    setValue: (val, props) => props.organization && props.organization[props.name] && val,\n    label: t('Enable JavaScript source fetching'),\n    help: t('Allow Sentry to scrape missing JavaScript source context when possible'),\n  },\n  securityToken: {\n    name: 'securityToken',\n    type: 'string',\n    label: t('Security Token'),\n    help: t(\n      'Outbound requests matching Allowed Domains will have the header \"{token_header}: {token}\" appended'\n    ),\n    setValue: value => getDynamicText({value, fixed: '__SECURITY_TOKEN__'}),\n  },\n  securityTokenHeader: {\n    name: 'securityTokenHeader',\n    type: 'string',\n    placeholder: t('X-Sentry-Token'),\n    label: t('Security Token Header'),\n    help: t(\n      'Outbound requests matching Allowed Domains will have the header \"{token_header}: {token}\" appended'\n    ),\n  },\n  verifySSL: {\n    name: 'verifySSL',\n    type: 'boolean',\n    label: t('Verify TLS/SSL'),\n    help: t('Outbound requests will verify TLS (sometimes known as SSL) connections'),\n  },\n};\n","/**\n * Transforms the given string to a slugified version. (e.g. \"My Project\" => \"my-project\")\n *\n * Allows only lowercase alphanumeric values, hyphens, and underscores (should match backend validation rules).\n * Normalizes special characters to a-z where applicable (accents, ligatures, etc).\n * Converts spaces to hyphens.\n */\nexport default function slugify(str: string): string {\n  return str\n    .normalize('NFKD') // Converts accents/ligatures/etc to latin alphabet\n    .toLowerCase()\n    .replace(' ', '-')\n    .replace(/[^a-z0-9-_]/g, ''); // Remove all invalid characters\n}\n"],"names":["route","RESOLVE_AGE_ALLOWED_VALUES","i","values","push","getResolveAgeAllowedValues","ORG_DISABLED_REASON","t","PlatformWrapper","StyledPlatformIcon","PlatformIcon","space","fields","name","type","required","label","placeholder","help","transformInput","slugify","getData","data","slug","saveOnBlur","saveMessageAlertType","saveMessage","platform","options","platforms","id","value","filterOption","createFilter","stringify","option","subjectPrefix","resolveAge","allowedValues","formatLabel","val","Number","tn","tct","strong","allowedDomains","multiline","autosize","maxRows","rows","getValue","extractMultilineFields","setValue","convertMultilineFieldValue","scrapeJavaScript","disabled","organization","disabledReason","props","securityToken","getDynamicText","fixed","securityTokenHeader","verifySSL","str","normalize","toLowerCase","replace"],"sourceRoot":""}