{"version":3,"file":"chunks/app_utils_discover_charts_tsx-app_views_performance_trends_utils_tsx-app_views_performance_ut-dde219.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/charts.tsx","webpack:///./app/views/performance/trends/types.tsx","webpack:///./app/views/performance/trends/utils.tsx","webpack:///./app/views/performance/utils.tsx"],"sourcesContent":["import {LegendComponentOption} from 'echarts';\n\nimport {t} from 'sentry/locale';\nimport {Series} from 'sentry/types/echarts';\nimport {defined, formatBytesBase2} from 'sentry/utils';\nimport {AggregationOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(\n  value: number | null,\n  outputType: AggregationOutputType = 'number'\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  return tooltipFormatterUsingAggregateOutputType(value, outputType);\n}\n\n/**\n * Formatter for chart tooltips that takes the aggregate output type directly\n */\nexport function tooltipFormatterUsingAggregateOutputType(\n  value: number | null,\n  type: string\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    case 'size':\n      return formatBytesBase2(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  outputType: AggregationOutputType,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  return axisLabelFormatterUsingAggregateOutputType(\n    value,\n    outputType,\n    abbreviation,\n    durationUnit\n  );\n}\n\n/**\n * Formatter for chart axis labels that takes the aggregate output type directly\n */\nexport function axisLabelFormatterUsingAggregateOutputType(\n  value: number,\n  type: string,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value, durationUnit);\n    case 'size':\n      return formatBytesBase2(value, 0);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number, durationUnit?: number): string {\n  durationUnit ??= categorizeDuration(value);\n  if (value === 0) {\n    return '0';\n  }\n  switch (durationUnit) {\n    case WEEK: {\n      const label = (value / WEEK).toFixed(0);\n      return t('%swk', label);\n    }\n    case DAY: {\n      const label = (value / DAY).toFixed(0);\n      return t('%sd', label);\n    }\n    case HOUR: {\n      const label = (value / HOUR).toFixed(0);\n      return t('%shr', label);\n    }\n    case MINUTE: {\n      const label = (value / MINUTE).toFixed(0);\n      return t('%smin', label);\n    }\n    case SECOND: {\n      const label = (value / SECOND).toFixed(0);\n      return t('%ss', label);\n    }\n    default:\n      const label = value.toFixed(0);\n      return t('%sms', label);\n  }\n}\n\n/**\n * Given an array of series and an eCharts legend object,\n * finds the range of y values (min and max) based on which series is selected in the legend\n * Assumes series[0] > series[1] > ...\n * @param series Array of eCharts series\n * @param legend eCharts legend object\n * @returns\n */\nexport function findRangeOfMultiSeries(series: Series[], legend?: LegendComponentOption) {\n  let range: {max: number; min: number} | undefined;\n  if (series[0]?.data) {\n    let minSeries = series[0];\n    let maxSeries;\n    series.forEach(({seriesName, data}, idx) => {\n      if (legend?.selected?.[seriesName] !== false && data.length) {\n        minSeries = series[idx];\n        maxSeries ??= series[idx];\n      }\n    });\n    if (maxSeries?.data) {\n      const max = Math.max(\n        ...maxSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      const min = Math.min(\n        ...minSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      range = {max, min};\n    }\n  }\n  return range;\n}\n\n/**\n * Given a eCharts series and legend, returns the unit to be used on the yAxis for a duration chart\n * @param series eCharts series array\n * @param legend eCharts legend object\n * @returns\n */\nexport function getDurationUnit(\n  series: Series[],\n  legend?: LegendComponentOption\n): number {\n  let durationUnit = 0;\n  const range = findRangeOfMultiSeries(series, legend);\n  if (range) {\n    const avg = (range.max + range.min) / 2;\n    durationUnit = categorizeDuration((range.max - range.min) / 5); // avg of 5 yAxis ticks per chart\n\n    const numOfDigits = (avg / durationUnit).toFixed(0).length;\n    if (numOfDigits > 6) {\n      durationUnit = categorizeDuration(avg);\n    }\n  }\n  return durationUnit;\n}\n\n/**\n * Categorizes the duration by Second, Minute, Hour, etc\n * Ex) categorizeDuration(1200) = MINUTE\n * @param value Duration in ms\n */\nexport function categorizeDuration(value): number {\n  if (value >= WEEK) {\n    return WEEK;\n  }\n  if (value >= DAY) {\n    return DAY;\n  }\n  if (value >= HOUR) {\n    return HOUR;\n  }\n  if (value >= MINUTE) {\n    return MINUTE;\n  }\n  if (value >= SECOND) {\n    return SECOND;\n  }\n  return 1;\n}\n","import moment from 'moment';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {EventsStatsData, Project} from 'sentry/types';\nimport EventView, {LocationQuery} from 'sentry/utils/discover/eventView';\n\nexport type TrendView = EventView & {\n  middle?: string;\n  orderby?: string;\n  trendFunction?: string;\n  trendType?: TrendChangeType;\n};\n\nexport type TrendsQuery = EventQuery &\n  LocationQuery & {\n    interval?: string;\n    middle?: string;\n    trendFunction?: string;\n    trendType?: TrendChangeType;\n  };\n\nexport type TrendFunction = {\n  alias: string;\n  field: TrendFunctionField;\n  label: string;\n  legendLabel: string;\n};\n\nexport type TrendParameter = {\n  column: string;\n  label: string;\n};\n\nexport enum TrendChangeType {\n  IMPROVED = 'improved',\n  REGRESSION = 'regression',\n}\n\nexport enum TrendFunctionField {\n  P50 = 'p50',\n  P75 = 'p75',\n  P95 = 'p95',\n  P99 = 'p99',\n  AVG = 'avg',\n}\n\nexport enum TrendColumnField {\n  DURATION = 'transaction.duration',\n  LCP = 'measurements.lcp',\n  FCP = 'measurements.fcp',\n  FID = 'measurements.fid',\n  CLS = 'measurements.cls',\n  SPANS_DB = 'spans.db',\n  SPANS_HTTP = 'spans.http',\n  SPANS_BROWSER = 'spans.browser',\n  SPANS_RESOURCE = 'spans.resource',\n}\n\nexport type TrendStat = {\n  data: EventsStatsData;\n  order: number;\n};\n\nexport type TrendsStats = {\n  [transaction: string]: TrendStat;\n};\n\nexport type TrendsTransaction = {\n  aggregate_range_1: number;\n  aggregate_range_2: number;\n  count: number;\n\n  count_percentage: number;\n  count_range_1: number;\n  count_range_2: number;\n  project: string;\n  transaction: string;\n  trend_difference: number;\n  trend_percentage: number;\n};\n\nexport type TrendsDataEvents = {\n  data: TrendsTransaction[];\n  meta: any;\n};\n\nexport type TrendsData = {\n  events: TrendsDataEvents;\n  projects: Project[];\n  stats: TrendsStats;\n};\n\nexport type NormalizedTrendsTransaction = TrendsTransaction & {\n  received_at: Readonly<moment.Moment>;\n};\n","import {ASAP} from 'downsample/methods/ASAP';\nimport {Location} from 'history';\nimport moment from 'moment';\n\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {t} from 'sentry/locale';\nimport {Project} from 'sentry/types';\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  AggregationKeyWithAlias,\n  Field,\n  generateFieldAsString,\n  Sort,\n} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport theme from 'sentry/utils/theme';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\nimport {platformToPerformanceType, PROJECT_PERFORMANCE_TYPE} from '../utils';\n\nimport {\n  NormalizedTrendsTransaction,\n  TrendChangeType,\n  TrendColumnField,\n  TrendFunction,\n  TrendFunctionField,\n  TrendParameter,\n  TrendsTransaction,\n  TrendView,\n} from './types';\n\nexport const DEFAULT_TRENDS_STATS_PERIOD = '14d';\nexport const DEFAULT_MAX_DURATION = '15min';\n\nexport const TRENDS_FUNCTIONS: TrendFunction[] = [\n  {\n    label: 'p50',\n    field: TrendFunctionField.P50,\n    alias: 'percentile_range',\n    legendLabel: 'p50',\n  },\n  {\n    label: 'p75',\n    field: TrendFunctionField.P75,\n    alias: 'percentile_range',\n    legendLabel: 'p75',\n  },\n  {\n    label: 'p95',\n    field: TrendFunctionField.P95,\n    alias: 'percentile_range',\n    legendLabel: 'p95',\n  },\n  {\n    label: 'p99',\n    field: TrendFunctionField.P99,\n    alias: 'percentile_range',\n    legendLabel: 'p99',\n  },\n  {\n    label: 'average',\n    field: TrendFunctionField.AVG,\n    alias: 'avg_range',\n    legendLabel: 'average',\n  },\n];\n\nexport const TRENDS_PARAMETERS: TrendParameter[] = [\n  {\n    label: 'Duration',\n    column: TrendColumnField.DURATION,\n  },\n  {\n    label: 'LCP',\n    column: TrendColumnField.LCP,\n  },\n  {\n    label: 'FCP',\n    column: TrendColumnField.FCP,\n  },\n  {\n    label: 'FID',\n    column: TrendColumnField.FID,\n  },\n  {\n    label: 'CLS',\n    column: TrendColumnField.CLS,\n  },\n  {\n    label: 'Spans (http)',\n    column: TrendColumnField.SPANS_HTTP,\n  },\n  {\n    label: 'Spans (db)',\n    column: TrendColumnField.SPANS_DB,\n  },\n  {\n    label: 'Spans (browser)',\n    column: TrendColumnField.SPANS_BROWSER,\n  },\n  {\n    label: 'Spans (resource)',\n    column: TrendColumnField.SPANS_RESOURCE,\n  },\n];\n\nexport const trendToColor = {\n  [TrendChangeType.IMPROVED]: {\n    lighter: theme.green200,\n    default: theme.green300,\n  },\n  [TrendChangeType.REGRESSION]: {\n    lighter: theme.red200,\n    default: theme.red300,\n  },\n};\n\nexport const trendSelectedQueryKeys = {\n  [TrendChangeType.IMPROVED]: 'improvedSelected',\n  [TrendChangeType.REGRESSION]: 'regressionSelected',\n};\n\nexport const trendUnselectedSeries = {\n  [TrendChangeType.IMPROVED]: 'improvedUnselectedSeries',\n  [TrendChangeType.REGRESSION]: 'regressionUnselectedSeries',\n};\n\nexport const trendCursorNames = {\n  [TrendChangeType.IMPROVED]: 'improvedCursor',\n  [TrendChangeType.REGRESSION]: 'regressionCursor',\n};\n\nexport function resetCursors() {\n  const cursors = {};\n  Object.values(trendCursorNames).forEach(cursor => (cursors[cursor] = undefined)); // Resets both cursors\n  return cursors;\n}\n\nexport function getCurrentTrendFunction(\n  location: Location,\n  _trendFunctionField?: TrendFunctionField\n): TrendFunction {\n  const trendFunctionField =\n    _trendFunctionField ?? decodeScalar(location?.query?.trendFunction);\n  const trendFunction = TRENDS_FUNCTIONS.find(({field}) => field === trendFunctionField);\n  return trendFunction || TRENDS_FUNCTIONS[0];\n}\n\nfunction getDefaultTrendParameter(\n  projects: Project[],\n  projectIds: Readonly<number[]>\n): TrendParameter {\n  const performanceType = platformToPerformanceType(projects, projectIds);\n  const trendParameter = performanceTypeToTrendParameterLabel(performanceType);\n\n  return trendParameter;\n}\n\nexport function getCurrentTrendParameter(\n  location: Location,\n  projects: Project[],\n  projectIds: Readonly<number[]>\n): TrendParameter {\n  const trendParameterLabel = decodeScalar(location?.query?.trendParameter);\n  const trendParameter = TRENDS_PARAMETERS.find(\n    ({label}) => label === trendParameterLabel\n  );\n\n  if (trendParameter) {\n    return trendParameter;\n  }\n\n  const defaultTrendParameter = getDefaultTrendParameter(projects, projectIds);\n  return defaultTrendParameter;\n}\n\nexport function performanceTypeToTrendParameterLabel(\n  performanceType: PROJECT_PERFORMANCE_TYPE\n): TrendParameter {\n  switch (performanceType) {\n    case PROJECT_PERFORMANCE_TYPE.FRONTEND:\n      return {\n        label: 'LCP',\n        column: TrendColumnField.LCP,\n      };\n    case PROJECT_PERFORMANCE_TYPE.ANY:\n    case PROJECT_PERFORMANCE_TYPE.BACKEND:\n    case PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER:\n    default:\n      return {\n        label: 'Duration',\n        column: TrendColumnField.DURATION,\n      };\n  }\n}\n\nexport function generateTrendFunctionAsString(\n  trendFunction: TrendFunctionField,\n  trendParameter: string\n): string {\n  return generateFieldAsString({\n    kind: 'function',\n    function: [\n      trendFunction as AggregationKeyWithAlias,\n      trendParameter,\n      undefined,\n      undefined,\n    ],\n  });\n}\n\nexport function transformDeltaSpread(from: number, to: number) {\n  const fromSeconds = from / 1000;\n  const toSeconds = to / 1000;\n\n  const showDigits = from > 1000 || to > 1000 || from < 10 || to < 10; // Show digits consistently if either has them\n\n  return {fromSeconds, toSeconds, showDigits};\n}\n\nexport function getTrendProjectId(\n  trend: NormalizedTrendsTransaction,\n  projects?: Project[]\n): string | undefined {\n  if (!trend.project || !projects) {\n    return undefined;\n  }\n  const transactionProject = projects.find(project => project.slug === trend.project);\n  return transactionProject?.id;\n}\n\nexport function modifyTrendView(\n  trendView: TrendView,\n  location: Location,\n  trendsType: TrendChangeType,\n  projects: Project[],\n  isProjectOnly?: boolean\n) {\n  const trendFunction = getCurrentTrendFunction(location);\n  const trendParameter = getCurrentTrendParameter(location, projects, trendView.project);\n\n  const transactionField = isProjectOnly ? [] : ['transaction'];\n  const fields = [...transactionField, 'project'].map(field => ({\n    field,\n  })) as Field[];\n\n  const trendSort = {\n    field: 'trend_percentage()',\n    kind: 'asc',\n  } as Sort;\n\n  trendView.trendType = trendsType;\n  if (trendsType === TrendChangeType.REGRESSION) {\n    trendSort.kind = 'desc';\n  }\n\n  if (trendFunction && trendParameter) {\n    trendView.trendFunction = generateTrendFunctionAsString(\n      trendFunction.field,\n      trendParameter.column\n    );\n  }\n  trendView.query = getLimitTransactionItems(trendView.query);\n\n  trendView.interval = getQueryInterval(location, trendView);\n\n  trendView.sorts = [trendSort];\n  trendView.fields = fields;\n}\n\nexport function modifyTrendsViewDefaultPeriod(eventView: EventView, location: Location) {\n  const {query} = location;\n\n  const hasStartAndEnd = query.start && query.end;\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    eventView.statsPeriod = DEFAULT_TRENDS_STATS_PERIOD;\n  }\n  return eventView;\n}\n\nfunction getQueryInterval(location: Location, eventView: TrendView) {\n  const intervalFromQueryParam = decodeScalar(location?.query?.interval);\n  const {start, end, statsPeriod} = eventView;\n\n  const datetimeSelection = {\n    start: start || null,\n    end: end || null,\n    period: statsPeriod,\n  };\n\n  const intervalFromSmoothing = getInterval(datetimeSelection, 'high');\n\n  return intervalFromQueryParam || intervalFromSmoothing;\n}\n\nexport function transformValueDelta(value: number, trendType: TrendChangeType) {\n  const absoluteValue = Math.abs(value);\n\n  const changeLabel =\n    trendType === TrendChangeType.REGRESSION ? t('slower') : t('faster');\n\n  const seconds = absoluteValue / 1000;\n\n  const fixedDigits = absoluteValue > 1000 || absoluteValue < 10 ? 1 : 0;\n\n  return {seconds, fixedDigits, changeLabel};\n}\n\n/**\n * This will normalize the trends transactions while the current trend function and current data are out of sync\n * To minimize extra renders with missing results.\n */\nexport function normalizeTrends(\n  data: Array<TrendsTransaction>\n): Array<NormalizedTrendsTransaction> {\n  const received_at = moment(); // Adding the received time for the transaction so calls to get baseline always line up with the transaction\n  return data.map(row => {\n    return {\n      ...row,\n      received_at,\n      transaction: row.transaction,\n    } as NormalizedTrendsTransaction;\n  });\n}\n\nexport function getSelectedQueryKey(trendChangeType: TrendChangeType) {\n  return trendSelectedQueryKeys[trendChangeType];\n}\n\nexport function getUnselectedSeries(trendChangeType: TrendChangeType) {\n  return trendUnselectedSeries[trendChangeType];\n}\n\nexport function movingAverage(data, index, size) {\n  return (\n    data\n      .slice(index - size, index)\n      .map(a => a.value)\n      .reduce((a, b) => a + b, 0) / size\n  );\n}\n\n/**\n * This function applies defaults for trend and count percentage, and adds the confidence limit to the query\n */\nfunction getLimitTransactionItems(query: string) {\n  const limitQuery = new MutableSearch(query);\n  if (!limitQuery.hasFilter('count_percentage()')) {\n    limitQuery.addFilterValues('count_percentage()', ['>0.25', '<4']);\n  }\n  if (!limitQuery.hasFilter('trend_percentage()')) {\n    limitQuery.addFilterValues('trend_percentage()', ['>0%']);\n  }\n  if (!limitQuery.hasFilter('confidence()')) {\n    limitQuery.addFilterValues('confidence()', ['>6']);\n  }\n  return limitQuery.formatString();\n}\n\nexport const smoothTrend = (data: [number, number][], resolution = 100) => {\n  return ASAP(data, resolution);\n};\n\nexport const replaceSeriesName = (seriesName: string) => {\n  return ['p50', 'p75'].find(aggregate => seriesName.includes(aggregate));\n};\n\nexport const replaceSmoothedSeriesName = (seriesName: string) => {\n  return `Smoothed ${['p50', 'p75'].find(aggregate => seriesName.includes(aggregate))}`;\n};\n\nexport function transformEventStatsSmoothed(data?: Series[], seriesName?: string) {\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let maxValue = 0;\n  if (!data) {\n    return {\n      maxValue,\n      minValue,\n      smoothedResults: undefined,\n    };\n  }\n\n  const smoothedResults: Series[] = [];\n\n  for (const current of data) {\n    const currentData = current.data;\n    const resultData: SeriesDataUnit[] = [];\n\n    const smoothed = smoothTrend(\n      currentData.map(({name, value}) => [Number(name), value])\n    );\n\n    for (let i = 0; i < smoothed.length; i++) {\n      const point = smoothed[i] as any;\n      const value = point.y;\n      resultData.push({\n        name: point.x,\n        value,\n      });\n      if (!isNaN(value)) {\n        const rounded = Math.round(value);\n        minValue = Math.min(rounded, minValue);\n        maxValue = Math.max(rounded, maxValue);\n      }\n    }\n    smoothedResults.push({\n      seriesName: seriesName || current.seriesName || 'Current',\n      data: resultData,\n      lineStyle: current.lineStyle,\n      color: current.color,\n    });\n  }\n\n  return {\n    minValue,\n    maxValue,\n    smoothedResults,\n  };\n}\n","import {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport {backend, frontend, mobile} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\nimport {\n  NewQuery,\n  Organization,\n  OrganizationSummary,\n  PageFilters,\n  Project,\n  ReleaseProject,\n} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {statsPeriodToDays} from 'sentry/utils/dates';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {TRACING_FIELDS} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\nimport getCurrentSentryReactTransaction from 'sentry/utils/getCurrentSentryReactTransaction';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport toArray from 'sentry/utils/toArray';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\nimport {DEFAULT_MAX_DURATION} from './trends/utils';\n\nexport const QUERY_KEYS = [\n  'environment',\n  'project',\n  'query',\n  'start',\n  'end',\n  'statsPeriod',\n] as const;\n\nexport const UNPARAMETERIZED_TRANSACTION = '<< unparameterized >>'; // Represents 'other' transactions with high cardinality names that were dropped on the metrics dataset.\nconst UNPARAMETRIZED_TRANSACTION = '<< unparametrized >>'; // Old spelling. Can be deleted in the future when all data for this transaction name is gone.\nexport const EXCLUDE_METRICS_UNPARAM_CONDITIONS = `(!transaction:\"${UNPARAMETERIZED_TRANSACTION}\" AND !transaction:\"${UNPARAMETRIZED_TRANSACTION}\")`;\nconst SHOW_UNPARAM_BANNER = 'showUnparameterizedBanner';\n\nexport enum DiscoverQueryPageSource {\n  PERFORMANCE = 'performance',\n  DISCOVER = 'discover',\n}\n\nexport function createUnnamedTransactionsDiscoverTarget(props: {\n  location: Location;\n  organization: Organization;\n  source?: DiscoverQueryPageSource;\n}) {\n  const fields =\n    props.source === DiscoverQueryPageSource.DISCOVER\n      ? ['transaction', 'project', 'transaction.source', 'epm()']\n      : ['transaction', 'project', 'transaction.source', 'epm()', 'p50()', 'p95()'];\n\n  const query: NewQuery = {\n    id: undefined,\n    name:\n      props.source === DiscoverQueryPageSource.DISCOVER\n        ? t('Unparameterized Transactions')\n        : t('Performance - Unparameterized Transactions'),\n    query: 'event.type:transaction transaction.source:\"url\"',\n    projects: [],\n    fields,\n    version: 2,\n  };\n\n  const discoverEventView = EventView.fromNewQueryWithLocation(\n    query,\n    props.location\n  ).withSorts([{field: 'epm', kind: 'desc'}]);\n  const target = discoverEventView.getResultsViewUrlTarget(props.organization.slug);\n  target.query[SHOW_UNPARAM_BANNER] = 'true';\n  return target;\n}\n\n/**\n * Performance type can used to determine a default view or which specific field should be used by default on pages\n * where we don't want to wait for transaction data to return to determine how to display aspects of a page.\n */\nexport enum PROJECT_PERFORMANCE_TYPE {\n  ANY = 'any', // Fallback to transaction duration\n  FRONTEND = 'frontend',\n  BACKEND = 'backend',\n  FRONTEND_OTHER = 'frontend_other',\n  MOBILE = 'mobile',\n}\n\n// The native SDK is equally used on clients and end-devices as on\n// backend, the default view should be \"All Transactions\".\nconst FRONTEND_PLATFORMS: string[] = [...frontend];\nconst BACKEND_PLATFORMS: string[] = backend.filter(platform => platform !== 'native');\nconst MOBILE_PLATFORMS: string[] = [...mobile];\n\nexport function platformToPerformanceType(\n  projects: (Project | ReleaseProject)[],\n  projectIds: readonly number[]\n) {\n  if (projectIds.length === 0 || projectIds[0] === ALL_ACCESS_PROJECTS) {\n    return PROJECT_PERFORMANCE_TYPE.ANY;\n  }\n\n  const selectedProjects = projects.filter(p =>\n    projectIds.includes(parseInt(`${p.id}`, 10))\n  );\n\n  if (selectedProjects.length === 0 || selectedProjects.some(p => !p.platform)) {\n    return PROJECT_PERFORMANCE_TYPE.ANY;\n  }\n\n  if (\n    selectedProjects.every(project =>\n      FRONTEND_PLATFORMS.includes(project.platform as string)\n    )\n  ) {\n    return PROJECT_PERFORMANCE_TYPE.FRONTEND;\n  }\n\n  if (\n    selectedProjects.every(project =>\n      BACKEND_PLATFORMS.includes(project.platform as string)\n    )\n  ) {\n    return PROJECT_PERFORMANCE_TYPE.BACKEND;\n  }\n\n  if (\n    selectedProjects.every(project =>\n      MOBILE_PLATFORMS.includes(project.platform as string)\n    )\n  ) {\n    return PROJECT_PERFORMANCE_TYPE.MOBILE;\n  }\n\n  return PROJECT_PERFORMANCE_TYPE.ANY;\n}\n\n/**\n * Used for transaction summary to determine appropriate columns on a page, since there is no display field set for the page.\n */\nexport function platformAndConditionsToPerformanceType(\n  projects: Project[],\n  eventView: EventView\n) {\n  const performanceType = platformToPerformanceType(projects, eventView.project);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    const conditions = new MutableSearch(eventView.query);\n    const ops = conditions.getFilterValues('!transaction.op');\n    if (ops.some(op => op === 'pageload')) {\n      return PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER;\n    }\n  }\n\n  return performanceType;\n}\n\n/**\n * Used for transaction summary to check the view itself, since it can have conditions which would exclude it from having vitals aside from platform.\n */\nexport function isSummaryViewFrontendPageLoad(eventView: EventView, projects: Project[]) {\n  return (\n    platformAndConditionsToPerformanceType(projects, eventView) ===\n    PROJECT_PERFORMANCE_TYPE.FRONTEND\n  );\n}\n\nexport function isSummaryViewFrontend(eventView: EventView, projects: Project[]) {\n  return (\n    platformAndConditionsToPerformanceType(projects, eventView) ===\n      PROJECT_PERFORMANCE_TYPE.FRONTEND ||\n    platformAndConditionsToPerformanceType(projects, eventView) ===\n      PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER\n  );\n}\n\nexport function getPerformanceLandingUrl(organization: OrganizationSummary): string {\n  return `/organizations/${organization.slug}/performance/`;\n}\n\nexport function getPerformanceTrendsUrl(organization: OrganizationSummary): string {\n  return `/organizations/${organization.slug}/performance/trends/`;\n}\n\nexport function getTransactionSearchQuery(location: Location, query: string = '') {\n  return decodeScalar(location.query.query, query).trim();\n}\n\nexport function handleTrendsClick({\n  location,\n  organization,\n  projectPlatforms,\n}: {\n  location: Location;\n  organization: Organization;\n  projectPlatforms: string;\n}) {\n  trackAdvancedAnalyticsEvent('performance_views.change_view', {\n    organization,\n    view_name: 'TRENDS',\n    project_platforms: projectPlatforms,\n  });\n\n  const target = trendsTargetRoute({location, organization});\n\n  browserHistory.push(normalizeUrl(target));\n}\n\nexport function trendsTargetRoute({\n  location,\n  organization,\n  initialConditions,\n  additionalQuery,\n}: {\n  location: Location;\n  organization: Organization;\n  additionalQuery?: {[x: string]: string};\n  initialConditions?: MutableSearch;\n}) {\n  const newQuery = {\n    ...location.query,\n    ...additionalQuery,\n  };\n\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n\n  const modifiedConditions = initialConditions ?? new MutableSearch([]);\n\n  if (conditions.hasFilter('tpm()')) {\n    modifiedConditions.setFilterValues('tpm()', conditions.getFilterValues('tpm()'));\n  } else {\n    modifiedConditions.setFilterValues('tpm()', ['>0.01']);\n  }\n  if (conditions.hasFilter('transaction.duration')) {\n    modifiedConditions.setFilterValues(\n      'transaction.duration',\n      conditions.getFilterValues('transaction.duration')\n    );\n  } else {\n    modifiedConditions.setFilterValues('transaction.duration', [\n      '>0',\n      `<${DEFAULT_MAX_DURATION}`,\n    ]);\n  }\n  newQuery.query = modifiedConditions.formatString();\n\n  return {pathname: getPerformanceTrendsUrl(organization), query: {...newQuery}};\n}\n\nexport function removeTracingKeysFromSearch(\n  currentFilter: MutableSearch,\n  options: {excludeTagKeys: Set<string>} = {\n    excludeTagKeys: new Set([\n      // event type can be \"transaction\" but we're searching for issues\n      'event.type',\n      // the project is already determined by the transaction,\n      // and issue search does not support the project filter\n      'project',\n    ]),\n  }\n) {\n  currentFilter.getFilterKeys().forEach(tagKey => {\n    const searchKey = tagKey.startsWith('!') ? tagKey.substr(1) : tagKey;\n    // Remove aggregates and transaction event fields\n    if (\n      // aggregates\n      searchKey.match(/\\w+\\(.*\\)/) ||\n      // transaction event fields\n      TRACING_FIELDS.includes(searchKey) ||\n      // tags that we don't want to pass to pass to issue search\n      options.excludeTagKeys.has(searchKey)\n    ) {\n      currentFilter.removeFilter(tagKey);\n    }\n  });\n\n  return currentFilter;\n}\n\nexport function addRoutePerformanceContext(selection: PageFilters) {\n  const transaction = getCurrentSentryReactTransaction();\n  const days = statsPeriodToDays(\n    selection.datetime.period,\n    selection.datetime.start,\n    selection.datetime.end\n  );\n  const oneDay = 86400;\n  const seconds = Math.floor(days * oneDay);\n\n  transaction?.setTag('query.period', seconds.toString());\n  let groupedPeriod = '>30d';\n  if (seconds <= oneDay) {\n    groupedPeriod = '<=1d';\n  } else if (seconds <= oneDay * 7) {\n    groupedPeriod = '<=7d';\n  } else if (seconds <= oneDay * 14) {\n    groupedPeriod = '<=14d';\n  } else if (seconds <= oneDay * 30) {\n    groupedPeriod = '<=30d';\n  }\n  transaction?.setTag('query.period.grouped', groupedPeriod);\n}\n\nexport function getTransactionName(location: Location): string | undefined {\n  const {transaction} = location.query;\n\n  return decodeScalar(transaction);\n}\n\nexport function getPerformanceDuration(milliseconds: number) {\n  return getDuration(milliseconds / 1000, milliseconds > 1000 ? 2 : 0, true);\n}\n\nexport function areMultipleProjectsSelected(eventView: EventView) {\n  if (!eventView.project.length) {\n    return true; // My projects\n  }\n  if (eventView.project.length === 1 && eventView.project[0] === ALL_ACCESS_PROJECTS) {\n    return true; // All projects\n  }\n  return false;\n}\n\nexport function getSelectedProjectPlatformsArray(\n  location: Location,\n  projects: Project[]\n) {\n  const projectQuery = location.query.project;\n  const selectedProjectIdSet = new Set(toArray(projectQuery));\n\n  const selectedProjectPlatforms = projects.reduce((acc: string[], project) => {\n    if (selectedProjectIdSet.has(project.id)) {\n      acc.push(project.platform ?? 'undefined');\n    }\n\n    return acc;\n  }, []);\n\n  return selectedProjectPlatforms;\n}\n\nexport function getSelectedProjectPlatforms(location: Location, projects: Project[]) {\n  const selectedProjectPlatforms = getSelectedProjectPlatformsArray(location, projects);\n  return selectedProjectPlatforms.join(', ');\n}\n"],"names":["tooltipFormatter","value","outputType","defined","tooltipFormatterUsingAggregateOutputType","type","toLocaleString","formatPercentage","getDuration","formatBytesBase2","toString","axisLabelFormatter","abbreviation","durationUnit","axisLabelFormatterUsingAggregateOutputType","formatAbbreviatedNumber","axisDuration","categorizeDuration","WEEK","label","toFixed","t","DAY","HOUR","MINUTE","SECOND","getDurationUnit","series","legend","range","data","maxSeries","minSeries","forEach","idx","seriesName","selected","length","max","Math","map","filter","min","findRangeOfMultiSeries","avg","TrendChangeType","TrendFunctionField","TrendColumnField","DEFAULT_TRENDS_STATS_PERIOD","DEFAULT_MAX_DURATION","TRENDS_FUNCTIONS","field","alias","legendLabel","TRENDS_PARAMETERS","column","trendToColor","lighter","theme","default","trendSelectedQueryKeys","trendUnselectedSeries","trendCursorNames","resetCursors","cursors","Object","values","cursor","undefined","getCurrentTrendFunction","location","_trendFunctionField","trendFunctionField","decodeScalar","query","trendFunction","find","getCurrentTrendParameter","projects","projectIds","trendParameterLabel","trendParameter","performanceType","PROJECT_PERFORMANCE_TYPE","performanceTypeToTrendParameterLabel","platformToPerformanceType","getDefaultTrendParameter","generateTrendFunctionAsString","generateFieldAsString","kind","function","transformDeltaSpread","from","to","fromSeconds","toSeconds","showDigits","getTrendProjectId","trend","project","slug","id","modifyTrendView","trendView","trendsType","isProjectOnly","fields","trendSort","trendType","limitQuery","MutableSearch","hasFilter","addFilterValues","formatString","getLimitTransactionItems","interval","eventView","intervalFromQueryParam","start","end","statsPeriod","datetimeSelection","period","intervalFromSmoothing","getInterval","getQueryInterval","sorts","modifyTrendsViewDefaultPeriod","hasStartAndEnd","transformValueDelta","absoluteValue","abs","seconds","fixedDigits","changeLabel","normalizeTrends","received_at","moment","row","transaction","getSelectedQueryKey","trendChangeType","getUnselectedSeries","smoothTrend","resolution","ASAP","replaceSeriesName","aggregate","includes","transformEventStatsSmoothed","minValue","Number","MAX_SAFE_INTEGER","maxValue","smoothedResults","current","currentData","resultData","smoothed","name","i","point","y","push","x","isNaN","rounded","round","lineStyle","color","QUERY_KEYS","UNPARAMETERIZED_TRANSACTION","DiscoverQueryPageSource","createUnnamedTransactionsDiscoverTarget","props","source","DISCOVER","version","target","EventView","withSorts","getResultsViewUrlTarget","organization","FRONTEND_PLATFORMS","frontend","BACKEND_PLATFORMS","backend","platform","MOBILE_PLATFORMS","mobile","ALL_ACCESS_PROJECTS","ANY","selectedProjects","p","parseInt","some","every","FRONTEND","BACKEND","MOBILE","platformAndConditionsToPerformanceType","getFilterValues","op","FRONTEND_OTHER","isSummaryViewFrontendPageLoad","isSummaryViewFrontend","getPerformanceLandingUrl","getPerformanceTrendsUrl","getTransactionSearchQuery","trim","handleTrendsClick","projectPlatforms","trackAdvancedAnalyticsEvent","view_name","project_platforms","trendsTargetRoute","browserHistory","normalizeUrl","initialConditions","additionalQuery","newQuery","conditions","modifiedConditions","setFilterValues","pathname","removeTracingKeysFromSearch","currentFilter","options","excludeTagKeys","Set","getFilterKeys","tagKey","searchKey","startsWith","substr","match","TRACING_FIELDS","has","removeFilter","addRoutePerformanceContext","selection","getCurrentSentryReactTransaction","days","statsPeriodToDays","datetime","floor","setTag","groupedPeriod","oneDay","getTransactionName","getPerformanceDuration","milliseconds","areMultipleProjectsSelected","getSelectedProjectPlatformsArray","projectQuery","selectedProjectIdSet","toArray","reduce","acc","getSelectedProjectPlatforms","join"],"sourceRoot":""}