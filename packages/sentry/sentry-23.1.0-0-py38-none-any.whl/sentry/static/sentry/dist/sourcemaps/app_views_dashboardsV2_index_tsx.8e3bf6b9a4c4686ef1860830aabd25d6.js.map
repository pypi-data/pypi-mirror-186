{"version":3,"file":"chunks/app_views_dashboardsV2_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/dashboardsV2/index.tsx","webpack:///./app/views/dashboardsV2/orgDashboards.tsx","webpack:///./app/views/dashboardsV2/view.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Client} from 'sentry/api';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport NotFound from 'sentry/components/errors/notFound';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Organization} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport DashboardDetail from './detail';\nimport OrgDashboards from './orgDashboards';\nimport {DashboardState} from './types';\nimport {DashboardBasicFeature} from './view';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  api: Client;\n  children: React.ReactNode;\n  organization: Organization;\n};\n\nfunction DashboardsV2Container(props: Props) {\n  const {organization, params, api, location, children} = props;\n\n  if (organization.features.includes('dashboards-edit')) {\n    return <Fragment>{children}</Fragment>;\n  }\n\n  return (\n    <DashboardBasicFeature organization={organization}>\n      <OrgDashboards\n        api={api}\n        location={location}\n        params={params}\n        organization={organization}\n      >\n        {({dashboard, dashboards, error, onDashboardUpdate}) => {\n          return error ? (\n            <NotFound />\n          ) : dashboard ? (\n            <ErrorBoundary>\n              <DashboardDetail\n                {...props}\n                initialState={DashboardState.VIEW}\n                dashboard={dashboard}\n                dashboards={dashboards}\n                onDashboardUpdate={onDashboardUpdate}\n              />\n            </ErrorBoundary>\n          ) : (\n            <LoadingIndicator />\n          );\n        }}\n      </OrgDashboards>\n    </DashboardBasicFeature>\n  );\n}\n\nexport default withApi(withOrganization(DashboardsV2Container));\n","import {browserHistory} from 'react-router';\nimport {Location} from 'history';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'sentry/api';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport NotFound from 'sentry/components/errors/notFound';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport withRouteAnalytics, {\n  WithRouteAnalyticsProps,\n} from 'sentry/utils/routeAnalytics/withRouteAnalytics';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\nimport {assignTempId} from './layoutUtils';\nimport {DashboardDetails, DashboardListItem} from './types';\nimport {hasSavedPageFilters} from './utils';\n\ntype OrgDashboardsChildrenProps = {\n  dashboard: DashboardDetails | null;\n  dashboards: DashboardListItem[];\n  error: boolean;\n  onDashboardUpdate: (updatedDashboard: DashboardDetails) => void;\n};\n\ntype Props = WithRouteAnalyticsProps & {\n  api: Client;\n  children: (props: OrgDashboardsChildrenProps) => React.ReactNode;\n  location: Location;\n  organization: Organization;\n  params: {orgId: string; dashboardId?: string};\n};\n\ntype State = {\n  // endpoint response\n  dashboards: DashboardListItem[] | null;\n  /**\n   * The currently selected dashboard.\n   */\n  selectedDashboard: DashboardDetails | null;\n} & AsyncComponent['state'];\n\nclass OrgDashboards extends AsyncComponent<Props, State> {\n  state: State = {\n    // AsyncComponent state\n    loading: true,\n    reloading: false,\n    error: false,\n    errors: {},\n\n    dashboards: [],\n    selectedDashboard: null,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (!isEqual(prevProps.params.dashboardId, this.props.params.dashboardId)) {\n      this.remountComponent();\n    }\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, params} = this.props;\n    const url = `/organizations/${organization.slug}/dashboards/`;\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [['dashboards', url]];\n\n    if (params.dashboardId) {\n      endpoints.push(['selectedDashboard', `${url}${params.dashboardId}/`]);\n      this.props.setEventNames('dashboards2.view', 'Dashboards2: View dashboard');\n      this.props.setRouteAnalyticsParams({\n        dashboard_id: params.dashboardId,\n      });\n    }\n\n    return endpoints;\n  }\n\n  onDashboardUpdate(updatedDashboard: DashboardDetails) {\n    this.setState({selectedDashboard: updatedDashboard});\n  }\n\n  getDashboards(): DashboardListItem[] {\n    const {dashboards} = this.state;\n\n    return Array.isArray(dashboards) ? dashboards : [];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    const {params, organization, location} = this.props;\n\n    if (params.dashboardId || stateKey === 'selectedDashboard') {\n      const queryParamFilters = new Set([\n        'project',\n        'environment',\n        'statsPeriod',\n        'start',\n        'end',\n        'utc',\n        'release',\n      ]);\n      if (\n        stateKey === 'selectedDashboard' &&\n        // Only redirect if there are saved filters and none of the filters\n        // appear in the query params\n        hasSavedPageFilters(data) &&\n        isEmpty(\n          Object.keys(location.query).filter(unsavedQueryParam =>\n            queryParamFilters.has(unsavedQueryParam)\n          )\n        )\n      ) {\n        browserHistory.replace({\n          ...location,\n          query: {\n            ...location.query,\n            project: data.projects,\n            environment: data.environment,\n            statsPeriod: data.period,\n            start: data.start,\n            end: data.end,\n            utc: data.utc,\n          },\n        });\n      }\n      return;\n    }\n\n    // If we don't have a selected dashboard, and one isn't going to arrive\n    // we can redirect to the first dashboard in the list.\n    const dashboardId = data.length ? data[0].id : 'default-overview';\n    browserHistory.replace(\n      normalizeUrl({\n        pathname: `/organizations/${organization.slug}/dashboard/${dashboardId}/`,\n        query: {\n          ...location.query,\n        },\n      })\n    );\n  }\n\n  renderLoading() {\n    return (\n      <Layout.Page withPadding>\n        <LoadingIndicator />\n      </Layout.Page>\n    );\n  }\n\n  renderBody() {\n    const {children} = this.props;\n    const {selectedDashboard, error} = this.state;\n    let dashboard = selectedDashboard;\n\n    // Ensure there are always tempIds for grid layout\n    // This is needed because there are cases where the dashboard\n    // renders before the onRequestSuccess setState is processed\n    // and will caused stacked widgets because of missing tempIds\n    dashboard = selectedDashboard\n      ? {\n          ...selectedDashboard,\n          widgets: selectedDashboard.widgets.map(assignTempId),\n        }\n      : null;\n\n    return children({\n      error,\n      dashboard,\n      dashboards: this.getDashboards(),\n      onDashboardUpdate: (updatedDashboard: DashboardDetails) =>\n        this.onDashboardUpdate(updatedDashboard),\n    });\n  }\n\n  renderError(error: Error) {\n    const notFound = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 404\n    );\n\n    if (notFound) {\n      return <NotFound />;\n    }\n\n    return super.renderError(error, true);\n  }\n\n  renderComponent() {\n    const {organization, location} = this.props;\n    const {loading, selectedDashboard} = this.state;\n\n    if (!organization.features.includes('dashboards-basic')) {\n      // Redirect to Dashboards v1\n      browserHistory.replace(\n        normalizeUrl({\n          pathname: `/organizations/${organization.slug}/dashboards/`,\n          query: {\n            ...location.query,\n          },\n        })\n      );\n      return null;\n    }\n\n    if (\n      loading &&\n      selectedDashboard &&\n      hasSavedPageFilters(selectedDashboard) &&\n      isEmpty(location.query)\n    ) {\n      // Block dashboard from rendering if the dashboard has filters and\n      // the URL does not contain filters yet. The filters can either match the\n      // saved filters, or can be different (i.e. sharing an unsaved state)\n      return this.renderLoading();\n    }\n\n    return (\n      <SentryDocumentTitle title={t('Dashboards')} orgSlug={organization.slug}>\n        {super.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default withRouteAnalytics(OrgDashboards);\n","import {useEffect, useState} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport pick from 'lodash/pick';\n\nimport {updateDashboardVisit} from 'sentry/actionCreators/dashboards';\nimport Feature from 'sentry/components/acl/feature';\nimport {Alert} from 'sentry/components/alert';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport NotFound from 'sentry/components/errors/notFound';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport DashboardDetail from './detail';\nimport OrgDashboards from './orgDashboards';\nimport {DashboardState, Widget} from './types';\nimport {constructWidgetFromQuery} from './utils';\n\nconst ALLOWED_PARAMS = [\n  'start',\n  'end',\n  'utc',\n  'period',\n  'project',\n  'environment',\n  'statsPeriod',\n];\n\ntype Props = RouteComponentProps<\n  {dashboardId: string; orgId: string; widgetId?: number},\n  {}\n> & {\n  children: React.ReactNode;\n  organization: Organization;\n};\n\nfunction ViewEditDashboard(props: Props) {\n  const api = useApi();\n\n  const {organization, params, location} = props;\n  const dashboardId = params.dashboardId;\n  const orgSlug = organization.slug;\n  const [newWidget, setNewWidget] = useState<Widget | undefined>();\n  const [dashboardInitialState, setDashboardInitialState] = useState(DashboardState.VIEW);\n\n  useEffect(() => {\n    if (dashboardId && dashboardId !== 'default-overview') {\n      updateDashboardVisit(api, orgSlug, dashboardId);\n    }\n  }, [api, orgSlug, dashboardId]);\n\n  useEffect(() => {\n    const constructedWidget = constructWidgetFromQuery(location.query);\n    setNewWidget(constructedWidget);\n    // Clean up url after constructing widget from query string, only allow GHS params\n    if (constructedWidget) {\n      setDashboardInitialState(DashboardState.EDIT);\n      browserHistory.replace({\n        pathname: location.pathname,\n        query: pick(location.query, ALLOWED_PARAMS),\n      });\n    }\n  }, [location.pathname]);\n\n  return (\n    <DashboardBasicFeature organization={organization}>\n      <OrgDashboards\n        api={api}\n        location={location}\n        params={params}\n        organization={organization}\n      >\n        {({dashboard, dashboards, error, onDashboardUpdate}) => {\n          return error ? (\n            <NotFound />\n          ) : dashboard ? (\n            <ErrorBoundary>\n              <DashboardDetail\n                {...props}\n                initialState={dashboardInitialState}\n                dashboard={dashboard}\n                dashboards={dashboards}\n                onDashboardUpdate={onDashboardUpdate}\n                newWidget={newWidget}\n                onSetNewWidget={() => setNewWidget(undefined)}\n              />\n            </ErrorBoundary>\n          ) : (\n            <LoadingIndicator />\n          );\n        }}\n      </OrgDashboards>\n    </DashboardBasicFeature>\n  );\n}\n\nexport default withOrganization(ViewEditDashboard);\n\ntype FeatureProps = {\n  children: React.ReactNode;\n  organization: Organization;\n};\n\nexport const DashboardBasicFeature = ({organization, children}: FeatureProps) => {\n  const renderDisabled = () => (\n    <Layout.Page withPadding>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </Layout.Page>\n  );\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:dashboards-page\"\n      features={['organizations:dashboards-basic']}\n      organization={organization}\n      renderDisabled={renderDisabled}\n    >\n      {children}\n    </Feature>\n  );\n};\n"],"names":["DashboardsV2Container","props","organization","params","api","location","children","features","includes","Fragment","DashboardBasicFeature","dashboard","dashboards","error","onDashboardUpdate","initialState","DashboardState","withApi","withOrganization","OrgDashboards","AsyncComponent","loading","reloading","errors","selectedDashboard","componentDidUpdate","prevProps","isEqual","dashboardId","this","remountComponent","getEndpoints","url","slug","endpoints","push","setEventNames","setRouteAnalyticsParams","dashboard_id","updatedDashboard","setState","getDashboards","state","Array","isArray","onRequestSuccess","stateKey","data","queryParamFilters","Set","hasSavedPageFilters","isEmpty","Object","keys","query","filter","unsavedQueryParam","has","browserHistory","project","projects","environment","statsPeriod","period","start","end","utc","length","id","normalizeUrl","pathname","renderLoading","withPadding","renderBody","widgets","map","assignTempId","renderError","values","find","resp","status","super","renderComponent","title","t","orgSlug","withRouteAnalytics","ALLOWED_PARAMS","ViewEditDashboard","useApi","newWidget","setNewWidget","useState","dashboardInitialState","setDashboardInitialState","useEffect","updateDashboardVisit","constructedWidget","constructWidgetFromQuery","pick","onSetNewWidget","undefined","hookName","renderDisabled","type"],"sourceRoot":""}