{"version":3,"file":"chunks/app_views_organizationGroupDetails_groupReplays_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"wUAoDA,QAjCA,SAAuB,GAAsD,IAAtD,UAACA,EAAS,SAAEC,EAAQ,aAAEC,GAAsB,EACjE,MAAMC,GAAMC,EAAAA,EAAAA,MAELC,EAAMC,IAAWC,EAAAA,EAAAA,UAAgB,CACtCC,gBAAYC,EACZC,YAAY,EACZC,UAAW,KACXC,QAAS,KAGLC,GAAcC,EAAAA,EAAAA,cAAYC,UAC9BZ,EAAIa,QACJV,GAAQW,IAAQ,IACXA,EACHP,YAAY,MAEd,MAAMQ,QAAiBC,EAAAA,EAAAA,IAAgB,CACrChB,MACAD,eACAD,WACAD,cAGFM,EAAQ,IAAIY,EAAUR,YAAY,GAAO,GACxC,CAACP,EAAKD,EAAcD,EAAUD,IAMjC,OAJAoB,EAAAA,EAAAA,YAAU,KACRP,GAAa,GACZ,CAACA,IAEGR,CACT,C,oNCxCO,SAASgB,EAAgB,GAQ7B,IARgD,cACjDC,EAAa,YACbC,EAAW,YACXC,GAKD,EACC,MAAMC,EAAgBH,EAAcI,MAClCC,QAAsClB,IAA7Bc,EAAYK,MAAMD,KAG7B,GAAIJ,EAAYM,WAAaL,IAAgBC,EAC3C,OAKF,MAAMG,EAAQN,EAAcQ,QAC1B,CAACC,EAAUJ,KACTI,EAASJ,QAASlB,EACXsB,IAET,IAAIR,EAAYK,QAGlBI,EAAAA,eAAAA,QAAuB,CACrBH,SAAUN,EAAYM,SACtBD,SAEJ,CAqBA,QAnBA,SAAyC,GAAuB,IAAvB,cAACN,GAAoB,EAC5D,MAAMrB,GAAWgC,EAAAA,EAAAA,KAEXC,GAAepB,EAAAA,EAAAA,cACnBS,IACEF,EAAiB,CACfC,gBACAC,cACAC,YAAavB,EAAS4B,UACtB,GAEJ,CAAC5B,EAAS4B,SAAUP,KAGtBF,EAAAA,EAAAA,YAAU,IACDY,EAAAA,eAAAA,OAAsBE,IAC5B,CAACA,GACN,C,qrCC/BA,SAASC,EAAa,GAAgB,IAAhB,MAACC,GAAa,EAClC,MAAMjC,GAAMC,EAAAA,EAAAA,KACNH,GAAWgC,EAAAA,EAAAA,KACX/B,GAAemC,EAAAA,EAAAA,KACfC,GAAQC,EAAAA,EAAAA,KACRC,GAAoBC,EAAAA,EAAAA,GAAU,eAAcH,EAAMI,YAAYC,WAE7DzB,EAAU0B,IAAerC,EAAAA,EAAAA,UAG7B,CAACI,UAAW,KAAMkC,eAAWpC,KAEzBD,EAAYsC,IAAiBvC,EAAAA,EAAAA,aAE9B,OAACwC,GAAU9C,EAAS2B,MACpBoB,GAAiBlC,EAAAA,EAAAA,cAAYC,UACjC,MAAMf,EAAYiD,EAAAA,GAAAA,eAAyB,CACzCC,GAAI,GACJC,KAAO,uBACPC,QAAS,EACTC,OAAQ,CAAC,WAAY,WACrBzB,MAAQ,YAAWQ,EAAMc,kBACzBI,SAAU,CAACC,OAAOnB,EAAMoB,QAAQN,OAGlC,IACE,OAAO,KAAC7C,GAAOoD,EAAaC,SAAcC,EAAAA,EAAAA,IACxCxD,EACC,kBAAiBD,EAAa0D,eAC/B5D,EAAU6D,oBAAoB,CAC5BjC,MAAO,CAACmB,aAIZH,EAAY,CACVjC,UAAW+C,GAAMI,kBAAkB,SAAW,GAC9CjB,UAAWxC,EAAK0D,KAAIC,GAAUC,OAAOD,EAAOE,aAKhD,CAHE,MAAOC,GACPC,EAAAA,GAAwBD,GACxBrB,EAAcqB,EAChB,IACC,CAAChE,EAAK4C,EAAQ7C,EAAa0D,KAAMxB,EAAMc,GAAId,EAAMoB,QAAQN,KAEtDlD,GAAYqE,EAAAA,EAAAA,UAAQ,IACnBnD,EAAS2B,UAGPI,EAAAA,GAAAA,eAAyB,CAC9BC,GAAI,GACJC,KAAM,GACNC,QAAS,EACTC,OAAQiB,EAAAA,GACRhB,SAAU,CAACC,OAAOnB,EAAMoB,QAAQN,KAChCtB,MAAQ,OAAMqC,OAAO/C,EAAS2B,cAC9B0B,SAASC,EAAAA,EAAAA,IAAavE,EAAS2B,MAAM6C,KAAMC,EAAAA,MATpC,MAWR,CAACzE,EAAS2B,MAAM6C,KAAMrC,EAAMoB,QAAQN,GAAIhC,EAAS2B,YAOpD,OALA8B,EAAAA,EAAAA,GAAgC,CAACrD,cAAe,CAAC,aACjDF,EAAAA,EAAAA,YAAU,KACR4B,GAAgB,GACf,CAACA,IAEChD,GAqBH,QAAC4E,EAAiB,CAChB5E,UAAWA,EACXE,aAAcA,EACdS,UAAWO,EAASP,aAtBpB,QAACkE,EAAgB,CAACC,aAAW,aAC3B,QAAC,IAAW,CACVtE,WAAYA,EACZE,YAAU,EACVE,QAAS,GACT6D,UAAMhE,EACNsE,eAAgB,CACdC,EAAAA,EAAAA,WACIxC,EAAoB,CAACwC,EAAAA,EAAAA,WAA2B,GACpDA,EAAAA,EAAAA,SACAA,EAAAA,EAAAA,YACAA,EAAAA,EAAAA,aAGJ,QAAC,IAAU,CAACrE,UAAW,SAW/B,CA3FSwB,EAAY,2BA6FrB,MAAMyC,EAAoB,IAQpB,IARqB,UACzB5E,EAAS,aACTE,EAAY,UACZS,GAKD,EACC,MAAMV,GAAWoE,EAAAA,EAAAA,UAAQ,KAAM,CAAEzC,MAAO,CAAC,KAA0C,IAC7EU,GAAQC,EAAAA,EAAAA,KACRC,GAAoBC,EAAAA,EAAAA,GAAU,eAAcH,EAAMI,YAAYC,WAE9D,QAAC/B,EAAO,WAAEF,EAAU,WAAEF,IAAcyE,EAAAA,EAAAA,GAAc,CACtDjF,YACAC,WACAC,iBAGF,OACE,QAAC2E,EAAgB,CAACC,aAAW,aAC3B,QAAC,IAAW,CACVtE,WAAYA,EACZE,WAAYA,EACZE,QAASA,EACT6D,KAAMS,IAAMlF,EAAUmF,OACtBJ,eAAgB,CACdC,EAAAA,EAAAA,WACIxC,EAAoB,CAACwC,EAAAA,EAAAA,WAA2B,GACpDA,EAAAA,EAAAA,SACAA,EAAAA,EAAAA,YACAA,EAAAA,EAAAA,aAGJ,QAAC,IAAU,CAACrE,UAAWA,MACN,EAnCjBiE,EAAiB,gCAuCvB,MAAMC,GAAmB,OAAOO,EAAAA,GAAW,oBAAlB,CAAmB,2BAChBC,GAAKA,EAAE/C,MAAMgD,SAAO,sBAC1BD,GAAKA,EAAE/C,MAAMiD,YAAU,KAG7C,ICzJMC,EAAyBC,IAC7B,MAAMvF,GAAemC,EAAAA,EAAAA,KASrB,OACE,QAAC,IAAO,CACNqD,SAAU,CAAC,qBACXxF,aAAcA,EACdyF,eAZJ,WACE,OACE,QAAC,KAAW,CAACb,aAAW,YACtB,QAAC,KAAK,CAACc,KAAK,UAAS,UAAEC,EAAAA,EAAAA,GAAE,4CAG/B,EAMmC,UAE/B,QAAC,EAAY,IAAKJ,KACV,EAjBRD,EAAqB,oCAqB3B,S","sources":["webpack:///./app/utils/replays/hooks/useReplayList.tsx","webpack:///./app/utils/useCleanQueryParamsOnRouteLeave.tsx","webpack:///./app/views/organizationGroupDetails/groupReplays/groupReplays.tsx","webpack:///./app/views/organizationGroupDetails/groupReplays/index.tsx"],"sourcesContent":["import {useCallback, useEffect, useState} from 'react';\nimport {Location} from 'history';\n\nimport type {Organization} from 'sentry/types';\nimport type EventView from 'sentry/utils/discover/eventView';\nimport fetchReplayList from 'sentry/utils/replays/fetchReplayList';\nimport useApi from 'sentry/utils/useApi';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\ntype Options = {\n  eventView: EventView;\n  location: Location<ReplayListLocationQuery>;\n  organization: Organization;\n};\n\ntype State = Awaited<ReturnType<typeof fetchReplayList>> & {isFetching: boolean};\n\ntype Result = State;\n\nfunction useReplayList({eventView, location, organization}: Options): Result {\n  const api = useApi();\n\n  const [data, setData] = useState<State>({\n    fetchError: undefined,\n    isFetching: true,\n    pageLinks: null,\n    replays: [],\n  });\n\n  const loadReplays = useCallback(async () => {\n    api.clear();\n    setData(prev => ({\n      ...prev,\n      isFetching: true,\n    }));\n    const response = await fetchReplayList({\n      api,\n      organization,\n      location,\n      eventView,\n    });\n\n    setData({...response, isFetching: false});\n  }, [api, organization, location, eventView]);\n\n  useEffect(() => {\n    loadReplays();\n  }, [loadReplays]);\n\n  return data;\n}\n\nexport default useReplayList;\n","import {useCallback, useEffect} from 'react';\nimport {browserHistory} from 'react-router';\nimport type {Location} from 'history';\n\nimport {useLocation} from 'sentry/utils/useLocation';\n\ntype Opts = {\n  fieldsToClean: string[];\n};\n\nexport function handleRouteLeave<Q extends object>({\n  fieldsToClean,\n  newLocation,\n  oldPathname,\n}: {\n  fieldsToClean: string[];\n  newLocation: Location<Q>;\n  oldPathname: string;\n}) {\n  const hasSomeValues = fieldsToClean.some(\n    field => newLocation.query[field] !== undefined\n  );\n\n  if (newLocation.pathname === oldPathname || !hasSomeValues) {\n    return;\n  }\n\n  // Removes fields from the URL on route leave so that the parameters will\n  // not interfere with other pages\n  const query = fieldsToClean.reduce(\n    (newQuery, field) => {\n      newQuery[field] = undefined;\n      return newQuery;\n    },\n    {...newLocation.query}\n  );\n\n  browserHistory.replace({\n    pathname: newLocation.pathname,\n    query,\n  });\n}\n\nfunction useCleanQueryParamsOnRouteLeave({fieldsToClean}: Opts) {\n  const location = useLocation();\n\n  const onRouteLeave = useCallback(\n    newLocation => {\n      handleRouteLeave({\n        fieldsToClean,\n        newLocation,\n        oldPathname: location.pathname,\n      });\n    },\n    [location.pathname, fieldsToClean]\n  );\n\n  useEffect(() => {\n    return browserHistory.listen(onRouteLeave);\n  }, [onRouteLeave]);\n}\n\nexport default useCleanQueryParamsOnRouteLeave;\n","import {useCallback, useEffect, useMemo, useState} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\nimport first from 'lodash/first';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport Pagination from 'sentry/components/pagination';\nimport type {Group, Organization} from 'sentry/types';\nimport {TableData} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {doDiscoverQuery} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {DEFAULT_SORT, REPLAY_LIST_FIELDS} from 'sentry/utils/replays/fetchReplayList';\nimport useReplayList from 'sentry/utils/replays/hooks/useReplayList';\nimport useApi from 'sentry/utils/useApi';\nimport useCleanQueryParamsOnRouteLeave from 'sentry/utils/useCleanQueryParamsOnRouteLeave';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useMedia from 'sentry/utils/useMedia';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport {ReplayColumns} from 'sentry/views/replays/replayTable/types';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\ntype Props = {\n  group: Group;\n};\n\nfunction GroupReplays({group}: Props) {\n  const api = useApi();\n  const location = useLocation<ReplayListLocationQuery>();\n  const organization = useOrganization();\n  const theme = useTheme();\n  const hasRoomForColumns = useMedia(`(min-width: ${theme.breakpoints.small})`);\n\n  const [response, setResponse] = useState<{\n    pageLinks: null | string;\n    replayIds: undefined | string[];\n  }>({pageLinks: null, replayIds: undefined});\n\n  const [fetchError, setFetchError] = useState();\n\n  const {cursor} = location.query;\n  const fetchReplayIds = useCallback(async () => {\n    const eventView = EventView.fromSavedQuery({\n      id: '',\n      name: `Errors within replay`,\n      version: 2,\n      fields: ['replayId', 'count()'],\n      query: `issue.id:${group.id} !replayId:\"\"`,\n      projects: [Number(group.project.id)],\n    });\n\n    try {\n      const [{data}, _textStatus, resp] = await doDiscoverQuery<TableData>(\n        api,\n        `/organizations/${organization.slug}/events/`,\n        eventView.getEventsAPIPayload({\n          query: {cursor},\n        } as Location<ReplayListLocationQuery>)\n      );\n\n      setResponse({\n        pageLinks: resp?.getResponseHeader('Link') ?? '',\n        replayIds: data.map(record => String(record.replayId)),\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n      setFetchError(err);\n    }\n  }, [api, cursor, organization.slug, group.id, group.project.id]);\n\n  const eventView = useMemo(() => {\n    if (!response.replayIds) {\n      return null;\n    }\n    return EventView.fromSavedQuery({\n      id: '',\n      name: '',\n      version: 2,\n      fields: REPLAY_LIST_FIELDS,\n      projects: [Number(group.project.id)],\n      query: `id:[${String(response.replayIds)}]`,\n      orderby: decodeScalar(location.query.sort, DEFAULT_SORT),\n    });\n  }, [location.query.sort, group.project.id, response.replayIds]);\n\n  useCleanQueryParamsOnRouteLeave({fieldsToClean: ['cursor']});\n  useEffect(() => {\n    fetchReplayIds();\n  }, [fetchReplayIds]);\n\n  if (!eventView) {\n    return (\n      <StyledLayoutPage withPadding>\n        <ReplayTable\n          fetchError={fetchError}\n          isFetching\n          replays={[]}\n          sort={undefined}\n          visibleColumns={[\n            ReplayColumns.session,\n            ...(hasRoomForColumns ? [ReplayColumns.startedAt] : []),\n            ReplayColumns.duration,\n            ReplayColumns.countErrors,\n            ReplayColumns.activity,\n          ]}\n        />\n        <Pagination pageLinks={null} />\n      </StyledLayoutPage>\n    );\n  }\n  return (\n    <GroupReplaysTable\n      eventView={eventView}\n      organization={organization}\n      pageLinks={response.pageLinks}\n    />\n  );\n}\n\nconst GroupReplaysTable = ({\n  eventView,\n  organization,\n  pageLinks,\n}: {\n  eventView: EventView;\n  organization: Organization;\n  pageLinks: string | null;\n}) => {\n  const location = useMemo(() => ({query: {}} as Location<ReplayListLocationQuery>), []);\n  const theme = useTheme();\n  const hasRoomForColumns = useMedia(`(min-width: ${theme.breakpoints.small})`);\n\n  const {replays, isFetching, fetchError} = useReplayList({\n    eventView,\n    location,\n    organization,\n  });\n\n  return (\n    <StyledLayoutPage withPadding>\n      <ReplayTable\n        fetchError={fetchError}\n        isFetching={isFetching}\n        replays={replays}\n        sort={first(eventView.sorts)}\n        visibleColumns={[\n          ReplayColumns.session,\n          ...(hasRoomForColumns ? [ReplayColumns.startedAt] : []),\n          ReplayColumns.duration,\n          ReplayColumns.countErrors,\n          ReplayColumns.activity,\n        ]}\n      />\n      <Pagination pageLinks={pageLinks} />\n    </StyledLayoutPage>\n  );\n};\n\nconst StyledLayoutPage = styled(Layout.Page)`\n  box-shadow: 0px 0px 1px ${p => p.theme.gray200};\n  background-color: ${p => p.theme.background};\n`;\n\nexport default GroupReplays;\n","import Feature from 'sentry/components/acl/feature';\nimport {Alert} from 'sentry/components/alert';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {t} from 'sentry/locale';\nimport type {Group} from 'sentry/types';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport GroupReplays from './groupReplays';\n\ntype Props = {\n  group: Group;\n};\n\nconst GroupReplaysContainer = (props: Props) => {\n  const organization = useOrganization();\n  function renderNoAccess() {\n    return (\n      <Layout.Page withPadding>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </Layout.Page>\n    );\n  }\n\n  return (\n    <Feature\n      features={['session-replay-ui']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <GroupReplays {...props} />\n    </Feature>\n  );\n};\n\nexport default GroupReplaysContainer;\n"],"names":["eventView","location","organization","api","useApi","data","setData","useState","fetchError","undefined","isFetching","pageLinks","replays","loadReplays","useCallback","async","clear","prev","response","fetchReplayList","useEffect","handleRouteLeave","fieldsToClean","newLocation","oldPathname","hasSomeValues","some","field","query","pathname","reduce","newQuery","browserHistory","useLocation","onRouteLeave","GroupReplays","group","useOrganization","theme","useTheme","hasRoomForColumns","useMedia","breakpoints","small","setResponse","replayIds","setFetchError","cursor","fetchReplayIds","EventView","id","name","version","fields","projects","Number","project","_textStatus","resp","doDiscoverQuery","slug","getEventsAPIPayload","getResponseHeader","map","record","String","replayId","err","Sentry","useMemo","REPLAY_LIST_FIELDS","orderby","decodeScalar","sort","DEFAULT_SORT","useCleanQueryParamsOnRouteLeave","GroupReplaysTable","StyledLayoutPage","withPadding","visibleColumns","ReplayColumns","useReplayList","first","sorts","Layout","p","gray200","background","GroupReplaysContainer","props","features","renderDisabled","type","t"],"sourceRoot":""}