# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openmtpk
else:
    import _openmtpk

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openmtpk.delete_SwigPyIterator

    def value(self):
        return _openmtpk.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openmtpk.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openmtpk.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openmtpk.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openmtpk.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openmtpk.SwigPyIterator_copy(self)

    def next(self):
        return _openmtpk.SwigPyIterator_next(self)

    def __next__(self):
        return _openmtpk.SwigPyIterator___next__(self)

    def previous(self):
        return _openmtpk.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openmtpk.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openmtpk.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openmtpk.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openmtpk.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openmtpk.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openmtpk.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openmtpk.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openmtpk:
_openmtpk.SwigPyIterator_swigregister(SwigPyIterator)

class Vectors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def add(self, a, b):
        return _openmtpk.Vectors_add(self, a, b)
    __swig_destroy__ = _openmtpk.delete_Vectors

# Register Vectors in _openmtpk:
_openmtpk.Vectors_swigregister(Vectors)

class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_openmtpk.Matrix_data_get, _openmtpk.Matrix_data_set)
    dim = property(_openmtpk.Matrix_dim_get, _openmtpk.Matrix_dim_set)
    num_elements = property(_openmtpk.Matrix_num_elements_get, _openmtpk.Matrix_num_elements_set)

    def __init__(self, *args):
        _openmtpk.Matrix_swiginit(self, _openmtpk.new_Matrix(*args))

    def __call__(self, row, col):
        return _openmtpk.Matrix___call__(self, row, col)

    def mult(self, target):
        return _openmtpk.Matrix_mult(self, target)

    def scalar_mult(self, scalar):
        return _openmtpk.Matrix_scalar_mult(self, scalar)

    def mult_elem(self, target):
        return _openmtpk.Matrix_mult_elem(self, target)

    def sqr_err(self):
        return _openmtpk.Matrix_sqr_err(self)

    def add(self, target):
        return _openmtpk.Matrix_add(self, target)

    def __add__(self, target):
        return _openmtpk.Matrix___add__(self, target)

    def scalar_add(self, scalar):
        return _openmtpk.Matrix_scalar_add(self, scalar)

    def __neg__(self):
        return _openmtpk.Matrix___neg__(self)

    def sub(self, target):
        return _openmtpk.Matrix_sub(self, target)

    def __sub__(self, target):
        return _openmtpk.Matrix___sub__(self, target)

    def __eq__(self, target):
        return _openmtpk.Matrix___eq__(self, target)

    def all(self):
        return _openmtpk.Matrix_all(self)

    def transpose(self):
        return _openmtpk.Matrix_transpose(self)

    def T(self):
        return _openmtpk.Matrix_T(self)

    def sum(self, *args):
        return _openmtpk.Matrix_sum(self, *args)

    def mean(self, *args):
        return _openmtpk.Matrix_mean(self, *args)

    def concatenate(self, target, dimension):
        return _openmtpk.Matrix_concatenate(self, target, dimension)

    def diag(self):
        return _openmtpk.Matrix_diag(self)

    def apply_func(self, function):
        return _openmtpk.Matrix_apply_func(self, function)

    def print_shape(self):
        return _openmtpk.Matrix_print_shape(self)

    def print_mtx(self):
        return _openmtpk.Matrix_print_mtx(self)

    def fill_index(self, val):
        return _openmtpk.Matrix_fill_index(self, val)
    __swig_destroy__ = _openmtpk.delete_Matrix

# Register Matrix in _openmtpk:
_openmtpk.Matrix_swigregister(Matrix)

class MatrixI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_openmtpk.MatrixI_data_get, _openmtpk.MatrixI_data_set)
    dim = property(_openmtpk.MatrixI_dim_get, _openmtpk.MatrixI_dim_set)
    num_elements = property(_openmtpk.MatrixI_num_elements_get, _openmtpk.MatrixI_num_elements_set)

    def __init__(self, *args):
        _openmtpk.MatrixI_swiginit(self, _openmtpk.new_MatrixI(*args))

    def __call__(self, row, col):
        return _openmtpk.MatrixI___call__(self, row, col)

    def mult(self, target):
        return _openmtpk.MatrixI_mult(self, target)

    def scalar_mult(self, scalar):
        return _openmtpk.MatrixI_scalar_mult(self, scalar)

    def mult_elem(self, target):
        return _openmtpk.MatrixI_mult_elem(self, target)

    def sqr_err(self):
        return _openmtpk.MatrixI_sqr_err(self)

    def add(self, target):
        return _openmtpk.MatrixI_add(self, target)

    def __add__(self, target):
        return _openmtpk.MatrixI___add__(self, target)

    def scalar_add(self, scalar):
        return _openmtpk.MatrixI_scalar_add(self, scalar)

    def __neg__(self):
        return _openmtpk.MatrixI___neg__(self)

    def sub(self, target):
        return _openmtpk.MatrixI_sub(self, target)

    def __sub__(self, target):
        return _openmtpk.MatrixI___sub__(self, target)

    def __eq__(self, target):
        return _openmtpk.MatrixI___eq__(self, target)

    def all(self):
        return _openmtpk.MatrixI_all(self)

    def transpose(self):
        return _openmtpk.MatrixI_transpose(self)

    def T(self):
        return _openmtpk.MatrixI_T(self)

    def sum(self, *args):
        return _openmtpk.MatrixI_sum(self, *args)

    def mean(self, *args):
        return _openmtpk.MatrixI_mean(self, *args)

    def concatenate(self, target, dimension):
        return _openmtpk.MatrixI_concatenate(self, target, dimension)

    def diag(self):
        return _openmtpk.MatrixI_diag(self)

    def apply_func(self, function):
        return _openmtpk.MatrixI_apply_func(self, function)

    def print_shape(self):
        return _openmtpk.MatrixI_print_shape(self)

    def print_mtx(self):
        return _openmtpk.MatrixI_print_mtx(self)

    def fill_index(self, val):
        return _openmtpk.MatrixI_fill_index(self, val)
    __swig_destroy__ = _openmtpk.delete_MatrixI

# Register MatrixI in _openmtpk:
_openmtpk.MatrixI_swigregister(MatrixI)

class mtx(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def zeros(rows, cols):
        return _openmtpk.mtx_zeros(rows, cols)

    @staticmethod
    def ones(rows, cols):
        return _openmtpk.mtx_ones(rows, cols)

    @staticmethod
    def randn(rows, cols):
        return _openmtpk.mtx_randn(rows, cols)

    @staticmethod
    def rand(rows, cols):
        return _openmtpk.mtx_rand(rows, cols)
    __swig_destroy__ = _openmtpk.delete_mtx

# Register mtx in _openmtpk:
_openmtpk.mtx_swigregister(mtx)

def mtx_zeros(rows, cols):
    return _openmtpk.mtx_zeros(rows, cols)

def mtx_ones(rows, cols):
    return _openmtpk.mtx_ones(rows, cols)

def mtx_randn(rows, cols):
    return _openmtpk.mtx_randn(rows, cols)

def mtx_rand(rows, cols):
    return _openmtpk.mtx_rand(rows, cols)

class Basics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def greatest_power(self, n, p):
        return _openmtpk.Basics_greatest_power(self, n, p)

    def op_gcd(self, x, y):
        return _openmtpk.Basics_op_gcd(self, x, y)
    __swig_destroy__ = _openmtpk.delete_Basics

# Register Basics in _openmtpk:
_openmtpk.Basics_swigregister(Basics)

class Calculus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def derivative_term(self, p_term, val):
        return _openmtpk.Calculus_derivative_term(self, p_term, val)

    def deriv_at(self, poly, val):
        return _openmtpk.Calculus_deriv_at(self, poly, val)

    def deriv(self, poly):
        return _openmtpk.Calculus_deriv(self, poly)
    __swig_destroy__ = _openmtpk.delete_Calculus

# Register Calculus in _openmtpk:
_openmtpk.Calculus_swigregister(Calculus)

class Regression(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openmtpk.Regression_swiginit(self, _openmtpk.new_Regression())

    def calculate_coeffecient(self):
        return _openmtpk.Regression_calculate_coeffecient(self)

    def calculate_constant(self):
        return _openmtpk.Regression_calculate_constant(self)

    def data_size(self):
        return _openmtpk.Regression_data_size(self)

    def return_coeffecient(self):
        return _openmtpk.Regression_return_coeffecient(self)

    def return_constant(self):
        return _openmtpk.Regression_return_constant(self)

    def best_fit(self):
        return _openmtpk.Regression_best_fit(self)

    def get_input(self, n):
        return _openmtpk.Regression_get_input(self, n)

    def show_data(self):
        return _openmtpk.Regression_show_data(self)

    def predict(self, x):
        return _openmtpk.Regression_predict(self, x)

    def error_square(self):
        return _openmtpk.Regression_error_square(self)

    def error_in(self, num):
        return _openmtpk.Regression_error_in(self, num)

    def num_rows(self, input):
        return _openmtpk.Regression_num_rows(self, input)
    __swig_destroy__ = _openmtpk.delete_Regression

# Register Regression in _openmtpk:
_openmtpk.Regression_swigregister(Regression)

class Primality(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def is_prime(self, n):
        return _openmtpk.Primality_is_prime(self, n)

    def compute_miller_rabin(self, d, n):
        return _openmtpk.Primality_compute_miller_rabin(self, d, n)

    def miller_rabin_prime(self, n, iters):
        return _openmtpk.Primality_miller_rabin_prime(self, n, iters)

    def miller_rabin(self, iters, min_val, max_val):
        return _openmtpk.Primality_miller_rabin(self, iters, min_val, max_val)

    def jacobian_number(self, a, n):
        return _openmtpk.Primality_jacobian_number(self, a, n)

    def solovoy_strassen(self, p, iters):
        return _openmtpk.Primality_solovoy_strassen(self, p, iters)

    def mod_pow(self, base, exponent, mod):
        return _openmtpk.Primality_mod_pow(self, base, exponent, mod)

    def carmichael_num(self, n):
        return _openmtpk.Primality_carmichael_num(self, n)

    def sieve_of_eratosthenes(self, n):
        return _openmtpk.Primality_sieve_of_eratosthenes(self, n)

    def pollard_rho(self, n):
        return _openmtpk.Primality_pollard_rho(self, n)

    def ETF(self, n):
        return _openmtpk.Primality_ETF(self, n)
    __swig_destroy__ = _openmtpk.delete_Primality

# Register Primality in _openmtpk:
_openmtpk.Primality_swigregister(Primality)

BITS = _openmtpk.BITS
BYTE_LIMIT = _openmtpk.BYTE_LIMIT
class RC4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def byte_swap(self, a, b):
        return _openmtpk.RC4_byte_swap(self, a, b)

    def trad_swap(self, a, b):
        return _openmtpk.RC4_trad_swap(self, a, b)

    def XOR_swap(self, a, b):
        return _openmtpk.RC4_XOR_swap(self, a, b)

    def KSA(self, key, S, swap_type):
        return _openmtpk.RC4_KSA(self, key, S, swap_type)

    def PRGA(self, S, plaintext, ciphertext, swap_type):
        return _openmtpk.RC4_PRGA(self, S, plaintext, ciphertext, swap_type)

    def store_hash(self, plaintext, hashtext, swap_type):
        return _openmtpk.RC4_store_hash(self, plaintext, hashtext, swap_type)

    def compute(self, key, plaintext, hashtext, swap_type):
        return _openmtpk.RC4_compute(self, key, plaintext, hashtext, swap_type)
    __swig_destroy__ = _openmtpk.delete_RC4

# Register RC4 in _openmtpk:
_openmtpk.RC4_swigregister(RC4)

class Cipher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def caesar(self, plaintext, key):
        return _openmtpk.Cipher_caesar(self, plaintext, key)

    def keyword_encode(self, key):
        return _openmtpk.Cipher_keyword_encode(self, key)

    def keyword(self, plaintext, encoded_text):
        return _openmtpk.Cipher_keyword(self, plaintext, encoded_text)
    __swig_destroy__ = _openmtpk.delete_Cipher

# Register Cipher in _openmtpk:
_openmtpk.Cipher_swigregister(Cipher)



