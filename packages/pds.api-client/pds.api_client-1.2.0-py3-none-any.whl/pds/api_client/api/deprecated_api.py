"""
    Registry API

    Registry API enabling advanced search on PDS data and metadata. The API provides end-points to search for bundles, collections and any PDS products with advanced search queries. It also enables to browse the archive hierarchically downward (e.g. collection/s products) or upward (e.g. bundles containing a product). The detailed syntax for querying the end-point is given in the reference documentation.   # noqa: E501

    The version of the OpenAPI document: 1.1
    Contact: pds-operator@jpl.nasa.gov
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from pds.api_client.api_client import ApiClient, Endpoint as _Endpoint
from pds.api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from pds.api_client.model.error_message import ErrorMessage


class DeprecatedApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __bundle_list(
            self,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bundle_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                keywords ([str]): syntax: keyword=keyword1,keyword2,...  behavior: free text search on title and description (if set q is ignored . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                q (str): syntax: q=\"vid eq 13.0\"  behavior: query uses eq,ne,gt,ge,lt,le,(,),not,and,or operators. Properties are named as in 'properties' attributes, literals are strings between quotes, like \"animal\", or numbers. Detailed query specification is available at https://bit.ly/3h3D54T  note: ignored when keyword is present . [optional]
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.bundle_list = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/bundles',
                'operation_id': 'bundle_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'keywords',
                    'limit',
                    'q',
                    'sort',
                    'start',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        ([str],),
                    'keywords':
                        ([str],),
                    'limit':
                        (int,),
                    'q':
                        (str,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'keywords': 'keywords',
                    'limit': 'limit',
                    'q': 'q',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'fields': 'query',
                    'keywords': 'query',
                    'limit': 'query',
                    'q': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'keywords': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__bundle_list
        )

        def __bundles_lidvid(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bundles_lidvid(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.bundles_lidvid = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/bundles/{identifier}',
                'operation_id': 'bundles_lidvid',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__bundles_lidvid
        )

        def __bundles_lidvid_all(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bundles_lidvid_all(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.bundles_lidvid_all = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/bundles/{identifier}/all',
                'operation_id': 'bundles_lidvid_all',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                    'limit',
                    'sort',
                    'start',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                    'limit':
                        (int,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                    'limit': 'limit',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__bundles_lidvid_all
        )

        def __bundles_lidvid_collections(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bundles_lidvid_collections(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.bundles_lidvid_collections = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/bundles/{identifier}/collections',
                'operation_id': 'bundles_lidvid_collections',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                    'limit',
                    'sort',
                    'start',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                    'limit':
                        (int,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                    'limit': 'limit',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__bundles_lidvid_collections
        )

        def __bundles_lidvid_collections_all(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bundles_lidvid_collections_all(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.bundles_lidvid_collections_all = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/bundles/{identifier}/collections/all',
                'operation_id': 'bundles_lidvid_collections_all',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                    'limit',
                    'sort',
                    'start',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                    'limit':
                        (int,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                    'limit': 'limit',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__bundles_lidvid_collections_all
        )

        def __bundles_lidvid_collections_latest(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bundles_lidvid_collections_latest(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.bundles_lidvid_collections_latest = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/bundles/{identifier}/collections/latest',
                'operation_id': 'bundles_lidvid_collections_latest',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                    'limit',
                    'sort',
                    'start',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                    'limit':
                        (int,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                    'limit': 'limit',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__bundles_lidvid_collections_latest
        )

        def __bundles_lidvid_latest(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bundles_lidvid_latest(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.bundles_lidvid_latest = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/bundles/{identifier}/latest',
                'operation_id': 'bundles_lidvid_latest',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__bundles_lidvid_latest
        )

        def __bundles_lidvid_products(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bundles_lidvid_products(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.bundles_lidvid_products = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/bundles/{identifier}/products',
                'operation_id': 'bundles_lidvid_products',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                    'limit',
                    'sort',
                    'start',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                    'limit':
                        (int,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                    'limit': 'limit',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__bundles_lidvid_products
        )

        def __collection_list(
            self,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.collection_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                keywords ([str]): syntax: keyword=keyword1,keyword2,...  behavior: free text search on title and description (if set q is ignored . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                q (str): syntax: q=\"vid eq 13.0\"  behavior: query uses eq,ne,gt,ge,lt,le,(,),not,and,or operators. Properties are named as in 'properties' attributes, literals are strings between quotes, like \"animal\", or numbers. Detailed query specification is available at https://bit.ly/3h3D54T  note: ignored when keyword is present . [optional]
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.collection_list = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/collections',
                'operation_id': 'collection_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'keywords',
                    'limit',
                    'q',
                    'sort',
                    'start',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        ([str],),
                    'keywords':
                        ([str],),
                    'limit':
                        (int,),
                    'q':
                        (str,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'keywords': 'keywords',
                    'limit': 'limit',
                    'q': 'q',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'fields': 'query',
                    'keywords': 'query',
                    'limit': 'query',
                    'q': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'keywords': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__collection_list
        )

        def __collections_lidvid(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.collections_lidvid(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.collections_lidvid = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/collections/{identifier}',
                'operation_id': 'collections_lidvid',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__collections_lidvid
        )

        def __collections_lidvid_all(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.collections_lidvid_all(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.collections_lidvid_all = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/collections/{identifier}/all',
                'operation_id': 'collections_lidvid_all',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                    'limit',
                    'sort',
                    'start',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                    'limit':
                        (int,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                    'limit': 'limit',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__collections_lidvid_all
        )

        def __collections_lidvid_bundles(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.collections_lidvid_bundles(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.collections_lidvid_bundles = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/collections/{identifier}/bundles',
                'operation_id': 'collections_lidvid_bundles',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                    'limit',
                    'sort',
                    'start',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                    'limit':
                        (int,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                    'limit': 'limit',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__collections_lidvid_bundles
        )

        def __collections_lidvid_latest(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.collections_lidvid_latest(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.collections_lidvid_latest = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/collections/{identifier}/latest',
                'operation_id': 'collections_lidvid_latest',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__collections_lidvid_latest
        )

        def __collections_lidvid_products(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.collections_lidvid_products(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.collections_lidvid_products = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/collections/{identifier}/products',
                'operation_id': 'collections_lidvid_products',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                    'limit',
                    'sort',
                    'start',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                    'limit':
                        (int,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                    'limit': 'limit',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__collections_lidvid_products
        )

        def __collections_lidvid_products_all(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.collections_lidvid_products_all(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.collections_lidvid_products_all = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/collections/{identifier}/products/all',
                'operation_id': 'collections_lidvid_products_all',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                    'limit',
                    'sort',
                    'start',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                    'limit':
                        (int,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                    'limit': 'limit',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__collections_lidvid_products_all
        )

        def __collections_lidvid_products_latest(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.collections_lidvid_products_latest(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.collections_lidvid_products_latest = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/collections/{identifier}/products/latest',
                'operation_id': 'collections_lidvid_products_latest',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                    'limit',
                    'sort',
                    'start',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                    'limit':
                        (int,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                    'limit': 'limit',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__collections_lidvid_products_latest
        )

        def __products_lidivid_bundles_all(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.products_lidivid_bundles_all(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.products_lidivid_bundles_all = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/products/{identifier}/bundles/all',
                'operation_id': 'products_lidivid_bundles_all',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                    'limit',
                    'sort',
                    'start',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                    'limit':
                        (int,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                    'limit': 'limit',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__products_lidivid_bundles_all
        )

        def __products_lidvid_bundles(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.products_lidvid_bundles(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.products_lidvid_bundles = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/products/{identifier}/bundles',
                'operation_id': 'products_lidvid_bundles',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                    'limit',
                    'sort',
                    'start',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                    'limit':
                        (int,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                    'limit': 'limit',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__products_lidvid_bundles
        )

        def __products_lidvid_bundles_latest(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.products_lidvid_bundles_latest(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.products_lidvid_bundles_latest = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/products/{identifier}/bundles/latest',
                'operation_id': 'products_lidvid_bundles_latest',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                    'limit',
                    'sort',
                    'start',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                    'limit':
                        (int,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                    'limit': 'limit',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__products_lidvid_bundles_latest
        )

        def __products_lidvid_collections(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.products_lidvid_collections(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.products_lidvid_collections = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/products/{identifier}/collections',
                'operation_id': 'products_lidvid_collections',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                    'limit',
                    'sort',
                    'start',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                    'limit':
                        (int,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                    'limit': 'limit',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__products_lidvid_collections
        )

        def __products_lidvid_collections_all(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.products_lidvid_collections_all(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.products_lidvid_collections_all = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/products/{identifier}/collections/all',
                'operation_id': 'products_lidvid_collections_all',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                    'limit',
                    'sort',
                    'start',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                    'limit':
                        (int,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                    'limit': 'limit',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__products_lidvid_collections_all
        )

        def __products_lidvid_collections_latest(
            self,
            identifier,
            **kwargs
        ):
            """deprecated  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.products_lidvid_collections_latest(identifier, async_req=True)
            >>> result = thread.get()

            Args:
                identifier (str): syntax: lidvid or lid  behavior (lid): returns one or more items whose lid matches this lid exactly. If the endpoint ends with the identifier or /latest then a signle result is returned and it is the highest version. If the endpoint ends with /all then all versions of the lid are returned.  behavior (lidvid): returns one and only one item whose lidvid matches this lidvid exactly.  note: the current lid/lidvid resolution will match all the lids that start with lid. In other words, it acts like a glob of foobar*. It behavesn this way from first character to the last  note: simple sorting of the lidvid is being done to select the latest from the end of the list. However, the versions 1.0, 2.0, and 13.0 will sort to 1.0, 13.0, and 2.0 so the end of the list may not be the latest. 

            Keyword Args:
                fields ([str]): syntax: fields=field1,field2,...  behavior: this parameter and the headder Accept: type determine what content is packaged for the result. While the types application/csv, application/kvp+json, and text/csv return only the fields requesteted, all of the other types have a minimal set of fields that must be returned. Duplicating a minimally required field in this parameter has not effect. The types vnd.nasa.pds.pds4+json and vnd.nasa.pds.pds4+xml have a complete set of fields that must be returned; meaning this parameter does not impact their content. When fields is not used, then the minimal set of fields, or all when minimal is an empty set, is returned.  notes: the blob fields are blocked unless specifically requrested and only for the */csv and application/kvp+csv types. . [optional]
                limit (int): syntax: limit=10  behavior: maximum number of matching results returned, for pagination  note: limit=0 returns just the summary . [optional] if omitted the server will use the default value of 100
                sort ([str]): syntax: sort=asc(field0),desc(field1),...  behavior: is this implemented? . [optional]
                start (int): syntax: start=12  behavior: offset in matching result list, for pagination . [optional] if omitted the server will use the default value of 0
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['identifier'] = \
                identifier
            return self.call_with_http_info(**kwargs)

        self.products_lidvid_collections_latest = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/products/{identifier}/collections/latest',
                'operation_id': 'products_lidvid_collections_latest',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'fields',
                    'limit',
                    'sort',
                    'start',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'start',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 0,
                    },
                    ('start',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str,),
                    'fields':
                        ([str],),
                    'limit':
                        (int,),
                    'sort':
                        ([str],),
                    'start':
                        (int,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'fields': 'fields',
                    'limit': 'limit',
                    'sort': 'sort',
                    'start': 'start',
                },
                'location_map': {
                    'identifier': 'path',
                    'fields': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'start': 'query',
                },
                'collection_format_map': {
                    'fields': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*',
                    '*/*',
                    'application/csv',
                    'application/json',
                    'application/kvp+json',
                    'application/vnd.nasa.pds.pds4+json',
                    'application/vnd.nasa.pds.pds4+xml',
                    'application/xml',
                    'text/csv',
                    'text/html',
                    'text/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__products_lidvid_collections_latest
        )
