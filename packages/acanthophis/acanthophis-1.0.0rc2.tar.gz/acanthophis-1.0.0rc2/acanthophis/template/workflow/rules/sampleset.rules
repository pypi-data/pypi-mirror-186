
def all_sampleset_files(wc):
    everything = set()
    print(f"{wc.sampleset}:")
    if config["samplesets"][wc.sampleset].get("varcall", {}).get("snpeff", False):
        print("  - snpeff")
        everything.update(
                P(expand("variants/annotated/{caller}~{aligner}~{ref}~{sampleset}~filtered-{filter}~snpEff.vcf.gz",
                 caller=config["samplesets"][wc.sampleset]["varcall"]["callers"],
                 aligner=config["samplesets"][wc.sampleset]["varcall"]["aligners"],
                 ref=config["samplesets"][wc.sampleset]["varcall"]["refs"],
                 filter=config["samplesets"][wc.sampleset]["varcall"]["filters"],
                 sampleset=wc.sampleset))
        )

    if "varcall" in config["samplesets"][wc.sampleset]:
        print("  - varcall")
        everything.update(
               P(expand("variants/final/{caller}~{aligner}~{ref}~{sampleset}~filtered-{filter}.{ext}",
                      ext=["bcf", "bcf.csi", "vcf.gz", "vcf.gz.csi", "vcf.gz.stats"] if config["tool_settings"].get("varcall", {}).get("make_bcfs", False)
                       else ["vcf.gz", "vcf.gz.csi", "vcf.gz.stats"],
                      caller=config["samplesets"][wc.sampleset]["varcall"]["callers"],
                      aligner=config["samplesets"][wc.sampleset]["varcall"]["aligners"],
                      ref=config["samplesets"][wc.sampleset]["varcall"]["refs"],
                      filter=config["samplesets"][wc.sampleset]["varcall"]["filters"],
                      sampleset=wc.sampleset))
        )

    if "graftm" in config["samplesets"][wc.sampleset]:
        print("  - graftm")
        everything.update(
            P(expand("taxonid/graftm/{db}/{db}~{sample}/",
                     sample=config["SAMPLESETS"][wc.sampleset],
                     db=config["samplesets"][wc.sampleset].get("graftm", {}).get("packages", []),
                     ))
        )

    if "kaiju" in config["samplesets"][wc.sampleset]:
        print("  - kaiju")
        everything.update(
            P(expand("taxonid/kaiju/{db}~{sample}.txt.zst",
                     sample=config["SAMPLESETS"][wc.sampleset],
                     db=config["samplesets"][wc.sampleset].get("kaiju", {}).get("dbs", []),
                     ))
        )

    if "kraken" in config["samplesets"][wc.sampleset]:
        print("  - kraken_multiqc")
        everything.update(
            [P(f"stats/multiqc/kraken_{db}~{wc.sampleset}_multiqc.html")
               for db in config["samplesets"][wc.sampleset].get("kraken", {}).get("dbs", [])
            ],
        )

    if "kraken" in config["samplesets"][wc.sampleset]:
        print("  - kraken")
        everything.update(
            P(expand("taxonid/kraken/{db}~{sample}_report.txt",
                     sample=config["SAMPLESETS"][wc.sampleset],
                     db=config["samplesets"][wc.sampleset].get("kraken", {}).get("dbs", []),
                     ))
        )

    if config["samplesets"][wc.sampleset].get("kraken", {}).get("reads", False):
        print("  - kraken_reads")
        everything.update(
            P(expand("taxonid/kraken/{db}~{sample}_unclassified.fastq.gz",
                     sample=config["SAMPLESETS"][wc.sampleset],
                     db=config["samplesets"][wc.sampleset].get("kraken", {}).get("dbs", []),
                     ))
        )

    if "centrifuge" in config["samplesets"][wc.sampleset]:
        print("  - centrifuge")
        everything.update(
            P(expand("taxonid/centrifuge/{db}~{sample}.txt.zst",
                     sample=config["SAMPLESETS"][wc.sampleset],
                     db=config["samplesets"][wc.sampleset].get("centrifuge", {}).get("dbs", []),
                     ))
        )

    if config["samplesets"][wc.sampleset].get("persample_reads", False):
        print("  - sample_reads")
        everything.update(
            P(["reads/samples/{sample}.fastq.gz".format(sample=sample)
              for sample in config["SAMPLESETS"][wc.sampleset]
            ])
        )
    
    if config["samplesets"][wc.sampleset].get("fastqc", False):
        print("  - fastqc")
        everything.update(
            P([f"stats/fastqc/{prepost}/{run}~{lib}_fastqc.zip"
              for prepost in ["preqc", "postqc"]
              for samp in config["SAMPLESETS"][wc.sampleset]
              for run, lib in config["SAMP2RUNLIB"][samp]])
        )
        everything.update(
            P([f"stats/multiqc/reads-{prepost}~{wc.sampleset}_multiqc.html"
              for prepost in ["preqc", "postqc"]])
        )

    if "megahit" in config["samplesets"][wc.sampleset]:
        print("  - megahit")
        everything.update(
            P([f"metagenome/megahit/{aligner}~{ref}~{sample}/{sample}.contigs.fa"
               for sample in config["SAMPLESETS"][wc.sampleset]
               for aligner in config["samplesets"][wc.sampleset].get("megahit", {}).get("aligners", [])
               for ref in config["samplesets"][wc.sampleset].get("megahit", {}).get("references", [])
            ])
        )

    if config["samplesets"][wc.sampleset].get("kwip", False):
        print("  - kwip")
        everything.update(
            [P(expand("kwip/{set}~k{ksize}~s{sketchsize}.dist",
                   ksize=config["tool_settings"]["kwip"]["kmer_size"],
                   sketchsize=config["tool_settings"]["kwip"]["sketch_size"],
                   set=wc.sampleset))]
        )

    if config["samplesets"][wc.sampleset].get("mash", False):
        print("  - mash")
        everything.update(
            [P(expand("mash/{set}~k{ksize}~s{sketchsize}.dist",
                   ksize=config["tool_settings"]["mash"]["kmer_size"],
                   sketchsize=config["tool_settings"]["mash"]["sketch_size"],
                   set=wc.sampleset))]
        )

    if config["samplesets"][wc.sampleset].get("align", {}):
        print("  - align")
        everything.update(
            [P(expand("alignments/samples/{aligner}~{ref}~{sample}.bam",
                     ref=config["samplesets"][wc.sampleset].get("align", {}).get("references", []),
                     aligner=config["samplesets"][wc.sampleset].get("align", {}).get("aligners", []),
                     sample=config["SAMPLESETS"][wc.sampleset]))]
        )

    if config["samplesets"][wc.sampleset].get("align", {}).get("stats", False):
        print("  - bamstats")
        everything.update(
            [P(expand("stats/multiqc/bamstats_{aligner}~{ref}~{sampleset}_multiqc.html",
                      ref=config["samplesets"][wc.sampleset].get("align", {}).get("references", []),
                      aligner=config["samplesets"][wc.sampleset].get("align", {}).get("aligners", []),
                      sampleset=wc.sampleset))]
        )
        everything.update(
            [P(expand("stats/multiqc/qualimap_{aligner}~{ref}~{sampleset}_multiqc.html",
                       ref=config["samplesets"][wc.sampleset].get("align", {}).get("references", []),
                       aligner=config["samplesets"][wc.sampleset].get("align", {}).get("aligners", []),
                       sampleset=wc.sampleset))]
        )

    if config["samplesets"][wc.sampleset].get("align", {}).get("unmapped_reads", False):
        print("  - unmapped_reads")
        everything.update(
            [P(expand("alignments/unmapped_reads/{aligner}~{ref}~{sample}.fastq.gz",
                     ref=config["samplesets"][wc.sampleset].get("align", {}).get("references", []),
                     aligner=config["samplesets"][wc.sampleset].get("align", {}).get("aligners", []),
                     sample=config["SAMPLESETS"][wc.sampleset]))]
        )

    if config["samplesets"][wc.sampleset].get("align", {}).get("sampleset_bams", False):
        print("  - sampleset_bams")
        everything.update(
            [P(expand("alignments/sets/{aligner}~{ref}~{sampleset}.bam",
                     ref=config["samplesets"][wc.sampleset].get("align", {}).get("references", []),
                     aligner=config["samplesets"][wc.sampleset].get("align", {}).get("aligners", []),
                     sampleset=wc.sampleset))]
        )
    return everything

rule sampleset_everything:
    input: all_sampleset_files
    output: touch("output/{sampleset}.done")
