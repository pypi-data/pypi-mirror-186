{"version":3,"file":"lib_plugin_js.f3b43594da2edc2154e3.js","mappings":";;;;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,gBAAgB;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,eAAe,mBAAO,CAAC,oFAAuB;AAC9C,mCAAmC,mBAAO,CAAC,iCAAU;AACrD,kBAAkB,mBAAO,CAAC,mCAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;ACjDa;AACb;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,sBAAsB;AAC5C;AACA;AACA;AACA,aAAa,mBAAO,CAAC,uCAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,mBAAmB;AACnB;;;;;;;;;;ACpBa;AACb;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,gBAAgB;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,eAAe,GAAG,gBAAgB;AAClC,eAAe,mBAAO,CAAC,oFAAuB;AAC9C,4BAA4B,mBAAO,CAAC,6DAAQ;AAC5C,4BAA4B,mBAAO,CAAC,kDAAQ;AAC5C,uCAAuC,mBAAO,CAAC,8FAAmB;AAClE,kBAAkB,mBAAO,CAAC,mCAAW;AACrC;AACA;AACA,6CAA6C,uBAAuB,mQAAmQ;AACvU;AACA;AACA,gBAAgB;AAChB,uCAAuC;AACvC;AACA;AACA;AACA,gCAAgC;AAChC,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe;AACf","sources":["webpack://ipybertin/./lib/plugin.js","webpack://ipybertin/./lib/version.js","webpack://ipybertin/./lib/widget.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) David Brochart\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = require(\"@jupyter-widgets/base\");\nconst widgetExports = __importStar(require(\"./widget\"));\nconst version_1 = require(\"./version\");\nconst EXTENSION_ID = 'ipybertin:plugin';\n/**\n * The example plugin.\n */\nconst examplePlugin = {\n    id: EXTENSION_ID,\n    requires: [base_1.IJupyterWidgetRegistry],\n    activate: activateWidgetExtension,\n    autoStart: true,\n};\n// the \"as unknown as ...\" typecast above is solely to support JupyterLab 1\n// and 2 in the same codebase and should be removed when we migrate to Lumino.\nexports.default = examplePlugin;\n/**\n * Activate the widget extension.\n */\nfunction activateWidgetExtension(app, registry) {\n    registry.registerWidget({\n        name: version_1.MODULE_NAME,\n        version: version_1.MODULE_VERSION,\n        exports: widgetExports,\n    });\n}\n//# sourceMappingURL=plugin.js.map","\"use strict\";\n// Copyright (c) David Brochart\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MODULE_NAME = exports.MODULE_VERSION = void 0;\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst data = require('../package.json');\n/**\n * The _model_module_version/_view_module_version this package implements.\n *\n * The html widget manager assumes that this is the same as the npm package\n * version number.\n */\nexports.MODULE_VERSION = data.version;\n/*\n * The current package name.\n */\nexports.MODULE_NAME = data.name;\n//# sourceMappingURL=version.js.map","\"use strict\";\n// Copyright (c) David Brochart\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MapView = exports.MapModel = void 0;\nconst base_1 = require(\"@jupyter-widgets/base\");\nconst bertin = __importStar(require(\"bertin\"));\nconst d3_geo = __importStar(require(\"d3-geo\"));\nconst d3_geo_projection = __importStar(require(\"d3-geo-projection\"));\nconst version_1 = require(\"./version\");\nclass MapModel extends base_1.DOMWidgetModel {\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: MapModel.model_name, _model_module: MapModel.model_module, _model_module_version: MapModel.model_module_version, _view_name: MapModel.view_name, _view_module: MapModel.view_module, _view_module_version: MapModel.view_module_version, options: {} });\n    }\n}\nexports.MapModel = MapModel;\nMapModel.serializers = Object.assign({}, base_1.DOMWidgetModel.serializers);\nMapModel.model_name = 'MapModel';\nMapModel.model_module = version_1.MODULE_NAME;\nMapModel.model_module_version = version_1.MODULE_VERSION;\nMapModel.view_name = 'MapView'; // Set to null if no view\nMapModel.view_module = version_1.MODULE_NAME; // Set to null if no view\nMapModel.view_module_version = version_1.MODULE_VERSION;\nclass MapView extends base_1.DOMWidgetView {\n    render() {\n        d3_geo;\n        d3_geo_projection;\n        this.map = null;\n        this.options_changed();\n        this.model.on('change:options', this.options_changed, this);\n    }\n    options_changed() {\n        const options = this.model.get('options');\n        const pyParams = options.params;\n        let params = {};\n        for (const p in pyParams) {\n            if (p === 'projection') {\n                let code = pyParams[p];\n                let i = code.indexOf('.');\n                let lib = code.slice(0, i);\n                lib = lib.replaceAll('-', '_');\n                code = lib.concat(code.slice(i));\n                params[p] = eval(code);\n            }\n            else if (p === 'extent') {\n                params[p] = JSON.parse(pyParams[p]);\n            }\n            else {\n                params[p] = pyParams[p];\n            }\n        }\n        const pyLayers = options.layers;\n        let layers = [];\n        for (const l of pyLayers) {\n            let layer = {};\n            for (const p in l) {\n                if (p === 'geojson') {\n                    const s = l[p].trim();\n                    if (s.startsWith('{')) {\n                        layer[p] = JSON.parse(l[p]);\n                    }\n                    else {\n                        layer[p] = eval(s);\n                    }\n                }\n                else {\n                    layer[p] = l[p];\n                }\n            }\n            layers.push(layer);\n        }\n        if (this.map !== null) {\n            this.el.removeChild(this.map);\n        }\n        this.map = this.el.appendChild(bertin.draw({\n            params,\n            layers,\n        }));\n    }\n}\nexports.MapView = MapView;\n//# sourceMappingURL=widget.js.map"],"names":[],"sourceRoot":""}