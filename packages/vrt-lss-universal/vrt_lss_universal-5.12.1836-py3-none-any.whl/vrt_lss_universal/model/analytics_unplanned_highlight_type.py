"""
    VRt.Universal [UV]

    The version of the OpenAPI document: 5.12.1836
    Contact: servicedesk@veeroute.com
    Auto Generated
"""


import re  # noqa: F401
import sys  # noqa: F401

from vrt_lss_universal.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from vrt_lss_universal.exceptions import ApiAttributeError



class AnalyticsUnplannedHighlightType(ModelSimple):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('value',): {
            'SHORT_TIME_WINDOW_BY_DURATION': "SHORT_TIME_WINDOW_BY_DURATION",
            'SHORT_TIME_WINDOW_BY_LOCATION': "SHORT_TIME_WINDOW_BY_LOCATION",
            'LACK_RESOURCE_BY_COMPATIBILITY': "LACK_RESOURCE_BY_COMPATIBILITY",
            'LACK_RESOURCE_BY_LOCATION': "LACK_RESOURCE_BY_LOCATION",
            'LACK_RESOURCE_BY_BOX': "LACK_RESOURCE_BY_BOX",
            'LOW_ORDER_COMPATIBILITY_DEMANDS': "LOW_ORDER_COMPATIBILITY_DEMANDS",
            'LOW_RESOURCE_COMPATIBILITY_PERFORMER': "LOW_RESOURCE_COMPATIBILITY_PERFORMER",
            'LOW_RESOURCE_COMPATIBILITY_TRANSPORT': "LOW_RESOURCE_COMPATIBILITY_TRANSPORT",
            'LOW_CAPACITY_TRANSPORT': "LOW_CAPACITY_TRANSPORT",
            'LACK_CAPACITY_TRANSPORT': "LACK_CAPACITY_TRANSPORT",
            'HUGE_PEAK_LOAD_ORDERS': "HUGE_PEAK_LOAD_ORDERS",
            'FAR_LOCATION_ALL': "FAR_LOCATION_ALL",
            'FAR_LOCATION_NEAREST': "FAR_LOCATION_NEAREST",
            'FAR_ORDER_TIME_WINDOW': "FAR_ORDER_TIME_WINDOW",
        },
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'value': (str,),
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {}

    read_only_vars = set()

    _composed_schemas = None

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):
        """AnalyticsUnplannedHighlightType - a model defined in OpenAPI

        Note that value can be passed either in args or in kwargs, but not in both.

        Args:
            args[0] (str): SHORT_TIME_WINDOW reason group:   * `SHORT_TIME_WINDOW_BY_DURATION` - The lead time is almost entirely occupied by the order window (the order window - this time window includes the time for work, not just the start time of the order).   * `SHORT_TIME_WINDOW_BY_LOCATION` - The time windows of the application and the corresponding location almost do not overlap (the time windows of the work itself and its location are very different from each other).  LACK_RESOURCE reason group:   * `LACK_RESOURCE_BY_COMPATIBILITY` - Lack of artist / transport with a specific tag.   * `LACK_RESOURCE_BY_LOCATION` - Lack of location-compatible transport.   * `LACK_RESOURCE_BY_BOX` - Lack of transport with compatible cargo compartments.  LOW_ORDER_COMPATIBILITY reason group:   * `LOW_ORDER_COMPATIBILITY_DEMANDS` - The number of orders (more than the permissible percentage and more than the permissible number) are incompatible with all the others, because of this, an additional pair of executor-transport is required, which is not enough.  LOW_RESOURCE_COMPATIBILITY reason group:   * `LOW_RESOURCE_COMPATIBILITY_PERFORMER` - Among the total amount of input resources, some of the performers, less than the specified one, can be assigned to the transport, there may be an error in compatibility tags or shift time windows.   * `LOW_RESOURCE_COMPATIBILITY_TRANSPORT` - Among the total volume of input resources, a part of the transport that is less than the specified one can be assigned to performers, there may be an error in compatibility tags or shift time windows.  LOW_CAPACITY reason group:   * `LOW_CAPACITY_TRANSPORT` - Lack of transport with a certain capacity.  LACK_CAPACITY reason group:   * `LACK_CAPACITY_TRANSPORT` - An unused vehicle has a value that is orders of magnitude lower than all other units of the same type of vehicle in some field describing the capacity, there may be an error when registering the capacity of the vehicle.    Reason group HUGE_PEAK_LOAD:   * `HUGE_PEAK_LOAD_ORDERS` - Too narrow time windows, many orders arrive at the same time, a large peak load of trips with which resources cannot cope, uneven distribution of orders over a shift.  FAR_LOCATION reason group:   * `FAR_LOCATION_ALL` - The location of the order lies outside the distribution of the entire dataset, the order point is most likely not geocoded correctly.   * `FAR_LOCATION_NEAREST` - The location of the order lies outside the distribution of the nearest N points, the order point is most likely not geocoded correctly.  FAR_ORDER reason group:   * `FAR_ORDER_TIME_WINDOW`- The time window does not overlap with neighboring orders. ., must be one of ["SHORT_TIME_WINDOW_BY_DURATION", "SHORT_TIME_WINDOW_BY_LOCATION", "LACK_RESOURCE_BY_COMPATIBILITY", "LACK_RESOURCE_BY_LOCATION", "LACK_RESOURCE_BY_BOX", "LOW_ORDER_COMPATIBILITY_DEMANDS", "LOW_RESOURCE_COMPATIBILITY_PERFORMER", "LOW_RESOURCE_COMPATIBILITY_TRANSPORT", "LOW_CAPACITY_TRANSPORT", "LACK_CAPACITY_TRANSPORT", "HUGE_PEAK_LOAD_ORDERS", "FAR_LOCATION_ALL", "FAR_LOCATION_NEAREST", "FAR_ORDER_TIME_WINDOW", ]  

        Keyword Args:
            value (str): SHORT_TIME_WINDOW reason group:   * `SHORT_TIME_WINDOW_BY_DURATION` - The lead time is almost entirely occupied by the order window (the order window - this time window includes the time for work, not just the start time of the order).   * `SHORT_TIME_WINDOW_BY_LOCATION` - The time windows of the application and the corresponding location almost do not overlap (the time windows of the work itself and its location are very different from each other).  LACK_RESOURCE reason group:   * `LACK_RESOURCE_BY_COMPATIBILITY` - Lack of artist / transport with a specific tag.   * `LACK_RESOURCE_BY_LOCATION` - Lack of location-compatible transport.   * `LACK_RESOURCE_BY_BOX` - Lack of transport with compatible cargo compartments.  LOW_ORDER_COMPATIBILITY reason group:   * `LOW_ORDER_COMPATIBILITY_DEMANDS` - The number of orders (more than the permissible percentage and more than the permissible number) are incompatible with all the others, because of this, an additional pair of executor-transport is required, which is not enough.  LOW_RESOURCE_COMPATIBILITY reason group:   * `LOW_RESOURCE_COMPATIBILITY_PERFORMER` - Among the total amount of input resources, some of the performers, less than the specified one, can be assigned to the transport, there may be an error in compatibility tags or shift time windows.   * `LOW_RESOURCE_COMPATIBILITY_TRANSPORT` - Among the total volume of input resources, a part of the transport that is less than the specified one can be assigned to performers, there may be an error in compatibility tags or shift time windows.  LOW_CAPACITY reason group:   * `LOW_CAPACITY_TRANSPORT` - Lack of transport with a certain capacity.  LACK_CAPACITY reason group:   * `LACK_CAPACITY_TRANSPORT` - An unused vehicle has a value that is orders of magnitude lower than all other units of the same type of vehicle in some field describing the capacity, there may be an error when registering the capacity of the vehicle.    Reason group HUGE_PEAK_LOAD:   * `HUGE_PEAK_LOAD_ORDERS` - Too narrow time windows, many orders arrive at the same time, a large peak load of trips with which resources cannot cope, uneven distribution of orders over a shift.  FAR_LOCATION reason group:   * `FAR_LOCATION_ALL` - The location of the order lies outside the distribution of the entire dataset, the order point is most likely not geocoded correctly.   * `FAR_LOCATION_NEAREST` - The location of the order lies outside the distribution of the nearest N points, the order point is most likely not geocoded correctly.  FAR_ORDER reason group:   * `FAR_ORDER_TIME_WINDOW`- The time window does not overlap with neighboring orders. ., must be one of ["SHORT_TIME_WINDOW_BY_DURATION", "SHORT_TIME_WINDOW_BY_LOCATION", "LACK_RESOURCE_BY_COMPATIBILITY", "LACK_RESOURCE_BY_LOCATION", "LACK_RESOURCE_BY_BOX", "LOW_ORDER_COMPATIBILITY_DEMANDS", "LOW_RESOURCE_COMPATIBILITY_PERFORMER", "LOW_RESOURCE_COMPATIBILITY_TRANSPORT", "LOW_CAPACITY_TRANSPORT", "LACK_CAPACITY_TRANSPORT", "HUGE_PEAK_LOAD_ORDERS", "FAR_LOCATION_ALL", "FAR_LOCATION_NEAREST", "FAR_ORDER_TIME_WINDOW", ]  
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
        """
        # required up here when default value is not given
        _path_to_item = kwargs.pop('_path_to_item', ())

        if 'value' in kwargs:
            value = kwargs.pop('value')
        elif args:
            args = list(args)
            value = args.pop(0)
        else:
            raise ApiTypeError(
                "value is required, but not passed in args or kwargs and doesn't have default",
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)
        self.value = value
        if kwargs:
            raise ApiTypeError(
                "Invalid named arguments=%s passed to %s. Remove those invalid named arguments." % (
                    kwargs,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):
        """AnalyticsUnplannedHighlightType - a model defined in OpenAPI

        Note that value can be passed either in args or in kwargs, but not in both.

        Args:
            args[0] (str): SHORT_TIME_WINDOW reason group:   * `SHORT_TIME_WINDOW_BY_DURATION` - The lead time is almost entirely occupied by the order window (the order window - this time window includes the time for work, not just the start time of the order).   * `SHORT_TIME_WINDOW_BY_LOCATION` - The time windows of the application and the corresponding location almost do not overlap (the time windows of the work itself and its location are very different from each other).  LACK_RESOURCE reason group:   * `LACK_RESOURCE_BY_COMPATIBILITY` - Lack of artist / transport with a specific tag.   * `LACK_RESOURCE_BY_LOCATION` - Lack of location-compatible transport.   * `LACK_RESOURCE_BY_BOX` - Lack of transport with compatible cargo compartments.  LOW_ORDER_COMPATIBILITY reason group:   * `LOW_ORDER_COMPATIBILITY_DEMANDS` - The number of orders (more than the permissible percentage and more than the permissible number) are incompatible with all the others, because of this, an additional pair of executor-transport is required, which is not enough.  LOW_RESOURCE_COMPATIBILITY reason group:   * `LOW_RESOURCE_COMPATIBILITY_PERFORMER` - Among the total amount of input resources, some of the performers, less than the specified one, can be assigned to the transport, there may be an error in compatibility tags or shift time windows.   * `LOW_RESOURCE_COMPATIBILITY_TRANSPORT` - Among the total volume of input resources, a part of the transport that is less than the specified one can be assigned to performers, there may be an error in compatibility tags or shift time windows.  LOW_CAPACITY reason group:   * `LOW_CAPACITY_TRANSPORT` - Lack of transport with a certain capacity.  LACK_CAPACITY reason group:   * `LACK_CAPACITY_TRANSPORT` - An unused vehicle has a value that is orders of magnitude lower than all other units of the same type of vehicle in some field describing the capacity, there may be an error when registering the capacity of the vehicle.    Reason group HUGE_PEAK_LOAD:   * `HUGE_PEAK_LOAD_ORDERS` - Too narrow time windows, many orders arrive at the same time, a large peak load of trips with which resources cannot cope, uneven distribution of orders over a shift.  FAR_LOCATION reason group:   * `FAR_LOCATION_ALL` - The location of the order lies outside the distribution of the entire dataset, the order point is most likely not geocoded correctly.   * `FAR_LOCATION_NEAREST` - The location of the order lies outside the distribution of the nearest N points, the order point is most likely not geocoded correctly.  FAR_ORDER reason group:   * `FAR_ORDER_TIME_WINDOW`- The time window does not overlap with neighboring orders. ., must be one of ["SHORT_TIME_WINDOW_BY_DURATION", "SHORT_TIME_WINDOW_BY_LOCATION", "LACK_RESOURCE_BY_COMPATIBILITY", "LACK_RESOURCE_BY_LOCATION", "LACK_RESOURCE_BY_BOX", "LOW_ORDER_COMPATIBILITY_DEMANDS", "LOW_RESOURCE_COMPATIBILITY_PERFORMER", "LOW_RESOURCE_COMPATIBILITY_TRANSPORT", "LOW_CAPACITY_TRANSPORT", "LACK_CAPACITY_TRANSPORT", "HUGE_PEAK_LOAD_ORDERS", "FAR_LOCATION_ALL", "FAR_LOCATION_NEAREST", "FAR_ORDER_TIME_WINDOW", ]  

        Keyword Args:
            value (str): SHORT_TIME_WINDOW reason group:   * `SHORT_TIME_WINDOW_BY_DURATION` - The lead time is almost entirely occupied by the order window (the order window - this time window includes the time for work, not just the start time of the order).   * `SHORT_TIME_WINDOW_BY_LOCATION` - The time windows of the application and the corresponding location almost do not overlap (the time windows of the work itself and its location are very different from each other).  LACK_RESOURCE reason group:   * `LACK_RESOURCE_BY_COMPATIBILITY` - Lack of artist / transport with a specific tag.   * `LACK_RESOURCE_BY_LOCATION` - Lack of location-compatible transport.   * `LACK_RESOURCE_BY_BOX` - Lack of transport with compatible cargo compartments.  LOW_ORDER_COMPATIBILITY reason group:   * `LOW_ORDER_COMPATIBILITY_DEMANDS` - The number of orders (more than the permissible percentage and more than the permissible number) are incompatible with all the others, because of this, an additional pair of executor-transport is required, which is not enough.  LOW_RESOURCE_COMPATIBILITY reason group:   * `LOW_RESOURCE_COMPATIBILITY_PERFORMER` - Among the total amount of input resources, some of the performers, less than the specified one, can be assigned to the transport, there may be an error in compatibility tags or shift time windows.   * `LOW_RESOURCE_COMPATIBILITY_TRANSPORT` - Among the total volume of input resources, a part of the transport that is less than the specified one can be assigned to performers, there may be an error in compatibility tags or shift time windows.  LOW_CAPACITY reason group:   * `LOW_CAPACITY_TRANSPORT` - Lack of transport with a certain capacity.  LACK_CAPACITY reason group:   * `LACK_CAPACITY_TRANSPORT` - An unused vehicle has a value that is orders of magnitude lower than all other units of the same type of vehicle in some field describing the capacity, there may be an error when registering the capacity of the vehicle.    Reason group HUGE_PEAK_LOAD:   * `HUGE_PEAK_LOAD_ORDERS` - Too narrow time windows, many orders arrive at the same time, a large peak load of trips with which resources cannot cope, uneven distribution of orders over a shift.  FAR_LOCATION reason group:   * `FAR_LOCATION_ALL` - The location of the order lies outside the distribution of the entire dataset, the order point is most likely not geocoded correctly.   * `FAR_LOCATION_NEAREST` - The location of the order lies outside the distribution of the nearest N points, the order point is most likely not geocoded correctly.  FAR_ORDER reason group:   * `FAR_ORDER_TIME_WINDOW`- The time window does not overlap with neighboring orders. ., must be one of ["SHORT_TIME_WINDOW_BY_DURATION", "SHORT_TIME_WINDOW_BY_LOCATION", "LACK_RESOURCE_BY_COMPATIBILITY", "LACK_RESOURCE_BY_LOCATION", "LACK_RESOURCE_BY_BOX", "LOW_ORDER_COMPATIBILITY_DEMANDS", "LOW_RESOURCE_COMPATIBILITY_PERFORMER", "LOW_RESOURCE_COMPATIBILITY_TRANSPORT", "LOW_CAPACITY_TRANSPORT", "LACK_CAPACITY_TRANSPORT", "HUGE_PEAK_LOAD_ORDERS", "FAR_LOCATION_ALL", "FAR_LOCATION_NEAREST", "FAR_ORDER_TIME_WINDOW", ]  
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
        """
        # required up here when default value is not given
        _path_to_item = kwargs.pop('_path_to_item', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if 'value' in kwargs:
            value = kwargs.pop('value')
        elif args:
            args = list(args)
            value = args.pop(0)
        else:
            raise ApiTypeError(
                "value is required, but not passed in args or kwargs and doesn't have default",
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)
        self.value = value
        if kwargs:
            raise ApiTypeError(
                "Invalid named arguments=%s passed to %s. Remove those invalid named arguments." % (
                    kwargs,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        return self
