# coding: utf-8

"""
    GeoAPI

    Geospatial API for TAPIS  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from geoapi_client.api_client import ApiClient


class StreetviewApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_streetview_sequence(self, **kwargs):  # noqa: E501
        """add_streetview_sequence  # noqa: E501

        Add sequences to streetview instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_streetview_sequence(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_streetview_sequence_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_streetview_sequence_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_streetview_sequence_with_http_info(self, **kwargs):  # noqa: E501
        """add_streetview_sequence  # noqa: E501

        Add sequences to streetview instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_streetview_sequence_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_streetview_sequence" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/streetview/sequences/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_streetview_organizations(self, service, payload, **kwargs):  # noqa: E501
        """create_streetview_organizations  # noqa: E501

        Create organizations for a streetview object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_streetview_organizations(service, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: (required)
        :param StreetviewOrganization payload: (required)
        :param str x_fields: An optional fields mask
        :return: StreetviewOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_streetview_organizations_with_http_info(service, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.create_streetview_organizations_with_http_info(service, payload, **kwargs)  # noqa: E501
            return data

    def create_streetview_organizations_with_http_info(self, service, payload, **kwargs):  # noqa: E501
        """create_streetview_organizations  # noqa: E501

        Create organizations for a streetview object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_streetview_organizations_with_http_info(service, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: (required)
        :param StreetviewOrganization payload: (required)
        :param str x_fields: An optional fields mask
        :return: StreetviewOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service', 'payload', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_streetview_organizations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if self.api_client.client_side_validation and ('service' not in params or
                                                       params['service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service` when calling `create_streetview_organizations`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in params or
                                                       params['payload'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `create_streetview_organizations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/streetview/services/{service}/organization/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StreetviewOrganization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_streetview_service_resource(self, payload, **kwargs):  # noqa: E501
        """create_streetview_service_resource  # noqa: E501

        Create streetview service object for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_streetview_service_resource(payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StreetviewParams payload: (required)
        :param str x_fields: An optional fields mask
        :return: Streetview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_streetview_service_resource_with_http_info(payload, **kwargs)  # noqa: E501
        else:
            (data) = self.create_streetview_service_resource_with_http_info(payload, **kwargs)  # noqa: E501
            return data

    def create_streetview_service_resource_with_http_info(self, payload, **kwargs):  # noqa: E501
        """create_streetview_service_resource  # noqa: E501

        Create streetview service object for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_streetview_service_resource_with_http_info(payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StreetviewParams payload: (required)
        :param str x_fields: An optional fields mask
        :return: Streetview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payload', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_streetview_service_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in params or
                                                       params['payload'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `create_streetview_service_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/streetview/services/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Streetview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_streetview_instance(self, instance_id, **kwargs):  # noqa: E501
        """delete_streetview_instance  # noqa: E501

        Delete streetview instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_streetview_instance(instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_streetview_instance_with_http_info(instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_streetview_instance_with_http_info(instance_id, **kwargs)  # noqa: E501
            return data

    def delete_streetview_instance_with_http_info(self, instance_id, **kwargs):  # noqa: E501
        """delete_streetview_instance  # noqa: E501

        Delete streetview instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_streetview_instance_with_http_info(instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_streetview_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_id' is set
        if self.api_client.client_side_validation and ('instance_id' not in params or
                                                       params['instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instance_id` when calling `delete_streetview_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_id' in params:
            path_params['instance_id'] = params['instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/streetview/instances/{instance_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_streetview_organization(self, service, organization_id, **kwargs):  # noqa: E501
        """delete_streetview_organization  # noqa: E501

        Delete organization from streetview service resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_streetview_organization(service, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: (required)
        :param str organization_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_streetview_organization_with_http_info(service, organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_streetview_organization_with_http_info(service, organization_id, **kwargs)  # noqa: E501
            return data

    def delete_streetview_organization_with_http_info(self, service, organization_id, **kwargs):  # noqa: E501
        """delete_streetview_organization  # noqa: E501

        Delete organization from streetview service resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_streetview_organization_with_http_info(service, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: (required)
        :param str organization_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service', 'organization_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_streetview_organization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if self.api_client.client_side_validation and ('service' not in params or
                                                       params['service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service` when calling `delete_streetview_organization`")  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in params or
                                                       params['organization_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_id` when calling `delete_streetview_organization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/streetview/services/{service}/organization/{organization_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_streetview_sequence(self, sequence_id, **kwargs):  # noqa: E501
        """delete_streetview_sequence  # noqa: E501

        Delete a streetview service's sequence  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_streetview_sequence(sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sequence_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_streetview_sequence_with_http_info(sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_streetview_sequence_with_http_info(sequence_id, **kwargs)  # noqa: E501
            return data

    def delete_streetview_sequence_with_http_info(self, sequence_id, **kwargs):  # noqa: E501
        """delete_streetview_sequence  # noqa: E501

        Delete a streetview service's sequence  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_streetview_sequence_with_http_info(sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sequence_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_streetview_sequence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sequence_id' is set
        if self.api_client.client_side_validation and ('sequence_id' not in params or
                                                       params['sequence_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sequence_id` when calling `delete_streetview_sequence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sequence_id' in params:
            path_params['sequence_id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/streetview/sequences/{sequence_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_streetview_service_resource(self, service, **kwargs):  # noqa: E501
        """delete_streetview_service_resource  # noqa: E501

        Delete a streetview service resource by service name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_streetview_service_resource(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_streetview_service_resource_with_http_info(service, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_streetview_service_resource_with_http_info(service, **kwargs)  # noqa: E501
            return data

    def delete_streetview_service_resource_with_http_info(self, service, **kwargs):  # noqa: E501
        """delete_streetview_service_resource  # noqa: E501

        Delete a streetview service resource by service name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_streetview_service_resource_with_http_info(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_streetview_service_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if self.api_client.client_side_validation and ('service' not in params or
                                                       params['service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service` when calling `delete_streetview_service_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/streetview/services/{service}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_streetview_organizations(self, service, **kwargs):  # noqa: E501
        """get_streetview_organizations  # noqa: E501

        Get organizations from streetview service resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_streetview_organizations(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: (required)
        :param str x_fields: An optional fields mask
        :return: StreetviewOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_streetview_organizations_with_http_info(service, **kwargs)  # noqa: E501
        else:
            (data) = self.get_streetview_organizations_with_http_info(service, **kwargs)  # noqa: E501
            return data

    def get_streetview_organizations_with_http_info(self, service, **kwargs):  # noqa: E501
        """get_streetview_organizations  # noqa: E501

        Get organizations from streetview service resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_streetview_organizations_with_http_info(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: (required)
        :param str x_fields: An optional fields mask
        :return: StreetviewOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_streetview_organizations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if self.api_client.client_side_validation and ('service' not in params or
                                                       params['service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service` when calling `get_streetview_organizations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/streetview/services/{service}/organization/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StreetviewOrganization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_streetview_sequence(self, sequence_id, **kwargs):  # noqa: E501
        """get_streetview_sequence  # noqa: E501

        Get a streetview service's sequence  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_streetview_sequence(sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sequence_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_streetview_sequence_with_http_info(sequence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_streetview_sequence_with_http_info(sequence_id, **kwargs)  # noqa: E501
            return data

    def get_streetview_sequence_with_http_info(self, sequence_id, **kwargs):  # noqa: E501
        """get_streetview_sequence  # noqa: E501

        Get a streetview service's sequence  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_streetview_sequence_with_http_info(sequence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sequence_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sequence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_streetview_sequence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sequence_id' is set
        if self.api_client.client_side_validation and ('sequence_id' not in params or
                                                       params['sequence_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sequence_id` when calling `get_streetview_sequence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sequence_id' in params:
            path_params['sequence_id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/streetview/sequences/{sequence_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_streetview_service_resource(self, service, **kwargs):  # noqa: E501
        """get_streetview_service_resource  # noqa: E501

        Get a streetview service resource by service name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_streetview_service_resource(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: (required)
        :param str x_fields: An optional fields mask
        :return: Streetview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_streetview_service_resource_with_http_info(service, **kwargs)  # noqa: E501
        else:
            (data) = self.get_streetview_service_resource_with_http_info(service, **kwargs)  # noqa: E501
            return data

    def get_streetview_service_resource_with_http_info(self, service, **kwargs):  # noqa: E501
        """get_streetview_service_resource  # noqa: E501

        Get a streetview service resource by service name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_streetview_service_resource_with_http_info(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: (required)
        :param str x_fields: An optional fields mask
        :return: Streetview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_streetview_service_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if self.api_client.client_side_validation and ('service' not in params or
                                                       params['service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service` when calling `get_streetview_service_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/streetview/services/{service}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Streetview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_streetview_service_resources(self, **kwargs):  # noqa: E501
        """get_streetview_service_resources  # noqa: E501

        Get all streetview service objects for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_streetview_service_resources(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_fields: An optional fields mask
        :return: list[Streetview]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_streetview_service_resources_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_streetview_service_resources_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_streetview_service_resources_with_http_info(self, **kwargs):  # noqa: E501
        """get_streetview_service_resources  # noqa: E501

        Get all streetview service objects for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_streetview_service_resources_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_fields: An optional fields mask
        :return: list[Streetview]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_streetview_service_resources" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/streetview/services/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Streetview]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def publish_files_to_streetview(self, payload, **kwargs):  # noqa: E501
        """publish_files_to_streetview  # noqa: E501

        Import all files in a directory into a project from Tapis. The files should contain GPano metadata for compatibility with streetview services. Thisis an asynchronous operation, files will be imported in the background  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.publish_files_to_streetview(payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TapisFolderImport payload: (required)
        :param str x_fields: An optional fields mask
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.publish_files_to_streetview_with_http_info(payload, **kwargs)  # noqa: E501
        else:
            (data) = self.publish_files_to_streetview_with_http_info(payload, **kwargs)  # noqa: E501
            return data

    def publish_files_to_streetview_with_http_info(self, payload, **kwargs):  # noqa: E501
        """publish_files_to_streetview  # noqa: E501

        Import all files in a directory into a project from Tapis. The files should contain GPano metadata for compatibility with streetview services. Thisis an asynchronous operation, files will be imported in the background  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.publish_files_to_streetview_with_http_info(payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TapisFolderImport payload: (required)
        :param str x_fields: An optional fields mask
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payload', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method publish_files_to_streetview" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in params or
                                                       params['payload'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `publish_files_to_streetview`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/streetview/publish/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_streetview_organization(self, service, organization_id, payload, **kwargs):  # noqa: E501
        """update_streetview_organization  # noqa: E501

        Update organization from streetview service resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_streetview_organization(service, organization_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: (required)
        :param str organization_id: (required)
        :param StreetviewOrganization payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_streetview_organization_with_http_info(service, organization_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.update_streetview_organization_with_http_info(service, organization_id, payload, **kwargs)  # noqa: E501
            return data

    def update_streetview_organization_with_http_info(self, service, organization_id, payload, **kwargs):  # noqa: E501
        """update_streetview_organization  # noqa: E501

        Update organization from streetview service resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_streetview_organization_with_http_info(service, organization_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: (required)
        :param str organization_id: (required)
        :param StreetviewOrganization payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service', 'organization_id', 'payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_streetview_organization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if self.api_client.client_side_validation and ('service' not in params or
                                                       params['service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service` when calling `update_streetview_organization`")  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in params or
                                                       params['organization_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_id` when calling `update_streetview_organization`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in params or
                                                       params['payload'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `update_streetview_organization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/streetview/services/{service}/organization/{organization_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_streetview_sequence(self, sequence_id, payload, **kwargs):  # noqa: E501
        """update_streetview_sequence  # noqa: E501

        Update a streetview service's sequence  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_streetview_sequence(sequence_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sequence_id: (required)
        :param StreetviewOrganization payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_streetview_sequence_with_http_info(sequence_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.update_streetview_sequence_with_http_info(sequence_id, payload, **kwargs)  # noqa: E501
            return data

    def update_streetview_sequence_with_http_info(self, sequence_id, payload, **kwargs):  # noqa: E501
        """update_streetview_sequence  # noqa: E501

        Update a streetview service's sequence  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_streetview_sequence_with_http_info(sequence_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sequence_id: (required)
        :param StreetviewOrganization payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sequence_id', 'payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_streetview_sequence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sequence_id' is set
        if self.api_client.client_side_validation and ('sequence_id' not in params or
                                                       params['sequence_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sequence_id` when calling `update_streetview_sequence`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in params or
                                                       params['payload'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `update_streetview_sequence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sequence_id' in params:
            path_params['sequence_id'] = params['sequence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/streetview/sequences/{sequence_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_streetview_service_resource(self, service, payload, **kwargs):  # noqa: E501
        """update_streetview_service_resource  # noqa: E501

        Update streetview service resource for a user by service name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_streetview_service_resource(service, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: (required)
        :param StreetviewParams payload: (required)
        :param str x_fields: An optional fields mask
        :return: Streetview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_streetview_service_resource_with_http_info(service, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.update_streetview_service_resource_with_http_info(service, payload, **kwargs)  # noqa: E501
            return data

    def update_streetview_service_resource_with_http_info(self, service, payload, **kwargs):  # noqa: E501
        """update_streetview_service_resource  # noqa: E501

        Update streetview service resource for a user by service name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_streetview_service_resource_with_http_info(service, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service: (required)
        :param StreetviewParams payload: (required)
        :param str x_fields: An optional fields mask
        :return: Streetview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service', 'payload', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_streetview_service_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if self.api_client.client_side_validation and ('service' not in params or
                                                       params['service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service` when calling `update_streetview_service_resource`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in params or
                                                       params['payload'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `update_streetview_service_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/streetview/services/{service}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Streetview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
