# coding: utf-8

"""
    GeoAPI

    Geospatial API for TAPIS  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from geoapi_client.configuration import Configuration


class StreetviewSequence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bbox': 'str',
        'end_date': 'datetime',
        'id': 'int',
        'organization_id': 'str',
        'sequence_id': 'str',
        'start_date': 'datetime',
        'streetview_instance_id': 'int'
    }

    attribute_map = {
        'bbox': 'bbox',
        'end_date': 'end_date',
        'id': 'id',
        'organization_id': 'organization_id',
        'sequence_id': 'sequence_id',
        'start_date': 'start_date',
        'streetview_instance_id': 'streetview_instance_id'
    }

    def __init__(self, bbox=None, end_date=None, id=None, organization_id=None, sequence_id=None, start_date=None, streetview_instance_id=None, _configuration=None):  # noqa: E501
        """StreetviewSequence - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bbox = None
        self._end_date = None
        self._id = None
        self._organization_id = None
        self._sequence_id = None
        self._start_date = None
        self._streetview_instance_id = None
        self.discriminator = None

        if bbox is not None:
            self.bbox = bbox
        if end_date is not None:
            self.end_date = end_date
        if id is not None:
            self.id = id
        if organization_id is not None:
            self.organization_id = organization_id
        if sequence_id is not None:
            self.sequence_id = sequence_id
        if start_date is not None:
            self.start_date = start_date
        if streetview_instance_id is not None:
            self.streetview_instance_id = streetview_instance_id

    @property
    def bbox(self):
        """Gets the bbox of this StreetviewSequence.  # noqa: E501


        :return: The bbox of this StreetviewSequence.  # noqa: E501
        :rtype: str
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this StreetviewSequence.


        :param bbox: The bbox of this StreetviewSequence.  # noqa: E501
        :type: str
        """

        self._bbox = bbox

    @property
    def end_date(self):
        """Gets the end_date of this StreetviewSequence.  # noqa: E501


        :return: The end_date of this StreetviewSequence.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this StreetviewSequence.


        :param end_date: The end_date of this StreetviewSequence.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this StreetviewSequence.  # noqa: E501


        :return: The id of this StreetviewSequence.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StreetviewSequence.


        :param id: The id of this StreetviewSequence.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this StreetviewSequence.  # noqa: E501


        :return: The organization_id of this StreetviewSequence.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this StreetviewSequence.


        :param organization_id: The organization_id of this StreetviewSequence.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def sequence_id(self):
        """Gets the sequence_id of this StreetviewSequence.  # noqa: E501


        :return: The sequence_id of this StreetviewSequence.  # noqa: E501
        :rtype: str
        """
        return self._sequence_id

    @sequence_id.setter
    def sequence_id(self, sequence_id):
        """Sets the sequence_id of this StreetviewSequence.


        :param sequence_id: The sequence_id of this StreetviewSequence.  # noqa: E501
        :type: str
        """

        self._sequence_id = sequence_id

    @property
    def start_date(self):
        """Gets the start_date of this StreetviewSequence.  # noqa: E501


        :return: The start_date of this StreetviewSequence.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this StreetviewSequence.


        :param start_date: The start_date of this StreetviewSequence.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def streetview_instance_id(self):
        """Gets the streetview_instance_id of this StreetviewSequence.  # noqa: E501


        :return: The streetview_instance_id of this StreetviewSequence.  # noqa: E501
        :rtype: int
        """
        return self._streetview_instance_id

    @streetview_instance_id.setter
    def streetview_instance_id(self, streetview_instance_id):
        """Sets the streetview_instance_id of this StreetviewSequence.


        :param streetview_instance_id: The streetview_instance_id of this StreetviewSequence.  # noqa: E501
        :type: int
        """

        self._streetview_instance_id = streetview_instance_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StreetviewSequence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StreetviewSequence):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StreetviewSequence):
            return True

        return self.to_dict() != other.to_dict()
