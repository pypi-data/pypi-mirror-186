# coding: utf-8

"""
    GeoAPI

    Geospatial API for TAPIS  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from geoapi_client.configuration import Configuration


class Project(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deletable': 'bool',
        'description': 'str',
        'id': 'int',
        'name': 'str',
        'public': 'bool',
        'system_file': 'str',
        'system_id': 'str',
        'system_path': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'deletable': 'deletable',
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'public': 'public',
        'system_file': 'system_file',
        'system_id': 'system_id',
        'system_path': 'system_path',
        'uuid': 'uuid'
    }

    def __init__(self, deletable=None, description=None, id=None, name=None, public=None, system_file=None, system_id=None, system_path=None, uuid=None, _configuration=None):  # noqa: E501
        """Project - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._deletable = None
        self._description = None
        self._id = None
        self._name = None
        self._public = None
        self._system_file = None
        self._system_id = None
        self._system_path = None
        self._uuid = None
        self.discriminator = None

        if deletable is not None:
            self.deletable = deletable
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        self.name = name
        if public is not None:
            self.public = public
        if system_file is not None:
            self.system_file = system_file
        if system_id is not None:
            self.system_id = system_id
        if system_path is not None:
            self.system_path = system_path
        if uuid is not None:
            self.uuid = uuid

    @property
    def deletable(self):
        """Gets the deletable of this Project.  # noqa: E501


        :return: The deletable of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._deletable

    @deletable.setter
    def deletable(self, deletable):
        """Sets the deletable of this Project.


        :param deletable: The deletable of this Project.  # noqa: E501
        :type: bool
        """

        self._deletable = deletable

    @property
    def description(self):
        """Gets the description of this Project.  # noqa: E501


        :return: The description of this Project.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.


        :param description: The description of this Project.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501


        :return: The id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501


        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def public(self):
        """Gets the public of this Project.  # noqa: E501


        :return: The public of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Project.


        :param public: The public of this Project.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def system_file(self):
        """Gets the system_file of this Project.  # noqa: E501


        :return: The system_file of this Project.  # noqa: E501
        :rtype: str
        """
        return self._system_file

    @system_file.setter
    def system_file(self, system_file):
        """Sets the system_file of this Project.


        :param system_file: The system_file of this Project.  # noqa: E501
        :type: str
        """

        self._system_file = system_file

    @property
    def system_id(self):
        """Gets the system_id of this Project.  # noqa: E501


        :return: The system_id of this Project.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this Project.


        :param system_id: The system_id of this Project.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def system_path(self):
        """Gets the system_path of this Project.  # noqa: E501


        :return: The system_path of this Project.  # noqa: E501
        :rtype: str
        """
        return self._system_path

    @system_path.setter
    def system_path(self, system_path):
        """Sets the system_path of this Project.


        :param system_path: The system_path of this Project.  # noqa: E501
        :type: str
        """

        self._system_path = system_path

    @property
    def uuid(self):
        """Gets the uuid of this Project.  # noqa: E501


        :return: The uuid of this Project.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Project.


        :param uuid: The uuid of this Project.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Project, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Project):
            return True

        return self.to_dict() != other.to_dict()
