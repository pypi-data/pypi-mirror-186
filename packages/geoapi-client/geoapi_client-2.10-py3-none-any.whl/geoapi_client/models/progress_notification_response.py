# coding: utf-8

"""
    GeoAPI

    Geospatial API for TAPIS  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from geoapi_client.configuration import Configuration


class ProgressNotificationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'id': 'int',
        'logs': 'object',
        'message': 'str',
        'progress': 'int',
        'status': 'str',
        'uuid': 'str',
        'viewed': 'bool'
    }

    attribute_map = {
        'created': 'created',
        'id': 'id',
        'logs': 'logs',
        'message': 'message',
        'progress': 'progress',
        'status': 'status',
        'uuid': 'uuid',
        'viewed': 'viewed'
    }

    def __init__(self, created=None, id=None, logs=None, message=None, progress=None, status=None, uuid=None, viewed=None, _configuration=None):  # noqa: E501
        """ProgressNotificationResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created = None
        self._id = None
        self._logs = None
        self._message = None
        self._progress = None
        self._status = None
        self._uuid = None
        self._viewed = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if id is not None:
            self.id = id
        if logs is not None:
            self.logs = logs
        if message is not None:
            self.message = message
        if progress is not None:
            self.progress = progress
        if status is not None:
            self.status = status
        if uuid is not None:
            self.uuid = uuid
        if viewed is not None:
            self.viewed = viewed

    @property
    def created(self):
        """Gets the created of this ProgressNotificationResponse.  # noqa: E501


        :return: The created of this ProgressNotificationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ProgressNotificationResponse.


        :param created: The created of this ProgressNotificationResponse.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this ProgressNotificationResponse.  # noqa: E501


        :return: The id of this ProgressNotificationResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProgressNotificationResponse.


        :param id: The id of this ProgressNotificationResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def logs(self):
        """Gets the logs of this ProgressNotificationResponse.  # noqa: E501


        :return: The logs of this ProgressNotificationResponse.  # noqa: E501
        :rtype: object
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this ProgressNotificationResponse.


        :param logs: The logs of this ProgressNotificationResponse.  # noqa: E501
        :type: object
        """

        self._logs = logs

    @property
    def message(self):
        """Gets the message of this ProgressNotificationResponse.  # noqa: E501


        :return: The message of this ProgressNotificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ProgressNotificationResponse.


        :param message: The message of this ProgressNotificationResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def progress(self):
        """Gets the progress of this ProgressNotificationResponse.  # noqa: E501


        :return: The progress of this ProgressNotificationResponse.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this ProgressNotificationResponse.


        :param progress: The progress of this ProgressNotificationResponse.  # noqa: E501
        :type: int
        """

        self._progress = progress

    @property
    def status(self):
        """Gets the status of this ProgressNotificationResponse.  # noqa: E501


        :return: The status of this ProgressNotificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProgressNotificationResponse.


        :param status: The status of this ProgressNotificationResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def uuid(self):
        """Gets the uuid of this ProgressNotificationResponse.  # noqa: E501


        :return: The uuid of this ProgressNotificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ProgressNotificationResponse.


        :param uuid: The uuid of this ProgressNotificationResponse.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def viewed(self):
        """Gets the viewed of this ProgressNotificationResponse.  # noqa: E501


        :return: The viewed of this ProgressNotificationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._viewed

    @viewed.setter
    def viewed(self, viewed):
        """Sets the viewed of this ProgressNotificationResponse.


        :param viewed: The viewed of this ProgressNotificationResponse.  # noqa: E501
        :type: bool
        """

        self._viewed = viewed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProgressNotificationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProgressNotificationResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProgressNotificationResponse):
            return True

        return self.to_dict() != other.to_dict()
