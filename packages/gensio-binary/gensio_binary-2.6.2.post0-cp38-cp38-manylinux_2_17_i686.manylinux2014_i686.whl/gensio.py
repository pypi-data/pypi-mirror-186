# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import sys
import os
if os.name != 'nt':
    origdlopenflags = sys.getdlopenflags()
    sys.setdlopenflags(os.RTLD_GLOBAL | os.RTLD_LAZY)



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _gensio
else:
    import _gensio

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



if os.name != 'nt':
    sys.setdlopenflags(origdlopenflags)

class gensio(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, o, str, handler):
        _gensio.gensio_swiginit(self, _gensio.new_gensio(o, str, handler))
    __swig_destroy__ = _gensio.delete_gensio

    def new_parent(self, o, str, handler):
        return _gensio.gensio_new_parent(self, o, str, handler)

    def set_cbs(self, handler):
        return _gensio.gensio_set_cbs(self, handler)

    def open(self, done):
        return _gensio.gensio_open(self, done)

    def open_nochild(self, done):
        return _gensio.gensio_open_nochild(self, done)

    def open_s(self):
        return _gensio.gensio_open_s(self)

    def open_nochild_s(self):
        return _gensio.gensio_open_nochild_s(self)

    def alloc_channel(self, auxdata, handler):
        return _gensio.gensio_alloc_channel(self, auxdata, handler)

    def get_type(self, depth):
        return _gensio.gensio_get_type(self, depth)

    def close(self, done):
        return _gensio.gensio_close(self, done)

    def close_s(self):
        return _gensio.gensio_close_s(self)

    def write(self, bytestr, auxdata):
        return _gensio.gensio_write(self, bytestr, auxdata)

    def read_cb_enable(self, enable):
        return _gensio.gensio_read_cb_enable(self, enable)

    def write_cb_enable(self, enable):
        return _gensio.gensio_write_cb_enable(self, enable)

    def set_sync(self):
        return _gensio.gensio_set_sync(self)

    def clear_sync(self):
        return _gensio.gensio_clear_sync(self)

    def read_s(self, reqlen, timeout):
        return _gensio.gensio_read_s(self, reqlen, timeout)

    def read_s_intr(self, reqlen, timeout):
        return _gensio.gensio_read_s_intr(self, reqlen, timeout)

    def write_s(self, bytestr, timeout):
        return _gensio.gensio_write_s(self, bytestr, timeout)

    def write_s_intr(self, bytestr, timeout):
        return _gensio.gensio_write_s_intr(self, bytestr, timeout)

    def control(self, depth, get, option, bytestr):
        return _gensio.gensio_control(self, depth, get, option, bytestr)

    def get_child(self, depth):
        return _gensio.gensio_get_child(self, depth)

    def is_client(self):
        return _gensio.gensio_is_client(self)

    def is_packet(self):
        return _gensio.gensio_is_packet(self)

    def is_reliable(self):
        return _gensio.gensio_is_reliable(self)

    def is_authenticatedt(self):
        return _gensio.gensio_is_authenticatedt(self)

    def is_encrypted(self):
        return _gensio.gensio_is_encrypted(self)

    def cast_to_sergensio(self):
        return _gensio.gensio_cast_to_sergensio(self)

    def same_as(self, other):
        return _gensio.gensio_same_as(self, other)

# Register gensio in _gensio:
_gensio.gensio_swigregister(gensio)
class sergensio(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gensio.delete_sergensio

    def cast_to_gensio(self):
        return _gensio.sergensio_cast_to_gensio(self)

    def sg_baud(self, baud, h):
        return _gensio.sergensio_sg_baud(self, baud, h)

    def sg_baud_s(self, baud):
        return _gensio.sergensio_sg_baud_s(self, baud)

    def sg_datasize(self, datasize, h):
        return _gensio.sergensio_sg_datasize(self, datasize, h)

    def sg_datasize_s(self, datasize):
        return _gensio.sergensio_sg_datasize_s(self, datasize)

    def sg_parity(self, parity, h):
        return _gensio.sergensio_sg_parity(self, parity, h)

    def sg_parity_s(self, parity):
        return _gensio.sergensio_sg_parity_s(self, parity)

    def sg_stopbits(self, stopbits, h):
        return _gensio.sergensio_sg_stopbits(self, stopbits, h)

    def sg_stopbits_s(self, stopbits):
        return _gensio.sergensio_sg_stopbits_s(self, stopbits)

    def sg_flowcontrol(self, flowcontrol, h):
        return _gensio.sergensio_sg_flowcontrol(self, flowcontrol, h)

    def sg_flowcontrol_s(self, flowcontrol):
        return _gensio.sergensio_sg_flowcontrol_s(self, flowcontrol)

    def sg_iflowcontrol(self, iflowcontrol, h):
        return _gensio.sergensio_sg_iflowcontrol(self, iflowcontrol, h)

    def sg_iflowcontrol_s(self, iflowcontrol):
        return _gensio.sergensio_sg_iflowcontrol_s(self, iflowcontrol)

    def sg_sbreak(self, sbreak, h):
        return _gensio.sergensio_sg_sbreak(self, sbreak, h)

    def sg_sbreak_s(self, sbreak):
        return _gensio.sergensio_sg_sbreak_s(self, sbreak)

    def sg_dtr(self, dtr, h):
        return _gensio.sergensio_sg_dtr(self, dtr, h)

    def sg_dtr_s(self, dtr):
        return _gensio.sergensio_sg_dtr_s(self, dtr)

    def sg_rts(self, rts, h):
        return _gensio.sergensio_sg_rts(self, rts, h)

    def sg_rts_s(self, rts):
        return _gensio.sergensio_sg_rts_s(self, rts)

    def sg_cts(self, cts, h):
        return _gensio.sergensio_sg_cts(self, cts, h)

    def sg_cts_s(self, cts):
        return _gensio.sergensio_sg_cts_s(self, cts)

    def sg_dcd_dsr(self, dcd_dsr, h):
        return _gensio.sergensio_sg_dcd_dsr(self, dcd_dsr, h)

    def sg_dcd_dsr_s(self, dcd_dsr):
        return _gensio.sergensio_sg_dcd_dsr_s(self, dcd_dsr)

    def sg_ri(self, ri, h):
        return _gensio.sergensio_sg_ri(self, ri, h)

    def sg_ri_s(self, ri):
        return _gensio.sergensio_sg_ri_s(self, ri)

    def sg_modemstate(self, modemstate):
        return _gensio.sergensio_sg_modemstate(self, modemstate)

    def sg_linestate(self, linestate):
        return _gensio.sergensio_sg_linestate(self, linestate)

    def sg_flowcontrol_state(self, val):
        return _gensio.sergensio_sg_flowcontrol_state(self, val)

    def sg_flush(self, val):
        return _gensio.sergensio_sg_flush(self, val)

    def sg_signature(self, value, h):
        return _gensio.sergensio_sg_signature(self, value, h)

    def sg_send_break(self):
        return _gensio.sergensio_sg_send_break(self)

# Register sergensio in _gensio:
_gensio.sergensio_swigregister(sergensio)
class gensio_accepter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, o, str, handler):
        _gensio.gensio_accepter_swiginit(self, _gensio.new_gensio_accepter(o, str, handler))
    __swig_destroy__ = _gensio.delete_gensio_accepter

    def set_cbs(self, handler):
        return _gensio.gensio_accepter_set_cbs(self, handler)

    def str_to_gensio(self, str, handler):
        return _gensio.gensio_accepter_str_to_gensio(self, str, handler)

    def startup(self):
        return _gensio.gensio_accepter_startup(self)

    def shutdown(self, done):
        return _gensio.gensio_accepter_shutdown(self, done)

    def shutdown_s(self):
        return _gensio.gensio_accepter_shutdown_s(self)

    def set_sync(self):
        return _gensio.gensio_accepter_set_sync(self)

    def set_accept_callback_enable(self, enabled):
        return _gensio.gensio_accepter_set_accept_callback_enable(self, enabled)

    def set_accept_callback_enable_cb(self, enabled, done):
        return _gensio.gensio_accepter_set_accept_callback_enable_cb(self, enabled, done)

    def set_accept_callback_enable_s(self, enabled):
        return _gensio.gensio_accepter_set_accept_callback_enable_s(self, enabled)

    def accept_s_timeout(self, o, handler, timeout):
        return _gensio.gensio_accepter_accept_s_timeout(self, o, handler, timeout)

    def accept_s(self, o, handler):
        return _gensio.gensio_accepter_accept_s(self, o, handler)

    def accept_s_intr_timeout(self, o, handler, timeout):
        return _gensio.gensio_accepter_accept_s_intr_timeout(self, o, handler, timeout)

    def accept_s_intr(self, o, handler):
        return _gensio.gensio_accepter_accept_s_intr(self, o, handler)

    def control(self, depth, get, option, controldata):
        return _gensio.gensio_accepter_control(self, depth, get, option, controldata)

    def is_packet(self):
        return _gensio.gensio_accepter_is_packet(self)

    def is_reliable(self):
        return _gensio.gensio_accepter_is_reliable(self)

    def cast_to_sergensio_acc(self):
        return _gensio.gensio_accepter_cast_to_sergensio_acc(self)

# Register gensio_accepter in _gensio:
_gensio.gensio_accepter_swigregister(gensio_accepter)
class sergensio_accepter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gensio.delete_sergensio_accepter

    def cast_to_gensio_acc(self):
        return _gensio.sergensio_accepter_cast_to_gensio_acc(self)

# Register sergensio_accepter in _gensio:
_gensio.sergensio_accepter_swigregister(sergensio_accepter)
class gensio_os_funcs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gensio.delete_gensio_os_funcs

# Register gensio_os_funcs in _gensio:
_gensio.gensio_os_funcs_swigregister(gensio_os_funcs)
class waiter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, o):
        _gensio.waiter_swiginit(self, _gensio.new_waiter(o))
    __swig_destroy__ = _gensio.delete_waiter

    def wait_timeout(self, count, timeout):
        return _gensio.waiter_wait_timeout(self, count, timeout)

    def wait(self, count):
        return _gensio.waiter_wait(self, count)

    def wake(self):
        return _gensio.waiter_wake(self)

    def service(self, timeout):
        return _gensio.waiter_service(self, timeout)

    def service_now(self):
        return _gensio.waiter_service_now(self)

# Register waiter in _gensio:
_gensio.waiter_swigregister(waiter)
GE_NOTSUP = _gensio.GE_NOTSUP
GE_CERTNOTFOUND = _gensio.GE_CERTNOTFOUND
GE_CERTREVOKED = _gensio.GE_CERTREVOKED
GE_CERTEXPIRED = _gensio.GE_CERTEXPIRED
GE_CERTINVALID = _gensio.GE_CERTINVALID
GE_KEYINVALID = _gensio.GE_KEYINVALID
GE_AUTHREJECT = _gensio.GE_AUTHREJECT
GENSIO_CONTROL_DEPTH_ALL = _gensio.GENSIO_CONTROL_DEPTH_ALL
GENSIO_CONTROL_DEPTH_FIRST = _gensio.GENSIO_CONTROL_DEPTH_FIRST
GENSIO_CONTROL_GET = _gensio.GENSIO_CONTROL_GET
GENSIO_CONTROL_SET = _gensio.GENSIO_CONTROL_SET
GENSIO_CONTROL_NODELAY = _gensio.GENSIO_CONTROL_NODELAY
GENSIO_CONTROL_STREAMS = _gensio.GENSIO_CONTROL_STREAMS
GENSIO_CONTROL_SEND_BREAK = _gensio.GENSIO_CONTROL_SEND_BREAK
GENSIO_CONTROL_GET_PEER_CERT_NAME = _gensio.GENSIO_CONTROL_GET_PEER_CERT_NAME
GENSIO_CONTROL_CERT_AUTH = _gensio.GENSIO_CONTROL_CERT_AUTH
GENSIO_CONTROL_USERNAME = _gensio.GENSIO_CONTROL_USERNAME
GENSIO_CONTROL_SERVICE = _gensio.GENSIO_CONTROL_SERVICE
GENSIO_CONTROL_CERT = _gensio.GENSIO_CONTROL_CERT
GENSIO_CONTROL_CERT_FINGERPRINT = _gensio.GENSIO_CONTROL_CERT_FINGERPRINT
GENSIO_CONTROL_ENVIRONMENT = _gensio.GENSIO_CONTROL_ENVIRONMENT
GENSIO_CONTROL_MAX_WRITE_PACKET = _gensio.GENSIO_CONTROL_MAX_WRITE_PACKET
GENSIO_CONTROL_ARGS = _gensio.GENSIO_CONTROL_ARGS
GENSIO_CONTROL_EXIT_CODE = _gensio.GENSIO_CONTROL_EXIT_CODE
GENSIO_CONTROL_WAIT_TASK = _gensio.GENSIO_CONTROL_WAIT_TASK
GENSIO_CONTROL_ADD_MCAST = _gensio.GENSIO_CONTROL_ADD_MCAST
GENSIO_CONTROL_DEL_MCAST = _gensio.GENSIO_CONTROL_DEL_MCAST
GENSIO_CONTROL_LADDR = _gensio.GENSIO_CONTROL_LADDR
GENSIO_CONTROL_LPORT = _gensio.GENSIO_CONTROL_LPORT
GENSIO_CONTROL_CLOSE_OUTPUT = _gensio.GENSIO_CONTROL_CLOSE_OUTPUT
GENSIO_CONTROL_CONNECT_ADDR_STR = _gensio.GENSIO_CONTROL_CONNECT_ADDR_STR
GENSIO_CONTROL_RADDR = _gensio.GENSIO_CONTROL_RADDR
GENSIO_CONTROL_RADDR_BIN = _gensio.GENSIO_CONTROL_RADDR_BIN
GENSIO_CONTROL_REMOTE_ID = _gensio.GENSIO_CONTROL_REMOTE_ID
GENSIO_CONTROL_KILL_TASK = _gensio.GENSIO_CONTROL_KILL_TASK
GENSIO_CONTROL_MCAST_LOOP = _gensio.GENSIO_CONTROL_MCAST_LOOP
GENSIO_CONTROL_MCAST_TTL = _gensio.GENSIO_CONTROL_MCAST_TTL
GENSIO_CONTROL_PASSWORD = _gensio.GENSIO_CONTROL_PASSWORD
GENSIO_CONTROL_2FA = _gensio.GENSIO_CONTROL_2FA
GENSIO_CONTROL_AUX_DATA = _gensio.GENSIO_CONTROL_AUX_DATA
GENSIO_CONTROL_REM_AUX_DATA = _gensio.GENSIO_CONTROL_REM_AUX_DATA
GENSIO_CONTROL_EXTRAINFO = _gensio.GENSIO_CONTROL_EXTRAINFO
GENSIO_CONTROL_ENABLE_OOB = _gensio.GENSIO_CONTROL_ENABLE_OOB
GENSIO_NETTYPE_UNSPEC = _gensio.GENSIO_NETTYPE_UNSPEC
GENSIO_NETTYPE_IPV4 = _gensio.GENSIO_NETTYPE_IPV4
GENSIO_NETTYPE_IPV6 = _gensio.GENSIO_NETTYPE_IPV6
GENSIO_NETTYPE_UNIX = _gensio.GENSIO_NETTYPE_UNIX
GE_NOERR = _gensio.GE_NOERR
GE_NOMEM = _gensio.GE_NOMEM
GE_INVAL = _gensio.GE_INVAL
GE_NOTFOUND = _gensio.GE_NOTFOUND
GE_EXISTS = _gensio.GE_EXISTS
GE_OUTOFRANGE = _gensio.GE_OUTOFRANGE
GE_INCONSISTENT = _gensio.GE_INCONSISTENT
GE_NODATA = _gensio.GE_NODATA
GE_OSERR = _gensio.GE_OSERR
GE_INUSE = _gensio.GE_INUSE
GE_INPROGRESS = _gensio.GE_INPROGRESS
GE_NOTREADY = _gensio.GE_NOTREADY
GE_TOOBIG = _gensio.GE_TOOBIG
GE_TIMEDOUT = _gensio.GE_TIMEDOUT
GE_RETRY = _gensio.GE_RETRY
GE_KEYNOTFOUND = _gensio.GE_KEYNOTFOUND
GE_NOCERT = _gensio.GE_NOCERT
GE_PROTOERR = _gensio.GE_PROTOERR
GE_COMMERR = _gensio.GE_COMMERR
GE_IOERR = _gensio.GE_IOERR
GE_REMCLOSE = _gensio.GE_REMCLOSE
GE_HOSTDOWN = _gensio.GE_HOSTDOWN
GE_CONNREFUSE = _gensio.GE_CONNREFUSE
GE_DATAMISSING = _gensio.GE_DATAMISSING
GE_ADDRINUSE = _gensio.GE_ADDRINUSE
GE_INTERRUPTED = _gensio.GE_INTERRUPTED
GE_SHUTDOWN = _gensio.GE_SHUTDOWN
GE_LOCALCLOSED = _gensio.GE_LOCALCLOSED
GE_PERM = _gensio.GE_PERM
GE_APPERR = _gensio.GE_APPERR
version = _gensio.version
SERGENSIO_PARITY_NONE = _gensio.SERGENSIO_PARITY_NONE
SERGENSIO_PARITY_ODD = _gensio.SERGENSIO_PARITY_ODD
SERGENSIO_PARITY_EVEN = _gensio.SERGENSIO_PARITY_EVEN
SERGENSIO_PARITY_MARK = _gensio.SERGENSIO_PARITY_MARK
SERGENSIO_PARITY_SPACE = _gensio.SERGENSIO_PARITY_SPACE
SERGENSIO_FLOWCONTROL_NONE = _gensio.SERGENSIO_FLOWCONTROL_NONE
SERGENSIO_FLOWCONTROL_XON_XOFF = _gensio.SERGENSIO_FLOWCONTROL_XON_XOFF
SERGENSIO_FLOWCONTROL_RTS_CTS = _gensio.SERGENSIO_FLOWCONTROL_RTS_CTS
SERGENSIO_FLOWCONTROL_DCD = _gensio.SERGENSIO_FLOWCONTROL_DCD
SERGENSIO_FLOWCONTROL_DTR = _gensio.SERGENSIO_FLOWCONTROL_DTR
SERGENSIO_FLOWCONTROL_DSR = _gensio.SERGENSIO_FLOWCONTROL_DSR
SERGENSIO_BREAK_ON = _gensio.SERGENSIO_BREAK_ON
SERGENSIO_BREAK_OFF = _gensio.SERGENSIO_BREAK_OFF
SERGENSIO_DTR_ON = _gensio.SERGENSIO_DTR_ON
SERGENSIO_DTR_OFF = _gensio.SERGENSIO_DTR_OFF
SERGENSIO_RTS_ON = _gensio.SERGENSIO_RTS_ON
SERGENSIO_RTS_OFF = _gensio.SERGENSIO_RTS_OFF
SERGENSIO_CTS_AUTO = _gensio.SERGENSIO_CTS_AUTO
SERGENSIO_CTS_OFF = _gensio.SERGENSIO_CTS_OFF
SERGENSIO_DCD_DSR_ON = _gensio.SERGENSIO_DCD_DSR_ON
SERGENSIO_DCD_DSR_OFF = _gensio.SERGENSIO_DCD_DSR_OFF
SERGENSIO_RI_ON = _gensio.SERGENSIO_RI_ON
SERGENSIO_RI_OFF = _gensio.SERGENSIO_RI_OFF
SERGENSIO_LINESTATE_DATA_READY = _gensio.SERGENSIO_LINESTATE_DATA_READY
SERGENSIO_LINESTATE_OVERRUN_ERR = _gensio.SERGENSIO_LINESTATE_OVERRUN_ERR
SERGENSIO_LINESTATE_PARITY_ERR = _gensio.SERGENSIO_LINESTATE_PARITY_ERR
SERGENSIO_LINESTATE_FRAMING_ERR = _gensio.SERGENSIO_LINESTATE_FRAMING_ERR
SERGENSIO_LINESTATE_BREAK = _gensio.SERGENSIO_LINESTATE_BREAK
SERGENSIO_LINESTATE_XMIT_HOLD_EMPTY = _gensio.SERGENSIO_LINESTATE_XMIT_HOLD_EMPTY
SERGENSIO_LINESTATE_XMIT_SHIFT_EMPTY = _gensio.SERGENSIO_LINESTATE_XMIT_SHIFT_EMPTY
SERGENSIO_LINESTATE_TIMEOUT_ERR = _gensio.SERGENSIO_LINESTATE_TIMEOUT_ERR
SERGENSIO_MODEMSTATE_CTS_CHANGED = _gensio.SERGENSIO_MODEMSTATE_CTS_CHANGED
SERGENSIO_MODEMSTATE_DSR_CHANGED = _gensio.SERGENSIO_MODEMSTATE_DSR_CHANGED
SERGENSIO_MODEMSTATE_RI_CHANGED = _gensio.SERGENSIO_MODEMSTATE_RI_CHANGED
SERGENSIO_MODEMSTATE_CD_CHANGED = _gensio.SERGENSIO_MODEMSTATE_CD_CHANGED
SERGENSIO_MODEMSTATE_CTS = _gensio.SERGENSIO_MODEMSTATE_CTS
SERGENSIO_MODEMSTATE_DSR = _gensio.SERGENSIO_MODEMSTATE_DSR
SERGENSIO_MODEMSTATE_RI = _gensio.SERGENSIO_MODEMSTATE_RI
SERGENSIO_MODEMSTATE_CD = _gensio.SERGENSIO_MODEMSTATE_CD
SERGENSIO_FLUSH_RCV_BUFFER = _gensio.SERGENSIO_FLUSH_RCV_BUFFER
SERGENSIO_FLUSH_XMIT_BUFFER = _gensio.SERGENSIO_FLUSH_XMIT_BUFFER
SERGENSIO_FLUSH_RCV_XMIT_BUFFERS = _gensio.SERGENSIO_FLUSH_RCV_XMIT_BUFFERS
SERGIO_FLUSH_RCV_BUFFER = _gensio.SERGIO_FLUSH_RCV_BUFFER
SERGIO_FLUSH_XMIT_BUFFER = _gensio.SERGIO_FLUSH_XMIT_BUFFER
SERGIO_FLUSH_RCV_XMIT_BUFFERS = _gensio.SERGIO_FLUSH_RCV_XMIT_BUFFERS
GENSIO_ACC_CONTROL_LADDR = _gensio.GENSIO_ACC_CONTROL_LADDR
GENSIO_ACC_CONTROL_LPORT = _gensio.GENSIO_ACC_CONTROL_LPORT
class mdns(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, o):
        _gensio.mdns_swiginit(self, _gensio.new_mdns(o))
    __swig_destroy__ = _gensio.delete_mdns

    def close(self, done):
        return _gensio.mdns_close(self, done)

    def add_service(self, ipinterface, ipdomain, name, type, domain, host, port, txt):
        return _gensio.mdns_add_service(self, ipinterface, ipdomain, name, type, domain, host, port, txt)

    def add_watch(self, ipinterface, ipdomain, name, type, domain, host, cb):
        return _gensio.mdns_add_watch(self, ipinterface, ipdomain, name, type, domain, host, cb)

# Register mdns in _gensio:
_gensio.mdns_swigregister(mdns)
class mdns_watch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gensio.delete_mdns_watch

    def close(self, done):
        return _gensio.mdns_watch_close(self, done)

# Register mdns_watch in _gensio:
_gensio.mdns_watch_swigregister(mdns_watch)
class mdns_service(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gensio.delete_mdns_service

# Register mdns_service in _gensio:
_gensio.mdns_service_swigregister(mdns_service)

def alloc_gensio_selector(log_handler):
    return _gensio.alloc_gensio_selector(log_handler)

def alloc_gensio_os_funcs(log_handler):
    return _gensio.alloc_gensio_os_funcs(log_handler)

def gensio_num_alloced():
    return _gensio.gensio_num_alloced()

def gensio_cleanup_mem(o):
    return _gensio.gensio_cleanup_mem(o)

def get_os_funcs_refcount(o):
    return _gensio.get_os_funcs_refcount(o)
GENSIO_LOG_FATAL = _gensio.GENSIO_LOG_FATAL
GENSIO_LOG_ERR = _gensio.GENSIO_LOG_ERR
GENSIO_LOG_WARNING = _gensio.GENSIO_LOG_WARNING
GENSIO_LOG_INFO = _gensio.GENSIO_LOG_INFO
GENSIO_LOG_DEBUG = _gensio.GENSIO_LOG_DEBUG
GENSIO_LOG_MASK_ALL = _gensio.GENSIO_LOG_MASK_ALL

def gensio_set_log_mask(mask):
    return _gensio.gensio_set_log_mask(mask)

def gensio_get_log_mask():
    return _gensio.gensio_get_log_mask()
class ifinfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, o):
        _gensio.ifinfo_swiginit(self, _gensio.new_ifinfo(o))
    __swig_destroy__ = _gensio.delete_ifinfo

    def get_num_ifs(self):
        return _gensio.ifinfo_get_num_ifs(self)

    def get_name(self, idx):
        return _gensio.ifinfo_get_name(self, idx)

    def is_up(self, idx):
        return _gensio.ifinfo_is_up(self, idx)

    def is_loopback(self, idx):
        return _gensio.ifinfo_is_loopback(self, idx)

    def is_multicast(self, idx):
        return _gensio.ifinfo_is_multicast(self, idx)

    def get_ifindex(self, idx):
        return _gensio.ifinfo_get_ifindex(self, idx)

    def get_num_addrs(self, idx):
        return _gensio.ifinfo_get_num_addrs(self, idx)

    def get_addr_netbits(self, idx, addridx):
        return _gensio.ifinfo_get_addr_netbits(self, idx, addridx)

    def get_addr(self, idx, addridx):
        return _gensio.ifinfo_get_addr(self, idx, addridx)

# Register ifinfo in _gensio:
_gensio.ifinfo_swigregister(ifinfo)

