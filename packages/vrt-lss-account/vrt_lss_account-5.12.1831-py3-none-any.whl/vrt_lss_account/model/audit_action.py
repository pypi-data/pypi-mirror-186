# coding: utf-8

"""
    VRt.Account [AC]

    # Description  Veeroute Account Panel.  ## Entity relationship diagram  ![erd](../uml/account.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_account import schemas  # noqa: F401


class AuditAction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    User action.
    """


    class MetaOapg:
        required = {
            "method_group",
            "company_key",
            "tracedata",
            "statistics",
            "username",
        }
        
        class properties:
        
            @staticmethod
            def username() -> typing.Type['UserName']:
                return UserName
        
            @staticmethod
            def company_key() -> typing.Type['CompanyKey']:
                return CompanyKey
        
            @staticmethod
            def tracedata() -> typing.Type['Tracedata']:
                return Tracedata
        
            @staticmethod
            def method_group() -> typing.Type['MethodGroup']:
                return MethodGroup
        
            @staticmethod
            def statistics() -> typing.Type['AuditActionStatistics']:
                return AuditActionStatistics
            __annotations__ = {
                "username": username,
                "company_key": company_key,
                "tracedata": tracedata,
                "method_group": method_group,
                "statistics": statistics,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    method_group: 'MethodGroup'
    company_key: 'CompanyKey'
    tracedata: 'Tracedata'
    statistics: 'AuditActionStatistics'
    username: 'UserName'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["method_group"]) -> 'MethodGroup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_key"]) -> 'CompanyKey': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracedata"]) -> 'Tracedata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statistics"]) -> 'AuditActionStatistics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> 'UserName': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["method_group"], typing_extensions.Literal["company_key"], typing_extensions.Literal["tracedata"], typing_extensions.Literal["statistics"], typing_extensions.Literal["username"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["method_group"]) -> 'MethodGroup': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_key"]) -> 'CompanyKey': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracedata"]) -> 'Tracedata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statistics"]) -> 'AuditActionStatistics': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> 'UserName': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["method_group"], typing_extensions.Literal["company_key"], typing_extensions.Literal["tracedata"], typing_extensions.Literal["statistics"], typing_extensions.Literal["username"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        method_group: 'MethodGroup',
        company_key: 'CompanyKey',
        tracedata: 'Tracedata',
        statistics: 'AuditActionStatistics',
        username: 'UserName',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AuditAction':
        return super().__new__(
            cls,
            *args,
            method_group=method_group,
            company_key=company_key,
            tracedata=tracedata,
            statistics=statistics,
            username=username,
            _configuration=_configuration,
        )

from vrt_lss_account.model.audit_action_statistics import AuditActionStatistics
from vrt_lss_account.model.company_key import CompanyKey
from vrt_lss_account.model.method_group import MethodGroup
from vrt_lss_account.model.tracedata import Tracedata
from vrt_lss_account.model.user_name import UserName
