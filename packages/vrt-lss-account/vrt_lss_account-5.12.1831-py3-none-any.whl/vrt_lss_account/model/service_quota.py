# coding: utf-8

"""
    VRt.Account [AC]

    # Description  Veeroute Account Panel.  ## Entity relationship diagram  ![erd](../uml/account.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_account import schemas  # noqa: F401


class ServiceQuota(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Service quota.
    """


    class MetaOapg:
        required = {
            "methods",
            "service",
        }
        
        class properties:
        
            @staticmethod
            def service() -> typing.Type['ServiceName']:
                return ServiceName
            
            
            class methods(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 100
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['MethodQuota']:
                        return MethodQuota
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['MethodQuota'], typing.List['MethodQuota']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'methods':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MethodQuota':
                    return super().__getitem__(i)
            __annotations__ = {
                "service": service,
                "methods": methods,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    methods: MetaOapg.properties.methods
    service: 'ServiceName'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["methods"]) -> MetaOapg.properties.methods: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service"]) -> 'ServiceName': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["methods"], typing_extensions.Literal["service"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["methods"]) -> MetaOapg.properties.methods: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service"]) -> 'ServiceName': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["methods"], typing_extensions.Literal["service"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        methods: typing.Union[MetaOapg.properties.methods, list, tuple, ],
        service: 'ServiceName',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ServiceQuota':
        return super().__new__(
            cls,
            *args,
            methods=methods,
            service=service,
            _configuration=_configuration,
        )

from vrt_lss_account.model.method_quota import MethodQuota
from vrt_lss_account.model.service_name import ServiceName
