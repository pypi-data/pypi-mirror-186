# coding: utf-8

"""
    VRt.Account [AC]

    # Description  Veeroute Account Panel.  ## Entity relationship diagram  ![erd](../uml/account.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_account import schemas  # noqa: F401


class AuditStats(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Statistics by records list.
    """


    class MetaOapg:
        required = {
            "filter",
            "overall",
        }
        
        class properties:
        
            @staticmethod
            def overall() -> typing.Type['AuditStatsDetail']:
                return AuditStatsDetail
        
            @staticmethod
            def filter() -> typing.Type['AuditStatsDetail']:
                return AuditStatsDetail
            __annotations__ = {
                "overall": overall,
                "filter": filter,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    filter: 'AuditStatsDetail'
    overall: 'AuditStatsDetail'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filter"]) -> 'AuditStatsDetail': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overall"]) -> 'AuditStatsDetail': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["filter"], typing_extensions.Literal["overall"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filter"]) -> 'AuditStatsDetail': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overall"]) -> 'AuditStatsDetail': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["filter"], typing_extensions.Literal["overall"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        filter: 'AuditStatsDetail',
        overall: 'AuditStatsDetail',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AuditStats':
        return super().__new__(
            cls,
            *args,
            filter=filter,
            overall=overall,
            _configuration=_configuration,
        )

from vrt_lss_account.model.audit_stats_detail import AuditStatsDetail
