# coding: utf-8

"""
    VRt.Account [AC]

    # Description  Veeroute Account Panel.  ## Entity relationship diagram  ![erd](../uml/account.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_account import schemas  # noqa: F401


class MethodQuota(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Quota for the service method group.  If any of the quotas are exceeded, the request is not returned with the quota exceeded error.

    """


    class MetaOapg:
        required = {
            "method_group",
            "points_per_day",
            "points_per_request",
        }
        
        class properties:
        
            @staticmethod
            def method_group() -> typing.Type['MethodGroup']:
                return MethodGroup
            
            
            class points_per_request(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class points_per_day(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 100000000
                    inclusive_minimum = 0
            
            
            class points_per_date_window(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 100000000
                    inclusive_minimum = 0
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'points_per_date_window':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class max_concurrent_execution(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 1000
                    inclusive_minimum = 0
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'max_concurrent_execution':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "method_group": method_group,
                "points_per_request": points_per_request,
                "points_per_day": points_per_day,
                "points_per_date_window": points_per_date_window,
                "max_concurrent_execution": max_concurrent_execution,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    method_group: 'MethodGroup'
    points_per_day: MetaOapg.properties.points_per_day
    points_per_request: MetaOapg.properties.points_per_request
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["method_group"]) -> 'MethodGroup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["points_per_day"]) -> MetaOapg.properties.points_per_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["points_per_request"]) -> MetaOapg.properties.points_per_request: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["points_per_date_window"]) -> MetaOapg.properties.points_per_date_window: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_concurrent_execution"]) -> MetaOapg.properties.max_concurrent_execution: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["method_group"], typing_extensions.Literal["points_per_day"], typing_extensions.Literal["points_per_request"], typing_extensions.Literal["points_per_date_window"], typing_extensions.Literal["max_concurrent_execution"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["method_group"]) -> 'MethodGroup': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["points_per_day"]) -> MetaOapg.properties.points_per_day: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["points_per_request"]) -> MetaOapg.properties.points_per_request: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["points_per_date_window"]) -> typing.Union[MetaOapg.properties.points_per_date_window, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_concurrent_execution"]) -> typing.Union[MetaOapg.properties.max_concurrent_execution, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["method_group"], typing_extensions.Literal["points_per_day"], typing_extensions.Literal["points_per_request"], typing_extensions.Literal["points_per_date_window"], typing_extensions.Literal["max_concurrent_execution"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        method_group: 'MethodGroup',
        points_per_day: typing.Union[MetaOapg.properties.points_per_day, decimal.Decimal, int, ],
        points_per_request: typing.Union[MetaOapg.properties.points_per_request, decimal.Decimal, int, ],
        points_per_date_window: typing.Union[MetaOapg.properties.points_per_date_window, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_concurrent_execution: typing.Union[MetaOapg.properties.max_concurrent_execution, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MethodQuota':
        return super().__new__(
            cls,
            *args,
            method_group=method_group,
            points_per_day=points_per_day,
            points_per_request=points_per_request,
            points_per_date_window=points_per_date_window,
            max_concurrent_execution=max_concurrent_execution,
            _configuration=_configuration,
        )

from vrt_lss_account.model.method_group import MethodGroup
