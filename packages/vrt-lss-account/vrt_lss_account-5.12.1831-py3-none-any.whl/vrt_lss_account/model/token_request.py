# coding: utf-8

"""
    VRt.Account [AC]

    # Description  Veeroute Account Panel.  ## Entity relationship diagram  ![erd](../uml/account.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_account import schemas  # noqa: F401


class TokenRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Token obtaining data.
    """


    class MetaOapg:
        required = {
            "password",
            "username",
        }
        
        class properties:
        
            @staticmethod
            def username() -> typing.Type['UserName']:
                return UserName
            
            
            class password(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1000
                    min_length = 1
            
            
            class ttl_seconds(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 31556926
                    inclusive_minimum = 60
            __annotations__ = {
                "username": username,
                "password": password,
                "ttl_seconds": ttl_seconds,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    password: MetaOapg.properties.password
    username: 'UserName'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> 'UserName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ttl_seconds"]) -> MetaOapg.properties.ttl_seconds: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["password"], typing_extensions.Literal["username"], typing_extensions.Literal["ttl_seconds"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> 'UserName': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ttl_seconds"]) -> typing.Union[MetaOapg.properties.ttl_seconds, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["password"], typing_extensions.Literal["username"], typing_extensions.Literal["ttl_seconds"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        password: typing.Union[MetaOapg.properties.password, str, ],
        username: 'UserName',
        ttl_seconds: typing.Union[MetaOapg.properties.ttl_seconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TokenRequest':
        return super().__new__(
            cls,
            *args,
            password=password,
            username=username,
            ttl_seconds=ttl_seconds,
            _configuration=_configuration,
        )

from vrt_lss_account.model.user_name import UserName
