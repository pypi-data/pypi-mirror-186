# coding: utf-8

"""
    VRt.Account [AC]

    # Description  Veeroute Account Panel.  ## Entity relationship diagram  ![erd](../uml/account.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_account import schemas  # noqa: F401


class UserStatistics(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Usage service statistics by the specific user.
    """


    class MetaOapg:
        required = {
            "dates",
            "username",
        }
        
        class properties:
        
            @staticmethod
            def username() -> typing.Type['UserName']:
                return UserName
            
            
            class dates(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 3653
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['DateStatistics']:
                        return DateStatistics
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DateStatistics'], typing.List['DateStatistics']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dates':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DateStatistics':
                    return super().__getitem__(i)
            __annotations__ = {
                "username": username,
                "dates": dates,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    dates: MetaOapg.properties.dates
    username: 'UserName'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dates"]) -> MetaOapg.properties.dates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> 'UserName': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dates"], typing_extensions.Literal["username"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dates"]) -> MetaOapg.properties.dates: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> 'UserName': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dates"], typing_extensions.Literal["username"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dates: typing.Union[MetaOapg.properties.dates, list, tuple, ],
        username: 'UserName',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'UserStatistics':
        return super().__new__(
            cls,
            *args,
            dates=dates,
            username=username,
            _configuration=_configuration,
        )

from vrt_lss_account.model.date_statistics import DateStatistics
from vrt_lss_account.model.user_name import UserName
