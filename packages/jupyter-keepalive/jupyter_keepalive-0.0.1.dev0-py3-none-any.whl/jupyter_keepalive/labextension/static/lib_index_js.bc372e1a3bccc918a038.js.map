{"version":3,"file":"lib_index_js.bc372e1a3bccc918a038.js","mappings":";;;;;;;;;;;;;;;;;;;AAAuD;AACR;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;AACA;AACA,wCAAwC,gBAAgB;AACxD;AACA;AACA,wCAAwC,kBAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,mEAAmE,WAAW,KAAK,OAAO;AAC1F;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,WAAW;AACtD;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,8BAA8B,sCAAsC;AACpE;AACA,KAAK;AACL;AACA,iEAAe,SAAS,EAAC","sources":["webpack://@minrk/jupyter-keepalive/./lib/index.js"],"sourcesContent":["import { ICommandPalette } from \"@jupyterlab/apputils\";\nimport { URLExt } from \"@jupyterlab/coreutils\";\nimport { ServerConnection } from \"@jupyterlab/services\";\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nasync function keepAliveRequest(endPoint = \"\", init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, \"ext-keepalive\", endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n}\nasync function keepAliveStart() {\n    return await keepAliveRequest(\"\", { method: \"POST\" });\n}\nasync function keepAliveStop() {\n    return await keepAliveRequest(\"\", { method: \"DELETE\" });\n}\nasync function keepAliveRemaining() {\n    return await keepAliveRequest(\"\");\n}\n/**\n * Initialization data for the server-extension-example extension.\n */\nconst extension = {\n    id: \"jupyter-keepalive\",\n    autoStart: true,\n    optional: [],\n    requires: [ICommandPalette],\n    activate: async (app, palette) => {\n        console.log(\"JupyterLab extension keepalive is activated!\");\n        // GET request\n        try {\n            const data = await keepAliveRemaining();\n            console.log(data);\n        }\n        catch (reason) {\n            console.error(`Error on GET /api/.\\n${reason}`);\n        }\n        // POST request\n        const dataToSend = { name: \"George\" };\n        try {\n            const reply = await keepAliveStart();\n            console.log(reply);\n        }\n        catch (reason) {\n            console.error(`Error on POST /jlab-ext-example/hello ${dataToSend}.\\n${reason}`);\n        }\n        const { commands } = app;\n        const category = \"Keepalive\";\n        commands.addCommand(\"keepalive:start\", {\n            label: \"Keep server alive while idle\",\n            caption: \"Registers activity so idle cullers don't shut this server down.\",\n            execute: () => {\n                // todo: prompt for interval\n                // send as JSON.stringify({seconds: n})\n                // maybe that should be minutes? who keeps alive for seconds...?\n                keepAliveStart();\n            },\n        });\n        commands.addCommand(\"keepalive:stop\", {\n            label: \"Stop keeping server alive\",\n            caption: \"Stop the keepalive spinner\",\n            execute: () => {\n                keepAliveStop();\n            },\n        });\n        commands.addCommand(\"keepalive:check\", {\n            label: \"Check keepalive status\",\n            caption: \"Check the remaining time on the \",\n            execute: () => {\n                keepAliveRemaining();\n                // todo: display it somehow\n            },\n        });\n        for (var command of [\n            \"keepalive:start\",\n            \"keepalive:stop\",\n            \"keepalive:check\",\n        ]) {\n            palette.addItem({ command: command, category: category });\n        }\n    },\n};\nexport default extension;\n"],"names":[],"sourceRoot":""}