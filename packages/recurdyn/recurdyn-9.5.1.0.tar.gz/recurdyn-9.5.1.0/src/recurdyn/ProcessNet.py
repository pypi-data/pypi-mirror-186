# -*- coding: mbcs -*-
# Created by makepy.py version 0.5.01
# By python version 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)]
# From type library 'RecurDynCOM.tlb'
# On Tue Jun 28 10:10:44 2022
'RecurDyn V9R5 RecurDynCOM Type Library'
makepy_version = '0.5.01'
python_version = 0x3080af0

import win32com.client.CLSIDToClass, pythoncom, pywintypes
import win32com.client.util
from pywintypes import IID
from win32com.client import Dispatch
from enum import IntEnum

# The following 3 lines may need tweaking for the particular server
# Candidates are pythoncom.Missing, .Empty and .ArgNotFound
defaultNamedOptArg=pythoncom.Empty
defaultNamedNotOptArg=pythoncom.Empty
defaultUnnamedArg=pythoncom.Empty

CLSID = IID('{01ECF53E-743A-4877-A803-8BBE991D7D7E}')
MajorVersion = 1
MinorVersion = 0
LibraryFlags = 8
LCID = 0x0

class AddSeriesAxisType(IntEnum):
	'''
	AddSeriesAxisType enumeration.
	'''
	AddSeriesAxisType_AtCurrentAxis=1         
	'''Constant value is 1.'''
	AddSeriesAxisType_AtNewAxis   =0         
	'''Constant value is 0.'''
	AddSeriesAxisType_WithNewPane =2         
	'''Constant value is 2.'''
	AddSeriesAxisType_WithSameScale=3         
	'''Constant value is 3.'''
class AdvancedDetectionType(IntEnum):
	'''
	AdvancedDetectionType enumeration.
	'''
	Full                          =1         
	'''Constant value is 1.'''
	SUBBB                         =0         
	'''Constant value is 0.'''
class AlignNomalVectorType(IntEnum):
	'''
	AlignNomalVectorType enumeration.
	'''
	DifferentDirection            =0         
	'''Constant value is 0.'''
	SameDirection                 =1         
	'''Constant value is 1.'''
class AnalysisMode(IntEnum):
	'''
	AnalysisMode enumeration.
	'''
	Dynamic                       =0         
	'''Constant value is 0.'''
	EigenValue                    =2         
	'''Constant value is 2.'''
	FRA                           =4         
	'''Constant value is 4.'''
	Pre                           =3         
	'''Constant value is 3.'''
	Static                        =1         
	'''Constant value is 1.'''
class AxisType(IntEnum):
	'''
	AxisType enumeration.
	'''
	MinusX                        =3         
	'''Constant value is 3.'''
	MinusY                        =4         
	'''Constant value is 4.'''
	MinusZ                        =5         
	'''Constant value is 5.'''
	PlusX                         =0         
	'''Constant value is 0.'''
	PlusY                         =1         
	'''Constant value is 1.'''
	PlusZ                         =2         
	'''Constant value is 2.'''
class BeamCrossSectionType(IntEnum):
	'''
	BeamCrossSectionType enumeration.
	'''
	CircularBeam                  =1         
	'''Constant value is 1.'''
	EllipticalBeam                =2         
	'''Constant value is 2.'''
	HollowRectangualrBeam         =6         
	'''Constant value is 6.'''
	IBeam                         =7         
	'''Constant value is 7.'''
	RectangularBeam               =3         
	'''Constant value is 3.'''
	TBeam                         =8         
	'''Constant value is 8.'''
	ThickWallTubeBeam             =5         
	'''Constant value is 5.'''
	ThinWallTubeBeam              =4         
	'''Constant value is 4.'''
	UserDefined                   =0         
	'''Constant value is 0.'''
class BeamInertiaPropertyInputType(IntEnum):
	'''
	BeamInertiaPropertyInputType enumeration.
	'''
	BeamInertiaPropertyInputType_Density=1         
	'''Constant value is 1.'''
	BeamInertiaPropertyInputType_TotalMass=0         
	'''Constant value is 0.'''
class BooleanType(IntEnum):
	'''
	BooleanType enumeration.
	'''
	Intersect                     =2         
	'''Constant value is 2.'''
	Subtract                      =1         
	'''Constant value is 1.'''
	Unite                         =0         
	'''Constant value is 0.'''
class CADAssemblyLevel(IntEnum):
	'''
	CADAssemblyLevel enumeration.
	'''
	CADAssemblyLevel_Body         =0         
	'''Constant value is 0.'''
	CADAssemblyLevel_SubSystem    =1         
	'''Constant value is 1.'''
class CalculusOption(IntEnum):
	'''
	CalculusOption enumeration.
	'''
	Calculus_Linear               =0         
	'''Constant value is 0.'''
	Calculus_Smooth               =1         
	'''Constant value is 1.'''
class Camera(IntEnum):
	'''
	Camera enumeration.
	'''
	Camera_Following              =1         
	'''Constant value is 1.'''
	Camera_Multi                  =3         
	'''Constant value is 3.'''
	Camera_Riding                 =2         
	'''Constant value is 2.'''
	Camera_Standard               =0         
	'''Constant value is 0.'''
class CameraFollowingType(IntEnum):
	'''
	CameraFollowingType enumeration.
	'''
	CameraFollowingType_Position  =0         
	'''Constant value is 0.'''
	CameraFollowingType_Position_Rotation=1         
	'''Constant value is 1.'''
class CameraRidingType(IntEnum):
	'''
	CameraRidingType enumeration.
	'''
	CameraRidingType_Position     =0         
	'''Constant value is 0.'''
	CameraRidingType_Position_Rotation=1         
	'''Constant value is 1.'''
class CampbellDiagramFFTOffsetType(IntEnum):
	'''
	CampbellDiagramFFTOffsetType enumeration.
	'''
	CampbellDiagramFFTOffset_FrameAverageToZero=2         
	'''Constant value is 2.'''
	CampbellDiagramFFTOffset_None =0         
	'''Constant value is 0.'''
	CampbellDiagramFFTOffset_SignalAverageToZero=1         
	'''Constant value is 1.'''
class CampbellDiagramFrameSizeType(IntEnum):
	'''
	CampbellDiagramFrameSizeType enumeration.
	'''
	CampbellDiagramFrameSize_1024 =3         
	'''Constant value is 3.'''
	CampbellDiagramFrameSize_128  =0         
	'''Constant value is 0.'''
	CampbellDiagramFrameSize_16384=7         
	'''Constant value is 7.'''
	CampbellDiagramFrameSize_2048 =4         
	'''Constant value is 4.'''
	CampbellDiagramFrameSize_256  =1         
	'''Constant value is 1.'''
	CampbellDiagramFrameSize_32768=8         
	'''Constant value is 8.'''
	CampbellDiagramFrameSize_4096 =5         
	'''Constant value is 5.'''
	CampbellDiagramFrameSize_512  =2         
	'''Constant value is 2.'''
	CampbellDiagramFrameSize_65536=9         
	'''Constant value is 9.'''
	CampbellDiagramFrameSize_8192 =6         
	'''Constant value is 6.'''
class CampbellDiagramGraphOptionType(IntEnum):
	'''
	CampbellDiagramGraphOptionType enumeration.
	'''
	CampbellDiagramGraphOption_RPMFrequency=0         
	'''Constant value is 0.'''
	CampbellDiagramGraphOption_RPMOrder=1         
	'''Constant value is 1.'''
class CampbellDiagramMagnitudeType(IntEnum):
	'''
	CampbellDiagramMagnitudeType enumeration.
	'''
	CampbellDiagramMagnitude_Amplitude=0         
	'''Constant value is 0.'''
	CampbellDiagramMagnitude_PowerSpectrum=1         
	'''Constant value is 1.'''
	CampbellDiagramMagnitude_PowerSpectrumDensity=2         
	'''Constant value is 2.'''
class CampbellDiagramOrderLineStyleType(IntEnum):
	'''
	CampbellDiagramOrderLineStyleType enumeration.
	'''
	CampbellDiagramOrderLineStyleType_DashDotDotLine=4         
	'''Constant value is 4.'''
	CampbellDiagramOrderLineStyleType_DashDotLine=3         
	'''Constant value is 3.'''
	CampbellDiagramOrderLineStyleType_DashLine=1         
	'''Constant value is 1.'''
	CampbellDiagramOrderLineStyleType_DotLine=2         
	'''Constant value is 2.'''
	CampbellDiagramOrderLineStyleType_SolidLine=0         
	'''Constant value is 0.'''
class CampbellDiagramOrderLineWeightType(IntEnum):
	'''
	CampbellDiagramOrderLineWeightType enumeration.
	'''
	CampbellDiagramOrderLineWeightType_Medium=2         
	'''Constant value is 2.'''
	CampbellDiagramOrderLineWeightType_MediumThin=1         
	'''Constant value is 1.'''
	CampbellDiagramOrderLineWeightType_Thick=3         
	'''Constant value is 3.'''
	CampbellDiagramOrderLineWeightType_Thin=0         
	'''Constant value is 0.'''
class CampbellDiagramPlotType(IntEnum):
	'''
	CampbellDiagramPlotType enumeration.
	'''
	CampbellDiagramPlot_ColorMap  =0         
	'''Constant value is 0.'''
	CampbellDiagramPlot_SurfaceContour=1         
	'''Constant value is 1.'''
class CampbellDiagramRPMComputeType(IntEnum):
	'''
	CampbellDiagramRPMComputeType enumeration.
	'''
	CampbellDiagramRPMCompute_Average=1         
	'''Constant value is 1.'''
	CampbellDiagramRPMCompute_Maximum=2         
	'''Constant value is 2.'''
	CampbellDiagramRPMCompute_Minimum=0         
	'''Constant value is 0.'''
class CampbellDiagramSignalType(IntEnum):
	'''
	CampbellDiagramSignalType enumeration.
	'''
	CampbellDiagramSignal_RPM     =1         
	'''Constant value is 1.'''
	CampbellDiagramSignal_Signal  =3         
	'''Constant value is 3.'''
	CampbellDiagramSignal_SignalFFT=4         
	'''Constant value is 4.'''
	CampbellDiagramSignal_Tacho   =0         
	'''Constant value is 0.'''
	CampbellDiagramSignal_dRPM    =2         
	'''Constant value is 2.'''
class CampbellDiagramWindowType(IntEnum):
	'''
	CampbellDiagramWindowType enumeration.
	'''
	CampbellDiagramWindow_Bartlett=1         
	'''Constant value is 1.'''
	CampbellDiagramWindow_Blackman=5         
	'''Constant value is 5.'''
	CampbellDiagramWindow_Hamming =4         
	'''Constant value is 4.'''
	CampbellDiagramWindow_Hanning =3         
	'''Constant value is 3.'''
	CampbellDiagramWindow_Square  =0         
	'''Constant value is 0.'''
	CampbellDiagramWindow_Welch   =2         
	'''Constant value is 2.'''
class CartesianMotionCondition(IntEnum):
	'''
	CartesianMotionCondition enumeration.
	'''
	CartesianMotionCondition_Acceleration=2         
	'''Constant value is 2.'''
	CartesianMotionCondition_Displacement=0         
	'''Constant value is 0.'''
	CartesianMotionCondition_Velocity=1         
	'''Constant value is 1.'''
class CartesianMotionType(IntEnum):
	'''
	CartesianMotionType enumeration.
	'''
	RotationalX                   =3         
	'''Constant value is 3.'''
	RotationalY                   =4         
	'''Constant value is 4.'''
	RotationalZ                   =5         
	'''Constant value is 5.'''
	TranslationalX                =0         
	'''Constant value is 0.'''
	TranslationalY                =1         
	'''Constant value is 1.'''
	TranslationalZ                =2         
	'''Constant value is 2.'''
class CheckRedundantType(IntEnum):
	'''
	CheckRedundantType enumeration.
	'''
	CheckRedundantType_EveryStep  =0         
	'''Constant value is 0.'''
	CheckRedundantType_OnceAtSimulationStart=1         
	'''Constant value is 1.'''
class CloseDialogType(IntEnum):
	'''
	CloseDialogType enumeration.
	'''
	CANCEL                        =1         
	'''Constant value is 1.'''
	OK                            =0         
	'''Constant value is 0.'''
class ContactForceType(IntEnum):
	'''
	ContactForceType enumeration.
	'''
	BoundaryPenetration           =1         
	'''Constant value is 1.'''
	IndentationExponent           =0         
	'''Constant value is 0.'''
class ContactFrictionType(IntEnum):
	'''
	ContactFrictionType enumeration.
	'''
	CoefficientSpline             =2         
	'''Constant value is 2.'''
	CoefficientValue              =0         
	'''Constant value is 0.'''
	ForceSpline                   =1         
	'''Constant value is 1.'''
class ContactSurfaceType(IntEnum):
	'''
	ContactSurfaceType enumeration.
	'''
	PatchType                     =0         
	'''Constant value is 0.'''
	SurfaceType                   =1         
	'''Constant value is 1.'''
class ContourBandLegendLocationType(IntEnum):
	'''
	ContourBandLegendLocationType enumeration.
	'''
	CB_Legned_Location_Bottom     =0         
	'''Constant value is 0.'''
	CB_Legned_Location_Left       =1         
	'''Constant value is 1.'''
	CB_Legned_Location_Right      =2         
	'''Constant value is 2.'''
	CB_Legned_Location_Top        =3         
	'''Constant value is 3.'''
class ContourColorType(IntEnum):
	'''
	ContourColorType enumeration.
	'''
	C_Gray_Scale                  =1         
	'''Constant value is 1.'''
	C_Spectrum                    =0         
	'''Constant value is 0.'''
class CopyMarkerType(IntEnum):
	'''
	CopyMarkerType enumeration.
	'''
	All                           =0         
	'''Constant value is 0.'''
	Orientation                   =1         
	'''Constant value is 1.'''
	Origin                        =2         
	'''Constant value is 2.'''
class CoreType(IntEnum):
	'''
	CoreType enumeration.
	'''
	Num1                          =1         
	'''Constant value is 1.'''
	Num16                         =16        
	'''Constant value is 16.'''
	Num2                          =2         
	'''Constant value is 2.'''
	Num4                          =4         
	'''Constant value is 4.'''
	Num8                          =8         
	'''Constant value is 8.'''
class Core_Option(IntEnum):
	'''
	Core_Option enumeration.
	'''
	In_Core                       =0         
	'''Constant value is 0.'''
	Out_Of_Core                   =1         
	'''Constant value is 1.'''
class CouplerJointType(IntEnum):
	'''
	CouplerJointType enumeration.
	'''
	Rotation                      =0         
	'''Constant value is 0.'''
	Translation                   =1         
	'''Constant value is 1.'''
class CouplerType(IntEnum):
	'''
	CouplerType enumeration.
	'''
	ThreeJoint                    =1         
	'''Constant value is 1.'''
	TwoJoint                      =0         
	'''Constant value is 0.'''
class CreateDOETableType(IntEnum):
	'''
	CreateDOETableType enumeration.
	'''
	CreateDOETableType_Append     =0         
	'''Constant value is 0.'''
	CreateDOETableType_New        =1         
	'''Constant value is 1.'''
class CreateShellDirection(IntEnum):
	'''
	CreateShellDirection enumeration.
	'''
	Inward                        =0         
	'''Constant value is 0.'''
	Outward                       =1         
	'''Constant value is 1.'''
class CreatedBodyColorType(IntEnum):
	'''
	CreatedBodyColorType enumeration.
	'''
	CreatedBodyColorType_Default  =0         
	'''Constant value is 0.'''
	CreatedBodyColorType_Random   =1         
	'''Constant value is 1.'''
class CrossSectionType(IntEnum):
	'''
	CrossSectionType enumeration.
	'''
	Circular                      =0         
	'''Constant value is 0.'''
	Rectanglular                  =1         
	'''Constant value is 1.'''
class CurveDetailLevelType(IntEnum):
	'''
	CurveDetailLevelType enumeration.
	'''
	CurveDetailLevelType_High     =2         
	'''Constant value is 2.'''
	CurveDetailLevelType_Mid      =1         
	'''Constant value is 1.'''
	CurveDetailLevelType_Min      =0         
	'''Constant value is 0.'''
class CurvePrimitiveType(IntEnum):
	'''
	CurvePrimitiveType enumeration.
	'''
	CurvePrimitiveType_Circle     =1         
	'''Constant value is 1.'''
	CurvePrimitiveType_Curve      =0         
	'''Constant value is 0.'''
class CurveType(IntEnum):
	'''
	CurveType enumeration.
	'''
	T_Curve                       =0         
	'''Constant value is 0.'''
	T_Line                        =1         
	'''Constant value is 1.'''
class DatabaseSortType(IntEnum):
	'''
	DatabaseSortType enumeration.
	'''
	ByCreationTime                =1         
	'''Constant value is 1.'''
	ByName                        =2         
	'''Constant value is 2.'''
	ByType                        =3         
	'''Constant value is 3.'''
	NotSort                       =0         
	'''Constant value is 0.'''
class DefaultPlotTemplateType(IntEnum):
	'''
	DefaultPlotTemplateType enumeration.
	'''
	DefaultPlotTemplateType_Search=1         
	'''Constant value is 1.'''
	DefaultPlotTemplateType_Specified=0         
	'''Constant value is 0.'''
class DesignStudyAnalysisMode(IntEnum):
	'''
	DesignStudyAnalysisMode enumeration.
	'''
	DesignStudy_Dynamic           =0         
	'''Constant value is 0.'''
	DesignStudy_Static            =1         
	'''Constant value is 1.'''
class DesignStudyExperimentType(IntEnum):
	'''
	DesignStudyExperimentType enumeration.
	'''
	DirectInput                   =2         
	'''Constant value is 2.'''
	FullFactorial                 =0         
	'''Constant value is 0.'''
	PlackettBurman                =1         
	'''Constant value is 1.'''
class DesignStudyLogicalOperatorType(IntEnum):
	'''
	DesignStudyLogicalOperatorType enumeration.
	'''
	DesignStudy_GE                =0         
	'''Constant value is 0.'''
	DesignStudy_LE                =1         
	'''Constant value is 1.'''
class DesignStudyMinMaxType(IntEnum):
	'''
	DesignStudyMinMaxType enumeration.
	'''
	DesignStudy_Max               =1         
	'''Constant value is 1.'''
	DesignStudy_Min               =0         
	'''Constant value is 0.'''
class DesignVariableValueRange(IntEnum):
	'''
	DesignVariableValueRange enumeration.
	'''
	Absolute                      =0         
	'''Constant value is 0.'''
	Delta                         =1         
	'''Constant value is 1.'''
	PercentDelta                  =2         
	'''Constant value is 2.'''
class DifferentialEquationFunctionType(IntEnum):
	'''
	DifferentialEquationFunctionType enumeration.
	'''
	Explicit                      =0         
	'''Constant value is 0.'''
	Implicit                      =1         
	'''Constant value is 1.'''
class DifferentialEquationType(IntEnum):
	'''
	DifferentialEquationType enumeration.
	'''
	DifferentialEquationType_Expression=0         
	'''Constant value is 0.'''
	DifferentialEquationType_UserSubroutine=1         
	'''Constant value is 1.'''
class Directivity(IntEnum):
	'''
	Directivity enumeration.
	'''
	Anisotropic                   =2         
	'''Constant value is 2.'''
	Isotropic                     =0         
	'''Constant value is 0.'''
	Orthotropic                   =1         
	'''Constant value is 1.'''
class EachRenderMode(IntEnum):
	'''
	EachRenderMode enumeration.
	'''
	Each_Auto                     =0         
	'''Constant value is 0.'''
	Each_Hide                     =3         
	'''Constant value is 3.'''
	Each_Shade                    =2         
	'''Constant value is 2.'''
	Each_Shade_With_Wire          =4         
	'''Constant value is 4.'''
	Each_WireFrame                =1         
	'''Constant value is 1.'''
class EdgeType(IntEnum):
	'''
	EdgeType enumeration.
	'''
	EdgeType_All                  =0         
	'''Constant value is 0.'''
	EdgeType_Redundant            =1         
	'''Constant value is 1.'''
class EigenvalueFRAAnimationType(IntEnum):
	'''
	EigenvalueFRAAnimationType enumeration.
	'''
	FrequencyResponse             =1         
	'''Constant value is 1.'''
	NormalMode                    =0         
	'''Constant value is 0.'''
class EntityType(IntEnum):
	'''
	EntityType enumeration.
	'''
	EntityType_Body               =256       
	'''Constant value is 256.'''
	EntityType_Contact            =2048      
	'''Constant value is 2048.'''
	EntityType_Force              =1024      
	'''Constant value is 1024.'''
	EntityType_Geometry           =0         
	'''Constant value is 0.'''
	EntityType_GeometrySheet      =2         
	'''Constant value is 2.'''
	EntityType_GeometrySolid      =4         
	'''Constant value is 4.'''
	EntityType_GeometryWire       =1         
	'''Constant value is 1.'''
	EntityType_Joint              =512       
	'''Constant value is 512.'''
	EntityType_Marker             =65536     
	'''Constant value is 65536.'''
	EntityType_Sensor             =131072    
	'''Constant value is 131072.'''
	EntityType_SubSystem          =262144    
	'''Constant value is 262144.'''
class EntityType2(IntEnum):
	'''
	EntityType2 enumeration.
	'''
	Type_Body                     =0         
	'''Constant value is 0.'''
	Type_Contact                  =3         
	'''Constant value is 3.'''
	Type_FEElementSet             =7         
	'''Constant value is 7.'''
	Type_FELineSet                =11        
	'''Constant value is 11.'''
	Type_FENodeSet                =8         
	'''Constant value is 8.'''
	Type_FEPatchSet               =9         
	'''Constant value is 9.'''
	Type_Force                    =2         
	'''Constant value is 2.'''
	Type_Group                    =10        
	'''Constant value is 10.'''
	Type_Joint                    =1         
	'''Constant value is 1.'''
	Type_Marker                   =4         
	'''Constant value is 4.'''
	Type_Sensor                   =5         
	'''Constant value is 5.'''
	Type_SubSystem                =6         
	'''Constant value is 6.'''
class EulerAngle(IntEnum):
	'''
	EulerAngle enumeration.
	'''
	EulerAngle_ZXZ                =0         
	'''Constant value is 0.'''
	EulerAngle_ZYX                =1         
	'''Constant value is 1.'''
class ExtrapolationType(IntEnum):
	'''
	ExtrapolationType enumeration.
	'''
	ExtrapolationType_Cubic       =2         
	'''Constant value is 2.'''
	ExtrapolationType_Cyclic      =3         
	'''Constant value is 3.'''
	ExtrapolationType_Linear      =0         
	'''Constant value is 0.'''
	ExtrapolationType_Quadratic   =1         
	'''Constant value is 1.'''
class ExtrudeDirectionType(IntEnum):
	'''
	ExtrudeDirectionType enumeration.
	'''
	DOWN                          =1         
	'''Constant value is 1.'''
	UP                            =0         
	'''Constant value is 0.'''
class FFTWindowMethod(IntEnum):
	'''
	FFTWindowMethod enumeration.
	'''
	Barlett                       =1         
	'''Constant value is 1.'''
	Blackman                      =5         
	'''Constant value is 5.'''
	Hamming                       =4         
	'''Constant value is 4.'''
	Hanning                       =3         
	'''Constant value is 3.'''
	SquareType                    =0         
	'''Constant value is 0.'''
	Welch                         =2         
	'''Constant value is 2.'''
class FaceType(IntEnum):
	'''
	FaceType enumeration.
	'''
	FaceType_All                  =0         
	'''Constant value is 0.'''
	FaceType_Cone                 =6         
	'''Constant value is 6.'''
	FaceType_Cylinder             =3         
	'''Constant value is 3.'''
	FaceType_Fillet               =1         
	'''Constant value is 1.'''
	FaceType_Hole                 =2         
	'''Constant value is 2.'''
	FaceType_Sphere               =4         
	'''Constant value is 4.'''
	FaceType_Torus                =5         
	'''Constant value is 5.'''
class FilterOption(IntEnum):
	'''
	FilterOption enumeration.
	'''
	BandPass                      =2         
	'''Constant value is 2.'''
	BandStop                      =3         
	'''Constant value is 3.'''
	HighPass                      =1         
	'''Constant value is 1.'''
	LowPass                       =0         
	'''Constant value is 0.'''
class FlexibleElementType(IntEnum):
	'''
	FlexibleElementType enumeration.
	'''
	FlexibleElementType_Beam2     =2         
	'''Constant value is 2.'''
	FlexibleElementType_Mass      =30        
	'''Constant value is 30.'''
	FlexibleElementType_RBE2      =31        
	'''Constant value is 31.'''
	FlexibleElementType_Shell3    =4         
	'''Constant value is 4.'''
	FlexibleElementType_Shell4    =6         
	'''Constant value is 6.'''
	FlexibleElementType_Shell9    =8         
	'''Constant value is 8.'''
	FlexibleElementType_Solid10   =10        
	'''Constant value is 10.'''
	FlexibleElementType_Solid26   =19        
	'''Constant value is 19.'''
	FlexibleElementType_Solid4    =9         
	'''Constant value is 9.'''
	FlexibleElementType_Solid5    =14        
	'''Constant value is 14.'''
	FlexibleElementType_Solid6    =11        
	'''Constant value is 11.'''
	FlexibleElementType_Solid8    =17        
	'''Constant value is 17.'''
	FlexibleElementType_Unknown   =0         
	'''Constant value is 0.'''
class ForceDisplay(IntEnum):
	'''
	ForceDisplay enumeration.
	'''
	Action                        =1         
	'''Constant value is 1.'''
	Base                          =2         
	'''Constant value is 2.'''
	Both                          =3         
	'''Constant value is 3.'''
	NONE                          =0         
	'''Constant value is 0.'''
class ForceDisplayComponent(IntEnum):
	'''
	ForceDisplayComponent enumeration.
	'''
	ForceVector                   =0         
	'''Constant value is 0.'''
	Friction_Component            =5         
	'''Constant value is 5.'''
	Normal_Component              =4         
	'''Constant value is 4.'''
	X_Component                   =1         
	'''Constant value is 1.'''
	Y_Component                   =2         
	'''Constant value is 2.'''
	Z_Component                   =3         
	'''Constant value is 3.'''
class FrictionType(IntEnum):
	'''
	FrictionType enumeration.
	'''
	FrictionWithStiction          =2         
	'''Constant value is 2.'''
	FrictionWithoutStiction       =1         
	'''Constant value is 1.'''
	NoFriction                    =0         
	'''Constant value is 0.'''
class GeneralDOEMethodType(IntEnum):
	'''
	GeneralDOEMethodType enumeration.
	'''
	GeneralDOEMethodType_BoxBehnkenDesign=4         
	'''Constant value is 4.'''
	GeneralDOEMethodType_CentralCompsiteDesign=3         
	'''Constant value is 3.'''
	GeneralDOEMethodType_FullFactorialDesign=0         
	'''Constant value is 0.'''
	GeneralDOEMethodType_LatinHypercubeSampling=5         
	'''Constant value is 5.'''
	GeneralDOEMethodType_TwoLevelFullFactorialDesign=1         
	'''Constant value is 1.'''
	GeneralDOEMethodType_TwoLevelPlackettBurman=2         
	'''Constant value is 2.'''
class GeoSurfaceType(IntEnum):
	'''
	GeoSurfaceType enumeration.
	'''
	Surface_Quad                  =1         
	'''Constant value is 1.'''
	Surface_Triangle              =0         
	'''Constant value is 0.'''
class GeometryDetailLevelType(IntEnum):
	'''
	GeometryDetailLevelType enumeration.
	'''
	GeometryDetailLevelType_High  =5         
	'''Constant value is 5.'''
	GeometryDetailLevelType_Low   =1         
	'''Constant value is 1.'''
	GeometryDetailLevelType_LowMid=2         
	'''Constant value is 2.'''
	GeometryDetailLevelType_Mid   =3         
	'''Constant value is 3.'''
	GeometryDetailLevelType_MidHigh=4         
	'''Constant value is 4.'''
class GeometryOutlineType(IntEnum):
	'''
	GeometryOutlineType enumeration.
	'''
	GeometryOutline_File          =1         
	'''Constant value is 1.'''
	GeometryOutline_Value         =0         
	'''Constant value is 0.'''
class GeometrySplineType(IntEnum):
	'''
	GeometrySplineType enumeration.
	'''
	GeometrySpline_File           =1         
	'''Constant value is 1.'''
	GeometrySpline_Value          =0         
	'''Constant value is 0.'''
class GeometryType(IntEnum):
	'''
	GeometryType enumeration.
	'''
	Type_Curve                    =0         
	'''Constant value is 0.'''
	Type_Curve_Circle             =5         
	'''Constant value is 5.'''
	Type_Geometry                 =3         
	'''Constant value is 3.'''
	Type_Shell                    =12        
	'''Constant value is 12.'''
	Type_Solid                    =1         
	'''Constant value is 1.'''
	Type_Solid_Box                =4         
	'''Constant value is 4.'''
	Type_Solid_Cone               =6         
	'''Constant value is 6.'''
	Type_Solid_Cylinder           =7         
	'''Constant value is 7.'''
	Type_Solid_Sphere             =8         
	'''Constant value is 8.'''
	Type_Solid_Torus              =9         
	'''Constant value is 9.'''
	Type_Surface                  =2         
	'''Constant value is 2.'''
	Type_Surface_ArcExtrude       =10        
	'''Constant value is 10.'''
	Type_Surface_ArcRevolution    =11        
	'''Constant value is 11.'''
class GridShape(IntEnum):
	'''
	GridShape enumeration.
	'''
	CrossShape                    =2         
	'''Constant value is 2.'''
	DotShape                      =0         
	'''Constant value is 0.'''
	LineShape                     =1         
	'''Constant value is 1.'''
class GridType(IntEnum):
	'''
	GridType enumeration.
	'''
	Cartesian                     =0         
	'''Constant value is 0.'''
	Cylindrical                   =1         
	'''Constant value is 1.'''
class ICFCreationType(IntEnum):
	'''
	ICFCreationType enumeration.
	'''
	ICFCreationType_ALL           =0         
	'''Constant value is 0.'''
	ICFCreationType_RECENT        =1         
	'''Constant value is 1.'''
class IDType(IntEnum):
	'''
	IDType enumeration.
	'''
	Type_Element                  =1         
	'''Constant value is 1.'''
	Type_Line                     =3         
	'''Constant value is 3.'''
	Type_Node                     =0         
	'''Constant value is 0.'''
	Type_Patch                    =2         
	'''Constant value is 2.'''
class ImageFileFormat(IntEnum):
	'''
	ImageFileFormat enumeration.
	'''
	Bitmap                        =0         
	'''Constant value is 0.'''
	Jpeg                          =2         
	'''Constant value is 2.'''
	Metafile                      =1         
	'''Constant value is 1.'''
	Png                           =3         
	'''Constant value is 3.'''
class ImportOptionCATIAAssemlyType(IntEnum):
	'''
	ImportOptionCATIAAssemlyType enumeration.
	'''
	ImportOptionCATIAAssemlyType_DivideToEachBody=0         
	'''Constant value is 0.'''
	ImportOptionCATIAAssemlyType_MergeToSingleBody=1         
	'''Constant value is 1.'''
	ImportOptionCATIAAssemlyType_PreserveAssemlyStructure=2         
	'''Constant value is 2.'''
class InitialVelocityType(IntEnum):
	'''
	InitialVelocityType enumeration.
	'''
	InitialVelocityType_Absolute  =1         
	'''Constant value is 1.'''
	InitialVelocityType_Relative  =0         
	'''Constant value is 0.'''
class IntegratorType(IntEnum):
	'''
	IntegratorType enumeration.
	'''
	ADVHYBRID                     =4         
	'''Constant value is 4.'''
	DDASSL                        =0         
	'''Constant value is 0.'''
	HYBRID                        =3         
	'''Constant value is 3.'''
	IMGALPHA                      =1         
	'''Constant value is 1.'''
	TRKGALPHA                     =2         
	'''Constant value is 2.'''
class InterferenceType(IntEnum):
	'''
	InterferenceType enumeration.
	'''
	InterferenceType_Contact      =2         
	'''Constant value is 2.'''
	InterferenceType_Interference =1         
	'''Constant value is 1.'''
	InterferenceType_NoInterference=0         
	'''Constant value is 0.'''
class InterpolationPolynomialOrder(IntEnum):
	'''
	InterpolationPolynomialOrder enumeration.
	'''
	Order_2                       =0         
	'''Constant value is 0.'''
	Order_3                       =1         
	'''Constant value is 1.'''
	Order_N                       =2         
	'''Constant value is 2.'''
class InterpolationType(IntEnum):
	'''
	InterpolationType enumeration.
	'''
	Cubic                         =0         
	'''Constant value is 0.'''
	Poly5                         =1         
	'''Constant value is 1.'''
class InterpolationType2(IntEnum):
	'''
	InterpolationType2 enumeration.
	'''
	Interpolation2_Linear         =0         
	'''Constant value is 0.'''
	Interpolation2_Spline         =1         
	'''Constant value is 1.'''
class LayerFilterType(IntEnum):
	'''
	LayerFilterType enumeration.
	'''
	LayerFilterType_CurrentLayer  =1         
	'''Constant value is 1.'''
	LayerFilterType_ShowAll       =0         
	'''Constant value is 0.'''
class LayerFilterTypeEx(IntEnum):
	'''
	LayerFilterTypeEx enumeration.
	'''
	LayerFilterTypeEx_MultiLayer  =1         
	'''Constant value is 1.'''
	LayerFilterTypeEx_ShowAll     =0         
	'''Constant value is 0.'''
class LinearSolverTypeForMBD(IntEnum):
	'''
	LinearSolverTypeForMBD enumeration.
	'''
	LinearSolverTypeForMBD_Auto   =0         
	'''Constant value is 0.'''
	LinearSolverTypeForMBD_Dense  =1         
	'''Constant value is 1.'''
	LinearSolverTypeForMBD_Sparse =2         
	'''Constant value is 2.'''
class MFTireGRoadType(IntEnum):
	'''
	MFTireGRoadType enumeration.
	'''
	MFTireGRoadType_GRoadEntity   =0         
	'''Constant value is 0.'''
	MFTireGRoadType_GRoadFile     =1         
	'''Constant value is 1.'''
class MFTireModel(IntEnum):
	'''
	MFTireModel enumeration.
	'''
	MF                            =0         
	'''Constant value is 0.'''
	SWIFT                         =1         
	'''Constant value is 1.'''
class MFTireRoadType(IntEnum):
	'''
	MFTireRoadType enumeration.
	'''
	MFTireRoadType_RoadFile       =1         
	'''Constant value is 1.'''
	MFTireRoadType_RoadShell      =0         
	'''Constant value is 0.'''
class MassInvariantType(IntEnum):
	'''
	MassInvariantType enumeration.
	'''
	MassInvariantType_BodySetting =2         
	'''Constant value is 2.'''
	MassInvariantType_Full        =1         
	'''Constant value is 1.'''
	MassInvariantType_Partial     =0         
	'''Constant value is 0.'''
class MassType(IntEnum):
	'''
	MassType enumeration.
	'''
	UseDensity                    =0         
	'''Constant value is 0.'''
	UseTotalMass                  =1         
	'''Constant value is 1.'''
class Material(IntEnum):
	'''
	Material enumeration.
	'''
	Aluminum                      =0         
	'''Constant value is 0.'''
	Aluminum_allosys_2014_T6      =1         
	'''Constant value is 1.'''
	Aluminum_allosys_6061_T6      =2         
	'''Constant value is 2.'''
	Aluminum_allosys_7075_T6      =3         
	'''Constant value is 3.'''
	Brick                         =6         
	'''Constant value is 6.'''
	Bronze                        =7         
	'''Constant value is 7.'''
	Cast_iron                     =9         
	'''Constant value is 9.'''
	Concrete_Lightweight          =12        
	'''Constant value is 12.'''
	Concrete_Plane                =10        
	'''Constant value is 10.'''
	Concrete_Reinforced           =11        
	'''Constant value is 11.'''
	Copper                        =13        
	'''Constant value is 13.'''
	Glass                         =14        
	'''Constant value is 14.'''
	Magnesium_alloy               =16        
	'''Constant value is 16.'''
	Magnesium_pure                =15        
	'''Constant value is 15.'''
	Manganese_bronze              =8         
	'''Constant value is 8.'''
	Monel                         =17        
	'''Constant value is 17.'''
	Naval_Brass                   =5         
	'''Constant value is 5.'''
	Nickel                        =18        
	'''Constant value is 18.'''
	Nylon                         =19        
	'''Constant value is 19.'''
	Red_Brass                     =4         
	'''Constant value is 4.'''
	Rubber                        =20        
	'''Constant value is 20.'''
	Steel                         =21        
	'''Constant value is 21.'''
	Stone_Granite                 =22        
	'''Constant value is 22.'''
	Stone_Limestone               =23        
	'''Constant value is 23.'''
	Stone_Marble                  =24        
	'''Constant value is 24.'''
	Titanium                      =25        
	'''Constant value is 25.'''
	Tungsten                      =26        
	'''Constant value is 26.'''
	Wood_Ash                      =27        
	'''Constant value is 27.'''
	Wood_Douglas_fir              =28        
	'''Constant value is 28.'''
	Wood_Oak                      =29        
	'''Constant value is 29.'''
	Wood_Southern_pine            =30        
	'''Constant value is 30.'''
	Wrought_iron                  =31        
	'''Constant value is 31.'''
class MaterialInput(IntEnum):
	'''
	MaterialInput enumeration.
	'''
	DefaultMaterial               =1         
	'''Constant value is 1.'''
	Density                       =3         
	'''Constant value is 3.'''
	UserInput                     =0         
	'''Constant value is 0.'''
	UserMaterial                  =2         
	'''Constant value is 2.'''
class MenuControlType(IntEnum):
	'''
	MenuControlType enumeration.
	'''
	MenuControlType_Button        =1         
	'''Constant value is 1.'''
	MenuControlType_ButtonPopup   =3         
	'''Constant value is 3.'''
	MenuControlType_CheckBox      =9         
	'''Constant value is 9.'''
	MenuControlType_ComboBox      =5         
	'''Constant value is 5.'''
	MenuControlType_Custom        =7         
	'''Constant value is 7.'''
	MenuControlType_Edit          =6         
	'''Constant value is 6.'''
	MenuControlType_Error         =0         
	'''Constant value is 0.'''
	MenuControlType_Gallery       =10        
	'''Constant value is 10.'''
	MenuControlType_Label         =8         
	'''Constant value is 8.'''
	MenuControlType_Popup         =2         
	'''Constant value is 2.'''
	MenuControlType_RadioButton   =11        
	'''Constant value is 11.'''
	MenuControlType_SplitButtonPopup=4         
	'''Constant value is 4.'''
class MirrorType(IntEnum):
	'''
	MirrorType enumeration.
	'''
	MirrorType_Copy               =0         
	'''Constant value is 0.'''
	MirrorType_Move               =1         
	'''Constant value is 1.'''
class ModelSettingSimulationSolverType(IntEnum):
	'''
	ModelSettingSimulationSolverType enumeration.
	'''
	SimulationSolverType_DLL      =0         
	'''Constant value is 0.'''
	SimulationSolverType_EXE      =1         
	'''Constant value is 1.'''
class MotionCondition(IntEnum):
	'''
	MotionCondition enumeration.
	'''
	MotionCondition_Acceleration  =2         
	'''Constant value is 2.'''
	MotionCondition_Displacement  =0         
	'''Constant value is 0.'''
	MotionCondition_Velocity      =1         
	'''Constant value is 1.'''
class MotionConditionPointOnCurve(IntEnum):
	'''
	MotionConditionPointOnCurve enumeration.
	'''
	MotionConditionPointOnCurve_Displacement=0         
	'''Constant value is 0.'''
	MotionConditionPointOnCurve_Velocity=1         
	'''Constant value is 1.'''
class MotionType(IntEnum):
	'''
	MotionType enumeration.
	'''
	Standard                      =0         
	'''Constant value is 0.'''
	UserSubroutine                =1         
	'''Constant value is 1.'''
class NameOnOffType(IntEnum):
	'''
	NameOnOffType enumeration.
	'''
	NameOnOffType_Always          =0         
	'''Constant value is 0.'''
	NameOnOffType_Selected        =1         
	'''Constant value is 1.'''
class NaturalFrequencyType(IntEnum):
	'''
	NaturalFrequencyType enumeration.
	'''
	NaturalFrequencyType_Damped   =1         
	'''Constant value is 1.'''
	NaturalFrequencyType_Undamped =0         
	'''Constant value is 0.'''
class NormalDirection(IntEnum):
	'''
	NormalDirection enumeration.
	'''
	Direction_Down                =1         
	'''Constant value is 1.'''
	Direction_Up                  =0         
	'''Constant value is 0.'''
class OrientationType(IntEnum):
	'''
	OrientationType enumeration.
	'''
	CartesianCoordinate           =1         
	'''Constant value is 1.'''
	EulerAngles                   =0         
	'''Constant value is 0.'''
class OverlapMode(IntEnum):
	'''
	OverlapMode enumeration.
	'''
	Constant                      =0         
	'''Constant value is 0.'''
	Decrease                      =2         
	'''Constant value is 2.'''
	Increase                      =1         
	'''Constant value is 1.'''
class PSDType(IntEnum):
	'''
	PSDType enumeration.
	'''
	PSDType_Density               =1         
	'''Constant value is 1.'''
	PSDType_Spectrum              =0         
	'''Constant value is 0.'''
class PasteType(IntEnum):
	'''
	PasteType enumeration.
	'''
	AddPrefixIfSameNameExist      =2         
	'''Constant value is 2.'''
	NoPrefix                      =0         
	'''Constant value is 0.'''
	WithPrefix                    =1         
	'''Constant value is 1.'''
class PathType(IntEnum):
	'''
	PathType enumeration.
	'''
	RecentRPLTFile                =3         
	'''Constant value is 3.'''
	RecentResultFolder            =2         
	'''Constant value is 2.'''
	WorkingDocument               =0         
	'''Constant value is 0.'''
	WorkingFolder                 =1         
	'''Constant value is 1.'''
class PatternRotationTranslationType(IntEnum):
	'''
	PatternRotationTranslationType enumeration.
	'''
	PatternRotationTranslationType_All=1         
	'''Constant value is 1.'''
	PatternRotationTranslationType_Each=0         
	'''Constant value is 0.'''
class PerformanceIndexResultType(IntEnum):
	'''
	PerformanceIndexResultType enumeration.
	'''
	PerformanceIndexResultType_Expression=0         
	'''Constant value is 0.'''
	PerformanceIndexResultType_ProcessNet=2         
	'''Constant value is 2.'''
	PerformanceIndexResultType_Scope=1         
	'''Constant value is 1.'''
class PerformanceIndexType(IntEnum):
	'''
	PerformanceIndexType enumeration.
	'''
	AverageValue                  =1         
	'''Constant value is 1.'''
	EndValue                      =0         
	'''Constant value is 0.'''
	MaxABSValue                   =5         
	'''Constant value is 5.'''
	MaxValue                      =3         
	'''Constant value is 3.'''
	MinABSValue                   =4         
	'''Constant value is 4.'''
	MinValue                      =2         
	'''Constant value is 2.'''
	RMSValue                      =6         
	'''Constant value is 6.'''
class PlaneType(IntEnum):
	'''
	PlaneType enumeration.
	'''
	XYPlane                       =0         
	'''Constant value is 0.'''
	YZPlane                       =1         
	'''Constant value is 1.'''
	ZXPlane                       =2         
	'''Constant value is 2.'''
class PlotDocType(IntEnum):
	'''
	PlotDocType enumeration.
	'''
	Empty                         =1         
	'''Constant value is 1.'''
	WithRPLT                      =0         
	'''Constant value is 0.'''
class PlotWindowPosition(IntEnum):
	'''
	PlotWindowPosition enumeration.
	'''
	LeftLower                     =1         
	'''Constant value is 1.'''
	LeftUpper                     =0         
	'''Constant value is 0.'''
	RightLower                    =3         
	'''Constant value is 3.'''
	RightUpper                    =2         
	'''Constant value is 2.'''
class PrimitiveType(IntEnum):
	'''
	PrimitiveType enumeration.
	'''
	Geo_Surface                   =0         
	'''Constant value is 0.'''
	Primitive_Cylinder            =2         
	'''Constant value is 2.'''
	Primitive_Sphere              =1         
	'''Constant value is 1.'''
class ProcessNetType(IntEnum):
	'''
	ProcessNetType enumeration.
	'''
	ProcessNetType_General        =1         
	'''Constant value is 1.'''
	ProcessNetType_Python         =2         
	'''Constant value is 2.'''
	ProcessNetType_VSTA           =0         
	'''Constant value is 0.'''
class RedundantCheckType(IntEnum):
	'''
	RedundantCheckType enumeration.
	'''
	RedundantCheckType_Once       =0         
	'''Constant value is 0.'''
	RedundantCheckType_Sync       =1         
	'''Constant value is 1.'''
class RenderMode(IntEnum):
	'''
	RenderMode enumeration.
	'''
	EachRender                    =5         
	'''Constant value is 5.'''
	HiddenLineGray                =3         
	'''Constant value is 3.'''
	HiddenLineRemove              =2         
	'''Constant value is 2.'''
	Shade                         =4         
	'''Constant value is 4.'''
	ShadeWithWire                 =6         
	'''Constant value is 6.'''
	WireFrame                     =0         
	'''Constant value is 0.'''
	WireFrameWithSilhouette       =1         
	'''Constant value is 1.'''
class RequestStandardType(IntEnum):
	'''
	RequestStandardType enumeration.
	'''
	Acceleration                  =2         
	'''Constant value is 2.'''
	Displacement                  =0         
	'''Constant value is 0.'''
	Force                         =3         
	'''Constant value is 3.'''
	Velocity                      =1         
	'''Constant value is 1.'''
class ResultExportType(IntEnum):
	'''
	ResultExportType enumeration.
	'''
	ResultExportType_All          =0         
	'''Constant value is 0.'''
	ResultExportType_Failure      =2         
	'''Constant value is 2.'''
	ResultExportType_Success      =1         
	'''Constant value is 1.'''
class RotationalDirectionType(IntEnum):
	'''
	RotationalDirectionType enumeration.
	'''
	CCW                           =0         
	'''Constant value is 0.'''
	CW                            =1         
	'''Constant value is 1.'''
class ScenarioType(IntEnum):
	'''
	ScenarioType enumeration.
	'''
	Scenario_ACTIVATE             =11        
	'''Constant value is 11.'''
	Scenario_DEACTIVATE           =12        
	'''Constant value is 12.'''
	Scenario_EIGPARA              =10        
	'''Constant value is 10.'''
	Scenario_EQU                  =9         
	'''Constant value is 9.'''
	Scenario_FRAPARA              =13        
	'''Constant value is 13.'''
	Scenario_INT_ADV              =14        
	'''Constant value is 14.'''
	Scenario_INT_DDA              =5         
	'''Constant value is 5.'''
	Scenario_INT_HYB              =7         
	'''Constant value is 7.'''
	Scenario_INT_IMG              =6         
	'''Constant value is 6.'''
	Scenario_INT_TRK              =8         
	'''Constant value is 8.'''
	Scenario_NONE                 =0         
	'''Constant value is 0.'''
	Scenario_SIM_DYN              =1         
	'''Constant value is 1.'''
	Scenario_SIM_EIG              =3         
	'''Constant value is 3.'''
	Scenario_SIM_FRA              =4         
	'''Constant value is 4.'''
	Scenario_SIM_STA              =2         
	'''Constant value is 2.'''
class ScopeEntityType(IntEnum):
	'''
	ScopeEntityType enumeration.
	'''
	ACC_RM                        =22        
	'''Constant value is 22.'''
	ACC_RX                        =23        
	'''Constant value is 23.'''
	ACC_RY                        =24        
	'''Constant value is 24.'''
	ACC_RZ                        =25        
	'''Constant value is 25.'''
	ACC_TM                        =18        
	'''Constant value is 18.'''
	ACC_TX                        =19        
	'''Constant value is 19.'''
	ACC_TY                        =20        
	'''Constant value is 20.'''
	ACC_TZ                        =21        
	'''Constant value is 21.'''
	POS_PHI                       =6         
	'''Constant value is 6.'''
	POS_PITCH                     =8         
	'''Constant value is 8.'''
	POS_PSI                       =4         
	'''Constant value is 4.'''
	POS_ROLL                      =9         
	'''Constant value is 9.'''
	POS_THETA                     =5         
	'''Constant value is 5.'''
	POS_TM                        =0         
	'''Constant value is 0.'''
	POS_TX                        =1         
	'''Constant value is 1.'''
	POS_TY                        =2         
	'''Constant value is 2.'''
	POS_TZ                        =3         
	'''Constant value is 3.'''
	POS_YAW                       =7         
	'''Constant value is 7.'''
	VEL_RM                        =14        
	'''Constant value is 14.'''
	VEL_RX                        =15        
	'''Constant value is 15.'''
	VEL_RY                        =16        
	'''Constant value is 16.'''
	VEL_RZ                        =17        
	'''Constant value is 17.'''
	VEL_TM                        =10        
	'''Constant value is 10.'''
	VEL_TX                        =11        
	'''Constant value is 11.'''
	VEL_TY                        =12        
	'''Constant value is 12.'''
	VEL_TZ                        =13        
	'''Constant value is 13.'''
class ScopeGapInterferenceType(IntEnum):
	'''
	ScopeGapInterferenceType enumeration.
	'''
	GAP                           =0         
	'''Constant value is 0.'''
	INTERFERENCE                  =1         
	'''Constant value is 1.'''
class ScopePointToPointComponentType(IntEnum):
	'''
	ScopePointToPointComponentType enumeration.
	'''
	Magnitude                     =0         
	'''Constant value is 0.'''
	ScopePointToPointComponentType_X=1         
	'''Constant value is 1.'''
	ScopePointToPointComponentType_Y=2         
	'''Constant value is 2.'''
	ScopePointToPointComponentType_Z=3         
	'''Constant value is 3.'''
class ScopePointToPointType(IntEnum):
	'''
	ScopePointToPointType enumeration.
	'''
	RotationalAcceleration        =5         
	'''Constant value is 5.'''
	RotationalDisplacement        =3         
	'''Constant value is 3.'''
	RotationalVelocity            =4         
	'''Constant value is 4.'''
	TranslationalAcceleration     =2         
	'''Constant value is 2.'''
	TranslationalDisplacement     =0         
	'''Constant value is 0.'''
	TranslationalVelocity         =1         
	'''Constant value is 1.'''
class SelectType(IntEnum):
	'''
	SelectType enumeration.
	'''
	Add                           =1         
	'''Constant value is 1.'''
	Only                          =0         
	'''Constant value is 0.'''
	Remove                        =2         
	'''Constant value is 2.'''
class SensorEventType(IntEnum):
	'''
	SensorEventType enumeration.
	'''
	Head                          =0         
	'''Constant value is 0.'''
	OnOff                         =2         
	'''Constant value is 2.'''
	Tail                          =1         
	'''Constant value is 1.'''
class ShowWindowOption(IntEnum):
	'''
	ShowWindowOption enumeration.
	'''
	ShowAll                       =0         
	'''Constant value is 0.'''
	ShowLeft                      =3         
	'''Constant value is 3.'''
	ShowLeftLower                 =6         
	'''Constant value is 6.'''
	ShowLeftUpper                 =5         
	'''Constant value is 5.'''
	ShowLower                     =2         
	'''Constant value is 2.'''
	ShowRight                     =4         
	'''Constant value is 4.'''
	ShowRightLower                =8         
	'''Constant value is 8.'''
	ShowRightUpper                =7         
	'''Constant value is 7.'''
	ShowUpper                     =1         
	'''Constant value is 1.'''
class SimpleMathTranslateOption(IntEnum):
	'''
	SimpleMathTranslateOption enumeration.
	'''
	Align                         =2         
	'''Constant value is 2.'''
	MoveTo                        =1         
	'''Constant value is 1.'''
	Offset                        =0         
	'''Constant value is 0.'''
class SolverPriority(IntEnum):
	'''
	SolverPriority enumeration.
	'''
	AboveNormal                   =0         
	'''Constant value is 0.'''
	BelowNormal                   =2         
	'''Constant value is 2.'''
	Normal                        =1         
	'''Constant value is 1.'''
class SplineInterpolationType(IntEnum):
	'''
	SplineInterpolationType enumeration.
	'''
	SplineInterpolationType_Akima =0         
	'''Constant value is 0.'''
	SplineInterpolationType_Linear=1         
	'''Constant value is 1.'''
class SplineType(IntEnum):
	'''
	SplineType enumeration.
	'''
	File                          =1         
	'''Constant value is 1.'''
	Value                         =0         
	'''Constant value is 0.'''
class StaticSolverType(IntEnum):
	'''
	StaticSolverType enumeration.
	'''
	AugmentedN_R                  =2         
	'''Constant value is 2.'''
	N_R                           =0         
	'''Constant value is 0.'''
	RobustN_R                     =1         
	'''Constant value is 1.'''
class StrainStressDataPrecision(IntEnum):
	'''
	StrainStressDataPrecision enumeration.
	'''
	DataPrecision_Double          =1         
	'''Constant value is 1.'''
	DataPrecision_Float           =0         
	'''Constant value is 0.'''
class StressRecoveryType(IntEnum):
	'''
	StressRecoveryType enumeration.
	'''
	RecoveryType_Center           =0         
	'''Constant value is 0.'''
	RecoveryType_Extrapolation    =1         
	'''Constant value is 1.'''
class SubSystemType(IntEnum):
	'''
	SubSystemType enumeration.
	'''
	BNP                           =5         
	'''Constant value is 5.'''
	Chain                         =7         
	'''Constant value is 7.'''
	General                       =0         
	'''Constant value is 0.'''
	MTT2D                         =1         
	'''Constant value is 1.'''
	MTT3D                         =2         
	'''Constant value is 2.'''
	R2R2D                         =6         
	'''Constant value is 6.'''
	TrackHM                       =4         
	'''Constant value is 4.'''
	TrackLM                       =3         
	'''Constant value is 3.'''
class SweepAlignmentType(IntEnum):
	'''
	SweepAlignmentType enumeration.
	'''
	AlignNormal                   =0         
	'''Constant value is 0.'''
	AlignParallel                 =1         
	'''Constant value is 1.'''
class SweepPathType(IntEnum):
	'''
	SweepPathType enumeration.
	'''
	TranslationVector             =0         
	'''Constant value is 0.'''
	WireGeometry                  =1         
	'''Constant value is 1.'''
class TachometerType(IntEnum):
	'''
	TachometerType enumeration.
	'''
	Tachometer_RPM                =1         
	'''Constant value is 1.'''
	Tachometer_Rad_Per_Sec        =2         
	'''Constant value is 2.'''
	Tachometer_Tacho              =0         
	'''Constant value is 0.'''
class TargetSubSystemType(IntEnum):
	'''
	TargetSubSystemType enumeration.
	'''
	InsertCurrentSubSystem        =0         
	'''Constant value is 0.'''
	MakeNewSubSystem              =1         
	'''Constant value is 1.'''
class TensionSensorType(IntEnum):
	'''
	TensionSensorType enumeration.
	'''
	TensionSensorType_MinusX      =1         
	'''Constant value is 1.'''
	TensionSensorType_PlusX       =0         
	'''Constant value is 0.'''
class TireContactMethod(IntEnum):
	'''
	TireContactMethod enumeration.
	'''
	Moving_FlatSurface            =2         
	'''Constant value is 2.'''
	Smooth_CircularCrossSection   =1         
	'''Constant value is 1.'''
	Smooth_SingleContactPoint     =0         
	'''Constant value is 0.'''
	ThreeDRoad                    =4         
	'''Constant value is 4.'''
	TwoDRoad                      =3         
	'''Constant value is 3.'''
class TireDynamics(IntEnum):
	'''
	TireDynamics enumeration.
	'''
	RigidRing                     =3         
	'''Constant value is 3.'''
	RigidRing_Initailstatics      =4         
	'''Constant value is 4.'''
	Steady_State                  =0         
	'''Constant value is 0.'''
	Transient_Linear              =1         
	'''Constant value is 1.'''
	Transient_Nonlinear           =2         
	'''Constant value is 2.'''
class TireModel(IntEnum):
	'''
	TireModel enumeration.
	'''
	Fiala                         =0         
	'''Constant value is 0.'''
	UA                            =1         
	'''Constant value is 1.'''
	User                          =2         
	'''Constant value is 2.'''
class TireSideType(IntEnum):
	'''
	TireSideType enumeration.
	'''
	LeftSide                      =0         
	'''Constant value is 0.'''
	Mirrored                      =3         
	'''Constant value is 3.'''
	RightSide                     =1         
	'''Constant value is 1.'''
	Symmetric                     =2         
	'''Constant value is 2.'''
class TireSlipForce(IntEnum):
	'''
	TireSlipForce enumeration.
	'''
	Combined                      =4         
	'''Constant value is 4.'''
	Combined_Trunslip             =5         
	'''Constant value is 5.'''
	LateralOnly                   =2         
	'''Constant value is 2.'''
	LongitudinalOnly              =1         
	'''Constant value is 1.'''
	NormalOnly                    =0         
	'''Constant value is 0.'''
	Uncombined                    =3         
	'''Constant value is 3.'''
class TireSoftSoilModel(IntEnum):
	'''
	TireSoftSoilModel enumeration.
	'''
	ElasticWheel                  =1         
	'''Constant value is 1.'''
	ElasticWheel_SoilDynamics     =4         
	'''Constant value is 4.'''
	ParabolicApproach             =2         
	'''Constant value is 2.'''
	RigidWheel                    =0         
	'''Constant value is 0.'''
	RigidWheel_SoilDynamics       =3         
	'''Constant value is 3.'''
class ToolbarPosition(IntEnum):
	'''
	ToolbarPosition enumeration.
	'''
	ToolbarBottom                 =1         
	'''Constant value is 1.'''
	ToolbarFloating               =4         
	'''Constant value is 4.'''
	ToolbarLeft                   =2         
	'''Constant value is 2.'''
	ToolbarListBox                =6         
	'''Constant value is 6.'''
	ToolbarNone                   =7         
	'''Constant value is 7.'''
	ToolbarPopup                  =5         
	'''Constant value is 5.'''
	ToolbarRight                  =3         
	'''Constant value is 3.'''
	ToolbarTop                    =0         
	'''Constant value is 0.'''
class ToolkitType(IntEnum):
	'''
	ToolkitType enumeration.
	'''
	AutoDesign                    =8         
	'''Constant value is 8.'''
	Control                       =3         
	'''Constant value is 3.'''
	Durability                    =4         
	'''Constant value is 4.'''
	ExternalSPI                   =9         
	'''Constant value is 9.'''
	FFlex                         =0         
	'''Constant value is 0.'''
	FlexInterface                 =5         
	'''Constant value is 5.'''
	MMS                           =7         
	'''Constant value is 7.'''
	ParticleInterface             =6         
	'''Constant value is 6.'''
	RFlex                         =1         
	'''Constant value is 1.'''
	Tire                          =2         
	'''Constant value is 2.'''
class UnitAngle(IntEnum):
	'''
	UnitAngle enumeration.
	'''
	Degree                        =0         
	'''Constant value is 0.'''
	Radian                        =1         
	'''Constant value is 1.'''
class UnitForce(IntEnum):
	'''
	UnitForce enumeration.
	'''
	Centinewton                   =7         
	'''Constant value is 7.'''
	Dyne                          =0         
	'''Constant value is 0.'''
	KNewton                       =2         
	'''Constant value is 2.'''
	KPoundForce                   =3         
	'''Constant value is 3.'''
	KilogramForce                 =1         
	'''Constant value is 1.'''
	Micronewton                   =9         
	'''Constant value is 9.'''
	Milinewton                    =8         
	'''Constant value is 8.'''
	Nanonewton                    =10        
	'''Constant value is 10.'''
	Newton                        =4         
	'''Constant value is 4.'''
	OunceForce                    =5         
	'''Constant value is 5.'''
	PoundForce                    =6         
	'''Constant value is 6.'''
	Poundal                       =11        
	'''Constant value is 11.'''
class UnitLength(IntEnum):
	'''
	UnitLength enumeration.
	'''
	Angstrom                      =9         
	'''Constant value is 9.'''
	Centimeter                    =1         
	'''Constant value is 1.'''
	Foot                          =4         
	'''Constant value is 4.'''
	Inch                          =3         
	'''Constant value is 3.'''
	Kilometer                     =6         
	'''Constant value is 6.'''
	Meter                         =2         
	'''Constant value is 2.'''
	Microinch                     =12        
	'''Constant value is 12.'''
	Micrometer                    =5         
	'''Constant value is 5.'''
	Mil                           =11        
	'''Constant value is 11.'''
	Mile                          =7         
	'''Constant value is 7.'''
	Millimeter                    =0         
	'''Constant value is 0.'''
	Nanometer                     =8         
	'''Constant value is 8.'''
	Yard                          =10        
	'''Constant value is 10.'''
class UnitMass(IntEnum):
	'''
	UnitMass enumeration.
	'''
	Gram                          =0         
	'''Constant value is 0.'''
	KPoundMass                    =5         
	'''Constant value is 5.'''
	Kilogram                      =1         
	'''Constant value is 1.'''
	Microgram                     =8         
	'''Constant value is 8.'''
	Miligram                      =7         
	'''Constant value is 7.'''
	Nanogram                      =9         
	'''Constant value is 9.'''
	OunceMass                     =3         
	'''Constant value is 3.'''
	PoundMass                     =4         
	'''Constant value is 4.'''
	Slinch                        =11        
	'''Constant value is 11.'''
	Slug                          =2         
	'''Constant value is 2.'''
	Ton                           =6         
	'''Constant value is 6.'''
	Us_ton                        =10        
	'''Constant value is 10.'''
class UnitSystem(IntEnum):
	'''
	UnitSystem enumeration.
	'''
	CGS                           =0         
	'''Constant value is 0.'''
	FPS                           =1         
	'''Constant value is 1.'''
	IPS                           =2         
	'''Constant value is 2.'''
	MKS                           =3         
	'''Constant value is 3.'''
	MMKS                          =4         
	'''Constant value is 4.'''
class UnitTime(IntEnum):
	'''
	UnitTime enumeration.
	'''
	Day                           =6         
	'''Constant value is 6.'''
	Hour                          =0         
	'''Constant value is 0.'''
	Microsecond                   =5         
	'''Constant value is 5.'''
	Millisecond                   =1         
	'''Constant value is 1.'''
	Minute                        =2         
	'''Constant value is 2.'''
	Nanosecond                    =4         
	'''Constant value is 4.'''
	Second                        =3         
	'''Constant value is 3.'''
class VariableEquationType(IntEnum):
	'''
	VariableEquationType enumeration.
	'''
	VariableEquationType_Expression=0         
	'''Constant value is 0.'''
	VariableEquationType_UserSubroutine=1         
	'''Constant value is 1.'''
class WorkingPlaneType(IntEnum):
	'''
	WorkingPlaneType enumeration.
	'''
	Back                          =1         
	'''Constant value is 1.'''
	Bottom                        =5         
	'''Constant value is 5.'''
	Front                         =0         
	'''Constant value is 0.'''
	Left                          =2         
	'''Constant value is 2.'''
	Right                         =3         
	'''Constant value is 3.'''
	Top                           =4         
	'''Constant value is 4.'''
class WorkingPlaneType2(IntEnum):
	'''
	WorkingPlaneType2 enumeration.
	'''
	PlaneXY                       =0         
	'''Constant value is 0.'''
	PlaneXZ                       =5         
	'''Constant value is 5.'''
	PlaneYX                       =3         
	'''Constant value is 3.'''
	PlaneYZ                       =1         
	'''Constant value is 1.'''
	PlaneZX                       =2         
	'''Constant value is 2.'''
	PlaneZY                       =4         
	'''Constant value is 4.'''
class eTemplateLicenseType(IntEnum):
	'''
	eTemplateLicenseType enumeration.
	'''
	eTemplateLicenseType_Ent      =2         
	'''Constant value is 2.'''
	eTemplateLicenseType_None     =0         
	'''Constant value is 0.'''
	eTemplateLicenseType_Pro      =1         
	'''Constant value is 1.'''

from win32com.client import DispatchBaseClass
class IAddIns(DispatchBaseClass):
	'''AddIns'''
	CLSID = IID('{47E89053-59DB-4697-AAC9-49817147248B}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_eTemplate(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "eTemplate", '{D497353F-2D45-4F8E-A649-0D0FABA3849D}'))

	eTemplate = property(_get_eTemplate, None)
	'''
	eTemplate

	:type: recurdyn.ProcessNet.IeTemplate
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"eTemplate": (51, 2, (9, 0), (), "eTemplate", '{D497353F-2D45-4F8E-A649-0D0FABA3849D}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IAnimation(DispatchBaseClass):
	'''Animation'''
	CLSID = IID('{5AEA7149-EE08-4B4E-B593-5AD90B54E3E6}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def FastPlay(self):
		'''
		Animation - FastPlay
		'''
		return self._oleobj_.InvokeTypes(55, LCID, 1, (24, 0), (),)


	def Pause(self):
		'''
		Animation - Pause
		'''
		return self._oleobj_.InvokeTypes(56, LCID, 1, (24, 0), (),)


	def Play(self):
		'''
		Animation - Play
		'''
		return self._oleobj_.InvokeTypes(54, LCID, 1, (24, 0), (),)


	def ReloadLastAnimationFile(self):
		'''
		Reload the last animation file
		'''
		return self._oleobj_.InvokeTypes(60, LCID, 1, (24, 0), (),)


	def Save(self, strName):
		'''
		Animation - Save
		
		:param strName: str
		'''
		return self._oleobj_.InvokeTypes(58, LCID, 1, (24, 0), ((8, 1),),strName
			)


	def Save2(self, strName, bOverWrite):
		'''
		Animation - Save
		
		:param strName: str
		:param bOverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(59, LCID, 1, (24, 0), ((8, 1), (11, 1)),strName
			, bOverWrite)


	def Stop(self):
		'''
		Animation - Stop or Reset
		'''
		return self._oleobj_.InvokeTypes(57, LCID, 1, (24, 0), (),)


	def _get_CurrentFrame(self):
		return self._ApplyTypes_(*(51, 2, (19, 0), (), "CurrentFrame", None))
	def _get_CurrentTime(self):
		return self._ApplyTypes_(*(61, 2, (5, 0), (), "CurrentTime", None))
	def _get_NumberOfFrame(self):
		return self._ApplyTypes_(*(52, 2, (19, 0), (), "NumberOfFrame", None))
	def _get_SaveOption(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "SaveOption", '{4DD0F877-22B8-433A-AE68-970E0F497F95}'))

	def _set_CurrentFrame(self, value):
		if "CurrentFrame" in self.__dict__: self.__dict__["CurrentFrame"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_SaveOption(self, value):
		if "SaveOption" in self.__dict__: self.__dict__["SaveOption"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))

	CurrentFrame = property(_get_CurrentFrame, _set_CurrentFrame)
	'''
	Curent Frame

	:type: int
	'''
	CurrentTime = property(_get_CurrentTime, None)
	'''
	Curent Time

	:type: float
	'''
	NumberOfFrame = property(_get_NumberOfFrame, None)
	'''
	Number of frame

	:type: int
	'''
	SaveOption = property(_get_SaveOption, _set_SaveOption)
	'''
	Animation Save Option

	:type: recurdyn.ProcessNet.IAnimationSaveOption
	'''

	_prop_map_set_function_ = {
		"_set_CurrentFrame": _set_CurrentFrame,
		"_set_SaveOption": _set_SaveOption,
	}
	_prop_map_get_ = {
		"CurrentFrame": (51, 2, (19, 0), (), "CurrentFrame", None),
		"CurrentTime": (61, 2, (5, 0), (), "CurrentTime", None),
		"NumberOfFrame": (52, 2, (19, 0), (), "NumberOfFrame", None),
		"SaveOption": (53, 2, (9, 0), (), "SaveOption", '{4DD0F877-22B8-433A-AE68-970E0F497F95}'),
	}
	_prop_map_put_ = {
		"CurrentFrame": ((51, LCID, 4, 0),()),
		"SaveOption": ((53, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IAnimationControl(DispatchBaseClass):
	'''Animation Control'''
	CLSID = IID('{918A0CB3-A5E0-4A9D-906E-D4DF3C194530}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_CurrentFrequency(self):
		return self._ApplyTypes_(*(60, 2, (5, 0), (), "CurrentFrequency", None))
	def _get_Delay(self):
		return self._ApplyTypes_(*(57, 2, (19, 0), (), "Delay", None))
	def _get_DisplayMarkers(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "DisplayMarkers", None))
	def _get_EigenvalueFRAAnimationType(self):
		return self._ApplyTypes_(*(62, 2, (3, 0), (), "EigenvalueFRAAnimationType", '{9BAFCEBD-252F-419D-8F50-189769A741A2}'))
	def _get_EndFrame(self):
		return self._ApplyTypes_(*(53, 2, (19, 0), (), "EndFrame", None))
	def _get_FrameStep(self):
		return self._ApplyTypes_(*(54, 2, (19, 0), (), "FrameStep", None))
	def _get_FrequencyList(self):
		return self._ApplyTypes_(*(61, 2, (8197, 0), (), "FrequencyList", None))
	def _get_MaxModeShape(self):
		return self._ApplyTypes_(*(59, 2, (19, 0), (), "MaxModeShape", None))
	def _get_ModeShape(self):
		return self._ApplyTypes_(*(58, 2, (19, 0), (), "ModeShape", None))
	def _get_Repeat(self):
		return self._ApplyTypes_(*(55, 2, (19, 0), (), "Repeat", None))
	def _get_StartFrame(self):
		return self._ApplyTypes_(*(52, 2, (19, 0), (), "StartFrame", None))
	def _get_UseUserDefinedAnimation(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "UseUserDefinedAnimation", None))

	def _set_CurrentFrequency(self, value):
		if "CurrentFrequency" in self.__dict__: self.__dict__["CurrentFrequency"] = value; return
		self._oleobj_.Invoke(*((60, LCID, 4, 0) + (value,) + ()))
	def _set_Delay(self, value):
		if "Delay" in self.__dict__: self.__dict__["Delay"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_DisplayMarkers(self, value):
		if "DisplayMarkers" in self.__dict__: self.__dict__["DisplayMarkers"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_EigenvalueFRAAnimationType(self, value):
		if "EigenvalueFRAAnimationType" in self.__dict__: self.__dict__["EigenvalueFRAAnimationType"] = value; return
		self._oleobj_.Invoke(*((62, LCID, 4, 0) + (value,) + ()))
	def _set_EndFrame(self, value):
		if "EndFrame" in self.__dict__: self.__dict__["EndFrame"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_FrameStep(self, value):
		if "FrameStep" in self.__dict__: self.__dict__["FrameStep"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_ModeShape(self, value):
		if "ModeShape" in self.__dict__: self.__dict__["ModeShape"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))
	def _set_Repeat(self, value):
		if "Repeat" in self.__dict__: self.__dict__["Repeat"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_StartFrame(self, value):
		if "StartFrame" in self.__dict__: self.__dict__["StartFrame"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_UseUserDefinedAnimation(self, value):
		if "UseUserDefinedAnimation" in self.__dict__: self.__dict__["UseUserDefinedAnimation"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))

	CurrentFrequency = property(_get_CurrentFrequency, _set_CurrentFrequency)
	'''
	Frequency step

	:type: float
	'''
	Delay = property(_get_Delay, _set_Delay)
	'''
	Animation Delay

	:type: int
	'''
	DisplayMarkers = property(_get_DisplayMarkers, _set_DisplayMarkers)
	'''
	Display Markers during Animation

	:type: bool
	'''
	EigenvalueFRAAnimationType = property(_get_EigenvalueFRAAnimationType, _set_EigenvalueFRAAnimationType)
	'''
	Select Eigenvalue&FRA Animation type

	:type: recurdyn.ProcessNet.EigenvalueFRAAnimationType
	'''
	EndFrame = property(_get_EndFrame, _set_EndFrame)
	'''
	End Frame

	:type: int
	'''
	FrameStep = property(_get_FrameStep, _set_FrameStep)
	'''
	Frame Step

	:type: int
	'''
	FrequencyList = property(_get_FrequencyList, None)
	'''
	Frequency

	:type: list[float]
	'''
	MaxModeShape = property(_get_MaxModeShape, None)
	'''
	Max mode shape

	:type: int
	'''
	ModeShape = property(_get_ModeShape, _set_ModeShape)
	'''
	Mode shape

	:type: int
	'''
	Repeat = property(_get_Repeat, _set_Repeat)
	'''
	Repeat

	:type: int
	'''
	StartFrame = property(_get_StartFrame, _set_StartFrame)
	'''
	Start Frame

	:type: int
	'''
	UseUserDefinedAnimation = property(_get_UseUserDefinedAnimation, _set_UseUserDefinedAnimation)
	'''
	Use User Defined Animation

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_CurrentFrequency": _set_CurrentFrequency,
		"_set_Delay": _set_Delay,
		"_set_DisplayMarkers": _set_DisplayMarkers,
		"_set_EigenvalueFRAAnimationType": _set_EigenvalueFRAAnimationType,
		"_set_EndFrame": _set_EndFrame,
		"_set_FrameStep": _set_FrameStep,
		"_set_ModeShape": _set_ModeShape,
		"_set_Repeat": _set_Repeat,
		"_set_StartFrame": _set_StartFrame,
		"_set_UseUserDefinedAnimation": _set_UseUserDefinedAnimation,
	}
	_prop_map_get_ = {
		"CurrentFrequency": (60, 2, (5, 0), (), "CurrentFrequency", None),
		"Delay": (57, 2, (19, 0), (), "Delay", None),
		"DisplayMarkers": (56, 2, (11, 0), (), "DisplayMarkers", None),
		"EigenvalueFRAAnimationType": (62, 2, (3, 0), (), "EigenvalueFRAAnimationType", '{9BAFCEBD-252F-419D-8F50-189769A741A2}'),
		"EndFrame": (53, 2, (19, 0), (), "EndFrame", None),
		"FrameStep": (54, 2, (19, 0), (), "FrameStep", None),
		"FrequencyList": (61, 2, (8197, 0), (), "FrequencyList", None),
		"MaxModeShape": (59, 2, (19, 0), (), "MaxModeShape", None),
		"ModeShape": (58, 2, (19, 0), (), "ModeShape", None),
		"Repeat": (55, 2, (19, 0), (), "Repeat", None),
		"StartFrame": (52, 2, (19, 0), (), "StartFrame", None),
		"UseUserDefinedAnimation": (51, 2, (11, 0), (), "UseUserDefinedAnimation", None),
	}
	_prop_map_put_ = {
		"CurrentFrequency": ((60, LCID, 4, 0),()),
		"Delay": ((57, LCID, 4, 0),()),
		"DisplayMarkers": ((56, LCID, 4, 0),()),
		"EigenvalueFRAAnimationType": ((62, LCID, 4, 0),()),
		"EndFrame": ((53, LCID, 4, 0),()),
		"FrameStep": ((54, LCID, 4, 0),()),
		"ModeShape": ((58, LCID, 4, 0),()),
		"Repeat": ((55, LCID, 4, 0),()),
		"StartFrame": ((52, LCID, 4, 0),()),
		"UseUserDefinedAnimation": ((51, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IAnimationDataScaling(DispatchBaseClass):
	'''Rigid Animation Scaling'''
	CLSID = IID('{7DD7CE3F-EAC8-4324-9107-C4EDFF055B1C}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetAnimationScalingRotationalFactor(self):
		'''
		Get animation scaling rotational factor
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(55, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetAnimationScalingRotationalFactor', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def GetAnimationScalingTranslationalFactor(self):
		'''
		Get animation scaling translational factor
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(53, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetAnimationScalingTranslationalFactor', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def SetAnimationScalingRotationalFactor(self, x, y, z):
		'''
		Set animation scaling rotational factor
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(54, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),x
			, y, z)


	def SetAnimationScalingTranslationalFactor(self, x, y, z):
		'''
		Set animation scaling translational factor
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(52, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),x
			, y, z)


	def _get_AnimationScalingRefMarker(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "AnimationScalingRefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_UseAnimationScaling(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "UseAnimationScaling", None))

	def _set_AnimationScalingRefMarker(self, value):
		if "AnimationScalingRefMarker" in self.__dict__: self.__dict__["AnimationScalingRefMarker"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UseAnimationScaling(self, value):
		if "UseAnimationScaling" in self.__dict__: self.__dict__["UseAnimationScaling"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))

	AnimationScalingRefMarker = property(_get_AnimationScalingRefMarker, _set_AnimationScalingRefMarker)
	'''
	Animation scaling reference marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	UseAnimationScaling = property(_get_UseAnimationScaling, _set_UseAnimationScaling)
	'''
	Use animation scaling

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_AnimationScalingRefMarker": _set_AnimationScalingRefMarker,
		"_set_UseAnimationScaling": _set_UseAnimationScaling,
	}
	_prop_map_get_ = {
		"AnimationScalingRefMarker": (101, 2, (9, 0), (), "AnimationScalingRefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"UseAnimationScaling": (51, 2, (11, 0), (), "UseAnimationScaling", None),
	}
	_prop_map_put_ = {
		"AnimationScalingRefMarker": ((101, LCID, 4, 0),()),
		"UseAnimationScaling": ((51, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IAnimationDataScalingBase(DispatchBaseClass):
	'''Animation Scaling Base'''
	CLSID = IID('{E1DCC3EC-B388-4C1D-855E-7286FDDB492D}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetAnimationScalingRotationalFactor(self):
		'''
		Get animation scaling rotational factor
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(55, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetAnimationScalingRotationalFactor', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def GetAnimationScalingTranslationalFactor(self):
		'''
		Get animation scaling translational factor
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(53, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetAnimationScalingTranslationalFactor', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def SetAnimationScalingRotationalFactor(self, x, y, z):
		'''
		Set animation scaling rotational factor
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(54, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),x
			, y, z)


	def SetAnimationScalingTranslationalFactor(self, x, y, z):
		'''
		Set animation scaling translational factor
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(52, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),x
			, y, z)


	def _get_UseAnimationScaling(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "UseAnimationScaling", None))

	def _set_UseAnimationScaling(self, value):
		if "UseAnimationScaling" in self.__dict__: self.__dict__["UseAnimationScaling"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))

	UseAnimationScaling = property(_get_UseAnimationScaling, _set_UseAnimationScaling)
	'''
	Use animation scaling

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UseAnimationScaling": _set_UseAnimationScaling,
	}
	_prop_map_get_ = {
		"UseAnimationScaling": (51, 2, (11, 0), (), "UseAnimationScaling", None),
	}
	_prop_map_put_ = {
		"UseAnimationScaling": ((51, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IAnimationSaveOption(DispatchBaseClass):
	'''Animation Save Option'''
	CLSID = IID('{4DD0F877-22B8-433A-AE68-970E0F497F95}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Codec(self):
		return self._ApplyTypes_(*(60, 2, (8, 0), (), "Codec", None))
	def _get_CompressionQuality(self):
		return self._ApplyTypes_(*(61, 2, (19, 0), (), "CompressionQuality", None))
	def _get_CompressionRatio(self):
		return self._ApplyTypes_(*(58, 2, (19, 0), (), "CompressionRatio", None))
	def _get_ConvertToAVIFileWithMSMPEG4(self):
		return self._ApplyTypes_(*(63, 2, (11, 0), (), "ConvertToAVIFileWithMSMPEG4", None))
	def _get_FramePerSecond(self):
		return self._ApplyTypes_(*(55, 2, (19, 0), (), "FramePerSecond", None))
	def _get_InstalledCodecList(self):
		return self._ApplyTypes_(*(59, 2, (8200, 0), (), "InstalledCodecList", None))
	def _get_LevelOfVideoQuality(self):
		return self._ApplyTypes_(*(62, 2, (19, 0), (), "LevelOfVideoQuality", None))
	def _get_ResolutionX(self):
		return self._ApplyTypes_(*(53, 2, (19, 0), (), "ResolutionX", None))
	def _get_ResolutionY(self):
		return self._ApplyTypes_(*(54, 2, (19, 0), (), "ResolutionY", None))
	def _get_ShowGravity(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "ShowGravity", None))
	def _get_ShowTime(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "ShowTime", None))
	def _get_UseOffScreenRendering(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseOffScreenRendering", None))
	def _get_UseReduceFileSize(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseReduceFileSize", None))

	def _set_Codec(self, value):
		if "Codec" in self.__dict__: self.__dict__["Codec"] = value; return
		self._oleobj_.Invoke(*((60, LCID, 4, 0) + (value,) + ()))
	def _set_CompressionQuality(self, value):
		if "CompressionQuality" in self.__dict__: self.__dict__["CompressionQuality"] = value; return
		self._oleobj_.Invoke(*((61, LCID, 4, 0) + (value,) + ()))
	def _set_CompressionRatio(self, value):
		if "CompressionRatio" in self.__dict__: self.__dict__["CompressionRatio"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))
	def _set_ConvertToAVIFileWithMSMPEG4(self, value):
		if "ConvertToAVIFileWithMSMPEG4" in self.__dict__: self.__dict__["ConvertToAVIFileWithMSMPEG4"] = value; return
		self._oleobj_.Invoke(*((63, LCID, 4, 0) + (value,) + ()))
	def _set_FramePerSecond(self, value):
		if "FramePerSecond" in self.__dict__: self.__dict__["FramePerSecond"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_LevelOfVideoQuality(self, value):
		if "LevelOfVideoQuality" in self.__dict__: self.__dict__["LevelOfVideoQuality"] = value; return
		self._oleobj_.Invoke(*((62, LCID, 4, 0) + (value,) + ()))
	def _set_ResolutionX(self, value):
		if "ResolutionX" in self.__dict__: self.__dict__["ResolutionX"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_ResolutionY(self, value):
		if "ResolutionY" in self.__dict__: self.__dict__["ResolutionY"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_ShowGravity(self, value):
		if "ShowGravity" in self.__dict__: self.__dict__["ShowGravity"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_ShowTime(self, value):
		if "ShowTime" in self.__dict__: self.__dict__["ShowTime"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_UseOffScreenRendering(self, value):
		if "UseOffScreenRendering" in self.__dict__: self.__dict__["UseOffScreenRendering"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_UseReduceFileSize(self, value):
		if "UseReduceFileSize" in self.__dict__: self.__dict__["UseReduceFileSize"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))

	Codec = property(_get_Codec, _set_Codec)
	'''
	Codec name

	:type: str
	'''
	CompressionQuality = property(_get_CompressionQuality, _set_CompressionQuality)
	'''
	Unsupported

	:type: int
	'''
	CompressionRatio = property(_get_CompressionRatio, _set_CompressionRatio)
	'''
	Unsupported

	:type: int
	'''
	ConvertToAVIFileWithMSMPEG4 = property(_get_ConvertToAVIFileWithMSMPEG4, _set_ConvertToAVIFileWithMSMPEG4)
	'''
	If true, convert to AVI File with MS MPEG4 V2 codec

	:type: bool
	'''
	FramePerSecond = property(_get_FramePerSecond, _set_FramePerSecond)
	'''
	Frame Per Second

	:type: int
	'''
	InstalledCodecList = property(_get_InstalledCodecList, None)
	'''
	Installed Codec List

	:type: list[str]
	'''
	LevelOfVideoQuality = property(_get_LevelOfVideoQuality, _set_LevelOfVideoQuality)
	'''
	If UseReduceFileSize is true, Compression Quality of AVI file to be converted with MS MPEG4 V2 codec

	:type: int
	'''
	ResolutionX = property(_get_ResolutionX, _set_ResolutionX)
	'''
	Resolution X

	:type: int
	'''
	ResolutionY = property(_get_ResolutionY, _set_ResolutionY)
	'''
	Resolution Y

	:type: int
	'''
	ShowGravity = property(_get_ShowGravity, _set_ShowGravity)
	'''
	Show Gravity

	:type: bool
	'''
	ShowTime = property(_get_ShowTime, _set_ShowTime)
	'''
	Show Time or Frequency

	:type: bool
	'''
	UseOffScreenRendering = property(_get_UseOffScreenRendering, _set_UseOffScreenRendering)
	'''
	Unsupported

	:type: bool
	'''
	UseReduceFileSize = property(_get_UseReduceFileSize, _set_UseReduceFileSize)
	'''
	Unsupported

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Codec": _set_Codec,
		"_set_CompressionQuality": _set_CompressionQuality,
		"_set_CompressionRatio": _set_CompressionRatio,
		"_set_ConvertToAVIFileWithMSMPEG4": _set_ConvertToAVIFileWithMSMPEG4,
		"_set_FramePerSecond": _set_FramePerSecond,
		"_set_LevelOfVideoQuality": _set_LevelOfVideoQuality,
		"_set_ResolutionX": _set_ResolutionX,
		"_set_ResolutionY": _set_ResolutionY,
		"_set_ShowGravity": _set_ShowGravity,
		"_set_ShowTime": _set_ShowTime,
		"_set_UseOffScreenRendering": _set_UseOffScreenRendering,
		"_set_UseReduceFileSize": _set_UseReduceFileSize,
	}
	_prop_map_get_ = {
		"Codec": (60, 2, (8, 0), (), "Codec", None),
		"CompressionQuality": (61, 2, (19, 0), (), "CompressionQuality", None),
		"CompressionRatio": (58, 2, (19, 0), (), "CompressionRatio", None),
		"ConvertToAVIFileWithMSMPEG4": (63, 2, (11, 0), (), "ConvertToAVIFileWithMSMPEG4", None),
		"FramePerSecond": (55, 2, (19, 0), (), "FramePerSecond", None),
		"InstalledCodecList": (59, 2, (8200, 0), (), "InstalledCodecList", None),
		"LevelOfVideoQuality": (62, 2, (19, 0), (), "LevelOfVideoQuality", None),
		"ResolutionX": (53, 2, (19, 0), (), "ResolutionX", None),
		"ResolutionY": (54, 2, (19, 0), (), "ResolutionY", None),
		"ShowGravity": (51, 2, (11, 0), (), "ShowGravity", None),
		"ShowTime": (52, 2, (11, 0), (), "ShowTime", None),
		"UseOffScreenRendering": (56, 2, (11, 0), (), "UseOffScreenRendering", None),
		"UseReduceFileSize": (57, 2, (11, 0), (), "UseReduceFileSize", None),
	}
	_prop_map_put_ = {
		"Codec": ((60, LCID, 4, 0),()),
		"CompressionQuality": ((61, LCID, 4, 0),()),
		"CompressionRatio": ((58, LCID, 4, 0),()),
		"ConvertToAVIFileWithMSMPEG4": ((63, LCID, 4, 0),()),
		"FramePerSecond": ((55, LCID, 4, 0),()),
		"LevelOfVideoQuality": ((62, LCID, 4, 0),()),
		"ResolutionX": ((53, LCID, 4, 0),()),
		"ResolutionY": ((54, LCID, 4, 0),()),
		"ShowGravity": ((51, LCID, 4, 0),()),
		"ShowTime": ((52, LCID, 4, 0),()),
		"UseOffScreenRendering": ((56, LCID, 4, 0),()),
		"UseReduceFileSize": ((57, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IApplication(DispatchBaseClass):
	'''Application'''
	CLSID = IID('{0E72DCBC-60DD-495E-B067-85BA9DDC18BB}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def ClearMessage(self):
		'''
		Clear message
		'''
		return self._oleobj_.InvokeTypes(55, LCID, 1, (24, 0), (),)


	def CloseAllDocument(self):
		'''
		Close all document
		'''
		return self._oleobj_.InvokeTypes(79, LCID, 1, (24, 0), (),)


	def CloseAllModelDocument(self):
		'''
		Close all model document
		'''
		return self._oleobj_.InvokeTypes(80, LCID, 1, (24, 0), (),)


	def CloseAllPlotDocument(self):
		'''
		Close all plot document
		'''
		return self._oleobj_.InvokeTypes(81, LCID, 1, (24, 0), (),)


	def CloseModelDocument(self, pDocument):
		'''
		Close model document
		
		:param pDocument: IModelDocument
		'''
		return self._oleobj_.InvokeTypes(59, LCID, 1, (24, 0), ((9, 1),),pDocument
			)


	def ClosePlotDocument(self, pDocument):
		'''
		Close plot document
		
		:param pDocument: IPlotDocument
		'''
		return self._oleobj_.InvokeTypes(60, LCID, 1, (24, 0), ((9, 1),),pDocument
			)


	def Exit(self):
		'''
		Exit Program
		'''
		return self._oleobj_.InvokeTypes(83, LCID, 1, (24, 0), (),)


	def GetInstallationPath(self):
		'''
		Get Installation path
		
		:rtype: str
		'''
		return self._oleobj_.InvokeTypes(77, LCID, 1, (8, 0), (),)


	def GetModelDocument(self, strModelDocument):
		'''
		Activate model document
		
		:param strModelDocument: str
		:rtype: recurdyn.ProcessNet.IModelDocument
		'''
		ret = self._oleobj_.InvokeTypes(63, LCID, 1, (9, 0), ((8, 1),),strModelDocument
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetModelDocument', '{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')
		return ret

	def GetOutputMessage(self):
		'''
		Get Output window messages
		
		:rtype: str
		'''
		return self._oleobj_.InvokeTypes(78, LCID, 1, (8, 0), (),)


	def GetPlotDocument(self, strPlotDocument):
		'''
		Activate plot document
		
		:param strPlotDocument: str
		:rtype: recurdyn.ProcessNet.IPlotDocument
		'''
		ret = self._oleobj_.InvokeTypes(64, LCID, 1, (9, 0), ((8, 1),),strPlotDocument
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetPlotDocument', '{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}')
		return ret

	def NewModelDocument(self, strModelDocument):
		'''
		New model document
		
		:param strModelDocument: str
		:rtype: recurdyn.ProcessNet.IModelDocument
		'''
		ret = self._oleobj_.InvokeTypes(56, LCID, 1, (9, 0), ((8, 1),),strModelDocument
			)
		if ret is not None:
			ret = Dispatch(ret, 'NewModelDocument', '{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')
		return ret

	def NewModelDocumentWithUnit(self, strModelDocument, Unit):
		'''
		New model document with user defined unit
		
		:param strModelDocument: str
		:param Unit: IUnit
		:rtype: recurdyn.ProcessNet.IModelDocument
		'''
		ret = self._oleobj_.InvokeTypes(57, LCID, 1, (9, 0), ((8, 1), (9, 1)),strModelDocument
			, Unit)
		if ret is not None:
			ret = Dispatch(ret, 'NewModelDocumentWithUnit', '{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')
		return ret

	def NewModelDocumentWithUnitSystem(self, strModelDocument, UnitSystem):
		'''
		New model document with user defined unit
		
		:param strModelDocument: str
		:param UnitSystem: UnitSystem
		:rtype: recurdyn.ProcessNet.IModelDocument
		'''
		ret = self._oleobj_.InvokeTypes(65, LCID, 1, (9, 0), ((8, 1), (3, 1)),strModelDocument
			, UnitSystem)
		if ret is not None:
			ret = Dispatch(ret, 'NewModelDocumentWithUnitSystem', '{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')
		return ret

	def NewPlotDocument(self, strPlotDocument):
		'''
		New plot document
		
		:param strPlotDocument: str
		:rtype: recurdyn.ProcessNet.IPlotDocument
		'''
		ret = self._oleobj_.InvokeTypes(71, LCID, 1, (9, 0), ((8, 1),),strPlotDocument
			)
		if ret is not None:
			ret = Dispatch(ret, 'NewPlotDocument', '{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}')
		return ret

	def OpenModelDocument(self, strFileName):
		'''
		Open model document from file
		
		:param strFileName: str
		:rtype: recurdyn.ProcessNet.IModelDocument
		'''
		ret = self._oleobj_.InvokeTypes(58, LCID, 1, (9, 0), ((8, 1),),strFileName
			)
		if ret is not None:
			ret = Dispatch(ret, 'OpenModelDocument', '{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')
		return ret

	def OpenPlotDocument(self, strFileName):
		'''
		Open plot document
		
		:param strFileName: str
		:rtype: recurdyn.ProcessNet.IPlotDocument
		'''
		ret = self._oleobj_.InvokeTypes(72, LCID, 1, (9, 0), ((8, 1),),strFileName
			)
		if ret is not None:
			ret = Dispatch(ret, 'OpenPlotDocument', '{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}')
		return ret

	def PrintMessage(self, strMessage):
		'''
		Print message
		
		:param strMessage: str
		'''
		return self._oleobj_.InvokeTypes(54, LCID, 1, (24, 0), ((8, 1),),strMessage
			)


	def SetCampbellDiagramActive(self, Val):
		'''
		Set Campbell Diagram active
		
		:param Val: bool
		'''
		return self._oleobj_.InvokeTypes(76, LCID, 1, (24, 0), ((11, 1),),Val
			)


	def _get_ActiveModelDocument(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "ActiveModelDocument", '{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}'))
	def _get_ActivePlotDocument(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "ActivePlotDocument", '{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}'))
	def _get_AddIns(self):
		return self._ApplyTypes_(*(75, 2, (9, 0), (), "AddIns", '{47E89053-59DB-4697-AAC9-49817147248B}'))
	def _get_DefaultUnit(self):
		return self._ApplyTypes_(*(66, 2, (9, 0), (), "DefaultUnit", '{09A65909-6FBB-488A-9726-D320F5666395}'))
	def _get_ModelDocumentCollection(self):
		return self._ApplyTypes_(*(69, 2, (9, 0), (), "ModelDocumentCollection", '{E26DEB95-B8AC-4666-8673-A9D41A440E2C}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(51, 2, (8, 0), (), "Name", None))
	def _get_PlotDocumentCollection(self):
		return self._ApplyTypes_(*(70, 2, (9, 0), (), "PlotDocumentCollection", '{AEE53265-74B8-4B8B-96B0-5EFB4F5AACB8}'))
	def _get_ProcessNet(self):
		return self._ApplyTypes_(*(82, 2, (9, 0), (), "ProcessNet", '{2B53283A-FA48-4CFB-87A7-93D2FC9F8A5F}'))
	def _get_ProcessNetVersion(self):
		return self._ApplyTypes_(*(67, 2, (8, 0), (), "ProcessNetVersion", None))
	def _get_RenderMode(self):
		return self._ApplyTypes_(*(61, 2, (3, 0), (), "RenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EB}'))
	def _get_RibbonManager(self):
		return self._ApplyTypes_(*(73, 2, (9, 0), (), "RibbonManager", '{81691554-1F9A-435A-9730-5C995EEFBDBD}'))
	def _get_Settings(self):
		return self._ApplyTypes_(*(68, 2, (9, 0), (), "Settings", '{1FD6C87D-DBED-4C06-9B79-81FC253BC0A1}'))
	def _get_ToolbarManager(self):
		return self._ApplyTypes_(*(74, 2, (9, 0), (), "ToolbarManager", '{E7C5258C-4AED-43E9-860F-877BF7B1F154}'))
	def _get_Version(self):
		return self._ApplyTypes_(*(62, 2, (8, 0), (), "Version", None))

	def _set_RenderMode(self, value):
		if "RenderMode" in self.__dict__: self.__dict__["RenderMode"] = value; return
		self._oleobj_.Invoke(*((61, LCID, 4, 0) + (value,) + ()))

	ActiveModelDocument = property(_get_ActiveModelDocument, None)
	'''
	Get current active model document

	:type: recurdyn.ProcessNet.IModelDocument
	'''
	ActivePlotDocument = property(_get_ActivePlotDocument, None)
	'''
	Get current active plot document

	:type: recurdyn.ProcessNet.IPlotDocument
	'''
	AddIns = property(_get_AddIns, None)
	'''
	AddIns

	:type: recurdyn.ProcessNet.IAddIns
	'''
	DefaultUnit = property(_get_DefaultUnit, None)
	'''
	Get default unit

	:type: recurdyn.ProcessNet.IUnit
	'''
	ModelDocumentCollection = property(_get_ModelDocumentCollection, None)
	Name = property(_get_Name, None)
	'''
	Name

	:type: str
	'''
	PlotDocumentCollection = property(_get_PlotDocumentCollection, None)
	ProcessNet = property(_get_ProcessNet, None)
	'''
	ProcessNet

	:type: recurdyn.ProcessNet.IProcessNet
	'''
	ProcessNetVersion = property(_get_ProcessNetVersion, None)
	'''
	ProcessNet Version, internal use only

	:type: str
	'''
	RenderMode = property(_get_RenderMode, _set_RenderMode)
	'''
	obsolete functon

	:type: recurdyn.ProcessNet.RenderMode
	'''
	RibbonManager = property(_get_RibbonManager, None)
	'''
	Ribbon Control Manager

	:type: recurdyn.ProcessNet.IRibbonManager
	'''
	Settings = property(_get_Settings, None)
	'''
	Application Settings

	:type: recurdyn.ProcessNet.IApplicationSettings
	'''
	ToolbarManager = property(_get_ToolbarManager, None)
	'''
	Toolbar Control Manager

	:type: recurdyn.ProcessNet.IToolbarManager
	'''
	Version = property(_get_Version, None)
	'''
	RecurDyn Version

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_RenderMode": _set_RenderMode,
	}
	_prop_map_get_ = {
		"ActiveModelDocument": (52, 2, (9, 0), (), "ActiveModelDocument", '{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}'),
		"ActivePlotDocument": (53, 2, (9, 0), (), "ActivePlotDocument", '{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}'),
		"AddIns": (75, 2, (9, 0), (), "AddIns", '{47E89053-59DB-4697-AAC9-49817147248B}'),
		"DefaultUnit": (66, 2, (9, 0), (), "DefaultUnit", '{09A65909-6FBB-488A-9726-D320F5666395}'),
		"ModelDocumentCollection": (69, 2, (9, 0), (), "ModelDocumentCollection", '{E26DEB95-B8AC-4666-8673-A9D41A440E2C}'),
		"Name": (51, 2, (8, 0), (), "Name", None),
		"PlotDocumentCollection": (70, 2, (9, 0), (), "PlotDocumentCollection", '{AEE53265-74B8-4B8B-96B0-5EFB4F5AACB8}'),
		"ProcessNet": (82, 2, (9, 0), (), "ProcessNet", '{2B53283A-FA48-4CFB-87A7-93D2FC9F8A5F}'),
		"ProcessNetVersion": (67, 2, (8, 0), (), "ProcessNetVersion", None),
		"RenderMode": (61, 2, (3, 0), (), "RenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EB}'),
		"RibbonManager": (73, 2, (9, 0), (), "RibbonManager", '{81691554-1F9A-435A-9730-5C995EEFBDBD}'),
		"Settings": (68, 2, (9, 0), (), "Settings", '{1FD6C87D-DBED-4C06-9B79-81FC253BC0A1}'),
		"ToolbarManager": (74, 2, (9, 0), (), "ToolbarManager", '{E7C5258C-4AED-43E9-860F-877BF7B1F154}'),
		"Version": (62, 2, (8, 0), (), "Version", None),
	}
	_prop_map_put_ = {
		"RenderMode": ((61, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IApplicationSettings(DispatchBaseClass):
	'''Application Settings'''
	CLSID = IID('{1FD6C87D-DBED-4C06-9B79-81FC253BC0A1}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AdvancedControlForIntgratorFailure(self):
		return self._ApplyTypes_(*(74, 2, (11, 0), (), "AdvancedControlForIntgratorFailure", None))
	def _get_AngleLimit(self):
		return self._ApplyTypes_(*(77, 2, (5, 0), (), "AngleLimit", None))
	def _get_AutoCoreNumber(self):
		return self._ApplyTypes_(*(58, 2, (11, 0), (), "AutoCoreNumber", None))
	def _get_CheckRedundantType(self):
		return self._ApplyTypes_(*(61, 2, (3, 0), (), "CheckRedundantType", '{AABB2503-7809-41B9-9320-0213E9E36D28}'))
	def _get_CoreNumber(self):
		return self._ApplyTypes_(*(59, 2, (19, 0), (), "CoreNumber", None))
	def _get_CoreNumber2(self):
		return self._ApplyTypes_(*(69, 2, (3, 0), (), "CoreNumber2", '{A2597840-D840-462B-B769-AB88AD567C47}'))
	def _get_CreateBackupFile(self):
		return self._ApplyTypes_(*(53, 2, (11, 0), (), "CreateBackupFile", None))
	def _get_CreateOutputFolder(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "CreateOutputFolder", None))
	def _get_FillZEROValuesInCONFile(self):
		return self._ApplyTypes_(*(86, 2, (11, 0), (), "FillZEROValuesInCONFile", None))
	def _get_InitialVelocity(self):
		return self._ApplyTypes_(*(60, 2, (3, 0), (), "InitialVelocity", '{6CAA0EA8-BF96-47DE-A3A8-D959EB9EC03B}'))
	def _get_JacobianEvaluationInterval(self):
		return self._ApplyTypes_(*(80, 2, (3, 0), (), "JacobianEvaluationInterval", None))
	def _get_JointPartition(self):
		return self._ApplyTypes_(*(68, 2, (19, 0), (), "JointPartition", None))
	def _get_LinearSolverTypeForMBD(self):
		return self._ApplyTypes_(*(82, 2, (3, 0), (), "LinearSolverTypeForMBD", '{A6B9C762-C38C-43AE-B452-3B29C63E402D}'))
	def _get_MaximumConvergenceCount(self):
		return self._ApplyTypes_(*(78, 2, (3, 0), (), "MaximumConvergenceCount", None))
	def _get_MessageOutputFactor(self):
		return self._ApplyTypes_(*(81, 2, (3, 0), (), "MessageOutputFactor", None))
	def _get_RedundantConstraintCheckToleranceValue(self):
		return self._ApplyTypes_(*(64, 2, (5, 0), (), "RedundantConstraintCheckToleranceValue", None))
	def _get_RedundantViolationAngleToleranceValue(self):
		return self._ApplyTypes_(*(73, 2, (5, 0), (), "RedundantViolationAngleToleranceValue", None))
	def _get_RedundantViolationLengthToleranceValue(self):
		return self._ApplyTypes_(*(71, 2, (5, 0), (), "RedundantViolationLengthToleranceValue", None))
	def _get_SaveAfterSimulation(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "SaveAfterSimulation", None))
	def _get_SaveBeforSimulation(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "SaveBeforSimulation", None))
	def _get_SaveRADFileWhenPausingTime(self):
		return self._ApplyTypes_(*(85, 2, (11, 0), (), "SaveRADFileWhenPausingTime", None))
	def _get_ShiftWhenPasting(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "ShiftWhenPasting", None))
	def _get_ShowWarningMessage(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "ShowWarningMessage", None))
	def _get_SolverType(self):
		return self._ApplyTypes_(*(65, 2, (3, 0), (), "SolverType", '{79CB9EAD-019B-4CE9-BA56-BC1AB5D1216F}'))
	def _get_StopRedundantConstraint(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "StopRedundantConstraint", None))
	def _get_UseAdvancedAngleMeasureFor3DRotation(self):
		return self._ApplyTypes_(*(83, 2, (11, 0), (), "UseAdvancedAngleMeasureFor3DRotation", None))
	def _get_UseAdvancedContactSurfaceSearch(self):
		return self._ApplyTypes_(*(62, 2, (11, 0), (), "UseAdvancedContactSurfaceSearch", None))
	def _get_UseAdvancedGeoContactForShell(self):
		return self._ApplyTypes_(*(88, 2, (11, 0), (), "UseAdvancedGeoContactForShell", None))
	def _get_UseAdvancedMaximumStepsizeFactor(self):
		return self._ApplyTypes_(*(87, 2, (11, 0), (), "UseAdvancedMaximumStepsizeFactor", None))
	def _get_UseAngleLimit(self):
		return self._ApplyTypes_(*(76, 2, (11, 0), (), "UseAngleLimit", None))
	def _get_UseImprovementPreAnalysisAccuracy(self):
		return self._ApplyTypes_(*(84, 2, (11, 0), (), "UseImprovementPreAnalysisAccuracy", None))
	def _get_UseJacobianEvaluationInterval(self):
		return self._ApplyTypes_(*(79, 2, (11, 0), (), "UseJacobianEvaluationInterval", None))
	def _get_UseJointPartition(self):
		return self._ApplyTypes_(*(67, 2, (11, 0), (), "UseJointPartition", None))
	def _get_UseRedundantConstraintCheckTolerance(self):
		return self._ApplyTypes_(*(63, 2, (11, 0), (), "UseRedundantConstraintCheckTolerance", None))
	def _get_UseRedundantViolationAngleTolerance(self):
		return self._ApplyTypes_(*(72, 2, (11, 0), (), "UseRedundantViolationAngleTolerance", None))
	def _get_UseRedundantViolationLengthTolerance(self):
		return self._ApplyTypes_(*(70, 2, (11, 0), (), "UseRedundantViolationLengthTolerance", None))
	def _get_UseSparseMBD(self):
		return self._ApplyTypes_(*(66, 2, (11, 0), (), "UseSparseMBD", None))

	def _set_AdvancedControlForIntgratorFailure(self, value):
		if "AdvancedControlForIntgratorFailure" in self.__dict__: self.__dict__["AdvancedControlForIntgratorFailure"] = value; return
		self._oleobj_.Invoke(*((74, LCID, 4, 0) + (value,) + ()))
	def _set_AngleLimit(self, value):
		if "AngleLimit" in self.__dict__: self.__dict__["AngleLimit"] = value; return
		self._oleobj_.Invoke(*((77, LCID, 4, 0) + (value,) + ()))
	def _set_AutoCoreNumber(self, value):
		if "AutoCoreNumber" in self.__dict__: self.__dict__["AutoCoreNumber"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))
	def _set_CheckRedundantType(self, value):
		if "CheckRedundantType" in self.__dict__: self.__dict__["CheckRedundantType"] = value; return
		self._oleobj_.Invoke(*((61, LCID, 4, 0) + (value,) + ()))
	def _set_CoreNumber(self, value):
		if "CoreNumber" in self.__dict__: self.__dict__["CoreNumber"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))
	def _set_CoreNumber2(self, value):
		if "CoreNumber2" in self.__dict__: self.__dict__["CoreNumber2"] = value; return
		self._oleobj_.Invoke(*((69, LCID, 4, 0) + (value,) + ()))
	def _set_CreateBackupFile(self, value):
		if "CreateBackupFile" in self.__dict__: self.__dict__["CreateBackupFile"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_CreateOutputFolder(self, value):
		if "CreateOutputFolder" in self.__dict__: self.__dict__["CreateOutputFolder"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_FillZEROValuesInCONFile(self, value):
		if "FillZEROValuesInCONFile" in self.__dict__: self.__dict__["FillZEROValuesInCONFile"] = value; return
		self._oleobj_.Invoke(*((86, LCID, 4, 0) + (value,) + ()))
	def _set_InitialVelocity(self, value):
		if "InitialVelocity" in self.__dict__: self.__dict__["InitialVelocity"] = value; return
		self._oleobj_.Invoke(*((60, LCID, 4, 0) + (value,) + ()))
	def _set_JacobianEvaluationInterval(self, value):
		if "JacobianEvaluationInterval" in self.__dict__: self.__dict__["JacobianEvaluationInterval"] = value; return
		self._oleobj_.Invoke(*((80, LCID, 4, 0) + (value,) + ()))
	def _set_JointPartition(self, value):
		if "JointPartition" in self.__dict__: self.__dict__["JointPartition"] = value; return
		self._oleobj_.Invoke(*((68, LCID, 4, 0) + (value,) + ()))
	def _set_LinearSolverTypeForMBD(self, value):
		if "LinearSolverTypeForMBD" in self.__dict__: self.__dict__["LinearSolverTypeForMBD"] = value; return
		self._oleobj_.Invoke(*((82, LCID, 4, 0) + (value,) + ()))
	def _set_MaximumConvergenceCount(self, value):
		if "MaximumConvergenceCount" in self.__dict__: self.__dict__["MaximumConvergenceCount"] = value; return
		self._oleobj_.Invoke(*((78, LCID, 4, 0) + (value,) + ()))
	def _set_MessageOutputFactor(self, value):
		if "MessageOutputFactor" in self.__dict__: self.__dict__["MessageOutputFactor"] = value; return
		self._oleobj_.Invoke(*((81, LCID, 4, 0) + (value,) + ()))
	def _set_RedundantConstraintCheckToleranceValue(self, value):
		if "RedundantConstraintCheckToleranceValue" in self.__dict__: self.__dict__["RedundantConstraintCheckToleranceValue"] = value; return
		self._oleobj_.Invoke(*((64, LCID, 4, 0) + (value,) + ()))
	def _set_RedundantViolationAngleToleranceValue(self, value):
		if "RedundantViolationAngleToleranceValue" in self.__dict__: self.__dict__["RedundantViolationAngleToleranceValue"] = value; return
		self._oleobj_.Invoke(*((73, LCID, 4, 0) + (value,) + ()))
	def _set_RedundantViolationLengthToleranceValue(self, value):
		if "RedundantViolationLengthToleranceValue" in self.__dict__: self.__dict__["RedundantViolationLengthToleranceValue"] = value; return
		self._oleobj_.Invoke(*((71, LCID, 4, 0) + (value,) + ()))
	def _set_SaveAfterSimulation(self, value):
		if "SaveAfterSimulation" in self.__dict__: self.__dict__["SaveAfterSimulation"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_SaveBeforSimulation(self, value):
		if "SaveBeforSimulation" in self.__dict__: self.__dict__["SaveBeforSimulation"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_SaveRADFileWhenPausingTime(self, value):
		if "SaveRADFileWhenPausingTime" in self.__dict__: self.__dict__["SaveRADFileWhenPausingTime"] = value; return
		self._oleobj_.Invoke(*((85, LCID, 4, 0) + (value,) + ()))
	def _set_ShiftWhenPasting(self, value):
		if "ShiftWhenPasting" in self.__dict__: self.__dict__["ShiftWhenPasting"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_ShowWarningMessage(self, value):
		if "ShowWarningMessage" in self.__dict__: self.__dict__["ShowWarningMessage"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_SolverType(self, value):
		if "SolverType" in self.__dict__: self.__dict__["SolverType"] = value; return
		self._oleobj_.Invoke(*((65, LCID, 4, 0) + (value,) + ()))
	def _set_StopRedundantConstraint(self, value):
		if "StopRedundantConstraint" in self.__dict__: self.__dict__["StopRedundantConstraint"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_UseAdvancedAngleMeasureFor3DRotation(self, value):
		if "UseAdvancedAngleMeasureFor3DRotation" in self.__dict__: self.__dict__["UseAdvancedAngleMeasureFor3DRotation"] = value; return
		self._oleobj_.Invoke(*((83, LCID, 4, 0) + (value,) + ()))
	def _set_UseAdvancedContactSurfaceSearch(self, value):
		if "UseAdvancedContactSurfaceSearch" in self.__dict__: self.__dict__["UseAdvancedContactSurfaceSearch"] = value; return
		self._oleobj_.Invoke(*((62, LCID, 4, 0) + (value,) + ()))
	def _set_UseAdvancedGeoContactForShell(self, value):
		if "UseAdvancedGeoContactForShell" in self.__dict__: self.__dict__["UseAdvancedGeoContactForShell"] = value; return
		self._oleobj_.Invoke(*((88, LCID, 4, 0) + (value,) + ()))
	def _set_UseAdvancedMaximumStepsizeFactor(self, value):
		if "UseAdvancedMaximumStepsizeFactor" in self.__dict__: self.__dict__["UseAdvancedMaximumStepsizeFactor"] = value; return
		self._oleobj_.Invoke(*((87, LCID, 4, 0) + (value,) + ()))
	def _set_UseAngleLimit(self, value):
		if "UseAngleLimit" in self.__dict__: self.__dict__["UseAngleLimit"] = value; return
		self._oleobj_.Invoke(*((76, LCID, 4, 0) + (value,) + ()))
	def _set_UseImprovementPreAnalysisAccuracy(self, value):
		if "UseImprovementPreAnalysisAccuracy" in self.__dict__: self.__dict__["UseImprovementPreAnalysisAccuracy"] = value; return
		self._oleobj_.Invoke(*((84, LCID, 4, 0) + (value,) + ()))
	def _set_UseJacobianEvaluationInterval(self, value):
		if "UseJacobianEvaluationInterval" in self.__dict__: self.__dict__["UseJacobianEvaluationInterval"] = value; return
		self._oleobj_.Invoke(*((79, LCID, 4, 0) + (value,) + ()))
	def _set_UseJointPartition(self, value):
		if "UseJointPartition" in self.__dict__: self.__dict__["UseJointPartition"] = value; return
		self._oleobj_.Invoke(*((67, LCID, 4, 0) + (value,) + ()))
	def _set_UseRedundantConstraintCheckTolerance(self, value):
		if "UseRedundantConstraintCheckTolerance" in self.__dict__: self.__dict__["UseRedundantConstraintCheckTolerance"] = value; return
		self._oleobj_.Invoke(*((63, LCID, 4, 0) + (value,) + ()))
	def _set_UseRedundantViolationAngleTolerance(self, value):
		if "UseRedundantViolationAngleTolerance" in self.__dict__: self.__dict__["UseRedundantViolationAngleTolerance"] = value; return
		self._oleobj_.Invoke(*((72, LCID, 4, 0) + (value,) + ()))
	def _set_UseRedundantViolationLengthTolerance(self, value):
		if "UseRedundantViolationLengthTolerance" in self.__dict__: self.__dict__["UseRedundantViolationLengthTolerance"] = value; return
		self._oleobj_.Invoke(*((70, LCID, 4, 0) + (value,) + ()))
	def _set_UseSparseMBD(self, value):
		if "UseSparseMBD" in self.__dict__: self.__dict__["UseSparseMBD"] = value; return
		self._oleobj_.Invoke(*((66, LCID, 4, 0) + (value,) + ()))

	AdvancedControlForIntgratorFailure = property(_get_AdvancedControlForIntgratorFailure, _set_AdvancedControlForIntgratorFailure)
	'''
	Use advanced control for intgrator failure

	:type: bool
	'''
	AngleLimit = property(_get_AngleLimit, _set_AngleLimit)
	'''
	Limit of Angle in each Solving Step (deg)

	:type: float
	'''
	AutoCoreNumber = property(_get_AutoCoreNumber, _set_AutoCoreNumber)
	'''
	Automatically setting the number of core

	:type: bool
	'''
	CheckRedundantType = property(_get_CheckRedundantType, _set_CheckRedundantType)
	'''
	Check redundant type

	:type: recurdyn.ProcessNet.CheckRedundantType
	'''
	CoreNumber = property(_get_CoreNumber, _set_CoreNumber)
	'''
	Number of core

	:type: int
	'''
	CoreNumber2 = property(_get_CoreNumber2, _set_CoreNumber2)
	'''
	Number of core

	:type: recurdyn.ProcessNet.CoreType
	'''
	CreateBackupFile = property(_get_CreateBackupFile, _set_CreateBackupFile)
	'''
	obsolete functon

	:type: bool
	'''
	CreateOutputFolder = property(_get_CreateOutputFolder, _set_CreateOutputFolder)
	'''
	Create output folder after each simulation and save result to that folder

	:type: bool
	'''
	FillZEROValuesInCONFile = property(_get_FillZEROValuesInCONFile, _set_FillZEROValuesInCONFile)
	'''
	Fill zero value when there is no contact for CON file

	:type: bool
	'''
	InitialVelocity = property(_get_InitialVelocity, _set_InitialVelocity)
	'''
	Initial velocity type

	:type: recurdyn.ProcessNet.InitialVelocityType
	'''
	JacobianEvaluationInterval = property(_get_JacobianEvaluationInterval, _set_JacobianEvaluationInterval)
	'''
	Jacobian Evaluation Interval

	:type: int
	'''
	JointPartition = property(_get_JointPartition, _set_JointPartition)
	'''
	Joint partition

	:type: int
	'''
	LinearSolverTypeForMBD = property(_get_LinearSolverTypeForMBD, _set_LinearSolverTypeForMBD)
	'''
	Linear Solver Type For MBD

	:type: recurdyn.ProcessNet.LinearSolverTypeForMBD
	'''
	MaximumConvergenceCount = property(_get_MaximumConvergenceCount, _set_MaximumConvergenceCount)
	'''
	Maximum Convergence Count

	:type: int
	'''
	MessageOutputFactor = property(_get_MessageOutputFactor, _set_MessageOutputFactor)
	'''
	MessageOutputFactor

	:type: int
	'''
	RedundantConstraintCheckToleranceValue = property(_get_RedundantConstraintCheckToleranceValue, _set_RedundantConstraintCheckToleranceValue)
	'''
	Redundant constraint check tolerance value

	:type: float
	'''
	RedundantViolationAngleToleranceValue = property(_get_RedundantViolationAngleToleranceValue, _set_RedundantViolationAngleToleranceValue)
	'''
	Redundant violation angle tolerance value

	:type: float
	'''
	RedundantViolationLengthToleranceValue = property(_get_RedundantViolationLengthToleranceValue, _set_RedundantViolationLengthToleranceValue)
	'''
	Redundant violation length tolerance value

	:type: float
	'''
	SaveAfterSimulation = property(_get_SaveAfterSimulation, _set_SaveAfterSimulation)
	'''
	The model with the new results is saved after the simulation

	:type: bool
	'''
	SaveBeforSimulation = property(_get_SaveBeforSimulation, _set_SaveBeforSimulation)
	'''
	The model is saved just before executing the simulation

	:type: bool
	'''
	SaveRADFileWhenPausingTime = property(_get_SaveRADFileWhenPausingTime, _set_SaveRADFileWhenPausingTime)
	'''
	Save RAD File When Pausing Time

	:type: bool
	'''
	ShiftWhenPasting = property(_get_ShiftWhenPasting, _set_ShiftWhenPasting)
	'''
	obsolete functon

	:type: bool
	'''
	ShowWarningMessage = property(_get_ShowWarningMessage, _set_ShowWarningMessage)
	'''
	Show warning message

	:type: bool
	'''
	SolverType = property(_get_SolverType, _set_SolverType)
	'''
	Solver Type

	:type: recurdyn.ProcessNet.ModelSettingSimulationSolverType
	'''
	StopRedundantConstraint = property(_get_StopRedundantConstraint, _set_StopRedundantConstraint)
	'''
	Stop Simulation in case of redundant constraint

	:type: bool
	'''
	UseAdvancedAngleMeasureFor3DRotation = property(_get_UseAdvancedAngleMeasureFor3DRotation, _set_UseAdvancedAngleMeasureFor3DRotation)
	'''
	Use the advanced method of measuring an angle for 3D rotation

	:type: bool
	'''
	UseAdvancedContactSurfaceSearch = property(_get_UseAdvancedContactSurfaceSearch, _set_UseAdvancedContactSurfaceSearch)
	'''
	obsolete functon (default value = true)

	:type: bool
	'''
	UseAdvancedGeoContactForShell = property(_get_UseAdvancedGeoContactForShell, _set_UseAdvancedGeoContactForShell)
	'''
	Use the advanced geo contact for shell

	:type: bool
	'''
	UseAdvancedMaximumStepsizeFactor = property(_get_UseAdvancedMaximumStepsizeFactor, _set_UseAdvancedMaximumStepsizeFactor)
	'''
	Use the advanced maximum stepsize factor

	:type: bool
	'''
	UseAngleLimit = property(_get_UseAngleLimit, _set_UseAngleLimit)
	'''
	Use Limit of Angle in each Solving Step (deg)

	:type: bool
	'''
	UseImprovementPreAnalysisAccuracy = property(_get_UseImprovementPreAnalysisAccuracy, _set_UseImprovementPreAnalysisAccuracy)
	'''
	Use Improvement Pre Analysis Accuracy

	:type: bool
	'''
	UseJacobianEvaluationInterval = property(_get_UseJacobianEvaluationInterval, _set_UseJacobianEvaluationInterval)
	'''
	Use Jacobian Evaluation Interval

	:type: bool
	'''
	UseJointPartition = property(_get_UseJointPartition, _set_UseJointPartition)
	'''
	Use joint partition

	:type: bool
	'''
	UseRedundantConstraintCheckTolerance = property(_get_UseRedundantConstraintCheckTolerance, _set_UseRedundantConstraintCheckTolerance)
	'''
	Redundant constraint check tolerance

	:type: bool
	'''
	UseRedundantViolationAngleTolerance = property(_get_UseRedundantViolationAngleTolerance, _set_UseRedundantViolationAngleTolerance)
	'''
	Use redundant violation angle tolerance

	:type: bool
	'''
	UseRedundantViolationLengthTolerance = property(_get_UseRedundantViolationLengthTolerance, _set_UseRedundantViolationLengthTolerance)
	'''
	Use redundant violation length tolerance

	:type: bool
	'''
	UseSparseMBD = property(_get_UseSparseMBD, _set_UseSparseMBD)
	'''
	obsolete functon (default value = true)

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_AdvancedControlForIntgratorFailure": _set_AdvancedControlForIntgratorFailure,
		"_set_AngleLimit": _set_AngleLimit,
		"_set_AutoCoreNumber": _set_AutoCoreNumber,
		"_set_CheckRedundantType": _set_CheckRedundantType,
		"_set_CoreNumber": _set_CoreNumber,
		"_set_CoreNumber2": _set_CoreNumber2,
		"_set_CreateBackupFile": _set_CreateBackupFile,
		"_set_CreateOutputFolder": _set_CreateOutputFolder,
		"_set_FillZEROValuesInCONFile": _set_FillZEROValuesInCONFile,
		"_set_InitialVelocity": _set_InitialVelocity,
		"_set_JacobianEvaluationInterval": _set_JacobianEvaluationInterval,
		"_set_JointPartition": _set_JointPartition,
		"_set_LinearSolverTypeForMBD": _set_LinearSolverTypeForMBD,
		"_set_MaximumConvergenceCount": _set_MaximumConvergenceCount,
		"_set_MessageOutputFactor": _set_MessageOutputFactor,
		"_set_RedundantConstraintCheckToleranceValue": _set_RedundantConstraintCheckToleranceValue,
		"_set_RedundantViolationAngleToleranceValue": _set_RedundantViolationAngleToleranceValue,
		"_set_RedundantViolationLengthToleranceValue": _set_RedundantViolationLengthToleranceValue,
		"_set_SaveAfterSimulation": _set_SaveAfterSimulation,
		"_set_SaveBeforSimulation": _set_SaveBeforSimulation,
		"_set_SaveRADFileWhenPausingTime": _set_SaveRADFileWhenPausingTime,
		"_set_ShiftWhenPasting": _set_ShiftWhenPasting,
		"_set_ShowWarningMessage": _set_ShowWarningMessage,
		"_set_SolverType": _set_SolverType,
		"_set_StopRedundantConstraint": _set_StopRedundantConstraint,
		"_set_UseAdvancedAngleMeasureFor3DRotation": _set_UseAdvancedAngleMeasureFor3DRotation,
		"_set_UseAdvancedContactSurfaceSearch": _set_UseAdvancedContactSurfaceSearch,
		"_set_UseAdvancedGeoContactForShell": _set_UseAdvancedGeoContactForShell,
		"_set_UseAdvancedMaximumStepsizeFactor": _set_UseAdvancedMaximumStepsizeFactor,
		"_set_UseAngleLimit": _set_UseAngleLimit,
		"_set_UseImprovementPreAnalysisAccuracy": _set_UseImprovementPreAnalysisAccuracy,
		"_set_UseJacobianEvaluationInterval": _set_UseJacobianEvaluationInterval,
		"_set_UseJointPartition": _set_UseJointPartition,
		"_set_UseRedundantConstraintCheckTolerance": _set_UseRedundantConstraintCheckTolerance,
		"_set_UseRedundantViolationAngleTolerance": _set_UseRedundantViolationAngleTolerance,
		"_set_UseRedundantViolationLengthTolerance": _set_UseRedundantViolationLengthTolerance,
		"_set_UseSparseMBD": _set_UseSparseMBD,
	}
	_prop_map_get_ = {
		"AdvancedControlForIntgratorFailure": (74, 2, (11, 0), (), "AdvancedControlForIntgratorFailure", None),
		"AngleLimit": (77, 2, (5, 0), (), "AngleLimit", None),
		"AutoCoreNumber": (58, 2, (11, 0), (), "AutoCoreNumber", None),
		"CheckRedundantType": (61, 2, (3, 0), (), "CheckRedundantType", '{AABB2503-7809-41B9-9320-0213E9E36D28}'),
		"CoreNumber": (59, 2, (19, 0), (), "CoreNumber", None),
		"CoreNumber2": (69, 2, (3, 0), (), "CoreNumber2", '{A2597840-D840-462B-B769-AB88AD567C47}'),
		"CreateBackupFile": (53, 2, (11, 0), (), "CreateBackupFile", None),
		"CreateOutputFolder": (52, 2, (11, 0), (), "CreateOutputFolder", None),
		"FillZEROValuesInCONFile": (86, 2, (11, 0), (), "FillZEROValuesInCONFile", None),
		"InitialVelocity": (60, 2, (3, 0), (), "InitialVelocity", '{6CAA0EA8-BF96-47DE-A3A8-D959EB9EC03B}'),
		"JacobianEvaluationInterval": (80, 2, (3, 0), (), "JacobianEvaluationInterval", None),
		"JointPartition": (68, 2, (19, 0), (), "JointPartition", None),
		"LinearSolverTypeForMBD": (82, 2, (3, 0), (), "LinearSolverTypeForMBD", '{A6B9C762-C38C-43AE-B452-3B29C63E402D}'),
		"MaximumConvergenceCount": (78, 2, (3, 0), (), "MaximumConvergenceCount", None),
		"MessageOutputFactor": (81, 2, (3, 0), (), "MessageOutputFactor", None),
		"RedundantConstraintCheckToleranceValue": (64, 2, (5, 0), (), "RedundantConstraintCheckToleranceValue", None),
		"RedundantViolationAngleToleranceValue": (73, 2, (5, 0), (), "RedundantViolationAngleToleranceValue", None),
		"RedundantViolationLengthToleranceValue": (71, 2, (5, 0), (), "RedundantViolationLengthToleranceValue", None),
		"SaveAfterSimulation": (56, 2, (11, 0), (), "SaveAfterSimulation", None),
		"SaveBeforSimulation": (55, 2, (11, 0), (), "SaveBeforSimulation", None),
		"SaveRADFileWhenPausingTime": (85, 2, (11, 0), (), "SaveRADFileWhenPausingTime", None),
		"ShiftWhenPasting": (54, 2, (11, 0), (), "ShiftWhenPasting", None),
		"ShowWarningMessage": (51, 2, (11, 0), (), "ShowWarningMessage", None),
		"SolverType": (65, 2, (3, 0), (), "SolverType", '{79CB9EAD-019B-4CE9-BA56-BC1AB5D1216F}'),
		"StopRedundantConstraint": (57, 2, (11, 0), (), "StopRedundantConstraint", None),
		"UseAdvancedAngleMeasureFor3DRotation": (83, 2, (11, 0), (), "UseAdvancedAngleMeasureFor3DRotation", None),
		"UseAdvancedContactSurfaceSearch": (62, 2, (11, 0), (), "UseAdvancedContactSurfaceSearch", None),
		"UseAdvancedGeoContactForShell": (88, 2, (11, 0), (), "UseAdvancedGeoContactForShell", None),
		"UseAdvancedMaximumStepsizeFactor": (87, 2, (11, 0), (), "UseAdvancedMaximumStepsizeFactor", None),
		"UseAngleLimit": (76, 2, (11, 0), (), "UseAngleLimit", None),
		"UseImprovementPreAnalysisAccuracy": (84, 2, (11, 0), (), "UseImprovementPreAnalysisAccuracy", None),
		"UseJacobianEvaluationInterval": (79, 2, (11, 0), (), "UseJacobianEvaluationInterval", None),
		"UseJointPartition": (67, 2, (11, 0), (), "UseJointPartition", None),
		"UseRedundantConstraintCheckTolerance": (63, 2, (11, 0), (), "UseRedundantConstraintCheckTolerance", None),
		"UseRedundantViolationAngleTolerance": (72, 2, (11, 0), (), "UseRedundantViolationAngleTolerance", None),
		"UseRedundantViolationLengthTolerance": (70, 2, (11, 0), (), "UseRedundantViolationLengthTolerance", None),
		"UseSparseMBD": (66, 2, (11, 0), (), "UseSparseMBD", None),
	}
	_prop_map_put_ = {
		"AdvancedControlForIntgratorFailure": ((74, LCID, 4, 0),()),
		"AngleLimit": ((77, LCID, 4, 0),()),
		"AutoCoreNumber": ((58, LCID, 4, 0),()),
		"CheckRedundantType": ((61, LCID, 4, 0),()),
		"CoreNumber": ((59, LCID, 4, 0),()),
		"CoreNumber2": ((69, LCID, 4, 0),()),
		"CreateBackupFile": ((53, LCID, 4, 0),()),
		"CreateOutputFolder": ((52, LCID, 4, 0),()),
		"FillZEROValuesInCONFile": ((86, LCID, 4, 0),()),
		"InitialVelocity": ((60, LCID, 4, 0),()),
		"JacobianEvaluationInterval": ((80, LCID, 4, 0),()),
		"JointPartition": ((68, LCID, 4, 0),()),
		"LinearSolverTypeForMBD": ((82, LCID, 4, 0),()),
		"MaximumConvergenceCount": ((78, LCID, 4, 0),()),
		"MessageOutputFactor": ((81, LCID, 4, 0),()),
		"RedundantConstraintCheckToleranceValue": ((64, LCID, 4, 0),()),
		"RedundantViolationAngleToleranceValue": ((73, LCID, 4, 0),()),
		"RedundantViolationLengthToleranceValue": ((71, LCID, 4, 0),()),
		"SaveAfterSimulation": ((56, LCID, 4, 0),()),
		"SaveBeforSimulation": ((55, LCID, 4, 0),()),
		"SaveRADFileWhenPausingTime": ((85, LCID, 4, 0),()),
		"ShiftWhenPasting": ((54, LCID, 4, 0),()),
		"ShowWarningMessage": ((51, LCID, 4, 0),()),
		"SolverType": ((65, LCID, 4, 0),()),
		"StopRedundantConstraint": ((57, LCID, 4, 0),()),
		"UseAdvancedAngleMeasureFor3DRotation": ((83, LCID, 4, 0),()),
		"UseAdvancedContactSurfaceSearch": ((62, LCID, 4, 0),()),
		"UseAdvancedGeoContactForShell": ((88, LCID, 4, 0),()),
		"UseAdvancedMaximumStepsizeFactor": ((87, LCID, 4, 0),()),
		"UseAngleLimit": ((76, LCID, 4, 0),()),
		"UseImprovementPreAnalysisAccuracy": ((84, LCID, 4, 0),()),
		"UseJacobianEvaluationInterval": ((79, LCID, 4, 0),()),
		"UseJointPartition": ((67, LCID, 4, 0),()),
		"UseRedundantConstraintCheckTolerance": ((63, LCID, 4, 0),()),
		"UseRedundantViolationAngleTolerance": ((72, LCID, 4, 0),()),
		"UseRedundantViolationLengthTolerance": ((70, LCID, 4, 0),()),
		"UseSparseMBD": ((66, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IBackgroundColor(DispatchBaseClass):
	'''Background color'''
	CLSID = IID('{1972ACE7-FAA6-4C64-A067-C0B2EB23C93A}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_BottomColor(self):
		return self._ApplyTypes_(*(53, 2, (19, 0), (), "BottomColor", None))
	def _get_TopColor(self):
		return self._ApplyTypes_(*(52, 2, (19, 0), (), "TopColor", None))
	def _get_UseGradation(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "UseGradation", None))

	def _set_BottomColor(self, value):
		if "BottomColor" in self.__dict__: self.__dict__["BottomColor"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_TopColor(self, value):
		if "TopColor" in self.__dict__: self.__dict__["TopColor"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_UseGradation(self, value):
		if "UseGradation" in self.__dict__: self.__dict__["UseGradation"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))

	BottomColor = property(_get_BottomColor, _set_BottomColor)
	'''
	Bottom color

	:type: int
	'''
	TopColor = property(_get_TopColor, _set_TopColor)
	'''
	Top color

	:type: int
	'''
	UseGradation = property(_get_UseGradation, _set_UseGradation)
	'''
	Use gradation

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_BottomColor": _set_BottomColor,
		"_set_TopColor": _set_TopColor,
		"_set_UseGradation": _set_UseGradation,
	}
	_prop_map_get_ = {
		"BottomColor": (53, 2, (19, 0), (), "BottomColor", None),
		"TopColor": (52, 2, (19, 0), (), "TopColor", None),
		"UseGradation": (51, 2, (11, 0), (), "UseGradation", None),
	}
	_prop_map_put_ = {
		"BottomColor": ((53, LCID, 4, 0),()),
		"TopColor": ((52, LCID, 4, 0),()),
		"UseGradation": ((51, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IBeamCrossSection(DispatchBaseClass):
	'''Beam force cross section'''
	CLSID = IID('{557175E7-72DD-447A-8DB1-319593C34BDC}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_PoissonRatio(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UsePoissonRatio(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UsePoissonRatio", None))

	def _set_UsePoissonRatio(self, value):
		if "UsePoissonRatio" in self.__dict__: self.__dict__["UsePoissonRatio"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	PoissonRatio = property(_get_PoissonRatio, None)
	'''
	Poisson ratio

	:type: recurdyn.ProcessNet.IDouble
	'''
	UsePoissonRatio = property(_get_UsePoissonRatio, _set_UsePoissonRatio)
	'''
	Use Poisson ratio

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UsePoissonRatio": _set_UsePoissonRatio,
	}
	_prop_map_get_ = {
		"PoissonRatio": (51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UsePoissonRatio": (52, 2, (11, 0), (), "UsePoissonRatio", None),
	}
	_prop_map_put_ = {
		"UsePoissonRatio": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IBeamCrossSectionCircular(DispatchBaseClass):
	'''Beam force cross section - circular beam'''
	CLSID = IID('{557175E7-72DD-447A-8DB1-319593C34BDD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_PoissonRatio(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Radius(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UsePoissonRatio(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UsePoissonRatio", None))

	def _set_UsePoissonRatio(self, value):
		if "UsePoissonRatio" in self.__dict__: self.__dict__["UsePoissonRatio"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	PoissonRatio = property(_get_PoissonRatio, None)
	'''
	Poisson ratio

	:type: recurdyn.ProcessNet.IDouble
	'''
	Radius = property(_get_Radius, None)
	'''
	Radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	UsePoissonRatio = property(_get_UsePoissonRatio, _set_UsePoissonRatio)
	'''
	Use Poisson ratio

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UsePoissonRatio": _set_UsePoissonRatio,
	}
	_prop_map_get_ = {
		"PoissonRatio": (51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Radius": (101, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UsePoissonRatio": (52, 2, (11, 0), (), "UsePoissonRatio", None),
	}
	_prop_map_put_ = {
		"UsePoissonRatio": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IBeamCrossSectionElliptical(DispatchBaseClass):
	'''Beam force cross section - elliptical beam'''
	CLSID = IID('{557175E7-72DD-447A-8DB1-319593C34BDE}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_PoissonRatio(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SemiMajorAxis(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "SemiMajorAxis", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SemiMinorAxis(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "SemiMinorAxis", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UsePoissonRatio(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UsePoissonRatio", None))

	def _set_UsePoissonRatio(self, value):
		if "UsePoissonRatio" in self.__dict__: self.__dict__["UsePoissonRatio"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	PoissonRatio = property(_get_PoissonRatio, None)
	'''
	Poisson ratio

	:type: recurdyn.ProcessNet.IDouble
	'''
	SemiMajorAxis = property(_get_SemiMajorAxis, None)
	'''
	SemiMajorAxis

	:type: recurdyn.ProcessNet.IDouble
	'''
	SemiMinorAxis = property(_get_SemiMinorAxis, None)
	'''
	SemiMinorAxis

	:type: recurdyn.ProcessNet.IDouble
	'''
	UsePoissonRatio = property(_get_UsePoissonRatio, _set_UsePoissonRatio)
	'''
	Use Poisson ratio

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UsePoissonRatio": _set_UsePoissonRatio,
	}
	_prop_map_get_ = {
		"PoissonRatio": (51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SemiMajorAxis": (101, 2, (9, 0), (), "SemiMajorAxis", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SemiMinorAxis": (102, 2, (9, 0), (), "SemiMinorAxis", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UsePoissonRatio": (52, 2, (11, 0), (), "UsePoissonRatio", None),
	}
	_prop_map_put_ = {
		"UsePoissonRatio": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IBeamCrossSectionHollowRectangualr(DispatchBaseClass):
	'''Beam force cross section - hollow rectangualr beam'''
	CLSID = IID('{557175E7-72DD-447A-8DB1-319593C34BE2}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Height(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "Height", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_HeightThickness(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "HeightThickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PoissonRatio(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UsePoissonRatio(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UsePoissonRatio", None))
	def _get_Width(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "Width", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_WidthThickness(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "WidthThickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	def _set_UsePoissonRatio(self, value):
		if "UsePoissonRatio" in self.__dict__: self.__dict__["UsePoissonRatio"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	Height = property(_get_Height, None)
	'''
	Height

	:type: recurdyn.ProcessNet.IDouble
	'''
	HeightThickness = property(_get_HeightThickness, None)
	'''
	HeightThickness

	:type: recurdyn.ProcessNet.IDouble
	'''
	PoissonRatio = property(_get_PoissonRatio, None)
	'''
	Poisson ratio

	:type: recurdyn.ProcessNet.IDouble
	'''
	UsePoissonRatio = property(_get_UsePoissonRatio, _set_UsePoissonRatio)
	'''
	Use Poisson ratio

	:type: bool
	'''
	Width = property(_get_Width, None)
	'''
	Width

	:type: recurdyn.ProcessNet.IDouble
	'''
	WidthThickness = property(_get_WidthThickness, None)
	'''
	WidthThickness

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
		"_set_UsePoissonRatio": _set_UsePoissonRatio,
	}
	_prop_map_get_ = {
		"Height": (102, 2, (9, 0), (), "Height", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"HeightThickness": (104, 2, (9, 0), (), "HeightThickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PoissonRatio": (51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UsePoissonRatio": (52, 2, (11, 0), (), "UsePoissonRatio", None),
		"Width": (101, 2, (9, 0), (), "Width", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"WidthThickness": (103, 2, (9, 0), (), "WidthThickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
		"UsePoissonRatio": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IBeamCrossSectionIBeam(DispatchBaseClass):
	'''Beam force cross section - I beam'''
	CLSID = IID('{557175E7-72DD-447A-8DB1-319593C34BE3}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_FlangeThickness(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "FlangeThickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FlangeWidth(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "FlangeWidth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Height(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "Height", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PoissonRatio(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UsePoissonRatio(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UsePoissonRatio", None))
	def _get_WebThickness(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "WebThickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	def _set_UsePoissonRatio(self, value):
		if "UsePoissonRatio" in self.__dict__: self.__dict__["UsePoissonRatio"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	FlangeThickness = property(_get_FlangeThickness, None)
	'''
	FlangeThickness

	:type: recurdyn.ProcessNet.IDouble
	'''
	FlangeWidth = property(_get_FlangeWidth, None)
	'''
	FlangeWidth

	:type: recurdyn.ProcessNet.IDouble
	'''
	Height = property(_get_Height, None)
	'''
	Height

	:type: recurdyn.ProcessNet.IDouble
	'''
	PoissonRatio = property(_get_PoissonRatio, None)
	'''
	Poisson ratio

	:type: recurdyn.ProcessNet.IDouble
	'''
	UsePoissonRatio = property(_get_UsePoissonRatio, _set_UsePoissonRatio)
	'''
	Use Poisson ratio

	:type: bool
	'''
	WebThickness = property(_get_WebThickness, None)
	'''
	WebThickness

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
		"_set_UsePoissonRatio": _set_UsePoissonRatio,
	}
	_prop_map_get_ = {
		"FlangeThickness": (104, 2, (9, 0), (), "FlangeThickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FlangeWidth": (101, 2, (9, 0), (), "FlangeWidth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Height": (102, 2, (9, 0), (), "Height", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PoissonRatio": (51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UsePoissonRatio": (52, 2, (11, 0), (), "UsePoissonRatio", None),
		"WebThickness": (103, 2, (9, 0), (), "WebThickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
		"UsePoissonRatio": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IBeamCrossSectionRectangular(DispatchBaseClass):
	'''Beam force cross section - rectangular beam'''
	CLSID = IID('{557175E7-72DD-447A-8DB1-319593C34BDF}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Height(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "Height", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PoissonRatio(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UsePoissonRatio(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UsePoissonRatio", None))
	def _get_Width(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "Width", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	def _set_UsePoissonRatio(self, value):
		if "UsePoissonRatio" in self.__dict__: self.__dict__["UsePoissonRatio"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	Height = property(_get_Height, None)
	'''
	Height

	:type: recurdyn.ProcessNet.IDouble
	'''
	PoissonRatio = property(_get_PoissonRatio, None)
	'''
	Poisson ratio

	:type: recurdyn.ProcessNet.IDouble
	'''
	UsePoissonRatio = property(_get_UsePoissonRatio, _set_UsePoissonRatio)
	'''
	Use Poisson ratio

	:type: bool
	'''
	Width = property(_get_Width, None)
	'''
	Width

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
		"_set_UsePoissonRatio": _set_UsePoissonRatio,
	}
	_prop_map_get_ = {
		"Height": (102, 2, (9, 0), (), "Height", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PoissonRatio": (51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UsePoissonRatio": (52, 2, (11, 0), (), "UsePoissonRatio", None),
		"Width": (101, 2, (9, 0), (), "Width", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
		"UsePoissonRatio": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IBeamCrossSectionTBeam(DispatchBaseClass):
	'''Beam force cross section - T beam'''
	CLSID = IID('{557175E7-72DD-447A-8DB1-319593C34BE4}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_FlangeThickness(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "FlangeThickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FlangeWidth(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "FlangeWidth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Height(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "Height", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PoissonRatio(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UsePoissonRatio(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UsePoissonRatio", None))
	def _get_WebThickness(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "WebThickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	def _set_UsePoissonRatio(self, value):
		if "UsePoissonRatio" in self.__dict__: self.__dict__["UsePoissonRatio"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	FlangeThickness = property(_get_FlangeThickness, None)
	'''
	FlangeThickness

	:type: recurdyn.ProcessNet.IDouble
	'''
	FlangeWidth = property(_get_FlangeWidth, None)
	'''
	FlangeWidth

	:type: recurdyn.ProcessNet.IDouble
	'''
	Height = property(_get_Height, None)
	'''
	Height

	:type: recurdyn.ProcessNet.IDouble
	'''
	PoissonRatio = property(_get_PoissonRatio, None)
	'''
	Poisson ratio

	:type: recurdyn.ProcessNet.IDouble
	'''
	UsePoissonRatio = property(_get_UsePoissonRatio, _set_UsePoissonRatio)
	'''
	Use Poisson ratio

	:type: bool
	'''
	WebThickness = property(_get_WebThickness, None)
	'''
	WebThickness

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
		"_set_UsePoissonRatio": _set_UsePoissonRatio,
	}
	_prop_map_get_ = {
		"FlangeThickness": (104, 2, (9, 0), (), "FlangeThickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FlangeWidth": (101, 2, (9, 0), (), "FlangeWidth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Height": (102, 2, (9, 0), (), "Height", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PoissonRatio": (51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UsePoissonRatio": (52, 2, (11, 0), (), "UsePoissonRatio", None),
		"WebThickness": (103, 2, (9, 0), (), "WebThickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
		"UsePoissonRatio": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IBeamCrossSectionThickWallTube(DispatchBaseClass):
	'''Beam force cross section - thick wall tube beam'''
	CLSID = IID('{557175E7-72DD-447A-8DB1-319593C34BE1}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_InnerRadius(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "InnerRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_OuterRadius(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "OuterRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PoissonRatio(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UsePoissonRatio(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UsePoissonRatio", None))

	def _set_UsePoissonRatio(self, value):
		if "UsePoissonRatio" in self.__dict__: self.__dict__["UsePoissonRatio"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	InnerRadius = property(_get_InnerRadius, None)
	'''
	InnerRadius

	:type: recurdyn.ProcessNet.IDouble
	'''
	OuterRadius = property(_get_OuterRadius, None)
	'''
	OuterRadius

	:type: recurdyn.ProcessNet.IDouble
	'''
	PoissonRatio = property(_get_PoissonRatio, None)
	'''
	Poisson ratio

	:type: recurdyn.ProcessNet.IDouble
	'''
	UsePoissonRatio = property(_get_UsePoissonRatio, _set_UsePoissonRatio)
	'''
	Use Poisson ratio

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UsePoissonRatio": _set_UsePoissonRatio,
	}
	_prop_map_get_ = {
		"InnerRadius": (101, 2, (9, 0), (), "InnerRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"OuterRadius": (102, 2, (9, 0), (), "OuterRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PoissonRatio": (51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UsePoissonRatio": (52, 2, (11, 0), (), "UsePoissonRatio", None),
	}
	_prop_map_put_ = {
		"UsePoissonRatio": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IBeamCrossSectionThinWallTube(DispatchBaseClass):
	'''Beam force cross section - thin wall tube beam'''
	CLSID = IID('{557175E7-72DD-447A-8DB1-319593C34BE0}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_PoissonRatio(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Radius(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Thickness(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "Thickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UsePoissonRatio(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UsePoissonRatio", None))

	def _set_UsePoissonRatio(self, value):
		if "UsePoissonRatio" in self.__dict__: self.__dict__["UsePoissonRatio"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	PoissonRatio = property(_get_PoissonRatio, None)
	'''
	Poisson ratio

	:type: recurdyn.ProcessNet.IDouble
	'''
	Radius = property(_get_Radius, None)
	'''
	Radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	Thickness = property(_get_Thickness, None)
	'''
	Thickness

	:type: recurdyn.ProcessNet.IDouble
	'''
	UsePoissonRatio = property(_get_UsePoissonRatio, _set_UsePoissonRatio)
	'''
	Use Poisson ratio

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UsePoissonRatio": _set_UsePoissonRatio,
	}
	_prop_map_get_ = {
		"PoissonRatio": (51, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Radius": (101, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Thickness": (102, 2, (9, 0), (), "Thickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UsePoissonRatio": (52, 2, (11, 0), (), "UsePoissonRatio", None),
	}
	_prop_map_put_ = {
		"UsePoissonRatio": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IBody(DispatchBaseClass):
	'''Body'''
	CLSID = IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def BooleanGeometry(self, BooleanType, strName, pBaseGeometry, pActionGeometry):
		'''
		Boolean geometry
		
		:param BooleanType: BooleanType
		:param strName: str
		:param pBaseGeometry: IGeometry
		:param pActionGeometry: IGeometry
		:rtype: recurdyn.ProcessNet.IGeometry
		'''
		ret = self._oleobj_.InvokeTypes(195, LCID, 1, (9, 0), ((3, 1), (8, 1), (9, 1), (9, 1)),BooleanType
			, strName, pBaseGeometry, pActionGeometry)
		if ret is not None:
			ret = Dispatch(ret, 'BooleanGeometry', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')
		return ret

	def BooleanGeometryEx(self, BooleanType, strName, pTargetGeometry, pToolGeometry):
		'''
		performs a boolean operation between the target body and the tool body
		
		:param BooleanType: BooleanType
		:param strName: str
		:param pTargetGeometry: IGeometry
		:param pToolGeometry: IGeometry
		:rtype: recurdyn.ProcessNet.IGeometry
		'''
		ret = self._oleobj_.InvokeTypes(226, LCID, 1, (9, 0), ((3, 1), (8, 1), (9, 1), (9, 1)),BooleanType
			, strName, pTargetGeometry, pToolGeometry)
		if ret is not None:
			ret = Dispatch(ret, 'BooleanGeometryEx', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')
		return ret

	def BooleanGeometryExWidthMulti(self, BooleanType, strName, pTargetGeometry, pMultiToolGeometry):
		'''
		performs a boolean operation between the target body and the list of tool bodies
		
		:param BooleanType: BooleanType
		:param strName: str
		:param pTargetGeometry: IGeometry
		:param pMultiToolGeometry: list[object]
		:rtype: recurdyn.ProcessNet.IGeometry
		'''
		_pMultiToolGeometry_type = True if pMultiToolGeometry and isinstance(pMultiToolGeometry[0], win32com.client.VARIANT) else False
		if not _pMultiToolGeometry_type:
			pMultiToolGeometry = [win32com.client.VARIANT(12, _data) for _data in pMultiToolGeometry]

		ret = self._oleobj_.InvokeTypes(227, LCID, 1, (9, 0), ((3, 1), (8, 1), (9, 1), (8204, 1)),BooleanType
			, strName, pTargetGeometry, pMultiToolGeometry)

		if not _pMultiToolGeometry_type:
			pMultiToolGeometry = [_data.value for _data in pMultiToolGeometry]

		if ret is not None:
			ret = Dispatch(ret, 'BooleanGeometryExWidthMulti', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')
		return ret

	def ChamferSolidGeometry(self, strName, pTarget, pMultiEdges, pFirst, pSecond):
		'''
		Chamfer a solid geometry with edges
		
		:param strName: str
		:param pTarget: IGeometrySolid
		:param pMultiEdges: list[object]
		:param pFirst: list[float]
		:param pSecond: list[float]
		:rtype: recurdyn.ProcessNet.IGeometrySolid
		'''
		_pMultiEdges_type = True if pMultiEdges and isinstance(pMultiEdges[0], win32com.client.VARIANT) else False
		if not _pMultiEdges_type:
			pMultiEdges = [win32com.client.VARIANT(12, _data) for _data in pMultiEdges]

		ret = self._oleobj_.InvokeTypes(286, LCID, 1, (9, 0), ((8, 1), (9, 1), (8204, 1), (8197, 1), (8197, 1)),strName
			, pTarget, pMultiEdges, pFirst, pSecond)

		if not _pMultiEdges_type:
			pMultiEdges = [_data.value for _data in pMultiEdges]

		if ret is not None:
			ret = Dispatch(ret, 'ChamferSolidGeometry', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')
		return ret

	def CombineCurveGeometry(self, bstrName, pMultiCurveGeometry):
		'''
		Creates a combined curve geometry
		
		:param bstrName: str
		:param pMultiCurveGeometry: list[object]
		:rtype: recurdyn.ProcessNet.IGeometryWire
		'''
		_pMultiCurveGeometry_type = True if pMultiCurveGeometry and isinstance(pMultiCurveGeometry[0], win32com.client.VARIANT) else False
		if not _pMultiCurveGeometry_type:
			pMultiCurveGeometry = [win32com.client.VARIANT(12, _data) for _data in pMultiCurveGeometry]

		ret = self._oleobj_.InvokeTypes(239, LCID, 1, (9, 0), ((8, 1), (8204, 1)),bstrName
			, pMultiCurveGeometry)

		if not _pMultiCurveGeometry_type:
			pMultiCurveGeometry = [_data.value for _data in pMultiCurveGeometry]

		if ret is not None:
			ret = Dispatch(ret, 'CombineCurveGeometry', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')
		return ret

	def CreateArcExtrusionGeometry(self, bstrName, pIRefFrame, dArcRadius, dArcStartAngle, dArcEndAngle, dExtrusionLength):
		'''
		Creates an arc extrusion surface geometry
		
		:param bstrName: str
		:param pIRefFrame: IReferenceFrame
		:param dArcRadius: float
		:param dArcStartAngle: float
		:param dArcEndAngle: float
		:param dExtrusionLength: float
		:rtype: recurdyn.ProcessNet.IGeometryArcExtrusion
		'''
		ret = self._oleobj_.InvokeTypes(238, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (5, 1), (5, 1), (5, 1)),bstrName
			, pIRefFrame, dArcRadius, dArcStartAngle, dArcEndAngle, dExtrusionLength
			)
		if ret is not None:
			ret = Dispatch(ret, 'CreateArcExtrusionGeometry', '{7338A8FC-4CD7-472D-B764-578B96254856}')
		return ret

	def CreateArcGeometry(self, strName, pCenterPoint, pStartPoint, pDirection, dAngle):
		'''
		Creates an arc Geometry
		
		:param strName: str
		:param pCenterPoint: list[float]
		:param pStartPoint: list[float]
		:param pDirection: list[float]
		:param dAngle: float
		:rtype: recurdyn.ProcessNet.IGeometryArc
		'''
		ret = self._oleobj_.InvokeTypes(193, LCID, 1, (9, 0), ((8, 1), (8197, 1), (8197, 1), (8197, 1), (5, 1)),strName
			, pCenterPoint, pStartPoint, pDirection, dAngle)
		if ret is not None:
			ret = Dispatch(ret, 'CreateArcGeometry', '{6615A98C-4753-43E7-BFC6-D7E2EC7D1737}')
		return ret

	def CreateArcGeometryWithThreePoints(self, strName, pThreePoint):
		'''
		Creates an arc Geometry with three points
		
		:param strName: str
		:param pThreePoint: list[object]
		:rtype: recurdyn.ProcessNet.IGeometryArc
		'''
		_pThreePoint_type = True if pThreePoint and isinstance(pThreePoint[0], win32com.client.VARIANT) else False
		if not _pThreePoint_type:
			pThreePoint = [win32com.client.VARIANT(12, _data) for _data in pThreePoint]

		ret = self._oleobj_.InvokeTypes(277, LCID, 1, (9, 0), ((8, 1), (8204, 1)),strName
			, pThreePoint)

		if not _pThreePoint_type:
			pThreePoint = [_data.value for _data in pThreePoint]

		if ret is not None:
			ret = Dispatch(ret, 'CreateArcGeometryWithThreePoints', '{6615A98C-4753-43E7-BFC6-D7E2EC7D1737}')
		return ret

	def CreateArcRevolutionGeometry(self, bstrName, pIRefFrame, dArcRadius, dArcStartAngle, dArcEndAngle, dRevRadius, dRevStartAngle, dRevEndAngle):
		'''
		Creates an arc revolution surface geometry
		
		:param bstrName: str
		:param pIRefFrame: IReferenceFrame
		:param dArcRadius: float
		:param dArcStartAngle: float
		:param dArcEndAngle: float
		:param dRevRadius: float
		:param dRevStartAngle: float
		:param dRevEndAngle: float
		:rtype: recurdyn.ProcessNet.IGeometryArcRevolution
		'''
		ret = self._oleobj_.InvokeTypes(237, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (5, 1), (5, 1), (5, 1), (5, 1), (5, 1)),bstrName
			, pIRefFrame, dArcRadius, dArcStartAngle, dArcEndAngle, dRevRadius
			, dRevStartAngle, dRevEndAngle)
		if ret is not None:
			ret = Dispatch(ret, 'CreateArcRevolutionGeometry', '{CC63D830-4DFB-4DFC-920E-966E02DCCE51}')
		return ret

	def CreateArcRevolutionGeometryWithArcGeometry(self, bstrName, pWireGeometry, pRevPoint, pRevDirection, dRevAngle):
		'''
		Creates an arc revolution surface geometry with an arc geometry
		
		:param bstrName: str
		:param pWireGeometry: IGeometryWire
		:param pRevPoint: list[float]
		:param pRevDirection: list[float]
		:param dRevAngle: float
		:rtype: recurdyn.ProcessNet.IGeometryArcRevolution
		'''
		ret = self._oleobj_.InvokeTypes(249, LCID, 1, (9, 0), ((8, 1), (9, 1), (8197, 1), (8197, 1), (5, 1)),bstrName
			, pWireGeometry, pRevPoint, pRevDirection, dRevAngle)
		if ret is not None:
			ret = Dispatch(ret, 'CreateArcRevolutionGeometryWithArcGeometry', '{CC63D830-4DFB-4DFC-920E-966E02DCCE51}')
		return ret

	def CreateBooleanSolidGeometry(self, BooleanType, strName, pBaseGeometry, pActionGeometry):
		'''
		Create a boolean geometry
		
		:param BooleanType: BooleanType
		:param strName: str
		:param pBaseGeometry: IGeometry
		:param pActionGeometry: IGeometry
		:rtype: recurdyn.ProcessNet.IGeometrySolidBoolean
		'''
		ret = self._oleobj_.InvokeTypes(303, LCID, 1, (9, 0), ((3, 1), (8, 1), (9, 1), (9, 1)),BooleanType
			, strName, pBaseGeometry, pActionGeometry)
		if ret is not None:
			ret = Dispatch(ret, 'CreateBooleanSolidGeometry', '{4F1C59D0-B6B4-43F8-8CBC-7253AB041F42}')
		return ret

	def CreateBooleanSolidGeometryMulti(self, BooleanType, strName, pBaseGeometry, pMultiToolGeometry):
		'''
		Create a boolean geometry with multi geometries
		
		:param BooleanType: BooleanType
		:param strName: str
		:param pBaseGeometry: IGeometry
		:param pMultiToolGeometry: list[object]
		:rtype: recurdyn.ProcessNet.IGeometrySolidBoolean
		'''
		_pMultiToolGeometry_type = True if pMultiToolGeometry and isinstance(pMultiToolGeometry[0], win32com.client.VARIANT) else False
		if not _pMultiToolGeometry_type:
			pMultiToolGeometry = [win32com.client.VARIANT(12, _data) for _data in pMultiToolGeometry]

		ret = self._oleobj_.InvokeTypes(314, LCID, 1, (9, 0), ((3, 1), (8, 1), (9, 1), (8204, 1)),BooleanType
			, strName, pBaseGeometry, pMultiToolGeometry)

		if not _pMultiToolGeometry_type:
			pMultiToolGeometry = [_data.value for _data in pMultiToolGeometry]

		if ret is not None:
			ret = Dispatch(ret, 'CreateBooleanSolidGeometryMulti', '{4F1C59D0-B6B4-43F8-8CBC-7253AB041F42}')
		return ret

	def CreateBoxGeometry(self, strName, pRefFrame, dWidth, dHeight, dDepth):
		'''
		Creates a box geometry
		
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:param dWidth: float
		:param dHeight: float
		:param dDepth: float
		:rtype: recurdyn.ProcessNet.IGeometryBox
		'''
		ret = self._oleobj_.InvokeTypes(182, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (5, 1), (5, 1)),strName
			, pRefFrame, dWidth, dHeight, dDepth)
		if ret is not None:
			ret = Dispatch(ret, 'CreateBoxGeometry', '{7B6155CC-0035-4449-9748-DFCE0956F5D9}')
		return ret

	def CreateBoxGeometryWithPointPoint(self, strName, pFirstPoint, pSecondPoint):
		'''
		Creates a box geometry with points
		
		:param strName: str
		:param pFirstPoint: list[float]
		:param pSecondPoint: list[float]
		:rtype: recurdyn.ProcessNet.IGeometryBox
		'''
		ret = self._oleobj_.InvokeTypes(320, LCID, 1, (9, 0), ((8, 1), (8197, 1), (8197, 1)),strName
			, pFirstPoint, pSecondPoint)
		if ret is not None:
			ret = Dispatch(ret, 'CreateBoxGeometryWithPointPoint', '{7B6155CC-0035-4449-9748-DFCE0956F5D9}')
		return ret

	def CreateChamferSolidGeometry(self, strName, pTarget, pMultiEdges, dFirst, dSecond):
		'''
		Create a chamfer solid geometry with edges
		
		:param strName: str
		:param pTarget: IGeometrySolid
		:param pMultiEdges: list[object]
		:param dFirst: float
		:param dSecond: float
		:rtype: recurdyn.ProcessNet.IGeometrySolidChamfer
		'''
		_pMultiEdges_type = True if pMultiEdges and isinstance(pMultiEdges[0], win32com.client.VARIANT) else False
		if not _pMultiEdges_type:
			pMultiEdges = [win32com.client.VARIANT(12, _data) for _data in pMultiEdges]

		ret = self._oleobj_.InvokeTypes(300, LCID, 1, (9, 0), ((8, 1), (9, 1), (8204, 1), (5, 1), (5, 1)),strName
			, pTarget, pMultiEdges, dFirst, dSecond)

		if not _pMultiEdges_type:
			pMultiEdges = [_data.value for _data in pMultiEdges]

		if ret is not None:
			ret = Dispatch(ret, 'CreateChamferSolidGeometry', '{7E1C6724-070E-41D1-A9F7-B771847EB47D}')
		return ret

	def CreateCircleGeometry(self, strName, pRefFrame, dRadius):
		'''
		Creates a circle geometry
		
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:param dRadius: float
		:rtype: recurdyn.ProcessNet.IGeometryCircle
		'''
		ret = self._oleobj_.InvokeTypes(190, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1)),strName
			, pRefFrame, dRadius)
		if ret is not None:
			ret = Dispatch(ret, 'CreateCircleGeometry', '{4B132713-20F9-475D-B175-CED5735E2825}')
		return ret

	def CreateCircleGeometryWithThreePoints(self, strName, pThreePoint):
		'''
		Creates a circle geometry with three points
		
		:param strName: str
		:param pThreePoint: list[object]
		:rtype: recurdyn.ProcessNet.IGeometryCircle
		'''
		_pThreePoint_type = True if pThreePoint and isinstance(pThreePoint[0], win32com.client.VARIANT) else False
		if not _pThreePoint_type:
			pThreePoint = [win32com.client.VARIANT(12, _data) for _data in pThreePoint]

		ret = self._oleobj_.InvokeTypes(276, LCID, 1, (9, 0), ((8, 1), (8204, 1)),strName
			, pThreePoint)

		if not _pThreePoint_type:
			pThreePoint = [_data.value for _data in pThreePoint]

		if ret is not None:
			ret = Dispatch(ret, 'CreateCircleGeometryWithThreePoints', '{4B132713-20F9-475D-B175-CED5735E2825}')
		return ret

	def CreateConeGeometry(self, strName, pFirstPoint, pSecondPoint, dTopRadius, dBottomRadius):
		'''
		Creates a cone geometry
		
		:param strName: str
		:param pFirstPoint: list[float]
		:param pSecondPoint: list[float]
		:param dTopRadius: float
		:param dBottomRadius: float
		:rtype: recurdyn.ProcessNet.IGeometryCone
		'''
		ret = self._oleobj_.InvokeTypes(187, LCID, 1, (9, 0), ((8, 1), (8197, 1), (8197, 1), (5, 1), (5, 1)),strName
			, pFirstPoint, pSecondPoint, dTopRadius, dBottomRadius)
		if ret is not None:
			ret = Dispatch(ret, 'CreateConeGeometry', '{1A304704-02AE-4939-8CD1-0DBCDE3F526B}')
		return ret

	def CreateCurveUsingImprint(self, strName, pTargetEntity, pToolEntity):
		'''
		Create a curve using imprint operation. A curve is created on the face of the geometry
		
		:param strName: str
		:param pTargetEntity: IGeometry
		:param pToolEntity: IGeometry
		:rtype: recurdyn.ProcessNet.IGeometryWire
		'''
		ret = self._oleobj_.InvokeTypes(261, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pTargetEntity, pToolEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateCurveUsingImprint', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')
		return ret

	def CreateCylinderGeometry(self, strName, pRefFrame, dRadius, dHeight):
		'''
		Creates a cylinder geometry
		
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:param dRadius: float
		:param dHeight: float
		:rtype: recurdyn.ProcessNet.IGeometryCylinder
		'''
		ret = self._oleobj_.InvokeTypes(180, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (5, 1)),strName
			, pRefFrame, dRadius, dHeight)
		if ret is not None:
			ret = Dispatch(ret, 'CreateCylinderGeometry', '{5810C7E4-F627-4171-9D64-4BC97F14BB8E}')
		return ret

	def CreateCylinderGeometryWithPointPointRadius(self, strName, pFirstPoint, pSecondPoint, dRadius):
		'''
		Creates a cylinder geometry With PointPointRadius
		
		:param strName: str
		:param pFirstPoint: list[float]
		:param pSecondPoint: list[float]
		:param dRadius: float
		:rtype: recurdyn.ProcessNet.IGeometryCylinder
		'''
		ret = self._oleobj_.InvokeTypes(181, LCID, 1, (9, 0), ((8, 1), (8197, 1), (8197, 1), (5, 1)),strName
			, pFirstPoint, pSecondPoint, dRadius)
		if ret is not None:
			ret = Dispatch(ret, 'CreateCylinderGeometryWithPointPointRadius', '{5810C7E4-F627-4171-9D64-4BC97F14BB8E}')
		return ret

	def CreateEdgeCurveGeometry(self, strName, pMultiEdges):
		'''
		Creates a edge curve geometry
		
		:param strName: str
		:param pMultiEdges: list[object]
		:rtype: recurdyn.ProcessNet.IGeometryEdgeCurve
		'''
		_pMultiEdges_type = True if pMultiEdges and isinstance(pMultiEdges[0], win32com.client.VARIANT) else False
		if not _pMultiEdges_type:
			pMultiEdges = [win32com.client.VARIANT(12, _data) for _data in pMultiEdges]

		ret = self._oleobj_.InvokeTypes(257, LCID, 1, (9, 0), ((8, 1), (8204, 1)),strName
			, pMultiEdges)

		if not _pMultiEdges_type:
			pMultiEdges = [_data.value for _data in pMultiEdges]

		if ret is not None:
			ret = Dispatch(ret, 'CreateEdgeCurveGeometry', '{6FA36EFD-91A9-49CF-AC3F-595F8CDCD6AD}')
		return ret

	def CreateEdgeCurveGeometryContinuous(self, strName, geo, Val):
		'''
		Creates a edge curve geometry with continuously conected edges less than tolerance angle(degree)
		
		:param strName: str
		:param geo: IGeometryEdge
		:param Val: float
		:rtype: recurdyn.ProcessNet.IGeometryEdgeCurve
		'''
		ret = self._oleobj_.InvokeTypes(259, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1)),strName
			, geo, Val)
		if ret is not None:
			ret = Dispatch(ret, 'CreateEdgeCurveGeometryContinuous', '{6FA36EFD-91A9-49CF-AC3F-595F8CDCD6AD}')
		return ret

	def CreateEllipsoidGeometry(self, strName, pRefFrame, dRadius, dRadiusY, dRadiusZ):
		'''
		Creates an ellipsoid geometry
		
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:param dRadius: float
		:param dRadiusY: float
		:param dRadiusZ: float
		:rtype: recurdyn.ProcessNet.IGeometrySphere
		'''
		ret = self._oleobj_.InvokeTypes(184, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (5, 1), (5, 1)),strName
			, pRefFrame, dRadius, dRadiusY, dRadiusZ)
		if ret is not None:
			ret = Dispatch(ret, 'CreateEllipsoidGeometry', '{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')
		return ret

	def CreateFaceSurfaceGeometry(self, strName, pMultiFaces):
		'''
		Creates a face surface geometry
		
		:param strName: str
		:param pMultiFaces: list[object]
		:rtype: recurdyn.ProcessNet.IGeometryFaceSurface
		'''
		_pMultiFaces_type = True if pMultiFaces and isinstance(pMultiFaces[0], win32com.client.VARIANT) else False
		if not _pMultiFaces_type:
			pMultiFaces = [win32com.client.VARIANT(12, _data) for _data in pMultiFaces]

		ret = self._oleobj_.InvokeTypes(256, LCID, 1, (9, 0), ((8, 1), (8204, 1)),strName
			, pMultiFaces)

		if not _pMultiFaces_type:
			pMultiFaces = [_data.value for _data in pMultiFaces]

		if ret is not None:
			ret = Dispatch(ret, 'CreateFaceSurfaceGeometry', '{A376DBCC-6EA1-4170-97B7-7208ECE52A76}')
		return ret

	def CreateFaceSurfaceGeometryContinuous(self, strName, geo, Val):
		'''
		Create a face surface geometry with continuously conected faces less than tolerance angle(degree)
		
		:param strName: str
		:param geo: IGeometryFace
		:param Val: float
		:rtype: recurdyn.ProcessNet.IGeometryFaceSurface
		'''
		ret = self._oleobj_.InvokeTypes(258, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1)),strName
			, geo, Val)
		if ret is not None:
			ret = Dispatch(ret, 'CreateFaceSurfaceGeometryContinuous', '{A376DBCC-6EA1-4170-97B7-7208ECE52A76}')
		return ret

	def CreateFilletSolidGeometry(self, strName, pTarget, pMultiEdges, pRadius):
		'''
		Create a fillet solid geometry with edges
		
		:param strName: str
		:param pTarget: IGeometrySolid
		:param pMultiEdges: list[object]
		:param pRadius: float
		:rtype: recurdyn.ProcessNet.IGeometrySolidFillet
		'''
		_pMultiEdges_type = True if pMultiEdges and isinstance(pMultiEdges[0], win32com.client.VARIANT) else False
		if not _pMultiEdges_type:
			pMultiEdges = [win32com.client.VARIANT(12, _data) for _data in pMultiEdges]

		ret = self._oleobj_.InvokeTypes(301, LCID, 1, (9, 0), ((8, 1), (9, 1), (8204, 1), (5, 1)),strName
			, pTarget, pMultiEdges, pRadius)

		if not _pMultiEdges_type:
			pMultiEdges = [_data.value for _data in pMultiEdges]

		if ret is not None:
			ret = Dispatch(ret, 'CreateFilletSolidGeometry', '{409CE2D0-68BC-48D0-A001-6606020E41A6}')
		return ret

	def CreateGRoadWithFace(self, bstrGRoadName, pFaceList, RefFrame, bstrOutputFileRelativePathName):
		'''
		Create GRoad with Face
		
		:param bstrGRoadName: str
		:param pFaceList: list[object]
		:param RefFrame: IReferenceFrame
		:param bstrOutputFileRelativePathName: str
		:rtype: recurdyn.ProcessNet.IGRoad
		'''
		_pFaceList_type = True if pFaceList and isinstance(pFaceList[0], win32com.client.VARIANT) else False
		if not _pFaceList_type:
			pFaceList = [win32com.client.VARIANT(12, _data) for _data in pFaceList]

		ret = self._oleobj_.InvokeTypes(254, LCID, 1, (9, 0), ((8, 1), (8204, 1), (9, 1), (8, 1)),bstrGRoadName
			, pFaceList, RefFrame, bstrOutputFileRelativePathName)

		if not _pFaceList_type:
			pFaceList = [_data.value for _data in pFaceList]

		if ret is not None:
			ret = Dispatch(ret, 'CreateGRoadWithFace', '{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}')
		return ret

	def CreateGeometrySheet(self, strName, pWireGeometry):
		'''
		Make a sheet geometry
		
		:param strName: str
		:param pWireGeometry: IGeometryWire
		:rtype: recurdyn.ProcessNet.IGeometrySheet
		'''
		ret = self._oleobj_.InvokeTypes(219, LCID, 1, (9, 0), ((8, 1), (9, 1)),strName
			, pWireGeometry)
		if ret is not None:
			ret = Dispatch(ret, 'CreateGeometrySheet', '{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}')
		return ret

	def CreateGeometrySheetWithFilledWire(self, strName, pWireGeometry):
		'''
		Make a sheet geometry with a wire body
		
		:param strName: str
		:param pWireGeometry: IGeometryWire
		:rtype: recurdyn.ProcessNet.IGeometrySheet
		'''
		ret = self._oleobj_.InvokeTypes(280, LCID, 1, (9, 0), ((8, 1), (9, 1)),strName
			, pWireGeometry)
		if ret is not None:
			ret = Dispatch(ret, 'CreateGeometrySheetWithFilledWire', '{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}')
		return ret

	def CreateGeometrySolidWithFilledSurface(self, strName, pSheetGeometry):
		'''
		Make a solid geometry with closed surface
		
		:param strName: str
		:param pSheetGeometry: IGeometrySheet
		:rtype: recurdyn.ProcessNet.IGeometrySolid
		'''
		ret = self._oleobj_.InvokeTypes(274, LCID, 1, (9, 0), ((8, 1), (9, 1)),strName
			, pSheetGeometry)
		if ret is not None:
			ret = Dispatch(ret, 'CreateGeometrySolidWithFilledSurface', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')
		return ret

	def CreateHelixCurveGeometry(self, bstrName, pIRefFrame, dRadius, dPitch, dTotalDepth, Val):
		'''
		Creates an helix curve geometry
		
		:param bstrName: str
		:param pIRefFrame: IReferenceFrame
		:param dRadius: float
		:param dPitch: float
		:param dTotalDepth: float
		:param Val: RotationalDirectionType
		:rtype: recurdyn.ProcessNet.IGeometryHelixCurve
		'''
		ret = self._oleobj_.InvokeTypes(278, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (5, 1), (5, 1), (3, 1)),bstrName
			, pIRefFrame, dRadius, dPitch, dTotalDepth, Val
			)
		if ret is not None:
			ret = Dispatch(ret, 'CreateHelixCurveGeometry', '{0FFFB2FB-E83D-431E-8769-1FCFDFBC6BD5}')
		return ret

	def CreateLinkGeometry(self, strName, pFirstPoint, pSecondPoint, dDepth):
		'''
		Creates a link geometry
		
		:param strName: str
		:param pFirstPoint: list[float]
		:param pSecondPoint: list[float]
		:param dDepth: float
		:rtype: recurdyn.ProcessNet.IGeometryLink
		'''
		ret = self._oleobj_.InvokeTypes(188, LCID, 1, (9, 0), ((8, 1), (8197, 1), (8197, 1), (5, 1)),strName
			, pFirstPoint, pSecondPoint, dDepth)
		if ret is not None:
			ret = Dispatch(ret, 'CreateLinkGeometry', '{AD48AFB0-D8CA-4168-B727-A352242BDFEE}')
		return ret

	def CreateLinkGeometryWithRadius(self, strName, pFirstPoint, pSecondPoint, dFirstRadious, dSecondRadious, dDepth):
		'''
		Creates a link geometry with radius
		
		:param strName: str
		:param pFirstPoint: list[float]
		:param pSecondPoint: list[float]
		:param dFirstRadious: float
		:param dSecondRadious: float
		:param dDepth: float
		:rtype: recurdyn.ProcessNet.IGeometryLink
		'''
		ret = self._oleobj_.InvokeTypes(189, LCID, 1, (9, 0), ((8, 1), (8197, 1), (8197, 1), (5, 0), (5, 1), (5, 1)),strName
			, pFirstPoint, pSecondPoint, dFirstRadious, dSecondRadious, dDepth
			)
		if ret is not None:
			ret = Dispatch(ret, 'CreateLinkGeometryWithRadius', '{AD48AFB0-D8CA-4168-B727-A352242BDFEE}')
		return ret

	def CreateMarker(self, strName, pRefFrame):
		'''
		Creates a marker
		
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IMarker
		'''
		ret = self._oleobj_.InvokeTypes(201, LCID, 1, (9, 0), ((8, 1), (9, 1)),strName
			, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateMarker', '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')
		return ret

	def CreateMarkerWithPointPoint(self, strName, pFirstPoint, pSecondPoint):
		'''
		Creates a marker with two points
		
		:param strName: str
		:param pFirstPoint: list[float]
		:param pSecondPoint: list[float]
		:rtype: recurdyn.ProcessNet.IMarker
		'''
		ret = self._oleobj_.InvokeTypes(202, LCID, 1, (9, 0), ((8, 1), (8197, 1), (8197, 1)),strName
			, pFirstPoint, pSecondPoint)
		if ret is not None:
			ret = Dispatch(ret, 'CreateMarkerWithPointPoint', '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')
		return ret

	def CreateOffsetFaces(self, strName, pFaces, dOffset):
		'''
		Creates a offset surface geometry with faces
		
		:param strName: str
		:param pFaces: list[object]
		:param dOffset: float
		:rtype: recurdyn.ProcessNet.IGeometryFaceSurface
		'''
		_pFaces_type = True if pFaces and isinstance(pFaces[0], win32com.client.VARIANT) else False
		if not _pFaces_type:
			pFaces = [win32com.client.VARIANT(12, _data) for _data in pFaces]

		ret = self._oleobj_.InvokeTypes(306, LCID, 1, (9, 0), ((8, 1), (8204, 1), (5, 1)),strName
			, pFaces, dOffset)

		if not _pFaces_type:
			pFaces = [_data.value for _data in pFaces]

		if ret is not None:
			ret = Dispatch(ret, 'CreateOffsetFaces', '{A376DBCC-6EA1-4170-97B7-7208ECE52A76}')
		return ret

	def CreateOffsetSurfaceGeometry(self, strName, pSurface, dOffset):
		'''
		Creates a offset surface geometry with a surface
		
		:param strName: str
		:param pSurface: IGeometry
		:param dOffset: float
		:rtype: recurdyn.ProcessNet.IGeometryFaceSurface
		'''
		ret = self._oleobj_.InvokeTypes(272, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1)),strName
			, pSurface, dOffset)
		if ret is not None:
			ret = Dispatch(ret, 'CreateOffsetSurfaceGeometry', '{A376DBCC-6EA1-4170-97B7-7208ECE52A76}')
		return ret

	def CreateOutlineGeometry(self, strName, pMultiPoint):
		'''
		Creates an outline geometry
		
		:param strName: str
		:param pMultiPoint: list[object]
		:rtype: recurdyn.ProcessNet.IGeometryOutline
		'''
		_pMultiPoint_type = True if pMultiPoint and isinstance(pMultiPoint[0], win32com.client.VARIANT) else False
		if not _pMultiPoint_type:
			pMultiPoint = [win32com.client.VARIANT(12, _data) for _data in pMultiPoint]

		ret = self._oleobj_.InvokeTypes(192, LCID, 1, (9, 0), ((8, 1), (8204, 1)),strName
			, pMultiPoint)

		if not _pMultiPoint_type:
			pMultiPoint = [_data.value for _data in pMultiPoint]

		if ret is not None:
			ret = Dispatch(ret, 'CreateOutlineGeometry', '{31C17D32-0501-4F95-96DC-5ED97F6994A6}')
		return ret

	def CreateOutlineGeometryWithFile(self, strName, strFileName):
		'''
		Creates a outline geometry with file
		
		:param strName: str
		:param strFileName: str
		:rtype: recurdyn.ProcessNet.IGeometryOutline
		'''
		ret = self._oleobj_.InvokeTypes(263, LCID, 1, (9, 0), ((8, 1), (8, 1)),strName
			, strFileName)
		if ret is not None:
			ret = Dispatch(ret, 'CreateOutlineGeometryWithFile', '{31C17D32-0501-4F95-96DC-5ED97F6994A6}')
		return ret

	def CreateOutlineSurfaceGeometry(self, strName, pMultiCurve):
		'''
		Creates an outline surface geometry
		
		:param strName: str
		:param pMultiCurve: list[object]
		:rtype: recurdyn.ProcessNet.IGeometryOutlineSurface
		'''
		_pMultiCurve_type = True if pMultiCurve and isinstance(pMultiCurve[0], win32com.client.VARIANT) else False
		if not _pMultiCurve_type:
			pMultiCurve = [win32com.client.VARIANT(12, _data) for _data in pMultiCurve]

		ret = self._oleobj_.InvokeTypes(207, LCID, 1, (9, 0), ((8, 1), (8204, 1)),strName
			, pMultiCurve)

		if not _pMultiCurve_type:
			pMultiCurve = [_data.value for _data in pMultiCurve]

		if ret is not None:
			ret = Dispatch(ret, 'CreateOutlineSurfaceGeometry', '{733031A0-28F6-4064-9C40-FDC74CFA015E}')
		return ret

	def CreateParametricPoint(self, strName, pPoint, pRefMarker):
		'''
		Creates a parametric point
		
		:param strName: str
		:param pPoint: list[float]
		:param pRefMarker: IMarker
		:rtype: recurdyn.ProcessNet.IParametricPoint
		'''
		ret = self._oleobj_.InvokeTypes(198, LCID, 1, (9, 0), ((8, 1), (8197, 1), (9, 1)),strName
			, pPoint, pRefMarker)
		if ret is not None:
			ret = Dispatch(ret, 'CreateParametricPoint', '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')
		return ret

	def CreateParametricPointWithText(self, strName, strText, pRefMarker):
		'''
		Creates a parametric point with text
		
		:param strName: str
		:param strText: str
		:param pRefMarker: IMarker
		:rtype: recurdyn.ProcessNet.IParametricPoint
		'''
		ret = self._oleobj_.InvokeTypes(215, LCID, 1, (9, 0), ((8, 1), (8, 1), (9, 1)),strName
			, strText, pRefMarker)
		if ret is not None:
			ret = Dispatch(ret, 'CreateParametricPointWithText', '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')
		return ret

	def CreateParametricValue(self, strName, dValue):
		'''
		Creates a parametric value
		
		:param strName: str
		:param dValue: float
		:rtype: recurdyn.ProcessNet.IParametricValue
		'''
		ret = self._oleobj_.InvokeTypes(199, LCID, 1, (9, 0), ((8, 1), (5, 1)),strName
			, dValue)
		if ret is not None:
			ret = Dispatch(ret, 'CreateParametricValue', '{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')
		return ret

	def CreateParametricValueWithText(self, strName, strText):
		'''
		Creates a parametric value with text
		
		:param strName: str
		:param strText: str
		:rtype: recurdyn.ProcessNet.IParametricValue
		'''
		ret = self._oleobj_.InvokeTypes(236, LCID, 1, (9, 0), ((8, 1), (8, 1)),strName
			, strText)
		if ret is not None:
			ret = Dispatch(ret, 'CreateParametricValueWithText', '{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')
		return ret

	def CreatePrismGeometry(self, strName, pRefFrame, dRadius, dHeight, NSides):
		'''
		Creates a prism geometry
		
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:param dRadius: float
		:param dHeight: float
		:param NSides: int
		:rtype: recurdyn.ProcessNet.IGeometryPrism
		'''
		ret = self._oleobj_.InvokeTypes(186, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (5, 1), (3, 1)),strName
			, pRefFrame, dRadius, dHeight, NSides)
		if ret is not None:
			ret = Dispatch(ret, 'CreatePrismGeometry', '{CD73C8BF-C8F4-451C-BE3F-E7E06BA247FD}')
		return ret

	def CreateRoadDataUsingOutline(self, strName, pMultiCurve):
		'''
		Creates a road data using multiple outline 
		
		:param strName: str
		:param pMultiCurve: list[object]
		:rtype: recurdyn.ProcessNet.IRoadData
		'''
		_pMultiCurve_type = True if pMultiCurve and isinstance(pMultiCurve[0], win32com.client.VARIANT) else False
		if not _pMultiCurve_type:
			pMultiCurve = [win32com.client.VARIANT(12, _data) for _data in pMultiCurve]

		ret = self._oleobj_.InvokeTypes(229, LCID, 1, (9, 0), ((8, 1), (8204, 1)),strName
			, pMultiCurve)

		if not _pMultiCurve_type:
			pMultiCurve = [_data.value for _data in pMultiCurve]

		if ret is not None:
			ret = Dispatch(ret, 'CreateRoadDataUsingOutline', '{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}')
		return ret

	def CreateRoadDataUsingOutline2(self, strName, pMultiCurve, Type):
		'''
		Creates a road data using multiple outline with geometry detail level
		
		:param strName: str
		:param pMultiCurve: list[object]
		:param Type: GeometryDetailLevelType
		:rtype: recurdyn.ProcessNet.IRoadData
		'''
		_pMultiCurve_type = True if pMultiCurve and isinstance(pMultiCurve[0], win32com.client.VARIANT) else False
		if not _pMultiCurve_type:
			pMultiCurve = [win32com.client.VARIANT(12, _data) for _data in pMultiCurve]

		ret = self._oleobj_.InvokeTypes(262, LCID, 1, (9, 0), ((8, 1), (8204, 1), (3, 1)),strName
			, pMultiCurve, Type)

		if not _pMultiCurve_type:
			pMultiCurve = [_data.value for _data in pMultiCurve]

		if ret is not None:
			ret = Dispatch(ret, 'CreateRoadDataUsingOutline2', '{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}')
		return ret

	def CreateRoadDataUsingOutline3(self, strName, pMultiCurve, dPlaneTolerance):
		'''
		Creates a road data using multiple outline with the surface plane tolerance
		
		:param strName: str
		:param pMultiCurve: list[object]
		:param dPlaneTolerance: float
		:rtype: recurdyn.ProcessNet.IRoadData
		'''
		_pMultiCurve_type = True if pMultiCurve and isinstance(pMultiCurve[0], win32com.client.VARIANT) else False
		if not _pMultiCurve_type:
			pMultiCurve = [win32com.client.VARIANT(12, _data) for _data in pMultiCurve]

		ret = self._oleobj_.InvokeTypes(268, LCID, 1, (9, 0), ((8, 1), (8204, 1), (5, 1)),strName
			, pMultiCurve, dPlaneTolerance)

		if not _pMultiCurve_type:
			pMultiCurve = [_data.value for _data in pMultiCurve]

		if ret is not None:
			ret = Dispatch(ret, 'CreateRoadDataUsingOutline3', '{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}')
		return ret

	def CreateRoadDataUsingSpline(self, strName, pMultiCurve, dTolerance):
		'''
		Creates a road data using multiple spline
		
		:param strName: str
		:param pMultiCurve: list[object]
		:param dTolerance: float
		:rtype: recurdyn.ProcessNet.IRoadData
		'''
		_pMultiCurve_type = True if pMultiCurve and isinstance(pMultiCurve[0], win32com.client.VARIANT) else False
		if not _pMultiCurve_type:
			pMultiCurve = [win32com.client.VARIANT(12, _data) for _data in pMultiCurve]

		ret = self._oleobj_.InvokeTypes(228, LCID, 1, (9, 0), ((8, 1), (8204, 1), (5, 1)),strName
			, pMultiCurve, dTolerance)

		if not _pMultiCurve_type:
			pMultiCurve = [_data.value for _data in pMultiCurve]

		if ret is not None:
			ret = Dispatch(ret, 'CreateRoadDataUsingSpline', '{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}')
		return ret

	def CreateSewSurfaceGeometry(self, strName, pSurface, dGap):
		'''
		Sew a surface geometry
		
		:param strName: str
		:param pSurface: IGeometry
		:param dGap: float
		:rtype: recurdyn.ProcessNet.IGeometryFaceSurface
		'''
		ret = self._oleobj_.InvokeTypes(275, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1)),strName
			, pSurface, dGap)
		if ret is not None:
			ret = Dispatch(ret, 'CreateSewSurfaceGeometry', '{A376DBCC-6EA1-4170-97B7-7208ECE52A76}')
		return ret

	def CreateShellSolidGeometry(self, strName, pTarget, pRemoveFaces, dOffset, pOffsetFaces, pOffsetValues, dir):
		'''
		Create a shell solid geometry with faces
		
		:param strName: str
		:param pTarget: IGeometrySolid
		:param pRemoveFaces: list[object]
		:param dOffset: float
		:param pOffsetFaces: list[object]
		:param pOffsetValues: list[float]
		:param dir: CreateShellDirection
		:rtype: recurdyn.ProcessNet.IGeometrySolidShell
		'''
		_pRemoveFaces_type = True if pRemoveFaces and isinstance(pRemoveFaces[0], win32com.client.VARIANT) else False
		if not _pRemoveFaces_type:
			pRemoveFaces = [win32com.client.VARIANT(12, _data) for _data in pRemoveFaces]
		_pOffsetFaces_type = True if pOffsetFaces and isinstance(pOffsetFaces[0], win32com.client.VARIANT) else False
		if not _pOffsetFaces_type:
			pOffsetFaces = [win32com.client.VARIANT(12, _data) for _data in pOffsetFaces]

		ret = self._oleobj_.InvokeTypes(302, LCID, 1, (9, 0), ((8, 1), (9, 1), (8204, 1), (5, 1), (8204, 1), (8197, 1), (3, 1)),strName
			, pTarget, pRemoveFaces, dOffset, pOffsetFaces, pOffsetValues
			, dir)

		if not _pRemoveFaces_type:
			pRemoveFaces = [_data.value for _data in pRemoveFaces]
		if not _pOffsetFaces_type:
			pOffsetFaces = [_data.value for _data in pOffsetFaces]

		if ret is not None:
			ret = Dispatch(ret, 'CreateShellSolidGeometry', '{93D1E2EB-3542-44C8-8EC3-C0E1653B6788}')
		return ret

	def CreateSolidGeometyWithRegion(self, pSolid):
		'''
		Create solid geometries with regions
		
		:param pSolid: IGeometry
		'''
		return self._oleobj_.InvokeTypes(295, LCID, 1, (24, 0), ((9, 1),),pSolid
			)


	def CreateSphereGeometry(self, strName, pRefFrame, dRadius):
		'''
		Creates a sphere geometry
		
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:param dRadius: float
		:rtype: recurdyn.ProcessNet.IGeometrySphere
		'''
		ret = self._oleobj_.InvokeTypes(183, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1)),strName
			, pRefFrame, dRadius)
		if ret is not None:
			ret = Dispatch(ret, 'CreateSphereGeometry', '{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')
		return ret

	def CreateSplineGeometry(self, strName, pMultiPoint):
		'''
		Creates a spline geometry
		
		:param strName: str
		:param pMultiPoint: list[object]
		:rtype: recurdyn.ProcessNet.IGeometrySpline
		'''
		_pMultiPoint_type = True if pMultiPoint and isinstance(pMultiPoint[0], win32com.client.VARIANT) else False
		if not _pMultiPoint_type:
			pMultiPoint = [win32com.client.VARIANT(12, _data) for _data in pMultiPoint]

		ret = self._oleobj_.InvokeTypes(191, LCID, 1, (9, 0), ((8, 1), (8204, 1)),strName
			, pMultiPoint)

		if not _pMultiPoint_type:
			pMultiPoint = [_data.value for _data in pMultiPoint]

		if ret is not None:
			ret = Dispatch(ret, 'CreateSplineGeometry', '{159B4280-8FD8-4847-884B-84EC26F963FA}')
		return ret

	def CreateSplineGeometryWithFile(self, strName, strFileName):
		'''
		Creates a spline geometry with file
		
		:param strName: str
		:param strFileName: str
		:rtype: recurdyn.ProcessNet.IGeometrySpline
		'''
		ret = self._oleobj_.InvokeTypes(216, LCID, 1, (9, 0), ((8, 1), (8, 1)),strName
			, strFileName)
		if ret is not None:
			ret = Dispatch(ret, 'CreateSplineGeometryWithFile', '{159B4280-8FD8-4847-884B-84EC26F963FA}')
		return ret

	def CreateSplineSurfaceGeometry(self, strName, pMultiCurve):
		'''
		Creates a spline surface geometry
		
		:param strName: str
		:param pMultiCurve: list[object]
		:rtype: recurdyn.ProcessNet.IGeometrySplineSurface
		'''
		_pMultiCurve_type = True if pMultiCurve and isinstance(pMultiCurve[0], win32com.client.VARIANT) else False
		if not _pMultiCurve_type:
			pMultiCurve = [win32com.client.VARIANT(12, _data) for _data in pMultiCurve]

		ret = self._oleobj_.InvokeTypes(206, LCID, 1, (9, 0), ((8, 1), (8204, 1)),strName
			, pMultiCurve)

		if not _pMultiCurve_type:
			pMultiCurve = [_data.value for _data in pMultiCurve]

		if ret is not None:
			ret = Dispatch(ret, 'CreateSplineSurfaceGeometry', '{CC8BC813-F31C-4B25-A652-7B110AF60394}')
		return ret

	def CreateThickenFaces(self, strName, pFaces, dThicknessFront, dThicknessBack):
		'''
		Thicken faces into a solid geometry
		
		:param strName: str
		:param pFaces: list[object]
		:param dThicknessFront: float
		:param dThicknessBack: float
		:rtype: recurdyn.ProcessNet.IGeometrySolid
		'''
		_pFaces_type = True if pFaces and isinstance(pFaces[0], win32com.client.VARIANT) else False
		if not _pFaces_type:
			pFaces = [win32com.client.VARIANT(12, _data) for _data in pFaces]

		ret = self._oleobj_.InvokeTypes(313, LCID, 1, (9, 0), ((8, 1), (8204, 1), (5, 1), (5, 1)),strName
			, pFaces, dThicknessFront, dThicknessBack)

		if not _pFaces_type:
			pFaces = [_data.value for _data in pFaces]

		if ret is not None:
			ret = Dispatch(ret, 'CreateThickenFaces', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')
		return ret

	def CreateThickenSurfaceGeometry(self, strName, pSurface, dThicknessFront, dThicknessBack):
		'''
		Thicken a surface geometry into a solid geometry
		
		:param strName: str
		:param pSurface: IGeometry
		:param dThicknessFront: float
		:param dThicknessBack: float
		:rtype: recurdyn.ProcessNet.IGeometrySolid
		'''
		ret = self._oleobj_.InvokeTypes(273, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (5, 1)),strName
			, pSurface, dThicknessFront, dThicknessBack)
		if ret is not None:
			ret = Dispatch(ret, 'CreateThickenSurfaceGeometry', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')
		return ret

	def CreateTorusGeometry(self, strName, pRefFrame, dMajorRadius, dMinorRadius):
		'''
		Creates a torus geometry
		
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:param dMajorRadius: float
		:param dMinorRadius: float
		:rtype: recurdyn.ProcessNet.IGeometryTorus
		'''
		ret = self._oleobj_.InvokeTypes(185, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (5, 1)),strName
			, pRefFrame, dMajorRadius, dMinorRadius)
		if ret is not None:
			ret = Dispatch(ret, 'CreateTorusGeometry', '{92A1D6C1-1B9F-4A5A-AA3E-164073FAA5FB}')
		return ret

	def CreateTorusGeometryWithAngle(self, strName, pRefFrame, dMajorRadius, dMinorRadius, dAngle):
		'''
		Creates a torus geometry with angle
		
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:param dMajorRadius: float
		:param dMinorRadius: float
		:param dAngle: float
		:rtype: recurdyn.ProcessNet.IGeometryTorus
		'''
		ret = self._oleobj_.InvokeTypes(248, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (5, 1), (5, 1)),strName
			, pRefFrame, dMajorRadius, dMinorRadius, dAngle)
		if ret is not None:
			ret = Dispatch(ret, 'CreateTorusGeometryWithAngle', '{92A1D6C1-1B9F-4A5A-AA3E-164073FAA5FB}')
		return ret

	def CreateUVSurfaceGeometry(self, strName, pSurface, pFirstEdgeGroup, pThirdEdgeGroup, bFillHoles):
		'''
		Creates a UV surface geometry with a surface
		
		:param strName: str
		:param pSurface: IGeometry
		:param pFirstEdgeGroup: list[str]
		:param pThirdEdgeGroup: list[str]
		:param bFillHoles: bool
		:rtype: recurdyn.ProcessNet.IGeometrySheetUVSurface
		'''
		ret = self._oleobj_.InvokeTypes(318, LCID, 1, (9, 0), ((8, 1), (9, 1), (8200, 1), (8200, 1), (11, 1)),strName
			, pSurface, pFirstEdgeGroup, pThirdEdgeGroup, bFillHoles)
		if ret is not None:
			ret = Dispatch(ret, 'CreateUVSurfaceGeometry', '{ED1BD483-9372-48BA-BBC2-AC349EB1C6F3}')
		return ret

	def CreateUVSurfaceGeometryWithFace(self, strName, pFace, pFirstEdgeGroup, pThirdEdgeGroup, bFillHoles):
		'''
		Creates a UV surface geometry with a face
		
		:param strName: str
		:param pFace: IGeometryFace
		:param pFirstEdgeGroup: list[str]
		:param pThirdEdgeGroup: list[str]
		:param bFillHoles: bool
		:rtype: recurdyn.ProcessNet.IGeometrySheetUVSurface
		'''
		ret = self._oleobj_.InvokeTypes(319, LCID, 1, (9, 0), ((8, 1), (9, 1), (8200, 1), (8200, 1), (11, 1)),strName
			, pFace, pFirstEdgeGroup, pThirdEdgeGroup, bFillHoles)
		if ret is not None:
			ret = Dispatch(ret, 'CreateUVSurfaceGeometryWithFace', '{ED1BD483-9372-48BA-BBC2-AC349EB1C6F3}')
		return ret

	def DeleteEdges(self, pGeometry, pMultiEdges):
		'''
		Delete edges of a body
		
		:param pGeometry: IGeometry
		:param pMultiEdges: list[object]
		:rtype: recurdyn.ProcessNet.IGeometry
		'''
		_pMultiEdges_type = True if pMultiEdges and isinstance(pMultiEdges[0], win32com.client.VARIANT) else False
		if not _pMultiEdges_type:
			pMultiEdges = [win32com.client.VARIANT(12, _data) for _data in pMultiEdges]

		ret = self._oleobj_.InvokeTypes(265, LCID, 1, (9, 0), ((9, 1), (8204, 1)),pGeometry
			, pMultiEdges)

		if not _pMultiEdges_type:
			pMultiEdges = [_data.value for _data in pMultiEdges]

		if ret is not None:
			ret = Dispatch(ret, 'DeleteEdges', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')
		return ret

	def DeleteFaces(self, pGeometry, pMultiFaces):
		'''
		Delete faces of a body
		
		:param pGeometry: IGeometry
		:param pMultiFaces: list[object]
		:rtype: recurdyn.ProcessNet.IGeometry
		'''
		_pMultiFaces_type = True if pMultiFaces and isinstance(pMultiFaces[0], win32com.client.VARIANT) else False
		if not _pMultiFaces_type:
			pMultiFaces = [win32com.client.VARIANT(12, _data) for _data in pMultiFaces]

		ret = self._oleobj_.InvokeTypes(264, LCID, 1, (9, 0), ((9, 1), (8204, 1)),pGeometry
			, pMultiFaces)

		if not _pMultiFaces_type:
			pMultiFaces = [_data.value for _data in pMultiFaces]

		if ret is not None:
			ret = Dispatch(ret, 'DeleteFaces', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')
		return ret

	def ExportParametricPoint(self, strFileName):
		'''
		Export parametric point
		
		:param strFileName: str
		'''
		return self._oleobj_.InvokeTypes(233, LCID, 1, (24, 0), ((8, 1),),strFileName
			)


	def ExportParametricValue(self, strFileName):
		'''
		Export parametric value
		
		:param strFileName: str
		'''
		return self._oleobj_.InvokeTypes(235, LCID, 1, (24, 0), ((8, 1),),strFileName
			)


	def ExtrudeEdges(self, strName, pMultiEdges, dDistance, pExtrudeDirection):
		'''
		Extrude edges into a sheet body
		
		:param strName: str
		:param pMultiEdges: list[object]
		:param dDistance: float
		:param pExtrudeDirection: list[float]
		:rtype: recurdyn.ProcessNet.IGeometrySheetExtrude
		'''
		_pMultiEdges_type = True if pMultiEdges and isinstance(pMultiEdges[0], win32com.client.VARIANT) else False
		if not _pMultiEdges_type:
			pMultiEdges = [win32com.client.VARIANT(12, _data) for _data in pMultiEdges]

		ret = self._oleobj_.InvokeTypes(307, LCID, 1, (9, 0), ((8, 1), (8204, 1), (5, 1), (8197, 1)),strName
			, pMultiEdges, dDistance, pExtrudeDirection)

		if not _pMultiEdges_type:
			pMultiEdges = [_data.value for _data in pMultiEdges]

		if ret is not None:
			ret = Dispatch(ret, 'ExtrudeEdges', '{F7EEC6D6-7358-4316-AFEC-3457934B08F8}')
		return ret

	def ExtrudeFaces(self, strName, pMultiFaces, dDistance, pExtrudeDirection):
		'''
		Extrude faces into a solid body
		
		:param strName: str
		:param pMultiFaces: list[object]
		:param dDistance: float
		:param pExtrudeDirection: list[float]
		:rtype: recurdyn.ProcessNet.IGeometrySolidExtrude
		'''
		_pMultiFaces_type = True if pMultiFaces and isinstance(pMultiFaces[0], win32com.client.VARIANT) else False
		if not _pMultiFaces_type:
			pMultiFaces = [win32com.client.VARIANT(12, _data) for _data in pMultiFaces]

		ret = self._oleobj_.InvokeTypes(310, LCID, 1, (9, 0), ((8, 1), (8204, 1), (5, 1), (8197, 1)),strName
			, pMultiFaces, dDistance, pExtrudeDirection)

		if not _pMultiFaces_type:
			pMultiFaces = [_data.value for _data in pMultiFaces]

		if ret is not None:
			ret = Dispatch(ret, 'ExtrudeFaces', '{E14CE330-FB54-47C9-A917-4D1854365E86}')
		return ret

	def ExtrudeGeometrySheet(self, strName, pSheetGeometry, dDistance, enExtrudeType):
		'''
		Extrude a sheet body into a solid body
		
		:param strName: str
		:param pSheetGeometry: IGeometrySheet
		:param dDistance: float
		:param enExtrudeType: ExtrudeDirectionType
		:rtype: recurdyn.ProcessNet.IGeometrySolidExtrude
		'''
		ret = self._oleobj_.InvokeTypes(218, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (3, 1)),strName
			, pSheetGeometry, dDistance, enExtrudeType)
		if ret is not None:
			ret = Dispatch(ret, 'ExtrudeGeometrySheet', '{E14CE330-FB54-47C9-A917-4D1854365E86}')
		return ret

	def ExtrudeGeometrySheetWithDirection(self, strName, pSheet, dDistance, pExtrudeDirection):
		'''
		Extrude a sheet body into a solid body
		
		:param strName: str
		:param pSheet: IGeometrySheet
		:param dDistance: float
		:param pExtrudeDirection: list[float]
		:rtype: recurdyn.ProcessNet.IGeometrySolidExtrude
		'''
		ret = self._oleobj_.InvokeTypes(279, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (8197, 1)),strName
			, pSheet, dDistance, pExtrudeDirection)
		if ret is not None:
			ret = Dispatch(ret, 'ExtrudeGeometrySheetWithDirection', '{E14CE330-FB54-47C9-A917-4D1854365E86}')
		return ret

	def ExtrudeGeometryWire(self, strName, pWireGeometry, dDistance, pExtrudeDirection):
		'''
		Extrude a wire body into a sheet body
		
		:param strName: str
		:param pWireGeometry: IGeometryWire
		:param dDistance: float
		:param pExtrudeDirection: list[float]
		:rtype: recurdyn.ProcessNet.IGeometrySheetExtrude
		'''
		ret = self._oleobj_.InvokeTypes(217, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (8197, 1)),strName
			, pWireGeometry, dDistance, pExtrudeDirection)
		if ret is not None:
			ret = Dispatch(ret, 'ExtrudeGeometryWire', '{F7EEC6D6-7358-4316-AFEC-3457934B08F8}')
		return ret

	def FileExport(self, strFile, OverWrite):
		'''
		Export File
		
		:param strFile: str
		:param OverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(240, LCID, 1, (24, 0), ((8, 1), (11, 1)),strFile
			, OverWrite)


	def FileExportGeometry(self, pGeometry, strFile, OverWrite):
		'''
		Export File
		
		:param pGeometry: IGeometry
		:param strFile: str
		:param OverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(291, LCID, 1, (24, 0), ((9, 1), (8, 1), (11, 1)),pGeometry
			, strFile, OverWrite)


	def FileImport(self, strFile):
		'''
		Import File
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(204, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def FillHole(self, pGeometry, pFillOption):
		'''
		Fill holes of a geometry
		
		:param pGeometry: IGeometry
		:param pFillOption: IFillHoleOption
		:rtype: recurdyn.ProcessNet.IGeometry
		'''
		ret = self._oleobj_.InvokeTypes(316, LCID, 1, (9, 0), ((9, 1), (9, 1)),pGeometry
			, pFillOption)
		if ret is not None:
			ret = Dispatch(ret, 'FillHole', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')
		return ret

	def FilletSolidGeometry(self, strName, pTarget, pMultiEdges, pRadius):
		'''
		Fillet a solid geometry with edges
		
		:param strName: str
		:param pTarget: IGeometrySolid
		:param pMultiEdges: list[object]
		:param pRadius: list[float]
		:rtype: recurdyn.ProcessNet.IGeometrySolid
		'''
		_pMultiEdges_type = True if pMultiEdges and isinstance(pMultiEdges[0], win32com.client.VARIANT) else False
		if not _pMultiEdges_type:
			pMultiEdges = [win32com.client.VARIANT(12, _data) for _data in pMultiEdges]

		ret = self._oleobj_.InvokeTypes(287, LCID, 1, (9, 0), ((8, 1), (9, 1), (8204, 1), (8197, 1)),strName
			, pTarget, pMultiEdges, pRadius)

		if not _pMultiEdges_type:
			pMultiEdges = [_data.value for _data in pMultiEdges]

		if ret is not None:
			ret = Dispatch(ret, 'FilletSolidGeometry', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')
		return ret

	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(200, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(246, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetEntity(self, strName):
		'''
		Get an entity
		
		:param strName: str
		:rtype: recurdyn.ProcessNet.IGeneric
		'''
		ret = self._oleobj_.InvokeTypes(196, LCID, 1, (9, 0), ((8, 1),),strName
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetEntity', '{27A86788-8B85-40CF-BE7F-BA915103A7DB}')
		return ret

	def GetNewEntityName(self, namePrefix):
		'''
		GetNewEntityName method
		
		:param namePrefix: str
		:rtype: str
		'''
		return self._oleobj_.InvokeTypes(245, LCID, 1, (8, 0), ((8, 1),),namePrefix
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetReferenceFrameInfoOfCenterMarker(self):
		'''
		Get the reference frame information of the center marker
		
		:rtype: recurdyn.ProcessNet.IReferenceFrame
		'''
		ret = self._oleobj_.InvokeTypes(241, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'GetReferenceFrameInfoOfCenterMarker', '{6A3295D9-E76B-473C-9655-23B7B1CBD671}')
		return ret

	def ImportGRoad(self, bstrGRoadName, bstrPath):
		'''
		Import GRoad
		
		:param bstrGRoadName: str
		:param bstrPath: str
		:rtype: recurdyn.ProcessNet.IGRoad
		'''
		ret = self._oleobj_.InvokeTypes(250, LCID, 1, (9, 0), ((8, 1), (8, 1)),bstrGRoadName
			, bstrPath)
		if ret is not None:
			ret = Dispatch(ret, 'ImportGRoad', '{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}')
		return ret

	def ImportMFTireRoadShell(self, bstrName, bstrPath, pIOption):
		'''
		IBody.ImportMFTireRoadShell is obsoleted. Use IBody.ImportGRoad.
		
		:param bstrName: str
		:param bstrPath: str
		:param pIOption: IMFTireImportOption
		'''
		return self._oleobj_.InvokeTypes(243, LCID, 1, (24, 0), ((8, 1), (8, 1), (9, 1)),bstrName
			, bstrPath, pIOption)


	def ImportParametricPoint(self, strFileName):
		'''
		Import parametric point
		
		:param strFileName: str
		'''
		return self._oleobj_.InvokeTypes(232, LCID, 1, (24, 0), ((8, 1),),strFileName
			)


	def ImportParametricValue(self, strFileName):
		'''
		Import parametric value
		
		:param strFileName: str
		'''
		return self._oleobj_.InvokeTypes(234, LCID, 1, (24, 0), ((8, 1),),strFileName
			)


	def ImportRoadData(self, strFile):
		'''
		Import RoadData
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def ImprintEdge(self, pTargetEntity, pToolEntity):
		'''
		Imprint edges on the geometry with a curve or a solid body
		
		:param pTargetEntity: IGeometry
		:param pToolEntity: IGeometry
		'''
		return self._oleobj_.InvokeTypes(260, LCID, 1, (24, 0), ((9, 1), (9, 1)),pTargetEntity
			, pToolEntity)


	def ImprintEdgeInRadialPattern(self, pTargetEntity, pToolGeometry, pOriginPoint, pAxis, dAngle, uiNoOfEdges):
		'''
		Imprint edges on the geometry with a cure in radial pattern
		
		:param pTargetEntity: IGeometry
		:param pToolGeometry: IGeometry
		:param pOriginPoint: list[float]
		:param pAxis: list[float]
		:param dAngle: float
		:param uiNoOfEdges: int
		'''
		return self._oleobj_.InvokeTypes(282, LCID, 1, (24, 0), ((9, 1), (9, 1), (8197, 1), (8197, 1), (5, 1), (19, 1)),pTargetEntity
			, pToolGeometry, pOriginPoint, pAxis, dAngle, uiNoOfEdges
			)


	def ImprintEdgeOffset(self, pTargetEntity, pMultiEdges, dDistance, bDirection):
		'''
		Imprint edges offsetting edges
		
		:param pTargetEntity: IGeometry
		:param pMultiEdges: list[object]
		:param dDistance: float
		:param bDirection: bool
		'''
		_pMultiEdges_type = True if pMultiEdges and isinstance(pMultiEdges[0], win32com.client.VARIANT) else False
		if not _pMultiEdges_type:
			pMultiEdges = [win32com.client.VARIANT(12, _data) for _data in pMultiEdges]

		ret = self._oleobj_.InvokeTypes(293, LCID, 1, (24, 0), ((9, 1), (8204, 1), (5, 1), (11, 1)),pTargetEntity
			, pMultiEdges, dDistance, bDirection)

		if not _pMultiEdges_type:
			pMultiEdges = [_data.value for _data in pMultiEdges]

		return ret


	def ImprintEdgeOnFaceInRadialPattern(self, pTargetEntity, pFaceList, pToolGeometry, pOriginPoint, pAxis, dAngle, uiNoOfEdges):
		'''
		Imprint edges on the faces of a geometry with a cure in radial pattern
		
		:param pTargetEntity: IGeometry
		:param pFaceList: list[object]
		:param pToolGeometry: IGeometry
		:param pOriginPoint: list[float]
		:param pAxis: list[float]
		:param dAngle: float
		:param uiNoOfEdges: int
		'''
		_pFaceList_type = True if pFaceList and isinstance(pFaceList[0], win32com.client.VARIANT) else False
		if not _pFaceList_type:
			pFaceList = [win32com.client.VARIANT(12, _data) for _data in pFaceList]

		ret = self._oleobj_.InvokeTypes(290, LCID, 1, (24, 0), ((9, 1), (8204, 1), (9, 1), (8197, 1), (8197, 1), (5, 1), (19, 1)),pTargetEntity
			, pFaceList, pToolGeometry, pOriginPoint, pAxis, dAngle
			, uiNoOfEdges)

		if not _pFaceList_type:
			pFaceList = [_data.value for _data in pFaceList]

		return ret


	def ImprintEdgeOnFaceWithVirtualPlane(self, pTargetEntity, pFaceList, pOriginPoint, pNormalDir):
		'''
		Imprint edges on the faces of a geometry with a virtual plane
		
		:param pTargetEntity: IGeometry
		:param pFaceList: list[object]
		:param pOriginPoint: list[float]
		:param pNormalDir: list[float]
		'''
		_pFaceList_type = True if pFaceList and isinstance(pFaceList[0], win32com.client.VARIANT) else False
		if not _pFaceList_type:
			pFaceList = [win32com.client.VARIANT(12, _data) for _data in pFaceList]

		ret = self._oleobj_.InvokeTypes(289, LCID, 1, (24, 0), ((9, 1), (8204, 1), (8197, 1), (8197, 1)),pTargetEntity
			, pFaceList, pOriginPoint, pNormalDir)

		if not _pFaceList_type:
			pFaceList = [_data.value for _data in pFaceList]

		return ret


	def ImprintEdgeUVPatternPeriodicFaces(self, pTargetEntity):
		'''
		Imprint edges on the periodic faces of the geometry using UV paramters
		
		:param pTargetEntity: IGeometry
		'''
		return self._oleobj_.InvokeTypes(322, LCID, 1, (24, 0), ((9, 1),),pTargetEntity
			)


	def ImprintEdgeWithDirection(self, pTargetEntity, pCurve, pVal):
		'''
		Imprint edges on the geometry with a curve in the direciton
		
		:param pTargetEntity: IGeometry
		:param pCurve: IGeometry
		:param pVal: list[float]
		'''
		return self._oleobj_.InvokeTypes(292, LCID, 1, (24, 0), ((9, 1), (9, 1), (8197, 1)),pTargetEntity
			, pCurve, pVal)


	def ImprintEdgeWithOption(self, pTargetEntity, pCurve, pIOption):
		'''
		Imprint edges on the geometry with otpions
		
		:param pTargetEntity: IGeometry
		:param pCurve: IGeometry
		:param pIOption: IImprintEdgeOption
		:rtype: recurdyn.ProcessNet.IGeometry
		'''
		ret = self._oleobj_.InvokeTypes(305, LCID, 1, (9, 0), ((9, 1), (9, 1), (9, 1)),pTargetEntity
			, pCurve, pIOption)
		if ret is not None:
			ret = Dispatch(ret, 'ImprintEdgeWithOption', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')
		return ret

	def ImprintEdgeWithVirtualPlane(self, pTargetEntity, pOriginPoint, pNormalDir):
		'''
		Imprint edges on the geometry with a virtual plane
		
		:param pTargetEntity: IGeometry
		:param pOriginPoint: list[float]
		:param pNormalDir: list[float]
		'''
		return self._oleobj_.InvokeTypes(281, LCID, 1, (24, 0), ((9, 1), (8197, 1), (8197, 1)),pTargetEntity
			, pOriginPoint, pNormalDir)


	def ImprintPointOnEdge(self, pGeo, pMultiPoint):
		'''
		Imprint points on an edge
		
		:param pGeo: IGeometryEdge
		:param pMultiPoint: list[object]
		:rtype: list[object]
		'''
		_pMultiPoint_type = True if pMultiPoint and isinstance(pMultiPoint[0], win32com.client.VARIANT) else False
		if not _pMultiPoint_type:
			pMultiPoint = [win32com.client.VARIANT(12, _data) for _data in pMultiPoint]

		ret = self._ApplyTypes_(296, 1, (8204, 0), ((9, 1), (8204, 1)), 'ImprintPointOnEdge', None,pGeo
			, pMultiPoint)

		if not _pMultiPoint_type:
			pMultiPoint = [_data.value for _data in pMultiPoint]

		return ret


	def ImprintPointOnEdgeWithLength(self, pGeo, dLengthStart, dLengthEnd, uiCount):
		'''
		Imprint points on an edge
		
		:param pGeo: IGeometryEdge
		:param dLengthStart: float
		:param dLengthEnd: float
		:param uiCount: int
		:rtype: list[object]
		'''
		return self._ApplyTypes_(298, 1, (8204, 0), ((9, 1), (5, 1), (5, 1), (19, 1)), 'ImprintPointOnEdgeWithLength', None,pGeo
			, dLengthStart, dLengthEnd, uiCount)


	def ImprintPointOnEdgeWithPoint(self, pGeo, pPointStart, pPointEnd, uiCount):
		'''
		Imprint points on an edge
		
		:param pGeo: IGeometryEdge
		:param pPointStart: list[float]
		:param pPointEnd: list[float]
		:param uiCount: int
		:rtype: list[object]
		'''
		return self._ApplyTypes_(297, 1, (8204, 0), ((9, 1), (8197, 1), (8197, 1), (19, 1)), 'ImprintPointOnEdgeWithPoint', None,pGeo
			, pPointStart, pPointEnd, uiCount)


	def ImprintPointOnEdgeWithRatio(self, pGeo, dRatioStart, dLatioEnd, uiCount):
		'''
		Imprint points on an edge
		
		:param pGeo: IGeometryEdge
		:param dRatioStart: float
		:param dLatioEnd: float
		:param uiCount: int
		:rtype: list[object]
		'''
		return self._ApplyTypes_(299, 1, (8204, 0), ((9, 1), (5, 1), (5, 1), (19, 1)), 'ImprintPointOnEdgeWithRatio', None,pGeo
			, dRatioStart, dLatioEnd, uiCount)


	def Redraw(self):
		'''
		Redraw method
		'''
		return self._oleobj_.InvokeTypes(244, LCID, 1, (24, 0), (),)


	def Scale(self, pGeometry, pRefMarker, dX, dY, dZ):
		'''
		Scale a geometry
		
		:param pGeometry: IGeometry
		:param pRefMarker: IMarker
		:param dX: float
		:param dY: float
		:param dZ: float
		:rtype: recurdyn.ProcessNet.IGeometry
		'''
		ret = self._oleobj_.InvokeTypes(317, LCID, 1, (9, 0), ((9, 1), (9, 1), (5, 1), (5, 1), (5, 1)),pGeometry
			, pRefMarker, dX, dY, dZ)
		if ret is not None:
			ret = Dispatch(ret, 'Scale', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')
		return ret

	def SearchEdgesWithType(self, pGeometry, Val, valTol):
		'''
		Search edge entites with a type
		
		:param pGeometry: IGeometry
		:param Val: EdgeType
		:param valTol: float
		:rtype: recurdyn.ProcessNet.IGenericCollection
		'''
		ret = self._oleobj_.InvokeTypes(267, LCID, 1, (9, 0), ((9, 1), (3, 1), (5, 1)),pGeometry
			, Val, valTol)
		if ret is not None:
			ret = Dispatch(ret, 'SearchEdgesWithType', '{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')
		return ret

	def SearchFacesWithType(self, pGeometry, Val, valTol):
		'''
		Search face entites with a type
		
		:param pGeometry: IGeometry
		:param Val: FaceType
		:param valTol: float
		:rtype: recurdyn.ProcessNet.IGenericCollection
		'''
		ret = self._oleobj_.InvokeTypes(266, LCID, 1, (9, 0), ((9, 1), (3, 1), (5, 1)),pGeometry
			, Val, valTol)
		if ret is not None:
			ret = Dispatch(ret, 'SearchFacesWithType', '{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')
		return ret

	def ShellSolidGeometry(self, strName, pTarget, pRemoveFaces, dOffset, pOffsetFaces, pOffsetValues, dir):
		'''
		Shell a solid geometry with faces
		
		:param strName: str
		:param pTarget: IGeometrySolid
		:param pRemoveFaces: list[object]
		:param dOffset: float
		:param pOffsetFaces: list[object]
		:param pOffsetValues: list[float]
		:param dir: CreateShellDirection
		:rtype: recurdyn.ProcessNet.IGeometrySolid
		'''
		_pRemoveFaces_type = True if pRemoveFaces and isinstance(pRemoveFaces[0], win32com.client.VARIANT) else False
		if not _pRemoveFaces_type:
			pRemoveFaces = [win32com.client.VARIANT(12, _data) for _data in pRemoveFaces]
		_pOffsetFaces_type = True if pOffsetFaces and isinstance(pOffsetFaces[0], win32com.client.VARIANT) else False
		if not _pOffsetFaces_type:
			pOffsetFaces = [win32com.client.VARIANT(12, _data) for _data in pOffsetFaces]

		ret = self._oleobj_.InvokeTypes(288, LCID, 1, (9, 0), ((8, 1), (9, 1), (8204, 1), (5, 1), (8204, 1), (8197, 1), (3, 1)),strName
			, pTarget, pRemoveFaces, dOffset, pOffsetFaces, pOffsetValues
			, dir)

		if not _pRemoveFaces_type:
			pRemoveFaces = [_data.value for _data in pRemoveFaces]
		if not _pOffsetFaces_type:
			pOffsetFaces = [_data.value for _data in pOffsetFaces]

		if ret is not None:
			ret = Dispatch(ret, 'ShellSolidGeometry', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')
		return ret

	def SpinEdges(self, strName, pMultiEdges, pAxisStart, pAxisEnd):
		'''
		Spin edges into a sheet body
		
		:param strName: str
		:param pMultiEdges: list[object]
		:param pAxisStart: list[float]
		:param pAxisEnd: list[float]
		:rtype: recurdyn.ProcessNet.IGeometrySheetSpin
		'''
		_pMultiEdges_type = True if pMultiEdges and isinstance(pMultiEdges[0], win32com.client.VARIANT) else False
		if not _pMultiEdges_type:
			pMultiEdges = [win32com.client.VARIANT(12, _data) for _data in pMultiEdges]

		ret = self._oleobj_.InvokeTypes(308, LCID, 1, (9, 0), ((8, 1), (8204, 1), (8197, 1), (8197, 1)),strName
			, pMultiEdges, pAxisStart, pAxisEnd)

		if not _pMultiEdges_type:
			pMultiEdges = [_data.value for _data in pMultiEdges]

		if ret is not None:
			ret = Dispatch(ret, 'SpinEdges', '{952BEF3F-0EA1-4F2B-9EA4-5214261533D2}')
		return ret

	def SpinFaces(self, strName, pMultiFaces, pAxisStart, pAxisEnd):
		'''
		Spin faces into a solid body
		
		:param strName: str
		:param pMultiFaces: list[object]
		:param pAxisStart: list[float]
		:param pAxisEnd: list[float]
		:rtype: recurdyn.ProcessNet.IGeometrySolidSpin
		'''
		_pMultiFaces_type = True if pMultiFaces and isinstance(pMultiFaces[0], win32com.client.VARIANT) else False
		if not _pMultiFaces_type:
			pMultiFaces = [win32com.client.VARIANT(12, _data) for _data in pMultiFaces]

		ret = self._oleobj_.InvokeTypes(311, LCID, 1, (9, 0), ((8, 1), (8204, 1), (8197, 1), (8197, 1)),strName
			, pMultiFaces, pAxisStart, pAxisEnd)

		if not _pMultiFaces_type:
			pMultiFaces = [_data.value for _data in pMultiFaces]

		if ret is not None:
			ret = Dispatch(ret, 'SpinFaces', '{431767A5-5F84-411B-9BB4-E4B9EA14BBC4}')
		return ret

	def SpinGeometrySheet(self, strName, pSheetGeometry, pAxisStart, pAxisEnd):
		'''
		Spin a sheet body into a solid body
		
		:param strName: str
		:param pSheetGeometry: IGeometrySheet
		:param pAxisStart: list[float]
		:param pAxisEnd: list[float]
		:rtype: recurdyn.ProcessNet.IGeometrySolidSpin
		'''
		ret = self._oleobj_.InvokeTypes(221, LCID, 1, (9, 0), ((8, 1), (9, 1), (8197, 1), (8197, 1)),strName
			, pSheetGeometry, pAxisStart, pAxisEnd)
		if ret is not None:
			ret = Dispatch(ret, 'SpinGeometrySheet', '{431767A5-5F84-411B-9BB4-E4B9EA14BBC4}')
		return ret

	def SpinGeometryWire(self, strName, pWireGeometry, pAxisStart, pAxisEnd):
		'''
		Spin a wire body into a sheet body
		
		:param strName: str
		:param pWireGeometry: IGeometryWire
		:param pAxisStart: list[float]
		:param pAxisEnd: list[float]
		:rtype: recurdyn.ProcessNet.IGeometrySheetSpin
		'''
		ret = self._oleobj_.InvokeTypes(220, LCID, 1, (9, 0), ((8, 1), (9, 1), (8197, 1), (8197, 1)),strName
			, pWireGeometry, pAxisStart, pAxisEnd)
		if ret is not None:
			ret = Dispatch(ret, 'SpinGeometryWire', '{952BEF3F-0EA1-4F2B-9EA4-5214261533D2}')
		return ret

	def SplitSolidGeometry(self, pSolid, pSurface, strNameFront, strNameBack):
		'''
		Split a solid geometry with a surface
		
		:param pSolid: IGeometry
		:param pSurface: IGeometry
		:param strNameFront: str
		:param strNameBack: str
		'''
		return self._oleobj_.InvokeTypes(294, LCID, 1, (24, 0), ((9, 1), (9, 1), (8, 1), (8, 1)),pSolid
			, pSurface, strNameFront, strNameBack)


	def SweepEdges(self, bstrName, pMultiEdges, pCurve, pIOption):
		'''
		Sweep edge into a sheet body along a wire path
		
		:param bstrName: str
		:param pMultiEdges: list[object]
		:param pCurve: IGeometry
		:param pIOption: ISweepOption
		:rtype: recurdyn.ProcessNet.IGeometrySheetSweep
		'''
		_pMultiEdges_type = True if pMultiEdges and isinstance(pMultiEdges[0], win32com.client.VARIANT) else False
		if not _pMultiEdges_type:
			pMultiEdges = [win32com.client.VARIANT(12, _data) for _data in pMultiEdges]

		ret = self._oleobj_.InvokeTypes(309, LCID, 1, (9, 0), ((8, 1), (8204, 1), (9, 1), (9, 1)),bstrName
			, pMultiEdges, pCurve, pIOption)

		if not _pMultiEdges_type:
			pMultiEdges = [_data.value for _data in pMultiEdges]

		if ret is not None:
			ret = Dispatch(ret, 'SweepEdges', '{1820726B-54D0-4A1F-AEAB-284DEC6C1270}')
		return ret

	def SweepFaces(self, bstrName, pMultiFaces, pCurve, pIOption):
		'''
		Sweep faces into a solid body
		
		:param bstrName: str
		:param pMultiFaces: list[object]
		:param pCurve: IGeometry
		:param pIOption: ISweepOption
		:rtype: recurdyn.ProcessNet.IGeometrySolidSweep
		'''
		_pMultiFaces_type = True if pMultiFaces and isinstance(pMultiFaces[0], win32com.client.VARIANT) else False
		if not _pMultiFaces_type:
			pMultiFaces = [win32com.client.VARIANT(12, _data) for _data in pMultiFaces]

		ret = self._oleobj_.InvokeTypes(312, LCID, 1, (9, 0), ((8, 1), (8204, 1), (9, 1), (9, 1)),bstrName
			, pMultiFaces, pCurve, pIOption)

		if not _pMultiFaces_type:
			pMultiFaces = [_data.value for _data in pMultiFaces]

		if ret is not None:
			ret = Dispatch(ret, 'SweepFaces', '{FC825EA8-559A-4A73-9261-7EA500EC7CAB}')
		return ret

	def SweepGeometrySheetWithOption(self, bstrName, pTargetEntity, pCurve, pIOption):
		'''
		Sweep geometry and create solid body
		
		:param bstrName: str
		:param pTargetEntity: IGeometry
		:param pCurve: IGeometry
		:param pIOption: ISweepOption
		:rtype: recurdyn.ProcessNet.IGeometrySolidSweep
		'''
		ret = self._oleobj_.InvokeTypes(284, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),bstrName
			, pTargetEntity, pCurve, pIOption)
		if ret is not None:
			ret = Dispatch(ret, 'SweepGeometrySheetWithOption', '{FC825EA8-559A-4A73-9261-7EA500EC7CAB}')
		return ret

	def SweepGeometrySheetWithTranslationVector(self, strName, pSheetGeometry, pTranslationVector):
		'''
		Sweep a sheet body into a solid body with translation vector
		
		:param strName: str
		:param pSheetGeometry: IGeometrySheet
		:param pTranslationVector: list[float]
		:rtype: recurdyn.ProcessNet.IGeometrySolidSweep
		'''
		ret = self._oleobj_.InvokeTypes(224, LCID, 1, (9, 0), ((8, 1), (9, 1), (8197, 1)),strName
			, pSheetGeometry, pTranslationVector)
		if ret is not None:
			ret = Dispatch(ret, 'SweepGeometrySheetWithTranslationVector', '{FC825EA8-559A-4A73-9261-7EA500EC7CAB}')
		return ret

	def SweepGeometrySheetWithWireGeometry(self, strName, pSheetGeometry, pPathWireGeometry):
		'''
		Sweep a sheet body into a solid body along a wire path
		
		:param strName: str
		:param pSheetGeometry: IGeometrySheet
		:param pPathWireGeometry: IGeometryWire
		:rtype: recurdyn.ProcessNet.IGeometrySolidSweep
		'''
		ret = self._oleobj_.InvokeTypes(225, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pSheetGeometry, pPathWireGeometry)
		if ret is not None:
			ret = Dispatch(ret, 'SweepGeometrySheetWithWireGeometry', '{FC825EA8-559A-4A73-9261-7EA500EC7CAB}')
		return ret

	def SweepGeometryWireWithOption(self, bstrName, pTargetEntity, pCurve, pIOption):
		'''
		Sweep geometry and create sheet body
		
		:param bstrName: str
		:param pTargetEntity: IGeometry
		:param pCurve: IGeometry
		:param pIOption: ISweepOption
		:rtype: recurdyn.ProcessNet.IGeometrySheetSweep
		'''
		ret = self._oleobj_.InvokeTypes(285, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),bstrName
			, pTargetEntity, pCurve, pIOption)
		if ret is not None:
			ret = Dispatch(ret, 'SweepGeometryWireWithOption', '{1820726B-54D0-4A1F-AEAB-284DEC6C1270}')
		return ret

	def SweepGeometryWireWithTranslationVector(self, strName, pWireGeometry, pTranslationVector):
		'''
		Sweep a wire body into a sheet body with translation vector
		
		:param strName: str
		:param pWireGeometry: IGeometryWire
		:param pTranslationVector: list[float]
		:rtype: recurdyn.ProcessNet.IGeometrySheetSweep
		'''
		ret = self._oleobj_.InvokeTypes(222, LCID, 1, (9, 0), ((8, 1), (9, 1), (8197, 1)),strName
			, pWireGeometry, pTranslationVector)
		if ret is not None:
			ret = Dispatch(ret, 'SweepGeometryWireWithTranslationVector', '{1820726B-54D0-4A1F-AEAB-284DEC6C1270}')
		return ret

	def SweepGeometryWireWithWireGeometry(self, strName, pWireGeometry, pPathWireGeometry):
		'''
		Sweep a wire body into a sheet body along a wire path
		
		:param strName: str
		:param pWireGeometry: IGeometryWire
		:param pPathWireGeometry: IGeometryWire
		:rtype: recurdyn.ProcessNet.IGeometrySheetSweep
		'''
		ret = self._oleobj_.InvokeTypes(223, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pWireGeometry, pPathWireGeometry)
		if ret is not None:
			ret = Dispatch(ret, 'SweepGeometryWireWithWireGeometry', '{1820726B-54D0-4A1F-AEAB-284DEC6C1270}')
		return ret

	def UpdateMaterialLibrary(self):
		'''
		Update material library
		'''
		return self._oleobj_.InvokeTypes(270, LCID, 1, (24, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(321, 2, (11, 0), (), "Active", None))
	def _get_AnimationDataScaling(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "AnimationDataScaling", '{7DD7CE3F-EAC8-4324-9107-C4EDFF055B1C}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Density(self):
		return self._ApplyTypes_(*(176, 2, (5, 0), (), "Density", None))
	def _get_Density2(self):
		return self._ApplyTypes_(*(269, 2, (9, 0), (), "Density2", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FillHoleOption(self):
		return self._ApplyTypes_(*(315, 2, (9, 0), (), "FillHoleOption", '{D8018357-9575-4F97-8419-1014B23B06C5}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_GRoadCollection(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "GRoadCollection", '{8AE3FA68-8066-412B-A1C9-9B360E8AFA35}'))
	def _get_GRoadCreationOption(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "GRoadCreationOption", '{295776CE-69C8-4B65-800F-F458E26F7BA1}'))
	def _get_GeometrySheetCollection(self):
		return self._ApplyTypes_(*(212, 2, (9, 0), (), "GeometrySheetCollection", '{5E8000B9-06C7-46B2-A736-5D43904C8878}'))
	def _get_GeometryShellCollection(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "GeometryShellCollection", '{C6162712-FA98-4EF1-8B94-E326943E0626}'))
	def _get_GeometrySolidCollection(self):
		return self._ApplyTypes_(*(213, 2, (9, 0), (), "GeometrySolidCollection", '{DB55951D-F238-46D3-9C25-7B4B87F34D36}'))
	def _get_GeometryWireCollection(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "GeometryWireCollection", '{2B270F9A-2704-448E-809B-7B2B30ACEA84}'))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "Graphic", '{4C8B7C23-7D92-4D39-B530-5D93DC97F771}'))
	def _get_ImprintEdgeOption(self):
		return self._ApplyTypes_(*(304, 2, (9, 0), (), "ImprintEdgeOption", '{48DE281A-8619-46F6-BAA5-3A429A0AF97E}'))
	def _get_InitialRotationalVelocityX(self):
		return self._ApplyTypes_(*(166, 2, (9, 0), (), "InitialRotationalVelocityX", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_InitialRotationalVelocityY(self):
		return self._ApplyTypes_(*(167, 2, (9, 0), (), "InitialRotationalVelocityY", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_InitialRotationalVelocityZ(self):
		return self._ApplyTypes_(*(168, 2, (9, 0), (), "InitialRotationalVelocityZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_InitialTranslationalVelocityX(self):
		return self._ApplyTypes_(*(160, 2, (9, 0), (), "InitialTranslationalVelocityX", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_InitialTranslationalVelocityY(self):
		return self._ApplyTypes_(*(161, 2, (9, 0), (), "InitialTranslationalVelocityY", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_InitialTranslationalVelocityZ(self):
		return self._ApplyTypes_(*(162, 2, (9, 0), (), "InitialTranslationalVelocityZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Ixx(self):
		return self._ApplyTypes_(*(154, 2, (9, 0), (), "Ixx", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Ixy(self):
		return self._ApplyTypes_(*(157, 2, (9, 0), (), "Ixy", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Iyy(self):
		return self._ApplyTypes_(*(155, 2, (9, 0), (), "Iyy", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Iyz(self):
		return self._ApplyTypes_(*(158, 2, (9, 0), (), "Iyz", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Izx(self):
		return self._ApplyTypes_(*(159, 2, (9, 0), (), "Izx", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Izz(self):
		return self._ApplyTypes_(*(156, 2, (9, 0), (), "Izz", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(255, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(214, 2, (19, 0), (), "LayerNumber", None))
	def _get_MFTireImportOption(self):
		return self._ApplyTypes_(*(242, 2, (9, 0), (), "MFTireImportOption", '{E7F5FA95-8A22-45D7-AA32-2C4499D519A2}'))
	def _get_MarkerCollection(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "MarkerCollection", '{6BEF9B6B-4708-445E-A3B5-0D65BA69F748}'))
	def _get_Mass(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Mass", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Material(self):
		return self._ApplyTypes_(*(175, 2, (3, 0), (), "Material", '{EF682F61-990D-40D7-9A4C-46391963D599}'))
	def _get_MaterialInput(self):
		return self._ApplyTypes_(*(174, 2, (3, 0), (), "MaterialInput", '{4DD8B94B-8CB3-4C58-8171-E897A8BC94F4}'))
	def _get_MaterialUser(self):
		return self._ApplyTypes_(*(177, 2, (9, 0), (), "MaterialUser", '{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_ParametricPointCollection(self):
		return self._ApplyTypes_(*(230, 2, (9, 0), (), "ParametricPointCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA244}'))
	def _get_ParametricValueCollection(self):
		return self._ApplyTypes_(*(231, 2, (9, 0), (), "ParametricValueCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA245}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(152, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_RoadDataCollection(self):
		return self._ApplyTypes_(*(247, 2, (9, 0), (), "RoadDataCollection", '{68A5A87D-7640-4F09-8D24-945200D2DB33}'))
	def _get_RotationalVelocityRefMarker(self):
		return self._ApplyTypes_(*(173, 2, (9, 0), (), "RotationalVelocityRefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_SweepOption(self):
		return self._ApplyTypes_(*(283, 2, (9, 0), (), "SweepOption", '{5099BF4D-2B9E-405B-A041-3D4760AE1AA9}'))
	def _get_TranslationalVelocityRefMarker(self):
		return self._ApplyTypes_(*(172, 2, (9, 0), (), "TranslationalVelocityRefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_UseInitialRotationalVelocityX(self):
		return self._ApplyTypes_(*(169, 2, (11, 0), (), "UseInitialRotationalVelocityX", None))
	def _get_UseInitialRotationalVelocityY(self):
		return self._ApplyTypes_(*(170, 2, (11, 0), (), "UseInitialRotationalVelocityY", None))
	def _get_UseInitialRotationalVelocityZ(self):
		return self._ApplyTypes_(*(171, 2, (11, 0), (), "UseInitialRotationalVelocityZ", None))
	def _get_UseInitialTranslationalVelocityX(self):
		return self._ApplyTypes_(*(163, 2, (11, 0), (), "UseInitialTranslationalVelocityX", None))
	def _get_UseInitialTranslationalVelocityY(self):
		return self._ApplyTypes_(*(164, 2, (11, 0), (), "UseInitialTranslationalVelocityY", None))
	def _get_UseInitialTranslationalVelocityZ(self):
		return self._ApplyTypes_(*(165, 2, (11, 0), (), "UseInitialTranslationalVelocityZ", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((321, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Density(self, value):
		if "Density" in self.__dict__: self.__dict__["Density"] = value; return
		self._oleobj_.Invoke(*((176, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((214, LCID, 4, 0) + (value,) + ()))
	def _set_Material(self, value):
		if "Material" in self.__dict__: self.__dict__["Material"] = value; return
		self._oleobj_.Invoke(*((175, LCID, 4, 0) + (value,) + ()))
	def _set_MaterialInput(self, value):
		if "MaterialInput" in self.__dict__: self.__dict__["MaterialInput"] = value; return
		self._oleobj_.Invoke(*((174, LCID, 4, 0) + (value,) + ()))
	def _set_MaterialUser(self, value):
		if "MaterialUser" in self.__dict__: self.__dict__["MaterialUser"] = value; return
		self._oleobj_.Invoke(*((177, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_RotationalVelocityRefMarker(self, value):
		if "RotationalVelocityRefMarker" in self.__dict__: self.__dict__["RotationalVelocityRefMarker"] = value; return
		self._oleobj_.Invoke(*((173, LCID, 4, 0) + (value,) + ()))
	def _set_TranslationalVelocityRefMarker(self, value):
		if "TranslationalVelocityRefMarker" in self.__dict__: self.__dict__["TranslationalVelocityRefMarker"] = value; return
		self._oleobj_.Invoke(*((172, LCID, 4, 0) + (value,) + ()))
	def _set_UseInitialRotationalVelocityX(self, value):
		if "UseInitialRotationalVelocityX" in self.__dict__: self.__dict__["UseInitialRotationalVelocityX"] = value; return
		self._oleobj_.Invoke(*((169, LCID, 4, 0) + (value,) + ()))
	def _set_UseInitialRotationalVelocityY(self, value):
		if "UseInitialRotationalVelocityY" in self.__dict__: self.__dict__["UseInitialRotationalVelocityY"] = value; return
		self._oleobj_.Invoke(*((170, LCID, 4, 0) + (value,) + ()))
	def _set_UseInitialRotationalVelocityZ(self, value):
		if "UseInitialRotationalVelocityZ" in self.__dict__: self.__dict__["UseInitialRotationalVelocityZ"] = value; return
		self._oleobj_.Invoke(*((171, LCID, 4, 0) + (value,) + ()))
	def _set_UseInitialTranslationalVelocityX(self, value):
		if "UseInitialTranslationalVelocityX" in self.__dict__: self.__dict__["UseInitialTranslationalVelocityX"] = value; return
		self._oleobj_.Invoke(*((163, LCID, 4, 0) + (value,) + ()))
	def _set_UseInitialTranslationalVelocityY(self, value):
		if "UseInitialTranslationalVelocityY" in self.__dict__: self.__dict__["UseInitialTranslationalVelocityY"] = value; return
		self._oleobj_.Invoke(*((164, LCID, 4, 0) + (value,) + ()))
	def _set_UseInitialTranslationalVelocityZ(self, value):
		if "UseInitialTranslationalVelocityZ" in self.__dict__: self.__dict__["UseInitialTranslationalVelocityZ"] = value; return
		self._oleobj_.Invoke(*((165, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	AnimationDataScaling = property(_get_AnimationDataScaling, None)
	'''
	Animation Data Scaling

	:type: recurdyn.ProcessNet.IAnimationDataScaling
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Density = property(_get_Density, _set_Density)
	'''
	Density

	:type: float
	'''
	Density2 = property(_get_Density2, None)
	'''
	Density with parametric value

	:type: recurdyn.ProcessNet.IDouble
	'''
	FillHoleOption = property(_get_FillHoleOption, None)
	'''
	Get fill hole option

	:type: recurdyn.ProcessNet.IFillHoleOption
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	GRoadCollection = property(_get_GRoadCollection, None)
	GRoadCreationOption = property(_get_GRoadCreationOption, None)
	'''
	Get GRoad Creation Option

	:type: recurdyn.ProcessNet.IGRoadCreationOption
	'''
	GeometrySheetCollection = property(_get_GeometrySheetCollection, None)
	GeometryShellCollection = property(_get_GeometryShellCollection, None)
	GeometrySolidCollection = property(_get_GeometrySolidCollection, None)
	GeometryWireCollection = property(_get_GeometryWireCollection, None)
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicProperty
	'''
	ImprintEdgeOption = property(_get_ImprintEdgeOption, None)
	'''
	Get imprint edge option

	:type: recurdyn.ProcessNet.IImprintEdgeOption
	'''
	InitialRotationalVelocityX = property(_get_InitialRotationalVelocityX, None)
	'''
	Initial rotational velocity X

	:type: recurdyn.ProcessNet.IDouble
	'''
	InitialRotationalVelocityY = property(_get_InitialRotationalVelocityY, None)
	'''
	Initial rotational velocity Y

	:type: recurdyn.ProcessNet.IDouble
	'''
	InitialRotationalVelocityZ = property(_get_InitialRotationalVelocityZ, None)
	'''
	Initial rotational velocity Z

	:type: recurdyn.ProcessNet.IDouble
	'''
	InitialTranslationalVelocityX = property(_get_InitialTranslationalVelocityX, None)
	'''
	Initial translational velocity X

	:type: recurdyn.ProcessNet.IDouble
	'''
	InitialTranslationalVelocityY = property(_get_InitialTranslationalVelocityY, None)
	'''
	Initial translational velocity Y

	:type: recurdyn.ProcessNet.IDouble
	'''
	InitialTranslationalVelocityZ = property(_get_InitialTranslationalVelocityZ, None)
	'''
	Initial translational velocity Z

	:type: recurdyn.ProcessNet.IDouble
	'''
	Ixx = property(_get_Ixx, None)
	'''
	Ixx

	:type: recurdyn.ProcessNet.IDouble
	'''
	Ixy = property(_get_Ixy, None)
	'''
	Ixy

	:type: recurdyn.ProcessNet.IDouble
	'''
	Iyy = property(_get_Iyy, None)
	'''
	Iyy

	:type: recurdyn.ProcessNet.IDouble
	'''
	Iyz = property(_get_Iyz, None)
	'''
	Iyz

	:type: recurdyn.ProcessNet.IDouble
	'''
	Izx = property(_get_Izx, None)
	'''
	Izx

	:type: recurdyn.ProcessNet.IDouble
	'''
	Izz = property(_get_Izz, None)
	'''
	Izz

	:type: recurdyn.ProcessNet.IDouble
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MFTireImportOption = property(_get_MFTireImportOption, None)
	'''
	IBody.MFTireImportOption is obsoleted. Use IBody.GRoadCreationOption.

	:type: recurdyn.ProcessNet.IMFTireImportOption
	'''
	MarkerCollection = property(_get_MarkerCollection, None)
	Mass = property(_get_Mass, None)
	'''
	Mass

	:type: recurdyn.ProcessNet.IDouble
	'''
	Material = property(_get_Material, _set_Material)
	'''
	Material

	:type: recurdyn.ProcessNet.Material
	'''
	MaterialInput = property(_get_MaterialInput, _set_MaterialInput)
	'''
	Material input

	:type: recurdyn.ProcessNet.MaterialInput
	'''
	MaterialUser = property(_get_MaterialUser, _set_MaterialUser)
	'''
	User Material

	:type: recurdyn.ProcessNet.IMaterialProperty
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	ParametricPointCollection = property(_get_ParametricPointCollection, None)
	ParametricValueCollection = property(_get_ParametricValueCollection, None)
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	RoadDataCollection = property(_get_RoadDataCollection, None)
	RotationalVelocityRefMarker = property(_get_RotationalVelocityRefMarker, _set_RotationalVelocityRefMarker)
	'''
	Rotational velocity reference marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	SweepOption = property(_get_SweepOption, None)
	'''
	Get sweep option

	:type: recurdyn.ProcessNet.ISweepOption
	'''
	TranslationalVelocityRefMarker = property(_get_TranslationalVelocityRefMarker, _set_TranslationalVelocityRefMarker)
	'''
	Translational velocity reference marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	UseInitialRotationalVelocityX = property(_get_UseInitialRotationalVelocityX, _set_UseInitialRotationalVelocityX)
	'''
	Use Initial rotational velocity X

	:type: bool
	'''
	UseInitialRotationalVelocityY = property(_get_UseInitialRotationalVelocityY, _set_UseInitialRotationalVelocityY)
	'''
	Use Initial rotational velocity Y

	:type: bool
	'''
	UseInitialRotationalVelocityZ = property(_get_UseInitialRotationalVelocityZ, _set_UseInitialRotationalVelocityZ)
	'''
	Use Initial rotational velocity Z

	:type: bool
	'''
	UseInitialTranslationalVelocityX = property(_get_UseInitialTranslationalVelocityX, _set_UseInitialTranslationalVelocityX)
	'''
	Use initial translational velocity X

	:type: bool
	'''
	UseInitialTranslationalVelocityY = property(_get_UseInitialTranslationalVelocityY, _set_UseInitialTranslationalVelocityY)
	'''
	Use initial translational velocity Y

	:type: bool
	'''
	UseInitialTranslationalVelocityZ = property(_get_UseInitialTranslationalVelocityZ, _set_UseInitialTranslationalVelocityZ)
	'''
	Use initial translational velocity Z

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Comment": _set_Comment,
		"_set_Density": _set_Density,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Material": _set_Material,
		"_set_MaterialInput": _set_MaterialInput,
		"_set_MaterialUser": _set_MaterialUser,
		"_set_Name": _set_Name,
		"_set_RotationalVelocityRefMarker": _set_RotationalVelocityRefMarker,
		"_set_TranslationalVelocityRefMarker": _set_TranslationalVelocityRefMarker,
		"_set_UseInitialRotationalVelocityX": _set_UseInitialRotationalVelocityX,
		"_set_UseInitialRotationalVelocityY": _set_UseInitialRotationalVelocityY,
		"_set_UseInitialRotationalVelocityZ": _set_UseInitialRotationalVelocityZ,
		"_set_UseInitialTranslationalVelocityX": _set_UseInitialTranslationalVelocityX,
		"_set_UseInitialTranslationalVelocityY": _set_UseInitialTranslationalVelocityY,
		"_set_UseInitialTranslationalVelocityZ": _set_UseInitialTranslationalVelocityZ,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (321, 2, (11, 0), (), "Active", None),
		"AnimationDataScaling": (203, 2, (9, 0), (), "AnimationDataScaling", '{7DD7CE3F-EAC8-4324-9107-C4EDFF055B1C}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Density": (176, 2, (5, 0), (), "Density", None),
		"Density2": (269, 2, (9, 0), (), "Density2", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FillHoleOption": (315, 2, (9, 0), (), "FillHoleOption", '{D8018357-9575-4F97-8419-1014B23B06C5}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"GRoadCollection": (253, 2, (9, 0), (), "GRoadCollection", '{8AE3FA68-8066-412B-A1C9-9B360E8AFA35}'),
		"GRoadCreationOption": (251, 2, (9, 0), (), "GRoadCreationOption", '{295776CE-69C8-4B65-800F-F458E26F7BA1}'),
		"GeometrySheetCollection": (212, 2, (9, 0), (), "GeometrySheetCollection", '{5E8000B9-06C7-46B2-A736-5D43904C8878}'),
		"GeometryShellCollection": (252, 2, (9, 0), (), "GeometryShellCollection", '{C6162712-FA98-4EF1-8B94-E326943E0626}'),
		"GeometrySolidCollection": (213, 2, (9, 0), (), "GeometrySolidCollection", '{DB55951D-F238-46D3-9C25-7B4B87F34D36}'),
		"GeometryWireCollection": (211, 2, (9, 0), (), "GeometryWireCollection", '{2B270F9A-2704-448E-809B-7B2B30ACEA84}'),
		"Graphic": (151, 2, (9, 0), (), "Graphic", '{4C8B7C23-7D92-4D39-B530-5D93DC97F771}'),
		"ImprintEdgeOption": (304, 2, (9, 0), (), "ImprintEdgeOption", '{48DE281A-8619-46F6-BAA5-3A429A0AF97E}'),
		"InitialRotationalVelocityX": (166, 2, (9, 0), (), "InitialRotationalVelocityX", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"InitialRotationalVelocityY": (167, 2, (9, 0), (), "InitialRotationalVelocityY", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"InitialRotationalVelocityZ": (168, 2, (9, 0), (), "InitialRotationalVelocityZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"InitialTranslationalVelocityX": (160, 2, (9, 0), (), "InitialTranslationalVelocityX", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"InitialTranslationalVelocityY": (161, 2, (9, 0), (), "InitialTranslationalVelocityY", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"InitialTranslationalVelocityZ": (162, 2, (9, 0), (), "InitialTranslationalVelocityZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Ixx": (154, 2, (9, 0), (), "Ixx", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Ixy": (157, 2, (9, 0), (), "Ixy", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Iyy": (155, 2, (9, 0), (), "Iyy", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Iyz": (158, 2, (9, 0), (), "Iyz", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Izx": (159, 2, (9, 0), (), "Izx", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Izz": (156, 2, (9, 0), (), "Izz", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"LayerName": (255, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (214, 2, (19, 0), (), "LayerNumber", None),
		"MFTireImportOption": (242, 2, (9, 0), (), "MFTireImportOption", '{E7F5FA95-8A22-45D7-AA32-2C4499D519A2}'),
		"MarkerCollection": (210, 2, (9, 0), (), "MarkerCollection", '{6BEF9B6B-4708-445E-A3B5-0D65BA69F748}'),
		"Mass": (153, 2, (9, 0), (), "Mass", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Material": (175, 2, (3, 0), (), "Material", '{EF682F61-990D-40D7-9A4C-46391963D599}'),
		"MaterialInput": (174, 2, (3, 0), (), "MaterialInput", '{4DD8B94B-8CB3-4C58-8171-E897A8BC94F4}'),
		"MaterialUser": (177, 2, (9, 0), (), "MaterialUser", '{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"ParametricPointCollection": (230, 2, (9, 0), (), "ParametricPointCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA244}'),
		"ParametricValueCollection": (231, 2, (9, 0), (), "ParametricValueCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA245}'),
		"RefFrame": (152, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"RoadDataCollection": (247, 2, (9, 0), (), "RoadDataCollection", '{68A5A87D-7640-4F09-8D24-945200D2DB33}'),
		"RotationalVelocityRefMarker": (173, 2, (9, 0), (), "RotationalVelocityRefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"SweepOption": (283, 2, (9, 0), (), "SweepOption", '{5099BF4D-2B9E-405B-A041-3D4760AE1AA9}'),
		"TranslationalVelocityRefMarker": (172, 2, (9, 0), (), "TranslationalVelocityRefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"UseInitialRotationalVelocityX": (169, 2, (11, 0), (), "UseInitialRotationalVelocityX", None),
		"UseInitialRotationalVelocityY": (170, 2, (11, 0), (), "UseInitialRotationalVelocityY", None),
		"UseInitialRotationalVelocityZ": (171, 2, (11, 0), (), "UseInitialRotationalVelocityZ", None),
		"UseInitialTranslationalVelocityX": (163, 2, (11, 0), (), "UseInitialTranslationalVelocityX", None),
		"UseInitialTranslationalVelocityY": (164, 2, (11, 0), (), "UseInitialTranslationalVelocityY", None),
		"UseInitialTranslationalVelocityZ": (165, 2, (11, 0), (), "UseInitialTranslationalVelocityZ", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((321, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Density": ((176, LCID, 4, 0),()),
		"LayerNumber": ((214, LCID, 4, 0),()),
		"Material": ((175, LCID, 4, 0),()),
		"MaterialInput": ((174, LCID, 4, 0),()),
		"MaterialUser": ((177, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"RotationalVelocityRefMarker": ((173, LCID, 4, 0),()),
		"TranslationalVelocityRefMarker": ((172, LCID, 4, 0),()),
		"UseInitialRotationalVelocityX": ((169, LCID, 4, 0),()),
		"UseInitialRotationalVelocityY": ((170, LCID, 4, 0),()),
		"UseInitialRotationalVelocityZ": ((171, LCID, 4, 0),()),
		"UseInitialTranslationalVelocityX": ((163, LCID, 4, 0),()),
		"UseInitialTranslationalVelocityY": ((164, LCID, 4, 0),()),
		"UseInitialTranslationalVelocityZ": ((165, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IBodyCollection(DispatchBaseClass):
	'''IBodyCollection'''
	CLSID = IID('{E26794CD-5D37-4617-BB5A-1AD85F3ED410}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IBody
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IBody
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ICam2DCurveSegmentOption(DispatchBaseClass):
	'''Cam2D segment option'''
	CLSID = IID('{8C139E48-EC46-477D-9754-D1449E4AF801}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetDepthDirectionVector(self):
		'''
		GetDepthDirectionVector is obsolete function
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(102, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetDepthDirectionVector', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def SetDepthDirectionVector(self, x, y, z):
		'''
		SetDepthDirectionVector is obsolete function
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(101, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),x
			, y, z)


	def _get_Interpolation(self):
		return self._ApplyTypes_(*(52, 2, (3, 0), (), "Interpolation", '{2AF09FDD-94B3-42A3-B3A7-69EEC4AAFB7F}'))
	def _get_Segment(self):
		return self._ApplyTypes_(*(51, 2, (19, 0), (), "Segment", None))
	def _get_UseTotalSegment(self):
		return self._ApplyTypes_(*(53, 2, (11, 0), (), "UseTotalSegment", None))

	def _set_Interpolation(self, value):
		if "Interpolation" in self.__dict__: self.__dict__["Interpolation"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_Segment(self, value):
		if "Segment" in self.__dict__: self.__dict__["Segment"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_UseTotalSegment(self, value):
		if "UseTotalSegment" in self.__dict__: self.__dict__["UseTotalSegment"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))

	Interpolation = property(_get_Interpolation, _set_Interpolation)
	'''
	Curve segment interpolation type

	:type: recurdyn.ProcessNet.InterpolationType
	'''
	Segment = property(_get_Segment, _set_Segment)
	'''
	The number of curve segment

	:type: int
	'''
	UseTotalSegment = property(_get_UseTotalSegment, _set_UseTotalSegment)
	'''
	Use total segment

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Interpolation": _set_Interpolation,
		"_set_Segment": _set_Segment,
		"_set_UseTotalSegment": _set_UseTotalSegment,
	}
	_prop_map_get_ = {
		"Interpolation": (52, 2, (3, 0), (), "Interpolation", '{2AF09FDD-94B3-42A3-B3A7-69EEC4AAFB7F}'),
		"Segment": (51, 2, (19, 0), (), "Segment", None),
		"UseTotalSegment": (53, 2, (11, 0), (), "UseTotalSegment", None),
	}
	_prop_map_put_ = {
		"Interpolation": ((52, LCID, 4, 0),()),
		"Segment": ((51, LCID, 4, 0),()),
		"UseTotalSegment": ((53, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ICamera(DispatchBaseClass):
	'''Camera'''
	CLSID = IID('{D8203265-F837-4B2B-BE98-881FB736D5DA}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ICameraCollection(DispatchBaseClass):
	'''ICameraCollection'''
	CLSID = IID('{E5B195C5-4D78-4441-884C-AF54C1E10F1B}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.ICamera
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{D8203265-F837-4B2B-BE98-881FB736D5DA}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.ICamera
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{D8203265-F837-4B2B-BE98-881FB736D5DA}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{D8203265-F837-4B2B-BE98-881FB736D5DA}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{D8203265-F837-4B2B-BE98-881FB736D5DA}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ICameraFollowing(DispatchBaseClass):
	'''Following Camera'''
	CLSID = IID('{5F14103C-4413-473C-AA57-EE7E7CEB49F1}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetFromView(self):
		'''
		Execute 'Get Frome View' function
		'''
		return self._oleobj_.InvokeTypes(107, LCID, 1, (24, 0), (),)


	def _get_EndFrame(self):
		return self._ApplyTypes_(*(110, 2, (3, 0), (), "EndFrame", None))
	def _get_FollowingType(self):
		return self._ApplyTypes_(*(104, 2, (3, 0), (), "FollowingType", '{2EDD0EC3-E7E0-42DF-8516-00E1D0FF7248}'))
	def _get_NormalDirection(self):
		return self._ApplyTypes_(*(106, 2, (8197, 0), (), "NormalDirection", None))
	def _get_Offset(self):
		return self._ApplyTypes_(*(103, 2, (8197, 0), (), "Offset", None))
	def _get_ReferenceMarker(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "ReferenceMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_StartFrame(self):
		return self._ApplyTypes_(*(109, 2, (3, 0), (), "StartFrame", None))
	def _get_UpDirection(self):
		return self._ApplyTypes_(*(105, 2, (8197, 0), (), "UpDirection", None))
	def _get_Use(self):
		return self._ApplyTypes_(*(108, 2, (11, 0), (), "Use", None))
	def _get_ZoomEffect(self):
		return self._ApplyTypes_(*(101, 2, (5, 0), (), "ZoomEffect", None))

	def _set_EndFrame(self, value):
		if "EndFrame" in self.__dict__: self.__dict__["EndFrame"] = value; return
		self._oleobj_.Invoke(*((110, LCID, 4, 0) + (value,) + ()))
	def _set_FollowingType(self, value):
		if "FollowingType" in self.__dict__: self.__dict__["FollowingType"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_NormalDirection(self, value):
		if "NormalDirection" in self.__dict__: self.__dict__["NormalDirection"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Offset(self, value):
		if "Offset" in self.__dict__: self.__dict__["Offset"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((103, LCID, 4, 0) + (variantValue,) + ()))
	def _set_ReferenceMarker(self, value):
		if "ReferenceMarker" in self.__dict__: self.__dict__["ReferenceMarker"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_StartFrame(self, value):
		if "StartFrame" in self.__dict__: self.__dict__["StartFrame"] = value; return
		self._oleobj_.Invoke(*((109, LCID, 4, 0) + (value,) + ()))
	def _set_UpDirection(self, value):
		if "UpDirection" in self.__dict__: self.__dict__["UpDirection"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((105, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Use(self, value):
		if "Use" in self.__dict__: self.__dict__["Use"] = value; return
		self._oleobj_.Invoke(*((108, LCID, 4, 0) + (value,) + ()))
	def _set_ZoomEffect(self, value):
		if "ZoomEffect" in self.__dict__: self.__dict__["ZoomEffect"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))

	EndFrame = property(_get_EndFrame, _set_EndFrame)
	'''
	End Frame

	:type: int
	'''
	FollowingType = property(_get_FollowingType, _set_FollowingType)
	'''
	Following type

	:type: recurdyn.ProcessNet.CameraFollowingType
	'''
	NormalDirection = property(_get_NormalDirection, _set_NormalDirection)
	'''
	Normal direction

	:type: list[float]
	'''
	Offset = property(_get_Offset, _set_Offset)
	'''
	Offset

	:type: list[float]
	'''
	ReferenceMarker = property(_get_ReferenceMarker, _set_ReferenceMarker)
	'''
	Reference Marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	StartFrame = property(_get_StartFrame, _set_StartFrame)
	'''
	Start Frame

	:type: int
	'''
	UpDirection = property(_get_UpDirection, _set_UpDirection)
	'''
	Up direction

	:type: list[float]
	'''
	Use = property(_get_Use, _set_Use)
	'''
	Use

	:type: bool
	'''
	ZoomEffect = property(_get_ZoomEffect, _set_ZoomEffect)
	'''
	Zoom Effect

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_EndFrame": _set_EndFrame,
		"_set_FollowingType": _set_FollowingType,
		"_set_NormalDirection": _set_NormalDirection,
		"_set_Offset": _set_Offset,
		"_set_ReferenceMarker": _set_ReferenceMarker,
		"_set_StartFrame": _set_StartFrame,
		"_set_UpDirection": _set_UpDirection,
		"_set_Use": _set_Use,
		"_set_ZoomEffect": _set_ZoomEffect,
	}
	_prop_map_get_ = {
		"EndFrame": (110, 2, (3, 0), (), "EndFrame", None),
		"FollowingType": (104, 2, (3, 0), (), "FollowingType", '{2EDD0EC3-E7E0-42DF-8516-00E1D0FF7248}'),
		"NormalDirection": (106, 2, (8197, 0), (), "NormalDirection", None),
		"Offset": (103, 2, (8197, 0), (), "Offset", None),
		"ReferenceMarker": (102, 2, (9, 0), (), "ReferenceMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"StartFrame": (109, 2, (3, 0), (), "StartFrame", None),
		"UpDirection": (105, 2, (8197, 0), (), "UpDirection", None),
		"Use": (108, 2, (11, 0), (), "Use", None),
		"ZoomEffect": (101, 2, (5, 0), (), "ZoomEffect", None),
	}
	_prop_map_put_ = {
		"EndFrame": ((110, LCID, 4, 0),()),
		"FollowingType": ((104, LCID, 4, 0),()),
		"NormalDirection": ((106, LCID, 4, 0),()),
		"Offset": ((103, LCID, 4, 0),()),
		"ReferenceMarker": ((102, LCID, 4, 0),()),
		"StartFrame": ((109, LCID, 4, 0),()),
		"UpDirection": ((105, LCID, 4, 0),()),
		"Use": ((108, LCID, 4, 0),()),
		"ZoomEffect": ((101, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ICameraMoving(DispatchBaseClass):
	'''Moving Camera'''
	CLSID = IID('{9B56E0F6-2127-4DE3-BE75-D1F6979D8F5D}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_CameraMarker(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "CameraMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_EndFrame(self):
		return self._ApplyTypes_(*(103, 2, (3, 0), (), "EndFrame", None))
	def _get_StartFrame(self):
		return self._ApplyTypes_(*(102, 2, (3, 0), (), "StartFrame", None))
	def _get_TargetPostionbyMarker(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "TargetPostionbyMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_TargetPostionbyPoint(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "TargetPostionbyPoint", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_Use(self):
		return self._ApplyTypes_(*(101, 2, (11, 0), (), "Use", None))
	def _get_ZoomEffect(self):
		return self._ApplyTypes_(*(107, 2, (5, 0), (), "ZoomEffect", None))

	def _set_CameraMarker(self, value):
		if "CameraMarker" in self.__dict__: self.__dict__["CameraMarker"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_EndFrame(self, value):
		if "EndFrame" in self.__dict__: self.__dict__["EndFrame"] = value; return
		self._oleobj_.Invoke(*((103, LCID, 4, 0) + (value,) + ()))
	def _set_StartFrame(self, value):
		if "StartFrame" in self.__dict__: self.__dict__["StartFrame"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_TargetPostionbyMarker(self, value):
		if "TargetPostionbyMarker" in self.__dict__: self.__dict__["TargetPostionbyMarker"] = value; return
		self._oleobj_.Invoke(*((105, LCID, 4, 0) + (value,) + ()))
	def _set_Use(self, value):
		if "Use" in self.__dict__: self.__dict__["Use"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_ZoomEffect(self, value):
		if "ZoomEffect" in self.__dict__: self.__dict__["ZoomEffect"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	CameraMarker = property(_get_CameraMarker, _set_CameraMarker)
	'''
	Camera marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	EndFrame = property(_get_EndFrame, _set_EndFrame)
	'''
	End Frame

	:type: int
	'''
	StartFrame = property(_get_StartFrame, _set_StartFrame)
	'''
	Start Frame

	:type: int
	'''
	TargetPostionbyMarker = property(_get_TargetPostionbyMarker, _set_TargetPostionbyMarker)
	'''
	Target Postion by Marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	TargetPostionbyPoint = property(_get_TargetPostionbyPoint, None)
	'''
	Target Postion by Point

	:type: recurdyn.ProcessNet.IVector
	'''
	Use = property(_get_Use, _set_Use)
	'''
	Use

	:type: bool
	'''
	ZoomEffect = property(_get_ZoomEffect, _set_ZoomEffect)
	'''
	Zoom Effect

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_CameraMarker": _set_CameraMarker,
		"_set_EndFrame": _set_EndFrame,
		"_set_StartFrame": _set_StartFrame,
		"_set_TargetPostionbyMarker": _set_TargetPostionbyMarker,
		"_set_Use": _set_Use,
		"_set_ZoomEffect": _set_ZoomEffect,
	}
	_prop_map_get_ = {
		"CameraMarker": (104, 2, (9, 0), (), "CameraMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"EndFrame": (103, 2, (3, 0), (), "EndFrame", None),
		"StartFrame": (102, 2, (3, 0), (), "StartFrame", None),
		"TargetPostionbyMarker": (105, 2, (9, 0), (), "TargetPostionbyMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"TargetPostionbyPoint": (106, 2, (9, 0), (), "TargetPostionbyPoint", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"Use": (101, 2, (11, 0), (), "Use", None),
		"ZoomEffect": (107, 2, (5, 0), (), "ZoomEffect", None),
	}
	_prop_map_put_ = {
		"CameraMarker": ((104, LCID, 4, 0),()),
		"EndFrame": ((103, LCID, 4, 0),()),
		"StartFrame": ((102, LCID, 4, 0),()),
		"TargetPostionbyMarker": ((105, LCID, 4, 0),()),
		"Use": ((101, LCID, 4, 0),()),
		"ZoomEffect": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ICameraMovingCollection(DispatchBaseClass):
	'''ICameraMovingCollection'''
	CLSID = IID('{98902028-58CE-4E5F-9E74-D6AEB21B63C8}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.ICameraMoving
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{9B56E0F6-2127-4DE3-BE75-D1F6979D8F5D}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.ICameraMoving
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{9B56E0F6-2127-4DE3-BE75-D1F6979D8F5D}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{9B56E0F6-2127-4DE3-BE75-D1F6979D8F5D}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{9B56E0F6-2127-4DE3-BE75-D1F6979D8F5D}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ICameraMulti(DispatchBaseClass):
	'''Multi Camera'''
	CLSID = IID('{5D98AE76-1263-4692-A393-F11F2C6547E1}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Add(self, pVal):
		'''
		Add a camera to multi camera list
		
		:param pVal: ICamera
		'''
		return self._oleobj_.InvokeTypes(106, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def CreateMovingCamera(self):
		'''
		CreateMovingCamera method
		
		:rtype: recurdyn.ProcessNet.ICameraMoving
		'''
		ret = self._oleobj_.InvokeTypes(102, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'CreateMovingCamera', '{9B56E0F6-2127-4DE3-BE75-D1F6979D8F5D}')
		return ret

	def Delete(self, pVal):
		'''
		Delete a camera in the list
		
		:param pVal: ICamera
		'''
		return self._oleobj_.InvokeTypes(107, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def DeleteMovingCamerabyIndex(self, Index):
		'''
		DeleteMovingCamerabyIndex method
		
		:param Index: int
		'''
		return self._oleobj_.InvokeTypes(104, LCID, 1, (24, 0), ((3, 1),),Index
			)


	def DeleteMovingCamerabyInterface(self, pVal):
		'''
		DeleteMovingCamerabyInterface method
		
		:param pVal: ICameraMoving
		'''
		return self._oleobj_.InvokeTypes(103, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def ExportCameraInfo(self, strFileName):
		'''
		Export camera informations
		
		:param strFileName: str
		'''
		return self._oleobj_.InvokeTypes(109, LCID, 1, (24, 0), ((8, 1),),strFileName
			)


	def ImportCameraInfo(self, strFileName):
		'''
		Import camera informations
		
		:param strFileName: str
		'''
		return self._oleobj_.InvokeTypes(108, LCID, 1, (24, 0), ((8, 1),),strFileName
			)


	def _get_CameraCollection(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "CameraCollection", '{E5B195C5-4D78-4441-884C-AF54C1E10F1B}'))
	def _get_CameraMovingCollection(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "CameraMovingCollection", '{98902028-58CE-4E5F-9E74-D6AEB21B63C8}'))

	CameraCollection = property(_get_CameraCollection, None)
	CameraMovingCollection = property(_get_CameraMovingCollection, None)

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"CameraCollection": (105, 2, (9, 0), (), "CameraCollection", '{E5B195C5-4D78-4441-884C-AF54C1E10F1B}'),
		"CameraMovingCollection": (101, 2, (9, 0), (), "CameraMovingCollection", '{98902028-58CE-4E5F-9E74-D6AEB21B63C8}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ICameraRiding(DispatchBaseClass):
	'''Riding Camera'''
	CLSID = IID('{29D57E5C-B425-41A4-8091-39435FC986EB}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetFromView(self):
		'''
		Execute 'Get Frome View' function
		'''
		return self._oleobj_.InvokeTypes(108, LCID, 1, (24, 0), (),)


	def _get_AxisType(self):
		return self._ApplyTypes_(*(103, 2, (3, 0), (), "AxisType", '{30E13C29-97B5-4A36-99AF-09D3F2FAD89C}'))
	def _get_EndFrame(self):
		return self._ApplyTypes_(*(111, 2, (3, 0), (), "EndFrame", None))
	def _get_NormalDirection(self):
		return self._ApplyTypes_(*(107, 2, (8197, 0), (), "NormalDirection", None))
	def _get_Offset(self):
		return self._ApplyTypes_(*(104, 2, (8197, 0), (), "Offset", None))
	def _get_ReferenceMarker(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "ReferenceMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_RidingType(self):
		return self._ApplyTypes_(*(105, 2, (3, 0), (), "RidingType", '{868B9AB5-B1DE-4017-B431-5667BA289507}'))
	def _get_StartFrame(self):
		return self._ApplyTypes_(*(110, 2, (3, 0), (), "StartFrame", None))
	def _get_UpDirection(self):
		return self._ApplyTypes_(*(106, 2, (8197, 0), (), "UpDirection", None))
	def _get_Use(self):
		return self._ApplyTypes_(*(109, 2, (11, 0), (), "Use", None))
	def _get_ZoomEffect(self):
		return self._ApplyTypes_(*(101, 2, (5, 0), (), "ZoomEffect", None))

	def _set_AxisType(self, value):
		if "AxisType" in self.__dict__: self.__dict__["AxisType"] = value; return
		self._oleobj_.Invoke(*((103, LCID, 4, 0) + (value,) + ()))
	def _set_EndFrame(self, value):
		if "EndFrame" in self.__dict__: self.__dict__["EndFrame"] = value; return
		self._oleobj_.Invoke(*((111, LCID, 4, 0) + (value,) + ()))
	def _set_NormalDirection(self, value):
		if "NormalDirection" in self.__dict__: self.__dict__["NormalDirection"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Offset(self, value):
		if "Offset" in self.__dict__: self.__dict__["Offset"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (variantValue,) + ()))
	def _set_ReferenceMarker(self, value):
		if "ReferenceMarker" in self.__dict__: self.__dict__["ReferenceMarker"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_RidingType(self, value):
		if "RidingType" in self.__dict__: self.__dict__["RidingType"] = value; return
		self._oleobj_.Invoke(*((105, LCID, 4, 0) + (value,) + ()))
	def _set_StartFrame(self, value):
		if "StartFrame" in self.__dict__: self.__dict__["StartFrame"] = value; return
		self._oleobj_.Invoke(*((110, LCID, 4, 0) + (value,) + ()))
	def _set_UpDirection(self, value):
		if "UpDirection" in self.__dict__: self.__dict__["UpDirection"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Use(self, value):
		if "Use" in self.__dict__: self.__dict__["Use"] = value; return
		self._oleobj_.Invoke(*((109, LCID, 4, 0) + (value,) + ()))
	def _set_ZoomEffect(self, value):
		if "ZoomEffect" in self.__dict__: self.__dict__["ZoomEffect"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))

	AxisType = property(_get_AxisType, _set_AxisType)
	'''
	Axis type

	:type: recurdyn.ProcessNet.AxisType
	'''
	EndFrame = property(_get_EndFrame, _set_EndFrame)
	'''
	End Frame

	:type: int
	'''
	NormalDirection = property(_get_NormalDirection, _set_NormalDirection)
	'''
	Normal direction

	:type: list[float]
	'''
	Offset = property(_get_Offset, _set_Offset)
	'''
	Offset

	:type: list[float]
	'''
	ReferenceMarker = property(_get_ReferenceMarker, _set_ReferenceMarker)
	'''
	Reference Marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	RidingType = property(_get_RidingType, _set_RidingType)
	'''
	Riding type

	:type: recurdyn.ProcessNet.CameraRidingType
	'''
	StartFrame = property(_get_StartFrame, _set_StartFrame)
	'''
	Start Frame

	:type: int
	'''
	UpDirection = property(_get_UpDirection, _set_UpDirection)
	'''
	Up direction

	:type: list[float]
	'''
	Use = property(_get_Use, _set_Use)
	'''
	Use

	:type: bool
	'''
	ZoomEffect = property(_get_ZoomEffect, _set_ZoomEffect)
	'''
	Zoom Effect

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_AxisType": _set_AxisType,
		"_set_EndFrame": _set_EndFrame,
		"_set_NormalDirection": _set_NormalDirection,
		"_set_Offset": _set_Offset,
		"_set_ReferenceMarker": _set_ReferenceMarker,
		"_set_RidingType": _set_RidingType,
		"_set_StartFrame": _set_StartFrame,
		"_set_UpDirection": _set_UpDirection,
		"_set_Use": _set_Use,
		"_set_ZoomEffect": _set_ZoomEffect,
	}
	_prop_map_get_ = {
		"AxisType": (103, 2, (3, 0), (), "AxisType", '{30E13C29-97B5-4A36-99AF-09D3F2FAD89C}'),
		"EndFrame": (111, 2, (3, 0), (), "EndFrame", None),
		"NormalDirection": (107, 2, (8197, 0), (), "NormalDirection", None),
		"Offset": (104, 2, (8197, 0), (), "Offset", None),
		"ReferenceMarker": (102, 2, (9, 0), (), "ReferenceMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"RidingType": (105, 2, (3, 0), (), "RidingType", '{868B9AB5-B1DE-4017-B431-5667BA289507}'),
		"StartFrame": (110, 2, (3, 0), (), "StartFrame", None),
		"UpDirection": (106, 2, (8197, 0), (), "UpDirection", None),
		"Use": (109, 2, (11, 0), (), "Use", None),
		"ZoomEffect": (101, 2, (5, 0), (), "ZoomEffect", None),
	}
	_prop_map_put_ = {
		"AxisType": ((103, LCID, 4, 0),()),
		"EndFrame": ((111, LCID, 4, 0),()),
		"NormalDirection": ((107, LCID, 4, 0),()),
		"Offset": ((104, LCID, 4, 0),()),
		"ReferenceMarker": ((102, LCID, 4, 0),()),
		"RidingType": ((105, LCID, 4, 0),()),
		"StartFrame": ((110, LCID, 4, 0),()),
		"UpDirection": ((106, LCID, 4, 0),()),
		"Use": ((109, LCID, 4, 0),()),
		"ZoomEffect": ((101, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ICameraSetting(DispatchBaseClass):
	'''Camera Setting'''
	CLSID = IID('{0FDF3022-5D98-4409-B16E-716A01915002}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def SelectCamera(self, pVal, cameraType):
		'''
		Select Camera
		
		:param pVal: ICamera
		:param cameraType: Camera
		'''
		return self._oleobj_.InvokeTypes(55, LCID, 1, (24, 0), ((9, 1), (3, 1)),pVal
			, cameraType)


	def _get_FollowingCamera(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "FollowingCamera", '{5F14103C-4413-473C-AA57-EE7E7CEB49F1}'))
	def _get_MovingCamera(self):
		return self._ApplyTypes_(*(56, 2, (9, 0), (), "MovingCamera", '{9B56E0F6-2127-4DE3-BE75-D1F6979D8F5D}'))
	def _get_MultiCamera(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "MultiCamera", '{5D98AE76-1263-4692-A393-F11F2C6547E1}'))
	def _get_RidingCamera(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "RidingCamera", '{29D57E5C-B425-41A4-8091-39435FC986EB}'))
	def _get_StandardCamera(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "StandardCamera", '{A9BF34D4-2D0F-42BA-8BD7-F434174F8122}'))

	FollowingCamera = property(_get_FollowingCamera, None)
	'''
	Following Camera

	:type: recurdyn.ProcessNet.ICameraFollowing
	'''
	MovingCamera = property(_get_MovingCamera, None)
	'''
	Moving Camera

	:type: recurdyn.ProcessNet.ICameraMoving
	'''
	MultiCamera = property(_get_MultiCamera, None)
	'''
	Multi Camera

	:type: recurdyn.ProcessNet.ICameraMulti
	'''
	RidingCamera = property(_get_RidingCamera, None)
	'''
	Riding Camera

	:type: recurdyn.ProcessNet.ICameraRiding
	'''
	StandardCamera = property(_get_StandardCamera, None)
	'''
	Standard Camera

	:type: recurdyn.ProcessNet.ICameraStandard
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"FollowingCamera": (52, 2, (9, 0), (), "FollowingCamera", '{5F14103C-4413-473C-AA57-EE7E7CEB49F1}'),
		"MovingCamera": (56, 2, (9, 0), (), "MovingCamera", '{9B56E0F6-2127-4DE3-BE75-D1F6979D8F5D}'),
		"MultiCamera": (54, 2, (9, 0), (), "MultiCamera", '{5D98AE76-1263-4692-A393-F11F2C6547E1}'),
		"RidingCamera": (53, 2, (9, 0), (), "RidingCamera", '{29D57E5C-B425-41A4-8091-39435FC986EB}'),
		"StandardCamera": (51, 2, (9, 0), (), "StandardCamera", '{A9BF34D4-2D0F-42BA-8BD7-F434174F8122}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ICameraStandard(DispatchBaseClass):
	'''Standard Camera'''
	CLSID = IID('{A9BF34D4-2D0F-42BA-8BD7-F434174F8122}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_EndFrame(self):
		return self._ApplyTypes_(*(104, 2, (3, 0), (), "EndFrame", None))
	def _get_StartFrame(self):
		return self._ApplyTypes_(*(103, 2, (3, 0), (), "StartFrame", None))
	def _get_Use(self):
		return self._ApplyTypes_(*(102, 2, (11, 0), (), "Use", None))
	def _get_ZoomEffect(self):
		return self._ApplyTypes_(*(101, 2, (5, 0), (), "ZoomEffect", None))

	def _set_EndFrame(self, value):
		if "EndFrame" in self.__dict__: self.__dict__["EndFrame"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_StartFrame(self, value):
		if "StartFrame" in self.__dict__: self.__dict__["StartFrame"] = value; return
		self._oleobj_.Invoke(*((103, LCID, 4, 0) + (value,) + ()))
	def _set_Use(self, value):
		if "Use" in self.__dict__: self.__dict__["Use"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ZoomEffect(self, value):
		if "ZoomEffect" in self.__dict__: self.__dict__["ZoomEffect"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))

	EndFrame = property(_get_EndFrame, _set_EndFrame)
	'''
	End Frame

	:type: int
	'''
	StartFrame = property(_get_StartFrame, _set_StartFrame)
	'''
	Start Frame

	:type: int
	'''
	Use = property(_get_Use, _set_Use)
	'''
	Use

	:type: bool
	'''
	ZoomEffect = property(_get_ZoomEffect, _set_ZoomEffect)
	'''
	Zoom Effect

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_EndFrame": _set_EndFrame,
		"_set_StartFrame": _set_StartFrame,
		"_set_Use": _set_Use,
		"_set_ZoomEffect": _set_ZoomEffect,
	}
	_prop_map_get_ = {
		"EndFrame": (104, 2, (3, 0), (), "EndFrame", None),
		"StartFrame": (103, 2, (3, 0), (), "StartFrame", None),
		"Use": (102, 2, (11, 0), (), "Use", None),
		"ZoomEffect": (101, 2, (5, 0), (), "ZoomEffect", None),
	}
	_prop_map_put_ = {
		"EndFrame": ((104, LCID, 4, 0),()),
		"StartFrame": ((103, LCID, 4, 0),()),
		"Use": ((102, LCID, 4, 0),()),
		"ZoomEffect": ((101, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ICampbellDiagram(DispatchBaseClass):
	'''CampbellDiagram in ModelView'''
	CLSID = IID('{2BB11C40-A053-4367-9C20-DE894FB04B41}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Calculation(self):
		'''
		Calculation method
		'''
		return self._oleobj_.InvokeTypes(69, LCID, 1, (24, 0), (),)


	def Clear(self):
		'''
		Clear method
		'''
		return self._oleobj_.InvokeTypes(70, LCID, 1, (24, 0), (),)


	def UpdateFrameSettings(self):
		'''
		Update Frame Settings
		'''
		return self._oleobj_.InvokeTypes(68, LCID, 1, (24, 0), (),)


	def UpdateSignalInformation(self):
		'''
		Update Signal Information
		'''
		return self._oleobj_.InvokeTypes(67, LCID, 1, (24, 0), (),)


	def _get_DeltaFrequency(self):
		return self._ApplyTypes_(*(72, 2, (5, 0), (), "DeltaFrequency", None))
	def _get_DeltaTime(self):
		return self._ApplyTypes_(*(71, 2, (19, 0), (), "DeltaTime", None))
	def _get_EndFrame(self):
		return self._ApplyTypes_(*(56, 2, (19, 0), (), "EndFrame", None))
	def _get_FFTOffsetType(self):
		return self._ApplyTypes_(*(114, 2, (3, 0), (), "FFTOffsetType", '{AE23F562-3A06-4ECB-9612-EC7876F4BE1D}'))
	def _get_FrameLength(self):
		return self._ApplyTypes_(*(60, 2, (5, 0), (), "FrameLength", None))
	def _get_FrameNumber(self):
		return self._ApplyTypes_(*(58, 2, (19, 0), (), "FrameNumber", None))
	def _get_FrameSizeType(self):
		return self._ApplyTypes_(*(112, 2, (3, 0), (), "FrameSizeType", '{AFA05818-29EC-42F6-921A-01770C2332D5}'))
	def _get_InputData(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "InputData", '{9AA65539-9E1F-4F0D-96BA-EA01E83BEDD8}'))
	def _get_MagnitudeType(self):
		return self._ApplyTypes_(*(116, 2, (3, 0), (), "MagnitudeType", '{EADDDC08-9115-4C11-916C-4A4675FDDE92}'))
	def _get_Overlap(self):
		return self._ApplyTypes_(*(59, 2, (5, 0), (), "Overlap", None))
	def _get_Plot(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "Plot", '{22FB7957-FCFB-4FCE-8E40-81C1B7829C79}'))
	def _get_RPMComputeType(self):
		return self._ApplyTypes_(*(113, 2, (3, 0), (), "RPMComputeType", '{88E20AC7-D248-43B6-917C-DFD45F74C724}'))
	def _get_ResidualNumber(self):
		return self._ApplyTypes_(*(61, 2, (5, 0), (), "ResidualNumber", None))
	def _get_Signal(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "Signal", '{A9259987-929F-434E-97EA-0DEE7B57D88C}'))
	def _get_StartFrame(self):
		return self._ApplyTypes_(*(55, 2, (19, 0), (), "StartFrame", None))
	def _get_UseRecommendFrameSettings(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseRecommendFrameSettings", None))
	def _get_UseRecommendTimeZone(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "UseRecommendTimeZone", None))
	def _get_WindowType(self):
		return self._ApplyTypes_(*(115, 2, (3, 0), (), "WindowType", '{36FE8E97-0EB8-4223-B25D-8600F4425BA6}'))

	def _set_DeltaTime(self, value):
		if "DeltaTime" in self.__dict__: self.__dict__["DeltaTime"] = value; return
		self._oleobj_.Invoke(*((71, LCID, 4, 0) + (value,) + ()))
	def _set_EndFrame(self, value):
		if "EndFrame" in self.__dict__: self.__dict__["EndFrame"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_FFTOffsetType(self, value):
		if "FFTOffsetType" in self.__dict__: self.__dict__["FFTOffsetType"] = value; return
		self._oleobj_.Invoke(*((114, LCID, 4, 0) + (value,) + ()))
	def _set_FrameNumber(self, value):
		if "FrameNumber" in self.__dict__: self.__dict__["FrameNumber"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))
	def _set_FrameSizeType(self, value):
		if "FrameSizeType" in self.__dict__: self.__dict__["FrameSizeType"] = value; return
		self._oleobj_.Invoke(*((112, LCID, 4, 0) + (value,) + ()))
	def _set_MagnitudeType(self, value):
		if "MagnitudeType" in self.__dict__: self.__dict__["MagnitudeType"] = value; return
		self._oleobj_.Invoke(*((116, LCID, 4, 0) + (value,) + ()))
	def _set_RPMComputeType(self, value):
		if "RPMComputeType" in self.__dict__: self.__dict__["RPMComputeType"] = value; return
		self._oleobj_.Invoke(*((113, LCID, 4, 0) + (value,) + ()))
	def _set_StartFrame(self, value):
		if "StartFrame" in self.__dict__: self.__dict__["StartFrame"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseRecommendFrameSettings(self, value):
		if "UseRecommendFrameSettings" in self.__dict__: self.__dict__["UseRecommendFrameSettings"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_UseRecommendTimeZone(self, value):
		if "UseRecommendTimeZone" in self.__dict__: self.__dict__["UseRecommendTimeZone"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_WindowType(self, value):
		if "WindowType" in self.__dict__: self.__dict__["WindowType"] = value; return
		self._oleobj_.Invoke(*((115, LCID, 4, 0) + (value,) + ()))

	DeltaFrequency = property(_get_DeltaFrequency, None)
	'''
	Delta Frequency

	:type: float
	'''
	DeltaTime = property(_get_DeltaTime, _set_DeltaTime)
	'''
	Delta Time

	:type: int
	'''
	EndFrame = property(_get_EndFrame, _set_EndFrame)
	'''
	End Frame

	:type: int
	'''
	FFTOffsetType = property(_get_FFTOffsetType, _set_FFTOffsetType)
	'''
	FFT Offset Type

	:type: recurdyn.ProcessNet.CampbellDiagramFFTOffsetType
	'''
	FrameLength = property(_get_FrameLength, None)
	'''
	Frame Length

	:type: float
	'''
	FrameNumber = property(_get_FrameNumber, _set_FrameNumber)
	'''
	Frame Number

	:type: int
	'''
	FrameSizeType = property(_get_FrameSizeType, _set_FrameSizeType)
	'''
	FrameSize Type

	:type: recurdyn.ProcessNet.CampbellDiagramFrameSizeType
	'''
	InputData = property(_get_InputData, None)
	'''
	Input Data

	:type: recurdyn.ProcessNet.ICampbellDiagramInput
	'''
	MagnitudeType = property(_get_MagnitudeType, _set_MagnitudeType)
	'''
	Magnitude Type

	:type: recurdyn.ProcessNet.CampbellDiagramMagnitudeType
	'''
	Overlap = property(_get_Overlap, None)
	'''
	Overlap

	:type: float
	'''
	Plot = property(_get_Plot, None)
	'''
	Plot

	:type: recurdyn.ProcessNet.ICampbellDiagramPlot
	'''
	RPMComputeType = property(_get_RPMComputeType, _set_RPMComputeType)
	'''
	RPM Compute Type

	:type: recurdyn.ProcessNet.CampbellDiagramRPMComputeType
	'''
	ResidualNumber = property(_get_ResidualNumber, None)
	'''
	Residual Number

	:type: float
	'''
	Signal = property(_get_Signal, None)
	'''
	Signal Information

	:type: recurdyn.ProcessNet.ICampbellDiagramSignal
	'''
	StartFrame = property(_get_StartFrame, _set_StartFrame)
	'''
	Start Frame

	:type: int
	'''
	UseRecommendFrameSettings = property(_get_UseRecommendFrameSettings, _set_UseRecommendFrameSettings)
	'''
	Use Recommended Frame Settings

	:type: bool
	'''
	UseRecommendTimeZone = property(_get_UseRecommendTimeZone, _set_UseRecommendTimeZone)
	'''
	Use Recommended Time-Zone

	:type: bool
	'''
	WindowType = property(_get_WindowType, _set_WindowType)
	'''
	Window Type

	:type: recurdyn.ProcessNet.CampbellDiagramWindowType
	'''

	_prop_map_set_function_ = {
		"_set_DeltaTime": _set_DeltaTime,
		"_set_EndFrame": _set_EndFrame,
		"_set_FFTOffsetType": _set_FFTOffsetType,
		"_set_FrameNumber": _set_FrameNumber,
		"_set_FrameSizeType": _set_FrameSizeType,
		"_set_MagnitudeType": _set_MagnitudeType,
		"_set_RPMComputeType": _set_RPMComputeType,
		"_set_StartFrame": _set_StartFrame,
		"_set_UseRecommendFrameSettings": _set_UseRecommendFrameSettings,
		"_set_UseRecommendTimeZone": _set_UseRecommendTimeZone,
		"_set_WindowType": _set_WindowType,
	}
	_prop_map_get_ = {
		"DeltaFrequency": (72, 2, (5, 0), (), "DeltaFrequency", None),
		"DeltaTime": (71, 2, (19, 0), (), "DeltaTime", None),
		"EndFrame": (56, 2, (19, 0), (), "EndFrame", None),
		"FFTOffsetType": (114, 2, (3, 0), (), "FFTOffsetType", '{AE23F562-3A06-4ECB-9612-EC7876F4BE1D}'),
		"FrameLength": (60, 2, (5, 0), (), "FrameLength", None),
		"FrameNumber": (58, 2, (19, 0), (), "FrameNumber", None),
		"FrameSizeType": (112, 2, (3, 0), (), "FrameSizeType", '{AFA05818-29EC-42F6-921A-01770C2332D5}'),
		"InputData": (51, 2, (9, 0), (), "InputData", '{9AA65539-9E1F-4F0D-96BA-EA01E83BEDD8}'),
		"MagnitudeType": (116, 2, (3, 0), (), "MagnitudeType", '{EADDDC08-9115-4C11-916C-4A4675FDDE92}'),
		"Overlap": (59, 2, (5, 0), (), "Overlap", None),
		"Plot": (53, 2, (9, 0), (), "Plot", '{22FB7957-FCFB-4FCE-8E40-81C1B7829C79}'),
		"RPMComputeType": (113, 2, (3, 0), (), "RPMComputeType", '{88E20AC7-D248-43B6-917C-DFD45F74C724}'),
		"ResidualNumber": (61, 2, (5, 0), (), "ResidualNumber", None),
		"Signal": (52, 2, (9, 0), (), "Signal", '{A9259987-929F-434E-97EA-0DEE7B57D88C}'),
		"StartFrame": (55, 2, (19, 0), (), "StartFrame", None),
		"UseRecommendFrameSettings": (57, 2, (11, 0), (), "UseRecommendFrameSettings", None),
		"UseRecommendTimeZone": (54, 2, (11, 0), (), "UseRecommendTimeZone", None),
		"WindowType": (115, 2, (3, 0), (), "WindowType", '{36FE8E97-0EB8-4223-B25D-8600F4425BA6}'),
	}
	_prop_map_put_ = {
		"DeltaTime": ((71, LCID, 4, 0),()),
		"EndFrame": ((56, LCID, 4, 0),()),
		"FFTOffsetType": ((114, LCID, 4, 0),()),
		"FrameNumber": ((58, LCID, 4, 0),()),
		"FrameSizeType": ((112, LCID, 4, 0),()),
		"MagnitudeType": ((116, LCID, 4, 0),()),
		"RPMComputeType": ((113, LCID, 4, 0),()),
		"StartFrame": ((55, LCID, 4, 0),()),
		"UseRecommendFrameSettings": ((57, LCID, 4, 0),()),
		"UseRecommendTimeZone": ((54, LCID, 4, 0),()),
		"WindowType": ((115, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ICampbellDiagramInput(DispatchBaseClass):
	'''CampbellDiagram Input Data'''
	CLSID = IID('{9AA65539-9E1F-4F0D-96BA-EA01E83BEDD8}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_InputFile(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "InputFile", None))
	def _get_InterpolationType(self):
		return self._ApplyTypes_(*(112, 2, (3, 0), (), "InterpolationType", '{0568DDC2-4746-4EB5-A12B-91972DF52E55}'))
	def _get_SignalPlotData(self):
		return self._ApplyTypes_(*(108, 2, (8, 0), (), "SignalPlotData", None))
	def _get_SignalPlotIndex(self):
		return self._ApplyTypes_(*(105, 2, (19, 0), (), "SignalPlotIndex", None))
	def _get_TachometerFactor(self):
		return self._ApplyTypes_(*(110, 2, (5, 0), (), "TachometerFactor", None))
	def _get_TachometerPlotData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "TachometerPlotData", None))
	def _get_TachometerPlotIndex(self):
		return self._ApplyTypes_(*(104, 2, (19, 0), (), "TachometerPlotIndex", None))
	def _get_TachometerType(self):
		return self._ApplyTypes_(*(109, 2, (3, 0), (), "TachometerType", '{61D6C043-7106-47A4-94EB-45D25146AD9D}'))
	def _get_TimePlotData(self):
		return self._ApplyTypes_(*(106, 2, (8, 0), (), "TimePlotData", None))
	def _get_TimePlotIndex(self):
		return self._ApplyTypes_(*(103, 2, (19, 0), (), "TimePlotIndex", None))
	def _get_UseInputFile(self):
		return self._ApplyTypes_(*(101, 2, (11, 0), (), "UseInputFile", None))
	def _get_UseInterpolation(self):
		return self._ApplyTypes_(*(111, 2, (11, 0), (), "UseInterpolation", None))
	def _get_dT(self):
		return self._ApplyTypes_(*(113, 2, (5, 0), (), "dT", None))

	def _set_InputFile(self, value):
		if "InputFile" in self.__dict__: self.__dict__["InputFile"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_InterpolationType(self, value):
		if "InterpolationType" in self.__dict__: self.__dict__["InterpolationType"] = value; return
		self._oleobj_.Invoke(*((112, LCID, 4, 0) + (value,) + ()))
	def _set_SignalPlotData(self, value):
		if "SignalPlotData" in self.__dict__: self.__dict__["SignalPlotData"] = value; return
		self._oleobj_.Invoke(*((108, LCID, 4, 0) + (value,) + ()))
	def _set_SignalPlotIndex(self, value):
		if "SignalPlotIndex" in self.__dict__: self.__dict__["SignalPlotIndex"] = value; return
		self._oleobj_.Invoke(*((105, LCID, 4, 0) + (value,) + ()))
	def _set_TachometerFactor(self, value):
		if "TachometerFactor" in self.__dict__: self.__dict__["TachometerFactor"] = value; return
		self._oleobj_.Invoke(*((110, LCID, 4, 0) + (value,) + ()))
	def _set_TachometerPlotData(self, value):
		if "TachometerPlotData" in self.__dict__: self.__dict__["TachometerPlotData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_TachometerPlotIndex(self, value):
		if "TachometerPlotIndex" in self.__dict__: self.__dict__["TachometerPlotIndex"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_TachometerType(self, value):
		if "TachometerType" in self.__dict__: self.__dict__["TachometerType"] = value; return
		self._oleobj_.Invoke(*((109, LCID, 4, 0) + (value,) + ()))
	def _set_TimePlotData(self, value):
		if "TimePlotData" in self.__dict__: self.__dict__["TimePlotData"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))
	def _set_TimePlotIndex(self, value):
		if "TimePlotIndex" in self.__dict__: self.__dict__["TimePlotIndex"] = value; return
		self._oleobj_.Invoke(*((103, LCID, 4, 0) + (value,) + ()))
	def _set_UseInputFile(self, value):
		if "UseInputFile" in self.__dict__: self.__dict__["UseInputFile"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UseInterpolation(self, value):
		if "UseInterpolation" in self.__dict__: self.__dict__["UseInterpolation"] = value; return
		self._oleobj_.Invoke(*((111, LCID, 4, 0) + (value,) + ()))
	def _set_dT(self, value):
		if "dT" in self.__dict__: self.__dict__["dT"] = value; return
		self._oleobj_.Invoke(*((113, LCID, 4, 0) + (value,) + ()))

	InputFile = property(_get_InputFile, _set_InputFile)
	'''
	Input File

	:type: str
	'''
	InterpolationType = property(_get_InterpolationType, _set_InterpolationType)
	'''
	Interpolation Type

	:type: recurdyn.ProcessNet.InterpolationType2
	'''
	SignalPlotData = property(_get_SignalPlotData, _set_SignalPlotData)
	'''
	Signal Plot Data

	:type: str
	'''
	SignalPlotIndex = property(_get_SignalPlotIndex, _set_SignalPlotIndex)
	'''
	Signal PlotIndex

	:type: int
	'''
	TachometerFactor = property(_get_TachometerFactor, _set_TachometerFactor)
	'''
	Tachometer Factor

	:type: float
	'''
	TachometerPlotData = property(_get_TachometerPlotData, _set_TachometerPlotData)
	'''
	Tachometer Plot Data

	:type: str
	'''
	TachometerPlotIndex = property(_get_TachometerPlotIndex, _set_TachometerPlotIndex)
	'''
	Tachometer PlotIndex

	:type: int
	'''
	TachometerType = property(_get_TachometerType, _set_TachometerType)
	'''
	Tachometer Type

	:type: recurdyn.ProcessNet.TachometerType
	'''
	TimePlotData = property(_get_TimePlotData, _set_TimePlotData)
	'''
	Time Plot Data

	:type: str
	'''
	TimePlotIndex = property(_get_TimePlotIndex, _set_TimePlotIndex)
	'''
	Time PlotIndex

	:type: int
	'''
	UseInputFile = property(_get_UseInputFile, _set_UseInputFile)
	'''
	Use Input File

	:type: bool
	'''
	UseInterpolation = property(_get_UseInterpolation, _set_UseInterpolation)
	'''
	Use Interpolation

	:type: bool
	'''
	dT = property(_get_dT, _set_dT)
	'''
	Time derivative

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_InputFile": _set_InputFile,
		"_set_InterpolationType": _set_InterpolationType,
		"_set_SignalPlotData": _set_SignalPlotData,
		"_set_SignalPlotIndex": _set_SignalPlotIndex,
		"_set_TachometerFactor": _set_TachometerFactor,
		"_set_TachometerPlotData": _set_TachometerPlotData,
		"_set_TachometerPlotIndex": _set_TachometerPlotIndex,
		"_set_TachometerType": _set_TachometerType,
		"_set_TimePlotData": _set_TimePlotData,
		"_set_TimePlotIndex": _set_TimePlotIndex,
		"_set_UseInputFile": _set_UseInputFile,
		"_set_UseInterpolation": _set_UseInterpolation,
		"_set_dT": _set_dT,
	}
	_prop_map_get_ = {
		"InputFile": (102, 2, (8, 0), (), "InputFile", None),
		"InterpolationType": (112, 2, (3, 0), (), "InterpolationType", '{0568DDC2-4746-4EB5-A12B-91972DF52E55}'),
		"SignalPlotData": (108, 2, (8, 0), (), "SignalPlotData", None),
		"SignalPlotIndex": (105, 2, (19, 0), (), "SignalPlotIndex", None),
		"TachometerFactor": (110, 2, (5, 0), (), "TachometerFactor", None),
		"TachometerPlotData": (107, 2, (8, 0), (), "TachometerPlotData", None),
		"TachometerPlotIndex": (104, 2, (19, 0), (), "TachometerPlotIndex", None),
		"TachometerType": (109, 2, (3, 0), (), "TachometerType", '{61D6C043-7106-47A4-94EB-45D25146AD9D}'),
		"TimePlotData": (106, 2, (8, 0), (), "TimePlotData", None),
		"TimePlotIndex": (103, 2, (19, 0), (), "TimePlotIndex", None),
		"UseInputFile": (101, 2, (11, 0), (), "UseInputFile", None),
		"UseInterpolation": (111, 2, (11, 0), (), "UseInterpolation", None),
		"dT": (113, 2, (5, 0), (), "dT", None),
	}
	_prop_map_put_ = {
		"InputFile": ((102, LCID, 4, 0),()),
		"InterpolationType": ((112, LCID, 4, 0),()),
		"SignalPlotData": ((108, LCID, 4, 0),()),
		"SignalPlotIndex": ((105, LCID, 4, 0),()),
		"TachometerFactor": ((110, LCID, 4, 0),()),
		"TachometerPlotData": ((107, LCID, 4, 0),()),
		"TachometerPlotIndex": ((104, LCID, 4, 0),()),
		"TachometerType": ((109, LCID, 4, 0),()),
		"TimePlotData": ((106, LCID, 4, 0),()),
		"TimePlotIndex": ((103, LCID, 4, 0),()),
		"UseInputFile": ((101, LCID, 4, 0),()),
		"UseInterpolation": ((111, LCID, 4, 0),()),
		"dT": ((113, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ICampbellDiagramPlot(DispatchBaseClass):
	'''CampbellDiagram Plot'''
	CLSID = IID('{22FB7957-FCFB-4FCE-8E40-81C1B7829C79}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def ClosePlot(self):
		'''
		Close Plot
		'''
		return self._oleobj_.InvokeTypes(114, LCID, 1, (24, 0), (),)


	def DrawPlot(self):
		'''
		Draw Plot
		'''
		return self._oleobj_.InvokeTypes(113, LCID, 1, (24, 0), (),)


	def _get_DrawOrderLine(self):
		return self._ApplyTypes_(*(104, 2, (11, 0), (), "DrawOrderLine", None))
	def _get_GraphOptionType(self):
		return self._ApplyTypes_(*(102, 2, (3, 0), (), "GraphOptionType", '{D6D17468-2B12-4B90-8B99-21687DD48ECB}'))
	def _get_MaximumOrder(self):
		return self._ApplyTypes_(*(110, 2, (5, 0), (), "MaximumOrder", None))
	def _get_MinimumOrder(self):
		return self._ApplyTypes_(*(109, 2, (5, 0), (), "MinimumOrder", None))
	def _get_OrderLineBrightness(self):
		return self._ApplyTypes_(*(106, 2, (19, 0), (), "OrderLineBrightness", None))
	def _get_OrderLineColor(self):
		return self._ApplyTypes_(*(105, 2, (19, 0), (), "OrderLineColor", None))
	def _get_OrderLineGap(self):
		return self._ApplyTypes_(*(111, 2, (5, 0), (), "OrderLineGap", None))
	def _get_OrderLineStyleType(self):
		return self._ApplyTypes_(*(107, 2, (3, 0), (), "OrderLineStyleType", '{F87507C9-472F-466C-AD59-4F1FA66E45D7}'))
	def _get_OrderLineWeightType(self):
		return self._ApplyTypes_(*(108, 2, (3, 0), (), "OrderLineWeightType", '{66495385-F02E-466F-9B49-1F60E0E118C6}'))
	def _get_PlotType(self):
		return self._ApplyTypes_(*(101, 2, (3, 0), (), "PlotType", '{8E14EB71-6FCF-4A62-B549-CE623F84927C}'))
	def _get_Resolution(self):
		return self._ApplyTypes_(*(112, 2, (19, 0), (), "Resolution", None))
	def _get_UseSwapAxis(self):
		return self._ApplyTypes_(*(103, 2, (11, 0), (), "UseSwapAxis", None))

	def _set_DrawOrderLine(self, value):
		if "DrawOrderLine" in self.__dict__: self.__dict__["DrawOrderLine"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_GraphOptionType(self, value):
		if "GraphOptionType" in self.__dict__: self.__dict__["GraphOptionType"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_MaximumOrder(self, value):
		if "MaximumOrder" in self.__dict__: self.__dict__["MaximumOrder"] = value; return
		self._oleobj_.Invoke(*((110, LCID, 4, 0) + (value,) + ()))
	def _set_MinimumOrder(self, value):
		if "MinimumOrder" in self.__dict__: self.__dict__["MinimumOrder"] = value; return
		self._oleobj_.Invoke(*((109, LCID, 4, 0) + (value,) + ()))
	def _set_OrderLineBrightness(self, value):
		if "OrderLineBrightness" in self.__dict__: self.__dict__["OrderLineBrightness"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))
	def _set_OrderLineColor(self, value):
		if "OrderLineColor" in self.__dict__: self.__dict__["OrderLineColor"] = value; return
		self._oleobj_.Invoke(*((105, LCID, 4, 0) + (value,) + ()))
	def _set_OrderLineGap(self, value):
		if "OrderLineGap" in self.__dict__: self.__dict__["OrderLineGap"] = value; return
		self._oleobj_.Invoke(*((111, LCID, 4, 0) + (value,) + ()))
	def _set_OrderLineStyleType(self, value):
		if "OrderLineStyleType" in self.__dict__: self.__dict__["OrderLineStyleType"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_OrderLineWeightType(self, value):
		if "OrderLineWeightType" in self.__dict__: self.__dict__["OrderLineWeightType"] = value; return
		self._oleobj_.Invoke(*((108, LCID, 4, 0) + (value,) + ()))
	def _set_PlotType(self, value):
		if "PlotType" in self.__dict__: self.__dict__["PlotType"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_Resolution(self, value):
		if "Resolution" in self.__dict__: self.__dict__["Resolution"] = value; return
		self._oleobj_.Invoke(*((112, LCID, 4, 0) + (value,) + ()))
	def _set_UseSwapAxis(self, value):
		if "UseSwapAxis" in self.__dict__: self.__dict__["UseSwapAxis"] = value; return
		self._oleobj_.Invoke(*((103, LCID, 4, 0) + (value,) + ()))

	DrawOrderLine = property(_get_DrawOrderLine, _set_DrawOrderLine)
	'''
	Draw OrderLine

	:type: bool
	'''
	GraphOptionType = property(_get_GraphOptionType, _set_GraphOptionType)
	'''
	Graph Option Type

	:type: recurdyn.ProcessNet.CampbellDiagramGraphOptionType
	'''
	MaximumOrder = property(_get_MaximumOrder, _set_MaximumOrder)
	'''
	Maximum Order

	:type: float
	'''
	MinimumOrder = property(_get_MinimumOrder, _set_MinimumOrder)
	'''
	Minimum Order

	:type: float
	'''
	OrderLineBrightness = property(_get_OrderLineBrightness, _set_OrderLineBrightness)
	'''
	OrderLine Brightness

	:type: int
	'''
	OrderLineColor = property(_get_OrderLineColor, _set_OrderLineColor)
	'''
	OrderLine Color

	:type: int
	'''
	OrderLineGap = property(_get_OrderLineGap, _set_OrderLineGap)
	'''
	Gap

	:type: float
	'''
	OrderLineStyleType = property(_get_OrderLineStyleType, _set_OrderLineStyleType)
	'''
	OrderLine Style Type

	:type: recurdyn.ProcessNet.CampbellDiagramOrderLineStyleType
	'''
	OrderLineWeightType = property(_get_OrderLineWeightType, _set_OrderLineWeightType)
	'''
	OrderLine Weight Type

	:type: recurdyn.ProcessNet.CampbellDiagramOrderLineWeightType
	'''
	PlotType = property(_get_PlotType, _set_PlotType)
	'''
	Plot Type

	:type: recurdyn.ProcessNet.CampbellDiagramPlotType
	'''
	Resolution = property(_get_Resolution, _set_Resolution)
	'''
	Resolution

	:type: int
	'''
	UseSwapAxis = property(_get_UseSwapAxis, _set_UseSwapAxis)
	'''
	Use Swap Axis

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_DrawOrderLine": _set_DrawOrderLine,
		"_set_GraphOptionType": _set_GraphOptionType,
		"_set_MaximumOrder": _set_MaximumOrder,
		"_set_MinimumOrder": _set_MinimumOrder,
		"_set_OrderLineBrightness": _set_OrderLineBrightness,
		"_set_OrderLineColor": _set_OrderLineColor,
		"_set_OrderLineGap": _set_OrderLineGap,
		"_set_OrderLineStyleType": _set_OrderLineStyleType,
		"_set_OrderLineWeightType": _set_OrderLineWeightType,
		"_set_PlotType": _set_PlotType,
		"_set_Resolution": _set_Resolution,
		"_set_UseSwapAxis": _set_UseSwapAxis,
	}
	_prop_map_get_ = {
		"DrawOrderLine": (104, 2, (11, 0), (), "DrawOrderLine", None),
		"GraphOptionType": (102, 2, (3, 0), (), "GraphOptionType", '{D6D17468-2B12-4B90-8B99-21687DD48ECB}'),
		"MaximumOrder": (110, 2, (5, 0), (), "MaximumOrder", None),
		"MinimumOrder": (109, 2, (5, 0), (), "MinimumOrder", None),
		"OrderLineBrightness": (106, 2, (19, 0), (), "OrderLineBrightness", None),
		"OrderLineColor": (105, 2, (19, 0), (), "OrderLineColor", None),
		"OrderLineGap": (111, 2, (5, 0), (), "OrderLineGap", None),
		"OrderLineStyleType": (107, 2, (3, 0), (), "OrderLineStyleType", '{F87507C9-472F-466C-AD59-4F1FA66E45D7}'),
		"OrderLineWeightType": (108, 2, (3, 0), (), "OrderLineWeightType", '{66495385-F02E-466F-9B49-1F60E0E118C6}'),
		"PlotType": (101, 2, (3, 0), (), "PlotType", '{8E14EB71-6FCF-4A62-B549-CE623F84927C}'),
		"Resolution": (112, 2, (19, 0), (), "Resolution", None),
		"UseSwapAxis": (103, 2, (11, 0), (), "UseSwapAxis", None),
	}
	_prop_map_put_ = {
		"DrawOrderLine": ((104, LCID, 4, 0),()),
		"GraphOptionType": ((102, LCID, 4, 0),()),
		"MaximumOrder": ((110, LCID, 4, 0),()),
		"MinimumOrder": ((109, LCID, 4, 0),()),
		"OrderLineBrightness": ((106, LCID, 4, 0),()),
		"OrderLineColor": ((105, LCID, 4, 0),()),
		"OrderLineGap": ((111, LCID, 4, 0),()),
		"OrderLineStyleType": ((107, LCID, 4, 0),()),
		"OrderLineWeightType": ((108, LCID, 4, 0),()),
		"PlotType": ((101, LCID, 4, 0),()),
		"Resolution": ((112, LCID, 4, 0),()),
		"UseSwapAxis": ((103, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ICampbellDiagramSignal(DispatchBaseClass):
	'''CampbellDiagram Signal Information'''
	CLSID = IID('{A9259987-929F-434E-97EA-0DEE7B57D88C}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def DrawSignalPlot(self, Type):
		'''
		Draw Signal Plot
		
		:param Type: CampbellDiagramSignalType
		'''
		return self._oleobj_.InvokeTypes(110, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetSignalXData(self, Type):
		'''
		Get Signal X data
		
		:param Type: CampbellDiagramSignalType
		:rtype: list[float]
		'''
		return self._ApplyTypes_(108, 1, (8197, 0), ((3, 1),), 'GetSignalXData', None,Type
			)


	def GetSignalYData(self, Type):
		'''
		Get Signal Y data
		
		:param Type: CampbellDiagramSignalType
		:rtype: list[float]
		'''
		return self._ApplyTypes_(109, 1, (8197, 0), ((3, 1),), 'GetSignalYData', None,Type
			)


	def _get_EndRPM(self):
		return self._ApplyTypes_(*(105, 2, (5, 0), (), "EndRPM", None))
	def _get_EndTime(self):
		return self._ApplyTypes_(*(102, 2, (5, 0), (), "EndTime", None))
	def _get_MaxFrequency(self):
		return self._ApplyTypes_(*(103, 2, (5, 0), (), "MaxFrequency", None))
	def _get_MaxOrder(self):
		return self._ApplyTypes_(*(106, 2, (5, 0), (), "MaxOrder", None))
	def _get_SamplingTime(self):
		return self._ApplyTypes_(*(107, 2, (5, 0), (), "SamplingTime", None))
	def _get_StartRPM(self):
		return self._ApplyTypes_(*(104, 2, (5, 0), (), "StartRPM", None))
	def _get_StartTime(self):
		return self._ApplyTypes_(*(101, 2, (5, 0), (), "StartTime", None))

	EndRPM = property(_get_EndRPM, None)
	'''
	End RPM

	:type: float
	'''
	EndTime = property(_get_EndTime, None)
	'''
	End Time

	:type: float
	'''
	MaxFrequency = property(_get_MaxFrequency, None)
	'''
	Max. Frequency

	:type: float
	'''
	MaxOrder = property(_get_MaxOrder, None)
	'''
	Max. Order

	:type: float
	'''
	SamplingTime = property(_get_SamplingTime, None)
	'''
	Sampling Time

	:type: float
	'''
	StartRPM = property(_get_StartRPM, None)
	'''
	Start RPM

	:type: float
	'''
	StartTime = property(_get_StartTime, None)
	'''
	Start Time

	:type: float
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"EndRPM": (105, 2, (5, 0), (), "EndRPM", None),
		"EndTime": (102, 2, (5, 0), (), "EndTime", None),
		"MaxFrequency": (103, 2, (5, 0), (), "MaxFrequency", None),
		"MaxOrder": (106, 2, (5, 0), (), "MaxOrder", None),
		"SamplingTime": (107, 2, (5, 0), (), "SamplingTime", None),
		"StartRPM": (104, 2, (5, 0), (), "StartRPM", None),
		"StartTime": (101, 2, (5, 0), (), "StartTime", None),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IChamferEdgeInfo(DispatchBaseClass):
	'''Geometry Chamfer Solid Edge Info'''
	CLSID = IID('{5503036B-EDA8-4408-B446-1931B03AA62E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_EdgeCollection(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "EdgeCollection", '{C760B0C7-18A0-463E-BC13-07F6B3931B32}'))
	def _get_FirstRange(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "FirstRange", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SecondRange(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "SecondRange", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	EdgeCollection = property(_get_EdgeCollection, None)
	'''
	Edge Collection

	:type: recurdyn.ProcessNet.IGeometryEdgeCollection
	'''
	FirstRange = property(_get_FirstRange, None)
	'''
	First Range

	:type: recurdyn.ProcessNet.IDouble
	'''
	SecondRange = property(_get_SecondRange, None)
	'''
	Second Range

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"EdgeCollection": (53, 2, (9, 0), (), "EdgeCollection", '{C760B0C7-18A0-463E-BC13-07F6B3931B32}'),
		"FirstRange": (51, 2, (9, 0), (), "FirstRange", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SecondRange": (52, 2, (9, 0), (), "SecondRange", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IChamferEdgeInfoCollection(DispatchBaseClass):
	'''IChamferEdgeInfoCollection'''
	CLSID = IID('{8FCE6A87-0E72-4BE8-89FB-3C074B7A50C5}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IChamferEdgeInfo
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{5503036B-EDA8-4408-B446-1931B03AA62E}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IChamferEdgeInfo
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{5503036B-EDA8-4408-B446-1931B03AA62E}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{5503036B-EDA8-4408-B446-1931B03AA62E}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{5503036B-EDA8-4408-B446-1931B03AA62E}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ICoefficient(DispatchBaseClass):
	'''Coefficient'''
	CLSID = IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Coefficient(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "Coefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ExponentValue(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "ExponentValue", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Spline(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "Spline", '{E76144D2-715D-41B4-A432-7B6C7F713FC2}'))
	def _get_UseExponentValue(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseExponentValue", None))
	def _get_UseSpline(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UseSpline", None))

	def _set_Spline(self, value):
		if "Spline" in self.__dict__: self.__dict__["Spline"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UseExponentValue(self, value):
		if "UseExponentValue" in self.__dict__: self.__dict__["UseExponentValue"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseSpline(self, value):
		if "UseSpline" in self.__dict__: self.__dict__["UseSpline"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	Coefficient = property(_get_Coefficient, None)
	'''
	Coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	ExponentValue = property(_get_ExponentValue, None)
	'''
	Exponent Value

	:type: recurdyn.ProcessNet.IDouble
	'''
	Spline = property(_get_Spline, _set_Spline)
	'''
	Spline

	:type: recurdyn.ProcessNet.ISpline
	'''
	UseExponentValue = property(_get_UseExponentValue, _set_UseExponentValue)
	'''
	Use exponent value

	:type: bool
	'''
	UseSpline = property(_get_UseSpline, _set_UseSpline)
	'''
	Use spline

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Spline": _set_Spline,
		"_set_UseExponentValue": _set_UseExponentValue,
		"_set_UseSpline": _set_UseSpline,
	}
	_prop_map_get_ = {
		"Coefficient": (51, 2, (9, 0), (), "Coefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ExponentValue": (54, 2, (9, 0), (), "ExponentValue", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Spline": (53, 2, (9, 0), (), "Spline", '{E76144D2-715D-41B4-A432-7B6C7F713FC2}'),
		"UseExponentValue": (55, 2, (11, 0), (), "UseExponentValue", None),
		"UseSpline": (52, 2, (11, 0), (), "UseSpline", None),
	}
	_prop_map_put_ = {
		"Spline": ((53, LCID, 4, 0),()),
		"UseExponentValue": ((55, LCID, 4, 0),()),
		"UseSpline": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ICommonAnalysisProperty(DispatchBaseClass):
	'''Common Analysis property'''
	CLSID = IID('{82ADFBAE-2220-4034-A55A-45CA75777ACF}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AutomaticChangeofProcessNetProject(self):
		return self._ApplyTypes_(*(80, 2, (11, 0), (), "AutomaticChangeofProcessNetProject", None))
	def _get_ExternalIDEPath(self):
		return self._ApplyTypes_(*(87, 2, (8, 0), (), "ExternalIDEPath", None))
	def _get_OutputEndTime(self):
		return self._ApplyTypes_(*(53, 2, (5, 0), (), "OutputEndTime", None))
	def _get_OutputEndTimeIDouble(self):
		return self._ApplyTypes_(*(71, 2, (9, 0), (), "OutputEndTimeIDouble", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_OutputStartTime(self):
		return self._ApplyTypes_(*(51, 2, (5, 0), (), "OutputStartTime", None))
	def _get_OutputStartTimeIDouble(self):
		return self._ApplyTypes_(*(70, 2, (9, 0), (), "OutputStartTimeIDouble", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PostPNetFunction(self):
		return self._ApplyTypes_(*(69, 2, (8, 0), (), "PostPNetFunction", None))
	def _get_PostPNetFunctionGeneral(self):
		return self._ApplyTypes_(*(77, 2, (8, 0), (), "PostPNetFunctionGeneral", None))
	def _get_PostPNetProject(self):
		return self._ApplyTypes_(*(68, 2, (8, 0), (), "PostPNetProject", None))
	def _get_PostPNetProjectGeneral(self):
		return self._ApplyTypes_(*(76, 2, (8, 0), (), "PostPNetProjectGeneral", None))
	def _get_PostPNetScriptPython(self):
		return self._ApplyTypes_(*(86, 2, (8, 0), (), "PostPNetScriptPython", None))
	def _get_PrePNetFunction(self):
		return self._ApplyTypes_(*(66, 2, (8, 0), (), "PrePNetFunction", None))
	def _get_PrePNetFunctionGeneral(self):
		return self._ApplyTypes_(*(74, 2, (8, 0), (), "PrePNetFunctionGeneral", None))
	def _get_PrePNetProject(self):
		return self._ApplyTypes_(*(65, 2, (8, 0), (), "PrePNetProject", None))
	def _get_PrePNetProjectGeneral(self):
		return self._ApplyTypes_(*(73, 2, (8, 0), (), "PrePNetProjectGeneral", None))
	def _get_PrePNetScriptPython(self):
		return self._ApplyTypes_(*(84, 2, (8, 0), (), "PrePNetScriptPython", None))
	def _get_ProcessNetMode(self):
		return self._ApplyTypes_(*(78, 2, (19, 0), (), "ProcessNetMode", None))
	def _get_PythonPath(self):
		return self._ApplyTypes_(*(88, 2, (8, 0), (), "PythonPath", None))
	def _get_SimulationResultFileforDesignParameter(self):
		return self._ApplyTypes_(*(61, 2, (11, 0), (), "SimulationResultFileforDesignParameter", None))
	def _get_SimulationResultFileforMCK(self):
		return self._ApplyTypes_(*(82, 2, (11, 0), (), "SimulationResultFileforMCK", None))
	def _get_SimulationResultFileforMessage(self):
		return self._ApplyTypes_(*(60, 2, (11, 0), (), "SimulationResultFileforMessage", None))
	def _get_SimulationResultFileforMultiOutput(self):
		return self._ApplyTypes_(*(79, 2, (11, 0), (), "SimulationResultFileforMultiOutput", None))
	def _get_SimulationResultFileforOutput(self):
		return self._ApplyTypes_(*(58, 2, (11, 0), (), "SimulationResultFileforOutput", None))
	def _get_SimulationResultFileforPerformanceIndex(self):
		return self._ApplyTypes_(*(62, 2, (11, 0), (), "SimulationResultFileforPerformanceIndex", None))
	def _get_SimulationResultFileforRAD(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "SimulationResultFileforRAD", None))
	def _get_SimulationResultFileforRMD(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "SimulationResultFileforRMD", None))
	def _get_SimulationResultFileforRPLT(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "SimulationResultFileforRPLT", None))
	def _get_SimulationResultFileforRequest(self):
		return self._ApplyTypes_(*(59, 2, (11, 0), (), "SimulationResultFileforRequest", None))
	def _get_SimulationResultFileforSolverGeneratedAnimation(self):
		return self._ApplyTypes_(*(63, 2, (11, 0), (), "SimulationResultFileforSolverGeneratedAnimation", None))
	def _get_UseGlobalReferenceFrameforRPLT(self):
		return self._ApplyTypes_(*(81, 2, (11, 0), (), "UseGlobalReferenceFrameforRPLT", None))
	def _get_UseOutputEndTime(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "UseOutputEndTime", None))
	def _get_UseOutputStartTime(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UseOutputStartTime", None))
	def _get_UsePostPNetFunction(self):
		return self._ApplyTypes_(*(67, 2, (11, 0), (), "UsePostPNetFunction", None))
	def _get_UsePostPNetFunctionGeneral(self):
		return self._ApplyTypes_(*(75, 2, (11, 0), (), "UsePostPNetFunctionGeneral", None))
	def _get_UsePostPNetScriptPython(self):
		return self._ApplyTypes_(*(85, 2, (11, 0), (), "UsePostPNetScriptPython", None))
	def _get_UsePrePNetFunction(self):
		return self._ApplyTypes_(*(64, 2, (11, 0), (), "UsePrePNetFunction", None))
	def _get_UsePrePNetFunctionGeneral(self):
		return self._ApplyTypes_(*(72, 2, (11, 0), (), "UsePrePNetFunctionGeneral", None))
	def _get_UsePrePNetScriptPython(self):
		return self._ApplyTypes_(*(83, 2, (11, 0), (), "UsePrePNetScriptPython", None))

	def _set_AutomaticChangeofProcessNetProject(self, value):
		if "AutomaticChangeofProcessNetProject" in self.__dict__: self.__dict__["AutomaticChangeofProcessNetProject"] = value; return
		self._oleobj_.Invoke(*((80, LCID, 4, 0) + (value,) + ()))
	def _set_ExternalIDEPath(self, value):
		if "ExternalIDEPath" in self.__dict__: self.__dict__["ExternalIDEPath"] = value; return
		self._oleobj_.Invoke(*((87, LCID, 4, 0) + (value,) + ()))
	def _set_OutputEndTime(self, value):
		if "OutputEndTime" in self.__dict__: self.__dict__["OutputEndTime"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_OutputStartTime(self, value):
		if "OutputStartTime" in self.__dict__: self.__dict__["OutputStartTime"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_PostPNetFunction(self, value):
		if "PostPNetFunction" in self.__dict__: self.__dict__["PostPNetFunction"] = value; return
		self._oleobj_.Invoke(*((69, LCID, 4, 0) + (value,) + ()))
	def _set_PostPNetFunctionGeneral(self, value):
		if "PostPNetFunctionGeneral" in self.__dict__: self.__dict__["PostPNetFunctionGeneral"] = value; return
		self._oleobj_.Invoke(*((77, LCID, 4, 0) + (value,) + ()))
	def _set_PostPNetProject(self, value):
		if "PostPNetProject" in self.__dict__: self.__dict__["PostPNetProject"] = value; return
		self._oleobj_.Invoke(*((68, LCID, 4, 0) + (value,) + ()))
	def _set_PostPNetProjectGeneral(self, value):
		if "PostPNetProjectGeneral" in self.__dict__: self.__dict__["PostPNetProjectGeneral"] = value; return
		self._oleobj_.Invoke(*((76, LCID, 4, 0) + (value,) + ()))
	def _set_PostPNetScriptPython(self, value):
		if "PostPNetScriptPython" in self.__dict__: self.__dict__["PostPNetScriptPython"] = value; return
		self._oleobj_.Invoke(*((86, LCID, 4, 0) + (value,) + ()))
	def _set_PrePNetFunction(self, value):
		if "PrePNetFunction" in self.__dict__: self.__dict__["PrePNetFunction"] = value; return
		self._oleobj_.Invoke(*((66, LCID, 4, 0) + (value,) + ()))
	def _set_PrePNetFunctionGeneral(self, value):
		if "PrePNetFunctionGeneral" in self.__dict__: self.__dict__["PrePNetFunctionGeneral"] = value; return
		self._oleobj_.Invoke(*((74, LCID, 4, 0) + (value,) + ()))
	def _set_PrePNetProject(self, value):
		if "PrePNetProject" in self.__dict__: self.__dict__["PrePNetProject"] = value; return
		self._oleobj_.Invoke(*((65, LCID, 4, 0) + (value,) + ()))
	def _set_PrePNetProjectGeneral(self, value):
		if "PrePNetProjectGeneral" in self.__dict__: self.__dict__["PrePNetProjectGeneral"] = value; return
		self._oleobj_.Invoke(*((73, LCID, 4, 0) + (value,) + ()))
	def _set_PrePNetScriptPython(self, value):
		if "PrePNetScriptPython" in self.__dict__: self.__dict__["PrePNetScriptPython"] = value; return
		self._oleobj_.Invoke(*((84, LCID, 4, 0) + (value,) + ()))
	def _set_ProcessNetMode(self, value):
		if "ProcessNetMode" in self.__dict__: self.__dict__["ProcessNetMode"] = value; return
		self._oleobj_.Invoke(*((78, LCID, 4, 0) + (value,) + ()))
	def _set_PythonPath(self, value):
		if "PythonPath" in self.__dict__: self.__dict__["PythonPath"] = value; return
		self._oleobj_.Invoke(*((88, LCID, 4, 0) + (value,) + ()))
	def _set_SimulationResultFileforDesignParameter(self, value):
		if "SimulationResultFileforDesignParameter" in self.__dict__: self.__dict__["SimulationResultFileforDesignParameter"] = value; return
		self._oleobj_.Invoke(*((61, LCID, 4, 0) + (value,) + ()))
	def _set_SimulationResultFileforMCK(self, value):
		if "SimulationResultFileforMCK" in self.__dict__: self.__dict__["SimulationResultFileforMCK"] = value; return
		self._oleobj_.Invoke(*((82, LCID, 4, 0) + (value,) + ()))
	def _set_SimulationResultFileforMessage(self, value):
		if "SimulationResultFileforMessage" in self.__dict__: self.__dict__["SimulationResultFileforMessage"] = value; return
		self._oleobj_.Invoke(*((60, LCID, 4, 0) + (value,) + ()))
	def _set_SimulationResultFileforMultiOutput(self, value):
		if "SimulationResultFileforMultiOutput" in self.__dict__: self.__dict__["SimulationResultFileforMultiOutput"] = value; return
		self._oleobj_.Invoke(*((79, LCID, 4, 0) + (value,) + ()))
	def _set_SimulationResultFileforOutput(self, value):
		if "SimulationResultFileforOutput" in self.__dict__: self.__dict__["SimulationResultFileforOutput"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))
	def _set_SimulationResultFileforPerformanceIndex(self, value):
		if "SimulationResultFileforPerformanceIndex" in self.__dict__: self.__dict__["SimulationResultFileforPerformanceIndex"] = value; return
		self._oleobj_.Invoke(*((62, LCID, 4, 0) + (value,) + ()))
	def _set_SimulationResultFileforRAD(self, value):
		if "SimulationResultFileforRAD" in self.__dict__: self.__dict__["SimulationResultFileforRAD"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_SimulationResultFileforRMD(self, value):
		if "SimulationResultFileforRMD" in self.__dict__: self.__dict__["SimulationResultFileforRMD"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_SimulationResultFileforRPLT(self, value):
		if "SimulationResultFileforRPLT" in self.__dict__: self.__dict__["SimulationResultFileforRPLT"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_SimulationResultFileforRequest(self, value):
		if "SimulationResultFileforRequest" in self.__dict__: self.__dict__["SimulationResultFileforRequest"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))
	def _set_SimulationResultFileforSolverGeneratedAnimation(self, value):
		if "SimulationResultFileforSolverGeneratedAnimation" in self.__dict__: self.__dict__["SimulationResultFileforSolverGeneratedAnimation"] = value; return
		self._oleobj_.Invoke(*((63, LCID, 4, 0) + (value,) + ()))
	def _set_UseGlobalReferenceFrameforRPLT(self, value):
		if "UseGlobalReferenceFrameforRPLT" in self.__dict__: self.__dict__["UseGlobalReferenceFrameforRPLT"] = value; return
		self._oleobj_.Invoke(*((81, LCID, 4, 0) + (value,) + ()))
	def _set_UseOutputEndTime(self, value):
		if "UseOutputEndTime" in self.__dict__: self.__dict__["UseOutputEndTime"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_UseOutputStartTime(self, value):
		if "UseOutputStartTime" in self.__dict__: self.__dict__["UseOutputStartTime"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_UsePostPNetFunction(self, value):
		if "UsePostPNetFunction" in self.__dict__: self.__dict__["UsePostPNetFunction"] = value; return
		self._oleobj_.Invoke(*((67, LCID, 4, 0) + (value,) + ()))
	def _set_UsePostPNetFunctionGeneral(self, value):
		if "UsePostPNetFunctionGeneral" in self.__dict__: self.__dict__["UsePostPNetFunctionGeneral"] = value; return
		self._oleobj_.Invoke(*((75, LCID, 4, 0) + (value,) + ()))
	def _set_UsePostPNetScriptPython(self, value):
		if "UsePostPNetScriptPython" in self.__dict__: self.__dict__["UsePostPNetScriptPython"] = value; return
		self._oleobj_.Invoke(*((85, LCID, 4, 0) + (value,) + ()))
	def _set_UsePrePNetFunction(self, value):
		if "UsePrePNetFunction" in self.__dict__: self.__dict__["UsePrePNetFunction"] = value; return
		self._oleobj_.Invoke(*((64, LCID, 4, 0) + (value,) + ()))
	def _set_UsePrePNetFunctionGeneral(self, value):
		if "UsePrePNetFunctionGeneral" in self.__dict__: self.__dict__["UsePrePNetFunctionGeneral"] = value; return
		self._oleobj_.Invoke(*((72, LCID, 4, 0) + (value,) + ()))
	def _set_UsePrePNetScriptPython(self, value):
		if "UsePrePNetScriptPython" in self.__dict__: self.__dict__["UsePrePNetScriptPython"] = value; return
		self._oleobj_.Invoke(*((83, LCID, 4, 0) + (value,) + ()))

	AutomaticChangeofProcessNetProject = property(_get_AutomaticChangeofProcessNetProject, _set_AutomaticChangeofProcessNetProject)
	'''
	Use Automatic Change of ProcessNet Project Reference when Loading

	:type: bool
	'''
	ExternalIDEPath = property(_get_ExternalIDEPath, _set_ExternalIDEPath)
	'''
	External IDE execute file path

	:type: str
	'''
	OutputEndTime = property(_get_OutputEndTime, _set_OutputEndTime)
	'''
	Output end time

	:type: float
	'''
	OutputEndTimeIDouble = property(_get_OutputEndTimeIDouble, None)
	'''
	Output end time

	:type: recurdyn.ProcessNet.IDouble
	'''
	OutputStartTime = property(_get_OutputStartTime, _set_OutputStartTime)
	'''
	Output start time

	:type: float
	'''
	OutputStartTimeIDouble = property(_get_OutputStartTimeIDouble, None)
	'''
	Output start time

	:type: recurdyn.ProcessNet.IDouble
	'''
	PostPNetFunction = property(_get_PostPNetFunction, _set_PostPNetFunction)
	'''
	Function name for PostProcessNet

	:type: str
	'''
	PostPNetFunctionGeneral = property(_get_PostPNetFunctionGeneral, _set_PostPNetFunctionGeneral)
	'''
	Function name for PostProcessNet General

	:type: str
	'''
	PostPNetProject = property(_get_PostPNetProject, _set_PostPNetProject)
	'''
	Project name for PostProcessNet

	:type: str
	'''
	PostPNetProjectGeneral = property(_get_PostPNetProjectGeneral, _set_PostPNetProjectGeneral)
	'''
	Project name for PostProcessNet General

	:type: str
	'''
	PostPNetScriptPython = property(_get_PostPNetScriptPython, _set_PostPNetScriptPython)
	'''
	Script name for PostProcessNet Python

	:type: str
	'''
	PrePNetFunction = property(_get_PrePNetFunction, _set_PrePNetFunction)
	'''
	Function name for PreProcessNet

	:type: str
	'''
	PrePNetFunctionGeneral = property(_get_PrePNetFunctionGeneral, _set_PrePNetFunctionGeneral)
	'''
	Function name for PreProcessNet General

	:type: str
	'''
	PrePNetProject = property(_get_PrePNetProject, _set_PrePNetProject)
	'''
	Project name for PreProcessNet

	:type: str
	'''
	PrePNetProjectGeneral = property(_get_PrePNetProjectGeneral, _set_PrePNetProjectGeneral)
	'''
	Assembly name for PreProcessNet General

	:type: str
	'''
	PrePNetScriptPython = property(_get_PrePNetScriptPython, _set_PrePNetScriptPython)
	'''
	Script name for PreProcessNet Python

	:type: str
	'''
	ProcessNetMode = property(_get_ProcessNetMode, _set_ProcessNetMode)
	'''
	Set ProcessNet Mode (0=VSTA, 1=GENERAL, 2=PYTHON)

	:type: int
	'''
	PythonPath = property(_get_PythonPath, _set_PythonPath)
	'''
	Python execute file path for ProcessNet Python

	:type: str
	'''
	SimulationResultFileforDesignParameter = property(_get_SimulationResultFileforDesignParameter, _set_SimulationResultFileforDesignParameter)
	'''
	Use Simulation result for design parameter

	:type: bool
	'''
	SimulationResultFileforMCK = property(_get_SimulationResultFileforMCK, _set_SimulationResultFileforMCK)
	'''
	Use simulation result for mass, damping, stiffness matrices

	:type: bool
	'''
	SimulationResultFileforMessage = property(_get_SimulationResultFileforMessage, _set_SimulationResultFileforMessage)
	'''
	Use Simulation result for message

	:type: bool
	'''
	SimulationResultFileforMultiOutput = property(_get_SimulationResultFileforMultiOutput, _set_SimulationResultFileforMultiOutput)
	'''
	Use Simulation result for multi output

	:type: bool
	'''
	SimulationResultFileforOutput = property(_get_SimulationResultFileforOutput, _set_SimulationResultFileforOutput)
	'''
	Use Simulation result for output

	:type: bool
	'''
	SimulationResultFileforPerformanceIndex = property(_get_SimulationResultFileforPerformanceIndex, _set_SimulationResultFileforPerformanceIndex)
	'''
	Use Simulation result for performance index

	:type: bool
	'''
	SimulationResultFileforRAD = property(_get_SimulationResultFileforRAD, _set_SimulationResultFileforRAD)
	'''
	Use Simulation result for RAD(Animation)

	:type: bool
	'''
	SimulationResultFileforRMD = property(_get_SimulationResultFileforRMD, _set_SimulationResultFileforRMD)
	'''
	Use Simulation result for RMD(Model Data)

	:type: bool
	'''
	SimulationResultFileforRPLT = property(_get_SimulationResultFileforRPLT, _set_SimulationResultFileforRPLT)
	'''
	Use Simulation result for RPLT(Plot, Scope, etc...)

	:type: bool
	'''
	SimulationResultFileforRequest = property(_get_SimulationResultFileforRequest, _set_SimulationResultFileforRequest)
	'''
	Use Simulation result for request

	:type: bool
	'''
	SimulationResultFileforSolverGeneratedAnimation = property(_get_SimulationResultFileforSolverGeneratedAnimation, _set_SimulationResultFileforSolverGeneratedAnimation)
	'''
	Use Simulation result for solver-generated animation

	:type: bool
	'''
	UseGlobalReferenceFrameforRPLT = property(_get_UseGlobalReferenceFrameforRPLT, _set_UseGlobalReferenceFrameforRPLT)
	'''
	Use Global ReferenceFrame for RPLT

	:type: bool
	'''
	UseOutputEndTime = property(_get_UseOutputEndTime, _set_UseOutputEndTime)
	'''
	Use Output end time

	:type: bool
	'''
	UseOutputStartTime = property(_get_UseOutputStartTime, _set_UseOutputStartTime)
	'''
	Use Output start time

	:type: bool
	'''
	UsePostPNetFunction = property(_get_UsePostPNetFunction, _set_UsePostPNetFunction)
	'''
	Use PostProcessNet function

	:type: bool
	'''
	UsePostPNetFunctionGeneral = property(_get_UsePostPNetFunctionGeneral, _set_UsePostPNetFunctionGeneral)
	'''
	Use PostProcessNet General function

	:type: bool
	'''
	UsePostPNetScriptPython = property(_get_UsePostPNetScriptPython, _set_UsePostPNetScriptPython)
	'''
	Use PostProcessNet Python Script

	:type: bool
	'''
	UsePrePNetFunction = property(_get_UsePrePNetFunction, _set_UsePrePNetFunction)
	'''
	Use PreProcessNet function

	:type: bool
	'''
	UsePrePNetFunctionGeneral = property(_get_UsePrePNetFunctionGeneral, _set_UsePrePNetFunctionGeneral)
	'''
	Use PreProcessNet General function

	:type: bool
	'''
	UsePrePNetScriptPython = property(_get_UsePrePNetScriptPython, _set_UsePrePNetScriptPython)
	'''
	Use PreProcessNet Python Script

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_AutomaticChangeofProcessNetProject": _set_AutomaticChangeofProcessNetProject,
		"_set_ExternalIDEPath": _set_ExternalIDEPath,
		"_set_OutputEndTime": _set_OutputEndTime,
		"_set_OutputStartTime": _set_OutputStartTime,
		"_set_PostPNetFunction": _set_PostPNetFunction,
		"_set_PostPNetFunctionGeneral": _set_PostPNetFunctionGeneral,
		"_set_PostPNetProject": _set_PostPNetProject,
		"_set_PostPNetProjectGeneral": _set_PostPNetProjectGeneral,
		"_set_PostPNetScriptPython": _set_PostPNetScriptPython,
		"_set_PrePNetFunction": _set_PrePNetFunction,
		"_set_PrePNetFunctionGeneral": _set_PrePNetFunctionGeneral,
		"_set_PrePNetProject": _set_PrePNetProject,
		"_set_PrePNetProjectGeneral": _set_PrePNetProjectGeneral,
		"_set_PrePNetScriptPython": _set_PrePNetScriptPython,
		"_set_ProcessNetMode": _set_ProcessNetMode,
		"_set_PythonPath": _set_PythonPath,
		"_set_SimulationResultFileforDesignParameter": _set_SimulationResultFileforDesignParameter,
		"_set_SimulationResultFileforMCK": _set_SimulationResultFileforMCK,
		"_set_SimulationResultFileforMessage": _set_SimulationResultFileforMessage,
		"_set_SimulationResultFileforMultiOutput": _set_SimulationResultFileforMultiOutput,
		"_set_SimulationResultFileforOutput": _set_SimulationResultFileforOutput,
		"_set_SimulationResultFileforPerformanceIndex": _set_SimulationResultFileforPerformanceIndex,
		"_set_SimulationResultFileforRAD": _set_SimulationResultFileforRAD,
		"_set_SimulationResultFileforRMD": _set_SimulationResultFileforRMD,
		"_set_SimulationResultFileforRPLT": _set_SimulationResultFileforRPLT,
		"_set_SimulationResultFileforRequest": _set_SimulationResultFileforRequest,
		"_set_SimulationResultFileforSolverGeneratedAnimation": _set_SimulationResultFileforSolverGeneratedAnimation,
		"_set_UseGlobalReferenceFrameforRPLT": _set_UseGlobalReferenceFrameforRPLT,
		"_set_UseOutputEndTime": _set_UseOutputEndTime,
		"_set_UseOutputStartTime": _set_UseOutputStartTime,
		"_set_UsePostPNetFunction": _set_UsePostPNetFunction,
		"_set_UsePostPNetFunctionGeneral": _set_UsePostPNetFunctionGeneral,
		"_set_UsePostPNetScriptPython": _set_UsePostPNetScriptPython,
		"_set_UsePrePNetFunction": _set_UsePrePNetFunction,
		"_set_UsePrePNetFunctionGeneral": _set_UsePrePNetFunctionGeneral,
		"_set_UsePrePNetScriptPython": _set_UsePrePNetScriptPython,
	}
	_prop_map_get_ = {
		"AutomaticChangeofProcessNetProject": (80, 2, (11, 0), (), "AutomaticChangeofProcessNetProject", None),
		"ExternalIDEPath": (87, 2, (8, 0), (), "ExternalIDEPath", None),
		"OutputEndTime": (53, 2, (5, 0), (), "OutputEndTime", None),
		"OutputEndTimeIDouble": (71, 2, (9, 0), (), "OutputEndTimeIDouble", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"OutputStartTime": (51, 2, (5, 0), (), "OutputStartTime", None),
		"OutputStartTimeIDouble": (70, 2, (9, 0), (), "OutputStartTimeIDouble", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PostPNetFunction": (69, 2, (8, 0), (), "PostPNetFunction", None),
		"PostPNetFunctionGeneral": (77, 2, (8, 0), (), "PostPNetFunctionGeneral", None),
		"PostPNetProject": (68, 2, (8, 0), (), "PostPNetProject", None),
		"PostPNetProjectGeneral": (76, 2, (8, 0), (), "PostPNetProjectGeneral", None),
		"PostPNetScriptPython": (86, 2, (8, 0), (), "PostPNetScriptPython", None),
		"PrePNetFunction": (66, 2, (8, 0), (), "PrePNetFunction", None),
		"PrePNetFunctionGeneral": (74, 2, (8, 0), (), "PrePNetFunctionGeneral", None),
		"PrePNetProject": (65, 2, (8, 0), (), "PrePNetProject", None),
		"PrePNetProjectGeneral": (73, 2, (8, 0), (), "PrePNetProjectGeneral", None),
		"PrePNetScriptPython": (84, 2, (8, 0), (), "PrePNetScriptPython", None),
		"ProcessNetMode": (78, 2, (19, 0), (), "ProcessNetMode", None),
		"PythonPath": (88, 2, (8, 0), (), "PythonPath", None),
		"SimulationResultFileforDesignParameter": (61, 2, (11, 0), (), "SimulationResultFileforDesignParameter", None),
		"SimulationResultFileforMCK": (82, 2, (11, 0), (), "SimulationResultFileforMCK", None),
		"SimulationResultFileforMessage": (60, 2, (11, 0), (), "SimulationResultFileforMessage", None),
		"SimulationResultFileforMultiOutput": (79, 2, (11, 0), (), "SimulationResultFileforMultiOutput", None),
		"SimulationResultFileforOutput": (58, 2, (11, 0), (), "SimulationResultFileforOutput", None),
		"SimulationResultFileforPerformanceIndex": (62, 2, (11, 0), (), "SimulationResultFileforPerformanceIndex", None),
		"SimulationResultFileforRAD": (56, 2, (11, 0), (), "SimulationResultFileforRAD", None),
		"SimulationResultFileforRMD": (55, 2, (11, 0), (), "SimulationResultFileforRMD", None),
		"SimulationResultFileforRPLT": (57, 2, (11, 0), (), "SimulationResultFileforRPLT", None),
		"SimulationResultFileforRequest": (59, 2, (11, 0), (), "SimulationResultFileforRequest", None),
		"SimulationResultFileforSolverGeneratedAnimation": (63, 2, (11, 0), (), "SimulationResultFileforSolverGeneratedAnimation", None),
		"UseGlobalReferenceFrameforRPLT": (81, 2, (11, 0), (), "UseGlobalReferenceFrameforRPLT", None),
		"UseOutputEndTime": (54, 2, (11, 0), (), "UseOutputEndTime", None),
		"UseOutputStartTime": (52, 2, (11, 0), (), "UseOutputStartTime", None),
		"UsePostPNetFunction": (67, 2, (11, 0), (), "UsePostPNetFunction", None),
		"UsePostPNetFunctionGeneral": (75, 2, (11, 0), (), "UsePostPNetFunctionGeneral", None),
		"UsePostPNetScriptPython": (85, 2, (11, 0), (), "UsePostPNetScriptPython", None),
		"UsePrePNetFunction": (64, 2, (11, 0), (), "UsePrePNetFunction", None),
		"UsePrePNetFunctionGeneral": (72, 2, (11, 0), (), "UsePrePNetFunctionGeneral", None),
		"UsePrePNetScriptPython": (83, 2, (11, 0), (), "UsePrePNetScriptPython", None),
	}
	_prop_map_put_ = {
		"AutomaticChangeofProcessNetProject": ((80, LCID, 4, 0),()),
		"ExternalIDEPath": ((87, LCID, 4, 0),()),
		"OutputEndTime": ((53, LCID, 4, 0),()),
		"OutputStartTime": ((51, LCID, 4, 0),()),
		"PostPNetFunction": ((69, LCID, 4, 0),()),
		"PostPNetFunctionGeneral": ((77, LCID, 4, 0),()),
		"PostPNetProject": ((68, LCID, 4, 0),()),
		"PostPNetProjectGeneral": ((76, LCID, 4, 0),()),
		"PostPNetScriptPython": ((86, LCID, 4, 0),()),
		"PrePNetFunction": ((66, LCID, 4, 0),()),
		"PrePNetFunctionGeneral": ((74, LCID, 4, 0),()),
		"PrePNetProject": ((65, LCID, 4, 0),()),
		"PrePNetProjectGeneral": ((73, LCID, 4, 0),()),
		"PrePNetScriptPython": ((84, LCID, 4, 0),()),
		"ProcessNetMode": ((78, LCID, 4, 0),()),
		"PythonPath": ((88, LCID, 4, 0),()),
		"SimulationResultFileforDesignParameter": ((61, LCID, 4, 0),()),
		"SimulationResultFileforMCK": ((82, LCID, 4, 0),()),
		"SimulationResultFileforMessage": ((60, LCID, 4, 0),()),
		"SimulationResultFileforMultiOutput": ((79, LCID, 4, 0),()),
		"SimulationResultFileforOutput": ((58, LCID, 4, 0),()),
		"SimulationResultFileforPerformanceIndex": ((62, LCID, 4, 0),()),
		"SimulationResultFileforRAD": ((56, LCID, 4, 0),()),
		"SimulationResultFileforRMD": ((55, LCID, 4, 0),()),
		"SimulationResultFileforRPLT": ((57, LCID, 4, 0),()),
		"SimulationResultFileforRequest": ((59, LCID, 4, 0),()),
		"SimulationResultFileforSolverGeneratedAnimation": ((63, LCID, 4, 0),()),
		"UseGlobalReferenceFrameforRPLT": ((81, LCID, 4, 0),()),
		"UseOutputEndTime": ((54, LCID, 4, 0),()),
		"UseOutputStartTime": ((52, LCID, 4, 0),()),
		"UsePostPNetFunction": ((67, LCID, 4, 0),()),
		"UsePostPNetFunctionGeneral": ((75, LCID, 4, 0),()),
		"UsePostPNetScriptPython": ((85, LCID, 4, 0),()),
		"UsePrePNetFunction": ((64, LCID, 4, 0),()),
		"UsePrePNetFunctionGeneral": ((72, LCID, 4, 0),()),
		"UsePrePNetScriptPython": ((83, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IConnectorAttribute(DispatchBaseClass):
	'''Connector attribute'''
	CLSID = IID('{27A86788-8B85-40CF-BE7F-BA915103A7DD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IConstraintCurveSegmentOption(DispatchBaseClass):
	'''Constraint curve segment option'''
	CLSID = IID('{C86088A5-C799-4E35-B0F6-78D60243C544}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Interpolation(self):
		return self._ApplyTypes_(*(52, 2, (3, 0), (), "Interpolation", '{2AF09FDD-94B3-42A3-B3A7-69EEC4AAFB7F}'))
	def _get_Segment(self):
		return self._ApplyTypes_(*(51, 2, (19, 0), (), "Segment", None))
	def _get_UseTotalSegment(self):
		return self._ApplyTypes_(*(53, 2, (11, 0), (), "UseTotalSegment", None))

	def _set_Interpolation(self, value):
		if "Interpolation" in self.__dict__: self.__dict__["Interpolation"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_Segment(self, value):
		if "Segment" in self.__dict__: self.__dict__["Segment"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_UseTotalSegment(self, value):
		if "UseTotalSegment" in self.__dict__: self.__dict__["UseTotalSegment"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))

	Interpolation = property(_get_Interpolation, _set_Interpolation)
	'''
	Curve segment interpolation type

	:type: recurdyn.ProcessNet.InterpolationType
	'''
	Segment = property(_get_Segment, _set_Segment)
	'''
	The number of curve segment

	:type: int
	'''
	UseTotalSegment = property(_get_UseTotalSegment, _set_UseTotalSegment)
	'''
	Use total segment

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Interpolation": _set_Interpolation,
		"_set_Segment": _set_Segment,
		"_set_UseTotalSegment": _set_UseTotalSegment,
	}
	_prop_map_get_ = {
		"Interpolation": (52, 2, (3, 0), (), "Interpolation", '{2AF09FDD-94B3-42A3-B3A7-69EEC4AAFB7F}'),
		"Segment": (51, 2, (19, 0), (), "Segment", None),
		"UseTotalSegment": (53, 2, (11, 0), (), "UseTotalSegment", None),
	}
	_prop_map_put_ = {
		"Interpolation": ((52, LCID, 4, 0),()),
		"Segment": ((51, LCID, 4, 0),()),
		"UseTotalSegment": ((53, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IConstraintUVPatchOption(DispatchBaseClass):
	'''UV surface constraint patch option'''
	CLSID = IID('{6822B8AE-A40F-474E-A2FA-39B3BBCBD54C}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_NumberOfUDirection(self):
		return self._ApplyTypes_(*(51, 2, (19, 0), (), "NumberOfUDirection", None))
	def _get_NumberOfVDirection(self):
		return self._ApplyTypes_(*(52, 2, (19, 0), (), "NumberOfVDirection", None))

	def _set_NumberOfUDirection(self, value):
		if "NumberOfUDirection" in self.__dict__: self.__dict__["NumberOfUDirection"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_NumberOfVDirection(self, value):
		if "NumberOfVDirection" in self.__dict__: self.__dict__["NumberOfVDirection"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	NumberOfUDirection = property(_get_NumberOfUDirection, _set_NumberOfUDirection)
	'''
	Number of patch in U direction

	:type: int
	'''
	NumberOfVDirection = property(_get_NumberOfVDirection, _set_NumberOfVDirection)
	'''
	Number of patch in V direction

	:type: int
	'''

	_prop_map_set_function_ = {
		"_set_NumberOfUDirection": _set_NumberOfUDirection,
		"_set_NumberOfVDirection": _set_NumberOfVDirection,
	}
	_prop_map_get_ = {
		"NumberOfUDirection": (51, 2, (19, 0), (), "NumberOfUDirection", None),
		"NumberOfVDirection": (52, 2, (19, 0), (), "NumberOfVDirection", None),
	}
	_prop_map_put_ = {
		"NumberOfUDirection": ((51, LCID, 4, 0),()),
		"NumberOfVDirection": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContact(DispatchBaseClass):
	'''Contact'''
	CLSID = IID('{91AB2D2E-7A8B-42CE-87AC-9C4EA40EDEB0}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactAttribute(DispatchBaseClass):
	'''Contact attribute'''
	CLSID = IID('{27A86788-8B85-40CF-BE7F-BA915103A7DE}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactCam2D(DispatchBaseClass):
	'''Cam2D contact'''
	CLSID = IID('{690A46F3-D9C2-4AFF-8493-1667E2AB01C8}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseCurveDepth(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "BaseCurveDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseCurveSegmentOption(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "BaseCurveSegmentOption", '{8C139E48-EC46-477D-9754-D1449E4AF801}'))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BaseUpDirection(self):
		return self._ApplyTypes_(*(253, 2, (11, 0), (), "BaseUpDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseUpDirection(self, value):
		if "BaseUpDirection" in self.__dict__: self.__dict__["BaseUpDirection"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseCurveDepth = property(_get_BaseCurveDepth, None)
	'''
	A depth of the contact face of the base curve.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseCurveSegmentOption = property(_get_BaseCurveSegmentOption, None)
	'''
	Base curve segment option

	:type: recurdyn.ProcessNet.ICam2DCurveSegmentOption
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BaseUpDirection = property(_get_BaseUpDirection, _set_BaseUpDirection)
	'''
	Base up direction

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseUpDirection": _set_BaseUpDirection,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseCurveDepth": (252, 2, (9, 0), (), "BaseCurveDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseCurveSegmentOption": (254, 2, (9, 0), (), "BaseCurveSegmentOption", '{8C139E48-EC46-477D-9754-D1449E4AF801}'),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BaseUpDirection": (253, 2, (11, 0), (), "BaseUpDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseUpDirection": ((253, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactCamLine2D(DispatchBaseClass):
	'''Camline2D contact'''
	CLSID = IID('{59D79E1B-8BF5-4AA3-93F4-971C64745639}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseCurveDepth(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "BaseCurveDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseCurveSegmentOption(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "BaseCurveSegmentOption", '{8C139E48-EC46-477D-9754-D1449E4AF801}'))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BaseUpDirection(self):
		return self._ApplyTypes_(*(253, 2, (11, 0), (), "BaseUpDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseUpDirection(self, value):
		if "BaseUpDirection" in self.__dict__: self.__dict__["BaseUpDirection"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseCurveDepth = property(_get_BaseCurveDepth, None)
	'''
	A depth of the contact face of the base curve.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseCurveSegmentOption = property(_get_BaseCurveSegmentOption, None)
	'''
	Base curve segment option

	:type: recurdyn.ProcessNet.ICam2DCurveSegmentOption
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BaseUpDirection = property(_get_BaseUpDirection, _set_BaseUpDirection)
	'''
	Base up direction

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseUpDirection": _set_BaseUpDirection,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseCurveDepth": (252, 2, (9, 0), (), "BaseCurveDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseCurveSegmentOption": (254, 2, (9, 0), (), "BaseCurveSegmentOption", '{8C139E48-EC46-477D-9754-D1449E4AF801}'),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BaseUpDirection": (253, 2, (11, 0), (), "BaseUpDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseUpDirection": ((253, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactCircleInCircle(DispatchBaseClass):
	'''Circle in circle contact'''
	CLSID = IID('{56C95894-62F4-4D51-B976-862FC3E711AB}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseCircleDepth(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "BaseCircleDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseCircleDepth = property(_get_BaseCircleDepth, None)
	'''
	A depth of the base circle.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseCircleDepth": (252, 2, (9, 0), (), "BaseCircleDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactCircleToCircle(DispatchBaseClass):
	'''Circle to circle contact'''
	CLSID = IID('{EC57C6FE-34A6-456F-AE24-7A8AACD2E723}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseCircleDepth(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "BaseCircleDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseCircleDepth = property(_get_BaseCircleDepth, None)
	'''
	A depth of the base circle.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseCircleDepth": (252, 2, (9, 0), (), "BaseCircleDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactCircleToCurve(DispatchBaseClass):
	'''Circle to curve contact'''
	CLSID = IID('{6A2CED63-4688-4E31-8407-68455039C297}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseCurveDepth(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "BaseCurveDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseCurveSegmentOption(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "BaseCurveSegmentOption", '{6CA887BC-2FC1-4E9C-AD2D-EEF830EA8FDF}'))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BaseUpDirection(self):
		return self._ApplyTypes_(*(253, 2, (11, 0), (), "BaseUpDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseUpDirection(self, value):
		if "BaseUpDirection" in self.__dict__: self.__dict__["BaseUpDirection"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseCurveDepth = property(_get_BaseCurveDepth, None)
	'''
	A depth of the contact face of the base curve.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseCurveSegmentOption = property(_get_BaseCurveSegmentOption, None)
	'''
	Base curve segment option

	:type: recurdyn.ProcessNet.IContactCurveSegmentOption
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BaseUpDirection = property(_get_BaseUpDirection, _set_BaseUpDirection)
	'''
	Base up direction

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseUpDirection": _set_BaseUpDirection,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseCurveDepth": (252, 2, (9, 0), (), "BaseCurveDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseCurveSegmentOption": (254, 2, (9, 0), (), "BaseCurveSegmentOption", '{6CA887BC-2FC1-4E9C-AD2D-EEF830EA8FDF}'),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BaseUpDirection": (253, 2, (11, 0), (), "BaseUpDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseUpDirection": ((253, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactCollection(DispatchBaseClass):
	'''IContactCollection'''
	CLSID = IID('{1B5A2AF8-F3DB-49CC-A112-21B0CD80C8EE}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IContact
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{91AB2D2E-7A8B-42CE-87AC-9C4EA40EDEB0}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IContact
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{91AB2D2E-7A8B-42CE-87AC-9C4EA40EDEB0}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{91AB2D2E-7A8B-42CE-87AC-9C4EA40EDEB0}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{91AB2D2E-7A8B-42CE-87AC-9C4EA40EDEB0}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IContactConeInCone(DispatchBaseClass):
	'''Cone in cone contact'''
	CLSID = IID('{58994473-EE23-4CC2-9F1B-EC20B9398A03}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OpenEndFace(self):
		return self._ApplyTypes_(*(252, 2, (11, 0), (), "OpenEndFace", None))
	def _get_OpenStartFace(self):
		return self._ApplyTypes_(*(251, 2, (11, 0), (), "OpenStartFace", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_OpenEndFace(self, value):
		if "OpenEndFace" in self.__dict__: self.__dict__["OpenEndFace"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_OpenStartFace(self, value):
		if "OpenStartFace" in self.__dict__: self.__dict__["OpenStartFace"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OpenEndFace = property(_get_OpenEndFace, _set_OpenEndFace)
	'''
	Open end face

	:type: bool
	'''
	OpenStartFace = property(_get_OpenStartFace, _set_OpenStartFace)
	'''
	Open start face

	:type: bool
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_OpenEndFace": _set_OpenEndFace,
		"_set_OpenStartFace": _set_OpenStartFace,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OpenEndFace": (252, 2, (11, 0), (), "OpenEndFace", None),
		"OpenStartFace": (251, 2, (11, 0), (), "OpenStartFace", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"OpenEndFace": ((252, LCID, 4, 0),()),
		"OpenStartFace": ((251, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactConeToCone(DispatchBaseClass):
	'''Cone to cone contact'''
	CLSID = IID('{60BF370A-91E7-47B9-8BBC-584843818988}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactConeToCylinder(DispatchBaseClass):
	'''Cone to cylinder contact'''
	CLSID = IID('{DA496635-4F2C-44AB-B59D-B2F1A6946C62}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactCurveSegmentOption(DispatchBaseClass):
	'''Contact curve segment option'''
	CLSID = IID('{6CA887BC-2FC1-4E9C-AD2D-EEF830EA8FDF}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetDepthDirectionVector(self):
		'''
		Get depth direction vector
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(55, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetDepthDirectionVector', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def SetDepthDirectionVector(self, x, y, z):
		'''
		Set depth direction vector
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(54, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),x
			, y, z)


	def _get_MaxPenetration(self):
		return self._ApplyTypes_(*(57, 2, (9, 0), (), "MaxPenetration", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Segment(self):
		return self._ApplyTypes_(*(51, 2, (19, 0), (), "Segment", None))
	def _get_Type(self):
		return self._ApplyTypes_(*(53, 2, (3, 0), (), "Type", '{E6F67E73-6EDC-47B1-9B2D-4A03967F1900}'))
	def _get_UseTotalSegment(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseTotalSegment", None))

	def _set_Segment(self, value):
		if "Segment" in self.__dict__: self.__dict__["Segment"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_Type(self, value):
		if "Type" in self.__dict__: self.__dict__["Type"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UseTotalSegment(self, value):
		if "UseTotalSegment" in self.__dict__: self.__dict__["UseTotalSegment"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))

	MaxPenetration = property(_get_MaxPenetration, None)
	'''
	Maximum penetration

	:type: recurdyn.ProcessNet.IDouble
	'''
	Segment = property(_get_Segment, _set_Segment)
	'''
	The number of curve segment

	:type: int
	'''
	Type = property(_get_Type, _set_Type)
	'''
	The type of curve

	:type: recurdyn.ProcessNet.CurveType
	'''
	UseTotalSegment = property(_get_UseTotalSegment, _set_UseTotalSegment)
	'''
	Use total segment

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Segment": _set_Segment,
		"_set_Type": _set_Type,
		"_set_UseTotalSegment": _set_UseTotalSegment,
	}
	_prop_map_get_ = {
		"MaxPenetration": (57, 2, (9, 0), (), "MaxPenetration", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Segment": (51, 2, (19, 0), (), "Segment", None),
		"Type": (53, 2, (3, 0), (), "Type", '{E6F67E73-6EDC-47B1-9B2D-4A03967F1900}'),
		"UseTotalSegment": (56, 2, (11, 0), (), "UseTotalSegment", None),
	}
	_prop_map_put_ = {
		"Segment": ((51, LCID, 4, 0),()),
		"Type": ((53, LCID, 4, 0),()),
		"UseTotalSegment": ((56, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactCurveToCurve(DispatchBaseClass):
	'''Curve to curve contact'''
	CLSID = IID('{3710687E-E5C7-436E-8127-3ECAC2851397}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionCurveSegmentOption(self):
		return self._ApplyTypes_(*(259, 2, (9, 0), (), "ActionCurveSegmentOption", '{6CA887BC-2FC1-4E9C-AD2D-EEF830EA8FDF}'))
	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_ActionUpDirection(self):
		return self._ApplyTypes_(*(255, 2, (11, 0), (), "ActionUpDirection", None))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_AdvancedDetectionType(self):
		return self._ApplyTypes_(*(252, 2, (3, 0), (), "AdvancedDetectionType", '{6F09699B-4D33-4C27-9A81-B42D2C5676D9}'))
	def _get_BaseCurveDepth(self):
		return self._ApplyTypes_(*(257, 2, (9, 0), (), "BaseCurveDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseCurveSegmentOption(self):
		return self._ApplyTypes_(*(258, 2, (9, 0), (), "BaseCurveSegmentOption", '{6CA887BC-2FC1-4E9C-AD2D-EEF830EA8FDF}'))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BaseUpDirection(self):
		return self._ApplyTypes_(*(256, 2, (11, 0), (), "BaseUpDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_Use2P5DContact(self):
		return self._ApplyTypes_(*(254, 2, (11, 0), (), "Use2P5DContact", None))
	def _get_UseAdvancedDetection(self):
		return self._ApplyTypes_(*(253, 2, (11, 0), (), "UseAdvancedDetection", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_ActionUpDirection(self, value):
		if "ActionUpDirection" in self.__dict__: self.__dict__["ActionUpDirection"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_AdvancedDetectionType(self, value):
		if "AdvancedDetectionType" in self.__dict__: self.__dict__["AdvancedDetectionType"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseUpDirection(self, value):
		if "BaseUpDirection" in self.__dict__: self.__dict__["BaseUpDirection"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_Use2P5DContact(self, value):
		if "Use2P5DContact" in self.__dict__: self.__dict__["Use2P5DContact"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_UseAdvancedDetection(self, value):
		if "UseAdvancedDetection" in self.__dict__: self.__dict__["UseAdvancedDetection"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionCurveSegmentOption = property(_get_ActionCurveSegmentOption, None)
	'''
	Action curve segment option

	:type: recurdyn.ProcessNet.IContactCurveSegmentOption
	'''
	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	ActionUpDirection = property(_get_ActionUpDirection, _set_ActionUpDirection)
	'''
	Action up direction

	:type: bool
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	AdvancedDetectionType = property(_get_AdvancedDetectionType, _set_AdvancedDetectionType)
	'''
	Advanced detection type

	:type: recurdyn.ProcessNet.AdvancedDetectionType
	'''
	BaseCurveDepth = property(_get_BaseCurveDepth, None)
	'''
	A depth of the contact face of the base curve.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseCurveSegmentOption = property(_get_BaseCurveSegmentOption, None)
	'''
	Base curve segment option

	:type: recurdyn.ProcessNet.IContactCurveSegmentOption
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BaseUpDirection = property(_get_BaseUpDirection, _set_BaseUpDirection)
	'''
	Base up direction

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	Use2P5DContact = property(_get_Use2P5DContact, _set_Use2P5DContact)
	'''
	Use 2.5D contact

	:type: bool
	'''
	UseAdvancedDetection = property(_get_UseAdvancedDetection, _set_UseAdvancedDetection)
	'''
	Use advanced detection

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_ActionUpDirection": _set_ActionUpDirection,
		"_set_Active": _set_Active,
		"_set_AdvancedDetectionType": _set_AdvancedDetectionType,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseUpDirection": _set_BaseUpDirection,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_Use2P5DContact": _set_Use2P5DContact,
		"_set_UseAdvancedDetection": _set_UseAdvancedDetection,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionCurveSegmentOption": (259, 2, (9, 0), (), "ActionCurveSegmentOption", '{6CA887BC-2FC1-4E9C-AD2D-EEF830EA8FDF}'),
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"ActionUpDirection": (255, 2, (11, 0), (), "ActionUpDirection", None),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"AdvancedDetectionType": (252, 2, (3, 0), (), "AdvancedDetectionType", '{6F09699B-4D33-4C27-9A81-B42D2C5676D9}'),
		"BaseCurveDepth": (257, 2, (9, 0), (), "BaseCurveDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseCurveSegmentOption": (258, 2, (9, 0), (), "BaseCurveSegmentOption", '{6CA887BC-2FC1-4E9C-AD2D-EEF830EA8FDF}'),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BaseUpDirection": (256, 2, (11, 0), (), "BaseUpDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"Use2P5DContact": (254, 2, (11, 0), (), "Use2P5DContact", None),
		"UseAdvancedDetection": (253, 2, (11, 0), (), "UseAdvancedDetection", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"ActionUpDirection": ((255, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"AdvancedDetectionType": ((252, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseUpDirection": ((256, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"Use2P5DContact": ((254, LCID, 4, 0),()),
		"UseAdvancedDetection": ((253, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactCylinderInCylinder(DispatchBaseClass):
	'''Cylinder in cylinder contact'''
	CLSID = IID('{D4E093C4-C608-4D7E-A620-25FA02B21B83}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OpenEndFace(self):
		return self._ApplyTypes_(*(253, 2, (11, 0), (), "OpenEndFace", None))
	def _get_OpenStartFace(self):
		return self._ApplyTypes_(*(252, 2, (11, 0), (), "OpenStartFace", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_OpenEndFace(self, value):
		if "OpenEndFace" in self.__dict__: self.__dict__["OpenEndFace"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_OpenStartFace(self, value):
		if "OpenStartFace" in self.__dict__: self.__dict__["OpenStartFace"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OpenEndFace = property(_get_OpenEndFace, _set_OpenEndFace)
	'''
	Open end face

	:type: bool
	'''
	OpenStartFace = property(_get_OpenStartFace, _set_OpenStartFace)
	'''
	Open start face

	:type: bool
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_OpenEndFace": _set_OpenEndFace,
		"_set_OpenStartFace": _set_OpenStartFace,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OpenEndFace": (253, 2, (11, 0), (), "OpenEndFace", None),
		"OpenStartFace": (252, 2, (11, 0), (), "OpenStartFace", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"OpenEndFace": ((253, LCID, 4, 0),()),
		"OpenStartFace": ((252, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactCylinderToBox(DispatchBaseClass):
	'''Cylinder to box contact'''
	CLSID = IID('{B006015D-09FE-4F3A-9922-B74E7C4036A0}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactCylinderToCylinder(DispatchBaseClass):
	'''Cylinder to cylinder contact'''
	CLSID = IID('{CA52FC45-8B33-4AB7-BE25-8454F1C1CB57}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactCylinderToSurface(DispatchBaseClass):
	'''Cylinder to surface contact'''
	CLSID = IID('{2B0D7BEC-4344-49F3-BF7A-CFEB25A06BFC}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BasePatchOption(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "BasePatchOption", '{ED5F7902-56FD-482D-AEF2-D898A1EBFF1B}'))
	def _get_BaseUpDirection(self):
		return self._ApplyTypes_(*(252, 2, (11, 0), (), "BaseUpDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseUpDirection(self, value):
		if "BaseUpDirection" in self.__dict__: self.__dict__["BaseUpDirection"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BasePatchOption = property(_get_BasePatchOption, None)
	'''
	Extended surface to surface contact base patch option

	:type: recurdyn.ProcessNet.IContactExtendedSurfaceToSurfacePatchOption
	'''
	BaseUpDirection = property(_get_BaseUpDirection, _set_BaseUpDirection)
	'''
	Base up direction

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseUpDirection": _set_BaseUpDirection,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BasePatchOption": (253, 2, (9, 0), (), "BasePatchOption", '{ED5F7902-56FD-482D-AEF2-D898A1EBFF1B}'),
		"BaseUpDirection": (252, 2, (11, 0), (), "BaseUpDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseUpDirection": ((252, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactExtendedSurfaceToSurface(DispatchBaseClass):
	'''Extended surface to surface contact'''
	CLSID = IID('{6495A425-79AC-40E6-8BF6-A95AA1A2D578}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_ActionPatchOption(self):
		return self._ApplyTypes_(*(256, 2, (9, 0), (), "ActionPatchOption", '{ED5F7902-56FD-482D-AEF2-D898A1EBFF1B}'))
	def _get_ActionUpDirection(self):
		return self._ApplyTypes_(*(257, 2, (11, 0), (), "ActionUpDirection", None))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_AdvancedDetectionType(self):
		return self._ApplyTypes_(*(252, 2, (3, 0), (), "AdvancedDetectionType", '{6F09699B-4D33-4C27-9A81-B42D2C5676D9}'))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BasePatchOption(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "BasePatchOption", '{ED5F7902-56FD-482D-AEF2-D898A1EBFF1B}'))
	def _get_BaseUpDirection(self):
		return self._ApplyTypes_(*(258, 2, (11, 0), (), "BaseUpDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_Use2P5DContact(self):
		return self._ApplyTypes_(*(254, 2, (11, 0), (), "Use2P5DContact", None))
	def _get_UseAdvancedDetection(self):
		return self._ApplyTypes_(*(253, 2, (11, 0), (), "UseAdvancedDetection", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_ActionUpDirection(self, value):
		if "ActionUpDirection" in self.__dict__: self.__dict__["ActionUpDirection"] = value; return
		self._oleobj_.Invoke(*((257, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_AdvancedDetectionType(self, value):
		if "AdvancedDetectionType" in self.__dict__: self.__dict__["AdvancedDetectionType"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseUpDirection(self, value):
		if "BaseUpDirection" in self.__dict__: self.__dict__["BaseUpDirection"] = value; return
		self._oleobj_.Invoke(*((258, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_Use2P5DContact(self, value):
		if "Use2P5DContact" in self.__dict__: self.__dict__["Use2P5DContact"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_UseAdvancedDetection(self, value):
		if "UseAdvancedDetection" in self.__dict__: self.__dict__["UseAdvancedDetection"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	ActionPatchOption = property(_get_ActionPatchOption, None)
	'''
	Extended surface to surface contact action patch option

	:type: recurdyn.ProcessNet.IContactExtendedSurfaceToSurfacePatchOption
	'''
	ActionUpDirection = property(_get_ActionUpDirection, _set_ActionUpDirection)
	'''
	Action up direction

	:type: bool
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	AdvancedDetectionType = property(_get_AdvancedDetectionType, _set_AdvancedDetectionType)
	'''
	Advanced detection type

	:type: recurdyn.ProcessNet.AdvancedDetectionType
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BasePatchOption = property(_get_BasePatchOption, None)
	'''
	Extended surface to surface contact base patch option

	:type: recurdyn.ProcessNet.IContactExtendedSurfaceToSurfacePatchOption
	'''
	BaseUpDirection = property(_get_BaseUpDirection, _set_BaseUpDirection)
	'''
	Base up direction

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	Use2P5DContact = property(_get_Use2P5DContact, _set_Use2P5DContact)
	'''
	Use 2.5D contact

	:type: bool
	'''
	UseAdvancedDetection = property(_get_UseAdvancedDetection, _set_UseAdvancedDetection)
	'''
	Use advanced detection type

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_ActionUpDirection": _set_ActionUpDirection,
		"_set_Active": _set_Active,
		"_set_AdvancedDetectionType": _set_AdvancedDetectionType,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseUpDirection": _set_BaseUpDirection,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_Use2P5DContact": _set_Use2P5DContact,
		"_set_UseAdvancedDetection": _set_UseAdvancedDetection,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"ActionPatchOption": (256, 2, (9, 0), (), "ActionPatchOption", '{ED5F7902-56FD-482D-AEF2-D898A1EBFF1B}'),
		"ActionUpDirection": (257, 2, (11, 0), (), "ActionUpDirection", None),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"AdvancedDetectionType": (252, 2, (3, 0), (), "AdvancedDetectionType", '{6F09699B-4D33-4C27-9A81-B42D2C5676D9}'),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BasePatchOption": (255, 2, (9, 0), (), "BasePatchOption", '{ED5F7902-56FD-482D-AEF2-D898A1EBFF1B}'),
		"BaseUpDirection": (258, 2, (11, 0), (), "BaseUpDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"Use2P5DContact": (254, 2, (11, 0), (), "Use2P5DContact", None),
		"UseAdvancedDetection": (253, 2, (11, 0), (), "UseAdvancedDetection", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"ActionUpDirection": ((257, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"AdvancedDetectionType": ((252, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseUpDirection": ((258, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"Use2P5DContact": ((254, LCID, 4, 0),()),
		"UseAdvancedDetection": ((253, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactExtendedSurfaceToSurfacePatchOption(DispatchBaseClass):
	'''Extended surface to surface contact patch option'''
	CLSID = IID('{ED5F7902-56FD-482D-AEF2-D898A1EBFF1B}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetDividedCubicCellNumber(self):
		'''
		Get divided cubic cell number
		
		:rtype: (int, int, int)
		'''
		return self._ApplyTypes_(57, 1, (24, 0), ((16387, 2), (16387, 2), (16387, 2)), 'GetDividedCubicCellNumber', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def SetDividedCubicCellNumber(self, x, y, z):
		'''
		Set divided cubic cell number
		
		:param x: int
		:param y: int
		:param z: int
		'''
		return self._oleobj_.InvokeTypes(58, LCID, 1, (24, 0), ((3, 1), (3, 1), (3, 1)),x
			, y, z)


	def _get_MaxPenetration(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "MaxPenetration", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MinimumPlaneTolerance(self):
		return self._ApplyTypes_(*(55, 2, (5, 0), (), "MinimumPlaneTolerance", None))
	def _get_PlaneToleranceFactor(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "PlaneToleranceFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SurfaceType(self):
		return self._ApplyTypes_(*(51, 2, (3, 0), (), "SurfaceType", '{B6A0996C-130F-4182-8DC9-37F0F693A4C2}'))
	def _get_UseDividedCubicCellNumber(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseDividedCubicCellNumber", None))
	def _get_UsePlaneToleranceFactor(self):
		return self._ApplyTypes_(*(53, 2, (11, 0), (), "UsePlaneToleranceFactor", None))

	def _set_MinimumPlaneTolerance(self, value):
		if "MinimumPlaneTolerance" in self.__dict__: self.__dict__["MinimumPlaneTolerance"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_SurfaceType(self, value):
		if "SurfaceType" in self.__dict__: self.__dict__["SurfaceType"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_UseDividedCubicCellNumber(self, value):
		if "UseDividedCubicCellNumber" in self.__dict__: self.__dict__["UseDividedCubicCellNumber"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_UsePlaneToleranceFactor(self, value):
		if "UsePlaneToleranceFactor" in self.__dict__: self.__dict__["UsePlaneToleranceFactor"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))

	MaxPenetration = property(_get_MaxPenetration, None)
	'''
	A maximum penetration. If the penetration is greater than this value, the contact force is not generated.

	:type: recurdyn.ProcessNet.IDouble
	'''
	MinimumPlaneTolerance = property(_get_MinimumPlaneTolerance, _set_MinimumPlaneTolerance)
	'''
	If decreasing the plane tolerance factor has no effect on the patch refinement, you should decrease the minimum plane tolerance.

	:type: float
	'''
	PlaneToleranceFactor = property(_get_PlaneToleranceFactor, None)
	'''
	You can specify the plane tolerance factor as a value from 0 to 10. A smaller value produces a more refined patch.

	:type: recurdyn.ProcessNet.IDouble
	'''
	SurfaceType = property(_get_SurfaceType, _set_SurfaceType)
	'''
	Surface type

	:type: recurdyn.ProcessNet.ContactSurfaceType
	'''
	UseDividedCubicCellNumber = property(_get_UseDividedCubicCellNumber, _set_UseDividedCubicCellNumber)
	'''
	Use divided cubic cell number

	:type: bool
	'''
	UsePlaneToleranceFactor = property(_get_UsePlaneToleranceFactor, _set_UsePlaneToleranceFactor)
	'''
	Use plane tolerance factor

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_MinimumPlaneTolerance": _set_MinimumPlaneTolerance,
		"_set_SurfaceType": _set_SurfaceType,
		"_set_UseDividedCubicCellNumber": _set_UseDividedCubicCellNumber,
		"_set_UsePlaneToleranceFactor": _set_UsePlaneToleranceFactor,
	}
	_prop_map_get_ = {
		"MaxPenetration": (52, 2, (9, 0), (), "MaxPenetration", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MinimumPlaneTolerance": (55, 2, (5, 0), (), "MinimumPlaneTolerance", None),
		"PlaneToleranceFactor": (54, 2, (9, 0), (), "PlaneToleranceFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SurfaceType": (51, 2, (3, 0), (), "SurfaceType", '{B6A0996C-130F-4182-8DC9-37F0F693A4C2}'),
		"UseDividedCubicCellNumber": (56, 2, (11, 0), (), "UseDividedCubicCellNumber", None),
		"UsePlaneToleranceFactor": (53, 2, (11, 0), (), "UsePlaneToleranceFactor", None),
	}
	_prop_map_put_ = {
		"MinimumPlaneTolerance": ((55, LCID, 4, 0),()),
		"SurfaceType": ((51, LCID, 4, 0),()),
		"UseDividedCubicCellNumber": ((56, LCID, 4, 0),()),
		"UsePlaneToleranceFactor": ((53, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactFriction(DispatchBaseClass):
	'''Contact friction'''
	CLSID = IID('{AEFD7238-F1DD-48C2-8329-E5571C291B25}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Coefficient(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "Coefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ContactFrictionType(self):
		return self._ApplyTypes_(*(51, 2, (3, 0), (), "ContactFrictionType", '{D0BC9C52-6D99-4CC5-9124-E1520C347D7A}'))
	def _get_DynamicThresholdVelocity(self):
		return self._ApplyTypes_(*(55, 2, (9, 0), (), "DynamicThresholdVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxStictionDeformation(self):
		return self._ApplyTypes_(*(60, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaximumForce(self):
		return self._ApplyTypes_(*(57, 2, (9, 0), (), "MaximumForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Spline(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "Spline", '{E76144D2-715D-41B4-A432-7B6C7F713FC2}'))
	def _get_StaticCoefficient(self):
		return self._ApplyTypes_(*(56, 2, (9, 0), (), "StaticCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StaticThresholdVelocity(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "StaticThresholdVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseMaxStictionDeformation(self):
		return self._ApplyTypes_(*(59, 2, (11, 0), (), "UseMaxStictionDeformation", None))
	def _get_UseMaximumForce(self):
		return self._ApplyTypes_(*(58, 2, (11, 0), (), "UseMaximumForce", None))

	def _set_ContactFrictionType(self, value):
		if "ContactFrictionType" in self.__dict__: self.__dict__["ContactFrictionType"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_Spline(self, value):
		if "Spline" in self.__dict__: self.__dict__["Spline"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UseMaxStictionDeformation(self, value):
		if "UseMaxStictionDeformation" in self.__dict__: self.__dict__["UseMaxStictionDeformation"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))
	def _set_UseMaximumForce(self, value):
		if "UseMaximumForce" in self.__dict__: self.__dict__["UseMaximumForce"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))

	Coefficient = property(_get_Coefficient, None)
	'''
	The constant dynamic friction coefficient for the contact friction force.

	:type: recurdyn.ProcessNet.IDouble
	'''
	ContactFrictionType = property(_get_ContactFrictionType, _set_ContactFrictionType)
	'''
	Contact friction type

	:type: recurdyn.ProcessNet.ContactFrictionType
	'''
	DynamicThresholdVelocity = property(_get_DynamicThresholdVelocity, None)
	'''
	Dynamic threshold velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxStictionDeformation = property(_get_MaxStictionDeformation, None)
	'''
	Maximum stiction deformation

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaximumForce = property(_get_MaximumForce, None)
	'''
	Maximum force

	:type: recurdyn.ProcessNet.IDouble
	'''
	Spline = property(_get_Spline, _set_Spline)
	'''
	The spline which shows relative velocity to the friction coefficient or the friction force.

	:type: recurdyn.ProcessNet.ISpline
	'''
	StaticCoefficient = property(_get_StaticCoefficient, None)
	'''
	Static coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	StaticThresholdVelocity = property(_get_StaticThresholdVelocity, None)
	'''
	Static threshold velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseMaxStictionDeformation = property(_get_UseMaxStictionDeformation, _set_UseMaxStictionDeformation)
	'''
	Use maximum stiction deformation

	:type: bool
	'''
	UseMaximumForce = property(_get_UseMaximumForce, _set_UseMaximumForce)
	'''
	Use maximum force

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_ContactFrictionType": _set_ContactFrictionType,
		"_set_Spline": _set_Spline,
		"_set_UseMaxStictionDeformation": _set_UseMaxStictionDeformation,
		"_set_UseMaximumForce": _set_UseMaximumForce,
	}
	_prop_map_get_ = {
		"Coefficient": (52, 2, (9, 0), (), "Coefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ContactFrictionType": (51, 2, (3, 0), (), "ContactFrictionType", '{D0BC9C52-6D99-4CC5-9124-E1520C347D7A}'),
		"DynamicThresholdVelocity": (55, 2, (9, 0), (), "DynamicThresholdVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxStictionDeformation": (60, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaximumForce": (57, 2, (9, 0), (), "MaximumForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Spline": (53, 2, (9, 0), (), "Spline", '{E76144D2-715D-41B4-A432-7B6C7F713FC2}'),
		"StaticCoefficient": (56, 2, (9, 0), (), "StaticCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StaticThresholdVelocity": (54, 2, (9, 0), (), "StaticThresholdVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseMaxStictionDeformation": (59, 2, (11, 0), (), "UseMaxStictionDeformation", None),
		"UseMaximumForce": (58, 2, (11, 0), (), "UseMaximumForce", None),
	}
	_prop_map_put_ = {
		"ContactFrictionType": ((51, LCID, 4, 0),()),
		"Spline": ((53, LCID, 4, 0),()),
		"UseMaxStictionDeformation": ((59, LCID, 4, 0),()),
		"UseMaximumForce": ((58, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactGeo(DispatchBaseClass):
	'''Geo contact'''
	CLSID = IID('{6CAFE73E-3494-41D3-AB87-13A59CB8CF2A}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_ActionPatchOption(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "ActionPatchOption", '{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}'))
	def _get_ActionUpDirection(self):
		return self._ApplyTypes_(*(254, 2, (11, 0), (), "ActionUpDirection", None))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BasePatchOption(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "BasePatchOption", '{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}'))
	def _get_BaseUpDirection(self):
		return self._ApplyTypes_(*(255, 2, (11, 0), (), "BaseUpDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactPoints(self):
		return self._ApplyTypes_(*(256, 2, (19, 0), (), "ContactPoints", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ContactPropertyAdditional(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "ContactPropertyAdditional", '{C3560239-62ED-43FF-A94D-71801A2886E4}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OutputMarker(self):
		return self._ApplyTypes_(*(258, 2, (9, 0), (), "OutputMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseContactOutputFile(self):
		return self._ApplyTypes_(*(257, 2, (11, 0), (), "UseContactOutputFile", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_ActionUpDirection(self, value):
		if "ActionUpDirection" in self.__dict__: self.__dict__["ActionUpDirection"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseUpDirection(self, value):
		if "BaseUpDirection" in self.__dict__: self.__dict__["BaseUpDirection"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ContactPoints(self, value):
		if "ContactPoints" in self.__dict__: self.__dict__["ContactPoints"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_OutputMarker(self, value):
		if "OutputMarker" in self.__dict__: self.__dict__["OutputMarker"] = value; return
		self._oleobj_.Invoke(*((258, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UseContactOutputFile(self, value):
		if "UseContactOutputFile" in self.__dict__: self.__dict__["UseContactOutputFile"] = value; return
		self._oleobj_.Invoke(*((257, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	ActionPatchOption = property(_get_ActionPatchOption, None)
	'''
	Geo contact action patch option

	:type: recurdyn.ProcessNet.IContactGeoPatchOption
	'''
	ActionUpDirection = property(_get_ActionUpDirection, _set_ActionUpDirection)
	'''
	Action up direction

	:type: bool
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BasePatchOption = property(_get_BasePatchOption, None)
	'''
	Geo contact base patch option

	:type: recurdyn.ProcessNet.IContactGeoPatchOption
	'''
	BaseUpDirection = property(_get_BaseUpDirection, _set_BaseUpDirection)
	'''
	Base up direction

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactPoints = property(_get_ContactPoints, _set_ContactPoints)
	'''
	The number of max contact points

	:type: int
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ContactPropertyAdditional = property(_get_ContactPropertyAdditional, None)
	'''
	Additional contact property

	:type: recurdyn.ProcessNet.IContactPropertyAdditional
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OutputMarker = property(_get_OutputMarker, _set_OutputMarker)
	'''
	Output marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseContactOutputFile = property(_get_UseContactOutputFile, _set_UseContactOutputFile)
	'''
	Generate the contact output file

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_ActionUpDirection": _set_ActionUpDirection,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseUpDirection": _set_BaseUpDirection,
		"_set_Comment": _set_Comment,
		"_set_ContactPoints": _set_ContactPoints,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_OutputMarker": _set_OutputMarker,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseContactOutputFile": _set_UseContactOutputFile,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"ActionPatchOption": (253, 2, (9, 0), (), "ActionPatchOption", '{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}'),
		"ActionUpDirection": (254, 2, (11, 0), (), "ActionUpDirection", None),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BasePatchOption": (252, 2, (9, 0), (), "BasePatchOption", '{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}'),
		"BaseUpDirection": (255, 2, (11, 0), (), "BaseUpDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactPoints": (256, 2, (19, 0), (), "ContactPoints", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ContactPropertyAdditional": (251, 2, (9, 0), (), "ContactPropertyAdditional", '{C3560239-62ED-43FF-A94D-71801A2886E4}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OutputMarker": (258, 2, (9, 0), (), "OutputMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseContactOutputFile": (257, 2, (11, 0), (), "UseContactOutputFile", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"ActionUpDirection": ((254, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseUpDirection": ((255, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ContactPoints": ((256, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"OutputMarker": ((258, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UseContactOutputFile": ((257, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactGeoCurve(DispatchBaseClass):
	'''Geo Curve contact'''
	CLSID = IID('{0BD26902-38C3-4C3F-B2B5-6038996BC174}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionCurveSegmentOption(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "ActionCurveSegmentOption", '{2D0EBBBE-395D-465E-84F4-30290538BA38}'))
	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_ActionEntityLineSet(self):
		return self._ApplyTypes_(*(267, 2, (9, 0), (), "ActionEntityLineSet", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_ActionGeometryType(self):
		return self._ApplyTypes_(*(264, 2, (3, 0), (), "ActionGeometryType", '{E6CCD344-E8F4-46D8-8025-0740B7F22D8E}'))
	def _get_ActionNodeContact(self):
		return self._ApplyTypes_(*(260, 2, (11, 0), (), "ActionNodeContact", None))
	def _get_ActionUpDirection(self):
		return self._ApplyTypes_(*(254, 2, (11, 0), (), "ActionUpDirection", None))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseCurveSegmentOption(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "BaseCurveSegmentOption", '{2D0EBBBE-395D-465E-84F4-30290538BA38}'))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BaseEntityLineSet(self):
		return self._ApplyTypes_(*(266, 2, (9, 0), (), "BaseEntityLineSet", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BaseNodeContact(self):
		return self._ApplyTypes_(*(259, 2, (11, 0), (), "BaseNodeContact", None))
	def _get_BaseUpDirection(self):
		return self._ApplyTypes_(*(255, 2, (11, 0), (), "BaseUpDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactPoints(self):
		return self._ApplyTypes_(*(256, 2, (19, 0), (), "ContactPoints", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ContactPropertyAdditional(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "ContactPropertyAdditional", '{C3560239-62ED-43FF-A94D-71801A2886E4}'))
	def _get_EdgeContact(self):
		return self._ApplyTypes_(*(261, 2, (11, 0), (), "EdgeContact", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayComponent(self):
		return self._ApplyTypes_(*(268, 2, (3, 0), (), "ForceDisplayComponent", '{1CDA68E5-BF74-44CC-AA65-1CB30BEE5134}'))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OutputMarker(self):
		return self._ApplyTypes_(*(258, 2, (9, 0), (), "OutputMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_SmoothEdgeContact(self):
		return self._ApplyTypes_(*(265, 2, (11, 0), (), "SmoothEdgeContact", None))
	def _get_SmoothNodeContact(self):
		return self._ApplyTypes_(*(262, 2, (11, 0), (), "SmoothNodeContact", None))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseCPM(self):
		return self._ApplyTypes_(*(263, 2, (11, 0), (), "UseCPM", None))
	def _get_UseContactOutputFile(self):
		return self._ApplyTypes_(*(257, 2, (11, 0), (), "UseContactOutputFile", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityLineSet(self, value):
		if "ActionEntityLineSet" in self.__dict__: self.__dict__["ActionEntityLineSet"] = value; return
		self._oleobj_.Invoke(*((267, LCID, 4, 0) + (value,) + ()))
	def _set_ActionGeometryType(self, value):
		if "ActionGeometryType" in self.__dict__: self.__dict__["ActionGeometryType"] = value; return
		self._oleobj_.Invoke(*((264, LCID, 4, 0) + (value,) + ()))
	def _set_ActionNodeContact(self, value):
		if "ActionNodeContact" in self.__dict__: self.__dict__["ActionNodeContact"] = value; return
		self._oleobj_.Invoke(*((260, LCID, 4, 0) + (value,) + ()))
	def _set_ActionUpDirection(self, value):
		if "ActionUpDirection" in self.__dict__: self.__dict__["ActionUpDirection"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityLineSet(self, value):
		if "BaseEntityLineSet" in self.__dict__: self.__dict__["BaseEntityLineSet"] = value; return
		self._oleobj_.Invoke(*((266, LCID, 4, 0) + (value,) + ()))
	def _set_BaseNodeContact(self, value):
		if "BaseNodeContact" in self.__dict__: self.__dict__["BaseNodeContact"] = value; return
		self._oleobj_.Invoke(*((259, LCID, 4, 0) + (value,) + ()))
	def _set_BaseUpDirection(self, value):
		if "BaseUpDirection" in self.__dict__: self.__dict__["BaseUpDirection"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ContactPoints(self, value):
		if "ContactPoints" in self.__dict__: self.__dict__["ContactPoints"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_EdgeContact(self, value):
		if "EdgeContact" in self.__dict__: self.__dict__["EdgeContact"] = value; return
		self._oleobj_.Invoke(*((261, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayComponent(self, value):
		if "ForceDisplayComponent" in self.__dict__: self.__dict__["ForceDisplayComponent"] = value; return
		self._oleobj_.Invoke(*((268, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_OutputMarker(self, value):
		if "OutputMarker" in self.__dict__: self.__dict__["OutputMarker"] = value; return
		self._oleobj_.Invoke(*((258, LCID, 4, 0) + (value,) + ()))
	def _set_SmoothEdgeContact(self, value):
		if "SmoothEdgeContact" in self.__dict__: self.__dict__["SmoothEdgeContact"] = value; return
		self._oleobj_.Invoke(*((265, LCID, 4, 0) + (value,) + ()))
	def _set_SmoothNodeContact(self, value):
		if "SmoothNodeContact" in self.__dict__: self.__dict__["SmoothNodeContact"] = value; return
		self._oleobj_.Invoke(*((262, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UseCPM(self, value):
		if "UseCPM" in self.__dict__: self.__dict__["UseCPM"] = value; return
		self._oleobj_.Invoke(*((263, LCID, 4, 0) + (value,) + ()))
	def _set_UseContactOutputFile(self, value):
		if "UseContactOutputFile" in self.__dict__: self.__dict__["UseContactOutputFile"] = value; return
		self._oleobj_.Invoke(*((257, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionCurveSegmentOption = property(_get_ActionCurveSegmentOption, None)
	'''
	Geo contact action curve option

	:type: recurdyn.ProcessNet.IContactGeoCurveSegmentOption
	'''
	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	ActionEntityLineSet = property(_get_ActionEntityLineSet, _set_ActionEntityLineSet)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	ActionGeometryType = property(_get_ActionGeometryType, _set_ActionGeometryType)
	'''
	Action Geometry type

	:type: recurdyn.ProcessNet.CurvePrimitiveType
	'''
	ActionNodeContact = property(_get_ActionNodeContact, _set_ActionNodeContact)
	'''
	Action node contact

	:type: bool
	'''
	ActionUpDirection = property(_get_ActionUpDirection, _set_ActionUpDirection)
	'''
	Action up direction

	:type: bool
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseCurveSegmentOption = property(_get_BaseCurveSegmentOption, None)
	'''
	Geo contact base curve option

	:type: recurdyn.ProcessNet.IContactGeoCurveSegmentOption
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BaseEntityLineSet = property(_get_BaseEntityLineSet, _set_BaseEntityLineSet)
	'''
	Base entity 

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BaseNodeContact = property(_get_BaseNodeContact, _set_BaseNodeContact)
	'''
	Base node contact

	:type: bool
	'''
	BaseUpDirection = property(_get_BaseUpDirection, _set_BaseUpDirection)
	'''
	Base up direction

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactPoints = property(_get_ContactPoints, _set_ContactPoints)
	'''
	The number of max contact points

	:type: int
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ContactPropertyAdditional = property(_get_ContactPropertyAdditional, None)
	'''
	Additional contact property

	:type: recurdyn.ProcessNet.IContactPropertyAdditional
	'''
	EdgeContact = property(_get_EdgeContact, _set_EdgeContact)
	'''
	Edge contact

	:type: bool
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayComponent = property(_get_ForceDisplayComponent, _set_ForceDisplayComponent)
	'''
	Component of Force Display

	:type: recurdyn.ProcessNet.ForceDisplayComponent
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OutputMarker = property(_get_OutputMarker, _set_OutputMarker)
	'''
	Output marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	SmoothEdgeContact = property(_get_SmoothEdgeContact, _set_SmoothEdgeContact)
	'''
	Smooth edge contact

	:type: bool
	'''
	SmoothNodeContact = property(_get_SmoothNodeContact, _set_SmoothNodeContact)
	'''
	Smooth node contact

	:type: bool
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseCPM = property(_get_UseCPM, _set_UseCPM)
	'''
	Use CPM

	:type: bool
	'''
	UseContactOutputFile = property(_get_UseContactOutputFile, _set_UseContactOutputFile)
	'''
	Generate the contact output file

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_ActionEntityLineSet": _set_ActionEntityLineSet,
		"_set_ActionGeometryType": _set_ActionGeometryType,
		"_set_ActionNodeContact": _set_ActionNodeContact,
		"_set_ActionUpDirection": _set_ActionUpDirection,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseEntityLineSet": _set_BaseEntityLineSet,
		"_set_BaseNodeContact": _set_BaseNodeContact,
		"_set_BaseUpDirection": _set_BaseUpDirection,
		"_set_Comment": _set_Comment,
		"_set_ContactPoints": _set_ContactPoints,
		"_set_EdgeContact": _set_EdgeContact,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayComponent": _set_ForceDisplayComponent,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_OutputMarker": _set_OutputMarker,
		"_set_SmoothEdgeContact": _set_SmoothEdgeContact,
		"_set_SmoothNodeContact": _set_SmoothNodeContact,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseCPM": _set_UseCPM,
		"_set_UseContactOutputFile": _set_UseContactOutputFile,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionCurveSegmentOption": (253, 2, (9, 0), (), "ActionCurveSegmentOption", '{2D0EBBBE-395D-465E-84F4-30290538BA38}'),
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"ActionEntityLineSet": (267, 2, (9, 0), (), "ActionEntityLineSet", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"ActionGeometryType": (264, 2, (3, 0), (), "ActionGeometryType", '{E6CCD344-E8F4-46D8-8025-0740B7F22D8E}'),
		"ActionNodeContact": (260, 2, (11, 0), (), "ActionNodeContact", None),
		"ActionUpDirection": (254, 2, (11, 0), (), "ActionUpDirection", None),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseCurveSegmentOption": (252, 2, (9, 0), (), "BaseCurveSegmentOption", '{2D0EBBBE-395D-465E-84F4-30290538BA38}'),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BaseEntityLineSet": (266, 2, (9, 0), (), "BaseEntityLineSet", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BaseNodeContact": (259, 2, (11, 0), (), "BaseNodeContact", None),
		"BaseUpDirection": (255, 2, (11, 0), (), "BaseUpDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactPoints": (256, 2, (19, 0), (), "ContactPoints", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ContactPropertyAdditional": (251, 2, (9, 0), (), "ContactPropertyAdditional", '{C3560239-62ED-43FF-A94D-71801A2886E4}'),
		"EdgeContact": (261, 2, (11, 0), (), "EdgeContact", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayComponent": (268, 2, (3, 0), (), "ForceDisplayComponent", '{1CDA68E5-BF74-44CC-AA65-1CB30BEE5134}'),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OutputMarker": (258, 2, (9, 0), (), "OutputMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"SmoothEdgeContact": (265, 2, (11, 0), (), "SmoothEdgeContact", None),
		"SmoothNodeContact": (262, 2, (11, 0), (), "SmoothNodeContact", None),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseCPM": (263, 2, (11, 0), (), "UseCPM", None),
		"UseContactOutputFile": (257, 2, (11, 0), (), "UseContactOutputFile", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"ActionEntityLineSet": ((267, LCID, 4, 0),()),
		"ActionGeometryType": ((264, LCID, 4, 0),()),
		"ActionNodeContact": ((260, LCID, 4, 0),()),
		"ActionUpDirection": ((254, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseEntityLineSet": ((266, LCID, 4, 0),()),
		"BaseNodeContact": ((259, LCID, 4, 0),()),
		"BaseUpDirection": ((255, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ContactPoints": ((256, LCID, 4, 0),()),
		"EdgeContact": ((261, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayComponent": ((268, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"OutputMarker": ((258, LCID, 4, 0),()),
		"SmoothEdgeContact": ((265, LCID, 4, 0),()),
		"SmoothNodeContact": ((262, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UseCPM": ((263, LCID, 4, 0),()),
		"UseContactOutputFile": ((257, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactGeoCurveSegmentOption(DispatchBaseClass):
	'''Geo contact curve segment option'''
	CLSID = IID('{2D0EBBBE-395D-465E-84F4-30290538BA38}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetDepthDirectionVector(self):
		'''
		Get depth direction vector
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(55, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetDepthDirectionVector', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def SetDepthDirectionVector(self, x, y, z):
		'''
		Set depth direction vector
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(54, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),x
			, y, z)


	def _get_BoundingBufferLength(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "BoundingBufferLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_CubicCell(self):
		return self._ApplyTypes_(*(58, 2, (8197, 0), (), "CubicCell", None))
	def _get_Radius(self):
		return self._ApplyTypes_(*(59, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Segment(self):
		return self._ApplyTypes_(*(51, 2, (19, 0), (), "Segment", None))
	def _get_Thickness(self):
		return self._ApplyTypes_(*(60, 2, (9, 0), (), "Thickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Type(self):
		return self._ApplyTypes_(*(53, 2, (3, 0), (), "Type", '{E6F67E73-6EDC-47B1-9B2D-4A03967F1900}'))
	def _get_UseCubicCell(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseCubicCell", None))
	def _get_UseTotalSegment(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseTotalSegment", None))

	def _set_CubicCell(self, value):
		if "CubicCell" in self.__dict__: self.__dict__["CubicCell"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Segment(self, value):
		if "Segment" in self.__dict__: self.__dict__["Segment"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_Type(self, value):
		if "Type" in self.__dict__: self.__dict__["Type"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UseCubicCell(self, value):
		if "UseCubicCell" in self.__dict__: self.__dict__["UseCubicCell"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_UseTotalSegment(self, value):
		if "UseTotalSegment" in self.__dict__: self.__dict__["UseTotalSegment"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))

	BoundingBufferLength = property(_get_BoundingBufferLength, None)
	'''
	Bounding buffer length

	:type: recurdyn.ProcessNet.IDouble
	'''
	CubicCell = property(_get_CubicCell, _set_CubicCell)
	'''
	Cubic cell

	:type: list[float]
	'''
	Radius = property(_get_Radius, None)
	'''
	Radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	Segment = property(_get_Segment, _set_Segment)
	'''
	The number of curve segment

	:type: int
	'''
	Thickness = property(_get_Thickness, None)
	'''
	Thickness

	:type: recurdyn.ProcessNet.IDouble
	'''
	Type = property(_get_Type, _set_Type)
	'''
	The type of curve

	:type: recurdyn.ProcessNet.CurveType
	'''
	UseCubicCell = property(_get_UseCubicCell, _set_UseCubicCell)
	'''
	Use cubic cell

	:type: bool
	'''
	UseTotalSegment = property(_get_UseTotalSegment, _set_UseTotalSegment)
	'''
	Use total segment

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_CubicCell": _set_CubicCell,
		"_set_Segment": _set_Segment,
		"_set_Type": _set_Type,
		"_set_UseCubicCell": _set_UseCubicCell,
		"_set_UseTotalSegment": _set_UseTotalSegment,
	}
	_prop_map_get_ = {
		"BoundingBufferLength": (52, 2, (9, 0), (), "BoundingBufferLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"CubicCell": (58, 2, (8197, 0), (), "CubicCell", None),
		"Radius": (59, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Segment": (51, 2, (19, 0), (), "Segment", None),
		"Thickness": (60, 2, (9, 0), (), "Thickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Type": (53, 2, (3, 0), (), "Type", '{E6F67E73-6EDC-47B1-9B2D-4A03967F1900}'),
		"UseCubicCell": (57, 2, (11, 0), (), "UseCubicCell", None),
		"UseTotalSegment": (56, 2, (11, 0), (), "UseTotalSegment", None),
	}
	_prop_map_put_ = {
		"CubicCell": ((58, LCID, 4, 0),()),
		"Segment": ((51, LCID, 4, 0),()),
		"Type": ((53, LCID, 4, 0),()),
		"UseCubicCell": ((57, LCID, 4, 0),()),
		"UseTotalSegment": ((56, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactGeoCurveToSurface(DispatchBaseClass):
	'''Geo Curve to Surface contact'''
	CLSID = IID('{53B9175B-11B0-4E63-B525-8062109E72D5}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionCurveSegmentOption(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "ActionCurveSegmentOption", '{2D0EBBBE-395D-465E-84F4-30290538BA38}'))
	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_ActionEntityLineSet(self):
		return self._ApplyTypes_(*(261, 2, (9, 0), (), "ActionEntityLineSet", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_ActionNodeContact(self):
		return self._ApplyTypes_(*(255, 2, (11, 0), (), "ActionNodeContact", None))
	def _get_ActionRadius(self):
		return self._ApplyTypes_(*(264, 2, (9, 0), (), "ActionRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BaseEntityPatchSet(self):
		return self._ApplyTypes_(*(260, 2, (9, 0), (), "BaseEntityPatchSet", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BasePatchOption(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "BasePatchOption", '{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}'))
	def _get_BaseUpDirection(self):
		return self._ApplyTypes_(*(254, 2, (11, 0), (), "BaseUpDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactPoints(self):
		return self._ApplyTypes_(*(257, 2, (19, 0), (), "ContactPoints", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ContactPropertyAdditional(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "ContactPropertyAdditional", '{C3560239-62ED-43FF-A94D-71801A2886E4}'))
	def _get_EdgeContact(self):
		return self._ApplyTypes_(*(256, 2, (11, 0), (), "EdgeContact", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayComponent(self):
		return self._ApplyTypes_(*(265, 2, (3, 0), (), "ForceDisplayComponent", '{1CDA68E5-BF74-44CC-AA65-1CB30BEE5134}'))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OutputMarker(self):
		return self._ApplyTypes_(*(259, 2, (9, 0), (), "OutputMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_SmoothNodeContact(self):
		return self._ApplyTypes_(*(262, 2, (11, 0), (), "SmoothNodeContact", None))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseCPM(self):
		return self._ApplyTypes_(*(263, 2, (11, 0), (), "UseCPM", None))
	def _get_UseContactOutputFile(self):
		return self._ApplyTypes_(*(258, 2, (11, 0), (), "UseContactOutputFile", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityLineSet(self, value):
		if "ActionEntityLineSet" in self.__dict__: self.__dict__["ActionEntityLineSet"] = value; return
		self._oleobj_.Invoke(*((261, LCID, 4, 0) + (value,) + ()))
	def _set_ActionNodeContact(self, value):
		if "ActionNodeContact" in self.__dict__: self.__dict__["ActionNodeContact"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityPatchSet(self, value):
		if "BaseEntityPatchSet" in self.__dict__: self.__dict__["BaseEntityPatchSet"] = value; return
		self._oleobj_.Invoke(*((260, LCID, 4, 0) + (value,) + ()))
	def _set_BaseUpDirection(self, value):
		if "BaseUpDirection" in self.__dict__: self.__dict__["BaseUpDirection"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ContactPoints(self, value):
		if "ContactPoints" in self.__dict__: self.__dict__["ContactPoints"] = value; return
		self._oleobj_.Invoke(*((257, LCID, 4, 0) + (value,) + ()))
	def _set_EdgeContact(self, value):
		if "EdgeContact" in self.__dict__: self.__dict__["EdgeContact"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayComponent(self, value):
		if "ForceDisplayComponent" in self.__dict__: self.__dict__["ForceDisplayComponent"] = value; return
		self._oleobj_.Invoke(*((265, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_OutputMarker(self, value):
		if "OutputMarker" in self.__dict__: self.__dict__["OutputMarker"] = value; return
		self._oleobj_.Invoke(*((259, LCID, 4, 0) + (value,) + ()))
	def _set_SmoothNodeContact(self, value):
		if "SmoothNodeContact" in self.__dict__: self.__dict__["SmoothNodeContact"] = value; return
		self._oleobj_.Invoke(*((262, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UseCPM(self, value):
		if "UseCPM" in self.__dict__: self.__dict__["UseCPM"] = value; return
		self._oleobj_.Invoke(*((263, LCID, 4, 0) + (value,) + ()))
	def _set_UseContactOutputFile(self, value):
		if "UseContactOutputFile" in self.__dict__: self.__dict__["UseContactOutputFile"] = value; return
		self._oleobj_.Invoke(*((258, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionCurveSegmentOption = property(_get_ActionCurveSegmentOption, None)
	'''
	Geo contact action curve option

	:type: recurdyn.ProcessNet.IContactGeoCurveSegmentOption
	'''
	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	ActionEntityLineSet = property(_get_ActionEntityLineSet, _set_ActionEntityLineSet)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	ActionNodeContact = property(_get_ActionNodeContact, _set_ActionNodeContact)
	'''
	Action node contact

	:type: bool
	'''
	ActionRadius = property(_get_ActionRadius, None)
	'''
	Radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BaseEntityPatchSet = property(_get_BaseEntityPatchSet, _set_BaseEntityPatchSet)
	'''
	Base entity 

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BasePatchOption = property(_get_BasePatchOption, None)
	'''
	Geo contact base patch option

	:type: recurdyn.ProcessNet.IContactGeoPatchOption
	'''
	BaseUpDirection = property(_get_BaseUpDirection, _set_BaseUpDirection)
	'''
	Base up direction

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactPoints = property(_get_ContactPoints, _set_ContactPoints)
	'''
	The number of max contact points

	:type: int
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ContactPropertyAdditional = property(_get_ContactPropertyAdditional, None)
	'''
	Additional contact property

	:type: recurdyn.ProcessNet.IContactPropertyAdditional
	'''
	EdgeContact = property(_get_EdgeContact, _set_EdgeContact)
	'''
	Edge contact

	:type: bool
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayComponent = property(_get_ForceDisplayComponent, _set_ForceDisplayComponent)
	'''
	Component of Force Display

	:type: recurdyn.ProcessNet.ForceDisplayComponent
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OutputMarker = property(_get_OutputMarker, _set_OutputMarker)
	'''
	Output marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	SmoothNodeContact = property(_get_SmoothNodeContact, _set_SmoothNodeContact)
	'''
	Smooth node contact

	:type: bool
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseCPM = property(_get_UseCPM, _set_UseCPM)
	'''
	Use CPM

	:type: bool
	'''
	UseContactOutputFile = property(_get_UseContactOutputFile, _set_UseContactOutputFile)
	'''
	Generate the contact output file

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_ActionEntityLineSet": _set_ActionEntityLineSet,
		"_set_ActionNodeContact": _set_ActionNodeContact,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseEntityPatchSet": _set_BaseEntityPatchSet,
		"_set_BaseUpDirection": _set_BaseUpDirection,
		"_set_Comment": _set_Comment,
		"_set_ContactPoints": _set_ContactPoints,
		"_set_EdgeContact": _set_EdgeContact,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayComponent": _set_ForceDisplayComponent,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_OutputMarker": _set_OutputMarker,
		"_set_SmoothNodeContact": _set_SmoothNodeContact,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseCPM": _set_UseCPM,
		"_set_UseContactOutputFile": _set_UseContactOutputFile,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionCurveSegmentOption": (253, 2, (9, 0), (), "ActionCurveSegmentOption", '{2D0EBBBE-395D-465E-84F4-30290538BA38}'),
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"ActionEntityLineSet": (261, 2, (9, 0), (), "ActionEntityLineSet", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"ActionNodeContact": (255, 2, (11, 0), (), "ActionNodeContact", None),
		"ActionRadius": (264, 2, (9, 0), (), "ActionRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BaseEntityPatchSet": (260, 2, (9, 0), (), "BaseEntityPatchSet", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BasePatchOption": (252, 2, (9, 0), (), "BasePatchOption", '{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}'),
		"BaseUpDirection": (254, 2, (11, 0), (), "BaseUpDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactPoints": (257, 2, (19, 0), (), "ContactPoints", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ContactPropertyAdditional": (251, 2, (9, 0), (), "ContactPropertyAdditional", '{C3560239-62ED-43FF-A94D-71801A2886E4}'),
		"EdgeContact": (256, 2, (11, 0), (), "EdgeContact", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayComponent": (265, 2, (3, 0), (), "ForceDisplayComponent", '{1CDA68E5-BF74-44CC-AA65-1CB30BEE5134}'),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OutputMarker": (259, 2, (9, 0), (), "OutputMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"SmoothNodeContact": (262, 2, (11, 0), (), "SmoothNodeContact", None),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseCPM": (263, 2, (11, 0), (), "UseCPM", None),
		"UseContactOutputFile": (258, 2, (11, 0), (), "UseContactOutputFile", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"ActionEntityLineSet": ((261, LCID, 4, 0),()),
		"ActionNodeContact": ((255, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseEntityPatchSet": ((260, LCID, 4, 0),()),
		"BaseUpDirection": ((254, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ContactPoints": ((257, LCID, 4, 0),()),
		"EdgeContact": ((256, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayComponent": ((265, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"OutputMarker": ((259, LCID, 4, 0),()),
		"SmoothNodeContact": ((262, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UseCPM": ((263, LCID, 4, 0),()),
		"UseContactOutputFile": ((258, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactGeoPatchOption(DispatchBaseClass):
	'''Geo contact patch option'''
	CLSID = IID('{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_BoundingBufferLength(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "BoundingBufferLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_CubicCell(self):
		return self._ApplyTypes_(*(59, 2, (8197, 0), (), "CubicCell", None))
	def _get_MaxFacetSizeFactor(self):
		return self._ApplyTypes_(*(55, 2, (9, 0), (), "MaxFacetSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PlaneToleranceFactor(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "PlaneToleranceFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SpecificThickness(self):
		return self._ApplyTypes_(*(57, 2, (9, 0), (), "SpecificThickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SurfaceType(self):
		return self._ApplyTypes_(*(60, 2, (3, 0), (), "SurfaceType", '{92EE09AA-CA96-419F-9749-86082F395275}'))
	def _get_UseCubicCell(self):
		return self._ApplyTypes_(*(58, 2, (11, 0), (), "UseCubicCell", None))
	def _get_UseMaxFacetSizeFactor(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "UseMaxFacetSizeFactor", None))
	def _get_UsePlaneToleranceFactor(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UsePlaneToleranceFactor", None))
	def _get_UseSpecificThickness(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseSpecificThickness", None))

	def _set_CubicCell(self, value):
		if "CubicCell" in self.__dict__: self.__dict__["CubicCell"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (variantValue,) + ()))
	def _set_SurfaceType(self, value):
		if "SurfaceType" in self.__dict__: self.__dict__["SurfaceType"] = value; return
		self._oleobj_.Invoke(*((60, LCID, 4, 0) + (value,) + ()))
	def _set_UseCubicCell(self, value):
		if "UseCubicCell" in self.__dict__: self.__dict__["UseCubicCell"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))
	def _set_UseMaxFacetSizeFactor(self, value):
		if "UseMaxFacetSizeFactor" in self.__dict__: self.__dict__["UseMaxFacetSizeFactor"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_UsePlaneToleranceFactor(self, value):
		if "UsePlaneToleranceFactor" in self.__dict__: self.__dict__["UsePlaneToleranceFactor"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_UseSpecificThickness(self, value):
		if "UseSpecificThickness" in self.__dict__: self.__dict__["UseSpecificThickness"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))

	BoundingBufferLength = property(_get_BoundingBufferLength, None)
	'''
	The bounding buffer length defines the offset length of bounding box compared to the real bounding box.

	:type: recurdyn.ProcessNet.IDouble
	'''
	CubicCell = property(_get_CubicCell, _set_CubicCell)
	'''
	Cubic cell

	:type: list[float]
	'''
	MaxFacetSizeFactor = property(_get_MaxFacetSizeFactor, None)
	'''
	You can specify the maximum facet size factor as a value from 0.1 to 10. This value controls the maximum size of triangular patch length.

	:type: recurdyn.ProcessNet.IDouble
	'''
	PlaneToleranceFactor = property(_get_PlaneToleranceFactor, None)
	'''
	You can specify the plane tolerance factor as a value from 0.1 to 10. A smaller value produces a more refined patch.

	:type: recurdyn.ProcessNet.IDouble
	'''
	SpecificThickness = property(_get_SpecificThickness, None)
	'''
	Specific thickness

	:type: recurdyn.ProcessNet.IDouble
	'''
	SurfaceType = property(_get_SurfaceType, _set_SurfaceType)
	'''
	Surface type

	:type: recurdyn.ProcessNet.GeoSurfaceType
	'''
	UseCubicCell = property(_get_UseCubicCell, _set_UseCubicCell)
	'''
	Use cubic cell

	:type: bool
	'''
	UseMaxFacetSizeFactor = property(_get_UseMaxFacetSizeFactor, _set_UseMaxFacetSizeFactor)
	'''
	Use maximum facet size factor

	:type: bool
	'''
	UsePlaneToleranceFactor = property(_get_UsePlaneToleranceFactor, _set_UsePlaneToleranceFactor)
	'''
	Use plane tolerance factor

	:type: bool
	'''
	UseSpecificThickness = property(_get_UseSpecificThickness, _set_UseSpecificThickness)
	'''
	Use specific thickness

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_CubicCell": _set_CubicCell,
		"_set_SurfaceType": _set_SurfaceType,
		"_set_UseCubicCell": _set_UseCubicCell,
		"_set_UseMaxFacetSizeFactor": _set_UseMaxFacetSizeFactor,
		"_set_UsePlaneToleranceFactor": _set_UsePlaneToleranceFactor,
		"_set_UseSpecificThickness": _set_UseSpecificThickness,
	}
	_prop_map_get_ = {
		"BoundingBufferLength": (51, 2, (9, 0), (), "BoundingBufferLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"CubicCell": (59, 2, (8197, 0), (), "CubicCell", None),
		"MaxFacetSizeFactor": (55, 2, (9, 0), (), "MaxFacetSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PlaneToleranceFactor": (53, 2, (9, 0), (), "PlaneToleranceFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SpecificThickness": (57, 2, (9, 0), (), "SpecificThickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SurfaceType": (60, 2, (3, 0), (), "SurfaceType", '{92EE09AA-CA96-419F-9749-86082F395275}'),
		"UseCubicCell": (58, 2, (11, 0), (), "UseCubicCell", None),
		"UseMaxFacetSizeFactor": (54, 2, (11, 0), (), "UseMaxFacetSizeFactor", None),
		"UsePlaneToleranceFactor": (52, 2, (11, 0), (), "UsePlaneToleranceFactor", None),
		"UseSpecificThickness": (56, 2, (11, 0), (), "UseSpecificThickness", None),
	}
	_prop_map_put_ = {
		"CubicCell": ((59, LCID, 4, 0),()),
		"SurfaceType": ((60, LCID, 4, 0),()),
		"UseCubicCell": ((58, LCID, 4, 0),()),
		"UseMaxFacetSizeFactor": ((54, LCID, 4, 0),()),
		"UsePlaneToleranceFactor": ((52, LCID, 4, 0),()),
		"UseSpecificThickness": ((56, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactGeoSurface(DispatchBaseClass):
	'''Geo Surface contact'''
	CLSID = IID('{8B44BA63-1871-4074-863D-1434F7D479B7}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_ActionEntityPatchSet(self):
		return self._ApplyTypes_(*(267, 2, (9, 0), (), "ActionEntityPatchSet", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_ActionGeometryType(self):
		return self._ApplyTypes_(*(265, 2, (3, 0), (), "ActionGeometryType", '{1CE77D65-D316-44E0-A9A5-8D39C71D3ECF}'))
	def _get_ActionNodeContact(self):
		return self._ApplyTypes_(*(260, 2, (11, 0), (), "ActionNodeContact", None))
	def _get_ActionPatchOption(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "ActionPatchOption", '{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}'))
	def _get_ActionPressure(self):
		return self._ApplyTypes_(*(272, 2, (11, 0), (), "ActionPressure", None))
	def _get_ActionRadius(self):
		return self._ApplyTypes_(*(270, 2, (9, 0), (), "ActionRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ActionSyncGeometry(self):
		return self._ApplyTypes_(*(269, 2, (11, 0), (), "ActionSyncGeometry", None))
	def _get_ActionUpDirection(self):
		return self._ApplyTypes_(*(254, 2, (11, 0), (), "ActionUpDirection", None))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BaseEntityPatchSet(self):
		return self._ApplyTypes_(*(266, 2, (9, 0), (), "BaseEntityPatchSet", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BaseNodeContact(self):
		return self._ApplyTypes_(*(259, 2, (11, 0), (), "BaseNodeContact", None))
	def _get_BasePatchOption(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "BasePatchOption", '{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}'))
	def _get_BasePressure(self):
		return self._ApplyTypes_(*(271, 2, (11, 0), (), "BasePressure", None))
	def _get_BaseUpDirection(self):
		return self._ApplyTypes_(*(255, 2, (11, 0), (), "BaseUpDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactPoints(self):
		return self._ApplyTypes_(*(256, 2, (19, 0), (), "ContactPoints", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ContactPropertyAdditional(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "ContactPropertyAdditional", '{C3560239-62ED-43FF-A94D-71801A2886E4}'))
	def _get_EdgeContact(self):
		return self._ApplyTypes_(*(261, 2, (11, 0), (), "EdgeContact", None))
	def _get_FaceContact(self):
		return self._ApplyTypes_(*(264, 2, (11, 0), (), "FaceContact", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayComponent(self):
		return self._ApplyTypes_(*(273, 2, (3, 0), (), "ForceDisplayComponent", '{1CDA68E5-BF74-44CC-AA65-1CB30BEE5134}'))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OutputMarker(self):
		return self._ApplyTypes_(*(258, 2, (9, 0), (), "OutputMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_SmoothFaceContact(self):
		return self._ApplyTypes_(*(268, 2, (11, 0), (), "SmoothFaceContact", None))
	def _get_SmoothNodeContact(self):
		return self._ApplyTypes_(*(262, 2, (11, 0), (), "SmoothNodeContact", None))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseCPM(self):
		return self._ApplyTypes_(*(263, 2, (11, 0), (), "UseCPM", None))
	def _get_UseContactOutputFile(self):
		return self._ApplyTypes_(*(257, 2, (11, 0), (), "UseContactOutputFile", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityPatchSet(self, value):
		if "ActionEntityPatchSet" in self.__dict__: self.__dict__["ActionEntityPatchSet"] = value; return
		self._oleobj_.Invoke(*((267, LCID, 4, 0) + (value,) + ()))
	def _set_ActionGeometryType(self, value):
		if "ActionGeometryType" in self.__dict__: self.__dict__["ActionGeometryType"] = value; return
		self._oleobj_.Invoke(*((265, LCID, 4, 0) + (value,) + ()))
	def _set_ActionNodeContact(self, value):
		if "ActionNodeContact" in self.__dict__: self.__dict__["ActionNodeContact"] = value; return
		self._oleobj_.Invoke(*((260, LCID, 4, 0) + (value,) + ()))
	def _set_ActionPressure(self, value):
		if "ActionPressure" in self.__dict__: self.__dict__["ActionPressure"] = value; return
		self._oleobj_.Invoke(*((272, LCID, 4, 0) + (value,) + ()))
	def _set_ActionSyncGeometry(self, value):
		if "ActionSyncGeometry" in self.__dict__: self.__dict__["ActionSyncGeometry"] = value; return
		self._oleobj_.Invoke(*((269, LCID, 4, 0) + (value,) + ()))
	def _set_ActionUpDirection(self, value):
		if "ActionUpDirection" in self.__dict__: self.__dict__["ActionUpDirection"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityPatchSet(self, value):
		if "BaseEntityPatchSet" in self.__dict__: self.__dict__["BaseEntityPatchSet"] = value; return
		self._oleobj_.Invoke(*((266, LCID, 4, 0) + (value,) + ()))
	def _set_BaseNodeContact(self, value):
		if "BaseNodeContact" in self.__dict__: self.__dict__["BaseNodeContact"] = value; return
		self._oleobj_.Invoke(*((259, LCID, 4, 0) + (value,) + ()))
	def _set_BasePressure(self, value):
		if "BasePressure" in self.__dict__: self.__dict__["BasePressure"] = value; return
		self._oleobj_.Invoke(*((271, LCID, 4, 0) + (value,) + ()))
	def _set_BaseUpDirection(self, value):
		if "BaseUpDirection" in self.__dict__: self.__dict__["BaseUpDirection"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ContactPoints(self, value):
		if "ContactPoints" in self.__dict__: self.__dict__["ContactPoints"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_EdgeContact(self, value):
		if "EdgeContact" in self.__dict__: self.__dict__["EdgeContact"] = value; return
		self._oleobj_.Invoke(*((261, LCID, 4, 0) + (value,) + ()))
	def _set_FaceContact(self, value):
		if "FaceContact" in self.__dict__: self.__dict__["FaceContact"] = value; return
		self._oleobj_.Invoke(*((264, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayComponent(self, value):
		if "ForceDisplayComponent" in self.__dict__: self.__dict__["ForceDisplayComponent"] = value; return
		self._oleobj_.Invoke(*((273, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_OutputMarker(self, value):
		if "OutputMarker" in self.__dict__: self.__dict__["OutputMarker"] = value; return
		self._oleobj_.Invoke(*((258, LCID, 4, 0) + (value,) + ()))
	def _set_SmoothFaceContact(self, value):
		if "SmoothFaceContact" in self.__dict__: self.__dict__["SmoothFaceContact"] = value; return
		self._oleobj_.Invoke(*((268, LCID, 4, 0) + (value,) + ()))
	def _set_SmoothNodeContact(self, value):
		if "SmoothNodeContact" in self.__dict__: self.__dict__["SmoothNodeContact"] = value; return
		self._oleobj_.Invoke(*((262, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UseCPM(self, value):
		if "UseCPM" in self.__dict__: self.__dict__["UseCPM"] = value; return
		self._oleobj_.Invoke(*((263, LCID, 4, 0) + (value,) + ()))
	def _set_UseContactOutputFile(self, value):
		if "UseContactOutputFile" in self.__dict__: self.__dict__["UseContactOutputFile"] = value; return
		self._oleobj_.Invoke(*((257, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	ActionEntityPatchSet = property(_get_ActionEntityPatchSet, _set_ActionEntityPatchSet)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	ActionGeometryType = property(_get_ActionGeometryType, _set_ActionGeometryType)
	'''
	Action Geometry type

	:type: recurdyn.ProcessNet.PrimitiveType
	'''
	ActionNodeContact = property(_get_ActionNodeContact, _set_ActionNodeContact)
	'''
	Action node contact

	:type: bool
	'''
	ActionPatchOption = property(_get_ActionPatchOption, None)
	'''
	Geo contact action patch option

	:type: recurdyn.ProcessNet.IContactGeoPatchOption
	'''
	ActionPressure = property(_get_ActionPressure, _set_ActionPressure)
	'''
	Flag to generate the contour data of pressure on action geometry

	:type: bool
	'''
	ActionRadius = property(_get_ActionRadius, None)
	'''
	Action radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	ActionSyncGeometry = property(_get_ActionSyncGeometry, _set_ActionSyncGeometry)
	'''
	Action entity sync geometry

	:type: bool
	'''
	ActionUpDirection = property(_get_ActionUpDirection, _set_ActionUpDirection)
	'''
	Action up direction

	:type: bool
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BaseEntityPatchSet = property(_get_BaseEntityPatchSet, _set_BaseEntityPatchSet)
	'''
	Base entity 

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BaseNodeContact = property(_get_BaseNodeContact, _set_BaseNodeContact)
	'''
	Base node contact

	:type: bool
	'''
	BasePatchOption = property(_get_BasePatchOption, None)
	'''
	Geo contact base patch option

	:type: recurdyn.ProcessNet.IContactGeoPatchOption
	'''
	BasePressure = property(_get_BasePressure, _set_BasePressure)
	'''
	Flag to generate the contour data of pressure on base geometry

	:type: bool
	'''
	BaseUpDirection = property(_get_BaseUpDirection, _set_BaseUpDirection)
	'''
	Base up direction

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactPoints = property(_get_ContactPoints, _set_ContactPoints)
	'''
	The number of max contact points

	:type: int
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ContactPropertyAdditional = property(_get_ContactPropertyAdditional, None)
	'''
	Additional contact property

	:type: recurdyn.ProcessNet.IContactPropertyAdditional
	'''
	EdgeContact = property(_get_EdgeContact, _set_EdgeContact)
	'''
	Edge contact

	:type: bool
	'''
	FaceContact = property(_get_FaceContact, _set_FaceContact)
	'''
	Face contact

	:type: bool
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayComponent = property(_get_ForceDisplayComponent, _set_ForceDisplayComponent)
	'''
	Component of Force Display

	:type: recurdyn.ProcessNet.ForceDisplayComponent
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OutputMarker = property(_get_OutputMarker, _set_OutputMarker)
	'''
	Output marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	SmoothFaceContact = property(_get_SmoothFaceContact, _set_SmoothFaceContact)
	'''
	Smooth face contact

	:type: bool
	'''
	SmoothNodeContact = property(_get_SmoothNodeContact, _set_SmoothNodeContact)
	'''
	Smooth node contact

	:type: bool
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseCPM = property(_get_UseCPM, _set_UseCPM)
	'''
	Use CPM

	:type: bool
	'''
	UseContactOutputFile = property(_get_UseContactOutputFile, _set_UseContactOutputFile)
	'''
	Generate the contact output file

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_ActionEntityPatchSet": _set_ActionEntityPatchSet,
		"_set_ActionGeometryType": _set_ActionGeometryType,
		"_set_ActionNodeContact": _set_ActionNodeContact,
		"_set_ActionPressure": _set_ActionPressure,
		"_set_ActionSyncGeometry": _set_ActionSyncGeometry,
		"_set_ActionUpDirection": _set_ActionUpDirection,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseEntityPatchSet": _set_BaseEntityPatchSet,
		"_set_BaseNodeContact": _set_BaseNodeContact,
		"_set_BasePressure": _set_BasePressure,
		"_set_BaseUpDirection": _set_BaseUpDirection,
		"_set_Comment": _set_Comment,
		"_set_ContactPoints": _set_ContactPoints,
		"_set_EdgeContact": _set_EdgeContact,
		"_set_FaceContact": _set_FaceContact,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayComponent": _set_ForceDisplayComponent,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_OutputMarker": _set_OutputMarker,
		"_set_SmoothFaceContact": _set_SmoothFaceContact,
		"_set_SmoothNodeContact": _set_SmoothNodeContact,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseCPM": _set_UseCPM,
		"_set_UseContactOutputFile": _set_UseContactOutputFile,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"ActionEntityPatchSet": (267, 2, (9, 0), (), "ActionEntityPatchSet", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"ActionGeometryType": (265, 2, (3, 0), (), "ActionGeometryType", '{1CE77D65-D316-44E0-A9A5-8D39C71D3ECF}'),
		"ActionNodeContact": (260, 2, (11, 0), (), "ActionNodeContact", None),
		"ActionPatchOption": (253, 2, (9, 0), (), "ActionPatchOption", '{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}'),
		"ActionPressure": (272, 2, (11, 0), (), "ActionPressure", None),
		"ActionRadius": (270, 2, (9, 0), (), "ActionRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ActionSyncGeometry": (269, 2, (11, 0), (), "ActionSyncGeometry", None),
		"ActionUpDirection": (254, 2, (11, 0), (), "ActionUpDirection", None),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BaseEntityPatchSet": (266, 2, (9, 0), (), "BaseEntityPatchSet", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BaseNodeContact": (259, 2, (11, 0), (), "BaseNodeContact", None),
		"BasePatchOption": (252, 2, (9, 0), (), "BasePatchOption", '{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}'),
		"BasePressure": (271, 2, (11, 0), (), "BasePressure", None),
		"BaseUpDirection": (255, 2, (11, 0), (), "BaseUpDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactPoints": (256, 2, (19, 0), (), "ContactPoints", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ContactPropertyAdditional": (251, 2, (9, 0), (), "ContactPropertyAdditional", '{C3560239-62ED-43FF-A94D-71801A2886E4}'),
		"EdgeContact": (261, 2, (11, 0), (), "EdgeContact", None),
		"FaceContact": (264, 2, (11, 0), (), "FaceContact", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayComponent": (273, 2, (3, 0), (), "ForceDisplayComponent", '{1CDA68E5-BF74-44CC-AA65-1CB30BEE5134}'),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OutputMarker": (258, 2, (9, 0), (), "OutputMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"SmoothFaceContact": (268, 2, (11, 0), (), "SmoothFaceContact", None),
		"SmoothNodeContact": (262, 2, (11, 0), (), "SmoothNodeContact", None),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseCPM": (263, 2, (11, 0), (), "UseCPM", None),
		"UseContactOutputFile": (257, 2, (11, 0), (), "UseContactOutputFile", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"ActionEntityPatchSet": ((267, LCID, 4, 0),()),
		"ActionGeometryType": ((265, LCID, 4, 0),()),
		"ActionNodeContact": ((260, LCID, 4, 0),()),
		"ActionPressure": ((272, LCID, 4, 0),()),
		"ActionSyncGeometry": ((269, LCID, 4, 0),()),
		"ActionUpDirection": ((254, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseEntityPatchSet": ((266, LCID, 4, 0),()),
		"BaseNodeContact": ((259, LCID, 4, 0),()),
		"BasePressure": ((271, LCID, 4, 0),()),
		"BaseUpDirection": ((255, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ContactPoints": ((256, LCID, 4, 0),()),
		"EdgeContact": ((261, LCID, 4, 0),()),
		"FaceContact": ((264, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayComponent": ((273, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"OutputMarker": ((258, LCID, 4, 0),()),
		"SmoothFaceContact": ((268, LCID, 4, 0),()),
		"SmoothNodeContact": ((262, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UseCPM": ((263, LCID, 4, 0),()),
		"UseContactOutputFile": ((257, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactProperty(DispatchBaseClass):
	'''Contact property'''
	CLSID = IID('{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_DampingCoefficient(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "DampingCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_DampingExponent(self):
		return self._ApplyTypes_(*(60, 2, (9, 0), (), "DampingExponent", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_DampingSpline(self):
		return self._ApplyTypes_(*(56, 2, (9, 0), (), "DampingSpline", '{E76144D2-715D-41B4-A432-7B6C7F713FC2}'))
	def _get_Friction(self):
		return self._ApplyTypes_(*(63, 2, (9, 0), (), "Friction", '{AEFD7238-F1DD-48C2-8329-E5571C291B25}'))
	def _get_IndentationExponent(self):
		return self._ApplyTypes_(*(62, 2, (9, 0), (), "IndentationExponent", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StiffnessCoefficient(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "StiffnessCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StiffnessExponent(self):
		return self._ApplyTypes_(*(58, 2, (9, 0), (), "StiffnessExponent", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StiffnessSpline(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "StiffnessSpline", '{E76144D2-715D-41B4-A432-7B6C7F713FC2}'))
	def _get_UseDampingExponent(self):
		return self._ApplyTypes_(*(59, 2, (11, 0), (), "UseDampingExponent", None))
	def _get_UseDampingSpline(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseDampingSpline", None))
	def _get_UseIndentationExponent(self):
		return self._ApplyTypes_(*(61, 2, (11, 0), (), "UseIndentationExponent", None))
	def _get_UseStiffnessExponent(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseStiffnessExponent", None))
	def _get_UseStiffnessSpline(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UseStiffnessSpline", None))
	def _get_UseUserSubroutine(self):
		return self._ApplyTypes_(*(64, 2, (11, 0), (), "UseUserSubroutine", None))
	def _get_UserSubroutine(self):
		return self._ApplyTypes_(*(65, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'))

	def _set_DampingSpline(self, value):
		if "DampingSpline" in self.__dict__: self.__dict__["DampingSpline"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_StiffnessSpline(self, value):
		if "StiffnessSpline" in self.__dict__: self.__dict__["StiffnessSpline"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UseDampingExponent(self, value):
		if "UseDampingExponent" in self.__dict__: self.__dict__["UseDampingExponent"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))
	def _set_UseDampingSpline(self, value):
		if "UseDampingSpline" in self.__dict__: self.__dict__["UseDampingSpline"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseIndentationExponent(self, value):
		if "UseIndentationExponent" in self.__dict__: self.__dict__["UseIndentationExponent"] = value; return
		self._oleobj_.Invoke(*((61, LCID, 4, 0) + (value,) + ()))
	def _set_UseStiffnessExponent(self, value):
		if "UseStiffnessExponent" in self.__dict__: self.__dict__["UseStiffnessExponent"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_UseStiffnessSpline(self, value):
		if "UseStiffnessSpline" in self.__dict__: self.__dict__["UseStiffnessSpline"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_UseUserSubroutine(self, value):
		if "UseUserSubroutine" in self.__dict__: self.__dict__["UseUserSubroutine"] = value; return
		self._oleobj_.Invoke(*((64, LCID, 4, 0) + (value,) + ()))
	def _set_UserSubroutine(self, value):
		if "UserSubroutine" in self.__dict__: self.__dict__["UserSubroutine"] = value; return
		self._oleobj_.Invoke(*((65, LCID, 4, 0) + (value,) + ()))

	DampingCoefficient = property(_get_DampingCoefficient, None)
	'''
	The viscous damping coefficient for the contact normal force.

	:type: recurdyn.ProcessNet.IDouble
	'''
	DampingExponent = property(_get_DampingExponent, None)
	'''
	The damping exponent for a non-linear contact normal force

	:type: recurdyn.ProcessNet.IDouble
	'''
	DampingSpline = property(_get_DampingSpline, _set_DampingSpline)
	'''
	Damping spline

	:type: recurdyn.ProcessNet.ISpline
	'''
	Friction = property(_get_Friction, None)
	'''
	Friction

	:type: recurdyn.ProcessNet.IContactFriction
	'''
	IndentationExponent = property(_get_IndentationExponent, None)
	'''
	The indentation exponent yields an indentation damping effect.

	:type: recurdyn.ProcessNet.IDouble
	'''
	StiffnessCoefficient = property(_get_StiffnessCoefficient, None)
	'''
	The stiffness coefficient for the contact normal force.

	:type: recurdyn.ProcessNet.IDouble
	'''
	StiffnessExponent = property(_get_StiffnessExponent, None)
	'''
	The stiffness exponent for a non-linear contact normal force

	:type: recurdyn.ProcessNet.IDouble
	'''
	StiffnessSpline = property(_get_StiffnessSpline, _set_StiffnessSpline)
	'''
	Stiffness spline

	:type: recurdyn.ProcessNet.ISpline
	'''
	UseDampingExponent = property(_get_UseDampingExponent, _set_UseDampingExponent)
	'''
	Use damping exponent

	:type: bool
	'''
	UseDampingSpline = property(_get_UseDampingSpline, _set_UseDampingSpline)
	'''
	Use damping spline

	:type: bool
	'''
	UseIndentationExponent = property(_get_UseIndentationExponent, _set_UseIndentationExponent)
	'''
	Use indentation exponent

	:type: bool
	'''
	UseStiffnessExponent = property(_get_UseStiffnessExponent, _set_UseStiffnessExponent)
	'''
	Use stiffness exponent

	:type: bool
	'''
	UseStiffnessSpline = property(_get_UseStiffnessSpline, _set_UseStiffnessSpline)
	'''
	Use stiffness spline

	:type: bool
	'''
	UseUserSubroutine = property(_get_UseUserSubroutine, _set_UseUserSubroutine)
	'''
	Use user subroutine

	:type: bool
	'''
	UserSubroutine = property(_get_UserSubroutine, _set_UserSubroutine)
	'''
	User subroutine

	:type: recurdyn.ProcessNet.IUserSubroutine
	'''

	_prop_map_set_function_ = {
		"_set_DampingSpline": _set_DampingSpline,
		"_set_StiffnessSpline": _set_StiffnessSpline,
		"_set_UseDampingExponent": _set_UseDampingExponent,
		"_set_UseDampingSpline": _set_UseDampingSpline,
		"_set_UseIndentationExponent": _set_UseIndentationExponent,
		"_set_UseStiffnessExponent": _set_UseStiffnessExponent,
		"_set_UseStiffnessSpline": _set_UseStiffnessSpline,
		"_set_UseUserSubroutine": _set_UseUserSubroutine,
		"_set_UserSubroutine": _set_UserSubroutine,
	}
	_prop_map_get_ = {
		"DampingCoefficient": (54, 2, (9, 0), (), "DampingCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"DampingExponent": (60, 2, (9, 0), (), "DampingExponent", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"DampingSpline": (56, 2, (9, 0), (), "DampingSpline", '{E76144D2-715D-41B4-A432-7B6C7F713FC2}'),
		"Friction": (63, 2, (9, 0), (), "Friction", '{AEFD7238-F1DD-48C2-8329-E5571C291B25}'),
		"IndentationExponent": (62, 2, (9, 0), (), "IndentationExponent", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StiffnessCoefficient": (51, 2, (9, 0), (), "StiffnessCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StiffnessExponent": (58, 2, (9, 0), (), "StiffnessExponent", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StiffnessSpline": (53, 2, (9, 0), (), "StiffnessSpline", '{E76144D2-715D-41B4-A432-7B6C7F713FC2}'),
		"UseDampingExponent": (59, 2, (11, 0), (), "UseDampingExponent", None),
		"UseDampingSpline": (55, 2, (11, 0), (), "UseDampingSpline", None),
		"UseIndentationExponent": (61, 2, (11, 0), (), "UseIndentationExponent", None),
		"UseStiffnessExponent": (57, 2, (11, 0), (), "UseStiffnessExponent", None),
		"UseStiffnessSpline": (52, 2, (11, 0), (), "UseStiffnessSpline", None),
		"UseUserSubroutine": (64, 2, (11, 0), (), "UseUserSubroutine", None),
		"UserSubroutine": (65, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'),
	}
	_prop_map_put_ = {
		"DampingSpline": ((56, LCID, 4, 0),()),
		"StiffnessSpline": ((53, LCID, 4, 0),()),
		"UseDampingExponent": ((59, LCID, 4, 0),()),
		"UseDampingSpline": ((55, LCID, 4, 0),()),
		"UseIndentationExponent": ((61, LCID, 4, 0),()),
		"UseStiffnessExponent": ((57, LCID, 4, 0),()),
		"UseStiffnessSpline": ((52, LCID, 4, 0),()),
		"UseUserSubroutine": ((64, LCID, 4, 0),()),
		"UserSubroutine": ((65, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactPropertyAdditional(DispatchBaseClass):
	'''Contact property additional'''
	CLSID = IID('{C3560239-62ED-43FF-A94D-71801A2886E4}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_BoundaryPenetration(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "BoundaryPenetration", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ContactForceType(self):
		return self._ApplyTypes_(*(51, 2, (3, 0), (), "ContactForceType", '{FB8BE34F-B6D9-4B57-8EE0-1D1C30E630D9}'))
	def _get_GlobalMaxPenetration(self):
		return self._ApplyTypes_(*(56, 2, (9, 0), (), "GlobalMaxPenetration", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_LocalMaxPenetration(self):
		return self._ApplyTypes_(*(58, 2, (9, 0), (), "LocalMaxPenetration", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ReboundDampingFactor(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "ReboundDampingFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseAutoGlobalMaxPenetration(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseAutoGlobalMaxPenetration", None))
	def _get_UseAutoLocalMaxPenetration(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseAutoLocalMaxPenetration", None))
	def _get_UseUserReboundDamping(self):
		return self._ApplyTypes_(*(53, 2, (11, 0), (), "UseUserReboundDamping", None))

	def _set_ContactForceType(self, value):
		if "ContactForceType" in self.__dict__: self.__dict__["ContactForceType"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_UseAutoGlobalMaxPenetration(self, value):
		if "UseAutoGlobalMaxPenetration" in self.__dict__: self.__dict__["UseAutoGlobalMaxPenetration"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseAutoLocalMaxPenetration(self, value):
		if "UseAutoLocalMaxPenetration" in self.__dict__: self.__dict__["UseAutoLocalMaxPenetration"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_UseUserReboundDamping(self, value):
		if "UseUserReboundDamping" in self.__dict__: self.__dict__["UseUserReboundDamping"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))

	BoundaryPenetration = property(_get_BoundaryPenetration, None)
	'''
	The boundary penetration specifies a full damping penetration.

	:type: recurdyn.ProcessNet.IDouble
	'''
	ContactForceType = property(_get_ContactForceType, _set_ContactForceType)
	'''
	Contact force type

	:type: recurdyn.ProcessNet.ContactForceType
	'''
	GlobalMaxPenetration = property(_get_GlobalMaxPenetration, None)
	'''
	The global maximum penetration specifies the maximum penetration depth.

	:type: recurdyn.ProcessNet.IDouble
	'''
	LocalMaxPenetration = property(_get_LocalMaxPenetration, None)
	'''
	The local maximum penetration specifies the calculation method of penetration depth.

	:type: recurdyn.ProcessNet.IDouble
	'''
	ReboundDampingFactor = property(_get_ReboundDampingFactor, None)
	'''
	Rebound damping factor

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseAutoGlobalMaxPenetration = property(_get_UseAutoGlobalMaxPenetration, _set_UseAutoGlobalMaxPenetration)
	'''
	Use automatic global maximum penetration

	:type: bool
	'''
	UseAutoLocalMaxPenetration = property(_get_UseAutoLocalMaxPenetration, _set_UseAutoLocalMaxPenetration)
	'''
	Use automatic local maximum penetration

	:type: bool
	'''
	UseUserReboundDamping = property(_get_UseUserReboundDamping, _set_UseUserReboundDamping)
	'''
	Use user rebound damping

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_ContactForceType": _set_ContactForceType,
		"_set_UseAutoGlobalMaxPenetration": _set_UseAutoGlobalMaxPenetration,
		"_set_UseAutoLocalMaxPenetration": _set_UseAutoLocalMaxPenetration,
		"_set_UseUserReboundDamping": _set_UseUserReboundDamping,
	}
	_prop_map_get_ = {
		"BoundaryPenetration": (52, 2, (9, 0), (), "BoundaryPenetration", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ContactForceType": (51, 2, (3, 0), (), "ContactForceType", '{FB8BE34F-B6D9-4B57-8EE0-1D1C30E630D9}'),
		"GlobalMaxPenetration": (56, 2, (9, 0), (), "GlobalMaxPenetration", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"LocalMaxPenetration": (58, 2, (9, 0), (), "LocalMaxPenetration", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ReboundDampingFactor": (54, 2, (9, 0), (), "ReboundDampingFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseAutoGlobalMaxPenetration": (55, 2, (11, 0), (), "UseAutoGlobalMaxPenetration", None),
		"UseAutoLocalMaxPenetration": (57, 2, (11, 0), (), "UseAutoLocalMaxPenetration", None),
		"UseUserReboundDamping": (53, 2, (11, 0), (), "UseUserReboundDamping", None),
	}
	_prop_map_put_ = {
		"ContactForceType": ((51, LCID, 4, 0),()),
		"UseAutoGlobalMaxPenetration": ((55, LCID, 4, 0),()),
		"UseAutoLocalMaxPenetration": ((57, LCID, 4, 0),()),
		"UseUserReboundDamping": ((53, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSolidContact(DispatchBaseClass):
	'''Solid contact'''
	CLSID = IID('{C2F210C5-9B2E-43C2-9C50-D57E01780041}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_ActionPatchOption(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "ActionPatchOption", '{D479C190-172F-42AC-A4B9-5B3AFE1EB81B}'))
	def _get_ActionUpDirection(self):
		return self._ApplyTypes_(*(255, 2, (11, 0), (), "ActionUpDirection", None))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BasePatchOption(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "BasePatchOption", '{D479C190-172F-42AC-A4B9-5B3AFE1EB81B}'))
	def _get_BaseUpDirection(self):
		return self._ApplyTypes_(*(256, 2, (11, 0), (), "BaseUpDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactPoints(self):
		return self._ApplyTypes_(*(258, 2, (19, 0), (), "ContactPoints", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ContactPropertyAdditional(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "ContactPropertyAdditional", '{C3560239-62ED-43FF-A94D-71801A2886E4}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OutputMarker(self):
		return self._ApplyTypes_(*(260, 2, (9, 0), (), "OutputMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseContactOutputFile(self):
		return self._ApplyTypes_(*(259, 2, (11, 0), (), "UseContactOutputFile", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_ActionUpDirection(self, value):
		if "ActionUpDirection" in self.__dict__: self.__dict__["ActionUpDirection"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseUpDirection(self, value):
		if "BaseUpDirection" in self.__dict__: self.__dict__["BaseUpDirection"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ContactPoints(self, value):
		if "ContactPoints" in self.__dict__: self.__dict__["ContactPoints"] = value; return
		self._oleobj_.Invoke(*((258, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_OutputMarker(self, value):
		if "OutputMarker" in self.__dict__: self.__dict__["OutputMarker"] = value; return
		self._oleobj_.Invoke(*((260, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UseContactOutputFile(self, value):
		if "UseContactOutputFile" in self.__dict__: self.__dict__["UseContactOutputFile"] = value; return
		self._oleobj_.Invoke(*((259, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	ActionPatchOption = property(_get_ActionPatchOption, None)
	'''
	Solid contact action patch option

	:type: recurdyn.ProcessNet.IContactSolidPatchOption
	'''
	ActionUpDirection = property(_get_ActionUpDirection, _set_ActionUpDirection)
	'''
	Action up direction

	:type: bool
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BasePatchOption = property(_get_BasePatchOption, None)
	'''
	Solid contact base patch option

	:type: recurdyn.ProcessNet.IContactSolidPatchOption
	'''
	BaseUpDirection = property(_get_BaseUpDirection, _set_BaseUpDirection)
	'''
	Base up direction

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactPoints = property(_get_ContactPoints, _set_ContactPoints)
	'''
	The number of max contact points

	:type: int
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ContactPropertyAdditional = property(_get_ContactPropertyAdditional, None)
	'''
	Additional contact property

	:type: recurdyn.ProcessNet.IContactPropertyAdditional
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OutputMarker = property(_get_OutputMarker, _set_OutputMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseContactOutputFile = property(_get_UseContactOutputFile, _set_UseContactOutputFile)
	'''
	Generate the contact output file

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_ActionUpDirection": _set_ActionUpDirection,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseUpDirection": _set_BaseUpDirection,
		"_set_Comment": _set_Comment,
		"_set_ContactPoints": _set_ContactPoints,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_OutputMarker": _set_OutputMarker,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseContactOutputFile": _set_UseContactOutputFile,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"ActionPatchOption": (254, 2, (9, 0), (), "ActionPatchOption", '{D479C190-172F-42AC-A4B9-5B3AFE1EB81B}'),
		"ActionUpDirection": (255, 2, (11, 0), (), "ActionUpDirection", None),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BasePatchOption": (253, 2, (9, 0), (), "BasePatchOption", '{D479C190-172F-42AC-A4B9-5B3AFE1EB81B}'),
		"BaseUpDirection": (256, 2, (11, 0), (), "BaseUpDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactPoints": (258, 2, (19, 0), (), "ContactPoints", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ContactPropertyAdditional": (251, 2, (9, 0), (), "ContactPropertyAdditional", '{C3560239-62ED-43FF-A94D-71801A2886E4}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OutputMarker": (260, 2, (9, 0), (), "OutputMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseContactOutputFile": (259, 2, (11, 0), (), "UseContactOutputFile", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"ActionUpDirection": ((255, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseUpDirection": ((256, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ContactPoints": ((258, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"OutputMarker": ((260, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UseContactOutputFile": ((259, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSolidPatchOption(DispatchBaseClass):
	'''Solid contact patch option'''
	CLSID = IID('{D479C190-172F-42AC-A4B9-5B3AFE1EB81B}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_BoundingBufferLength(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "BoundingBufferLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFacetSizeFactor(self):
		return self._ApplyTypes_(*(55, 2, (9, 0), (), "MaxFacetSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PlaneToleranceFactor(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "PlaneToleranceFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseMaxFacetSizeFactor(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "UseMaxFacetSizeFactor", None))
	def _get_UsePlaneToleranceFactor(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UsePlaneToleranceFactor", None))

	def _set_UseMaxFacetSizeFactor(self, value):
		if "UseMaxFacetSizeFactor" in self.__dict__: self.__dict__["UseMaxFacetSizeFactor"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_UsePlaneToleranceFactor(self, value):
		if "UsePlaneToleranceFactor" in self.__dict__: self.__dict__["UsePlaneToleranceFactor"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	BoundingBufferLength = property(_get_BoundingBufferLength, None)
	'''
	The bounding buffer length defines the offset length of bounding box compared to the real bounding box.

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFacetSizeFactor = property(_get_MaxFacetSizeFactor, None)
	'''
	You can specify the maximum facet size factor as a value from 0 to 10. This value controls the maximum size of triangular patch length.

	:type: recurdyn.ProcessNet.IDouble
	'''
	PlaneToleranceFactor = property(_get_PlaneToleranceFactor, None)
	'''
	You can specify the plane tolerance factor as a value from 0 to 10. A smaller value produces a more refined patch.

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseMaxFacetSizeFactor = property(_get_UseMaxFacetSizeFactor, _set_UseMaxFacetSizeFactor)
	'''
	Use maximum facet size factor

	:type: bool
	'''
	UsePlaneToleranceFactor = property(_get_UsePlaneToleranceFactor, _set_UsePlaneToleranceFactor)
	'''
	Use plane tolerance factor

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UseMaxFacetSizeFactor": _set_UseMaxFacetSizeFactor,
		"_set_UsePlaneToleranceFactor": _set_UsePlaneToleranceFactor,
	}
	_prop_map_get_ = {
		"BoundingBufferLength": (51, 2, (9, 0), (), "BoundingBufferLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFacetSizeFactor": (55, 2, (9, 0), (), "MaxFacetSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PlaneToleranceFactor": (53, 2, (9, 0), (), "PlaneToleranceFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseMaxFacetSizeFactor": (54, 2, (11, 0), (), "UseMaxFacetSizeFactor", None),
		"UsePlaneToleranceFactor": (52, 2, (11, 0), (), "UsePlaneToleranceFactor", None),
	}
	_prop_map_put_ = {
		"UseMaxFacetSizeFactor": ((54, LCID, 4, 0),()),
		"UsePlaneToleranceFactor": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSphereArcExtrude(DispatchBaseClass):
	'''Sphere arc extrude contact'''
	CLSID = IID('{950986EE-CD2C-4719-A2C1-329FB478FA05}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseArcEndAngleArc(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "BaseArcEndAngleArc", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseArcExtrudeLength(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "BaseArcExtrudeLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseArcOpenEndFace(self):
		return self._ApplyTypes_(*(257, 2, (11, 0), (), "BaseArcOpenEndFace", None))
	def _get_BaseArcOpenStartFace(self):
		return self._ApplyTypes_(*(256, 2, (11, 0), (), "BaseArcOpenStartFace", None))
	def _get_BaseArcRadius(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "BaseArcRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseArcStartAngleArc(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "BaseArcStartAngleArc", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_BaseNormalDirection(self):
		return self._ApplyTypes_(*(258, 2, (11, 0), (), "BaseNormalDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseArcOpenEndFace(self, value):
		if "BaseArcOpenEndFace" in self.__dict__: self.__dict__["BaseArcOpenEndFace"] = value; return
		self._oleobj_.Invoke(*((257, LCID, 4, 0) + (value,) + ()))
	def _set_BaseArcOpenStartFace(self, value):
		if "BaseArcOpenStartFace" in self.__dict__: self.__dict__["BaseArcOpenStartFace"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_BaseNormalDirection(self, value):
		if "BaseNormalDirection" in self.__dict__: self.__dict__["BaseNormalDirection"] = value; return
		self._oleobj_.Invoke(*((258, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseArcEndAngleArc = property(_get_BaseArcEndAngleArc, None)
	'''
	The end angle of base arc.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseArcExtrudeLength = property(_get_BaseArcExtrudeLength, None)
	'''
	The start angle of base arc revolution.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseArcOpenEndFace = property(_get_BaseArcOpenEndFace, _set_BaseArcOpenEndFace)
	'''
	Open end face

	:type: bool
	'''
	BaseArcOpenStartFace = property(_get_BaseArcOpenStartFace, _set_BaseArcOpenStartFace)
	'''
	Open start face

	:type: bool
	'''
	BaseArcRadius = property(_get_BaseArcRadius, None)
	'''
	The radius of base arc.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseArcStartAngleArc = property(_get_BaseArcStartAngleArc, None)
	'''
	The start angle of base arc.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	BaseNormalDirection = property(_get_BaseNormalDirection, _set_BaseNormalDirection)
	'''
	The normal direction of base arc. If true, normal direction becames inward.

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseArcOpenEndFace": _set_BaseArcOpenEndFace,
		"_set_BaseArcOpenStartFace": _set_BaseArcOpenStartFace,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_BaseNormalDirection": _set_BaseNormalDirection,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseArcEndAngleArc": (254, 2, (9, 0), (), "BaseArcEndAngleArc", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseArcExtrudeLength": (255, 2, (9, 0), (), "BaseArcExtrudeLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseArcOpenEndFace": (257, 2, (11, 0), (), "BaseArcOpenEndFace", None),
		"BaseArcOpenStartFace": (256, 2, (11, 0), (), "BaseArcOpenStartFace", None),
		"BaseArcRadius": (252, 2, (9, 0), (), "BaseArcRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseArcStartAngleArc": (253, 2, (9, 0), (), "BaseArcStartAngleArc", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BaseMarker": (251, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"BaseNormalDirection": (258, 2, (11, 0), (), "BaseNormalDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseArcOpenEndFace": ((257, LCID, 4, 0),()),
		"BaseArcOpenStartFace": ((256, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseMarker": ((251, LCID, 4, 0),()),
		"BaseNormalDirection": ((258, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSphereArcRevolution(DispatchBaseClass):
	'''Sphere arc revolution contact'''
	CLSID = IID('{8B3A469C-6172-4F76-91BC-34C074A7754A}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseArcEndAngleArc(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "BaseArcEndAngleArc", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseArcEndAngleRevolution(self):
		return self._ApplyTypes_(*(256, 2, (9, 0), (), "BaseArcEndAngleRevolution", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseArcHorizontalOffset(self):
		return self._ApplyTypes_(*(258, 2, (9, 0), (), "BaseArcHorizontalOffset", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseArcRadius(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "BaseArcRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseArcStartAngleArc(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "BaseArcStartAngleArc", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseArcStartAngleRevolution(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "BaseArcStartAngleRevolution", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseArcVerticalOffset(self):
		return self._ApplyTypes_(*(257, 2, (9, 0), (), "BaseArcVerticalOffset", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_BaseNormalDirection(self):
		return self._ApplyTypes_(*(259, 2, (11, 0), (), "BaseNormalDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_BaseNormalDirection(self, value):
		if "BaseNormalDirection" in self.__dict__: self.__dict__["BaseNormalDirection"] = value; return
		self._oleobj_.Invoke(*((259, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseArcEndAngleArc = property(_get_BaseArcEndAngleArc, None)
	'''
	The end angle of base arc.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseArcEndAngleRevolution = property(_get_BaseArcEndAngleRevolution, None)
	'''
	The end angle of base arc revolution.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseArcHorizontalOffset = property(_get_BaseArcHorizontalOffset, None)
	'''
	The horizontal offset of base arc.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseArcRadius = property(_get_BaseArcRadius, None)
	'''
	The radius of base arc.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseArcStartAngleArc = property(_get_BaseArcStartAngleArc, None)
	'''
	The start angle of base arc.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseArcStartAngleRevolution = property(_get_BaseArcStartAngleRevolution, None)
	'''
	The start angle of base arc revolution.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseArcVerticalOffset = property(_get_BaseArcVerticalOffset, None)
	'''
	The vertical offset of base arc.

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	BaseNormalDirection = property(_get_BaseNormalDirection, _set_BaseNormalDirection)
	'''
	The normal direction of base arc. If true, normal direction becames inward.

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_BaseNormalDirection": _set_BaseNormalDirection,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseArcEndAngleArc": (254, 2, (9, 0), (), "BaseArcEndAngleArc", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseArcEndAngleRevolution": (256, 2, (9, 0), (), "BaseArcEndAngleRevolution", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseArcHorizontalOffset": (258, 2, (9, 0), (), "BaseArcHorizontalOffset", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseArcRadius": (252, 2, (9, 0), (), "BaseArcRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseArcStartAngleArc": (253, 2, (9, 0), (), "BaseArcStartAngleArc", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseArcStartAngleRevolution": (255, 2, (9, 0), (), "BaseArcStartAngleRevolution", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseArcVerticalOffset": (257, 2, (9, 0), (), "BaseArcVerticalOffset", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BaseMarker": (251, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"BaseNormalDirection": (259, 2, (11, 0), (), "BaseNormalDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseMarker": ((251, LCID, 4, 0),()),
		"BaseNormalDirection": ((259, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSphereInBox(DispatchBaseClass):
	'''Sphere in box contact'''
	CLSID = IID('{EF263E7B-85A1-4B43-97F6-3BD08C9334DB}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OpenBackFace(self):
		return self._ApplyTypes_(*(253, 2, (11, 0), (), "OpenBackFace", None))
	def _get_OpenBottomFace(self):
		return self._ApplyTypes_(*(255, 2, (11, 0), (), "OpenBottomFace", None))
	def _get_OpenFrontFace(self):
		return self._ApplyTypes_(*(252, 2, (11, 0), (), "OpenFrontFace", None))
	def _get_OpenLeftFace(self):
		return self._ApplyTypes_(*(256, 2, (11, 0), (), "OpenLeftFace", None))
	def _get_OpenRightFace(self):
		return self._ApplyTypes_(*(257, 2, (11, 0), (), "OpenRightFace", None))
	def _get_OpenTopFace(self):
		return self._ApplyTypes_(*(254, 2, (11, 0), (), "OpenTopFace", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_OpenBackFace(self, value):
		if "OpenBackFace" in self.__dict__: self.__dict__["OpenBackFace"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_OpenBottomFace(self, value):
		if "OpenBottomFace" in self.__dict__: self.__dict__["OpenBottomFace"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_OpenFrontFace(self, value):
		if "OpenFrontFace" in self.__dict__: self.__dict__["OpenFrontFace"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_OpenLeftFace(self, value):
		if "OpenLeftFace" in self.__dict__: self.__dict__["OpenLeftFace"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_OpenRightFace(self, value):
		if "OpenRightFace" in self.__dict__: self.__dict__["OpenRightFace"] = value; return
		self._oleobj_.Invoke(*((257, LCID, 4, 0) + (value,) + ()))
	def _set_OpenTopFace(self, value):
		if "OpenTopFace" in self.__dict__: self.__dict__["OpenTopFace"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OpenBackFace = property(_get_OpenBackFace, _set_OpenBackFace)
	'''
	Open back face

	:type: bool
	'''
	OpenBottomFace = property(_get_OpenBottomFace, _set_OpenBottomFace)
	'''
	Open bottom face

	:type: bool
	'''
	OpenFrontFace = property(_get_OpenFrontFace, _set_OpenFrontFace)
	'''
	Open front face

	:type: bool
	'''
	OpenLeftFace = property(_get_OpenLeftFace, _set_OpenLeftFace)
	'''
	Open left face

	:type: bool
	'''
	OpenRightFace = property(_get_OpenRightFace, _set_OpenRightFace)
	'''
	Open right face

	:type: bool
	'''
	OpenTopFace = property(_get_OpenTopFace, _set_OpenTopFace)
	'''
	Open top face

	:type: bool
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_OpenBackFace": _set_OpenBackFace,
		"_set_OpenBottomFace": _set_OpenBottomFace,
		"_set_OpenFrontFace": _set_OpenFrontFace,
		"_set_OpenLeftFace": _set_OpenLeftFace,
		"_set_OpenRightFace": _set_OpenRightFace,
		"_set_OpenTopFace": _set_OpenTopFace,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OpenBackFace": (253, 2, (11, 0), (), "OpenBackFace", None),
		"OpenBottomFace": (255, 2, (11, 0), (), "OpenBottomFace", None),
		"OpenFrontFace": (252, 2, (11, 0), (), "OpenFrontFace", None),
		"OpenLeftFace": (256, 2, (11, 0), (), "OpenLeftFace", None),
		"OpenRightFace": (257, 2, (11, 0), (), "OpenRightFace", None),
		"OpenTopFace": (254, 2, (11, 0), (), "OpenTopFace", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"OpenBackFace": ((253, LCID, 4, 0),()),
		"OpenBottomFace": ((255, LCID, 4, 0),()),
		"OpenFrontFace": ((252, LCID, 4, 0),()),
		"OpenLeftFace": ((256, LCID, 4, 0),()),
		"OpenRightFace": ((257, LCID, 4, 0),()),
		"OpenTopFace": ((254, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSphereInCone(DispatchBaseClass):
	'''Sphere in cone contact'''
	CLSID = IID('{4D515A5F-EE68-43AD-8C60-6AD2B9DF8D09}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OpenEndFace(self):
		return self._ApplyTypes_(*(252, 2, (11, 0), (), "OpenEndFace", None))
	def _get_OpenStartFace(self):
		return self._ApplyTypes_(*(251, 2, (11, 0), (), "OpenStartFace", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_OpenEndFace(self, value):
		if "OpenEndFace" in self.__dict__: self.__dict__["OpenEndFace"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_OpenStartFace(self, value):
		if "OpenStartFace" in self.__dict__: self.__dict__["OpenStartFace"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OpenEndFace = property(_get_OpenEndFace, _set_OpenEndFace)
	'''
	Open end face

	:type: bool
	'''
	OpenStartFace = property(_get_OpenStartFace, _set_OpenStartFace)
	'''
	Open start face

	:type: bool
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_OpenEndFace": _set_OpenEndFace,
		"_set_OpenStartFace": _set_OpenStartFace,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OpenEndFace": (252, 2, (11, 0), (), "OpenEndFace", None),
		"OpenStartFace": (251, 2, (11, 0), (), "OpenStartFace", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"OpenEndFace": ((252, LCID, 4, 0),()),
		"OpenStartFace": ((251, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSphereInCylinder(DispatchBaseClass):
	'''Sphere in cylinder contact'''
	CLSID = IID('{7A5148F6-528B-4BCD-A271-47F8842D6E6C}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OpenEndFace(self):
		return self._ApplyTypes_(*(253, 2, (11, 0), (), "OpenEndFace", None))
	def _get_OpenStartFace(self):
		return self._ApplyTypes_(*(252, 2, (11, 0), (), "OpenStartFace", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_OpenEndFace(self, value):
		if "OpenEndFace" in self.__dict__: self.__dict__["OpenEndFace"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_OpenStartFace(self, value):
		if "OpenStartFace" in self.__dict__: self.__dict__["OpenStartFace"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OpenEndFace = property(_get_OpenEndFace, _set_OpenEndFace)
	'''
	Open end face

	:type: bool
	'''
	OpenStartFace = property(_get_OpenStartFace, _set_OpenStartFace)
	'''
	Open start face

	:type: bool
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_OpenEndFace": _set_OpenEndFace,
		"_set_OpenStartFace": _set_OpenStartFace,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OpenEndFace": (253, 2, (11, 0), (), "OpenEndFace", None),
		"OpenStartFace": (252, 2, (11, 0), (), "OpenStartFace", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"OpenEndFace": ((253, LCID, 4, 0),()),
		"OpenStartFace": ((252, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSphereInSphere(DispatchBaseClass):
	'''Sphere in sphere contact'''
	CLSID = IID('{B60FAA98-F5DA-4096-B282-4C015E99D9A8}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSphereInTorus(DispatchBaseClass):
	'''Sphere in torus contact'''
	CLSID = IID('{6D130ECF-C4B3-4E13-ABDC-7C6023E11A3B}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OpenEndFace(self):
		return self._ApplyTypes_(*(253, 2, (11, 0), (), "OpenEndFace", None))
	def _get_OpenStartFace(self):
		return self._ApplyTypes_(*(252, 2, (11, 0), (), "OpenStartFace", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_OpenEndFace(self, value):
		if "OpenEndFace" in self.__dict__: self.__dict__["OpenEndFace"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_OpenStartFace(self, value):
		if "OpenStartFace" in self.__dict__: self.__dict__["OpenStartFace"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OpenEndFace = property(_get_OpenEndFace, _set_OpenEndFace)
	'''
	Open end face

	:type: bool
	'''
	OpenStartFace = property(_get_OpenStartFace, _set_OpenStartFace)
	'''
	Open start face

	:type: bool
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_OpenEndFace": _set_OpenEndFace,
		"_set_OpenStartFace": _set_OpenStartFace,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OpenEndFace": (253, 2, (11, 0), (), "OpenEndFace", None),
		"OpenStartFace": (252, 2, (11, 0), (), "OpenStartFace", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"OpenEndFace": ((253, LCID, 4, 0),()),
		"OpenStartFace": ((252, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSphereToArcExtrusion(DispatchBaseClass):
	'''Sphere to arc extrusion contact'''
	CLSID = IID('{F535B5BD-3EC1-4774-AB37-BF8A82D076C1}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BaseNormalDirection(self):
		return self._ApplyTypes_(*(253, 2, (11, 0), (), "BaseNormalDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OpenEndFace(self):
		return self._ApplyTypes_(*(252, 2, (11, 0), (), "OpenEndFace", None))
	def _get_OpenStartFace(self):
		return self._ApplyTypes_(*(251, 2, (11, 0), (), "OpenStartFace", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseNormalDirection(self, value):
		if "BaseNormalDirection" in self.__dict__: self.__dict__["BaseNormalDirection"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_OpenEndFace(self, value):
		if "OpenEndFace" in self.__dict__: self.__dict__["OpenEndFace"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_OpenStartFace(self, value):
		if "OpenStartFace" in self.__dict__: self.__dict__["OpenStartFace"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BaseNormalDirection = property(_get_BaseNormalDirection, _set_BaseNormalDirection)
	'''
	The normal direction of base arc. If true, normal direction becames inward.

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OpenEndFace = property(_get_OpenEndFace, _set_OpenEndFace)
	'''
	Open end face

	:type: bool
	'''
	OpenStartFace = property(_get_OpenStartFace, _set_OpenStartFace)
	'''
	Open start face

	:type: bool
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseNormalDirection": _set_BaseNormalDirection,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_OpenEndFace": _set_OpenEndFace,
		"_set_OpenStartFace": _set_OpenStartFace,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BaseNormalDirection": (253, 2, (11, 0), (), "BaseNormalDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OpenEndFace": (252, 2, (11, 0), (), "OpenEndFace", None),
		"OpenStartFace": (251, 2, (11, 0), (), "OpenStartFace", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseNormalDirection": ((253, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"OpenEndFace": ((252, LCID, 4, 0),()),
		"OpenStartFace": ((251, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSphereToArcRevolution(DispatchBaseClass):
	'''Sphere to arc revolution contact'''
	CLSID = IID('{2FACF09B-48C8-4A94-92D7-BF9F43647CB3}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BaseNormalDirection(self):
		return self._ApplyTypes_(*(253, 2, (11, 0), (), "BaseNormalDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OpenEndFace(self):
		return self._ApplyTypes_(*(252, 2, (11, 0), (), "OpenEndFace", None))
	def _get_OpenStartFace(self):
		return self._ApplyTypes_(*(251, 2, (11, 0), (), "OpenStartFace", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Pitch(self):
		return self._ApplyTypes_(*(256, 2, (9, 0), (), "Pitch", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RotationalDirection(self):
		return self._ApplyTypes_(*(255, 2, (3, 0), (), "RotationalDirection", '{4AF9E853-0E68-42B6-8F9B-B3606E38FC28}'))
	def _get_SyncGeometry(self):
		return self._ApplyTypes_(*(258, 2, (11, 0), (), "SyncGeometry", None))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_TotalDepth(self):
		return self._ApplyTypes_(*(257, 2, (9, 0), (), "TotalDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseHelixCurve(self):
		return self._ApplyTypes_(*(254, 2, (11, 0), (), "UseHelixCurve", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseNormalDirection(self, value):
		if "BaseNormalDirection" in self.__dict__: self.__dict__["BaseNormalDirection"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_OpenEndFace(self, value):
		if "OpenEndFace" in self.__dict__: self.__dict__["OpenEndFace"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_OpenStartFace(self, value):
		if "OpenStartFace" in self.__dict__: self.__dict__["OpenStartFace"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_RotationalDirection(self, value):
		if "RotationalDirection" in self.__dict__: self.__dict__["RotationalDirection"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_SyncGeometry(self, value):
		if "SyncGeometry" in self.__dict__: self.__dict__["SyncGeometry"] = value; return
		self._oleobj_.Invoke(*((258, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UseHelixCurve(self, value):
		if "UseHelixCurve" in self.__dict__: self.__dict__["UseHelixCurve"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BaseNormalDirection = property(_get_BaseNormalDirection, _set_BaseNormalDirection)
	'''
	The normal direction of base arc. If true, normal direction becames inward.

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OpenEndFace = property(_get_OpenEndFace, _set_OpenEndFace)
	'''
	Open end face

	:type: bool
	'''
	OpenStartFace = property(_get_OpenStartFace, _set_OpenStartFace)
	'''
	Open start face

	:type: bool
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Pitch = property(_get_Pitch, None)
	'''
	Pitch

	:type: recurdyn.ProcessNet.IDouble
	'''
	RotationalDirection = property(_get_RotationalDirection, _set_RotationalDirection)
	'''
	Rotational Direction Type

	:type: recurdyn.ProcessNet.RotationalDirectionType
	'''
	SyncGeometry = property(_get_SyncGeometry, _set_SyncGeometry)
	'''
	Sync geometry

	:type: bool
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	TotalDepth = property(_get_TotalDepth, None)
	'''
	TotalDepth

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseHelixCurve = property(_get_UseHelixCurve, _set_UseHelixCurve)
	'''
	Use HelixCurve

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseNormalDirection": _set_BaseNormalDirection,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_OpenEndFace": _set_OpenEndFace,
		"_set_OpenStartFace": _set_OpenStartFace,
		"_set_RotationalDirection": _set_RotationalDirection,
		"_set_SyncGeometry": _set_SyncGeometry,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseHelixCurve": _set_UseHelixCurve,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BaseNormalDirection": (253, 2, (11, 0), (), "BaseNormalDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OpenEndFace": (252, 2, (11, 0), (), "OpenEndFace", None),
		"OpenStartFace": (251, 2, (11, 0), (), "OpenStartFace", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Pitch": (256, 2, (9, 0), (), "Pitch", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RotationalDirection": (255, 2, (3, 0), (), "RotationalDirection", '{4AF9E853-0E68-42B6-8F9B-B3606E38FC28}'),
		"SyncGeometry": (258, 2, (11, 0), (), "SyncGeometry", None),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"TotalDepth": (257, 2, (9, 0), (), "TotalDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseHelixCurve": (254, 2, (11, 0), (), "UseHelixCurve", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseNormalDirection": ((253, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"OpenEndFace": ((252, LCID, 4, 0),()),
		"OpenStartFace": ((251, LCID, 4, 0),()),
		"RotationalDirection": ((255, LCID, 4, 0),()),
		"SyncGeometry": ((258, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UseHelixCurve": ((254, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSphereToBox(DispatchBaseClass):
	'''Sphere to box contact'''
	CLSID = IID('{32D72143-2B38-4E05-921B-1A1F3282FEB1}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSphereToCone(DispatchBaseClass):
	'''Sphere to cone contact'''
	CLSID = IID('{028811A2-89B0-4A54-B105-7682DC7D07DB}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSphereToCylinder(DispatchBaseClass):
	'''Sphere to cylinder contact'''
	CLSID = IID('{17DA0A15-1706-4346-8982-C0E9243F866E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSphereToSphere(DispatchBaseClass):
	'''Sphere to sphere contact'''
	CLSID = IID('{5333486D-3939-4899-8357-62D694707155}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSphereToSurface(DispatchBaseClass):
	'''Sphere to surface contact'''
	CLSID = IID('{8928F336-9095-49D0-9AAC-1D599E3F26A7}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BasePatchOption(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "BasePatchOption", '{66C811FA-3964-4522-8E0B-770FB18880F5}'))
	def _get_BaseUpDirection(self):
		return self._ApplyTypes_(*(252, 2, (11, 0), (), "BaseUpDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseNodeContactOnly(self):
		return self._ApplyTypes_(*(253, 2, (11, 0), (), "UseNodeContactOnly", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseUpDirection(self, value):
		if "BaseUpDirection" in self.__dict__: self.__dict__["BaseUpDirection"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UseNodeContactOnly(self, value):
		if "UseNodeContactOnly" in self.__dict__: self.__dict__["UseNodeContactOnly"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BasePatchOption = property(_get_BasePatchOption, None)
	'''
	Surface contact base patch option

	:type: recurdyn.ProcessNet.IContactSurfacePatchOption
	'''
	BaseUpDirection = property(_get_BaseUpDirection, _set_BaseUpDirection)
	'''
	Base up direction

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseNodeContactOnly = property(_get_UseNodeContactOnly, _set_UseNodeContactOnly)
	'''
	Use node contact only

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseUpDirection": _set_BaseUpDirection,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseNodeContactOnly": _set_UseNodeContactOnly,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BasePatchOption": (254, 2, (9, 0), (), "BasePatchOption", '{66C811FA-3964-4522-8E0B-770FB18880F5}'),
		"BaseUpDirection": (252, 2, (11, 0), (), "BaseUpDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseNodeContactOnly": (253, 2, (11, 0), (), "UseNodeContactOnly", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseUpDirection": ((252, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UseNodeContactOnly": ((253, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSphereToTorus(DispatchBaseClass):
	'''Sphere to torus contact'''
	CLSID = IID('{15C4A86F-4FC5-4305-87EF-918AEB6C9B8D}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSurfacePatchOption(DispatchBaseClass):
	'''Surface contact patch option'''
	CLSID = IID('{66C811FA-3964-4522-8E0B-770FB18880F5}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_MinimumPlaneTolerance(self):
		return self._ApplyTypes_(*(53, 2, (5, 0), (), "MinimumPlaneTolerance", None))
	def _get_PlaneToleranceFactor(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "PlaneToleranceFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UsePlaneToleranceFactor(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "UsePlaneToleranceFactor", None))

	def _set_MinimumPlaneTolerance(self, value):
		if "MinimumPlaneTolerance" in self.__dict__: self.__dict__["MinimumPlaneTolerance"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UsePlaneToleranceFactor(self, value):
		if "UsePlaneToleranceFactor" in self.__dict__: self.__dict__["UsePlaneToleranceFactor"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))

	MinimumPlaneTolerance = property(_get_MinimumPlaneTolerance, _set_MinimumPlaneTolerance)
	'''
	If decreasing the plane tolerance factor has no effect on the patch refinement, you should decrease the minimum plane tolerance.

	:type: float
	'''
	PlaneToleranceFactor = property(_get_PlaneToleranceFactor, None)
	'''
	You can specify the plane tolerance factor as a value from 0 to 10. A smaller value produces a more refined patch.

	:type: recurdyn.ProcessNet.IDouble
	'''
	UsePlaneToleranceFactor = property(_get_UsePlaneToleranceFactor, _set_UsePlaneToleranceFactor)
	'''
	Use plane tolerance factor

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_MinimumPlaneTolerance": _set_MinimumPlaneTolerance,
		"_set_UsePlaneToleranceFactor": _set_UsePlaneToleranceFactor,
	}
	_prop_map_get_ = {
		"MinimumPlaneTolerance": (53, 2, (5, 0), (), "MinimumPlaneTolerance", None),
		"PlaneToleranceFactor": (52, 2, (9, 0), (), "PlaneToleranceFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UsePlaneToleranceFactor": (51, 2, (11, 0), (), "UsePlaneToleranceFactor", None),
	}
	_prop_map_put_ = {
		"MinimumPlaneTolerance": ((53, LCID, 4, 0),()),
		"UsePlaneToleranceFactor": ((51, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactSurfaceToSurface(DispatchBaseClass):
	'''Surface to surface contact'''
	CLSID = IID('{1D599359-EBA8-4D8D-A611-6EEBABBF5BB0}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_ActionMaxPenetration(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "ActionMaxPenetration", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ActionMinimumPlaneTolerance(self):
		return self._ApplyTypes_(*(257, 2, (5, 0), (), "ActionMinimumPlaneTolerance", None))
	def _get_ActionPlaneToleranceFactor(self):
		return self._ApplyTypes_(*(256, 2, (9, 0), (), "ActionPlaneToleranceFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ActionUpDirection(self):
		return self._ApplyTypes_(*(253, 2, (11, 0), (), "ActionUpDirection", None))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BasePatchOption(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "BasePatchOption", '{66C811FA-3964-4522-8E0B-770FB18880F5}'))
	def _get_BaseUpDirection(self):
		return self._ApplyTypes_(*(251, 2, (11, 0), (), "BaseUpDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseActionPlaneToleranceFactor(self):
		return self._ApplyTypes_(*(255, 2, (11, 0), (), "UseActionPlaneToleranceFactor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_ActionMinimumPlaneTolerance(self, value):
		if "ActionMinimumPlaneTolerance" in self.__dict__: self.__dict__["ActionMinimumPlaneTolerance"] = value; return
		self._oleobj_.Invoke(*((257, LCID, 4, 0) + (value,) + ()))
	def _set_ActionUpDirection(self, value):
		if "ActionUpDirection" in self.__dict__: self.__dict__["ActionUpDirection"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseUpDirection(self, value):
		if "BaseUpDirection" in self.__dict__: self.__dict__["BaseUpDirection"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UseActionPlaneToleranceFactor(self, value):
		if "UseActionPlaneToleranceFactor" in self.__dict__: self.__dict__["UseActionPlaneToleranceFactor"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	ActionMaxPenetration = property(_get_ActionMaxPenetration, None)
	'''
	Action maximum penetration

	:type: recurdyn.ProcessNet.IDouble
	'''
	ActionMinimumPlaneTolerance = property(_get_ActionMinimumPlaneTolerance, _set_ActionMinimumPlaneTolerance)
	'''
	If decreasing the plane tolerance factor has no effect on the patch refinement, you should decrease the minimum plane tolerance.

	:type: float
	'''
	ActionPlaneToleranceFactor = property(_get_ActionPlaneToleranceFactor, None)
	'''
	You can specify the plane tolerance factor as a value from 0 to 10. A smaller value produces a more refined patch.

	:type: recurdyn.ProcessNet.IDouble
	'''
	ActionUpDirection = property(_get_ActionUpDirection, _set_ActionUpDirection)
	'''
	Action up direction

	:type: bool
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BasePatchOption = property(_get_BasePatchOption, None)
	'''
	Surface contact base patch option

	:type: recurdyn.ProcessNet.IContactSurfacePatchOption
	'''
	BaseUpDirection = property(_get_BaseUpDirection, _set_BaseUpDirection)
	'''
	Base up direction

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseActionPlaneToleranceFactor = property(_get_UseActionPlaneToleranceFactor, _set_UseActionPlaneToleranceFactor)
	'''
	Use plane tolerance factor

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_ActionMinimumPlaneTolerance": _set_ActionMinimumPlaneTolerance,
		"_set_ActionUpDirection": _set_ActionUpDirection,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseUpDirection": _set_BaseUpDirection,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseActionPlaneToleranceFactor": _set_UseActionPlaneToleranceFactor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"ActionMaxPenetration": (254, 2, (9, 0), (), "ActionMaxPenetration", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ActionMinimumPlaneTolerance": (257, 2, (5, 0), (), "ActionMinimumPlaneTolerance", None),
		"ActionPlaneToleranceFactor": (256, 2, (9, 0), (), "ActionPlaneToleranceFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ActionUpDirection": (253, 2, (11, 0), (), "ActionUpDirection", None),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BasePatchOption": (252, 2, (9, 0), (), "BasePatchOption", '{66C811FA-3964-4522-8E0B-770FB18880F5}'),
		"BaseUpDirection": (251, 2, (11, 0), (), "BaseUpDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseActionPlaneToleranceFactor": (255, 2, (11, 0), (), "UseActionPlaneToleranceFactor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"ActionMinimumPlaneTolerance": ((257, LCID, 4, 0),()),
		"ActionUpDirection": ((253, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseUpDirection": ((251, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UseActionPlaneToleranceFactor": ((255, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactUVPatchOption(DispatchBaseClass):
	'''UV surface contact patch option'''
	CLSID = IID('{713E6396-E6D2-4DBF-8780-142AB7259685}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_BoundingBufferLength(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "BoundingBufferLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_CubicCell(self):
		return self._ApplyTypes_(*(55, 2, (8197, 0), (), "CubicCell", None))
	def _get_NumberOfUDirection(self):
		return self._ApplyTypes_(*(52, 2, (19, 0), (), "NumberOfUDirection", None))
	def _get_NumberOfVDirection(self):
		return self._ApplyTypes_(*(53, 2, (19, 0), (), "NumberOfVDirection", None))
	def _get_UseCubicCell(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "UseCubicCell", None))

	def _set_CubicCell(self, value):
		if "CubicCell" in self.__dict__: self.__dict__["CubicCell"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (variantValue,) + ()))
	def _set_NumberOfUDirection(self, value):
		if "NumberOfUDirection" in self.__dict__: self.__dict__["NumberOfUDirection"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_NumberOfVDirection(self, value):
		if "NumberOfVDirection" in self.__dict__: self.__dict__["NumberOfVDirection"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UseCubicCell(self, value):
		if "UseCubicCell" in self.__dict__: self.__dict__["UseCubicCell"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))

	BoundingBufferLength = property(_get_BoundingBufferLength, None)
	'''
	The bounding buffer length defines the offset length of bounding box compared to the real bounding box.

	:type: recurdyn.ProcessNet.IDouble
	'''
	CubicCell = property(_get_CubicCell, _set_CubicCell)
	'''
	Cubic cell

	:type: list[float]
	'''
	NumberOfUDirection = property(_get_NumberOfUDirection, _set_NumberOfUDirection)
	'''
	Number of patch in U direction

	:type: int
	'''
	NumberOfVDirection = property(_get_NumberOfVDirection, _set_NumberOfVDirection)
	'''
	Number of patch in V direction

	:type: int
	'''
	UseCubicCell = property(_get_UseCubicCell, _set_UseCubicCell)
	'''
	Use cubic cell

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_CubicCell": _set_CubicCell,
		"_set_NumberOfUDirection": _set_NumberOfUDirection,
		"_set_NumberOfVDirection": _set_NumberOfVDirection,
		"_set_UseCubicCell": _set_UseCubicCell,
	}
	_prop_map_get_ = {
		"BoundingBufferLength": (51, 2, (9, 0), (), "BoundingBufferLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"CubicCell": (55, 2, (8197, 0), (), "CubicCell", None),
		"NumberOfUDirection": (52, 2, (19, 0), (), "NumberOfUDirection", None),
		"NumberOfVDirection": (53, 2, (19, 0), (), "NumberOfVDirection", None),
		"UseCubicCell": (54, 2, (11, 0), (), "UseCubicCell", None),
	}
	_prop_map_put_ = {
		"CubicCell": ((55, LCID, 4, 0),()),
		"NumberOfUDirection": ((52, LCID, 4, 0),()),
		"NumberOfVDirection": ((53, LCID, 4, 0),()),
		"UseCubicCell": ((54, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContactUVSurface(DispatchBaseClass):
	'''UV Surface contact'''
	CLSID = IID('{50DC0F54-508C-4B1A-825F-EEF9288B6828}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionEntity(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionEntityIGeneric(self):
		return self._ApplyTypes_(*(211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_ActionRadius(self):
		return self._ApplyTypes_(*(258, 2, (9, 0), (), "ActionRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ActionSyncGeometry(self):
		return self._ApplyTypes_(*(257, 2, (11, 0), (), "ActionSyncGeometry", None))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseEntity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseEntityIGeneric(self):
		return self._ApplyTypes_(*(210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BaseNodeContact(self):
		return self._ApplyTypes_(*(259, 2, (11, 0), (), "BaseNodeContact", None))
	def _get_BasePatchOption(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "BasePatchOption", '{713E6396-E6D2-4DBF-8780-142AB7259685}'))
	def _get_BasePressure(self):
		return self._ApplyTypes_(*(262, 2, (11, 0), (), "BasePressure", None))
	def _get_BaseUpDirection(self):
		return self._ApplyTypes_(*(253, 2, (11, 0), (), "BaseUpDirection", None))
	def _get_BufferRadiusFactor(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactPoints(self):
		return self._ApplyTypes_(*(254, 2, (19, 0), (), "ContactPoints", None))
	def _get_ContactProperty(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'))
	def _get_ContactPropertyAdditional(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "ContactPropertyAdditional", '{C3560239-62ED-43FF-A94D-71801A2886E4}'))
	def _get_EdgeContact(self):
		return self._ApplyTypes_(*(255, 2, (11, 0), (), "EdgeContact", None))
	def _get_FaceContact(self):
		return self._ApplyTypes_(*(261, 2, (11, 0), (), "FaceContact", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(212, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(207, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MaxStepSizeFactor(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_SmoothFaceContact(self):
		return self._ApplyTypes_(*(260, 2, (11, 0), (), "SmoothFaceContact", None))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(209, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseCPM(self):
		return self._ApplyTypes_(*(256, 2, (11, 0), (), "UseCPM", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionEntity(self, value):
		if "ActionEntity" in self.__dict__: self.__dict__["ActionEntity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionEntityIGeneric(self, value):
		if "ActionEntityIGeneric" in self.__dict__: self.__dict__["ActionEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((211, LCID, 4, 0) + (value,) + ()))
	def _set_ActionSyncGeometry(self, value):
		if "ActionSyncGeometry" in self.__dict__: self.__dict__["ActionSyncGeometry"] = value; return
		self._oleobj_.Invoke(*((257, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntity(self, value):
		if "BaseEntity" in self.__dict__: self.__dict__["BaseEntity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseEntityIGeneric(self, value):
		if "BaseEntityIGeneric" in self.__dict__: self.__dict__["BaseEntityIGeneric"] = value; return
		self._oleobj_.Invoke(*((210, LCID, 4, 0) + (value,) + ()))
	def _set_BaseNodeContact(self, value):
		if "BaseNodeContact" in self.__dict__: self.__dict__["BaseNodeContact"] = value; return
		self._oleobj_.Invoke(*((259, LCID, 4, 0) + (value,) + ()))
	def _set_BasePressure(self, value):
		if "BasePressure" in self.__dict__: self.__dict__["BasePressure"] = value; return
		self._oleobj_.Invoke(*((262, LCID, 4, 0) + (value,) + ()))
	def _set_BaseUpDirection(self, value):
		if "BaseUpDirection" in self.__dict__: self.__dict__["BaseUpDirection"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ContactPoints(self, value):
		if "ContactPoints" in self.__dict__: self.__dict__["ContactPoints"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_EdgeContact(self, value):
		if "EdgeContact" in self.__dict__: self.__dict__["EdgeContact"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_FaceContact(self, value):
		if "FaceContact" in self.__dict__: self.__dict__["FaceContact"] = value; return
		self._oleobj_.Invoke(*((261, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((212, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_SmoothFaceContact(self, value):
		if "SmoothFaceContact" in self.__dict__: self.__dict__["SmoothFaceContact"] = value; return
		self._oleobj_.Invoke(*((260, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_UseCPM(self, value):
		if "UseCPM" in self.__dict__: self.__dict__["UseCPM"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionEntity = property(_get_ActionEntity, _set_ActionEntity)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionEntityIGeneric = property(_get_ActionEntityIGeneric, _set_ActionEntityIGeneric)
	'''
	Action entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	ActionRadius = property(_get_ActionRadius, None)
	'''
	Action radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	ActionSyncGeometry = property(_get_ActionSyncGeometry, _set_ActionSyncGeometry)
	'''
	Action entity sync geometry

	:type: bool
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseEntity = property(_get_BaseEntity, _set_BaseEntity)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseEntityIGeneric = property(_get_BaseEntityIGeneric, _set_BaseEntityIGeneric)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BaseNodeContact = property(_get_BaseNodeContact, _set_BaseNodeContact)
	'''
	Base node contact

	:type: bool
	'''
	BasePatchOption = property(_get_BasePatchOption, None)
	'''
	UV contact base patch option

	:type: recurdyn.ProcessNet.IContactUVPatchOption
	'''
	BasePressure = property(_get_BasePressure, _set_BasePressure)
	'''
	Flag to generate the contour data of pressure on base geometry

	:type: bool
	'''
	BaseUpDirection = property(_get_BaseUpDirection, _set_BaseUpDirection)
	'''
	Base up direction

	:type: bool
	'''
	BufferRadiusFactor = property(_get_BufferRadiusFactor, None)
	'''
	Buffer radius factor. Numerical integrator reduces the step size by the maximum stepsize factor if the action body come closer than buffer radius factor*action body radius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactPoints = property(_get_ContactPoints, _set_ContactPoints)
	'''
	The number of max contact points

	:type: int
	'''
	ContactProperty = property(_get_ContactProperty, None)
	'''
	Contact property

	:type: recurdyn.ProcessNet.IContactProperty
	'''
	ContactPropertyAdditional = property(_get_ContactPropertyAdditional, None)
	'''
	Additional contact property

	:type: recurdyn.ProcessNet.IContactPropertyAdditional
	'''
	EdgeContact = property(_get_EdgeContact, _set_EdgeContact)
	'''
	Edge contact

	:type: bool
	'''
	FaceContact = property(_get_FaceContact, _set_FaceContact)
	'''
	Face contact

	:type: bool
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MaxStepSizeFactor = property(_get_MaxStepSizeFactor, None)
	'''
	Maximum step size factor. The maximum step size is reduced by a factor of maximum step size factor.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	SmoothFaceContact = property(_get_SmoothFaceContact, _set_SmoothFaceContact)
	'''
	Smooth face contact

	:type: bool
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseCPM = property(_get_UseCPM, _set_UseCPM)
	'''
	Use CPM

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionEntity": _set_ActionEntity,
		"_set_ActionEntityIGeneric": _set_ActionEntityIGeneric,
		"_set_ActionSyncGeometry": _set_ActionSyncGeometry,
		"_set_Active": _set_Active,
		"_set_BaseEntity": _set_BaseEntity,
		"_set_BaseEntityIGeneric": _set_BaseEntityIGeneric,
		"_set_BaseNodeContact": _set_BaseNodeContact,
		"_set_BasePressure": _set_BasePressure,
		"_set_BaseUpDirection": _set_BaseUpDirection,
		"_set_Comment": _set_Comment,
		"_set_ContactPoints": _set_ContactPoints,
		"_set_EdgeContact": _set_EdgeContact,
		"_set_FaceContact": _set_FaceContact,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_SmoothFaceContact": _set_SmoothFaceContact,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseCPM": _set_UseCPM,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionEntity": (203, 2, (9, 0), (), "ActionEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionEntityIGeneric": (211, 2, (9, 0), (), "ActionEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"ActionRadius": (258, 2, (9, 0), (), "ActionRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ActionSyncGeometry": (257, 2, (11, 0), (), "ActionSyncGeometry", None),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseEntity": (202, 2, (9, 0), (), "BaseEntity", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseEntityIGeneric": (210, 2, (9, 0), (), "BaseEntityIGeneric", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BaseNodeContact": (259, 2, (11, 0), (), "BaseNodeContact", None),
		"BasePatchOption": (252, 2, (9, 0), (), "BasePatchOption", '{713E6396-E6D2-4DBF-8780-142AB7259685}'),
		"BasePressure": (262, 2, (11, 0), (), "BasePressure", None),
		"BaseUpDirection": (253, 2, (11, 0), (), "BaseUpDirection", None),
		"BufferRadiusFactor": (204, 2, (9, 0), (), "BufferRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactPoints": (254, 2, (19, 0), (), "ContactPoints", None),
		"ContactProperty": (206, 2, (9, 0), (), "ContactProperty", '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}'),
		"ContactPropertyAdditional": (251, 2, (9, 0), (), "ContactPropertyAdditional", '{C3560239-62ED-43FF-A94D-71801A2886E4}'),
		"EdgeContact": (255, 2, (11, 0), (), "EdgeContact", None),
		"FaceContact": (261, 2, (11, 0), (), "FaceContact", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (208, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (212, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (207, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MaxStepSizeFactor": (205, 2, (9, 0), (), "MaxStepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"SmoothFaceContact": (260, 2, (11, 0), (), "SmoothFaceContact", None),
		"TorqueDisplayColor": (209, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseCPM": (256, 2, (11, 0), (), "UseCPM", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionEntity": ((203, LCID, 4, 0),()),
		"ActionEntityIGeneric": ((211, LCID, 4, 0),()),
		"ActionSyncGeometry": ((257, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseEntity": ((202, LCID, 4, 0),()),
		"BaseEntityIGeneric": ((210, LCID, 4, 0),()),
		"BaseNodeContact": ((259, LCID, 4, 0),()),
		"BasePressure": ((262, LCID, 4, 0),()),
		"BaseUpDirection": ((253, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ContactPoints": ((254, LCID, 4, 0),()),
		"EdgeContact": ((255, LCID, 4, 0),()),
		"FaceContact": ((261, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((208, LCID, 4, 0),()),
		"ForceDisplayUse": ((212, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"SmoothFaceContact": ((260, LCID, 4, 0),()),
		"TorqueDisplayColor": ((209, LCID, 4, 0),()),
		"UseCPM": ((256, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContourObject(DispatchBaseClass):
	'''Contour Setting'''
	CLSID = IID('{F5AD2570-A7BF-4FEE-AC4E-68E977AE92EA}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Object(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "Object", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Show(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "Show", None))
	def _get_SourceData(self):
		return self._ApplyTypes_(*(53, 2, (8, 0), (), "SourceData", None))

	def _set_Show(self, value):
		if "Show" in self.__dict__: self.__dict__["Show"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	Object = property(_get_Object, None)
	'''
	Contour Object

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Show = property(_get_Show, _set_Show)
	'''
	Show Flag

	:type: bool
	'''
	SourceData = property(_get_SourceData, None)
	'''
	Source Data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Show": _set_Show,
	}
	_prop_map_get_ = {
		"Object": (51, 2, (9, 0), (), "Object", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Show": (52, 2, (11, 0), (), "Show", None),
		"SourceData": (53, 2, (8, 0), (), "SourceData", None),
	}
	_prop_map_put_ = {
		"Show": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IContourObjectCollection(DispatchBaseClass):
	'''IContourObjectCollection'''
	CLSID = IID('{F03BC9EC-27E6-4FA7-92F8-AAD66AC41633}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IContourObject
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{F5AD2570-A7BF-4FEE-AC4E-68E977AE92EA}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IContourObject
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{F5AD2570-A7BF-4FEE-AC4E-68E977AE92EA}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{F5AD2570-A7BF-4FEE-AC4E-68E977AE92EA}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{F5AD2570-A7BF-4FEE-AC4E-68E977AE92EA}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IContourSetting(DispatchBaseClass):
	'''Contour Setting'''
	CLSID = IID('{E32E43FB-3356-4D36-8A51-C22DE7E397BF}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CalculateMinMax(self):
		'''
		Calculate Min / Max Value
		'''
		return self._oleobj_.InvokeTypes(57, LCID, 1, (24, 0), (),)


	def _get_ColorType(self):
		return self._ApplyTypes_(*(60, 2, (3, 0), (), "ColorType", '{2E75ED6F-ECC0-4EDD-90F6-E5A3EDB5B6F6}'))
	def _get_Enable(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "Enable", None))
	def _get_LegendLocation(self):
		return self._ApplyTypes_(*(59, 2, (3, 0), (), "LegendLocation", '{40B0D145-E318-48E0-8114-B3400BA8B271}'))
	def _get_MaxColor(self):
		return self._ApplyTypes_(*(62, 2, (19, 0), (), "MaxColor", None))
	def _get_MaxValue(self):
		return self._ApplyTypes_(*(56, 2, (4, 0), (), "MaxValue", None))
	def _get_MinColor(self):
		return self._ApplyTypes_(*(61, 2, (19, 0), (), "MinColor", None))
	def _get_MinValue(self):
		return self._ApplyTypes_(*(55, 2, (4, 0), (), "MinValue", None))
	def _get_ObjectCollection(self):
		return self._ApplyTypes_(*(64, 2, (9, 0), (), "ObjectCollection", '{F03BC9EC-27E6-4FA7-92F8-AAD66AC41633}'))
	def _get_ShowLegend(self):
		return self._ApplyTypes_(*(58, 2, (11, 0), (), "ShowLegend", None))
	def _get_ShowMaxValue(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "ShowMaxValue", None))
	def _get_ShowMinValue(self):
		return self._ApplyTypes_(*(53, 2, (11, 0), (), "ShowMinValue", None))
	def _get_TextColor(self):
		return self._ApplyTypes_(*(63, 2, (19, 0), (), "TextColor", None))
	def _get_UseFrameMinMax(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UseFrameMinMax", None))

	def _set_ColorType(self, value):
		if "ColorType" in self.__dict__: self.__dict__["ColorType"] = value; return
		self._oleobj_.Invoke(*((60, LCID, 4, 0) + (value,) + ()))
	def _set_Enable(self, value):
		if "Enable" in self.__dict__: self.__dict__["Enable"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_LegendLocation(self, value):
		if "LegendLocation" in self.__dict__: self.__dict__["LegendLocation"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))
	def _set_MaxColor(self, value):
		if "MaxColor" in self.__dict__: self.__dict__["MaxColor"] = value; return
		self._oleobj_.Invoke(*((62, LCID, 4, 0) + (value,) + ()))
	def _set_MaxValue(self, value):
		if "MaxValue" in self.__dict__: self.__dict__["MaxValue"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_MinColor(self, value):
		if "MinColor" in self.__dict__: self.__dict__["MinColor"] = value; return
		self._oleobj_.Invoke(*((61, LCID, 4, 0) + (value,) + ()))
	def _set_MinValue(self, value):
		if "MinValue" in self.__dict__: self.__dict__["MinValue"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_ShowLegend(self, value):
		if "ShowLegend" in self.__dict__: self.__dict__["ShowLegend"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))
	def _set_ShowMaxValue(self, value):
		if "ShowMaxValue" in self.__dict__: self.__dict__["ShowMaxValue"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_ShowMinValue(self, value):
		if "ShowMinValue" in self.__dict__: self.__dict__["ShowMinValue"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_TextColor(self, value):
		if "TextColor" in self.__dict__: self.__dict__["TextColor"] = value; return
		self._oleobj_.Invoke(*((63, LCID, 4, 0) + (value,) + ()))
	def _set_UseFrameMinMax(self, value):
		if "UseFrameMinMax" in self.__dict__: self.__dict__["UseFrameMinMax"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	ColorType = property(_get_ColorType, _set_ColorType)
	'''
	Color Type

	:type: recurdyn.ProcessNet.ContourColorType
	'''
	Enable = property(_get_Enable, _set_Enable)
	'''
	Enable Contour Flag

	:type: bool
	'''
	LegendLocation = property(_get_LegendLocation, _set_LegendLocation)
	'''
	Contour Band Legend Location Type

	:type: recurdyn.ProcessNet.ContourBandLegendLocationType
	'''
	MaxColor = property(_get_MaxColor, _set_MaxColor)
	'''
	Max Color

	:type: int
	'''
	MaxValue = property(_get_MaxValue, _set_MaxValue)
	'''
	Max Value

	:type: float
	'''
	MinColor = property(_get_MinColor, _set_MinColor)
	'''
	Min Color

	:type: int
	'''
	MinValue = property(_get_MinValue, _set_MinValue)
	'''
	Min Value

	:type: float
	'''
	ObjectCollection = property(_get_ObjectCollection, None)
	'''
	Object Collection

	:type: recurdyn.ProcessNet.IContourObjectCollection
	'''
	ShowLegend = property(_get_ShowLegend, _set_ShowLegend)
	'''
	Show Legend

	:type: bool
	'''
	ShowMaxValue = property(_get_ShowMaxValue, _set_ShowMaxValue)
	'''
	Show Max Value

	:type: bool
	'''
	ShowMinValue = property(_get_ShowMinValue, _set_ShowMinValue)
	'''
	Show Min Value

	:type: bool
	'''
	TextColor = property(_get_TextColor, _set_TextColor)
	'''
	Text Color

	:type: int
	'''
	UseFrameMinMax = property(_get_UseFrameMinMax, _set_UseFrameMinMax)
	'''
	Use Frame Min / Max Value

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_ColorType": _set_ColorType,
		"_set_Enable": _set_Enable,
		"_set_LegendLocation": _set_LegendLocation,
		"_set_MaxColor": _set_MaxColor,
		"_set_MaxValue": _set_MaxValue,
		"_set_MinColor": _set_MinColor,
		"_set_MinValue": _set_MinValue,
		"_set_ShowLegend": _set_ShowLegend,
		"_set_ShowMaxValue": _set_ShowMaxValue,
		"_set_ShowMinValue": _set_ShowMinValue,
		"_set_TextColor": _set_TextColor,
		"_set_UseFrameMinMax": _set_UseFrameMinMax,
	}
	_prop_map_get_ = {
		"ColorType": (60, 2, (3, 0), (), "ColorType", '{2E75ED6F-ECC0-4EDD-90F6-E5A3EDB5B6F6}'),
		"Enable": (51, 2, (11, 0), (), "Enable", None),
		"LegendLocation": (59, 2, (3, 0), (), "LegendLocation", '{40B0D145-E318-48E0-8114-B3400BA8B271}'),
		"MaxColor": (62, 2, (19, 0), (), "MaxColor", None),
		"MaxValue": (56, 2, (4, 0), (), "MaxValue", None),
		"MinColor": (61, 2, (19, 0), (), "MinColor", None),
		"MinValue": (55, 2, (4, 0), (), "MinValue", None),
		"ObjectCollection": (64, 2, (9, 0), (), "ObjectCollection", '{F03BC9EC-27E6-4FA7-92F8-AAD66AC41633}'),
		"ShowLegend": (58, 2, (11, 0), (), "ShowLegend", None),
		"ShowMaxValue": (54, 2, (11, 0), (), "ShowMaxValue", None),
		"ShowMinValue": (53, 2, (11, 0), (), "ShowMinValue", None),
		"TextColor": (63, 2, (19, 0), (), "TextColor", None),
		"UseFrameMinMax": (52, 2, (11, 0), (), "UseFrameMinMax", None),
	}
	_prop_map_put_ = {
		"ColorType": ((60, LCID, 4, 0),()),
		"Enable": ((51, LCID, 4, 0),()),
		"LegendLocation": ((59, LCID, 4, 0),()),
		"MaxColor": ((62, LCID, 4, 0),()),
		"MaxValue": ((56, LCID, 4, 0),()),
		"MinColor": ((61, LCID, 4, 0),()),
		"MinValue": ((55, LCID, 4, 0),()),
		"ShowLegend": ((58, LCID, 4, 0),()),
		"ShowMaxValue": ((54, LCID, 4, 0),()),
		"ShowMinValue": ((53, LCID, 4, 0),()),
		"TextColor": ((63, LCID, 4, 0),()),
		"UseFrameMinMax": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ICustomView(DispatchBaseClass):
	'''Custom View'''
	CLSID = IID('{0F88BBEF-C77F-472D-9936-E84B77F9756A}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Export(self, strFile, OverWrite):
		'''
		Export method
		
		:param strFile: str
		:param OverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(60, LCID, 1, (24, 0), ((8, 1), (11, 1)),strFile
			, OverWrite)


	def GetViewCenterPoint(self):
		'''
		Get View Center Point
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(52, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetViewCenterPoint', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def GetViewNormalVector(self):
		'''
		Get View Normal Vector
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(54, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetViewNormalVector', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def GetViewUpVector(self):
		'''
		Get View Up Vector
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(56, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetViewUpVector', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def Import(self, strFile):
		'''
		Import method
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(59, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def SetViewCenterPoint(self, x, y, z):
		'''
		Set View Center Point
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),x
			, y, z)


	def SetViewFromMarker(self, pVal):
		'''
		Set CustomView From Marker
		
		:param pVal: IMarker
		'''
		return self._oleobj_.InvokeTypes(57, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def SetViewNormalVector(self, x, y, z):
		'''
		Set View Normal Vector
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(53, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),x
			, y, z)


	def SetViewUpVector(self, x, y, z):
		'''
		Set View Up Vector
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(55, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),x
			, y, z)


	def _get_ZoomScale(self):
		return self._ApplyTypes_(*(58, 2, (5, 0), (), "ZoomScale", None))

	def _set_ZoomScale(self, value):
		if "ZoomScale" in self.__dict__: self.__dict__["ZoomScale"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))

	ZoomScale = property(_get_ZoomScale, _set_ZoomScale)
	'''
	Zoom Scale

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_ZoomScale": _set_ZoomScale,
	}
	_prop_map_get_ = {
		"ZoomScale": (58, 2, (5, 0), (), "ZoomScale", None),
	}
	_prop_map_put_ = {
		"ZoomScale": ((58, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ICuttingPlane(DispatchBaseClass):
	'''Cutting Plane'''
	CLSID = IID('{47FC98DE-E7C5-46F0-B2C3-4FAB19AA38AB}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_ApplyToAllBodies(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "ApplyToAllBodies", None))
	def _get_CrossSectionLineColor(self):
		return self._ApplyTypes_(*(56, 2, (19, 0), (), "CrossSectionLineColor", None))
	def _get_NormalDirection(self):
		return self._ApplyTypes_(*(52, 2, (8197, 0), (), "NormalDirection", None))
	def _get_Origin(self):
		return self._ApplyTypes_(*(51, 2, (8197, 0), (), "Origin", None))
	def _get_UseCrossSectionLineColor(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseCrossSectionLineColor", None))
	def _get_UseCuttingPlane(self):
		return self._ApplyTypes_(*(53, 2, (11, 0), (), "UseCuttingPlane", None))

	def _set_ApplyToAllBodies(self, value):
		if "ApplyToAllBodies" in self.__dict__: self.__dict__["ApplyToAllBodies"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_CrossSectionLineColor(self, value):
		if "CrossSectionLineColor" in self.__dict__: self.__dict__["CrossSectionLineColor"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_NormalDirection(self, value):
		if "NormalDirection" in self.__dict__: self.__dict__["NormalDirection"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Origin(self, value):
		if "Origin" in self.__dict__: self.__dict__["Origin"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (variantValue,) + ()))
	def _set_UseCrossSectionLineColor(self, value):
		if "UseCrossSectionLineColor" in self.__dict__: self.__dict__["UseCrossSectionLineColor"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseCuttingPlane(self, value):
		if "UseCuttingPlane" in self.__dict__: self.__dict__["UseCuttingPlane"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))

	ApplyToAllBodies = property(_get_ApplyToAllBodies, _set_ApplyToAllBodies)
	'''
	Select to apply to all bodies

	:type: bool
	'''
	CrossSectionLineColor = property(_get_CrossSectionLineColor, _set_CrossSectionLineColor)
	'''
	Cross Section Line Color

	:type: int
	'''
	NormalDirection = property(_get_NormalDirection, _set_NormalDirection)
	'''
	Normal direction of cutting plane

	:type: list[float]
	'''
	Origin = property(_get_Origin, _set_Origin)
	'''
	Origin point of cutting plane

	:type: list[float]
	'''
	UseCrossSectionLineColor = property(_get_UseCrossSectionLineColor, _set_UseCrossSectionLineColor)
	'''
	Use Cross Section Line Color

	:type: bool
	'''
	UseCuttingPlane = property(_get_UseCuttingPlane, _set_UseCuttingPlane)
	'''
	On/Off Cutting plane

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_ApplyToAllBodies": _set_ApplyToAllBodies,
		"_set_CrossSectionLineColor": _set_CrossSectionLineColor,
		"_set_NormalDirection": _set_NormalDirection,
		"_set_Origin": _set_Origin,
		"_set_UseCrossSectionLineColor": _set_UseCrossSectionLineColor,
		"_set_UseCuttingPlane": _set_UseCuttingPlane,
	}
	_prop_map_get_ = {
		"ApplyToAllBodies": (57, 2, (11, 0), (), "ApplyToAllBodies", None),
		"CrossSectionLineColor": (56, 2, (19, 0), (), "CrossSectionLineColor", None),
		"NormalDirection": (52, 2, (8197, 0), (), "NormalDirection", None),
		"Origin": (51, 2, (8197, 0), (), "Origin", None),
		"UseCrossSectionLineColor": (55, 2, (11, 0), (), "UseCrossSectionLineColor", None),
		"UseCuttingPlane": (53, 2, (11, 0), (), "UseCuttingPlane", None),
	}
	_prop_map_put_ = {
		"ApplyToAllBodies": ((57, LCID, 4, 0),()),
		"CrossSectionLineColor": ((56, LCID, 4, 0),()),
		"NormalDirection": ((52, LCID, 4, 0),()),
		"Origin": ((51, LCID, 4, 0),()),
		"UseCrossSectionLineColor": ((55, LCID, 4, 0),()),
		"UseCuttingPlane": ((53, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IDOE(DispatchBaseClass):
	'''IDOE'''
	CLSID = IID('{0EECEDE2-6ADD-4945-9061-B3B8D138FC12}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_DesignVariable(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "DesignVariable", '{D0ADE6A0-6A94-4C03-B0F5-4B98D463252E}'))
	def _get_PerformanceIndex(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "PerformanceIndex", '{8792A78A-E960-4DD6-B668-178EFAE4A565}'))
	def _get_ResultSheet(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "ResultSheet", '{7460DFBF-6A85-45E4-933E-F880997ABD9E}'))
	def _get_Simulation(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "Simulation", '{71978C47-3750-43BF-8D42-6E9AA5F9CD84}'))

	DesignVariable = property(_get_DesignVariable, None)
	'''
	Design variable

	:type: recurdyn.ProcessNet.IDOEDesignVariable
	'''
	PerformanceIndex = property(_get_PerformanceIndex, None)
	'''
	Performance Index

	:type: recurdyn.ProcessNet.IDOEPerformanceIndex
	'''
	ResultSheet = property(_get_ResultSheet, None)
	'''
	Result sheet

	:type: recurdyn.ProcessNet.IDOEResultSheet
	'''
	Simulation = property(_get_Simulation, None)
	'''
	Simulation

	:type: recurdyn.ProcessNet.IDOESimulation
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"DesignVariable": (51, 2, (9, 0), (), "DesignVariable", '{D0ADE6A0-6A94-4C03-B0F5-4B98D463252E}'),
		"PerformanceIndex": (52, 2, (9, 0), (), "PerformanceIndex", '{8792A78A-E960-4DD6-B668-178EFAE4A565}'),
		"ResultSheet": (54, 2, (9, 0), (), "ResultSheet", '{7460DFBF-6A85-45E4-933E-F880997ABD9E}'),
		"Simulation": (53, 2, (9, 0), (), "Simulation", '{71978C47-3750-43BF-8D42-6E9AA5F9CD84}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IDOEDesignVariable(DispatchBaseClass):
	'''IDOEDesignVariable'''
	CLSID = IID('{D0ADE6A0-6A94-4C03-B0F5-4B98D463252E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddDOETableData(self, flag, pVal):
		'''
		Add data in DOE table
		
		:param flag: bool
		:param pVal: list[float]
		'''
		return self._oleobj_.InvokeTypes(64, LCID, 1, (24, 0), ((11, 1), (8197, 1)),flag
			, pVal)


	def ClearDOETable(self):
		'''
		Clear DOE Table
		'''
		return self._oleobj_.InvokeTypes(61, LCID, 1, (24, 0), (),)


	def CreateDOETable(self, Val):
		'''
		Create DOE Table
		
		:param Val: CreateDOETableType
		'''
		return self._oleobj_.InvokeTypes(60, LCID, 1, (24, 0), ((3, 1),),Val
			)


	def ExportDOEData(self, strFileName, OverWrite):
		'''
		Exporrt data from DOE Table
		
		:param strFileName: str
		:param OverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(63, LCID, 1, (24, 0), ((8, 1), (11, 1)),strFileName
			, OverWrite)


	def GetDOETableAllData(self):
		'''
		All data in DOE table
		
		:rtype: list[float]
		'''
		return self._ApplyTypes_(58, 1, (8197, 0), (), 'GetDOETableAllData', None,)


	def GetDOETableAllFlag(self):
		'''
		Get all flag in DOE table
		
		:rtype: list[bool]
		'''
		return self._ApplyTypes_(55, 1, (8203, 0), (), 'GetDOETableAllFlag', None,)


	def GetDOETableData(self, Index):
		'''
		Get data of specific index in DOE table
		
		:param Index: int
		:rtype: list[float]
		'''
		return self._ApplyTypes_(59, 1, (8197, 0), ((19, 1),), 'GetDOETableData', None,Index
			)


	def GetDOETableFlag(self, flag):
		'''
		Get index of Specific flags in DOE table
		
		:param flag: bool
		:rtype: list[int]
		'''
		return self._ApplyTypes_(57, 1, (8211, 0), ((11, 1),), 'GetDOETableFlag', None,flag
			)


	def ImportDOEData(self, strFileName):
		'''
		Import data to DOE Table
		
		:param strFileName: str
		'''
		return self._oleobj_.InvokeTypes(62, LCID, 1, (24, 0), ((8, 1),),strFileName
			)


	def InitializeDVList(self):
		'''
		Initialize DV List
		'''
		return self._oleobj_.InvokeTypes(65, LCID, 1, (24, 0), (),)


	def UpdateDOETableAllFlag(self, flag):
		'''
		Update all flag in DOE table
		
		:param flag: bool
		'''
		return self._oleobj_.InvokeTypes(54, LCID, 1, (24, 0), ((11, 1),),flag
			)


	def UpdateDOETableFlag(self, flag, pVal):
		'''
		Update specific flags in DOE table
		
		:param flag: bool
		:param pVal: list[int]
		'''
		return self._oleobj_.InvokeTypes(56, LCID, 1, (24, 0), ((11, 1), (8211, 1)),flag
			, pVal)


	def _get_DOEMethod(self):
		return self._ApplyTypes_(*(51, 2, (3, 0), (), "DOEMethod", '{871261E0-0D15-41DE-BCE5-9B8F2B6AE5C9}'))
	def _get_DesignVariableValueCollection(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "DesignVariableValueCollection", '{302A8078-C3FF-413F-AF69-2648ECD8CD2A}'))
	def _get_RequiredRuns(self):
		return self._ApplyTypes_(*(52, 2, (19, 0), (), "RequiredRuns", None))

	def _set_DOEMethod(self, value):
		if "DOEMethod" in self.__dict__: self.__dict__["DOEMethod"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_RequiredRuns(self, value):
		if "RequiredRuns" in self.__dict__: self.__dict__["RequiredRuns"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	DOEMethod = property(_get_DOEMethod, _set_DOEMethod)
	'''
	DOEMethod type

	:type: recurdyn.ProcessNet.GeneralDOEMethodType
	'''
	DesignVariableValueCollection = property(_get_DesignVariableValueCollection, None)
	'''
	Get the collection of Design VariableValue

	:type: recurdyn.ProcessNet.IDOEDesignVariableValueCollection
	'''
	RequiredRuns = property(_get_RequiredRuns, _set_RequiredRuns)
	'''
	Required runs

	:type: int
	'''

	_prop_map_set_function_ = {
		"_set_DOEMethod": _set_DOEMethod,
		"_set_RequiredRuns": _set_RequiredRuns,
	}
	_prop_map_get_ = {
		"DOEMethod": (51, 2, (3, 0), (), "DOEMethod", '{871261E0-0D15-41DE-BCE5-9B8F2B6AE5C9}'),
		"DesignVariableValueCollection": (53, 2, (9, 0), (), "DesignVariableValueCollection", '{302A8078-C3FF-413F-AF69-2648ECD8CD2A}'),
		"RequiredRuns": (52, 2, (19, 0), (), "RequiredRuns", None),
	}
	_prop_map_put_ = {
		"DOEMethod": ((51, LCID, 4, 0),()),
		"RequiredRuns": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IDOEDesignVariableValue(DispatchBaseClass):
	'''IDOEDesignVariableValue'''
	CLSID = IID('{08856E23-B2D6-4A74-99B5-9E53EE3392E2}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Update(self, LB, UB, numPoints):
		'''
		Create data list with LB, UB and Number of points
		
		:param LB: float
		:param UB: float
		:param numPoints: int
		'''
		return self._oleobj_.InvokeTypes(55, LCID, 1, (24, 0), ((5, 1), (5, 1), (19, 1)),LB
			, UB, numPoints)


	def _get_Data(self):
		return self._ApplyTypes_(*(56, 2, (8197, 0), (), "Data", None))
	def _get_DesignVariable(self):
		return self._ApplyTypes_(*(57, 2, (9, 0), (), "DesignVariable", '{44DA6D75-D10A-48E2-8077-5D9B9293842D}'))
	def _get_LB(self):
		return self._ApplyTypes_(*(52, 2, (5, 0), (), "LB", None))
	def _get_NumberOfPoints(self):
		return self._ApplyTypes_(*(54, 2, (19, 0), (), "NumberOfPoints", None))
	def _get_UB(self):
		return self._ApplyTypes_(*(53, 2, (5, 0), (), "UB", None))
	def _get_Use(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "Use", None))

	def _set_Data(self, value):
		if "Data" in self.__dict__: self.__dict__["Data"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Use(self, value):
		if "Use" in self.__dict__: self.__dict__["Use"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))

	Data = property(_get_Data, _set_Data)
	'''
	Data list

	:type: list[float]
	'''
	DesignVariable = property(_get_DesignVariable, None)
	'''
	Design variable

	:type: recurdyn.ProcessNet.IDesignVariable
	'''
	LB = property(_get_LB, None)
	'''
	Lower bound

	:type: float
	'''
	NumberOfPoints = property(_get_NumberOfPoints, None)
	'''
	Number of points

	:type: int
	'''
	UB = property(_get_UB, None)
	'''
	Upper bound

	:type: float
	'''
	Use = property(_get_Use, _set_Use)
	'''
	Use design variable

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Data": _set_Data,
		"_set_Use": _set_Use,
	}
	_prop_map_get_ = {
		"Data": (56, 2, (8197, 0), (), "Data", None),
		"DesignVariable": (57, 2, (9, 0), (), "DesignVariable", '{44DA6D75-D10A-48E2-8077-5D9B9293842D}'),
		"LB": (52, 2, (5, 0), (), "LB", None),
		"NumberOfPoints": (54, 2, (19, 0), (), "NumberOfPoints", None),
		"UB": (53, 2, (5, 0), (), "UB", None),
		"Use": (51, 2, (11, 0), (), "Use", None),
	}
	_prop_map_put_ = {
		"Data": ((56, LCID, 4, 0),()),
		"Use": ((51, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IDOEDesignVariableValueCollection(DispatchBaseClass):
	'''IDOEDesignVariableValueCollection'''
	CLSID = IID('{302A8078-C3FF-413F-AF69-2648ECD8CD2A}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IDOEDesignVariableValue
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{08856E23-B2D6-4A74-99B5-9E53EE3392E2}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IDOEDesignVariableValue
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{08856E23-B2D6-4A74-99B5-9E53EE3392E2}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{08856E23-B2D6-4A74-99B5-9E53EE3392E2}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{08856E23-B2D6-4A74-99B5-9E53EE3392E2}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IDOEPerformanceIndex(DispatchBaseClass):
	'''IDOEPerformanceIndex'''
	CLSID = IID('{8792A78A-E960-4DD6-B668-178EFAE4A565}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_EndTime(self):
		return self._ApplyTypes_(*(55, 2, (5, 0), (), "EndTime", None))
	def _get_PerformanceIndexValueCollection(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "PerformanceIndexValueCollection", '{6F40B1D9-17D6-40FA-BB27-A03900F7004F}'))
	def _get_StartTime(self):
		return self._ApplyTypes_(*(54, 2, (5, 0), (), "StartTime", None))
	def _get_UseSimulationEndtime(self):
		return self._ApplyTypes_(*(53, 2, (11, 0), (), "UseSimulationEndtime", None))
	def _get_UseTimePeriod(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UseTimePeriod", None))

	def _set_EndTime(self, value):
		if "EndTime" in self.__dict__: self.__dict__["EndTime"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_StartTime(self, value):
		if "StartTime" in self.__dict__: self.__dict__["StartTime"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_UseSimulationEndtime(self, value):
		if "UseSimulationEndtime" in self.__dict__: self.__dict__["UseSimulationEndtime"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UseTimePeriod(self, value):
		if "UseTimePeriod" in self.__dict__: self.__dict__["UseTimePeriod"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	EndTime = property(_get_EndTime, _set_EndTime)
	'''
	End time

	:type: float
	'''
	PerformanceIndexValueCollection = property(_get_PerformanceIndexValueCollection, None)
	'''
	Get the collection of Performance Index 

	:type: recurdyn.ProcessNet.IDOEPerformanceIndexValueCollection
	'''
	StartTime = property(_get_StartTime, _set_StartTime)
	'''
	Start time

	:type: float
	'''
	UseSimulationEndtime = property(_get_UseSimulationEndtime, _set_UseSimulationEndtime)
	'''
	Use simulation end time

	:type: bool
	'''
	UseTimePeriod = property(_get_UseTimePeriod, _set_UseTimePeriod)
	'''
	Use time period

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_EndTime": _set_EndTime,
		"_set_StartTime": _set_StartTime,
		"_set_UseSimulationEndtime": _set_UseSimulationEndtime,
		"_set_UseTimePeriod": _set_UseTimePeriod,
	}
	_prop_map_get_ = {
		"EndTime": (55, 2, (5, 0), (), "EndTime", None),
		"PerformanceIndexValueCollection": (51, 2, (9, 0), (), "PerformanceIndexValueCollection", '{6F40B1D9-17D6-40FA-BB27-A03900F7004F}'),
		"StartTime": (54, 2, (5, 0), (), "StartTime", None),
		"UseSimulationEndtime": (53, 2, (11, 0), (), "UseSimulationEndtime", None),
		"UseTimePeriod": (52, 2, (11, 0), (), "UseTimePeriod", None),
	}
	_prop_map_put_ = {
		"EndTime": ((55, LCID, 4, 0),()),
		"StartTime": ((54, LCID, 4, 0),()),
		"UseSimulationEndtime": ((53, LCID, 4, 0),()),
		"UseTimePeriod": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IDOEPerformanceIndexValue(DispatchBaseClass):
	'''IDOEPerformanceIndexValue'''
	CLSID = IID('{5F8A9E07-44ED-44D4-944C-3775C142375E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Data(self):
		return self._ApplyTypes_(*(52, 2, (8197, 0), (), "Data", None))
	def _get_PerformanceIndex(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "PerformanceIndex", '{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}'))

	Data = property(_get_Data, None)
	'''
	Data list

	:type: list[float]
	'''
	PerformanceIndex = property(_get_PerformanceIndex, None)
	'''
	Performance Index

	:type: recurdyn.ProcessNet.IPerformanceIndex
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Data": (52, 2, (8197, 0), (), "Data", None),
		"PerformanceIndex": (51, 2, (9, 0), (), "PerformanceIndex", '{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IDOEPerformanceIndexValueCollection(DispatchBaseClass):
	'''IDOEPerformanceIndexValueCollection'''
	CLSID = IID('{6F40B1D9-17D6-40FA-BB27-A03900F7004F}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IDOEPerformanceIndexValue
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{5F8A9E07-44ED-44D4-944C-3775C142375E}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IDOEPerformanceIndexValue
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{5F8A9E07-44ED-44D4-944C-3775C142375E}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{5F8A9E07-44ED-44D4-944C-3775C142375E}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{5F8A9E07-44ED-44D4-944C-3775C142375E}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IDOEResultSheet(DispatchBaseClass):
	'''IDOEResultSheet'''
	CLSID = IID('{7460DFBF-6A85-45E4-933E-F880997ABD9E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Clear(self):
		'''
		Clear result data
		'''
		return self._oleobj_.InvokeTypes(54, LCID, 1, (24, 0), (),)


	def CreateNewModel(self, trialNo, Name):
		'''
		Create new model
		
		:param trialNo: int
		:param Name: str
		'''
		return self._oleobj_.InvokeTypes(58, LCID, 1, (24, 0), ((3, 1), (8, 1)),trialNo
			, Name)


	def Export(self, Name, Type):
		'''
		Export result data
		
		:param Name: str
		:param Type: ResultExportType
		'''
		return self._oleobj_.InvokeTypes(56, LCID, 1, (24, 0), ((8, 1), (3, 1)),Name
			, Type)


	def GetDVPIPlotData(self, dv, pi):
		'''
		DV-PI plot data
		
		:param dv: int
		:param pi: int
		:rtype: list[float]
		'''
		return self._ApplyTypes_(59, 1, (8197, 0), ((3, 1), (3, 1)), 'GetDVPIPlotData', None,dv
			, pi)


	def GetDVs(self, indexDV):
		'''
		DOE result data of DVs
		
		:param indexDV: int
		:rtype: list[float]
		'''
		return self._ApplyTypes_(52, 1, (8197, 0), ((3, 1),), 'GetDVs', None,indexDV
			)


	def GetPIs(self, indexPI):
		'''
		DOE result data of PIs
		
		:param indexPI: int
		:rtype: list[float]
		'''
		return self._ApplyTypes_(53, 1, (8197, 0), ((3, 1),), 'GetPIs', None,indexPI
			)


	def Import(self, Name):
		'''
		Import result data
		
		:param Name: str
		'''
		return self._oleobj_.InvokeTypes(55, LCID, 1, (24, 0), ((8, 1),),Name
			)


	def UpdateCurrentModel(self, trialNo):
		'''
		Update current model
		
		:param trialNo: int
		'''
		return self._oleobj_.InvokeTypes(57, LCID, 1, (24, 0), ((3, 1),),trialNo
			)


	def _get_SuccessFlag(self):
		return self._ApplyTypes_(*(51, 2, (8203, 0), (), "SuccessFlag", None))

	SuccessFlag = property(_get_SuccessFlag, None)
	'''
	Success flag (success/failure)

	:type: list[bool]
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"SuccessFlag": (51, 2, (8203, 0), (), "SuccessFlag", None),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IDOESimulation(DispatchBaseClass):
	'''IDOESimulation'''
	CLSID = IID('{71978C47-3750-43BF-8D42-6E9AA5F9CD84}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def ExportFiles(self):
		'''
		Export rmd and rss files
		'''
		return self._oleobj_.InvokeTypes(65, LCID, 1, (24, 0), (),)


	def GenerateResultFile(self, Name):
		'''
		Generate result file with current DVs
		
		:param Name: str
		'''
		return self._oleobj_.InvokeTypes(66, LCID, 1, (24, 0), ((8, 1),),Name
			)


	def Simulation(self):
		'''
		Start simulation DOE
		'''
		return self._oleobj_.InvokeTypes(64, LCID, 1, (24, 0), (),)


	def _get_AutoCoreNumber(self):
		return self._ApplyTypes_(*(67, 2, (11, 0), (), "AutoCoreNumber", None))
	def _get_BaseDirectory(self):
		return self._ApplyTypes_(*(61, 2, (8, 0), (), "BaseDirectory", None))
	def _get_BaseName(self):
		return self._ApplyTypes_(*(62, 2, (8, 0), (), "BaseName", None))
	def _get_CoreNumber(self):
		return self._ApplyTypes_(*(68, 2, (3, 0), (), "CoreNumber", '{A2597840-D840-462B-B769-AB88AD567C47}'))
	def _get_NumberOfTrials(self):
		return self._ApplyTypes_(*(63, 2, (19, 0), (), "NumberOfTrials", None))
	def _get_ResultFileName(self):
		return self._ApplyTypes_(*(60, 2, (8, 0), (), "ResultFileName", None))
	def _get_ReturnValue(self):
		return self._ApplyTypes_(*(56, 2, (5, 0), (), "ReturnValue", None))
	def _get_SaveResult(self):
		return self._ApplyTypes_(*(53, 2, (8, 0), (), "SaveResult", None))
	def _get_SimulationType(self):
		return self._ApplyTypes_(*(51, 2, (3, 0), (), "SimulationType", '{E482DDA9-D891-4949-BA2B-3AF8465C4CEC}'))
	def _get_UseClearDataInResultSheet(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseClearDataInResultSheet", None))
	def _get_UseClearResultFileData(self):
		return self._ApplyTypes_(*(58, 2, (11, 0), (), "UseClearResultFileData", None))
	def _get_UseCreateResultFile(self):
		return self._ApplyTypes_(*(59, 2, (11, 0), (), "UseCreateResultFile", None))
	def _get_UsePassToTheNextTrialOfDOE(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UsePassToTheNextTrialOfDOE", None))
	def _get_UseSaveModelInCase(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "UseSaveModelInCase", None))
	def _get_UseSaveResult(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UseSaveResult", None))

	def _set_AutoCoreNumber(self, value):
		if "AutoCoreNumber" in self.__dict__: self.__dict__["AutoCoreNumber"] = value; return
		self._oleobj_.Invoke(*((67, LCID, 4, 0) + (value,) + ()))
	def _set_BaseDirectory(self, value):
		if "BaseDirectory" in self.__dict__: self.__dict__["BaseDirectory"] = value; return
		self._oleobj_.Invoke(*((61, LCID, 4, 0) + (value,) + ()))
	def _set_BaseName(self, value):
		if "BaseName" in self.__dict__: self.__dict__["BaseName"] = value; return
		self._oleobj_.Invoke(*((62, LCID, 4, 0) + (value,) + ()))
	def _set_CoreNumber(self, value):
		if "CoreNumber" in self.__dict__: self.__dict__["CoreNumber"] = value; return
		self._oleobj_.Invoke(*((68, LCID, 4, 0) + (value,) + ()))
	def _set_ResultFileName(self, value):
		if "ResultFileName" in self.__dict__: self.__dict__["ResultFileName"] = value; return
		self._oleobj_.Invoke(*((60, LCID, 4, 0) + (value,) + ()))
	def _set_ReturnValue(self, value):
		if "ReturnValue" in self.__dict__: self.__dict__["ReturnValue"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_SaveResult(self, value):
		if "SaveResult" in self.__dict__: self.__dict__["SaveResult"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_SimulationType(self, value):
		if "SimulationType" in self.__dict__: self.__dict__["SimulationType"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_UseClearDataInResultSheet(self, value):
		if "UseClearDataInResultSheet" in self.__dict__: self.__dict__["UseClearDataInResultSheet"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_UseClearResultFileData(self, value):
		if "UseClearResultFileData" in self.__dict__: self.__dict__["UseClearResultFileData"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))
	def _set_UseCreateResultFile(self, value):
		if "UseCreateResultFile" in self.__dict__: self.__dict__["UseCreateResultFile"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))
	def _set_UsePassToTheNextTrialOfDOE(self, value):
		if "UsePassToTheNextTrialOfDOE" in self.__dict__: self.__dict__["UsePassToTheNextTrialOfDOE"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseSaveModelInCase(self, value):
		if "UseSaveModelInCase" in self.__dict__: self.__dict__["UseSaveModelInCase"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_UseSaveResult(self, value):
		if "UseSaveResult" in self.__dict__: self.__dict__["UseSaveResult"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	AutoCoreNumber = property(_get_AutoCoreNumber, _set_AutoCoreNumber)
	'''
	Automatically setting the number of core for exporting rmd

	:type: bool
	'''
	BaseDirectory = property(_get_BaseDirectory, _set_BaseDirectory)
	'''
	Base directory

	:type: str
	'''
	BaseName = property(_get_BaseName, _set_BaseName)
	'''
	Base name

	:type: str
	'''
	CoreNumber = property(_get_CoreNumber, _set_CoreNumber)
	'''
	Number of core for exporting rmd

	:type: recurdyn.ProcessNet.CoreType
	'''
	NumberOfTrials = property(_get_NumberOfTrials, None)
	'''
	Number of trials

	:type: int
	'''
	ResultFileName = property(_get_ResultFileName, _set_ResultFileName)
	'''
	Result file name

	:type: str
	'''
	ReturnValue = property(_get_ReturnValue, _set_ReturnValue)
	'''
	Return value

	:type: float
	'''
	SaveResult = property(_get_SaveResult, _set_SaveResult)
	'''
	Save results

	:type: str
	'''
	SimulationType = property(_get_SimulationType, _set_SimulationType)
	'''
	Simulation type

	:type: recurdyn.ProcessNet.DesignStudyAnalysisMode
	'''
	UseClearDataInResultSheet = property(_get_UseClearDataInResultSheet, _set_UseClearDataInResultSheet)
	'''
	Clear data in result sheet

	:type: bool
	'''
	UseClearResultFileData = property(_get_UseClearResultFileData, _set_UseClearResultFileData)
	'''
	Clear result file data

	:type: bool
	'''
	UseCreateResultFile = property(_get_UseCreateResultFile, _set_UseCreateResultFile)
	'''
	Create result file

	:type: bool
	'''
	UsePassToTheNextTrialOfDOE = property(_get_UsePassToTheNextTrialOfDOE, _set_UsePassToTheNextTrialOfDOE)
	'''
	When simulation fails, Pass to the next trial of DOE

	:type: bool
	'''
	UseSaveModelInCase = property(_get_UseSaveModelInCase, _set_UseSaveModelInCase)
	'''
	Use save model in case

	:type: bool
	'''
	UseSaveResult = property(_get_UseSaveResult, _set_UseSaveResult)
	'''
	Use save results

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_AutoCoreNumber": _set_AutoCoreNumber,
		"_set_BaseDirectory": _set_BaseDirectory,
		"_set_BaseName": _set_BaseName,
		"_set_CoreNumber": _set_CoreNumber,
		"_set_ResultFileName": _set_ResultFileName,
		"_set_ReturnValue": _set_ReturnValue,
		"_set_SaveResult": _set_SaveResult,
		"_set_SimulationType": _set_SimulationType,
		"_set_UseClearDataInResultSheet": _set_UseClearDataInResultSheet,
		"_set_UseClearResultFileData": _set_UseClearResultFileData,
		"_set_UseCreateResultFile": _set_UseCreateResultFile,
		"_set_UsePassToTheNextTrialOfDOE": _set_UsePassToTheNextTrialOfDOE,
		"_set_UseSaveModelInCase": _set_UseSaveModelInCase,
		"_set_UseSaveResult": _set_UseSaveResult,
	}
	_prop_map_get_ = {
		"AutoCoreNumber": (67, 2, (11, 0), (), "AutoCoreNumber", None),
		"BaseDirectory": (61, 2, (8, 0), (), "BaseDirectory", None),
		"BaseName": (62, 2, (8, 0), (), "BaseName", None),
		"CoreNumber": (68, 2, (3, 0), (), "CoreNumber", '{A2597840-D840-462B-B769-AB88AD567C47}'),
		"NumberOfTrials": (63, 2, (19, 0), (), "NumberOfTrials", None),
		"ResultFileName": (60, 2, (8, 0), (), "ResultFileName", None),
		"ReturnValue": (56, 2, (5, 0), (), "ReturnValue", None),
		"SaveResult": (53, 2, (8, 0), (), "SaveResult", None),
		"SimulationType": (51, 2, (3, 0), (), "SimulationType", '{E482DDA9-D891-4949-BA2B-3AF8465C4CEC}'),
		"UseClearDataInResultSheet": (57, 2, (11, 0), (), "UseClearDataInResultSheet", None),
		"UseClearResultFileData": (58, 2, (11, 0), (), "UseClearResultFileData", None),
		"UseCreateResultFile": (59, 2, (11, 0), (), "UseCreateResultFile", None),
		"UsePassToTheNextTrialOfDOE": (55, 2, (11, 0), (), "UsePassToTheNextTrialOfDOE", None),
		"UseSaveModelInCase": (54, 2, (11, 0), (), "UseSaveModelInCase", None),
		"UseSaveResult": (52, 2, (11, 0), (), "UseSaveResult", None),
	}
	_prop_map_put_ = {
		"AutoCoreNumber": ((67, LCID, 4, 0),()),
		"BaseDirectory": ((61, LCID, 4, 0),()),
		"BaseName": ((62, LCID, 4, 0),()),
		"CoreNumber": ((68, LCID, 4, 0),()),
		"ResultFileName": ((60, LCID, 4, 0),()),
		"ReturnValue": ((56, LCID, 4, 0),()),
		"SaveResult": ((53, LCID, 4, 0),()),
		"SimulationType": ((51, LCID, 4, 0),()),
		"UseClearDataInResultSheet": ((57, LCID, 4, 0),()),
		"UseClearResultFileData": ((58, LCID, 4, 0),()),
		"UseCreateResultFile": ((59, LCID, 4, 0),()),
		"UsePassToTheNextTrialOfDOE": ((55, LCID, 4, 0),()),
		"UseSaveModelInCase": ((54, LCID, 4, 0),()),
		"UseSaveResult": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IDesignStudy(DispatchBaseClass):
	'''IDesignStudy'''
	CLSID = IID('{A02C4C84-917B-448D-9137-1019967E7138}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddDesignVariable(self, pDesignVariable):
		'''
		Add a design variable
		
		:param pDesignVariable: IDesignVariable
		:rtype: recurdyn.ProcessNet.IDesignStudyDV
		'''
		ret = self._oleobj_.InvokeTypes(51, LCID, 1, (9, 0), ((9, 1),),pDesignVariable
			)
		if ret is not None:
			ret = Dispatch(ret, 'AddDesignVariable', '{818D411D-45CE-4542-8D89-4D96D21430C8}')
		return ret

	def AddPerformanceIndex(self, pPerformanceIndex):
		'''
		Add a performance index
		
		:param pPerformanceIndex: IPerformanceIndex
		:rtype: recurdyn.ProcessNet.IDesignStudyPI
		'''
		ret = self._oleobj_.InvokeTypes(52, LCID, 1, (9, 0), ((9, 1),),pPerformanceIndex
			)
		if ret is not None:
			ret = Dispatch(ret, 'AddPerformanceIndex', '{ED61CDBA-7239-48AD-B844-7A4DE43F7811}')
		return ret

	def CalculateNumberOfTrials(self):
		'''
		Calculate number of trials
		'''
		return self._oleobj_.InvokeTypes(76, LCID, 1, (24, 0), (),)


	def CheckNumberOfLevels(self):
		'''
		Check number of levels
		
		:rtype: bool
		'''
		return self._oleobj_.InvokeTypes(79, LCID, 1, (11, 0), (),)


	def ClearDesignVariable(self):
		'''
		Clear design variables
		'''
		return self._oleobj_.InvokeTypes(55, LCID, 1, (24, 0), (),)


	def ClearPerformanceIndex(self):
		'''
		Clear performance indexes
		'''
		return self._oleobj_.InvokeTypes(56, LCID, 1, (24, 0), (),)


	def DeleteDesignVariable(self, pDesignVariable):
		'''
		Delete a design variable
		
		:param pDesignVariable: IDesignStudyDV
		'''
		return self._oleobj_.InvokeTypes(53, LCID, 1, (24, 0), ((9, 1),),pDesignVariable
			)


	def DeletePerformanceIndex(self, pPerformanceIndex):
		'''
		Delete a performance index
		
		:param pPerformanceIndex: IDesignStudyPI
		'''
		return self._oleobj_.InvokeTypes(54, LCID, 1, (24, 0), ((9, 1),),pPerformanceIndex
			)


	def ExportDesignMatrix(self, strFile, OverWrite):
		'''
		Export design matrix
		
		:param strFile: str
		:param OverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(75, LCID, 1, (24, 0), ((8, 1), (11, 1)),strFile
			, OverWrite)


	def ExportResult(self, strFile, OverWrite):
		'''
		Export result
		
		:param strFile: str
		:param OverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(78, LCID, 1, (24, 0), ((8, 1), (11, 1)),strFile
			, OverWrite)


	def ImportDesignMatrix(self, strFile):
		'''
		Import design matrix
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(74, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def ModifyDesignVariable(self, pDesignStudyDV, pDesignVariable):
		'''
		Modify a design variable
		
		:param pDesignStudyDV: IDesignStudyDV
		:param pDesignVariable: IDesignVariable
		'''
		return self._oleobj_.InvokeTypes(82, LCID, 1, (24, 0), ((9, 1), (9, 1)),pDesignStudyDV
			, pDesignVariable)


	def ModifyPerformanceIndex(self, pDesignStudyPI, pPerformanceIndex):
		'''
		Modify a performance index
		
		:param pDesignStudyPI: IDesignStudyPI
		:param pPerformanceIndex: IPerformanceIndex
		'''
		return self._oleobj_.InvokeTypes(83, LCID, 1, (24, 0), ((9, 1), (9, 1)),pDesignStudyPI
			, pPerformanceIndex)


	def MultiVariate(self, pDesignVariable, pPerformanceIndex):
		'''
		Multi variate
		
		:param pDesignVariable: IDesignStudyDV
		:param pPerformanceIndex: IDesignStudyPI
		:rtype: list[object]
		'''
		return self._ApplyTypes_(73, 1, (8204, 0), ((9, 1), (9, 1)), 'MultiVariate', None,pDesignVariable
			, pPerformanceIndex)


	def UpdateDV(self, Index):
		'''
		Update DV
		
		:param Index: int
		'''
		return self._oleobj_.InvokeTypes(77, LCID, 1, (24, 0), ((19, 1),),Index
			)


	def WhatIfStudyDesignIndex(self):
		'''
		Design index of WhatIfStudy
		
		:rtype: list[float]
		'''
		return self._ApplyTypes_(71, 1, (8197, 0), (), 'WhatIfStudyDesignIndex', None,)


	def WhatIfStudyMultiVariate(self, pDesignVariable):
		'''
		Multi variate of WhatIfStudy
		
		:param pDesignVariable: IDesignStudyDV
		:rtype: list[object]
		'''
		return self._ApplyTypes_(72, 1, (8204, 0), ((9, 1),), 'WhatIfStudyMultiVariate', None,pDesignVariable
			)


	def _get_DesignVariableCollection(self):
		return self._ApplyTypes_(*(57, 2, (9, 0), (), "DesignVariableCollection", '{52942D12-4250-4501-9149-1840338D9948}'))
	def _get_EndTime(self):
		return self._ApplyTypes_(*(62, 2, (5, 0), (), "EndTime", None))
	def _get_ExperimentType(self):
		return self._ApplyTypes_(*(64, 2, (3, 0), (), "ExperimentType", '{DD204434-D2B3-4693-9A7A-EAC5970666A1}'))
	def _get_NumberOfLevels(self):
		return self._ApplyTypes_(*(63, 2, (19, 0), (), "NumberOfLevels", None))
	def _get_NumberOfTrials(self):
		return self._ApplyTypes_(*(66, 2, (19, 0), (), "NumberOfTrials", None))
	def _get_PerformanceIndexCollection(self):
		return self._ApplyTypes_(*(58, 2, (9, 0), (), "PerformanceIndexCollection", '{B93EF2CA-4779-42DC-9EFE-1B50F427E2E7}'))
	def _get_ReturnValue(self):
		return self._ApplyTypes_(*(81, 2, (5, 0), (), "ReturnValue", None))
	def _get_SaveResult(self):
		return self._ApplyTypes_(*(69, 2, (8, 0), (), "SaveResult", None))
	def _get_SimulationType(self):
		return self._ApplyTypes_(*(67, 2, (3, 0), (), "SimulationType", '{E482DDA9-D891-4949-BA2B-3AF8465C4CEC}'))
	def _get_StartTime(self):
		return self._ApplyTypes_(*(61, 2, (5, 0), (), "StartTime", None))
	def _get_UsePassToTheNextTrialOfDOE(self):
		return self._ApplyTypes_(*(80, 2, (11, 0), (), "UsePassToTheNextTrialOfDOE", None))
	def _get_UseSaveModelInCase(self):
		return self._ApplyTypes_(*(70, 2, (11, 0), (), "UseSaveModelInCase", None))
	def _get_UseSaveResult(self):
		return self._ApplyTypes_(*(68, 2, (11, 0), (), "UseSaveResult", None))
	def _get_UseSimulationEndtime(self):
		return self._ApplyTypes_(*(60, 2, (11, 0), (), "UseSimulationEndtime", None))
	def _get_UseTimePeriod(self):
		return self._ApplyTypes_(*(59, 2, (11, 0), (), "UseTimePeriod", None))

	def _set_EndTime(self, value):
		if "EndTime" in self.__dict__: self.__dict__["EndTime"] = value; return
		self._oleobj_.Invoke(*((62, LCID, 4, 0) + (value,) + ()))
	def _set_ExperimentType(self, value):
		if "ExperimentType" in self.__dict__: self.__dict__["ExperimentType"] = value; return
		self._oleobj_.Invoke(*((64, LCID, 4, 0) + (value,) + ()))
	def _set_NumberOfLevels(self, value):
		if "NumberOfLevels" in self.__dict__: self.__dict__["NumberOfLevels"] = value; return
		self._oleobj_.Invoke(*((63, LCID, 4, 0) + (value,) + ()))
	def _set_ReturnValue(self, value):
		if "ReturnValue" in self.__dict__: self.__dict__["ReturnValue"] = value; return
		self._oleobj_.Invoke(*((81, LCID, 4, 0) + (value,) + ()))
	def _set_SaveResult(self, value):
		if "SaveResult" in self.__dict__: self.__dict__["SaveResult"] = value; return
		self._oleobj_.Invoke(*((69, LCID, 4, 0) + (value,) + ()))
	def _set_SimulationType(self, value):
		if "SimulationType" in self.__dict__: self.__dict__["SimulationType"] = value; return
		self._oleobj_.Invoke(*((67, LCID, 4, 0) + (value,) + ()))
	def _set_StartTime(self, value):
		if "StartTime" in self.__dict__: self.__dict__["StartTime"] = value; return
		self._oleobj_.Invoke(*((61, LCID, 4, 0) + (value,) + ()))
	def _set_UsePassToTheNextTrialOfDOE(self, value):
		if "UsePassToTheNextTrialOfDOE" in self.__dict__: self.__dict__["UsePassToTheNextTrialOfDOE"] = value; return
		self._oleobj_.Invoke(*((80, LCID, 4, 0) + (value,) + ()))
	def _set_UseSaveModelInCase(self, value):
		if "UseSaveModelInCase" in self.__dict__: self.__dict__["UseSaveModelInCase"] = value; return
		self._oleobj_.Invoke(*((70, LCID, 4, 0) + (value,) + ()))
	def _set_UseSaveResult(self, value):
		if "UseSaveResult" in self.__dict__: self.__dict__["UseSaveResult"] = value; return
		self._oleobj_.Invoke(*((68, LCID, 4, 0) + (value,) + ()))
	def _set_UseSimulationEndtime(self, value):
		if "UseSimulationEndtime" in self.__dict__: self.__dict__["UseSimulationEndtime"] = value; return
		self._oleobj_.Invoke(*((60, LCID, 4, 0) + (value,) + ()))
	def _set_UseTimePeriod(self, value):
		if "UseTimePeriod" in self.__dict__: self.__dict__["UseTimePeriod"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))

	DesignVariableCollection = property(_get_DesignVariableCollection, None)
	'''
	Design variable collection

	:type: recurdyn.ProcessNet.IDesignStudyDVCollection
	'''
	EndTime = property(_get_EndTime, _set_EndTime)
	'''
	End time

	:type: float
	'''
	ExperimentType = property(_get_ExperimentType, _set_ExperimentType)
	'''
	Experiment type

	:type: recurdyn.ProcessNet.DesignStudyExperimentType
	'''
	NumberOfLevels = property(_get_NumberOfLevels, _set_NumberOfLevels)
	'''
	Number of levels

	:type: int
	'''
	NumberOfTrials = property(_get_NumberOfTrials, None)
	'''
	Number of trials

	:type: int
	'''
	PerformanceIndexCollection = property(_get_PerformanceIndexCollection, None)
	'''
	Performance index collection

	:type: recurdyn.ProcessNet.IDesignStudyPICollection
	'''
	ReturnValue = property(_get_ReturnValue, _set_ReturnValue)
	'''
	Return value

	:type: float
	'''
	SaveResult = property(_get_SaveResult, _set_SaveResult)
	'''
	Save results

	:type: str
	'''
	SimulationType = property(_get_SimulationType, _set_SimulationType)
	'''
	Simulation type

	:type: recurdyn.ProcessNet.DesignStudyAnalysisMode
	'''
	StartTime = property(_get_StartTime, _set_StartTime)
	'''
	Start time

	:type: float
	'''
	UsePassToTheNextTrialOfDOE = property(_get_UsePassToTheNextTrialOfDOE, _set_UsePassToTheNextTrialOfDOE)
	'''
	When simulation fails, Pass to the next trial of DOE

	:type: bool
	'''
	UseSaveModelInCase = property(_get_UseSaveModelInCase, _set_UseSaveModelInCase)
	'''
	Use save model in case

	:type: bool
	'''
	UseSaveResult = property(_get_UseSaveResult, _set_UseSaveResult)
	'''
	Use save results

	:type: bool
	'''
	UseSimulationEndtime = property(_get_UseSimulationEndtime, _set_UseSimulationEndtime)
	'''
	Use simulation end time

	:type: bool
	'''
	UseTimePeriod = property(_get_UseTimePeriod, _set_UseTimePeriod)
	'''
	Use time period

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_EndTime": _set_EndTime,
		"_set_ExperimentType": _set_ExperimentType,
		"_set_NumberOfLevels": _set_NumberOfLevels,
		"_set_ReturnValue": _set_ReturnValue,
		"_set_SaveResult": _set_SaveResult,
		"_set_SimulationType": _set_SimulationType,
		"_set_StartTime": _set_StartTime,
		"_set_UsePassToTheNextTrialOfDOE": _set_UsePassToTheNextTrialOfDOE,
		"_set_UseSaveModelInCase": _set_UseSaveModelInCase,
		"_set_UseSaveResult": _set_UseSaveResult,
		"_set_UseSimulationEndtime": _set_UseSimulationEndtime,
		"_set_UseTimePeriod": _set_UseTimePeriod,
	}
	_prop_map_get_ = {
		"DesignVariableCollection": (57, 2, (9, 0), (), "DesignVariableCollection", '{52942D12-4250-4501-9149-1840338D9948}'),
		"EndTime": (62, 2, (5, 0), (), "EndTime", None),
		"ExperimentType": (64, 2, (3, 0), (), "ExperimentType", '{DD204434-D2B3-4693-9A7A-EAC5970666A1}'),
		"NumberOfLevels": (63, 2, (19, 0), (), "NumberOfLevels", None),
		"NumberOfTrials": (66, 2, (19, 0), (), "NumberOfTrials", None),
		"PerformanceIndexCollection": (58, 2, (9, 0), (), "PerformanceIndexCollection", '{B93EF2CA-4779-42DC-9EFE-1B50F427E2E7}'),
		"ReturnValue": (81, 2, (5, 0), (), "ReturnValue", None),
		"SaveResult": (69, 2, (8, 0), (), "SaveResult", None),
		"SimulationType": (67, 2, (3, 0), (), "SimulationType", '{E482DDA9-D891-4949-BA2B-3AF8465C4CEC}'),
		"StartTime": (61, 2, (5, 0), (), "StartTime", None),
		"UsePassToTheNextTrialOfDOE": (80, 2, (11, 0), (), "UsePassToTheNextTrialOfDOE", None),
		"UseSaveModelInCase": (70, 2, (11, 0), (), "UseSaveModelInCase", None),
		"UseSaveResult": (68, 2, (11, 0), (), "UseSaveResult", None),
		"UseSimulationEndtime": (60, 2, (11, 0), (), "UseSimulationEndtime", None),
		"UseTimePeriod": (59, 2, (11, 0), (), "UseTimePeriod", None),
	}
	_prop_map_put_ = {
		"EndTime": ((62, LCID, 4, 0),()),
		"ExperimentType": ((64, LCID, 4, 0),()),
		"NumberOfLevels": ((63, LCID, 4, 0),()),
		"ReturnValue": ((81, LCID, 4, 0),()),
		"SaveResult": ((69, LCID, 4, 0),()),
		"SimulationType": ((67, LCID, 4, 0),()),
		"StartTime": ((61, LCID, 4, 0),()),
		"UsePassToTheNextTrialOfDOE": ((80, LCID, 4, 0),()),
		"UseSaveModelInCase": ((70, LCID, 4, 0),()),
		"UseSaveResult": ((68, LCID, 4, 0),()),
		"UseSimulationEndtime": ((60, LCID, 4, 0),()),
		"UseTimePeriod": ((59, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IDesignStudyDV(DispatchBaseClass):
	'''IDesignStudyDV'''
	CLSID = IID('{818D411D-45CE-4542-8D89-4D96D21430C8}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Data(self):
		return self._ApplyTypes_(*(51, 2, (8197, 0), (), "Data", None))
	def _get_DesignVariable(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "DesignVariable", '{44DA6D75-D10A-48E2-8077-5D9B9293842D}'))

	Data = property(_get_Data, None)
	'''
	Data list

	:type: list[float]
	'''
	DesignVariable = property(_get_DesignVariable, None)
	'''
	Design variable

	:type: recurdyn.ProcessNet.IDesignVariable
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Data": (51, 2, (8197, 0), (), "Data", None),
		"DesignVariable": (52, 2, (9, 0), (), "DesignVariable", '{44DA6D75-D10A-48E2-8077-5D9B9293842D}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IDesignStudyDVCollection(DispatchBaseClass):
	'''IDesignStudyDVCollection'''
	CLSID = IID('{52942D12-4250-4501-9149-1840338D9948}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IDesignStudyDV
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{818D411D-45CE-4542-8D89-4D96D21430C8}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IDesignStudyDV
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{818D411D-45CE-4542-8D89-4D96D21430C8}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{818D411D-45CE-4542-8D89-4D96D21430C8}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{818D411D-45CE-4542-8D89-4D96D21430C8}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IDesignStudyPI(DispatchBaseClass):
	'''IDesignStudyPI'''
	CLSID = IID('{ED61CDBA-7239-48AD-B844-7A4DE43F7811}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_ConstraintValue(self):
		return self._ApplyTypes_(*(57, 2, (5, 0), (), "ConstraintValue", None))
	def _get_LogicalOperator(self):
		return self._ApplyTypes_(*(56, 2, (3, 0), (), "LogicalOperator", '{C87DBD85-F612-42A4-AF41-D4C02E453626}'))
	def _get_MinMax(self):
		return self._ApplyTypes_(*(53, 2, (3, 0), (), "MinMax", '{0D482DBD-90B8-417E-92C8-AD3552A11CE0}'))
	def _get_PerformanceIndex(self):
		return self._ApplyTypes_(*(58, 2, (9, 0), (), "PerformanceIndex", '{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}'))
	def _get_Result(self):
		return self._ApplyTypes_(*(51, 2, (8197, 0), (), "Result", None))
	def _get_UseConstraint(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseConstraint", None))
	def _get_UseObjectiveFunction(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UseObjectiveFunction", None))
	def _get_WeightingFactor(self):
		return self._ApplyTypes_(*(54, 2, (5, 0), (), "WeightingFactor", None))

	def _set_ConstraintValue(self, value):
		if "ConstraintValue" in self.__dict__: self.__dict__["ConstraintValue"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_LogicalOperator(self, value):
		if "LogicalOperator" in self.__dict__: self.__dict__["LogicalOperator"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_MinMax(self, value):
		if "MinMax" in self.__dict__: self.__dict__["MinMax"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UseConstraint(self, value):
		if "UseConstraint" in self.__dict__: self.__dict__["UseConstraint"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseObjectiveFunction(self, value):
		if "UseObjectiveFunction" in self.__dict__: self.__dict__["UseObjectiveFunction"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_WeightingFactor(self, value):
		if "WeightingFactor" in self.__dict__: self.__dict__["WeightingFactor"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))

	ConstraintValue = property(_get_ConstraintValue, _set_ConstraintValue)
	'''
	Constraint value

	:type: float
	'''
	LogicalOperator = property(_get_LogicalOperator, _set_LogicalOperator)
	'''
	Logical operator type

	:type: recurdyn.ProcessNet.DesignStudyLogicalOperatorType
	'''
	MinMax = property(_get_MinMax, _set_MinMax)
	'''
	MinMax type

	:type: recurdyn.ProcessNet.DesignStudyMinMaxType
	'''
	PerformanceIndex = property(_get_PerformanceIndex, None)
	'''
	Performance Index

	:type: recurdyn.ProcessNet.IPerformanceIndex
	'''
	Result = property(_get_Result, None)
	'''
	Result list

	:type: list[float]
	'''
	UseConstraint = property(_get_UseConstraint, _set_UseConstraint)
	'''
	Use constraint

	:type: bool
	'''
	UseObjectiveFunction = property(_get_UseObjectiveFunction, _set_UseObjectiveFunction)
	'''
	Use objective function

	:type: bool
	'''
	WeightingFactor = property(_get_WeightingFactor, _set_WeightingFactor)
	'''
	Weighting factor

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_ConstraintValue": _set_ConstraintValue,
		"_set_LogicalOperator": _set_LogicalOperator,
		"_set_MinMax": _set_MinMax,
		"_set_UseConstraint": _set_UseConstraint,
		"_set_UseObjectiveFunction": _set_UseObjectiveFunction,
		"_set_WeightingFactor": _set_WeightingFactor,
	}
	_prop_map_get_ = {
		"ConstraintValue": (57, 2, (5, 0), (), "ConstraintValue", None),
		"LogicalOperator": (56, 2, (3, 0), (), "LogicalOperator", '{C87DBD85-F612-42A4-AF41-D4C02E453626}'),
		"MinMax": (53, 2, (3, 0), (), "MinMax", '{0D482DBD-90B8-417E-92C8-AD3552A11CE0}'),
		"PerformanceIndex": (58, 2, (9, 0), (), "PerformanceIndex", '{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}'),
		"Result": (51, 2, (8197, 0), (), "Result", None),
		"UseConstraint": (55, 2, (11, 0), (), "UseConstraint", None),
		"UseObjectiveFunction": (52, 2, (11, 0), (), "UseObjectiveFunction", None),
		"WeightingFactor": (54, 2, (5, 0), (), "WeightingFactor", None),
	}
	_prop_map_put_ = {
		"ConstraintValue": ((57, LCID, 4, 0),()),
		"LogicalOperator": ((56, LCID, 4, 0),()),
		"MinMax": ((53, LCID, 4, 0),()),
		"UseConstraint": ((55, LCID, 4, 0),()),
		"UseObjectiveFunction": ((52, LCID, 4, 0),()),
		"WeightingFactor": ((54, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IDesignStudyPICollection(DispatchBaseClass):
	'''IDesignStudyPICollection'''
	CLSID = IID('{B93EF2CA-4779-42DC-9EFE-1B50F427E2E7}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IDesignStudyPI
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{ED61CDBA-7239-48AD-B844-7A4DE43F7811}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IDesignStudyPI
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{ED61CDBA-7239-48AD-B844-7A4DE43F7811}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{ED61CDBA-7239-48AD-B844-7A4DE43F7811}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{ED61CDBA-7239-48AD-B844-7A4DE43F7811}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IDesignVariable(DispatchBaseClass):
	'''Design variable'''
	CLSID = IID('{44DA6D75-D10A-48E2-8077-5D9B9293842D}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_AbsoluteMaxValue(self):
		return self._ApplyTypes_(*(154, 2, (5, 0), (), "AbsoluteMaxValue", None))
	def _get_AbsoluteMinValue(self):
		return self._ApplyTypes_(*(153, 2, (5, 0), (), "AbsoluteMinValue", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_DeltaMaxValue(self):
		return self._ApplyTypes_(*(156, 2, (5, 0), (), "DeltaMaxValue", None))
	def _get_DeltaMinValue(self):
		return self._ApplyTypes_(*(155, 2, (5, 0), (), "DeltaMinValue", None))
	def _get_EditValueList(self):
		return self._ApplyTypes_(*(160, 2, (8197, 0), (), "EditValueList", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_ParametricValue(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "ParametricValue", '{3EEED3CE-62E8-4882-AAE6-4812B49927B5}'))
	def _get_PercentMaxValue(self):
		return self._ApplyTypes_(*(158, 2, (5, 0), (), "PercentMaxValue", None))
	def _get_PercentMinValue(self):
		return self._ApplyTypes_(*(157, 2, (5, 0), (), "PercentMinValue", None))
	def _get_Use(self):
		return self._ApplyTypes_(*(161, 2, (11, 0), (), "Use", None))
	def _get_UseEditValue(self):
		return self._ApplyTypes_(*(159, 2, (11, 0), (), "UseEditValue", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_ValueRange(self):
		return self._ApplyTypes_(*(152, 2, (3, 0), (), "ValueRange", '{6904E296-3761-4186-A34C-5556CC69964A}'))

	def _set_AbsoluteMaxValue(self, value):
		if "AbsoluteMaxValue" in self.__dict__: self.__dict__["AbsoluteMaxValue"] = value; return
		self._oleobj_.Invoke(*((154, LCID, 4, 0) + (value,) + ()))
	def _set_AbsoluteMinValue(self, value):
		if "AbsoluteMinValue" in self.__dict__: self.__dict__["AbsoluteMinValue"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_DeltaMaxValue(self, value):
		if "DeltaMaxValue" in self.__dict__: self.__dict__["DeltaMaxValue"] = value; return
		self._oleobj_.Invoke(*((156, LCID, 4, 0) + (value,) + ()))
	def _set_DeltaMinValue(self, value):
		if "DeltaMinValue" in self.__dict__: self.__dict__["DeltaMinValue"] = value; return
		self._oleobj_.Invoke(*((155, LCID, 4, 0) + (value,) + ()))
	def _set_EditValueList(self, value):
		if "EditValueList" in self.__dict__: self.__dict__["EditValueList"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((160, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_ParametricValue(self, value):
		if "ParametricValue" in self.__dict__: self.__dict__["ParametricValue"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_PercentMaxValue(self, value):
		if "PercentMaxValue" in self.__dict__: self.__dict__["PercentMaxValue"] = value; return
		self._oleobj_.Invoke(*((158, LCID, 4, 0) + (value,) + ()))
	def _set_PercentMinValue(self, value):
		if "PercentMinValue" in self.__dict__: self.__dict__["PercentMinValue"] = value; return
		self._oleobj_.Invoke(*((157, LCID, 4, 0) + (value,) + ()))
	def _set_Use(self, value):
		if "Use" in self.__dict__: self.__dict__["Use"] = value; return
		self._oleobj_.Invoke(*((161, LCID, 4, 0) + (value,) + ()))
	def _set_UseEditValue(self, value):
		if "UseEditValue" in self.__dict__: self.__dict__["UseEditValue"] = value; return
		self._oleobj_.Invoke(*((159, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_ValueRange(self, value):
		if "ValueRange" in self.__dict__: self.__dict__["ValueRange"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))

	AbsoluteMaxValue = property(_get_AbsoluteMaxValue, _set_AbsoluteMaxValue)
	'''
	Absolute max value

	:type: float
	'''
	AbsoluteMinValue = property(_get_AbsoluteMinValue, _set_AbsoluteMinValue)
	'''
	Absolute min value

	:type: float
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	DeltaMaxValue = property(_get_DeltaMaxValue, _set_DeltaMaxValue)
	'''
	Delta max value

	:type: float
	'''
	DeltaMinValue = property(_get_DeltaMinValue, _set_DeltaMinValue)
	'''
	Delta min value

	:type: float
	'''
	EditValueList = property(_get_EditValueList, _set_EditValueList)
	'''
	Edit value list

	:type: list[float]
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	ParametricValue = property(_get_ParametricValue, _set_ParametricValue)
	'''
	Parametric value

	:type: recurdyn.ProcessNet.IParametricValue
	'''
	PercentMaxValue = property(_get_PercentMaxValue, _set_PercentMaxValue)
	'''
	Percent max value

	:type: float
	'''
	PercentMinValue = property(_get_PercentMinValue, _set_PercentMinValue)
	'''
	Percent min value

	:type: float
	'''
	Use = property(_get_Use, _set_Use)
	'''
	This is only used by IDOE. So, if true, IDesignVariable will be added automatically.

	:type: bool
	'''
	UseEditValue = property(_get_UseEditValue, _set_UseEditValue)
	'''
	Use edit value

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	ValueRange = property(_get_ValueRange, _set_ValueRange)
	'''
	Value range

	:type: recurdyn.ProcessNet.DesignVariableValueRange
	'''

	_prop_map_set_function_ = {
		"_set_AbsoluteMaxValue": _set_AbsoluteMaxValue,
		"_set_AbsoluteMinValue": _set_AbsoluteMinValue,
		"_set_Comment": _set_Comment,
		"_set_DeltaMaxValue": _set_DeltaMaxValue,
		"_set_DeltaMinValue": _set_DeltaMinValue,
		"_set_EditValueList": _set_EditValueList,
		"_set_Name": _set_Name,
		"_set_ParametricValue": _set_ParametricValue,
		"_set_PercentMaxValue": _set_PercentMaxValue,
		"_set_PercentMinValue": _set_PercentMinValue,
		"_set_Use": _set_Use,
		"_set_UseEditValue": _set_UseEditValue,
		"_set_UserData": _set_UserData,
		"_set_ValueRange": _set_ValueRange,
	}
	_prop_map_get_ = {
		"AbsoluteMaxValue": (154, 2, (5, 0), (), "AbsoluteMaxValue", None),
		"AbsoluteMinValue": (153, 2, (5, 0), (), "AbsoluteMinValue", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"DeltaMaxValue": (156, 2, (5, 0), (), "DeltaMaxValue", None),
		"DeltaMinValue": (155, 2, (5, 0), (), "DeltaMinValue", None),
		"EditValueList": (160, 2, (8197, 0), (), "EditValueList", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"ParametricValue": (151, 2, (9, 0), (), "ParametricValue", '{3EEED3CE-62E8-4882-AAE6-4812B49927B5}'),
		"PercentMaxValue": (158, 2, (5, 0), (), "PercentMaxValue", None),
		"PercentMinValue": (157, 2, (5, 0), (), "PercentMinValue", None),
		"Use": (161, 2, (11, 0), (), "Use", None),
		"UseEditValue": (159, 2, (11, 0), (), "UseEditValue", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"ValueRange": (152, 2, (3, 0), (), "ValueRange", '{6904E296-3761-4186-A34C-5556CC69964A}'),
	}
	_prop_map_put_ = {
		"AbsoluteMaxValue": ((154, LCID, 4, 0),()),
		"AbsoluteMinValue": ((153, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"DeltaMaxValue": ((156, LCID, 4, 0),()),
		"DeltaMinValue": ((155, LCID, 4, 0),()),
		"EditValueList": ((160, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"ParametricValue": ((151, LCID, 4, 0),()),
		"PercentMaxValue": ((158, LCID, 4, 0),()),
		"PercentMinValue": ((157, LCID, 4, 0),()),
		"Use": ((161, LCID, 4, 0),()),
		"UseEditValue": ((159, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"ValueRange": ((152, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IDesignVariableCollection(DispatchBaseClass):
	'''IDesignVariableCollection'''
	CLSID = IID('{EA742AA0-0675-4ABA-8145-C00A73F97747}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IDesignVariable
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{44DA6D75-D10A-48E2-8077-5D9B9293842D}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IDesignVariable
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{44DA6D75-D10A-48E2-8077-5D9B9293842D}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{44DA6D75-D10A-48E2-8077-5D9B9293842D}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{44DA6D75-D10A-48E2-8077-5D9B9293842D}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IDevelopement(DispatchBaseClass):
	'''Developement Interface'''
	CLSID = IID('{C65A8D10-195A-4939-8359-D7DEC09DC500}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IDifferentialEquation(DispatchBaseClass):
	'''Differential equation'''
	CLSID = IID('{591F39F5-FBE0-49DF-83B6-6C0550D95A6A}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(151, 2, (11, 0), (), "Active", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Expression(self):
		return self._ApplyTypes_(*(157, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_FunctionType(self):
		return self._ApplyTypes_(*(158, 2, (3, 0), (), "FunctionType", '{A79AFF6F-883F-4763-A44B-1879ECC74AFF}'))
	def _get_HoldValueDuringStaticAnalysis(self):
		return self._ApplyTypes_(*(159, 2, (11, 0), (), "HoldValueDuringStaticAnalysis", None))
	def _get_InitialConditionDIF(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "InitialConditionDIF", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_InitialConditionDIF1(self):
		return self._ApplyTypes_(*(154, 2, (9, 0), (), "InitialConditionDIF1", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Type(self):
		return self._ApplyTypes_(*(155, 2, (3, 0), (), "Type", '{A79AFF6F-883F-4763-A44B-1879ECC74AFE}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_UserSubroutine(self):
		return self._ApplyTypes_(*(156, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Expression(self, value):
		if "Expression" in self.__dict__: self.__dict__["Expression"] = value; return
		self._oleobj_.Invoke(*((157, LCID, 4, 0) + (value,) + ()))
	def _set_FunctionType(self, value):
		if "FunctionType" in self.__dict__: self.__dict__["FunctionType"] = value; return
		self._oleobj_.Invoke(*((158, LCID, 4, 0) + (value,) + ()))
	def _set_HoldValueDuringStaticAnalysis(self, value):
		if "HoldValueDuringStaticAnalysis" in self.__dict__: self.__dict__["HoldValueDuringStaticAnalysis"] = value; return
		self._oleobj_.Invoke(*((159, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_Type(self, value):
		if "Type" in self.__dict__: self.__dict__["Type"] = value; return
		self._oleobj_.Invoke(*((155, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UserSubroutine(self, value):
		if "UserSubroutine" in self.__dict__: self.__dict__["UserSubroutine"] = value; return
		self._oleobj_.Invoke(*((156, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	If true, this differential equation becomes active

	:type: bool
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Expression = property(_get_Expression, _set_Expression)
	'''
	Expression (If equation type is standard variable equation, expression will be used.)

	:type: recurdyn.ProcessNet.IExpression
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	FunctionType = property(_get_FunctionType, _set_FunctionType)
	'''
	Function type

	:type: recurdyn.ProcessNet.DifferentialEquationFunctionType
	'''
	HoldValueDuringStaticAnalysis = property(_get_HoldValueDuringStaticAnalysis, _set_HoldValueDuringStaticAnalysis)
	'''
	Hold value during static analysis

	:type: bool
	'''
	InitialConditionDIF = property(_get_InitialConditionDIF, None)
	'''
	Initial condition DIF

	:type: recurdyn.ProcessNet.IDouble
	'''
	InitialConditionDIF1 = property(_get_InitialConditionDIF1, None)
	'''
	Initial condition DIF1(if function type is implicit, DIF1 will be used. 

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Type = property(_get_Type, _set_Type)
	'''
	Equation type

	:type: recurdyn.ProcessNet.DifferentialEquationType
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	UserSubroutine = property(_get_UserSubroutine, _set_UserSubroutine)
	'''
	User subroutine (If equation type is user subroutine equation, user subroutine will be used.)

	:type: recurdyn.ProcessNet.IUserSubroutine
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Comment": _set_Comment,
		"_set_Expression": _set_Expression,
		"_set_FunctionType": _set_FunctionType,
		"_set_HoldValueDuringStaticAnalysis": _set_HoldValueDuringStaticAnalysis,
		"_set_Name": _set_Name,
		"_set_Type": _set_Type,
		"_set_UserData": _set_UserData,
		"_set_UserSubroutine": _set_UserSubroutine,
	}
	_prop_map_get_ = {
		"Active": (151, 2, (11, 0), (), "Active", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Expression": (157, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"FunctionType": (158, 2, (3, 0), (), "FunctionType", '{A79AFF6F-883F-4763-A44B-1879ECC74AFF}'),
		"HoldValueDuringStaticAnalysis": (159, 2, (11, 0), (), "HoldValueDuringStaticAnalysis", None),
		"InitialConditionDIF": (153, 2, (9, 0), (), "InitialConditionDIF", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"InitialConditionDIF1": (154, 2, (9, 0), (), "InitialConditionDIF1", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Type": (155, 2, (3, 0), (), "Type", '{A79AFF6F-883F-4763-A44B-1879ECC74AFE}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"UserSubroutine": (156, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'),
	}
	_prop_map_put_ = {
		"Active": ((151, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Expression": ((157, LCID, 4, 0),()),
		"FunctionType": ((158, LCID, 4, 0),()),
		"HoldValueDuringStaticAnalysis": ((159, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"Type": ((155, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"UserSubroutine": ((156, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IDifferentialEquationCollection(DispatchBaseClass):
	'''IDifferentialEquationCollection'''
	CLSID = IID('{65267578-7015-4BB5-BB65-F5F81CCEA249}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IDifferentialEquation
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{591F39F5-FBE0-49DF-83B6-6C0550D95A6A}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IDifferentialEquation
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{591F39F5-FBE0-49DF-83B6-6C0550D95A6A}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{591F39F5-FBE0-49DF-83B6-6C0550D95A6A}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{591F39F5-FBE0-49DF-83B6-6C0550D95A6A}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IDouble(DispatchBaseClass):
	'''Double'''
	CLSID = IID('{2B5166E3-4B31-4607-B157-BE237A670336}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_ParametricValue(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "ParametricValue", '{3EEED3CE-62E8-4882-AAE6-4812B49927B5}'))
	def _get_Value(self):
		return self._ApplyTypes_(*(51, 2, (5, 0), (), "Value", None))

	def _set_ParametricValue(self, value):
		if "ParametricValue" in self.__dict__: self.__dict__["ParametricValue"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_Value(self, value):
		if "Value" in self.__dict__: self.__dict__["Value"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))

	ParametricValue = property(_get_ParametricValue, _set_ParametricValue)
	'''
	Parametric value

	:type: recurdyn.ProcessNet.IParametricValue
	'''
	Value = property(_get_Value, _set_Value)
	'''
	Value

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_ParametricValue": _set_ParametricValue,
		"_set_Value": _set_Value,
	}
	_prop_map_get_ = {
		"ParametricValue": (52, 2, (9, 0), (), "ParametricValue", '{3EEED3CE-62E8-4882-AAE6-4812B49927B5}'),
		"Value": (51, 2, (5, 0), (), "Value", None),
	}
	_prop_map_put_ = {
		"ParametricValue": ((52, LCID, 4, 0),()),
		"Value": ((51, LCID, 4, 0),()),
	}
	def __call__(self):
		return self._ApplyTypes_(*(51, 2, (5, 0), (), "Value", None))
	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IEigenMovement(DispatchBaseClass):
	'''Post Analysis'''
	CLSID = IID('{8F416D31-9366-4C4A-8395-3DFE99C21F1D}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddTargetMarker(self, pVal):
		'''
		Add a target marker
		
		:param pVal: IMarker
		'''
		return self._oleobj_.InvokeTypes(53, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def ClearTargetMarkerList(self):
		'''
		Clear target marker list
		'''
		return self._oleobj_.InvokeTypes(55, LCID, 1, (24, 0), (),)


	def Export(self):
		'''
		Export method
		'''
		return self._oleobj_.InvokeTypes(57, LCID, 1, (24, 0), (),)


	def GetTargetMarkerFullNameByIndex(self, Index):
		'''
		Get full name of target marker by index
		
		:param Index: int
		:rtype: str
		'''
		return self._oleobj_.InvokeTypes(54, LCID, 1, (8, 0), ((19, 1),),Index
			)


	def NumberOfTargetMarkerList(self):
		'''
		Number of target marker list
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(56, LCID, 1, (19, 0), (),)


	def _get_ExportFile(self):
		return self._ApplyTypes_(*(52, 2, (8, 0), (), "ExportFile", None))

	def _set_ExportFile(self, value):
		if "ExportFile" in self.__dict__: self.__dict__["ExportFile"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	ExportFile = property(_get_ExportFile, _set_ExportFile)
	'''
	CSV file

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ExportFile": _set_ExportFile,
	}
	_prop_map_get_ = {
		"ExportFile": (52, 2, (8, 0), (), "ExportFile", None),
	}
	_prop_map_put_ = {
		"ExportFile": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IEigenValueProperty(DispatchBaseClass):
	'''EigenValue property'''
	CLSID = IID('{54CB2134-5515-4D88-B997-71E72B9D7FFA}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AmplitudeFactor(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "AmplitudeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_CutoffLowFrequency(self):
		return self._ApplyTypes_(*(60, 2, (9, 0), (), "CutoffLowFrequency", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_EndTime(self):
		return self._ApplyTypes_(*(56, 2, (9, 0), (), "EndTime", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FramePerCycle(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "FramePerCycle", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_IncludeStaticAnalysis(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "IncludeStaticAnalysis", None))
	def _get_MaxModeNumber(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "MaxModeNumber", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_NaturalFrequencyType(self):
		return self._ApplyTypes_(*(57, 2, (3, 0), (), "NaturalFrequencyType", '{8408B76F-A14A-4087-B6B1-5D50464E37C5}'))
	def _get_StartTime(self):
		return self._ApplyTypes_(*(55, 2, (9, 0), (), "StartTime", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseCutoffLowFrequency(self):
		return self._ApplyTypes_(*(59, 2, (11, 0), (), "UseCutoffLowFrequency", None))

	def _set_IncludeStaticAnalysis(self, value):
		if "IncludeStaticAnalysis" in self.__dict__: self.__dict__["IncludeStaticAnalysis"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_NaturalFrequencyType(self, value):
		if "NaturalFrequencyType" in self.__dict__: self.__dict__["NaturalFrequencyType"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_UseCutoffLowFrequency(self, value):
		if "UseCutoffLowFrequency" in self.__dict__: self.__dict__["UseCutoffLowFrequency"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))

	AmplitudeFactor = property(_get_AmplitudeFactor, None)
	'''
	Amplitude factor

	:type: recurdyn.ProcessNet.IDouble
	'''
	CutoffLowFrequency = property(_get_CutoffLowFrequency, None)
	'''
	Cutoff low frequency

	:type: recurdyn.ProcessNet.IDouble
	'''
	EndTime = property(_get_EndTime, None)
	'''
	End Time

	:type: recurdyn.ProcessNet.IDouble
	'''
	FramePerCycle = property(_get_FramePerCycle, None)
	'''
	Frame per cycle

	:type: recurdyn.ProcessNet.IDouble
	'''
	IncludeStaticAnalysis = property(_get_IncludeStaticAnalysis, _set_IncludeStaticAnalysis)
	'''
	Include static analysis

	:type: bool
	'''
	MaxModeNumber = property(_get_MaxModeNumber, None)
	'''
	Max mode number

	:type: recurdyn.ProcessNet.IDouble
	'''
	NaturalFrequencyType = property(_get_NaturalFrequencyType, _set_NaturalFrequencyType)
	'''
	Natural Frequency Type

	:type: recurdyn.ProcessNet.NaturalFrequencyType
	'''
	StartTime = property(_get_StartTime, None)
	'''
	Start Time

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseCutoffLowFrequency = property(_get_UseCutoffLowFrequency, _set_UseCutoffLowFrequency)
	'''
	Use cutoff low frequency

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_IncludeStaticAnalysis": _set_IncludeStaticAnalysis,
		"_set_NaturalFrequencyType": _set_NaturalFrequencyType,
		"_set_UseCutoffLowFrequency": _set_UseCutoffLowFrequency,
	}
	_prop_map_get_ = {
		"AmplitudeFactor": (51, 2, (9, 0), (), "AmplitudeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"CutoffLowFrequency": (60, 2, (9, 0), (), "CutoffLowFrequency", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"EndTime": (56, 2, (9, 0), (), "EndTime", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FramePerCycle": (52, 2, (9, 0), (), "FramePerCycle", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"IncludeStaticAnalysis": (54, 2, (11, 0), (), "IncludeStaticAnalysis", None),
		"MaxModeNumber": (53, 2, (9, 0), (), "MaxModeNumber", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"NaturalFrequencyType": (57, 2, (3, 0), (), "NaturalFrequencyType", '{8408B76F-A14A-4087-B6B1-5D50464E37C5}'),
		"StartTime": (55, 2, (9, 0), (), "StartTime", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseCutoffLowFrequency": (59, 2, (11, 0), (), "UseCutoffLowFrequency", None),
	}
	_prop_map_put_ = {
		"IncludeStaticAnalysis": ((54, LCID, 4, 0),()),
		"NaturalFrequencyType": ((57, LCID, 4, 0),()),
		"UseCutoffLowFrequency": ((59, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IElement(DispatchBaseClass):
	CLSID = IID('{54A07879-AC7A-4B8D-BE87-914AD441CB69}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ElementType(self):
		return self._ApplyTypes_(*(152, 2, (3, 0), (), "ElementType", '{59250D4D-5C1C-4CEE-80A4-42A64F61F138}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_ID(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "ID", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ID(self, value):
		if "ID" in self.__dict__: self.__dict__["ID"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ElementType = property(_get_ElementType, None)
	'''
	Element type

	:type: recurdyn.ProcessNet.FlexibleElementType
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	ID = property(_get_ID, _set_ID)
	'''
	ID

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_ID": _set_ID,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ElementType": (152, 2, (3, 0), (), "ElementType", '{59250D4D-5C1C-4CEE-80A4-42A64F61F138}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"ID": (151, 2, (19, 0), (), "ID", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"ID": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IElementReadOnly(DispatchBaseClass):
	'''Read only element Interface'''
	CLSID = IID('{A86C1699-A5C3-4169-9085-A10C0818A8A3}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ElementType(self):
		return self._ApplyTypes_(*(152, 2, (3, 0), (), "ElementType", '{59250D4D-5C1C-4CEE-80A4-42A64F61F138}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_ID(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "ID", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ElementType = property(_get_ElementType, None)
	'''
	Element type

	:type: recurdyn.ProcessNet.FlexibleElementType
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	ID = property(_get_ID, None)
	'''
	ID

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ElementType": (152, 2, (3, 0), (), "ElementType", '{59250D4D-5C1C-4CEE-80A4-42A64F61F138}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"ID": (151, 2, (19, 0), (), "ID", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IEquilibriumProperty(DispatchBaseClass):
	'''Equilibrium property'''
	CLSID = IID('{19BE442B-70CF-499D-9A4C-B6A3256CDD32}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AutoConvergenceFactor(self):
		return self._ApplyTypes_(*(64, 2, (11, 0), (), "AutoConvergenceFactor", None))
	def _get_ConvergenceFactor(self):
		return self._ApplyTypes_(*(56, 2, (5, 0), (), "ConvergenceFactor", None))
	def _get_ErrorTolerance(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_IncludeStateMatrix(self):
		return self._ApplyTypes_(*(62, 2, (11, 0), (), "IncludeStateMatrix", None))
	def _get_IncludeStaticAnimation(self):
		return self._ApplyTypes_(*(63, 2, (11, 0), (), "IncludeStaticAnimation", None))
	def _get_InitialStepSize(self):
		return self._ApplyTypes_(*(57, 2, (9, 0), (), "InitialStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxIteration(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "MaxIteration", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaximumStepSize(self):
		return self._ApplyTypes_(*(58, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RotationalMoveLimit(self):
		return self._ApplyTypes_(*(61, 2, (9, 0), (), "RotationalMoveLimit", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SolverType(self):
		return self._ApplyTypes_(*(55, 2, (3, 0), (), "SolverType", '{0549836B-EED2-4482-BA80-897B362D3323}'))
	def _get_Step(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "Step", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StepSizeFactor(self):
		return self._ApplyTypes_(*(59, 2, (9, 0), (), "StepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Time(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "Time", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_TranslationalMoveLimit(self):
		return self._ApplyTypes_(*(60, 2, (9, 0), (), "TranslationalMoveLimit", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	def _set_AutoConvergenceFactor(self, value):
		if "AutoConvergenceFactor" in self.__dict__: self.__dict__["AutoConvergenceFactor"] = value; return
		self._oleobj_.Invoke(*((64, LCID, 4, 0) + (value,) + ()))
	def _set_ConvergenceFactor(self, value):
		if "ConvergenceFactor" in self.__dict__: self.__dict__["ConvergenceFactor"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_IncludeStateMatrix(self, value):
		if "IncludeStateMatrix" in self.__dict__: self.__dict__["IncludeStateMatrix"] = value; return
		self._oleobj_.Invoke(*((62, LCID, 4, 0) + (value,) + ()))
	def _set_IncludeStaticAnimation(self, value):
		if "IncludeStaticAnimation" in self.__dict__: self.__dict__["IncludeStaticAnimation"] = value; return
		self._oleobj_.Invoke(*((63, LCID, 4, 0) + (value,) + ()))
	def _set_SolverType(self, value):
		if "SolverType" in self.__dict__: self.__dict__["SolverType"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))

	AutoConvergenceFactor = property(_get_AutoConvergenceFactor, _set_AutoConvergenceFactor)
	'''
	Auto Convergence Factor

	:type: bool
	'''
	ConvergenceFactor = property(_get_ConvergenceFactor, _set_ConvergenceFactor)
	'''
	Convergence Factor

	:type: float
	'''
	ErrorTolerance = property(_get_ErrorTolerance, None)
	'''
	Error tolerance

	:type: recurdyn.ProcessNet.IDouble
	'''
	IncludeStateMatrix = property(_get_IncludeStateMatrix, _set_IncludeStateMatrix)
	'''
	Include State Matrix

	:type: bool
	'''
	IncludeStaticAnimation = property(_get_IncludeStaticAnimation, _set_IncludeStaticAnimation)
	'''
	Include Static Animation

	:type: bool
	'''
	InitialStepSize = property(_get_InitialStepSize, None)
	'''
	Initial Step Size

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxIteration = property(_get_MaxIteration, None)
	'''
	Max iteration

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaximumStepSize = property(_get_MaximumStepSize, None)
	'''
	Maximum Step Size

	:type: recurdyn.ProcessNet.IDouble
	'''
	RotationalMoveLimit = property(_get_RotationalMoveLimit, None)
	'''
	Rotational Move Limit

	:type: recurdyn.ProcessNet.IDouble
	'''
	SolverType = property(_get_SolverType, _set_SolverType)
	'''
	Static Solver Type

	:type: recurdyn.ProcessNet.StaticSolverType
	'''
	Step = property(_get_Step, None)
	'''
	Step

	:type: recurdyn.ProcessNet.IDouble
	'''
	StepSizeFactor = property(_get_StepSizeFactor, None)
	'''
	Step Size Factor

	:type: recurdyn.ProcessNet.IDouble
	'''
	Time = property(_get_Time, None)
	'''
	Time

	:type: recurdyn.ProcessNet.IDouble
	'''
	TranslationalMoveLimit = property(_get_TranslationalMoveLimit, None)
	'''
	Translational Move Limit

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
		"_set_AutoConvergenceFactor": _set_AutoConvergenceFactor,
		"_set_ConvergenceFactor": _set_ConvergenceFactor,
		"_set_IncludeStateMatrix": _set_IncludeStateMatrix,
		"_set_IncludeStaticAnimation": _set_IncludeStaticAnimation,
		"_set_SolverType": _set_SolverType,
	}
	_prop_map_get_ = {
		"AutoConvergenceFactor": (64, 2, (11, 0), (), "AutoConvergenceFactor", None),
		"ConvergenceFactor": (56, 2, (5, 0), (), "ConvergenceFactor", None),
		"ErrorTolerance": (51, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"IncludeStateMatrix": (62, 2, (11, 0), (), "IncludeStateMatrix", None),
		"IncludeStaticAnimation": (63, 2, (11, 0), (), "IncludeStaticAnimation", None),
		"InitialStepSize": (57, 2, (9, 0), (), "InitialStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxIteration": (52, 2, (9, 0), (), "MaxIteration", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaximumStepSize": (58, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RotationalMoveLimit": (61, 2, (9, 0), (), "RotationalMoveLimit", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SolverType": (55, 2, (3, 0), (), "SolverType", '{0549836B-EED2-4482-BA80-897B362D3323}'),
		"Step": (53, 2, (9, 0), (), "Step", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StepSizeFactor": (59, 2, (9, 0), (), "StepSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Time": (54, 2, (9, 0), (), "Time", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"TranslationalMoveLimit": (60, 2, (9, 0), (), "TranslationalMoveLimit", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
		"AutoConvergenceFactor": ((64, LCID, 4, 0),()),
		"ConvergenceFactor": ((56, LCID, 4, 0),()),
		"IncludeStateMatrix": ((62, LCID, 4, 0),()),
		"IncludeStaticAnimation": ((63, LCID, 4, 0),()),
		"SolverType": ((55, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IEulerAngle(DispatchBaseClass):
	'''Euler angle'''
	CLSID = IID('{9D220527-04EE-4578-9457-4C2061D099E7}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Alpha(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "Alpha", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Beta(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "Beta", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Gamma(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "Gamma", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Type(self):
		return self._ApplyTypes_(*(54, 2, (3, 0), (), "Type", '{A952E8B8-4277-4459-8636-46BE3982535C}'))

	def _set_Type(self, value):
		if "Type" in self.__dict__: self.__dict__["Type"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))

	Alpha = property(_get_Alpha, None)
	'''
	Alpha

	:type: recurdyn.ProcessNet.IDouble
	'''
	Beta = property(_get_Beta, None)
	'''
	Beta

	:type: recurdyn.ProcessNet.IDouble
	'''
	Gamma = property(_get_Gamma, None)
	'''
	Gamma

	:type: recurdyn.ProcessNet.IDouble
	'''
	Type = property(_get_Type, _set_Type)
	'''
	Euler AngleType(default is 3-1-3)

	:type: recurdyn.ProcessNet.EulerAngle
	'''

	_prop_map_set_function_ = {
		"_set_Type": _set_Type,
	}
	_prop_map_get_ = {
		"Alpha": (51, 2, (9, 0), (), "Alpha", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Beta": (52, 2, (9, 0), (), "Beta", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Gamma": (53, 2, (9, 0), (), "Gamma", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Type": (54, 2, (3, 0), (), "Type", '{A952E8B8-4277-4459-8636-46BE3982535C}'),
	}
	_prop_map_put_ = {
		"Type": ((54, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IExpression(DispatchBaseClass):
	'''Expression'''
	CLSID = IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Arguments(self):
		return self._ApplyTypes_(*(154, 2, (8200, 0), (), "Arguments", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_InitialValue(self):
		return self._ApplyTypes_(*(153, 2, (5, 0), (), "InitialValue", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Output(self):
		return self._ApplyTypes_(*(155, 2, (11, 0), (), "Output", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Text(self):
		return self._ApplyTypes_(*(151, 2, (8, 0), (), "Text", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Arguments(self, value):
		if "Arguments" in self.__dict__: self.__dict__["Arguments"] = value; return
		variantValue = win32com.client.VARIANT(8200, value)
		self._oleobj_.Invoke(*((154, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_Output(self, value):
		if "Output" in self.__dict__: self.__dict__["Output"] = value; return
		self._oleobj_.Invoke(*((155, LCID, 4, 0) + (value,) + ()))
	def _set_Text(self, value):
		if "Text" in self.__dict__: self.__dict__["Text"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Arguments = property(_get_Arguments, _set_Arguments)
	'''
	Arguments list

	:type: list[str]
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	InitialValue = property(_get_InitialValue, None)
	'''
	Initial Value

	:type: float
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Output = property(_get_Output, _set_Output)
	'''
	Output Flag

	:type: bool
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Text = property(_get_Text, _set_Text)
	'''
	Text

	:type: str
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Arguments": _set_Arguments,
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_Output": _set_Output,
		"_set_Text": _set_Text,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Arguments": (154, 2, (8200, 0), (), "Arguments", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"InitialValue": (153, 2, (5, 0), (), "InitialValue", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Output": (155, 2, (11, 0), (), "Output", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Text": (151, 2, (8, 0), (), "Text", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Arguments": ((154, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"Output": ((155, LCID, 4, 0),()),
		"Text": ((151, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IExpressionCollection(DispatchBaseClass):
	'''IExpressionCollection'''
	CLSID = IID('{65267578-7015-4BB5-BB65-F5F81CCEA246}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IExpression
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IExpression
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IFileExportOption(DispatchBaseClass):
	'''File import option'''
	CLSID = IID('{3D7C1E76-2C4C-480F-9D7B-5ECC6CB9FA2D}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_ACISOption(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "ACISOption", '{4A2D1222-69BA-4242-AE5E-E41051CC3621}'))
	def _get_CATIAOption(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "CATIAOption", '{49AFA7B6-FF16-4F40-8EA4-10867819AB71}'))
	def _get_ParasolidOption(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "ParasolidOption", '{DFE62769-2AF5-408A-88CF-2D448D994C5F}'))

	ACISOption = property(_get_ACISOption, None)
	'''
	Obsolete Function

	:type: recurdyn.ProcessNet.IFileExportOptionACIS
	'''
	CATIAOption = property(_get_CATIAOption, None)
	'''
	Obsolete Function

	:type: recurdyn.ProcessNet.IFileExportOptionCATIA
	'''
	ParasolidOption = property(_get_ParasolidOption, None)
	'''
	Obsolete Function

	:type: recurdyn.ProcessNet.IFileExportOptionParasolid
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"ACISOption": (52, 2, (9, 0), (), "ACISOption", '{4A2D1222-69BA-4242-AE5E-E41051CC3621}'),
		"CATIAOption": (53, 2, (9, 0), (), "CATIAOption", '{49AFA7B6-FF16-4F40-8EA4-10867819AB71}'),
		"ParasolidOption": (51, 2, (9, 0), (), "ParasolidOption", '{DFE62769-2AF5-408A-88CF-2D448D994C5F}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IFileExportOptionACIS(DispatchBaseClass):
	'''File export option for ACIS'''
	CLSID = IID('{4A2D1222-69BA-4242-AE5E-E41051CC3621}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Version(self):
		return self._ApplyTypes_(*(51, 2, (8, 0), (), "Version", None))

	def _set_Version(self, value):
		if "Version" in self.__dict__: self.__dict__["Version"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))

	Version = property(_get_Version, _set_Version)
	'''
	Obsolete Function

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Version": _set_Version,
	}
	_prop_map_get_ = {
		"Version": (51, 2, (8, 0), (), "Version", None),
	}
	_prop_map_put_ = {
		"Version": ((51, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IFileExportOptionCATIA(DispatchBaseClass):
	'''File export option for CATIA'''
	CLSID = IID('{49AFA7B6-FF16-4F40-8EA4-10867819AB71}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Version(self):
		return self._ApplyTypes_(*(51, 2, (8, 0), (), "Version", None))

	def _set_Version(self, value):
		if "Version" in self.__dict__: self.__dict__["Version"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))

	Version = property(_get_Version, _set_Version)
	'''
	Obsolete Function

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Version": _set_Version,
	}
	_prop_map_get_ = {
		"Version": (51, 2, (8, 0), (), "Version", None),
	}
	_prop_map_put_ = {
		"Version": ((51, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IFileExportOptionParasolid(DispatchBaseClass):
	'''File export option for Parasolid'''
	CLSID = IID('{DFE62769-2AF5-408A-88CF-2D448D994C5F}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Version(self):
		return self._ApplyTypes_(*(51, 2, (8, 0), (), "Version", None))

	def _set_Version(self, value):
		if "Version" in self.__dict__: self.__dict__["Version"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))

	Version = property(_get_Version, _set_Version)
	'''
	Obsolete Function

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Version": _set_Version,
	}
	_prop_map_get_ = {
		"Version": (51, 2, (8, 0), (), "Version", None),
	}
	_prop_map_put_ = {
		"Version": ((51, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IFileImportOption(DispatchBaseClass):
	'''File import option'''
	CLSID = IID('{6EA01552-F3C2-4CB5-B537-5F25196A168D}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_CATIAOption(self):
		return self._ApplyTypes_(*(57, 2, (9, 0), (), "CATIAOption", '{93B51291-F47B-4BAA-80D3-91123DD4E277}'))
	def _get_RDSBOption(self):
		return self._ApplyTypes_(*(53, 2, (3, 0), (), "RDSBOption", '{D137EA44-A395-423D-8D4D-70F30A57FBC7}'))
	def _get_STEPOption(self):
		return self._ApplyTypes_(*(58, 2, (9, 0), (), "STEPOption", '{9631DE3F-C76B-4D7E-AACE-1E7135DACBEF}'))
	def _get_UseADMConvertMarkerID(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UseADMConvertMarkerID", None))
	def _get_UseCATIAHealing(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "UseCATIAHealing", None))
	def _get_UseCATIAMergeToSingleBody(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseCATIAMergeToSingleBody", None))
	def _get_UseCATIASolidAsSheet(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseCATIASolidAsSheet", None))
	def _get_UseFileImportOptionForPNET(self):
		return self._ApplyTypes_(*(59, 2, (11, 0), (), "UseFileImportOptionForPNET", None))
	def _get_UseSTEPSolidTrim(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "UseSTEPSolidTrim", None))

	def _set_RDSBOption(self, value):
		if "RDSBOption" in self.__dict__: self.__dict__["RDSBOption"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UseADMConvertMarkerID(self, value):
		if "UseADMConvertMarkerID" in self.__dict__: self.__dict__["UseADMConvertMarkerID"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_UseCATIAHealing(self, value):
		if "UseCATIAHealing" in self.__dict__: self.__dict__["UseCATIAHealing"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_UseCATIAMergeToSingleBody(self, value):
		if "UseCATIAMergeToSingleBody" in self.__dict__: self.__dict__["UseCATIAMergeToSingleBody"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_UseCATIASolidAsSheet(self, value):
		if "UseCATIASolidAsSheet" in self.__dict__: self.__dict__["UseCATIASolidAsSheet"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseFileImportOptionForPNET(self, value):
		if "UseFileImportOptionForPNET" in self.__dict__: self.__dict__["UseFileImportOptionForPNET"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))
	def _set_UseSTEPSolidTrim(self, value):
		if "UseSTEPSolidTrim" in self.__dict__: self.__dict__["UseSTEPSolidTrim"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))

	CATIAOption = property(_get_CATIAOption, None)
	'''
	Obsolete Function

	:type: recurdyn.ProcessNet.IFileImportOptionCATIA
	'''
	RDSBOption = property(_get_RDSBOption, _set_RDSBOption)
	'''
	RDSB import option

	:type: recurdyn.ProcessNet.TargetSubSystemType
	'''
	STEPOption = property(_get_STEPOption, None)
	'''
	Obsolete Function

	:type: recurdyn.ProcessNet.IFileImportOptionSTEP
	'''
	UseADMConvertMarkerID = property(_get_UseADMConvertMarkerID, _set_UseADMConvertMarkerID)
	'''
	Convert ADAMS marker ID

	:type: bool
	'''
	UseCATIAHealing = property(_get_UseCATIAHealing, _set_UseCATIAHealing)
	'''
	Obsolete Function

	:type: bool
	'''
	UseCATIAMergeToSingleBody = property(_get_UseCATIAMergeToSingleBody, _set_UseCATIAMergeToSingleBody)
	'''
	Obsolete Function

	:type: bool
	'''
	UseCATIASolidAsSheet = property(_get_UseCATIASolidAsSheet, _set_UseCATIASolidAsSheet)
	'''
	Obsolete Function

	:type: bool
	'''
	UseFileImportOptionForPNET = property(_get_UseFileImportOptionForPNET, _set_UseFileImportOptionForPNET)
	'''
	Obsolete Function

	:type: bool
	'''
	UseSTEPSolidTrim = property(_get_UseSTEPSolidTrim, _set_UseSTEPSolidTrim)
	'''
	Obsolete Function

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_RDSBOption": _set_RDSBOption,
		"_set_UseADMConvertMarkerID": _set_UseADMConvertMarkerID,
		"_set_UseCATIAHealing": _set_UseCATIAHealing,
		"_set_UseCATIAMergeToSingleBody": _set_UseCATIAMergeToSingleBody,
		"_set_UseCATIASolidAsSheet": _set_UseCATIASolidAsSheet,
		"_set_UseFileImportOptionForPNET": _set_UseFileImportOptionForPNET,
		"_set_UseSTEPSolidTrim": _set_UseSTEPSolidTrim,
	}
	_prop_map_get_ = {
		"CATIAOption": (57, 2, (9, 0), (), "CATIAOption", '{93B51291-F47B-4BAA-80D3-91123DD4E277}'),
		"RDSBOption": (53, 2, (3, 0), (), "RDSBOption", '{D137EA44-A395-423D-8D4D-70F30A57FBC7}'),
		"STEPOption": (58, 2, (9, 0), (), "STEPOption", '{9631DE3F-C76B-4D7E-AACE-1E7135DACBEF}'),
		"UseADMConvertMarkerID": (52, 2, (11, 0), (), "UseADMConvertMarkerID", None),
		"UseCATIAHealing": (54, 2, (11, 0), (), "UseCATIAHealing", None),
		"UseCATIAMergeToSingleBody": (56, 2, (11, 0), (), "UseCATIAMergeToSingleBody", None),
		"UseCATIASolidAsSheet": (55, 2, (11, 0), (), "UseCATIASolidAsSheet", None),
		"UseFileImportOptionForPNET": (59, 2, (11, 0), (), "UseFileImportOptionForPNET", None),
		"UseSTEPSolidTrim": (51, 2, (11, 0), (), "UseSTEPSolidTrim", None),
	}
	_prop_map_put_ = {
		"RDSBOption": ((53, LCID, 4, 0),()),
		"UseADMConvertMarkerID": ((52, LCID, 4, 0),()),
		"UseCATIAHealing": ((54, LCID, 4, 0),()),
		"UseCATIAMergeToSingleBody": ((56, LCID, 4, 0),()),
		"UseCATIASolidAsSheet": ((55, LCID, 4, 0),()),
		"UseFileImportOptionForPNET": ((59, LCID, 4, 0),()),
		"UseSTEPSolidTrim": ((51, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IFileImportOptionCATIA(DispatchBaseClass):
	'''File import option for CATIA'''
	CLSID = IID('{93B51291-F47B-4BAA-80D3-91123DD4E277}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_CATIAAssemlyType(self):
		return self._ApplyTypes_(*(53, 2, (3, 0), (), "CATIAAssemlyType", '{3FCF662A-AABA-49AE-966E-99F07E9C1F9C}'))
	def _get_UseCATIAHealing(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "UseCATIAHealing", None))
	def _get_UseCATIASolidAsSheet(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UseCATIASolidAsSheet", None))

	def _set_CATIAAssemlyType(self, value):
		if "CATIAAssemlyType" in self.__dict__: self.__dict__["CATIAAssemlyType"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UseCATIAHealing(self, value):
		if "UseCATIAHealing" in self.__dict__: self.__dict__["UseCATIAHealing"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_UseCATIASolidAsSheet(self, value):
		if "UseCATIASolidAsSheet" in self.__dict__: self.__dict__["UseCATIASolidAsSheet"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	CATIAAssemlyType = property(_get_CATIAAssemlyType, _set_CATIAAssemlyType)
	'''
	obsolete functon

	:type: recurdyn.ProcessNet.ImportOptionCATIAAssemlyType
	'''
	UseCATIAHealing = property(_get_UseCATIAHealing, _set_UseCATIAHealing)
	'''
	obsolete functon

	:type: bool
	'''
	UseCATIASolidAsSheet = property(_get_UseCATIASolidAsSheet, _set_UseCATIASolidAsSheet)
	'''
	obsolete functon

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_CATIAAssemlyType": _set_CATIAAssemlyType,
		"_set_UseCATIAHealing": _set_UseCATIAHealing,
		"_set_UseCATIASolidAsSheet": _set_UseCATIASolidAsSheet,
	}
	_prop_map_get_ = {
		"CATIAAssemlyType": (53, 2, (3, 0), (), "CATIAAssemlyType", '{3FCF662A-AABA-49AE-966E-99F07E9C1F9C}'),
		"UseCATIAHealing": (51, 2, (11, 0), (), "UseCATIAHealing", None),
		"UseCATIASolidAsSheet": (52, 2, (11, 0), (), "UseCATIASolidAsSheet", None),
	}
	_prop_map_put_ = {
		"CATIAAssemlyType": ((53, LCID, 4, 0),()),
		"UseCATIAHealing": ((51, LCID, 4, 0),()),
		"UseCATIASolidAsSheet": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IFileImportOptionSTEP(DispatchBaseClass):
	'''File import option for STEP'''
	CLSID = IID('{9631DE3F-C76B-4D7E-AACE-1E7135DACBEF}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_UseSTEPSolidTrim(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "UseSTEPSolidTrim", None))

	def _set_UseSTEPSolidTrim(self, value):
		if "UseSTEPSolidTrim" in self.__dict__: self.__dict__["UseSTEPSolidTrim"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))

	UseSTEPSolidTrim = property(_get_UseSTEPSolidTrim, _set_UseSTEPSolidTrim)
	'''
	obsolete functon

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UseSTEPSolidTrim": _set_UseSTEPSolidTrim,
	}
	_prop_map_get_ = {
		"UseSTEPSolidTrim": (51, 2, (11, 0), (), "UseSTEPSolidTrim", None),
	}
	_prop_map_put_ = {
		"UseSTEPSolidTrim": ((51, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IFillHoleOption(DispatchBaseClass):
	'''Options used when filling holes of a geometry'''
	CLSID = IID('{D8018357-9575-4F97-8419-1014B23B06C5}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _set_Continuity(self, value):
		if "Continuity" in self.__dict__: self.__dict__["Continuity"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_HoleEdgeFace(self, value):
		if "HoleEdgeFace" in self.__dict__: self.__dict__["HoleEdgeFace"] = value; return
		_value_type = True if value and isinstance(value[0], win32com.client.VARIANT) else False
		if not _value_type:
			value = [win32com.client.VARIANT(12, _data) for _data in value]
		variantValue = win32com.client.VARIANT(8204, value)
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (variantValue,) + ()))
		if not _value_type:
			value = [_data.value for _data in value]
	def _set_Smoothness(self, value):
		if "Smoothness" in self.__dict__: self.__dict__["Smoothness"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))

	Continuity = property(None, _set_Continuity)
	'''
	Continuity

	:type: int
	'''
	HoleEdgeFace = property(None, _set_HoleEdgeFace)
	'''
	Edges or Faces of a hole

	:type: list[object]
	'''
	Smoothness = property(None, _set_Smoothness)
	'''
	Smoothness

	:type: int
	'''
	_prop_map_set_function_ = {
		"_set_Continuity": _set_Continuity,
		"_set_HoleEdgeFace": _set_HoleEdgeFace,
		"_set_Smoothness": _set_Smoothness,
	}
	_prop_map_get_ = {
	}
	_prop_map_put_ = {
		"Continuity": ((203, LCID, 4, 0),()),
		"HoleEdgeFace": ((201, LCID, 4, 0),()),
		"Smoothness": ((202, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IFilletEdgeInfo(DispatchBaseClass):
	'''Geometry Fillet Solid Edge Info'''
	CLSID = IID('{5B71FC46-F5BB-4F40-B7D6-2D4CC543C7CF}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_EdgeCollection(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "EdgeCollection", '{C760B0C7-18A0-463E-BC13-07F6B3931B32}'))
	def _get_Radius(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	EdgeCollection = property(_get_EdgeCollection, None)
	'''
	Edge Collection

	:type: recurdyn.ProcessNet.IGeometryEdgeCollection
	'''
	Radius = property(_get_Radius, None)
	'''
	Radius

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"EdgeCollection": (52, 2, (9, 0), (), "EdgeCollection", '{C760B0C7-18A0-463E-BC13-07F6B3931B32}'),
		"Radius": (51, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IFilletEdgeInfoCollection(DispatchBaseClass):
	'''IFilletEdgeInfoCollection'''
	CLSID = IID('{573236E5-A4B3-42F2-A7A6-78D9F953BFC8}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IFilletEdgeInfo
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{5B71FC46-F5BB-4F40-B7D6-2D4CC543C7CF}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IFilletEdgeInfo
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{5B71FC46-F5BB-4F40-B7D6-2D4CC543C7CF}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{5B71FC46-F5BB-4F40-B7D6-2D4CC543C7CF}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{5B71FC46-F5BB-4F40-B7D6-2D4CC543C7CF}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IForce(DispatchBaseClass):
	'''Force'''
	CLSID = IID('{EB73DE47-2BB8-46BD-A904-F61BCBC59D1F}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceAxial(DispatchBaseClass):
	'''Axial force'''
	CLSID = IID('{960E870B-7C56-4FF5-95DE-E735C751F8E7}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Expression(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseActionOnly(self):
		return self._ApplyTypes_(*(253, 2, (11, 0), (), "UseActionOnly", None))
	def _get_UseUserSubroutine(self):
		return self._ApplyTypes_(*(254, 2, (11, 0), (), "UseUserSubroutine", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_UserSubroutine(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Expression(self, value):
		if "Expression" in self.__dict__: self.__dict__["Expression"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseActionOnly(self, value):
		if "UseActionOnly" in self.__dict__: self.__dict__["UseActionOnly"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_UseUserSubroutine(self, value):
		if "UseUserSubroutine" in self.__dict__: self.__dict__["UseUserSubroutine"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UserSubroutine(self, value):
		if "UserSubroutine" in self.__dict__: self.__dict__["UserSubroutine"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Expression = property(_get_Expression, _set_Expression)
	'''
	Expression

	:type: recurdyn.ProcessNet.IExpression
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseActionOnly = property(_get_UseActionOnly, _set_UseActionOnly)
	'''
	Use action only

	:type: bool
	'''
	UseUserSubroutine = property(_get_UseUserSubroutine, _set_UseUserSubroutine)
	'''
	Use user subroutine

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	UserSubroutine = property(_get_UserSubroutine, _set_UserSubroutine)
	'''
	User subroutine

	:type: recurdyn.ProcessNet.IUserSubroutine
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_Expression": _set_Expression,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseActionOnly": _set_UseActionOnly,
		"_set_UseUserSubroutine": _set_UseUserSubroutine,
		"_set_UserData": _set_UserData,
		"_set_UserSubroutine": _set_UserSubroutine,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Expression": (251, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseActionOnly": (253, 2, (11, 0), (), "UseActionOnly", None),
		"UseUserSubroutine": (254, 2, (11, 0), (), "UseUserSubroutine", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"UserSubroutine": (252, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Expression": ((251, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseActionOnly": ((253, LCID, 4, 0),()),
		"UseUserSubroutine": ((254, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"UserSubroutine": ((252, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceAxialRotational(DispatchBaseClass):
	'''Rotational axial force'''
	CLSID = IID('{65024A22-5502-4F83-83D1-8C0EE0CE1712}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Expression(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseActionOnly(self):
		return self._ApplyTypes_(*(253, 2, (11, 0), (), "UseActionOnly", None))
	def _get_UseUserSubroutine(self):
		return self._ApplyTypes_(*(254, 2, (11, 0), (), "UseUserSubroutine", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_UserSubroutine(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Expression(self, value):
		if "Expression" in self.__dict__: self.__dict__["Expression"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseActionOnly(self, value):
		if "UseActionOnly" in self.__dict__: self.__dict__["UseActionOnly"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_UseUserSubroutine(self, value):
		if "UseUserSubroutine" in self.__dict__: self.__dict__["UseUserSubroutine"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UserSubroutine(self, value):
		if "UserSubroutine" in self.__dict__: self.__dict__["UserSubroutine"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Expression = property(_get_Expression, _set_Expression)
	'''
	Expression

	:type: recurdyn.ProcessNet.IExpression
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseActionOnly = property(_get_UseActionOnly, _set_UseActionOnly)
	'''
	Use action only

	:type: bool
	'''
	UseUserSubroutine = property(_get_UseUserSubroutine, _set_UseUserSubroutine)
	'''
	Use user subroutine

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	UserSubroutine = property(_get_UserSubroutine, _set_UserSubroutine)
	'''
	User subroutine

	:type: recurdyn.ProcessNet.IUserSubroutine
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_Expression": _set_Expression,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseActionOnly": _set_UseActionOnly,
		"_set_UseUserSubroutine": _set_UseUserSubroutine,
		"_set_UserData": _set_UserData,
		"_set_UserSubroutine": _set_UserSubroutine,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Expression": (251, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseActionOnly": (253, 2, (11, 0), (), "UseActionOnly", None),
		"UseUserSubroutine": (254, 2, (11, 0), (), "UseUserSubroutine", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"UserSubroutine": (252, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Expression": ((251, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseActionOnly": ((253, LCID, 4, 0),()),
		"UseUserSubroutine": ((254, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"UserSubroutine": ((252, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceBeam(DispatchBaseClass):
	'''Beam force'''
	CLSID = IID('{53C512F8-E418-4F65-9755-271B9A6F59E0}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def DampingMatrix(self, i, j):
		'''
		Damping matrix
		
		:param i: int
		:param j: int
		:rtype: recurdyn.ProcessNet.IDouble
		'''
		ret = self._oleobj_.InvokeTypes(252, LCID, 1, (9, 0), ((3, 1), (3, 1)),i
			, j)
		if ret is not None:
			ret = Dispatch(ret, 'DampingMatrix', '{2B5166E3-4B31-4607-B157-BE237A670336}')
		return ret

	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def UpdateCrossSectionProperty(self):
		'''
		Update mass, moment of inertia
		'''
		return self._oleobj_.InvokeTypes(265, LCID, 1, (24, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_BeamCrossSection(self):
		return self._ApplyTypes_(*(264, 2, (9, 0), (), "BeamCrossSection", '{557175E7-72DD-447A-8DB1-319593C34BDC}'))
	def _get_BeamCrossSectionType(self):
		return self._ApplyTypes_(*(263, 2, (3, 0), (), "BeamCrossSectionType", '{01406737-1007-468F-A0BC-A2F7C43239CF}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_CrossSectionArea(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "CrossSectionArea", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Ixx(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "Ixx", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Iyy(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "Iyy", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Izz(self):
		return self._ApplyTypes_(*(256, 2, (9, 0), (), "Izz", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_ShearAreaRatioY(self):
		return self._ApplyTypes_(*(257, 2, (9, 0), (), "ShearAreaRatioY", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ShearAreaRatioZ(self):
		return self._ApplyTypes_(*(258, 2, (9, 0), (), "ShearAreaRatioZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ShearModulus(self):
		return self._ApplyTypes_(*(259, 2, (9, 0), (), "ShearModulus", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UndeformedLength(self):
		return self._ApplyTypes_(*(260, 2, (9, 0), (), "UndeformedLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseDampingMatrix(self):
		return self._ApplyTypes_(*(262, 2, (11, 0), (), "UseDampingMatrix", None))
	def _get_UseUpdateCrossSectionPropertyAutomatically(self):
		return self._ApplyTypes_(*(266, 2, (11, 0), (), "UseUpdateCrossSectionPropertyAutomatically", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_ViscousDampingRatio(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "ViscousDampingRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_YoungsModulus(self):
		return self._ApplyTypes_(*(261, 2, (9, 0), (), "YoungsModulus", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BeamCrossSectionType(self, value):
		if "BeamCrossSectionType" in self.__dict__: self.__dict__["BeamCrossSectionType"] = value; return
		self._oleobj_.Invoke(*((263, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseDampingMatrix(self, value):
		if "UseDampingMatrix" in self.__dict__: self.__dict__["UseDampingMatrix"] = value; return
		self._oleobj_.Invoke(*((262, LCID, 4, 0) + (value,) + ()))
	def _set_UseUpdateCrossSectionPropertyAutomatically(self, value):
		if "UseUpdateCrossSectionPropertyAutomatically" in self.__dict__: self.__dict__["UseUpdateCrossSectionPropertyAutomatically"] = value; return
		self._oleobj_.Invoke(*((266, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	BeamCrossSection = property(_get_BeamCrossSection, None)
	'''
	BeamForce cross section

	:type: recurdyn.ProcessNet.IBeamCrossSection
	'''
	BeamCrossSectionType = property(_get_BeamCrossSectionType, _set_BeamCrossSectionType)
	'''
	BeamForce cross section type

	:type: recurdyn.ProcessNet.BeamCrossSectionType
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	CrossSectionArea = property(_get_CrossSectionArea, None)
	'''
	Beam library calculate automatically mass and area moment of inertia which is determined by cross section area.

	:type: recurdyn.ProcessNet.IDouble
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Ixx = property(_get_Ixx, None)
	'''
	Ixx

	:type: recurdyn.ProcessNet.IDouble
	'''
	Iyy = property(_get_Iyy, None)
	'''
	Iyy

	:type: recurdyn.ProcessNet.IDouble
	'''
	Izz = property(_get_Izz, None)
	'''
	Izz

	:type: recurdyn.ProcessNet.IDouble
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	ShearAreaRatioY = property(_get_ShearAreaRatioY, None)
	'''
	Shear area ratio Y

	:type: recurdyn.ProcessNet.IDouble
	'''
	ShearAreaRatioZ = property(_get_ShearAreaRatioZ, None)
	'''
	Shear area ratio Z

	:type: recurdyn.ProcessNet.IDouble
	'''
	ShearModulus = property(_get_ShearModulus, None)
	'''
	Shear modulus

	:type: recurdyn.ProcessNet.IDouble
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UndeformedLength = property(_get_UndeformedLength, None)
	'''
	Undeformed length between the base marker and the action marker.

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseDampingMatrix = property(_get_UseDampingMatrix, _set_UseDampingMatrix)
	'''
	Use damping matrix

	:type: bool
	'''
	UseUpdateCrossSectionPropertyAutomatically = property(_get_UseUpdateCrossSectionPropertyAutomatically, _set_UseUpdateCrossSectionPropertyAutomatically)
	'''
	Use Update Cross Section Property Automatically

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	ViscousDampingRatio = property(_get_ViscousDampingRatio, None)
	'''
	Viscous damping ratio

	:type: recurdyn.ProcessNet.IDouble
	'''
	YoungsModulus = property(_get_YoungsModulus, None)
	'''
	Young's modulus

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_BeamCrossSectionType": _set_BeamCrossSectionType,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseDampingMatrix": _set_UseDampingMatrix,
		"_set_UseUpdateCrossSectionPropertyAutomatically": _set_UseUpdateCrossSectionPropertyAutomatically,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"BeamCrossSection": (264, 2, (9, 0), (), "BeamCrossSection", '{557175E7-72DD-447A-8DB1-319593C34BDC}'),
		"BeamCrossSectionType": (263, 2, (3, 0), (), "BeamCrossSectionType", '{01406737-1007-468F-A0BC-A2F7C43239CF}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"CrossSectionArea": (251, 2, (9, 0), (), "CrossSectionArea", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Ixx": (254, 2, (9, 0), (), "Ixx", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Iyy": (255, 2, (9, 0), (), "Iyy", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Izz": (256, 2, (9, 0), (), "Izz", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"ShearAreaRatioY": (257, 2, (9, 0), (), "ShearAreaRatioY", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ShearAreaRatioZ": (258, 2, (9, 0), (), "ShearAreaRatioZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ShearModulus": (259, 2, (9, 0), (), "ShearModulus", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UndeformedLength": (260, 2, (9, 0), (), "UndeformedLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseDampingMatrix": (262, 2, (11, 0), (), "UseDampingMatrix", None),
		"UseUpdateCrossSectionPropertyAutomatically": (266, 2, (11, 0), (), "UseUpdateCrossSectionPropertyAutomatically", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"ViscousDampingRatio": (253, 2, (9, 0), (), "ViscousDampingRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"YoungsModulus": (261, 2, (9, 0), (), "YoungsModulus", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"BeamCrossSectionType": ((263, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseDampingMatrix": ((262, LCID, 4, 0),()),
		"UseUpdateCrossSectionPropertyAutomatically": ((266, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceBushing(DispatchBaseClass):
	'''Bushing force'''
	CLSID = IID('{54235E69-8E20-4D33-8A62-623CCD9C87AA}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RotationalDampingX(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "RotationalDampingX", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_RotationalDampingY(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "RotationalDampingY", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_RotationalDampingZ(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "RotationalDampingZ", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_RotationalPreloadX(self):
		return self._ApplyTypes_(*(257, 2, (9, 0), (), "RotationalPreloadX", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RotationalPreloadY(self):
		return self._ApplyTypes_(*(258, 2, (9, 0), (), "RotationalPreloadY", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RotationalPreloadZ(self):
		return self._ApplyTypes_(*(259, 2, (9, 0), (), "RotationalPreloadZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RotationalStiffnessX(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "RotationalStiffnessX", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_RotationalStiffnessY(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "RotationalStiffnessY", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_RotationalStiffnessZ(self):
		return self._ApplyTypes_(*(256, 2, (9, 0), (), "RotationalStiffnessZ", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_TranslationalDampingX(self):
		return self._ApplyTypes_(*(260, 2, (9, 0), (), "TranslationalDampingX", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_TranslationalDampingY(self):
		return self._ApplyTypes_(*(261, 2, (9, 0), (), "TranslationalDampingY", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_TranslationalDampingZ(self):
		return self._ApplyTypes_(*(262, 2, (9, 0), (), "TranslationalDampingZ", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_TranslationalPreloadX(self):
		return self._ApplyTypes_(*(266, 2, (9, 0), (), "TranslationalPreloadX", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_TranslationalPreloadY(self):
		return self._ApplyTypes_(*(267, 2, (9, 0), (), "TranslationalPreloadY", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_TranslationalPreloadZ(self):
		return self._ApplyTypes_(*(268, 2, (9, 0), (), "TranslationalPreloadZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_TranslationalStiffnessX(self):
		return self._ApplyTypes_(*(263, 2, (9, 0), (), "TranslationalStiffnessX", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_TranslationalStiffnessY(self):
		return self._ApplyTypes_(*(264, 2, (9, 0), (), "TranslationalStiffnessY", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_TranslationalStiffnessZ(self):
		return self._ApplyTypes_(*(265, 2, (9, 0), (), "TranslationalStiffnessZ", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_UseAdvancedConnectionFlexibleBody(self):
		return self._ApplyTypes_(*(279, 2, (11, 0), (), "UseAdvancedConnectionFlexibleBody", None))
	def _get_UseIncludeVirtualBodyConnection(self):
		return self._ApplyTypes_(*(271, 2, (11, 0), (), "UseIncludeVirtualBodyConnection", None))
	def _get_UseRadial(self):
		return self._ApplyTypes_(*(269, 2, (11, 0), (), "UseRadial", None))
	def _get_UseStaticBushing(self):
		return self._ApplyTypes_(*(270, 2, (11, 0), (), "UseStaticBushing", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseAdvancedConnectionFlexibleBody(self, value):
		if "UseAdvancedConnectionFlexibleBody" in self.__dict__: self.__dict__["UseAdvancedConnectionFlexibleBody"] = value; return
		self._oleobj_.Invoke(*((279, LCID, 4, 0) + (value,) + ()))
	def _set_UseIncludeVirtualBodyConnection(self, value):
		if "UseIncludeVirtualBodyConnection" in self.__dict__: self.__dict__["UseIncludeVirtualBodyConnection"] = value; return
		self._oleobj_.Invoke(*((271, LCID, 4, 0) + (value,) + ()))
	def _set_UseRadial(self, value):
		if "UseRadial" in self.__dict__: self.__dict__["UseRadial"] = value; return
		self._oleobj_.Invoke(*((269, LCID, 4, 0) + (value,) + ()))
	def _set_UseStaticBushing(self, value):
		if "UseStaticBushing" in self.__dict__: self.__dict__["UseStaticBushing"] = value; return
		self._oleobj_.Invoke(*((270, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RotationalDampingX = property(_get_RotationalDampingX, None)
	'''
	Rotational damping X

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	RotationalDampingY = property(_get_RotationalDampingY, None)
	'''
	Rotational damping Y

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	RotationalDampingZ = property(_get_RotationalDampingZ, None)
	'''
	Rotational damping Z

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	RotationalPreloadX = property(_get_RotationalPreloadX, None)
	'''
	Rotational preload X

	:type: recurdyn.ProcessNet.IDouble
	'''
	RotationalPreloadY = property(_get_RotationalPreloadY, None)
	'''
	Rotational preload Y

	:type: recurdyn.ProcessNet.IDouble
	'''
	RotationalPreloadZ = property(_get_RotationalPreloadZ, None)
	'''
	Rotational preload Z

	:type: recurdyn.ProcessNet.IDouble
	'''
	RotationalStiffnessX = property(_get_RotationalStiffnessX, None)
	'''
	Rotational stiffness X

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	RotationalStiffnessY = property(_get_RotationalStiffnessY, None)
	'''
	Rotational stiffness Y

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	RotationalStiffnessZ = property(_get_RotationalStiffnessZ, None)
	'''
	Rotational stiffness Z

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	TranslationalDampingX = property(_get_TranslationalDampingX, None)
	'''
	Translational damping X

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	TranslationalDampingY = property(_get_TranslationalDampingY, None)
	'''
	Translational damping Y

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	TranslationalDampingZ = property(_get_TranslationalDampingZ, None)
	'''
	Translational damping Z

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	TranslationalPreloadX = property(_get_TranslationalPreloadX, None)
	'''
	Translational preload X

	:type: recurdyn.ProcessNet.IDouble
	'''
	TranslationalPreloadY = property(_get_TranslationalPreloadY, None)
	'''
	Translational preload Y

	:type: recurdyn.ProcessNet.IDouble
	'''
	TranslationalPreloadZ = property(_get_TranslationalPreloadZ, None)
	'''
	Translational preload Z

	:type: recurdyn.ProcessNet.IDouble
	'''
	TranslationalStiffnessX = property(_get_TranslationalStiffnessX, None)
	'''
	Translational stiffness X

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	TranslationalStiffnessY = property(_get_TranslationalStiffnessY, None)
	'''
	Translational stiffness Y

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	TranslationalStiffnessZ = property(_get_TranslationalStiffnessZ, None)
	'''
	Translational stiffness Z

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	UseAdvancedConnectionFlexibleBody = property(_get_UseAdvancedConnectionFlexibleBody, _set_UseAdvancedConnectionFlexibleBody)
	'''
	Use advanced connection for flexible body

	:type: bool
	'''
	UseIncludeVirtualBodyConnection = property(_get_UseIncludeVirtualBodyConnection, _set_UseIncludeVirtualBodyConnection)
	'''
	Usually bushing force is used with virtual body connection.

	:type: bool
	'''
	UseRadial = property(_get_UseRadial, _set_UseRadial)
	'''
	If you use radial type, translational x direction of bushing force and translational y direction of bushing force are combined.

	:type: bool
	'''
	UseStaticBushing = property(_get_UseStaticBushing, _set_UseStaticBushing)
	'''
	If you use static bushing, a bushing force is used only executing the static analysis.

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseAdvancedConnectionFlexibleBody": _set_UseAdvancedConnectionFlexibleBody,
		"_set_UseIncludeVirtualBodyConnection": _set_UseIncludeVirtualBodyConnection,
		"_set_UseRadial": _set_UseRadial,
		"_set_UseStaticBushing": _set_UseStaticBushing,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RotationalDampingX": (251, 2, (9, 0), (), "RotationalDampingX", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"RotationalDampingY": (252, 2, (9, 0), (), "RotationalDampingY", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"RotationalDampingZ": (253, 2, (9, 0), (), "RotationalDampingZ", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"RotationalPreloadX": (257, 2, (9, 0), (), "RotationalPreloadX", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RotationalPreloadY": (258, 2, (9, 0), (), "RotationalPreloadY", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RotationalPreloadZ": (259, 2, (9, 0), (), "RotationalPreloadZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RotationalStiffnessX": (254, 2, (9, 0), (), "RotationalStiffnessX", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"RotationalStiffnessY": (255, 2, (9, 0), (), "RotationalStiffnessY", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"RotationalStiffnessZ": (256, 2, (9, 0), (), "RotationalStiffnessZ", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"TranslationalDampingX": (260, 2, (9, 0), (), "TranslationalDampingX", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"TranslationalDampingY": (261, 2, (9, 0), (), "TranslationalDampingY", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"TranslationalDampingZ": (262, 2, (9, 0), (), "TranslationalDampingZ", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"TranslationalPreloadX": (266, 2, (9, 0), (), "TranslationalPreloadX", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"TranslationalPreloadY": (267, 2, (9, 0), (), "TranslationalPreloadY", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"TranslationalPreloadZ": (268, 2, (9, 0), (), "TranslationalPreloadZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"TranslationalStiffnessX": (263, 2, (9, 0), (), "TranslationalStiffnessX", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"TranslationalStiffnessY": (264, 2, (9, 0), (), "TranslationalStiffnessY", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"TranslationalStiffnessZ": (265, 2, (9, 0), (), "TranslationalStiffnessZ", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"UseAdvancedConnectionFlexibleBody": (279, 2, (11, 0), (), "UseAdvancedConnectionFlexibleBody", None),
		"UseIncludeVirtualBodyConnection": (271, 2, (11, 0), (), "UseIncludeVirtualBodyConnection", None),
		"UseRadial": (269, 2, (11, 0), (), "UseRadial", None),
		"UseStaticBushing": (270, 2, (11, 0), (), "UseStaticBushing", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseAdvancedConnectionFlexibleBody": ((279, LCID, 4, 0),()),
		"UseIncludeVirtualBodyConnection": ((271, LCID, 4, 0),()),
		"UseRadial": ((269, LCID, 4, 0),()),
		"UseStaticBushing": ((270, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceBushingProperty(DispatchBaseClass):
	'''Force bushing property'''
	CLSID = IID('{AB18E75F-DCAF-47DB-AD77-35CEDFB12273}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Damping(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "Damping", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_Preload(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "Preload", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Stiffness(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "Stiffness", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))

	Damping = property(_get_Damping, None)
	'''
	Damping

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	Preload = property(_get_Preload, None)
	'''
	Preload

	:type: recurdyn.ProcessNet.IDouble
	'''
	Stiffness = property(_get_Stiffness, None)
	'''
	Stiffness

	:type: recurdyn.ProcessNet.ICoefficient
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Damping": (52, 2, (9, 0), (), "Damping", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"Preload": (53, 2, (9, 0), (), "Preload", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Stiffness": (51, 2, (9, 0), (), "Stiffness", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceCollection(DispatchBaseClass):
	'''IForceCollection'''
	CLSID = IID('{B1359BD3-DD1C-4A0C-A16D-466CC9B0B4F5}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IForce
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{EB73DE47-2BB8-46BD-A904-F61BCBC59D1F}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IForce
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{EB73DE47-2BB8-46BD-A904-F61BCBC59D1F}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{EB73DE47-2BB8-46BD-A904-F61BCBC59D1F}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{EB73DE47-2BB8-46BD-A904-F61BCBC59D1F}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IForceGraphic(DispatchBaseClass):
	'''Force graphic'''
	CLSID = IID('{50844B7B-2D6F-4A4B-AF50-AA5AEF747EC7}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Color(self):
		return self._ApplyTypes_(*(52, 2, (19, 0), (), "Color", None))
	def _get_EachRenderMode(self):
		return self._ApplyTypes_(*(51, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'))

	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_EachRenderMode(self, value):
		if "EachRenderMode" in self.__dict__: self.__dict__["EachRenderMode"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))

	Color = property(_get_Color, _set_Color)
	'''
	Color

	:type: int
	'''
	EachRenderMode = property(_get_EachRenderMode, _set_EachRenderMode)
	'''
	The rendering option

	:type: recurdyn.ProcessNet.EachRenderMode
	'''

	_prop_map_set_function_ = {
		"_set_Color": _set_Color,
		"_set_EachRenderMode": _set_EachRenderMode,
	}
	_prop_map_get_ = {
		"Color": (52, 2, (19, 0), (), "Color", None),
		"EachRenderMode": (51, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'),
	}
	_prop_map_put_ = {
		"Color": ((52, LCID, 4, 0),()),
		"EachRenderMode": ((51, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceMatrix(DispatchBaseClass):
	'''Matrix force'''
	CLSID = IID('{5A0426A9-C465-48F7-9456-7F6008CB0A7E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def Preload(self, Index):
		'''
		Preload method
		
		:param Index: int
		:rtype: recurdyn.ProcessNet.IDouble
		'''
		ret = self._oleobj_.InvokeTypes(255, LCID, 1, (9, 0), ((3, 1),),Index
			)
		if ret is not None:
			ret = Dispatch(ret, 'Preload', '{2B5166E3-4B31-4607-B157-BE237A670336}')
		return ret

	def ReferenceLength(self, Index):
		'''
		Reference length
		
		:param Index: int
		:rtype: recurdyn.ProcessNet.IDouble
		'''
		ret = self._oleobj_.InvokeTypes(256, LCID, 1, (9, 0), ((3, 1),),Index
			)
		if ret is not None:
			ret = Dispatch(ret, 'ReferenceLength', '{2B5166E3-4B31-4607-B157-BE237A670336}')
		return ret

	def StiffnessMatrix(self, i, j):
		'''
		Stiffness matrix
		
		:param i: int
		:param j: int
		:rtype: recurdyn.ProcessNet.IDouble
		'''
		ret = self._oleobj_.InvokeTypes(257, LCID, 1, (9, 0), ((3, 1), (3, 1)),i
			, j)
		if ret is not None:
			ret = Dispatch(ret, 'StiffnessMatrix', '{2B5166E3-4B31-4607-B157-BE237A670336}')
		return ret

	def ViscousDampingMatrix(self, i, j):
		'''
		Viscous damping matrix
		
		:param i: int
		:param j: int
		:rtype: recurdyn.ProcessNet.IDouble
		'''
		ret = self._oleobj_.InvokeTypes(258, LCID, 1, (9, 0), ((3, 1), (3, 1)),i
			, j)
		if ret is not None:
			ret = Dispatch(ret, 'ViscousDampingMatrix', '{2B5166E3-4B31-4607-B157-BE237A670336}')
		return ret

	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseAdvancedConnectionFlexibleBody(self):
		return self._ApplyTypes_(*(259, 2, (11, 0), (), "UseAdvancedConnectionFlexibleBody", None))
	def _get_UseDampingMatrix(self):
		return self._ApplyTypes_(*(254, 2, (11, 0), (), "UseDampingMatrix", None))
	def _get_UseUserSubroutine(self):
		return self._ApplyTypes_(*(251, 2, (11, 0), (), "UseUserSubroutine", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_UserSubroutine(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'))
	def _get_ViscousDampingRatio(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "ViscousDampingRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseAdvancedConnectionFlexibleBody(self, value):
		if "UseAdvancedConnectionFlexibleBody" in self.__dict__: self.__dict__["UseAdvancedConnectionFlexibleBody"] = value; return
		self._oleobj_.Invoke(*((259, LCID, 4, 0) + (value,) + ()))
	def _set_UseDampingMatrix(self, value):
		if "UseDampingMatrix" in self.__dict__: self.__dict__["UseDampingMatrix"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_UseUserSubroutine(self, value):
		if "UseUserSubroutine" in self.__dict__: self.__dict__["UseUserSubroutine"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UserSubroutine(self, value):
		if "UserSubroutine" in self.__dict__: self.__dict__["UserSubroutine"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseAdvancedConnectionFlexibleBody = property(_get_UseAdvancedConnectionFlexibleBody, _set_UseAdvancedConnectionFlexibleBody)
	'''
	Use advanced connection for flexible body

	:type: bool
	'''
	UseDampingMatrix = property(_get_UseDampingMatrix, _set_UseDampingMatrix)
	'''
	Use damping matrix

	:type: bool
	'''
	UseUserSubroutine = property(_get_UseUserSubroutine, _set_UseUserSubroutine)
	'''
	Use user subroutine

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	UserSubroutine = property(_get_UserSubroutine, _set_UserSubroutine)
	'''
	User subroutine

	:type: recurdyn.ProcessNet.IUserSubroutine
	'''
	ViscousDampingRatio = property(_get_ViscousDampingRatio, None)
	'''
	Viscous damping ratio

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseAdvancedConnectionFlexibleBody": _set_UseAdvancedConnectionFlexibleBody,
		"_set_UseDampingMatrix": _set_UseDampingMatrix,
		"_set_UseUserSubroutine": _set_UseUserSubroutine,
		"_set_UserData": _set_UserData,
		"_set_UserSubroutine": _set_UserSubroutine,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseAdvancedConnectionFlexibleBody": (259, 2, (11, 0), (), "UseAdvancedConnectionFlexibleBody", None),
		"UseDampingMatrix": (254, 2, (11, 0), (), "UseDampingMatrix", None),
		"UseUserSubroutine": (251, 2, (11, 0), (), "UseUserSubroutine", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"UserSubroutine": (252, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'),
		"ViscousDampingRatio": (253, 2, (9, 0), (), "ViscousDampingRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseAdvancedConnectionFlexibleBody": ((259, LCID, 4, 0),()),
		"UseDampingMatrix": ((254, LCID, 4, 0),()),
		"UseUserSubroutine": ((251, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"UserSubroutine": ((252, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForcePlate(DispatchBaseClass):
	'''Plate force'''
	CLSID = IID('{64E1EBEB-71A0-4986-90F3-8C0B77A3F88B}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_ActionMarker2(self):
		return self._ApplyTypes_(*(258, 2, (9, 0), (), "ActionMarker2", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_ActionMarker3(self):
		return self._ApplyTypes_(*(259, 2, (9, 0), (), "ActionMarker3", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_PoissonRatio(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ProportionalRatioDamping(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "ProportionalRatioDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Thickness(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "Thickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UndeformedPositionL01(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "UndeformedPositionL01", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_UndeformedPositionL02(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "UndeformedPositionL02", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_UndeformedPositionL03(self):
		return self._ApplyTypes_(*(256, 2, (9, 0), (), "UndeformedPositionL03", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_YoungsModulus(self):
		return self._ApplyTypes_(*(257, 2, (9, 0), (), "YoungsModulus", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ActionMarker2(self, value):
		if "ActionMarker2" in self.__dict__: self.__dict__["ActionMarker2"] = value; return
		self._oleobj_.Invoke(*((258, LCID, 4, 0) + (value,) + ()))
	def _set_ActionMarker3(self, value):
		if "ActionMarker3" in self.__dict__: self.__dict__["ActionMarker3"] = value; return
		self._oleobj_.Invoke(*((259, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	ActionMarker2 = property(_get_ActionMarker2, _set_ActionMarker2)
	'''
	2nd Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	ActionMarker3 = property(_get_ActionMarker3, _set_ActionMarker3)
	'''
	3rd Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	PoissonRatio = property(_get_PoissonRatio, None)
	'''
	Poisson's ratio

	:type: recurdyn.ProcessNet.IDouble
	'''
	ProportionalRatioDamping = property(_get_ProportionalRatioDamping, None)
	'''
	Proportional damping ratio

	:type: recurdyn.ProcessNet.IDouble
	'''
	Thickness = property(_get_Thickness, None)
	'''
	The thickness of the plate element

	:type: recurdyn.ProcessNet.IDouble
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UndeformedPositionL01 = property(_get_UndeformedPositionL01, None)
	'''
	Undeformed position L01. A vector of distance between the base marker and the first action marker with respect to the base marker.

	:type: recurdyn.ProcessNet.IVector
	'''
	UndeformedPositionL02 = property(_get_UndeformedPositionL02, None)
	'''
	Undeformed position L02. A vector of distance between the base marker and the second action marker with respect to the base marker.

	:type: recurdyn.ProcessNet.IVector
	'''
	UndeformedPositionL03 = property(_get_UndeformedPositionL03, None)
	'''
	Undeformed position L03. A vector of distance between the base marker and the third action marker with respect to the base marker.

	:type: recurdyn.ProcessNet.IVector
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	YoungsModulus = property(_get_YoungsModulus, None)
	'''
	Young's modulus

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_ActionMarker2": _set_ActionMarker2,
		"_set_ActionMarker3": _set_ActionMarker3,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"ActionMarker2": (258, 2, (9, 0), (), "ActionMarker2", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"ActionMarker3": (259, 2, (9, 0), (), "ActionMarker3", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"PoissonRatio": (251, 2, (9, 0), (), "PoissonRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ProportionalRatioDamping": (252, 2, (9, 0), (), "ProportionalRatioDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Thickness": (253, 2, (9, 0), (), "Thickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UndeformedPositionL01": (254, 2, (9, 0), (), "UndeformedPositionL01", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"UndeformedPositionL02": (255, 2, (9, 0), (), "UndeformedPositionL02", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"UndeformedPositionL03": (256, 2, (9, 0), (), "UndeformedPositionL03", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"YoungsModulus": (257, 2, (9, 0), (), "YoungsModulus", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"ActionMarker2": ((258, LCID, 4, 0),()),
		"ActionMarker3": ((259, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceRotational(DispatchBaseClass):
	'''The rotational force element generates three orthogonal rotational forces. This element applies action forces to the action marker and the corresponding reaction force is applied to the base marker.'''
	CLSID = IID('{52BFD3CF-4CC9-4ECE-9B8C-E7A28EF9D4A2}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ExpressionTX(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "ExpressionTX", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_ExpressionTY(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "ExpressionTY", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_ExpressionTZ(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "ExpressionTZ", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefMarker(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseUserSubroutine(self):
		return self._ApplyTypes_(*(256, 2, (11, 0), (), "UseUserSubroutine", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_UserSubroutine(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ExpressionTX(self, value):
		if "ExpressionTX" in self.__dict__: self.__dict__["ExpressionTX"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_ExpressionTY(self, value):
		if "ExpressionTY" in self.__dict__: self.__dict__["ExpressionTY"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_ExpressionTZ(self, value):
		if "ExpressionTZ" in self.__dict__: self.__dict__["ExpressionTZ"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_RefMarker(self, value):
		if "RefMarker" in self.__dict__: self.__dict__["RefMarker"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseUserSubroutine(self, value):
		if "UseUserSubroutine" in self.__dict__: self.__dict__["UseUserSubroutine"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UserSubroutine(self, value):
		if "UserSubroutine" in self.__dict__: self.__dict__["UserSubroutine"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ExpressionTX = property(_get_ExpressionTX, _set_ExpressionTX)
	'''
	Expression TX

	:type: recurdyn.ProcessNet.IExpression
	'''
	ExpressionTY = property(_get_ExpressionTY, _set_ExpressionTY)
	'''
	Expression TY

	:type: recurdyn.ProcessNet.IExpression
	'''
	ExpressionTZ = property(_get_ExpressionTZ, _set_ExpressionTZ)
	'''
	Expression TZ

	:type: recurdyn.ProcessNet.IExpression
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefMarker = property(_get_RefMarker, _set_RefMarker)
	'''
	Reference marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseUserSubroutine = property(_get_UseUserSubroutine, _set_UseUserSubroutine)
	'''
	Use user subroutine

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	UserSubroutine = property(_get_UserSubroutine, _set_UserSubroutine)
	'''
	User subroutine

	:type: recurdyn.ProcessNet.IUserSubroutine
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ExpressionTX": _set_ExpressionTX,
		"_set_ExpressionTY": _set_ExpressionTY,
		"_set_ExpressionTZ": _set_ExpressionTZ,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_RefMarker": _set_RefMarker,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseUserSubroutine": _set_UseUserSubroutine,
		"_set_UserData": _set_UserData,
		"_set_UserSubroutine": _set_UserSubroutine,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ExpressionTX": (251, 2, (9, 0), (), "ExpressionTX", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"ExpressionTY": (252, 2, (9, 0), (), "ExpressionTY", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"ExpressionTZ": (253, 2, (9, 0), (), "ExpressionTZ", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefMarker": (255, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseUserSubroutine": (256, 2, (11, 0), (), "UseUserSubroutine", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"UserSubroutine": (254, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ExpressionTX": ((251, LCID, 4, 0),()),
		"ExpressionTY": ((252, LCID, 4, 0),()),
		"ExpressionTZ": ((253, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"RefMarker": ((255, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseUserSubroutine": ((256, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"UserSubroutine": ((254, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceScrew(DispatchBaseClass):
	'''The screw force element generates three translation and three rotational forces. You can define these forces using a function expression or the user-defined subroutine SCREWSUB.'''
	CLSID = IID('{D996544C-0967-4920-83A6-A3C9FB97E153}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ExpressionFX(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "ExpressionFX", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_ExpressionFY(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "ExpressionFY", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_ExpressionFZ(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "ExpressionFZ", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_ExpressionTX(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "ExpressionTX", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_ExpressionTY(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "ExpressionTY", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_ExpressionTZ(self):
		return self._ApplyTypes_(*(256, 2, (9, 0), (), "ExpressionTZ", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefMarker(self):
		return self._ApplyTypes_(*(258, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseUserSubroutine(self):
		return self._ApplyTypes_(*(259, 2, (11, 0), (), "UseUserSubroutine", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_UserSubroutine(self):
		return self._ApplyTypes_(*(257, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ExpressionFX(self, value):
		if "ExpressionFX" in self.__dict__: self.__dict__["ExpressionFX"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_ExpressionFY(self, value):
		if "ExpressionFY" in self.__dict__: self.__dict__["ExpressionFY"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_ExpressionFZ(self, value):
		if "ExpressionFZ" in self.__dict__: self.__dict__["ExpressionFZ"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_ExpressionTX(self, value):
		if "ExpressionTX" in self.__dict__: self.__dict__["ExpressionTX"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_ExpressionTY(self, value):
		if "ExpressionTY" in self.__dict__: self.__dict__["ExpressionTY"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_ExpressionTZ(self, value):
		if "ExpressionTZ" in self.__dict__: self.__dict__["ExpressionTZ"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_RefMarker(self, value):
		if "RefMarker" in self.__dict__: self.__dict__["RefMarker"] = value; return
		self._oleobj_.Invoke(*((258, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseUserSubroutine(self, value):
		if "UseUserSubroutine" in self.__dict__: self.__dict__["UseUserSubroutine"] = value; return
		self._oleobj_.Invoke(*((259, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UserSubroutine(self, value):
		if "UserSubroutine" in self.__dict__: self.__dict__["UserSubroutine"] = value; return
		self._oleobj_.Invoke(*((257, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ExpressionFX = property(_get_ExpressionFX, _set_ExpressionFX)
	'''
	Expression FX

	:type: recurdyn.ProcessNet.IExpression
	'''
	ExpressionFY = property(_get_ExpressionFY, _set_ExpressionFY)
	'''
	Expression FY

	:type: recurdyn.ProcessNet.IExpression
	'''
	ExpressionFZ = property(_get_ExpressionFZ, _set_ExpressionFZ)
	'''
	Expression FZ

	:type: recurdyn.ProcessNet.IExpression
	'''
	ExpressionTX = property(_get_ExpressionTX, _set_ExpressionTX)
	'''
	Expression TX

	:type: recurdyn.ProcessNet.IExpression
	'''
	ExpressionTY = property(_get_ExpressionTY, _set_ExpressionTY)
	'''
	Expression TY

	:type: recurdyn.ProcessNet.IExpression
	'''
	ExpressionTZ = property(_get_ExpressionTZ, _set_ExpressionTZ)
	'''
	Expression TZ

	:type: recurdyn.ProcessNet.IExpression
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefMarker = property(_get_RefMarker, _set_RefMarker)
	'''
	Reference marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseUserSubroutine = property(_get_UseUserSubroutine, _set_UseUserSubroutine)
	'''
	Use user subroutine

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	UserSubroutine = property(_get_UserSubroutine, _set_UserSubroutine)
	'''
	User subroutine

	:type: recurdyn.ProcessNet.IUserSubroutine
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ExpressionFX": _set_ExpressionFX,
		"_set_ExpressionFY": _set_ExpressionFY,
		"_set_ExpressionFZ": _set_ExpressionFZ,
		"_set_ExpressionTX": _set_ExpressionTX,
		"_set_ExpressionTY": _set_ExpressionTY,
		"_set_ExpressionTZ": _set_ExpressionTZ,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_RefMarker": _set_RefMarker,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseUserSubroutine": _set_UseUserSubroutine,
		"_set_UserData": _set_UserData,
		"_set_UserSubroutine": _set_UserSubroutine,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ExpressionFX": (251, 2, (9, 0), (), "ExpressionFX", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"ExpressionFY": (252, 2, (9, 0), (), "ExpressionFY", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"ExpressionFZ": (253, 2, (9, 0), (), "ExpressionFZ", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"ExpressionTX": (254, 2, (9, 0), (), "ExpressionTX", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"ExpressionTY": (255, 2, (9, 0), (), "ExpressionTY", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"ExpressionTZ": (256, 2, (9, 0), (), "ExpressionTZ", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefMarker": (258, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseUserSubroutine": (259, 2, (11, 0), (), "UseUserSubroutine", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"UserSubroutine": (257, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ExpressionFX": ((251, LCID, 4, 0),()),
		"ExpressionFY": ((252, LCID, 4, 0),()),
		"ExpressionFZ": ((253, LCID, 4, 0),()),
		"ExpressionTX": ((254, LCID, 4, 0),()),
		"ExpressionTY": ((255, LCID, 4, 0),()),
		"ExpressionTZ": ((256, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"RefMarker": ((258, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseUserSubroutine": ((259, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"UserSubroutine": ((257, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceSpring(DispatchBaseClass):
	'''Spring force'''
	CLSID = IID('{164BA461-0C9B-4F07-A027-C82298891823}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Damping(self):
		return self._ApplyTypes_(*(256, 2, (9, 0), (), "Damping", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FreeLength(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "FreeLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Preload(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "Preload", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SpringGraphic(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "SpringGraphic", '{61C55C33-4716-4D26-8030-F9D29ED8B413}'))
	def _get_Stiffness(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "Stiffness", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Damping = property(_get_Damping, None)
	'''
	Damping

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FreeLength = property(_get_FreeLength, None)
	'''
	The free length of the spring

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Preload = property(_get_Preload, None)
	'''
	The preload of the spring

	:type: recurdyn.ProcessNet.IDouble
	'''
	SpringGraphic = property(_get_SpringGraphic, None)
	'''
	Spring force graphic

	:type: recurdyn.ProcessNet.IForceSpringGraphic
	'''
	Stiffness = property(_get_Stiffness, None)
	'''
	Stiffness

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Damping": (256, 2, (9, 0), (), "Damping", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FreeLength": (253, 2, (9, 0), (), "FreeLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Preload": (254, 2, (9, 0), (), "Preload", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SpringGraphic": (252, 2, (9, 0), (), "SpringGraphic", '{61C55C33-4716-4D26-8030-F9D29ED8B413}'),
		"Stiffness": (255, 2, (9, 0), (), "Stiffness", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceSpringGraphic(DispatchBaseClass):
	'''Spring force graphic'''
	CLSID = IID('{61C55C33-4716-4D26-8030-F9D29ED8B413}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_CoilDiameter(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "CoilDiameter", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_CoilRadius(self):
		return self._ApplyTypes_(*(111, 2, (9, 0), (), "CoilRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Color(self):
		return self._ApplyTypes_(*(52, 2, (19, 0), (), "Color", None))
	def _get_DamperLength(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "DamperLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_EachRenderMode(self):
		return self._ApplyTypes_(*(51, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'))
	def _get_NCoil(self):
		return self._ApplyTypes_(*(106, 2, (3, 0), (), "NCoil", None))
	def _get_OffsetFromActionMarker(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "OffsetFromActionMarker", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_OffsetFromBaseMarker(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "OffsetFromBaseMarker", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SpringDiameter(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "SpringDiameter", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseCoilDiameter(self):
		return self._ApplyTypes_(*(109, 2, (11, 0), (), "UseCoilDiameter", None))
	def _get_UseCoilRadius(self):
		return self._ApplyTypes_(*(110, 2, (11, 0), (), "UseCoilRadius", None))
	def _get_UseDamperLength(self):
		return self._ApplyTypes_(*(108, 2, (11, 0), (), "UseDamperLength", None))
	def _get_UseSimpleGraphic(self):
		return self._ApplyTypes_(*(107, 2, (11, 0), (), "UseSimpleGraphic", None))

	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_EachRenderMode(self, value):
		if "EachRenderMode" in self.__dict__: self.__dict__["EachRenderMode"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_NCoil(self, value):
		if "NCoil" in self.__dict__: self.__dict__["NCoil"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))
	def _set_UseCoilDiameter(self, value):
		if "UseCoilDiameter" in self.__dict__: self.__dict__["UseCoilDiameter"] = value; return
		self._oleobj_.Invoke(*((109, LCID, 4, 0) + (value,) + ()))
	def _set_UseCoilRadius(self, value):
		if "UseCoilRadius" in self.__dict__: self.__dict__["UseCoilRadius"] = value; return
		self._oleobj_.Invoke(*((110, LCID, 4, 0) + (value,) + ()))
	def _set_UseDamperLength(self, value):
		if "UseDamperLength" in self.__dict__: self.__dict__["UseDamperLength"] = value; return
		self._oleobj_.Invoke(*((108, LCID, 4, 0) + (value,) + ()))
	def _set_UseSimpleGraphic(self, value):
		if "UseSimpleGraphic" in self.__dict__: self.__dict__["UseSimpleGraphic"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	CoilDiameter = property(_get_CoilDiameter, None)
	'''
	This is an obsolete property. Use CoilRadius.

	:type: recurdyn.ProcessNet.IDouble
	'''
	CoilRadius = property(_get_CoilRadius, None)
	'''
	The radius of coil of spring

	:type: recurdyn.ProcessNet.IDouble
	'''
	Color = property(_get_Color, _set_Color)
	'''
	Color

	:type: int
	'''
	DamperLength = property(_get_DamperLength, None)
	'''
	The length of damper

	:type: recurdyn.ProcessNet.IDouble
	'''
	EachRenderMode = property(_get_EachRenderMode, _set_EachRenderMode)
	'''
	The rendering option

	:type: recurdyn.ProcessNet.EachRenderMode
	'''
	NCoil = property(_get_NCoil, _set_NCoil)
	'''
	The number of coils of spring graphic

	:type: int
	'''
	OffsetFromActionMarker = property(_get_OffsetFromActionMarker, None)
	'''
	The distance between action marker and damper

	:type: recurdyn.ProcessNet.IDouble
	'''
	OffsetFromBaseMarker = property(_get_OffsetFromBaseMarker, None)
	'''
	The distance between base marker and damper

	:type: recurdyn.ProcessNet.IDouble
	'''
	SpringDiameter = property(_get_SpringDiameter, None)
	'''
	The diameter of spring graphic

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseCoilDiameter = property(_get_UseCoilDiameter, _set_UseCoilDiameter)
	'''
	This is an obsolete property. Use 'UseCoilRadius'.

	:type: bool
	'''
	UseCoilRadius = property(_get_UseCoilRadius, _set_UseCoilRadius)
	'''
	Use coil radius

	:type: bool
	'''
	UseDamperLength = property(_get_UseDamperLength, _set_UseDamperLength)
	'''
	Use damper length

	:type: bool
	'''
	UseSimpleGraphic = property(_get_UseSimpleGraphic, _set_UseSimpleGraphic)
	'''
	Use simple shape of the spring graphic

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Color": _set_Color,
		"_set_EachRenderMode": _set_EachRenderMode,
		"_set_NCoil": _set_NCoil,
		"_set_UseCoilDiameter": _set_UseCoilDiameter,
		"_set_UseCoilRadius": _set_UseCoilRadius,
		"_set_UseDamperLength": _set_UseDamperLength,
		"_set_UseSimpleGraphic": _set_UseSimpleGraphic,
	}
	_prop_map_get_ = {
		"CoilDiameter": (105, 2, (9, 0), (), "CoilDiameter", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"CoilRadius": (111, 2, (9, 0), (), "CoilRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Color": (52, 2, (19, 0), (), "Color", None),
		"DamperLength": (104, 2, (9, 0), (), "DamperLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"EachRenderMode": (51, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'),
		"NCoil": (106, 2, (3, 0), (), "NCoil", None),
		"OffsetFromActionMarker": (102, 2, (9, 0), (), "OffsetFromActionMarker", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"OffsetFromBaseMarker": (103, 2, (9, 0), (), "OffsetFromBaseMarker", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SpringDiameter": (101, 2, (9, 0), (), "SpringDiameter", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseCoilDiameter": (109, 2, (11, 0), (), "UseCoilDiameter", None),
		"UseCoilRadius": (110, 2, (11, 0), (), "UseCoilRadius", None),
		"UseDamperLength": (108, 2, (11, 0), (), "UseDamperLength", None),
		"UseSimpleGraphic": (107, 2, (11, 0), (), "UseSimpleGraphic", None),
	}
	_prop_map_put_ = {
		"Color": ((52, LCID, 4, 0),()),
		"EachRenderMode": ((51, LCID, 4, 0),()),
		"NCoil": ((106, LCID, 4, 0),()),
		"UseCoilDiameter": ((109, LCID, 4, 0),()),
		"UseCoilRadius": ((110, LCID, 4, 0),()),
		"UseDamperLength": ((108, LCID, 4, 0),()),
		"UseSimpleGraphic": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceSpringRotational(DispatchBaseClass):
	'''The rotational spring Force can be attached only to a revolute joint.'''
	CLSID = IID('{C5BE32C6-5CCE-4BAF-B0BF-4B304BFEC2C5}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Damping(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "Damping", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FreeAngle(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "FreeAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_PreTorque(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "PreTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Stiffness(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "Stiffness", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Damping = property(_get_Damping, None)
	'''
	Damping

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FreeAngle = property(_get_FreeAngle, None)
	'''
	The free angle of the rotational spring

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	PreTorque = property(_get_PreTorque, None)
	'''
	The pre-torque of the rotational spring

	:type: recurdyn.ProcessNet.IDouble
	'''
	Stiffness = property(_get_Stiffness, None)
	'''
	Stiffness

	:type: recurdyn.ProcessNet.ICoefficient
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Damping": (253, 2, (9, 0), (), "Damping", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FreeAngle": (251, 2, (9, 0), (), "FreeAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"PreTorque": (254, 2, (9, 0), (), "PreTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Stiffness": (252, 2, (9, 0), (), "Stiffness", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceTire(DispatchBaseClass):
	'''Tire force'''
	CLSID = IID('{57CC4E39-380C-40B8-AE7F-0908ADC0DB18}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_ModelType(self):
		return self._ApplyTypes_(*(251, 2, (3, 0), (), "ModelType", '{9BDB8C71-DE78-4530-BC2B-B8C2B800F5F6}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OutputChannel(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "OutputChannel", '{AB5A2925-53BC-4D4C-8101-4C3774E2DDEC}'))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Property(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "Property", '{DB995C7E-C9C4-4C2E-87C7-E4A030ED91AA}'))
	def _get_SolidContact(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "SolidContact", '{C2F210C5-9B2E-43C2-9C50-D57E01780041}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_UserSubroutine(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_ModelType(self, value):
		if "ModelType" in self.__dict__: self.__dict__["ModelType"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UserSubroutine(self, value):
		if "UserSubroutine" in self.__dict__: self.__dict__["UserSubroutine"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	ModelType = property(_get_ModelType, _set_ModelType)
	'''
	Model type

	:type: recurdyn.ProcessNet.TireModel
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OutputChannel = property(_get_OutputChannel, None)
	'''
	Output channel

	:type: recurdyn.ProcessNet.ITireOutputChannel
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Property = property(_get_Property, None)
	'''
	Including the tire physical property

	:type: recurdyn.ProcessNet.ITireProperty
	'''
	SolidContact = property(_get_SolidContact, None)
	'''
	Solid contact

	:type: recurdyn.ProcessNet.IContactSolidContact
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	UserSubroutine = property(_get_UserSubroutine, _set_UserSubroutine)
	'''
	User subroutine

	:type: recurdyn.ProcessNet.IUserSubroutine
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_ModelType": _set_ModelType,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
		"_set_UserSubroutine": _set_UserSubroutine,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"ModelType": (251, 2, (3, 0), (), "ModelType", '{9BDB8C71-DE78-4530-BC2B-B8C2B800F5F6}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OutputChannel": (253, 2, (9, 0), (), "OutputChannel", '{AB5A2925-53BC-4D4C-8101-4C3774E2DDEC}'),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Property": (252, 2, (9, 0), (), "Property", '{DB995C7E-C9C4-4C2E-87C7-E4A030ED91AA}'),
		"SolidContact": (255, 2, (9, 0), (), "SolidContact", '{C2F210C5-9B2E-43C2-9C50-D57E01780041}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"UserSubroutine": (254, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"ModelType": ((251, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"UserSubroutine": ((254, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceTireF(DispatchBaseClass):
	'''FTire Force'''
	CLSID = IID('{0B8D6129-F228-4D87-9952-19E776DFE598}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RoadFile(self):
		return self._ApplyTypes_(*(253, 2, (8, 0), (), "RoadFile", None))
	def _get_TireFile(self):
		return self._ApplyTypes_(*(251, 2, (8, 0), (), "TireFile", None))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseRoadFile(self):
		return self._ApplyTypes_(*(252, 2, (11, 0), (), "UseRoadFile", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_RoadFile(self, value):
		if "RoadFile" in self.__dict__: self.__dict__["RoadFile"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_TireFile(self, value):
		if "TireFile" in self.__dict__: self.__dict__["TireFile"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseRoadFile(self, value):
		if "UseRoadFile" in self.__dict__: self.__dict__["UseRoadFile"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RoadFile = property(_get_RoadFile, _set_RoadFile)
	'''
	Road File

	:type: str
	'''
	TireFile = property(_get_TireFile, _set_TireFile)
	'''
	Tire File

	:type: str
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseRoadFile = property(_get_UseRoadFile, _set_UseRoadFile)
	'''
	Use Road File

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_RoadFile": _set_RoadFile,
		"_set_TireFile": _set_TireFile,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseRoadFile": _set_UseRoadFile,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RoadFile": (253, 2, (8, 0), (), "RoadFile", None),
		"TireFile": (251, 2, (8, 0), (), "TireFile", None),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseRoadFile": (252, 2, (11, 0), (), "UseRoadFile", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"RoadFile": ((253, LCID, 4, 0),()),
		"TireFile": ((251, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseRoadFile": ((252, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceTireMF(DispatchBaseClass):
	'''MFTire Force'''
	CLSID = IID('{F99074AA-1B0D-4BBB-BFDD-8C490375373F}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactMethod(self):
		return self._ApplyTypes_(*(257, 2, (3, 0), (), "ContactMethod", '{6626B787-3A4F-4E99-9400-D81B6652D086}'))
	def _get_Dynamics(self):
		return self._ApplyTypes_(*(258, 2, (3, 0), (), "Dynamics", '{34D32C34-6F51-4C78-9102-E7133D6E2923}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_GRoad(self):
		return self._ApplyTypes_(*(263, 2, (9, 0), (), "GRoad", '{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}'))
	def _get_GRoadType(self):
		return self._ApplyTypes_(*(262, 2, (3, 0), (), "GRoadType", '{DF3430B6-23E8-41C4-B469-24FC7813A9E6}'))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_ModelType(self):
		return self._ApplyTypes_(*(251, 2, (3, 0), (), "ModelType", '{03F79047-C5D9-435A-86C8-50D44AE2E3C9}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RoadFile(self):
		return self._ApplyTypes_(*(254, 2, (8, 0), (), "RoadFile", None))
	def _get_RoadShell(self):
		return self._ApplyTypes_(*(261, 2, (8, 0), (), "RoadShell", None))
	def _get_RoadType(self):
		return self._ApplyTypes_(*(260, 2, (3, 0), (), "RoadType", '{2F533E3C-D633-4EF8-9A2D-550C023DE7CC}'))
	def _get_SlipForces(self):
		return self._ApplyTypes_(*(259, 2, (3, 0), (), "SlipForces", '{9E3407B3-DD21-4775-8E4E-5BA56BA8691D}'))
	def _get_TireFile(self):
		return self._ApplyTypes_(*(252, 2, (8, 0), (), "TireFile", None))
	def _get_TireSide(self):
		return self._ApplyTypes_(*(256, 2, (3, 0), (), "TireSide", '{F0B47155-E2C8-499D-B8A2-2B9BBC744C7C}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_WheelCarrierMarker(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "WheelCarrierMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ContactMethod(self, value):
		if "ContactMethod" in self.__dict__: self.__dict__["ContactMethod"] = value; return
		self._oleobj_.Invoke(*((257, LCID, 4, 0) + (value,) + ()))
	def _set_Dynamics(self, value):
		if "Dynamics" in self.__dict__: self.__dict__["Dynamics"] = value; return
		self._oleobj_.Invoke(*((258, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_GRoad(self, value):
		if "GRoad" in self.__dict__: self.__dict__["GRoad"] = value; return
		self._oleobj_.Invoke(*((263, LCID, 4, 0) + (value,) + ()))
	def _set_GRoadType(self, value):
		if "GRoadType" in self.__dict__: self.__dict__["GRoadType"] = value; return
		self._oleobj_.Invoke(*((262, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_ModelType(self, value):
		if "ModelType" in self.__dict__: self.__dict__["ModelType"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_RoadFile(self, value):
		if "RoadFile" in self.__dict__: self.__dict__["RoadFile"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_RoadShell(self, value):
		if "RoadShell" in self.__dict__: self.__dict__["RoadShell"] = value; return
		self._oleobj_.Invoke(*((261, LCID, 4, 0) + (value,) + ()))
	def _set_RoadType(self, value):
		if "RoadType" in self.__dict__: self.__dict__["RoadType"] = value; return
		self._oleobj_.Invoke(*((260, LCID, 4, 0) + (value,) + ()))
	def _set_SlipForces(self, value):
		if "SlipForces" in self.__dict__: self.__dict__["SlipForces"] = value; return
		self._oleobj_.Invoke(*((259, LCID, 4, 0) + (value,) + ()))
	def _set_TireFile(self, value):
		if "TireFile" in self.__dict__: self.__dict__["TireFile"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_TireSide(self, value):
		if "TireSide" in self.__dict__: self.__dict__["TireSide"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_WheelCarrierMarker(self, value):
		if "WheelCarrierMarker" in self.__dict__: self.__dict__["WheelCarrierMarker"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactMethod = property(_get_ContactMethod, _set_ContactMethod)
	'''
	Contact Method

	:type: recurdyn.ProcessNet.TireContactMethod
	'''
	Dynamics = property(_get_Dynamics, _set_Dynamics)
	'''
	Dynamics

	:type: recurdyn.ProcessNet.TireDynamics
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	GRoad = property(_get_GRoad, _set_GRoad)
	'''
	GRoad

	:type: recurdyn.ProcessNet.IGRoad
	'''
	GRoadType = property(_get_GRoadType, _set_GRoadType)
	'''
	MFTire GRoadType

	:type: recurdyn.ProcessNet.MFTireGRoadType
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	ModelType = property(_get_ModelType, _set_ModelType)
	'''
	Model type

	:type: recurdyn.ProcessNet.MFTireModel
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RoadFile = property(_get_RoadFile, _set_RoadFile)
	'''
	Road File

	:type: str
	'''
	RoadShell = property(_get_RoadShell, _set_RoadShell)
	'''
	IForceTireMF.RoadShell is obsoleted. Use IForceTireMF.GRoad.

	:type: str
	'''
	RoadType = property(_get_RoadType, _set_RoadType)
	'''
	IForceTireMF.RoadType is obsoleted. Use IForceTireMF.GRoadType.

	:type: recurdyn.ProcessNet.MFTireRoadType
	'''
	SlipForces = property(_get_SlipForces, _set_SlipForces)
	'''
	Slip Forces

	:type: recurdyn.ProcessNet.TireSlipForce
	'''
	TireFile = property(_get_TireFile, _set_TireFile)
	'''
	Tire File

	:type: str
	'''
	TireSide = property(_get_TireSide, _set_TireSide)
	'''
	Tire Side

	:type: recurdyn.ProcessNet.TireSideType
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	WheelCarrierMarker = property(_get_WheelCarrierMarker, _set_WheelCarrierMarker)
	'''
	Wheel Carrier Marker

	:type: recurdyn.ProcessNet.IMarker
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ContactMethod": _set_ContactMethod,
		"_set_Dynamics": _set_Dynamics,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_GRoad": _set_GRoad,
		"_set_GRoadType": _set_GRoadType,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_ModelType": _set_ModelType,
		"_set_Name": _set_Name,
		"_set_RoadFile": _set_RoadFile,
		"_set_RoadShell": _set_RoadShell,
		"_set_RoadType": _set_RoadType,
		"_set_SlipForces": _set_SlipForces,
		"_set_TireFile": _set_TireFile,
		"_set_TireSide": _set_TireSide,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
		"_set_WheelCarrierMarker": _set_WheelCarrierMarker,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactMethod": (257, 2, (3, 0), (), "ContactMethod", '{6626B787-3A4F-4E99-9400-D81B6652D086}'),
		"Dynamics": (258, 2, (3, 0), (), "Dynamics", '{34D32C34-6F51-4C78-9102-E7133D6E2923}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"GRoad": (263, 2, (9, 0), (), "GRoad", '{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}'),
		"GRoadType": (262, 2, (3, 0), (), "GRoadType", '{DF3430B6-23E8-41C4-B469-24FC7813A9E6}'),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"ModelType": (251, 2, (3, 0), (), "ModelType", '{03F79047-C5D9-435A-86C8-50D44AE2E3C9}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RoadFile": (254, 2, (8, 0), (), "RoadFile", None),
		"RoadShell": (261, 2, (8, 0), (), "RoadShell", None),
		"RoadType": (260, 2, (3, 0), (), "RoadType", '{2F533E3C-D633-4EF8-9A2D-550C023DE7CC}'),
		"SlipForces": (259, 2, (3, 0), (), "SlipForces", '{9E3407B3-DD21-4775-8E4E-5BA56BA8691D}'),
		"TireFile": (252, 2, (8, 0), (), "TireFile", None),
		"TireSide": (256, 2, (3, 0), (), "TireSide", '{F0B47155-E2C8-499D-B8A2-2B9BBC744C7C}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"WheelCarrierMarker": (255, 2, (9, 0), (), "WheelCarrierMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ContactMethod": ((257, LCID, 4, 0),()),
		"Dynamics": ((258, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"GRoad": ((263, LCID, 4, 0),()),
		"GRoadType": ((262, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"ModelType": ((251, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"RoadFile": ((254, LCID, 4, 0),()),
		"RoadShell": ((261, LCID, 4, 0),()),
		"RoadType": ((260, LCID, 4, 0),()),
		"SlipForces": ((259, LCID, 4, 0),()),
		"TireFile": ((252, LCID, 4, 0),()),
		"TireSide": ((256, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"WheelCarrierMarker": ((255, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceTireSoil(DispatchBaseClass):
	'''SoilTire Force'''
	CLSID = IID('{023C2BF6-0000-41CA-8E0E-C3C047C16C73}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_SoilProperty(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "SoilProperty", '{4BF59E07-A035-4C63-9753-8CA8D16C02B1}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	SoilProperty = property(_get_SoilProperty, None)
	'''
	SoilTire Property

	:type: recurdyn.ProcessNet.ITireSoilProperty
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"SoilProperty": (251, 2, (9, 0), (), "SoilProperty", '{4BF59E07-A035-4C63-9753-8CA8D16C02B1}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IForceTranslational(DispatchBaseClass):
	'''The translational force element generates three orthogonal translational forces. This element applies action forces to the action marker, and the corresponding reaction force is applied to the base marker.'''
	CLSID = IID('{F82CE83C-C5A5-42AC-867F-079BCF051FEA}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ExpressionFX(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "ExpressionFX", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_ExpressionFY(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "ExpressionFY", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_ExpressionFZ(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "ExpressionFZ", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefMarker(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseUserSubroutine(self):
		return self._ApplyTypes_(*(256, 2, (11, 0), (), "UseUserSubroutine", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_UserSubroutine(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ExpressionFX(self, value):
		if "ExpressionFX" in self.__dict__: self.__dict__["ExpressionFX"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_ExpressionFY(self, value):
		if "ExpressionFY" in self.__dict__: self.__dict__["ExpressionFY"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_ExpressionFZ(self, value):
		if "ExpressionFZ" in self.__dict__: self.__dict__["ExpressionFZ"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_RefMarker(self, value):
		if "RefMarker" in self.__dict__: self.__dict__["RefMarker"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseUserSubroutine(self, value):
		if "UseUserSubroutine" in self.__dict__: self.__dict__["UseUserSubroutine"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UserSubroutine(self, value):
		if "UserSubroutine" in self.__dict__: self.__dict__["UserSubroutine"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ExpressionFX = property(_get_ExpressionFX, _set_ExpressionFX)
	'''
	Expression FX

	:type: recurdyn.ProcessNet.IExpression
	'''
	ExpressionFY = property(_get_ExpressionFY, _set_ExpressionFY)
	'''
	Expression FY

	:type: recurdyn.ProcessNet.IExpression
	'''
	ExpressionFZ = property(_get_ExpressionFZ, _set_ExpressionFZ)
	'''
	Expression FZ

	:type: recurdyn.ProcessNet.IExpression
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefMarker = property(_get_RefMarker, _set_RefMarker)
	'''
	Reference marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseUserSubroutine = property(_get_UseUserSubroutine, _set_UseUserSubroutine)
	'''
	Use user subroutine

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	UserSubroutine = property(_get_UserSubroutine, _set_UserSubroutine)
	'''
	User subroutine

	:type: recurdyn.ProcessNet.IUserSubroutine
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ExpressionFX": _set_ExpressionFX,
		"_set_ExpressionFY": _set_ExpressionFY,
		"_set_ExpressionFZ": _set_ExpressionFZ,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_RefMarker": _set_RefMarker,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseUserSubroutine": _set_UseUserSubroutine,
		"_set_UserData": _set_UserData,
		"_set_UserSubroutine": _set_UserSubroutine,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ExpressionFX": (251, 2, (9, 0), (), "ExpressionFX", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"ExpressionFY": (252, 2, (9, 0), (), "ExpressionFY", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"ExpressionFZ": (253, 2, (9, 0), (), "ExpressionFZ", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefMarker": (255, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseUserSubroutine": (256, 2, (11, 0), (), "UseUserSubroutine", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"UserSubroutine": (254, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ExpressionFX": ((251, LCID, 4, 0),()),
		"ExpressionFY": ((252, LCID, 4, 0),()),
		"ExpressionFZ": ((253, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"RefMarker": ((255, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseUserSubroutine": ((256, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"UserSubroutine": ((254, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IFrequencyResponseProperty(DispatchBaseClass):
	'''Frequency response property'''
	CLSID = IID('{7C4DC70C-432E-4059-9983-3628D55F94BD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AmplitudeFactor(self):
		return self._ApplyTypes_(*(56, 2, (9, 0), (), "AmplitudeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_AnimationFrame(self):
		return self._ApplyTypes_(*(55, 2, (9, 0), (), "AnimationFrame", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_EndFrequency(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "EndFrequency", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_IncludeStateMatrix(self):
		return self._ApplyTypes_(*(59, 2, (11, 0), (), "IncludeStateMatrix", None))
	def _get_IncludeSystemDamping(self):
		return self._ApplyTypes_(*(58, 2, (11, 0), (), "IncludeSystemDamping", None))
	def _get_LogarithmicStep(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "LogarithmicStep", None))
	def _get_MaxNumberofMode(self):
		return self._ApplyTypes_(*(57, 2, (9, 0), (), "MaxNumberofMode", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StartFrequency(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "StartFrequency", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Step(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "Step", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	def _set_IncludeStateMatrix(self, value):
		if "IncludeStateMatrix" in self.__dict__: self.__dict__["IncludeStateMatrix"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))
	def _set_IncludeSystemDamping(self, value):
		if "IncludeSystemDamping" in self.__dict__: self.__dict__["IncludeSystemDamping"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))
	def _set_LogarithmicStep(self, value):
		if "LogarithmicStep" in self.__dict__: self.__dict__["LogarithmicStep"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))

	AmplitudeFactor = property(_get_AmplitudeFactor, None)
	'''
	Amplitude factor

	:type: recurdyn.ProcessNet.IDouble
	'''
	AnimationFrame = property(_get_AnimationFrame, None)
	'''
	Animation frame

	:type: recurdyn.ProcessNet.IDouble
	'''
	EndFrequency = property(_get_EndFrequency, None)
	'''
	End frequency

	:type: recurdyn.ProcessNet.IDouble
	'''
	IncludeStateMatrix = property(_get_IncludeStateMatrix, _set_IncludeStateMatrix)
	'''
	Include state matrix

	:type: bool
	'''
	IncludeSystemDamping = property(_get_IncludeSystemDamping, _set_IncludeSystemDamping)
	'''
	Include system damping

	:type: bool
	'''
	LogarithmicStep = property(_get_LogarithmicStep, _set_LogarithmicStep)
	'''
	Logarithmic step

	:type: bool
	'''
	MaxNumberofMode = property(_get_MaxNumberofMode, None)
	'''
	Max number of mode

	:type: recurdyn.ProcessNet.IDouble
	'''
	StartFrequency = property(_get_StartFrequency, None)
	'''
	Start frequency

	:type: recurdyn.ProcessNet.IDouble
	'''
	Step = property(_get_Step, None)
	'''
	Step

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
		"_set_IncludeStateMatrix": _set_IncludeStateMatrix,
		"_set_IncludeSystemDamping": _set_IncludeSystemDamping,
		"_set_LogarithmicStep": _set_LogarithmicStep,
	}
	_prop_map_get_ = {
		"AmplitudeFactor": (56, 2, (9, 0), (), "AmplitudeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"AnimationFrame": (55, 2, (9, 0), (), "AnimationFrame", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"EndFrequency": (52, 2, (9, 0), (), "EndFrequency", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"IncludeStateMatrix": (59, 2, (11, 0), (), "IncludeStateMatrix", None),
		"IncludeSystemDamping": (58, 2, (11, 0), (), "IncludeSystemDamping", None),
		"LogarithmicStep": (54, 2, (11, 0), (), "LogarithmicStep", None),
		"MaxNumberofMode": (57, 2, (9, 0), (), "MaxNumberofMode", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StartFrequency": (51, 2, (9, 0), (), "StartFrequency", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Step": (53, 2, (9, 0), (), "Step", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
		"IncludeStateMatrix": ((59, LCID, 4, 0),()),
		"IncludeSystemDamping": ((58, LCID, 4, 0),()),
		"LogarithmicStep": ((54, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGRoad(DispatchBaseClass):
	'''GRoad'''
	CLSID = IID('{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Color(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "Color", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(152, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_RoadPropertyFileName(self):
		return self._ApplyTypes_(*(153, 2, (8, 0), (), "RoadPropertyFileName", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_RoadPropertyFileName(self, value):
		if "RoadPropertyFileName" in self.__dict__: self.__dict__["RoadPropertyFileName"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Color = property(_get_Color, _set_Color)
	'''
	Color

	:type: int
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	RoadPropertyFileName = property(_get_RoadPropertyFileName, _set_RoadPropertyFileName)
	'''
	Road Property File Name

	:type: str
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Color": _set_Color,
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_RoadPropertyFileName": _set_RoadPropertyFileName,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Color": (151, 2, (19, 0), (), "Color", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (152, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"RoadPropertyFileName": (153, 2, (8, 0), (), "RoadPropertyFileName", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Color": ((151, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"RoadPropertyFileName": ((153, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGRoadCollection(DispatchBaseClass):
	'''IGRoadCollection'''
	CLSID = IID('{8AE3FA68-8066-412B-A1C9-9B360E8AFA35}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGRoad
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGRoad
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IGRoadCreationOption(DispatchBaseClass):
	'''Import option used in creating GRoad'''
	CLSID = IID('{295776CE-69C8-4B65-800F-F458E26F7BA1}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_LeftLength(self):
		return self._ApplyTypes_(*(153, 2, (5, 0), (), "LeftLength", None))
	def _get_Length(self):
		return self._ApplyTypes_(*(151, 2, (5, 0), (), "Length", None))
	def _get_NumOfSegments(self):
		return self._ApplyTypes_(*(155, 2, (3, 0), (), "NumOfSegments", None))
	def _get_RightLength(self):
		return self._ApplyTypes_(*(154, 2, (5, 0), (), "RightLength", None))
	def _get_UseZ_Left(self):
		return self._ApplyTypes_(*(156, 2, (11, 0), (), "UseZ_Left", None))
	def _get_UseZ_Rigth(self):
		return self._ApplyTypes_(*(157, 2, (11, 0), (), "UseZ_Rigth", None))
	def _get_Width(self):
		return self._ApplyTypes_(*(152, 2, (5, 0), (), "Width", None))

	def _set_LeftLength(self, value):
		if "LeftLength" in self.__dict__: self.__dict__["LeftLength"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))
	def _set_Length(self, value):
		if "Length" in self.__dict__: self.__dict__["Length"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_NumOfSegments(self, value):
		if "NumOfSegments" in self.__dict__: self.__dict__["NumOfSegments"] = value; return
		self._oleobj_.Invoke(*((155, LCID, 4, 0) + (value,) + ()))
	def _set_RightLength(self, value):
		if "RightLength" in self.__dict__: self.__dict__["RightLength"] = value; return
		self._oleobj_.Invoke(*((154, LCID, 4, 0) + (value,) + ()))
	def _set_UseZ_Left(self, value):
		if "UseZ_Left" in self.__dict__: self.__dict__["UseZ_Left"] = value; return
		self._oleobj_.Invoke(*((156, LCID, 4, 0) + (value,) + ()))
	def _set_UseZ_Rigth(self, value):
		if "UseZ_Rigth" in self.__dict__: self.__dict__["UseZ_Rigth"] = value; return
		self._oleobj_.Invoke(*((157, LCID, 4, 0) + (value,) + ()))
	def _set_Width(self, value):
		if "Width" in self.__dict__: self.__dict__["Width"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))

	LeftLength = property(_get_LeftLength, _set_LeftLength)
	'''
	Left Length

	:type: float
	'''
	Length = property(_get_Length, _set_Length)
	'''
	Length

	:type: float
	'''
	NumOfSegments = property(_get_NumOfSegments, _set_NumOfSegments)
	'''
	NumOfSegments

	:type: int
	'''
	RightLength = property(_get_RightLength, _set_RightLength)
	'''
	Right Length

	:type: float
	'''
	UseZ_Left = property(_get_UseZ_Left, _set_UseZ_Left)
	'''
	Use Z_Left

	:type: bool
	'''
	UseZ_Rigth = property(_get_UseZ_Rigth, _set_UseZ_Rigth)
	'''
	Use Z_Rigth

	:type: bool
	'''
	Width = property(_get_Width, _set_Width)
	'''
	Width

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_LeftLength": _set_LeftLength,
		"_set_Length": _set_Length,
		"_set_NumOfSegments": _set_NumOfSegments,
		"_set_RightLength": _set_RightLength,
		"_set_UseZ_Left": _set_UseZ_Left,
		"_set_UseZ_Rigth": _set_UseZ_Rigth,
		"_set_Width": _set_Width,
	}
	_prop_map_get_ = {
		"LeftLength": (153, 2, (5, 0), (), "LeftLength", None),
		"Length": (151, 2, (5, 0), (), "Length", None),
		"NumOfSegments": (155, 2, (3, 0), (), "NumOfSegments", None),
		"RightLength": (154, 2, (5, 0), (), "RightLength", None),
		"UseZ_Left": (156, 2, (11, 0), (), "UseZ_Left", None),
		"UseZ_Rigth": (157, 2, (11, 0), (), "UseZ_Rigth", None),
		"Width": (152, 2, (5, 0), (), "Width", None),
	}
	_prop_map_put_ = {
		"LeftLength": ((153, LCID, 4, 0),()),
		"Length": ((151, LCID, 4, 0),()),
		"NumOfSegments": ((155, LCID, 4, 0),()),
		"RightLength": ((154, LCID, 4, 0),()),
		"UseZ_Left": ((156, LCID, 4, 0),()),
		"UseZ_Rigth": ((157, LCID, 4, 0),()),
		"Width": ((152, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeneralConstraint(DispatchBaseClass):
	'''General Constraint'''
	CLSID = IID('{DF992967-ADE4-434E-B7BA-DDA5B595BD44}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(151, 2, (11, 0), (), "Active", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Expression(self):
		return self._ApplyTypes_(*(152, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Expression(self, value):
		if "Expression" in self.__dict__: self.__dict__["Expression"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	If true, GCon becomes active

	:type: bool
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Expression = property(_get_Expression, _set_Expression)
	'''
	Expression

	:type: recurdyn.ProcessNet.IExpression
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Comment": _set_Comment,
		"_set_Expression": _set_Expression,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (151, 2, (11, 0), (), "Active", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Expression": (152, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((151, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Expression": ((152, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeneralConstraintCollection(DispatchBaseClass):
	'''IGeneralConstraintCollection'''
	CLSID = IID('{F63C5479-BE87-431C-963C-DD79C9F33259}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGeneralConstraint
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{DF992967-ADE4-434E-B7BA-DDA5B595BD44}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGeneralConstraint
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{DF992967-ADE4-434E-B7BA-DDA5B595BD44}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{DF992967-ADE4-434E-B7BA-DDA5B595BD44}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{DF992967-ADE4-434E-B7BA-DDA5B595BD44}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IGeneric(DispatchBaseClass):
	'''Generic'''
	CLSID = IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGenericAttribute(DispatchBaseClass):
	'''GenericAttribute'''
	CLSID = IID('{27A86788-8B85-40CF-BE7F-BA915103A7DC}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Comment": _set_Comment,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGenericBase(DispatchBaseClass):
	'''GenericBase'''
	CLSID = IID('{E4EEC972-0593-48B2-A1C7-551AD072EFD8}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGenericCollection(DispatchBaseClass):
	'''IGenericCollection'''
	CLSID = IID('{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGeneric
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{27A86788-8B85-40CF-BE7F-BA915103A7DB}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGeneric
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{27A86788-8B85-40CF-BE7F-BA915103A7DB}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{27A86788-8B85-40CF-BE7F-BA915103A7DB}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IGeometry(DispatchBaseClass):
	'''Geometry'''
	CLSID = IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryArc(DispatchBaseClass):
	'''Geometry arc'''
	CLSID = IID('{6615A98C-4753-43E7-BFC6-D7E2EC7D1737}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Angle(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "Angle", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Radius(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Angle = property(_get_Angle, None)
	'''
	Angle

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Radius = property(_get_Radius, None)
	'''
	Radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Angle": (253, 2, (9, 0), (), "Angle", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Radius": (252, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryArcExtrusion(DispatchBaseClass):
	'''Geometry arc extrusion'''
	CLSID = IID('{7338A8FC-4CD7-472D-B764-578B96254856}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ArcEndAngle(self):
		return self._ApplyTypes_(*(303, 2, (9, 0), (), "ArcEndAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ArcRadius(self):
		return self._ApplyTypes_(*(301, 2, (9, 0), (), "ArcRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ArcStartAngle(self):
		return self._ApplyTypes_(*(302, 2, (9, 0), (), "ArcStartAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ExtrusionLength(self):
		return self._ApplyTypes_(*(304, 2, (9, 0), (), "ExtrusionLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ArcEndAngle = property(_get_ArcEndAngle, None)
	'''
	Arc end angle

	:type: recurdyn.ProcessNet.IDouble
	'''
	ArcRadius = property(_get_ArcRadius, None)
	'''
	Arc radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	ArcStartAngle = property(_get_ArcStartAngle, None)
	'''
	Start Angle is obsolete function

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ExtrusionLength = property(_get_ExtrusionLength, None)
	'''
	Extrusion length

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ArcEndAngle": (303, 2, (9, 0), (), "ArcEndAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ArcRadius": (301, 2, (9, 0), (), "ArcRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ArcStartAngle": (302, 2, (9, 0), (), "ArcStartAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ExtrusionLength": (304, 2, (9, 0), (), "ExtrusionLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryArcRevolution(DispatchBaseClass):
	'''Geometry arc revolution'''
	CLSID = IID('{CC63D830-4DFB-4DFC-920E-966E02DCCE51}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ArcEndAngle(self):
		return self._ApplyTypes_(*(303, 2, (9, 0), (), "ArcEndAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ArcRadius(self):
		return self._ApplyTypes_(*(301, 2, (9, 0), (), "ArcRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ArcStartAngle(self):
		return self._ApplyTypes_(*(302, 2, (9, 0), (), "ArcStartAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ExpectedCPAngle(self):
		return self._ApplyTypes_(*(312, 2, (9, 0), (), "ExpectedCPAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OffsetDistance(self):
		return self._ApplyTypes_(*(313, 2, (9, 0), (), "OffsetDistance", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_OpenEndFace(self):
		return self._ApplyTypes_(*(315, 2, (11, 0), (), "OpenEndFace", None))
	def _get_OpenStartFace(self):
		return self._ApplyTypes_(*(314, 2, (11, 0), (), "OpenStartFace", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Pitch(self):
		return self._ApplyTypes_(*(309, 2, (9, 0), (), "Pitch", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_RevolutionEndAngle(self):
		return self._ApplyTypes_(*(306, 2, (9, 0), (), "RevolutionEndAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RevolutionRadius(self):
		return self._ApplyTypes_(*(304, 2, (9, 0), (), "RevolutionRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RevolutionStartAngle(self):
		return self._ApplyTypes_(*(305, 2, (9, 0), (), "RevolutionStartAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RotationalDirection(self):
		return self._ApplyTypes_(*(308, 2, (3, 0), (), "RotationalDirection", '{4AF9E853-0E68-42B6-8F9B-B3606E38FC28}'))
	def _get_TotalDepth(self):
		return self._ApplyTypes_(*(310, 2, (9, 0), (), "TotalDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseArcCenterOffset(self):
		return self._ApplyTypes_(*(311, 2, (11, 0), (), "UseArcCenterOffset", None))
	def _get_UseHelixCurve(self):
		return self._ApplyTypes_(*(307, 2, (11, 0), (), "UseHelixCurve", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_OpenEndFace(self, value):
		if "OpenEndFace" in self.__dict__: self.__dict__["OpenEndFace"] = value; return
		self._oleobj_.Invoke(*((315, LCID, 4, 0) + (value,) + ()))
	def _set_OpenStartFace(self, value):
		if "OpenStartFace" in self.__dict__: self.__dict__["OpenStartFace"] = value; return
		self._oleobj_.Invoke(*((314, LCID, 4, 0) + (value,) + ()))
	def _set_RotationalDirection(self, value):
		if "RotationalDirection" in self.__dict__: self.__dict__["RotationalDirection"] = value; return
		self._oleobj_.Invoke(*((308, LCID, 4, 0) + (value,) + ()))
	def _set_UseArcCenterOffset(self, value):
		if "UseArcCenterOffset" in self.__dict__: self.__dict__["UseArcCenterOffset"] = value; return
		self._oleobj_.Invoke(*((311, LCID, 4, 0) + (value,) + ()))
	def _set_UseHelixCurve(self, value):
		if "UseHelixCurve" in self.__dict__: self.__dict__["UseHelixCurve"] = value; return
		self._oleobj_.Invoke(*((307, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ArcEndAngle = property(_get_ArcEndAngle, None)
	'''
	Arc end angle

	:type: recurdyn.ProcessNet.IDouble
	'''
	ArcRadius = property(_get_ArcRadius, None)
	'''
	Arc radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	ArcStartAngle = property(_get_ArcStartAngle, None)
	'''
	Arc start angle

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ExpectedCPAngle = property(_get_ExpectedCPAngle, None)
	'''
	Expected Center Point Angle

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OffsetDistance = property(_get_OffsetDistance, None)
	'''
	Offset Distance

	:type: recurdyn.ProcessNet.IDouble
	'''
	OpenEndFace = property(_get_OpenEndFace, _set_OpenEndFace)
	'''
	Open end face

	:type: bool
	'''
	OpenStartFace = property(_get_OpenStartFace, _set_OpenStartFace)
	'''
	Open start face

	:type: bool
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Pitch = property(_get_Pitch, None)
	'''
	Pitch

	:type: recurdyn.ProcessNet.IDouble
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	RevolutionEndAngle = property(_get_RevolutionEndAngle, None)
	'''
	Revolution end angle

	:type: recurdyn.ProcessNet.IDouble
	'''
	RevolutionRadius = property(_get_RevolutionRadius, None)
	'''
	Revolution radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	RevolutionStartAngle = property(_get_RevolutionStartAngle, None)
	'''
	Revolution start angle

	:type: recurdyn.ProcessNet.IDouble
	'''
	RotationalDirection = property(_get_RotationalDirection, _set_RotationalDirection)
	'''
	Rotational Direction Type

	:type: recurdyn.ProcessNet.RotationalDirectionType
	'''
	TotalDepth = property(_get_TotalDepth, None)
	'''
	TotalDepth

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseArcCenterOffset = property(_get_UseArcCenterOffset, _set_UseArcCenterOffset)
	'''
	Use Arc Center Offset

	:type: bool
	'''
	UseHelixCurve = property(_get_UseHelixCurve, _set_UseHelixCurve)
	'''
	Use HelixCurve

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_OpenEndFace": _set_OpenEndFace,
		"_set_OpenStartFace": _set_OpenStartFace,
		"_set_RotationalDirection": _set_RotationalDirection,
		"_set_UseArcCenterOffset": _set_UseArcCenterOffset,
		"_set_UseHelixCurve": _set_UseHelixCurve,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ArcEndAngle": (303, 2, (9, 0), (), "ArcEndAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ArcRadius": (301, 2, (9, 0), (), "ArcRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ArcStartAngle": (302, 2, (9, 0), (), "ArcStartAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ExpectedCPAngle": (312, 2, (9, 0), (), "ExpectedCPAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OffsetDistance": (313, 2, (9, 0), (), "OffsetDistance", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"OpenEndFace": (315, 2, (11, 0), (), "OpenEndFace", None),
		"OpenStartFace": (314, 2, (11, 0), (), "OpenStartFace", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Pitch": (309, 2, (9, 0), (), "Pitch", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"RevolutionEndAngle": (306, 2, (9, 0), (), "RevolutionEndAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RevolutionRadius": (304, 2, (9, 0), (), "RevolutionRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RevolutionStartAngle": (305, 2, (9, 0), (), "RevolutionStartAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RotationalDirection": (308, 2, (3, 0), (), "RotationalDirection", '{4AF9E853-0E68-42B6-8F9B-B3606E38FC28}'),
		"TotalDepth": (310, 2, (9, 0), (), "TotalDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseArcCenterOffset": (311, 2, (11, 0), (), "UseArcCenterOffset", None),
		"UseHelixCurve": (307, 2, (11, 0), (), "UseHelixCurve", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"OpenEndFace": ((315, LCID, 4, 0),()),
		"OpenStartFace": ((314, LCID, 4, 0),()),
		"RotationalDirection": ((308, LCID, 4, 0),()),
		"UseArcCenterOffset": ((311, LCID, 4, 0),()),
		"UseHelixCurve": ((307, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryBox(DispatchBaseClass):
	'''Geometry box'''
	CLSID = IID('{7B6155CC-0035-4449-9748-DFCE0956F5D9}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Depth(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Height(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "Height", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_Width(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "Width", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Depth = property(_get_Depth, None)
	'''
	Depth

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Height = property(_get_Height, None)
	'''
	Height

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	Width = property(_get_Width, None)
	'''
	Width

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Depth": (252, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Height": (253, 2, (9, 0), (), "Height", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"Width": (254, 2, (9, 0), (), "Width", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryCircle(DispatchBaseClass):
	'''Geometry circle'''
	CLSID = IID('{4B132713-20F9-475D-B175-CED5735E2825}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Radius(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Radius = property(_get_Radius, None)
	'''
	Radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Radius": (252, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryCone(DispatchBaseClass):
	'''Geometry cone'''
	CLSID = IID('{1A304704-02AE-4939-8CD1-0DBCDE3F526B}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FirstRadius(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "FirstRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Height(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "Height", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_SecondRadius(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "SecondRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FirstRadius = property(_get_FirstRadius, None)
	'''
	First radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Height = property(_get_Height, None)
	'''
	Height

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	SecondRadius = property(_get_SecondRadius, None)
	'''
	Second radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FirstRadius": (253, 2, (9, 0), (), "FirstRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Height": (252, 2, (9, 0), (), "Height", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"SecondRadius": (254, 2, (9, 0), (), "SecondRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryCylinder(DispatchBaseClass):
	'''Geometry cylinder'''
	CLSID = IID('{5810C7E4-F627-4171-9D64-4BC97F14BB8E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetFirstPoint(self):
		'''
		Get first point
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(256, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetFirstPoint', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetSecondPoint(self):
		'''
		Get second point
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(258, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetSecondPoint', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def SetFirstPoint(self, x, y, z):
		'''
		Set first point
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(255, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),x
			, y, z)


	def SetSecondPoint(self, x, y, z):
		'''
		Set second point
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(257, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),x
			, y, z)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FirstParametricPoint(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "FirstParametricPoint", '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Radius(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_SecondParametricPoint(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "SecondParametricPoint", '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_FirstParametricPoint(self, value):
		if "FirstParametricPoint" in self.__dict__: self.__dict__["FirstParametricPoint"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_SecondParametricPoint(self, value):
		if "SecondParametricPoint" in self.__dict__: self.__dict__["SecondParametricPoint"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FirstParametricPoint = property(_get_FirstParametricPoint, _set_FirstParametricPoint)
	'''
	First parametric point

	:type: recurdyn.ProcessNet.IParametricPoint
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Radius = property(_get_Radius, None)
	'''
	Radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	SecondParametricPoint = property(_get_SecondParametricPoint, _set_SecondParametricPoint)
	'''
	Second parametric point

	:type: recurdyn.ProcessNet.IParametricPoint
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_FirstParametricPoint": _set_FirstParametricPoint,
		"_set_Name": _set_Name,
		"_set_SecondParametricPoint": _set_SecondParametricPoint,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FirstParametricPoint": (253, 2, (9, 0), (), "FirstParametricPoint", '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Radius": (252, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"SecondParametricPoint": (254, 2, (9, 0), (), "SecondParametricPoint", '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"FirstParametricPoint": ((253, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"SecondParametricPoint": ((254, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryEdge(DispatchBaseClass):
	'''Geometry edge'''
	CLSID = IID('{263D2898-9FED-4649-9CF5-8D043CC759A2}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def EndPoint(self):
		'''
		Edge End Point
		
		:rtype: recurdyn.ProcessNet.IPoint3D
		'''
		ret = self._oleobj_.InvokeTypes(253, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'EndPoint', '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')
		return ret

	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def Length(self):
		'''
		Edge Length
		
		:rtype: float
		'''
		return self._oleobj_.InvokeTypes(251, LCID, 1, (5, 0), (),)


	def StartPoint(self):
		'''
		Edge Start Point
		
		:rtype: recurdyn.ProcessNet.IPoint3D
		'''
		ret = self._oleobj_.InvokeTypes(252, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'StartPoint', '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')
		return ret

	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryEdgeCollection(DispatchBaseClass):
	'''Geometry Edge Collection'''
	CLSID = IID('{C760B0C7-18A0-463E-BC13-07F6B3931B32}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Add(self, pVal):
		'''
		Add a edge to the edge collecion
		
		:param pVal: IGeometryEdge
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def Delete(self, iIndex):
		'''
		Delete a edge to the edge collection
		
		:param iIndex: int
		'''
		return self._oleobj_.InvokeTypes(52, LCID, 1, (24, 0), ((3, 1),),iIndex
			)


	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IGeometryEdge
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{263D2898-9FED-4649-9CF5-8D043CC759A2}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IGeometryEdge
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{263D2898-9FED-4649-9CF5-8D043CC759A2}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{263D2898-9FED-4649-9CF5-8D043CC759A2}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{263D2898-9FED-4649-9CF5-8D043CC759A2}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IGeometryEdgeCurve(DispatchBaseClass):
	'''Geometry EdgeCurve'''
	CLSID = IID('{6FA36EFD-91A9-49CF-AC3F-595F8CDCD6AD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryFace(DispatchBaseClass):
	'''Geometry face'''
	CLSID = IID('{C5D7538F-B727-4D10-9D7D-D743D92ACAB4}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryFaceCollection(DispatchBaseClass):
	'''Geometry Face Collection'''
	CLSID = IID('{B5FF572C-A887-464A-8C86-0E92F1ED744F}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Add(self, pVal):
		'''
		Add a Face to the Face collecion
		
		:param pVal: IGeometryFace
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def Delete(self, iIndex):
		'''
		Delete a Face to the Face collection
		
		:param iIndex: int
		'''
		return self._oleobj_.InvokeTypes(52, LCID, 1, (24, 0), ((3, 1),),iIndex
			)


	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IGeometryFace
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{C5D7538F-B727-4D10-9D7D-D743D92ACAB4}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IGeometryFace
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{C5D7538F-B727-4D10-9D7D-D743D92ACAB4}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{C5D7538F-B727-4D10-9D7D-D743D92ACAB4}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{C5D7538F-B727-4D10-9D7D-D743D92ACAB4}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IGeometryFaceSurface(DispatchBaseClass):
	'''Geometry face surface'''
	CLSID = IID('{A376DBCC-6EA1-4170-97B7-7208ECE52A76}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryHelixCurve(DispatchBaseClass):
	'''Geometry helix curve'''
	CLSID = IID('{0FFFB2FB-E83D-431E-8769-1FCFDFBC6BD5}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Pitch(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "Pitch", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_RotationalDirection(self):
		return self._ApplyTypes_(*(252, 2, (3, 0), (), "RotationalDirection", '{4AF9E853-0E68-42B6-8F9B-B3606E38FC28}'))
	def _get_SpinRadius(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "SpinRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_TotalDepth(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "TotalDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_RotationalDirection(self, value):
		if "RotationalDirection" in self.__dict__: self.__dict__["RotationalDirection"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Pitch = property(_get_Pitch, None)
	'''
	Pitch

	:type: recurdyn.ProcessNet.IDouble
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	RotationalDirection = property(_get_RotationalDirection, _set_RotationalDirection)
	'''
	Rotational Direction Type

	:type: recurdyn.ProcessNet.RotationalDirectionType
	'''
	SpinRadius = property(_get_SpinRadius, None)
	'''
	Spin radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	TotalDepth = property(_get_TotalDepth, None)
	'''
	TotalDepth

	:type: recurdyn.ProcessNet.IDouble
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_RotationalDirection": _set_RotationalDirection,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Pitch": (253, 2, (9, 0), (), "Pitch", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"RotationalDirection": (252, 2, (3, 0), (), "RotationalDirection", '{4AF9E853-0E68-42B6-8F9B-B3606E38FC28}'),
		"SpinRadius": (251, 2, (9, 0), (), "SpinRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"TotalDepth": (254, 2, (9, 0), (), "TotalDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"RotationalDirection": ((252, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryLink(DispatchBaseClass):
	'''Geometry link'''
	CLSID = IID('{AD48AFB0-D8CA-4168-B727-A352242BDFEE}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetFirstPoint(self):
		'''
		Get first point
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(259, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetFirstPoint', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def GetNormalDirection(self):
		'''
		Get normal direction
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(263, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetNormalDirection', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetSecondPoint(self):
		'''
		Get second point
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(261, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetSecondPoint', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def SetFirstPoint(self, x, y, z):
		'''
		Set first point
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(258, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),x
			, y, z)


	def SetNormalDirection(self, x, y, z):
		'''
		Set normal direction
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(262, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),x
			, y, z)


	def SetSecondPoint(self, x, y, z):
		'''
		Set second point
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(260, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),x
			, y, z)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Depth(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FirstParametricPoint(self):
		return self._ApplyTypes_(*(256, 2, (9, 0), (), "FirstParametricPoint", '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}'))
	def _get_FirstRadius(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "FirstRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_SecondParametricPoint(self):
		return self._ApplyTypes_(*(257, 2, (9, 0), (), "SecondParametricPoint", '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}'))
	def _get_SecondRadius(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "SecondRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_FirstParametricPoint(self, value):
		if "FirstParametricPoint" in self.__dict__: self.__dict__["FirstParametricPoint"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_SecondParametricPoint(self, value):
		if "SecondParametricPoint" in self.__dict__: self.__dict__["SecondParametricPoint"] = value; return
		self._oleobj_.Invoke(*((257, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Depth = property(_get_Depth, None)
	'''
	Depth

	:type: recurdyn.ProcessNet.IDouble
	'''
	FirstParametricPoint = property(_get_FirstParametricPoint, _set_FirstParametricPoint)
	'''
	First parametric point

	:type: recurdyn.ProcessNet.IParametricPoint
	'''
	FirstRadius = property(_get_FirstRadius, None)
	'''
	First radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	SecondParametricPoint = property(_get_SecondParametricPoint, _set_SecondParametricPoint)
	'''
	Second parametric point

	:type: recurdyn.ProcessNet.IParametricPoint
	'''
	SecondRadius = property(_get_SecondRadius, None)
	'''
	Second radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_FirstParametricPoint": _set_FirstParametricPoint,
		"_set_Name": _set_Name,
		"_set_SecondParametricPoint": _set_SecondParametricPoint,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Depth": (252, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FirstParametricPoint": (256, 2, (9, 0), (), "FirstParametricPoint", '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}'),
		"FirstRadius": (253, 2, (9, 0), (), "FirstRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"SecondParametricPoint": (257, 2, (9, 0), (), "SecondParametricPoint", '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}'),
		"SecondRadius": (254, 2, (9, 0), (), "SecondRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"FirstParametricPoint": ((256, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"SecondParametricPoint": ((257, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryOutline(DispatchBaseClass):
	'''Geometry outline'''
	CLSID = IID('{31C17D32-0501-4F95-96DC-5ED97F6994A6}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def ImportFile(self, pVal):
		'''
		Import file
		
		:param pVal: str
		'''
		return self._oleobj_.InvokeTypes(252, LCID, 1, (24, 0), ((8, 1),),pVal
			)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FileName(self):
		return self._ApplyTypes_(*(254, 2, (8, 0), (), "FileName", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_PointCollection(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "PointCollection", '{6BEF9B6B-4708-445E-A3B5-0D65BA69F749}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_Type(self):
		return self._ApplyTypes_(*(253, 2, (3, 0), (), "Type", '{8D06B177-D68B-407B-8178-F00E4173ABCE}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_FileName(self, value):
		if "FileName" in self.__dict__: self.__dict__["FileName"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FileName = property(_get_FileName, _set_FileName)
	'''
	File name

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	PointCollection = property(_get_PointCollection, None)
	'''
	Point Collection

	:type: recurdyn.ProcessNet.IPointCollection
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	Type = property(_get_Type, None)
	'''
	GeometrySpline type

	:type: recurdyn.ProcessNet.GeometryOutlineType
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_FileName": _set_FileName,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FileName": (254, 2, (8, 0), (), "FileName", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"PointCollection": (251, 2, (9, 0), (), "PointCollection", '{6BEF9B6B-4708-445E-A3B5-0D65BA69F749}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"Type": (253, 2, (3, 0), (), "Type", '{8D06B177-D68B-407B-8178-F00E4173ABCE}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"FileName": ((254, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryOutlineSurface(DispatchBaseClass):
	'''Geometry outline surface'''
	CLSID = IID('{733031A0-28F6-4064-9C40-FDC74CFA015E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryPrism(DispatchBaseClass):
	'''Geometry prism'''
	CLSID = IID('{CD73C8BF-C8F4-451C-BE3F-E7E06BA247FD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Height(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "Height", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_NSides(self):
		return self._ApplyTypes_(*(254, 2, (19, 0), (), "NSides", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Radius(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_NSides(self, value):
		if "NSides" in self.__dict__: self.__dict__["NSides"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Height = property(_get_Height, None)
	'''
	Height

	:type: recurdyn.ProcessNet.IDouble
	'''
	NSides = property(_get_NSides, _set_NSides)
	'''
	Number of sides

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Radius = property(_get_Radius, None)
	'''
	Radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_NSides": _set_NSides,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Height": (252, 2, (9, 0), (), "Height", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"NSides": (254, 2, (19, 0), (), "NSides", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Radius": (253, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"NSides": ((254, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySheet(DispatchBaseClass):
	'''Geometry sheet'''
	CLSID = IID('{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySheetCollection(DispatchBaseClass):
	'''IGeometrySheetCollection'''
	CLSID = IID('{5E8000B9-06C7-46B2-A736-5D43904C8878}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGeometrySheet
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGeometrySheet
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IGeometrySheetExtrude(DispatchBaseClass):
	'''Geometry extrusion sheet'''
	CLSID = IID('{F7EEC6D6-7358-4316-AFEC-3457934B08F8}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Depth(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ExtrudeDirection(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "ExtrudeDirection", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Depth = property(_get_Depth, None)
	'''
	Extrusion Length

	:type: recurdyn.ProcessNet.IDouble
	'''
	ExtrudeDirection = property(_get_ExtrudeDirection, None)
	'''
	Extrusion Direction

	:type: recurdyn.ProcessNet.IVector
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Depth": (251, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ExtrudeDirection": (252, 2, (9, 0), (), "ExtrudeDirection", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySheetScale(DispatchBaseClass):
	'''Geometry Scale Sheet'''
	CLSID = IID('{AF74F925-2234-4D16-ACFA-4206843C8854}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScaleReferenceFrameMarker(self):
		'''
		Reference frame
		
		:rtype: recurdyn.ProcessNet.IMarker
		'''
		ret = self._oleobj_.InvokeTypes(257, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'GetScaleReferenceFrameMarker', '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')
		return ret

	def SetScaleReferenceFrameMarker(self, ppVal):
		'''
		Reference frame
		
		:param ppVal: IMarker
		'''
		return self._oleobj_.InvokeTypes(258, LCID, 1, (24, 0), ((9, 1),),ppVal
			)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_PreviousGeometry(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "PreviousGeometry", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_ScaleX(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "ScaleX", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ScaleY(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "ScaleY", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ScaleZ(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "ScaleZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseGeometryReferenceFrame(self):
		return self._ApplyTypes_(*(256, 2, (11, 0), (), "UseGeometryReferenceFrame", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UseGeometryReferenceFrame(self, value):
		if "UseGeometryReferenceFrame" in self.__dict__: self.__dict__["UseGeometryReferenceFrame"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	PreviousGeometry = property(_get_PreviousGeometry, None)
	'''
	Previous geometry

	:type: recurdyn.ProcessNet.IGeometry
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	ScaleX = property(_get_ScaleX, None)
	'''
	Scale X

	:type: recurdyn.ProcessNet.IDouble
	'''
	ScaleY = property(_get_ScaleY, None)
	'''
	Scale Y

	:type: recurdyn.ProcessNet.IDouble
	'''
	ScaleZ = property(_get_ScaleZ, None)
	'''
	Scale Z

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseGeometryReferenceFrame = property(_get_UseGeometryReferenceFrame, _set_UseGeometryReferenceFrame)
	'''
	Use Geometry Reference Frame

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UseGeometryReferenceFrame": _set_UseGeometryReferenceFrame,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"PreviousGeometry": (255, 2, (9, 0), (), "PreviousGeometry", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"ScaleX": (252, 2, (9, 0), (), "ScaleX", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ScaleY": (253, 2, (9, 0), (), "ScaleY", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ScaleZ": (254, 2, (9, 0), (), "ScaleZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseGeometryReferenceFrame": (256, 2, (11, 0), (), "UseGeometryReferenceFrame", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UseGeometryReferenceFrame": ((256, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySheetSpin(DispatchBaseClass):
	'''Geometry spin sheet'''
	CLSID = IID('{952BEF3F-0EA1-4F2B-9EA4-5214261533D2}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Angle(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "Angle", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_AxisEnd(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "AxisEnd", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_AxisStart(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "AxisStart", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Angle = property(_get_Angle, None)
	'''
	Spin Angle

	:type: recurdyn.ProcessNet.IDouble
	'''
	AxisEnd = property(_get_AxisEnd, None)
	'''
	End Point of Axis

	:type: recurdyn.ProcessNet.IVector
	'''
	AxisStart = property(_get_AxisStart, None)
	'''
	Start Point of Axis

	:type: recurdyn.ProcessNet.IVector
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Angle": (251, 2, (9, 0), (), "Angle", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"AxisEnd": (253, 2, (9, 0), (), "AxisEnd", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"AxisStart": (252, 2, (9, 0), (), "AxisStart", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySheetSweep(DispatchBaseClass):
	'''Geometry sweep sheet'''
	CLSID = IID('{1820726B-54D0-4A1F-AEAB-284DEC6C1270}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_AlignmentType(self):
		return self._ApplyTypes_(*(254, 2, (3, 0), (), "AlignmentType", '{38A75F5E-2E55-4F2C-9566-24B0305E3C12}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_PathType(self):
		return self._ApplyTypes_(*(253, 2, (3, 0), (), "PathType", '{D8CE6E05-CFFB-491D-BE96-E8CB84F353B8}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_TranslationVector(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "TranslationVector", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_WirePath(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "WirePath", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}'))

	def _set_AlignmentType(self, value):
		if "AlignmentType" in self.__dict__: self.__dict__["AlignmentType"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_PathType(self, value):
		if "PathType" in self.__dict__: self.__dict__["PathType"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_WirePath(self, value):
		if "WirePath" in self.__dict__: self.__dict__["WirePath"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))

	AlignmentType = property(_get_AlignmentType, _set_AlignmentType)
	'''
	Sweep Alignment type

	:type: recurdyn.ProcessNet.SweepAlignmentType
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	PathType = property(_get_PathType, _set_PathType)
	'''
	Sweep Path type

	:type: recurdyn.ProcessNet.SweepPathType
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	TranslationVector = property(_get_TranslationVector, None)
	'''
	Translation Vector

	:type: recurdyn.ProcessNet.IVector
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	WirePath = property(_get_WirePath, _set_WirePath)
	'''
	Wire Path

	:type: recurdyn.ProcessNet.IGeometryWire
	'''

	_prop_map_set_function_ = {
		"_set_AlignmentType": _set_AlignmentType,
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_PathType": _set_PathType,
		"_set_UserData": _set_UserData,
		"_set_WirePath": _set_WirePath,
	}
	_prop_map_get_ = {
		"AlignmentType": (254, 2, (3, 0), (), "AlignmentType", '{38A75F5E-2E55-4F2C-9566-24B0305E3C12}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"PathType": (253, 2, (3, 0), (), "PathType", '{D8CE6E05-CFFB-491D-BE96-E8CB84F353B8}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"TranslationVector": (252, 2, (9, 0), (), "TranslationVector", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"WirePath": (251, 2, (9, 0), (), "WirePath", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}'),
	}
	_prop_map_put_ = {
		"AlignmentType": ((254, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"PathType": ((253, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"WirePath": ((251, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySheetUVSurface(DispatchBaseClass):
	'''Geometry UV Surface'''
	CLSID = IID('{ED1BD483-9372-48BA-BBC2-AC349EB1C6F3}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FirstEdgeGroup(self):
		return self._ApplyTypes_(*(253, 2, (8200, 0), (), "FirstEdgeGroup", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_ThirdEdgeGroup(self):
		return self._ApplyTypes_(*(254, 2, (8200, 0), (), "ThirdEdgeGroup", None))
	def _get_UValue(self):
		return self._ApplyTypes_(*(251, 2, (5, 0), (), "UValue", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_VValue(self):
		return self._ApplyTypes_(*(252, 2, (5, 0), (), "VValue", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_FirstEdgeGroup(self, value):
		if "FirstEdgeGroup" in self.__dict__: self.__dict__["FirstEdgeGroup"] = value; return
		variantValue = win32com.client.VARIANT(8200, value)
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_ThirdEdgeGroup(self, value):
		if "ThirdEdgeGroup" in self.__dict__: self.__dict__["ThirdEdgeGroup"] = value; return
		variantValue = win32com.client.VARIANT(8200, value)
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (variantValue,) + ()))
	def _set_UValue(self, value):
		if "UValue" in self.__dict__: self.__dict__["UValue"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_VValue(self, value):
		if "VValue" in self.__dict__: self.__dict__["VValue"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FirstEdgeGroup = property(_get_FirstEdgeGroup, _set_FirstEdgeGroup)
	'''
	First edge group

	:type: list[str]
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	ThirdEdgeGroup = property(_get_ThirdEdgeGroup, _set_ThirdEdgeGroup)
	'''
	Third edge group

	:type: list[str]
	'''
	UValue = property(_get_UValue, _set_UValue)
	'''
	U value

	:type: float
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	VValue = property(_get_VValue, _set_VValue)
	'''
	V value

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_FirstEdgeGroup": _set_FirstEdgeGroup,
		"_set_Name": _set_Name,
		"_set_ThirdEdgeGroup": _set_ThirdEdgeGroup,
		"_set_UValue": _set_UValue,
		"_set_UserData": _set_UserData,
		"_set_VValue": _set_VValue,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FirstEdgeGroup": (253, 2, (8200, 0), (), "FirstEdgeGroup", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"ThirdEdgeGroup": (254, 2, (8200, 0), (), "ThirdEdgeGroup", None),
		"UValue": (251, 2, (5, 0), (), "UValue", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"VValue": (252, 2, (5, 0), (), "VValue", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"FirstEdgeGroup": ((253, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"ThirdEdgeGroup": ((254, LCID, 4, 0),()),
		"UValue": ((251, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"VValue": ((252, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryShell(DispatchBaseClass):
	'''Geometry shell'''
	CLSID = IID('{1E1952F0-7A7C-453F-BB98-38A23BAE1312}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Color(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "Color", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(152, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Color = property(_get_Color, _set_Color)
	'''
	Color

	:type: int
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Color": _set_Color,
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Color": (151, 2, (19, 0), (), "Color", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (152, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Color": ((151, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryShellCollection(DispatchBaseClass):
	'''IGeometryShellCollection'''
	CLSID = IID('{C6162712-FA98-4EF1-8B94-E326943E0626}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGeometryShell
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{1E1952F0-7A7C-453F-BB98-38A23BAE1312}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGeometryShell
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{1E1952F0-7A7C-453F-BB98-38A23BAE1312}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{1E1952F0-7A7C-453F-BB98-38A23BAE1312}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{1E1952F0-7A7C-453F-BB98-38A23BAE1312}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IGeometrySolid(DispatchBaseClass):
	'''Geometry solid'''
	CLSID = IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySolidBoolean(DispatchBaseClass):
	'''Geometry Boolean Solid'''
	CLSID = IID('{4F1C59D0-B6B4-43F8-8CBC-7253AB041F42}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def SwapGeometry(self, ppTarget, ppTool):
		'''
		Swap Geometry
		
		:param ppTarget: IGeometrySolid
		:param ppTool: IGeometrySolid
		'''
		return self._oleobj_.InvokeTypes(256, LCID, 1, (24, 0), ((9, 1), (9, 1)),ppTarget
			, ppTool)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_GeometryFirst(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "GeometryFirst", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}'))
	def _get_GeometrySecond(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "GeometrySecond", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}'))
	def _get_GeometrySecondCollection(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "GeometrySecondCollection", '{DB55951D-F238-46D3-9C25-7B4B87F34D36}'))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_SwapGeometryFirst(self, value):
		if "SwapGeometryFirst" in self.__dict__: self.__dict__["SwapGeometryFirst"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_SwapGeometrySecond(self, value):
		if "SwapGeometrySecond" in self.__dict__: self.__dict__["SwapGeometrySecond"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	GeometryFirst = property(_get_GeometryFirst, None)
	'''
	First Geometry

	:type: recurdyn.ProcessNet.IGeometrySolid
	'''
	GeometrySecond = property(_get_GeometrySecond, None)
	'''
	Second Geometry

	:type: recurdyn.ProcessNet.IGeometrySolid
	'''
	GeometrySecondCollection = property(_get_GeometrySecondCollection, None)
	'''
	Second Geometries

	:type: recurdyn.ProcessNet.IGeometrySolidCollection
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	SwapGeometryFirst = property(None, _set_SwapGeometryFirst)
	'''
	Swap First Geometry

	:type: recurdyn.ProcessNet.IGeometrySolid
	'''
	SwapGeometrySecond = property(None, _set_SwapGeometrySecond)
	'''
	Swap Second Geometry

	:type: recurdyn.ProcessNet.IGeometrySolid
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_SwapGeometryFirst": _set_SwapGeometryFirst,
		"_set_SwapGeometrySecond": _set_SwapGeometrySecond,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"GeometryFirst": (251, 2, (9, 0), (), "GeometryFirst", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}'),
		"GeometrySecond": (252, 2, (9, 0), (), "GeometrySecond", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}'),
		"GeometrySecondCollection": (255, 2, (9, 0), (), "GeometrySecondCollection", '{DB55951D-F238-46D3-9C25-7B4B87F34D36}'),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"SwapGeometryFirst": ((253, LCID, 4, 0),()),
		"SwapGeometrySecond": ((254, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySolidChamfer(DispatchBaseClass):
	'''Geometry Chamfer Solid'''
	CLSID = IID('{7E1C6724-070E-41D1-A9F7-B771847EB47D}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddChamferEdgeInfo(self, pMultiEdges, dFirst, dSecond):
		'''
		Add Chamfer Edge Info
		
		:param pMultiEdges: list[object]
		:param dFirst: float
		:param dSecond: float
		'''
		_pMultiEdges_type = True if pMultiEdges and isinstance(pMultiEdges[0], win32com.client.VARIANT) else False
		if not _pMultiEdges_type:
			pMultiEdges = [win32com.client.VARIANT(12, _data) for _data in pMultiEdges]

		ret = self._oleobj_.InvokeTypes(252, LCID, 1, (24, 0), ((8204, 1), (5, 1), (5, 1)),pMultiEdges
			, dFirst, dSecond)

		if not _pMultiEdges_type:
			pMultiEdges = [_data.value for _data in pMultiEdges]

		return ret


	def ClearChamferEdgeInfo(self):
		'''
		Clear Chamfer Edge Info
		'''
		return self._oleobj_.InvokeTypes(254, LCID, 1, (24, 0), (),)


	def DeleteChamferEdgeInfo(self, nIndex):
		'''
		Delete Chamfer Edge Info
		
		:param nIndex: int
		'''
		return self._oleobj_.InvokeTypes(253, LCID, 1, (24, 0), ((3, 1),),nIndex
			)


	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def UpdateGeometry(self):
		'''
		Update Geometry Data
		'''
		return self._oleobj_.InvokeTypes(255, LCID, 1, (24, 0), (),)


	def _get_ChamferEdgeInfoCollection(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "ChamferEdgeInfoCollection", '{8FCE6A87-0E72-4BE8-89FB-3C074B7A50C5}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_PreviousGeometry(self):
		return self._ApplyTypes_(*(256, 2, (9, 0), (), "PreviousGeometry", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ChamferEdgeInfoCollection = property(_get_ChamferEdgeInfoCollection, None)
	'''
	Chamfer Edge Info Collection

	:type: recurdyn.ProcessNet.IChamferEdgeInfoCollection
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	PreviousGeometry = property(_get_PreviousGeometry, None)
	'''
	Previous geometry

	:type: recurdyn.ProcessNet.IGeometrySolid
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ChamferEdgeInfoCollection": (251, 2, (9, 0), (), "ChamferEdgeInfoCollection", '{8FCE6A87-0E72-4BE8-89FB-3C074B7A50C5}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"PreviousGeometry": (256, 2, (9, 0), (), "PreviousGeometry", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySolidCollection(DispatchBaseClass):
	'''IGeometrySolidCollection'''
	CLSID = IID('{DB55951D-F238-46D3-9C25-7B4B87F34D36}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGeometrySolid
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGeometrySolid
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IGeometrySolidExtrude(DispatchBaseClass):
	'''Geometry extrusion solid'''
	CLSID = IID('{E14CE330-FB54-47C9-A917-4D1854365E86}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetExtrusionDirection(self):
		'''
		Get Extrusion Direction, internal use only
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(253, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetExtrusionDirection', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Depth(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ExtrudeDirection(self):
		return self._ApplyTypes_(*(252, 2, (3, 0), (), "ExtrudeDirection", '{8F05A754-9226-44BB-A8D6-CD3CF1B03623}'))
	def _get_ExtrudeDirectionVector(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "ExtrudeDirectionVector", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ExtrudeDirection(self, value):
		if "ExtrudeDirection" in self.__dict__: self.__dict__["ExtrudeDirection"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Depth = property(_get_Depth, None)
	'''
	Extrusion Length

	:type: recurdyn.ProcessNet.IDouble
	'''
	ExtrudeDirection = property(_get_ExtrudeDirection, _set_ExtrudeDirection)
	'''
	Extrusion Direction type

	:type: recurdyn.ProcessNet.ExtrudeDirectionType
	'''
	ExtrudeDirectionVector = property(_get_ExtrudeDirectionVector, None)
	'''
	Extrusion Direction

	:type: recurdyn.ProcessNet.IVector
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_ExtrudeDirection": _set_ExtrudeDirection,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Depth": (251, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ExtrudeDirection": (252, 2, (3, 0), (), "ExtrudeDirection", '{8F05A754-9226-44BB-A8D6-CD3CF1B03623}'),
		"ExtrudeDirectionVector": (254, 2, (9, 0), (), "ExtrudeDirectionVector", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"ExtrudeDirection": ((252, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySolidFillet(DispatchBaseClass):
	'''Geometry fillet Solid'''
	CLSID = IID('{409CE2D0-68BC-48D0-A001-6606020E41A6}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddFilletEdgeInfo(self, pMultiEdges, dRadius):
		'''
		Add Fillet Edge Info
		
		:param pMultiEdges: list[object]
		:param dRadius: float
		'''
		_pMultiEdges_type = True if pMultiEdges and isinstance(pMultiEdges[0], win32com.client.VARIANT) else False
		if not _pMultiEdges_type:
			pMultiEdges = [win32com.client.VARIANT(12, _data) for _data in pMultiEdges]

		ret = self._oleobj_.InvokeTypes(252, LCID, 1, (24, 0), ((8204, 1), (5, 1)),pMultiEdges
			, dRadius)

		if not _pMultiEdges_type:
			pMultiEdges = [_data.value for _data in pMultiEdges]

		return ret


	def ClearFilletEdgeInfo(self):
		'''
		Clear Fillet Edge Info
		'''
		return self._oleobj_.InvokeTypes(254, LCID, 1, (24, 0), (),)


	def DeleteFilletEdgeInfo(self, nIndex):
		'''
		Delete Fillet Edge Info
		
		:param nIndex: int
		'''
		return self._oleobj_.InvokeTypes(253, LCID, 1, (24, 0), ((3, 1),),nIndex
			)


	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def UpdateGeometry(self):
		'''
		Update Geometry Data
		'''
		return self._oleobj_.InvokeTypes(255, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FilletEdgeInfoCollection(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "FilletEdgeInfoCollection", '{573236E5-A4B3-42F2-A7A6-78D9F953BFC8}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_PreviousGeometry(self):
		return self._ApplyTypes_(*(256, 2, (9, 0), (), "PreviousGeometry", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FilletEdgeInfoCollection = property(_get_FilletEdgeInfoCollection, None)
	'''
	Fillet Edge Info Collection

	:type: recurdyn.ProcessNet.IFilletEdgeInfoCollection
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	PreviousGeometry = property(_get_PreviousGeometry, None)
	'''
	Previous geometry

	:type: recurdyn.ProcessNet.IGeometrySolid
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FilletEdgeInfoCollection": (251, 2, (9, 0), (), "FilletEdgeInfoCollection", '{573236E5-A4B3-42F2-A7A6-78D9F953BFC8}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"PreviousGeometry": (256, 2, (9, 0), (), "PreviousGeometry", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySolidScale(DispatchBaseClass):
	'''Geometry Scale Solid'''
	CLSID = IID('{A99EE858-C306-4027-A4FA-D86D0BCB6ADF}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScaleReferenceFrameMarker(self):
		'''
		Reference frame
		
		:rtype: recurdyn.ProcessNet.IMarker
		'''
		ret = self._oleobj_.InvokeTypes(257, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'GetScaleReferenceFrameMarker', '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')
		return ret

	def SetScaleReferenceFrameMarker(self, ppVal):
		'''
		Reference frame
		
		:param ppVal: IMarker
		'''
		return self._oleobj_.InvokeTypes(258, LCID, 1, (24, 0), ((9, 1),),ppVal
			)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_PreviousGeometry(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "PreviousGeometry", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_ScaleX(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "ScaleX", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ScaleY(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "ScaleY", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ScaleZ(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "ScaleZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseGeometryReferenceFrame(self):
		return self._ApplyTypes_(*(256, 2, (11, 0), (), "UseGeometryReferenceFrame", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UseGeometryReferenceFrame(self, value):
		if "UseGeometryReferenceFrame" in self.__dict__: self.__dict__["UseGeometryReferenceFrame"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	PreviousGeometry = property(_get_PreviousGeometry, None)
	'''
	Previous geometry

	:type: recurdyn.ProcessNet.IGeometry
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	ScaleX = property(_get_ScaleX, None)
	'''
	Scale X

	:type: recurdyn.ProcessNet.IDouble
	'''
	ScaleY = property(_get_ScaleY, None)
	'''
	Scale Y

	:type: recurdyn.ProcessNet.IDouble
	'''
	ScaleZ = property(_get_ScaleZ, None)
	'''
	Scale Z

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseGeometryReferenceFrame = property(_get_UseGeometryReferenceFrame, _set_UseGeometryReferenceFrame)
	'''
	Use Geometry Reference Frame

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UseGeometryReferenceFrame": _set_UseGeometryReferenceFrame,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"PreviousGeometry": (255, 2, (9, 0), (), "PreviousGeometry", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"ScaleX": (252, 2, (9, 0), (), "ScaleX", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ScaleY": (253, 2, (9, 0), (), "ScaleY", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ScaleZ": (254, 2, (9, 0), (), "ScaleZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseGeometryReferenceFrame": (256, 2, (11, 0), (), "UseGeometryReferenceFrame", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UseGeometryReferenceFrame": ((256, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySolidShell(DispatchBaseClass):
	'''Geometry Shell Solid'''
	CLSID = IID('{93D1E2EB-3542-44C8-8EC3-C0E1653B6788}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddOffsetFaceInfo(self, pMultiFaces, dOffset):
		'''
		Add Shell Offset Face Info
		
		:param pMultiFaces: list[object]
		:param dOffset: float
		'''
		_pMultiFaces_type = True if pMultiFaces and isinstance(pMultiFaces[0], win32com.client.VARIANT) else False
		if not _pMultiFaces_type:
			pMultiFaces = [win32com.client.VARIANT(12, _data) for _data in pMultiFaces]

		ret = self._oleobj_.InvokeTypes(255, LCID, 1, (24, 0), ((8204, 1), (5, 1)),pMultiFaces
			, dOffset)

		if not _pMultiFaces_type:
			pMultiFaces = [_data.value for _data in pMultiFaces]

		return ret


	def ClearOffsetFaceInfo(self):
		'''
		Clear Offset Face Info
		'''
		return self._oleobj_.InvokeTypes(257, LCID, 1, (24, 0), (),)


	def DeleteOffsetFaceInfo(self, nIndex):
		'''
		Delete Shell Offset Face Info
		
		:param nIndex: int
		'''
		return self._oleobj_.InvokeTypes(256, LCID, 1, (24, 0), ((3, 1),),nIndex
			)


	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def UpdateGeometry(self):
		'''
		Update Geometry Data
		'''
		return self._oleobj_.InvokeTypes(258, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Direction(self):
		return self._ApplyTypes_(*(251, 2, (3, 0), (), "Direction", '{C3AABB83-D3B0-42FC-9A17-05C51C28FC8F}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Offset(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "Offset", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_PreviousGeometry(self):
		return self._ApplyTypes_(*(259, 2, (9, 0), (), "PreviousGeometry", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_RemoveFaceCollection(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "RemoveFaceCollection", '{B5FF572C-A887-464A-8C86-0E92F1ED744F}'))
	def _get_ShellOffsetFaceInfoCollection(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "ShellOffsetFaceInfoCollection", '{4F28E7D4-55B5-4398-8AB5-B7586AE44EDE}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Direction(self, value):
		if "Direction" in self.__dict__: self.__dict__["Direction"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Direction = property(_get_Direction, _set_Direction)
	'''
	Direction type

	:type: recurdyn.ProcessNet.CreateShellDirection
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Offset = property(_get_Offset, None)
	'''
	Offset Value (Default)

	:type: recurdyn.ProcessNet.IDouble
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	PreviousGeometry = property(_get_PreviousGeometry, None)
	'''
	Previous geometry

	:type: recurdyn.ProcessNet.IGeometrySolid
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	RemoveFaceCollection = property(_get_RemoveFaceCollection, None)
	'''
	Remove Face Collection

	:type: recurdyn.ProcessNet.IGeometryFaceCollection
	'''
	ShellOffsetFaceInfoCollection = property(_get_ShellOffsetFaceInfoCollection, None)
	'''
	Shell Offset Face Info Collection

	:type: recurdyn.ProcessNet.IShellOffsetFaceInfoCollection
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Direction": _set_Direction,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Direction": (251, 2, (3, 0), (), "Direction", '{C3AABB83-D3B0-42FC-9A17-05C51C28FC8F}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Offset": (253, 2, (9, 0), (), "Offset", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"PreviousGeometry": (259, 2, (9, 0), (), "PreviousGeometry", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"RemoveFaceCollection": (252, 2, (9, 0), (), "RemoveFaceCollection", '{B5FF572C-A887-464A-8C86-0E92F1ED744F}'),
		"ShellOffsetFaceInfoCollection": (254, 2, (9, 0), (), "ShellOffsetFaceInfoCollection", '{4F28E7D4-55B5-4398-8AB5-B7586AE44EDE}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Direction": ((251, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySolidSpin(DispatchBaseClass):
	'''Geometry spin solid'''
	CLSID = IID('{431767A5-5F84-411B-9BB4-E4B9EA14BBC4}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Angle(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "Angle", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_AxisEnd(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "AxisEnd", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_AxisStart(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "AxisStart", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Angle = property(_get_Angle, None)
	'''
	Spin Angle

	:type: recurdyn.ProcessNet.IDouble
	'''
	AxisEnd = property(_get_AxisEnd, None)
	'''
	End Point of Axis

	:type: recurdyn.ProcessNet.IVector
	'''
	AxisStart = property(_get_AxisStart, None)
	'''
	Start Point of Axis

	:type: recurdyn.ProcessNet.IVector
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Angle": (251, 2, (9, 0), (), "Angle", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"AxisEnd": (253, 2, (9, 0), (), "AxisEnd", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"AxisStart": (252, 2, (9, 0), (), "AxisStart", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySolidSweep(DispatchBaseClass):
	'''Geometry sweep solid'''
	CLSID = IID('{FC825EA8-559A-4A73-9261-7EA500EC7CAB}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_AlignmentType(self):
		return self._ApplyTypes_(*(254, 2, (3, 0), (), "AlignmentType", '{38A75F5E-2E55-4F2C-9566-24B0305E3C12}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_PathType(self):
		return self._ApplyTypes_(*(253, 2, (3, 0), (), "PathType", '{D8CE6E05-CFFB-491D-BE96-E8CB84F353B8}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_TranslationVector(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "TranslationVector", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_WirePath(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "WirePath", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}'))

	def _set_AlignmentType(self, value):
		if "AlignmentType" in self.__dict__: self.__dict__["AlignmentType"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_PathType(self, value):
		if "PathType" in self.__dict__: self.__dict__["PathType"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_WirePath(self, value):
		if "WirePath" in self.__dict__: self.__dict__["WirePath"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))

	AlignmentType = property(_get_AlignmentType, _set_AlignmentType)
	'''
	Sweep Alignment type

	:type: recurdyn.ProcessNet.SweepAlignmentType
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	PathType = property(_get_PathType, _set_PathType)
	'''
	Sweep Path type

	:type: recurdyn.ProcessNet.SweepPathType
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	TranslationVector = property(_get_TranslationVector, None)
	'''
	Translation Vector

	:type: recurdyn.ProcessNet.IVector
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	WirePath = property(_get_WirePath, _set_WirePath)
	'''
	Wire Path

	:type: recurdyn.ProcessNet.IGeometryWire
	'''

	_prop_map_set_function_ = {
		"_set_AlignmentType": _set_AlignmentType,
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_PathType": _set_PathType,
		"_set_UserData": _set_UserData,
		"_set_WirePath": _set_WirePath,
	}
	_prop_map_get_ = {
		"AlignmentType": (254, 2, (3, 0), (), "AlignmentType", '{38A75F5E-2E55-4F2C-9566-24B0305E3C12}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"PathType": (253, 2, (3, 0), (), "PathType", '{D8CE6E05-CFFB-491D-BE96-E8CB84F353B8}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"TranslationVector": (252, 2, (9, 0), (), "TranslationVector", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"WirePath": (251, 2, (9, 0), (), "WirePath", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}'),
	}
	_prop_map_put_ = {
		"AlignmentType": ((254, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"PathType": ((253, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"WirePath": ((251, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySphere(DispatchBaseClass):
	'''Geometry sphere'''
	CLSID = IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_IsSphere(self):
		return self._ApplyTypes_(*(255, 2, (11, 0), (), "IsSphere", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Radius(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RadiusY(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "RadiusY", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RadiusZ(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "RadiusZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_IsSphere(self, value):
		if "IsSphere" in self.__dict__: self.__dict__["IsSphere"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	IsSphere = property(_get_IsSphere, _set_IsSphere)
	'''
	Specifies whether the geometry is sphere

	:type: bool
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Radius = property(_get_Radius, None)
	'''
	Radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	RadiusY = property(_get_RadiusY, None)
	'''
	Radius Y

	:type: recurdyn.ProcessNet.IDouble
	'''
	RadiusZ = property(_get_RadiusZ, None)
	'''
	Radius Z

	:type: recurdyn.ProcessNet.IDouble
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_IsSphere": _set_IsSphere,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"IsSphere": (255, 2, (11, 0), (), "IsSphere", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Radius": (252, 2, (9, 0), (), "Radius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RadiusY": (253, 2, (9, 0), (), "RadiusY", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RadiusZ": (254, 2, (9, 0), (), "RadiusZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"IsSphere": ((255, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySphereCollection(DispatchBaseClass):
	'''IGeometrySphereCollection'''
	CLSID = IID('{0B006D28-70E2-4FBA-8A03-EC9EFC17C4E1}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGeometrySphere
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGeometrySphere
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IGeometrySpline(DispatchBaseClass):
	'''Geometry spline'''
	CLSID = IID('{159B4280-8FD8-4847-884B-84EC26F963FA}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Closed(self):
		return self._ApplyTypes_(*(252, 2, (11, 0), (), "Closed", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FileName(self):
		return self._ApplyTypes_(*(255, 2, (8, 0), (), "FileName", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_PointCollection(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "PointCollection", '{6BEF9B6B-4708-445E-A3B5-0D65BA69F749}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_Type(self):
		return self._ApplyTypes_(*(253, 2, (3, 0), (), "Type", '{2B2A8E20-833D-4F83-B40C-B4EF4F934234}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Closed(self, value):
		if "Closed" in self.__dict__: self.__dict__["Closed"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_FileName(self, value):
		if "FileName" in self.__dict__: self.__dict__["FileName"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Closed = property(_get_Closed, _set_Closed)
	'''
	Specifies whether the spline is closed

	:type: bool
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FileName = property(_get_FileName, _set_FileName)
	'''
	File name

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	PointCollection = property(_get_PointCollection, None)
	'''
	Point Collection

	:type: recurdyn.ProcessNet.IPointCollection
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	Type = property(_get_Type, None)
	'''
	GeometrySpline type

	:type: recurdyn.ProcessNet.GeometrySplineType
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Closed": _set_Closed,
		"_set_Comment": _set_Comment,
		"_set_FileName": _set_FileName,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Closed": (252, 2, (11, 0), (), "Closed", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FileName": (255, 2, (8, 0), (), "FileName", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"PointCollection": (254, 2, (9, 0), (), "PointCollection", '{6BEF9B6B-4708-445E-A3B5-0D65BA69F749}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"Type": (253, 2, (3, 0), (), "Type", '{2B2A8E20-833D-4F83-B40C-B4EF4F934234}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Closed": ((252, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"FileName": ((255, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometrySplineSurface(DispatchBaseClass):
	'''Geometry spline surface'''
	CLSID = IID('{CC8BC813-F31C-4B25-A652-7B110AF60394}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryTorus(DispatchBaseClass):
	'''Geometry torus'''
	CLSID = IID('{92A1D6C1-1B9F-4A5A-AA3E-164073FAA5FB}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Angle(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "Angle", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_MajorRadius(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "MajorRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MinorRadius(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "MinorRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Angle = property(_get_Angle, None)
	'''
	Angle

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	MajorRadius = property(_get_MajorRadius, None)
	'''
	Major radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	MinorRadius = property(_get_MinorRadius, None)
	'''
	Minor radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Angle": (254, 2, (9, 0), (), "Angle", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"MajorRadius": (252, 2, (9, 0), (), "MajorRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MinorRadius": (253, 2, (9, 0), (), "MinorRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryWire(DispatchBaseClass):
	'''Geometry wire'''
	CLSID = IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(152, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetBoundingBoxWithRefFrame(self, RefFrame):
		'''
		Get bounding box with reference frame 
		
		:param RefFrame: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(154, 1, (8197, 0), ((9, 1),), 'GetBoundingBoxWithRefFrame', None,RefFrame
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertyGeometry
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Graphic": (153, 2, (9, 0), (), "Graphic", '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGeometryWireCollection(DispatchBaseClass):
	'''IGeometryWireCollection'''
	CLSID = IID('{2B270F9A-2704-448E-809B-7B2B30ACEA84}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGeometryWire
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGeometryWire
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IGraphicMaterial(DispatchBaseClass):
	'''Graphic Material'''
	CLSID = IID('{50D4EBE3-721F-4673-BEDE-56BC2583A64F}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Ambient(self):
		return self._ApplyTypes_(*(52, 2, (4, 0), (), "Ambient", None))
	def _get_Color(self):
		return self._ApplyTypes_(*(51, 2, (19, 0), (), "Color", None))
	def _get_Diffuse(self):
		return self._ApplyTypes_(*(53, 2, (4, 0), (), "Diffuse", None))
	def _get_Reflectivity(self):
		return self._ApplyTypes_(*(57, 2, (4, 0), (), "Reflectivity", None))
	def _get_Shininess(self):
		return self._ApplyTypes_(*(55, 2, (4, 0), (), "Shininess", None))
	def _get_Specular(self):
		return self._ApplyTypes_(*(54, 2, (4, 0), (), "Specular", None))
	def _get_Transparency(self):
		return self._ApplyTypes_(*(56, 2, (4, 0), (), "Transparency", None))

	def _set_Ambient(self, value):
		if "Ambient" in self.__dict__: self.__dict__["Ambient"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_Diffuse(self, value):
		if "Diffuse" in self.__dict__: self.__dict__["Diffuse"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_Reflectivity(self, value):
		if "Reflectivity" in self.__dict__: self.__dict__["Reflectivity"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_Shininess(self, value):
		if "Shininess" in self.__dict__: self.__dict__["Shininess"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_Specular(self, value):
		if "Specular" in self.__dict__: self.__dict__["Specular"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_Transparency(self, value):
		if "Transparency" in self.__dict__: self.__dict__["Transparency"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))

	Ambient = property(_get_Ambient, _set_Ambient)
	'''
	Ambient

	:type: float
	'''
	Color = property(_get_Color, _set_Color)
	'''
	Color

	:type: int
	'''
	Diffuse = property(_get_Diffuse, _set_Diffuse)
	'''
	Diffuse

	:type: float
	'''
	Reflectivity = property(_get_Reflectivity, _set_Reflectivity)
	'''
	Reflectivity

	:type: float
	'''
	Shininess = property(_get_Shininess, _set_Shininess)
	'''
	Shininess

	:type: float
	'''
	Specular = property(_get_Specular, _set_Specular)
	'''
	Specular

	:type: float
	'''
	Transparency = property(_get_Transparency, _set_Transparency)
	'''
	Transparency

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_Ambient": _set_Ambient,
		"_set_Color": _set_Color,
		"_set_Diffuse": _set_Diffuse,
		"_set_Reflectivity": _set_Reflectivity,
		"_set_Shininess": _set_Shininess,
		"_set_Specular": _set_Specular,
		"_set_Transparency": _set_Transparency,
	}
	_prop_map_get_ = {
		"Ambient": (52, 2, (4, 0), (), "Ambient", None),
		"Color": (51, 2, (19, 0), (), "Color", None),
		"Diffuse": (53, 2, (4, 0), (), "Diffuse", None),
		"Reflectivity": (57, 2, (4, 0), (), "Reflectivity", None),
		"Shininess": (55, 2, (4, 0), (), "Shininess", None),
		"Specular": (54, 2, (4, 0), (), "Specular", None),
		"Transparency": (56, 2, (4, 0), (), "Transparency", None),
	}
	_prop_map_put_ = {
		"Ambient": ((52, LCID, 4, 0),()),
		"Color": ((51, LCID, 4, 0),()),
		"Diffuse": ((53, LCID, 4, 0),()),
		"Reflectivity": ((57, LCID, 4, 0),()),
		"Shininess": ((55, LCID, 4, 0),()),
		"Specular": ((54, LCID, 4, 0),()),
		"Transparency": ((56, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGraphicProperty(DispatchBaseClass):
	'''Graphic property'''
	CLSID = IID('{4C8B7C23-7D92-4D39-B530-5D93DC97F771}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_ApplyCuttingPlane(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "ApplyCuttingPlane", None))
	def _get_Color(self):
		return self._ApplyTypes_(*(52, 2, (19, 0), (), "Color", None))
	def _get_EachRenderMode(self):
		return self._ApplyTypes_(*(51, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'))

	def _set_ApplyCuttingPlane(self, value):
		if "ApplyCuttingPlane" in self.__dict__: self.__dict__["ApplyCuttingPlane"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_EachRenderMode(self, value):
		if "EachRenderMode" in self.__dict__: self.__dict__["EachRenderMode"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_Picture(self, value):
		if "Picture" in self.__dict__: self.__dict__["Picture"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_Transparency(self, value):
		if "Transparency" in self.__dict__: self.__dict__["Transparency"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UsePicture(self, value):
		if "UsePicture" in self.__dict__: self.__dict__["UsePicture"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_UseReflection(self, value):
		if "UseReflection" in self.__dict__: self.__dict__["UseReflection"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))

	ApplyCuttingPlane = property(_get_ApplyCuttingPlane, _set_ApplyCuttingPlane)
	'''
	Apply cutting plane

	:type: bool
	'''
	Color = property(_get_Color, _set_Color)
	'''
	Color

	:type: int
	'''
	EachRenderMode = property(_get_EachRenderMode, _set_EachRenderMode)
	'''
	Rendering mode

	:type: recurdyn.ProcessNet.EachRenderMode
	'''
	Picture = property(None, _set_Picture)
	'''
	Picture file

	:type: str
	'''
	Transparency = property(None, _set_Transparency)
	'''
	Transparency

	:type: float
	'''
	UsePicture = property(None, _set_UsePicture)
	'''
	Use Picture

	:type: bool
	'''
	UseReflection = property(None, _set_UseReflection)
	'''
	Reflection

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_ApplyCuttingPlane": _set_ApplyCuttingPlane,
		"_set_Color": _set_Color,
		"_set_EachRenderMode": _set_EachRenderMode,
		"_set_Picture": _set_Picture,
		"_set_Transparency": _set_Transparency,
		"_set_UsePicture": _set_UsePicture,
		"_set_UseReflection": _set_UseReflection,
	}
	_prop_map_get_ = {
		"ApplyCuttingPlane": (54, 2, (11, 0), (), "ApplyCuttingPlane", None),
		"Color": (52, 2, (19, 0), (), "Color", None),
		"EachRenderMode": (51, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'),
	}
	_prop_map_put_ = {
		"ApplyCuttingPlane": ((54, LCID, 4, 0),()),
		"Color": ((52, LCID, 4, 0),()),
		"EachRenderMode": ((51, LCID, 4, 0),()),
		"Picture": ((57, LCID, 4, 0),()),
		"Transparency": ((53, LCID, 4, 0),()),
		"UsePicture": ((56, LCID, 4, 0),()),
		"UseReflection": ((55, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGraphicPropertyBody(DispatchBaseClass):
	'''Clone Body Graphic property'''
	CLSID = IID('{CB9C645A-A4F6-4F6A-855A-6CBAC8B59BCB}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Color(self):
		return self._ApplyTypes_(*(52, 2, (19, 0), (), "Color", None))
	def _get_EachRenderMode(self):
		return self._ApplyTypes_(*(51, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'))
	def _get_Transparency(self):
		return self._ApplyTypes_(*(53, 2, (5, 0), (), "Transparency", None))

	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_EachRenderMode(self, value):
		if "EachRenderMode" in self.__dict__: self.__dict__["EachRenderMode"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_Picture(self, value):
		if "Picture" in self.__dict__: self.__dict__["Picture"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_Transparency(self, value):
		if "Transparency" in self.__dict__: self.__dict__["Transparency"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UsePicture(self, value):
		if "UsePicture" in self.__dict__: self.__dict__["UsePicture"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseReflection(self, value):
		if "UseReflection" in self.__dict__: self.__dict__["UseReflection"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))

	Color = property(_get_Color, _set_Color)
	'''
	Color

	:type: int
	'''
	EachRenderMode = property(_get_EachRenderMode, _set_EachRenderMode)
	'''
	Rendering mode

	:type: recurdyn.ProcessNet.EachRenderMode
	'''
	Transparency = property(_get_Transparency, _set_Transparency)
	'''
	Transparency

	:type: float
	'''
	Picture = property(None, _set_Picture)
	'''
	Picture file

	:type: str
	'''
	UsePicture = property(None, _set_UsePicture)
	'''
	Use Picture

	:type: bool
	'''
	UseReflection = property(None, _set_UseReflection)
	'''
	Reflection

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Color": _set_Color,
		"_set_EachRenderMode": _set_EachRenderMode,
		"_set_Picture": _set_Picture,
		"_set_Transparency": _set_Transparency,
		"_set_UsePicture": _set_UsePicture,
		"_set_UseReflection": _set_UseReflection,
	}
	_prop_map_get_ = {
		"Color": (52, 2, (19, 0), (), "Color", None),
		"EachRenderMode": (51, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'),
		"Transparency": (53, 2, (5, 0), (), "Transparency", None),
	}
	_prop_map_put_ = {
		"Color": ((52, LCID, 4, 0),()),
		"EachRenderMode": ((51, LCID, 4, 0),()),
		"Picture": ((56, LCID, 4, 0),()),
		"Transparency": ((53, LCID, 4, 0),()),
		"UsePicture": ((55, LCID, 4, 0),()),
		"UseReflection": ((54, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGraphicPropertyGeometry(DispatchBaseClass):
	'''Geometry Graphic property'''
	CLSID = IID('{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Color(self):
		return self._ApplyTypes_(*(52, 2, (19, 0), (), "Color", None))
	def _get_EachRenderMode(self):
		return self._ApplyTypes_(*(51, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'))
	def _get_Picture(self):
		return self._ApplyTypes_(*(56, 2, (8, 0), (), "Picture", None))
	def _get_Transparency(self):
		return self._ApplyTypes_(*(53, 2, (5, 0), (), "Transparency", None))
	def _get_UsePicture(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UsePicture", None))
	def _get_UseReflection(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "UseReflection", None))

	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_EachRenderMode(self, value):
		if "EachRenderMode" in self.__dict__: self.__dict__["EachRenderMode"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_Picture(self, value):
		if "Picture" in self.__dict__: self.__dict__["Picture"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_Transparency(self, value):
		if "Transparency" in self.__dict__: self.__dict__["Transparency"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UsePicture(self, value):
		if "UsePicture" in self.__dict__: self.__dict__["UsePicture"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseReflection(self, value):
		if "UseReflection" in self.__dict__: self.__dict__["UseReflection"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))

	Color = property(_get_Color, _set_Color)
	'''
	Color

	:type: int
	'''
	EachRenderMode = property(_get_EachRenderMode, _set_EachRenderMode)
	'''
	Rendering mode

	:type: recurdyn.ProcessNet.EachRenderMode
	'''
	Picture = property(_get_Picture, _set_Picture)
	'''
	Picture file

	:type: str
	'''
	Transparency = property(_get_Transparency, _set_Transparency)
	'''
	Transparency

	:type: float
	'''
	UsePicture = property(_get_UsePicture, _set_UsePicture)
	'''
	Use picture

	:type: bool
	'''
	UseReflection = property(_get_UseReflection, _set_UseReflection)
	'''
	Reflection

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Color": _set_Color,
		"_set_EachRenderMode": _set_EachRenderMode,
		"_set_Picture": _set_Picture,
		"_set_Transparency": _set_Transparency,
		"_set_UsePicture": _set_UsePicture,
		"_set_UseReflection": _set_UseReflection,
	}
	_prop_map_get_ = {
		"Color": (52, 2, (19, 0), (), "Color", None),
		"EachRenderMode": (51, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'),
		"Picture": (56, 2, (8, 0), (), "Picture", None),
		"Transparency": (53, 2, (5, 0), (), "Transparency", None),
		"UsePicture": (55, 2, (11, 0), (), "UsePicture", None),
		"UseReflection": (54, 2, (11, 0), (), "UseReflection", None),
	}
	_prop_map_put_ = {
		"Color": ((52, LCID, 4, 0),()),
		"EachRenderMode": ((51, LCID, 4, 0),()),
		"Picture": ((56, LCID, 4, 0),()),
		"Transparency": ((53, LCID, 4, 0),()),
		"UsePicture": ((55, LCID, 4, 0),()),
		"UseReflection": ((54, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGraphicPropertySubSystem(DispatchBaseClass):
	'''SubSystem Graphic property'''
	CLSID = IID('{262F564D-8707-4A0E-806C-D9FB21F59324}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_EachRenderMode(self):
		return self._ApplyTypes_(*(51, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'))

	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_EachRenderMode(self, value):
		if "EachRenderMode" in self.__dict__: self.__dict__["EachRenderMode"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_Picture(self, value):
		if "Picture" in self.__dict__: self.__dict__["Picture"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_Transparency(self, value):
		if "Transparency" in self.__dict__: self.__dict__["Transparency"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UsePicture(self, value):
		if "UsePicture" in self.__dict__: self.__dict__["UsePicture"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseReflection(self, value):
		if "UseReflection" in self.__dict__: self.__dict__["UseReflection"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))

	EachRenderMode = property(_get_EachRenderMode, _set_EachRenderMode)
	'''
	Rendering mode

	:type: recurdyn.ProcessNet.EachRenderMode
	'''
	Color = property(None, _set_Color)
	'''
	Color

	:type: int
	'''
	Picture = property(None, _set_Picture)
	'''
	Picture file

	:type: str
	'''
	Transparency = property(None, _set_Transparency)
	'''
	Transparency

	:type: float
	'''
	UsePicture = property(None, _set_UsePicture)
	'''
	Use Picture

	:type: bool
	'''
	UseReflection = property(None, _set_UseReflection)
	'''
	Reflection

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Color": _set_Color,
		"_set_EachRenderMode": _set_EachRenderMode,
		"_set_Picture": _set_Picture,
		"_set_Transparency": _set_Transparency,
		"_set_UsePicture": _set_UsePicture,
		"_set_UseReflection": _set_UseReflection,
	}
	_prop_map_get_ = {
		"EachRenderMode": (51, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'),
	}
	_prop_map_put_ = {
		"Color": ((52, LCID, 4, 0),()),
		"EachRenderMode": ((51, LCID, 4, 0),()),
		"Picture": ((56, LCID, 4, 0),()),
		"Transparency": ((53, LCID, 4, 0),()),
		"UsePicture": ((55, LCID, 4, 0),()),
		"UseReflection": ((54, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGroup(DispatchBaseClass):
	'''Group'''
	CLSID = IID('{979CB058-D7B2-4D8B-9EA5-26C16B8C5547}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def SetLayerNumber(self, iVal):
		'''
		Set layer Number
		
		:param iVal: int
		'''
		return self._oleobj_.InvokeTypes(202, LCID, 1, (24, 0), ((19, 1),),iVal
			)


	def UpdateActiveFlagOfAllEntities(self, Val):
		'''
		Update active flag of all entities
		
		:param Val: bool
		'''
		return self._oleobj_.InvokeTypes(204, LCID, 1, (24, 0), ((11, 1),),Val
			)


	def UpdateAllProperties(self):
		'''
		Update all properties
		'''
		return self._oleobj_.InvokeTypes(201, LCID, 1, (24, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_EachRenderMode(self):
		return self._ApplyTypes_(*(203, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_EachRenderMode(self, value):
		if "EachRenderMode" in self.__dict__: self.__dict__["EachRenderMode"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	EachRenderMode = property(_get_EachRenderMode, _set_EachRenderMode)
	'''
	Rendering mode

	:type: recurdyn.ProcessNet.EachRenderMode
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Comment": _set_Comment,
		"_set_EachRenderMode": _set_EachRenderMode,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"EachRenderMode": (203, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"EachRenderMode": ((203, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGroupBeam(DispatchBaseClass):
	'''Beam Group'''
	CLSID = IID('{E30FCF4E-CD27-4F1D-B463-B7CD3E2AEF12}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def DampingMatrix(self, i, j):
		'''
		Damping matrix
		
		:param i: int
		:param j: int
		:rtype: recurdyn.ProcessNet.IDouble
		'''
		ret = self._oleobj_.InvokeTypes(267, LCID, 1, (9, 0), ((3, 1), (3, 1)),i
			, j)
		if ret is not None:
			ret = Dispatch(ret, 'DampingMatrix', '{2B5166E3-4B31-4607-B157-BE237A670336}')
		return ret

	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def SetLayerNumber(self, iVal):
		'''
		Set layer Number
		
		:param iVal: int
		'''
		return self._oleobj_.InvokeTypes(202, LCID, 1, (24, 0), ((19, 1),),iVal
			)


	def UpdateActiveFlagOfAllEntities(self, Val):
		'''
		Update active flag of all entities
		
		:param Val: bool
		'''
		return self._oleobj_.InvokeTypes(204, LCID, 1, (24, 0), ((11, 1),),Val
			)


	def UpdateAllProperties(self):
		'''
		Update all properties
		'''
		return self._oleobj_.InvokeTypes(201, LCID, 1, (24, 0), (),)


	def UpdateCrossSectionProperty(self):
		'''
		Update cross section property
		'''
		return self._oleobj_.InvokeTypes(271, LCID, 1, (24, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_AnimationDataScaling(self):
		return self._ApplyTypes_(*(273, 2, (9, 0), (), "AnimationDataScaling", '{7DD7CE3F-EAC8-4324-9107-C4EDFF055B1C}'))
	def _get_BeamCrossSection(self):
		return self._ApplyTypes_(*(257, 2, (9, 0), (), "BeamCrossSection", '{557175E7-72DD-447A-8DB1-319593C34BDC}'))
	def _get_BeamCrossSectionType(self):
		return self._ApplyTypes_(*(256, 2, (3, 0), (), "BeamCrossSectionType", '{01406737-1007-468F-A0BC-A2F7C43239CF}'))
	def _get_Color(self):
		return self._ApplyTypes_(*(264, 2, (19, 0), (), "Color", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_CreateAnimationScalingFlag(self):
		return self._ApplyTypes_(*(274, 2, (11, 0), (), "CreateAnimationScalingFlag", None))
	def _get_CrossSectionArea(self):
		return self._ApplyTypes_(*(263, 2, (9, 0), (), "CrossSectionArea", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Density(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "Density", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_EachRenderMode(self):
		return self._ApplyTypes_(*(203, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_InertiaPropertyInput(self):
		return self._ApplyTypes_(*(252, 2, (3, 0), (), "InertiaPropertyInput", '{B7ABA4A0-E416-4A90-B5AA-B2645B25A290}'))
	def _get_InitialVelocity(self):
		return self._ApplyTypes_(*(272, 2, (9, 0), (), "InitialVelocity", '{15F99EF9-5DE4-423B-9F3B-86C8FA8D2A2A}'))
	def _get_Ixx(self):
		return self._ApplyTypes_(*(258, 2, (9, 0), (), "Ixx", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Iyy(self):
		return self._ApplyTypes_(*(259, 2, (9, 0), (), "Iyy", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Izz(self):
		return self._ApplyTypes_(*(260, 2, (9, 0), (), "Izz", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NodeThickness(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "NodeThickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_ShearAreaRatioY(self):
		return self._ApplyTypes_(*(261, 2, (9, 0), (), "ShearAreaRatioY", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ShearAreaRatioZ(self):
		return self._ApplyTypes_(*(262, 2, (9, 0), (), "ShearAreaRatioZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ShearModulus(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "ShearModulus", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_TotalMass(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "TotalMass", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseBodyProperty(self):
		return self._ApplyTypes_(*(270, 2, (11, 0), (), "UseBodyProperty", None))
	def _get_UseDampingMatrix(self):
		return self._ApplyTypes_(*(266, 2, (11, 0), (), "UseDampingMatrix", None))
	def _get_UseForceProperty(self):
		return self._ApplyTypes_(*(269, 2, (11, 0), (), "UseForceProperty", None))
	def _get_UseUpdateCrossSectionPropertyAutomatically(self):
		return self._ApplyTypes_(*(275, 2, (11, 0), (), "UseUpdateCrossSectionPropertyAutomatically", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_ViscousDampingRatio(self):
		return self._ApplyTypes_(*(268, 2, (9, 0), (), "ViscousDampingRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_YoungsModulus(self):
		return self._ApplyTypes_(*(250, 2, (9, 0), (), "YoungsModulus", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BeamCrossSectionType(self, value):
		if "BeamCrossSectionType" in self.__dict__: self.__dict__["BeamCrossSectionType"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((264, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_CreateAnimationScalingFlag(self, value):
		if "CreateAnimationScalingFlag" in self.__dict__: self.__dict__["CreateAnimationScalingFlag"] = value; return
		self._oleobj_.Invoke(*((274, LCID, 4, 0) + (value,) + ()))
	def _set_EachRenderMode(self, value):
		if "EachRenderMode" in self.__dict__: self.__dict__["EachRenderMode"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_InertiaPropertyInput(self, value):
		if "InertiaPropertyInput" in self.__dict__: self.__dict__["InertiaPropertyInput"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UseBodyProperty(self, value):
		if "UseBodyProperty" in self.__dict__: self.__dict__["UseBodyProperty"] = value; return
		self._oleobj_.Invoke(*((270, LCID, 4, 0) + (value,) + ()))
	def _set_UseDampingMatrix(self, value):
		if "UseDampingMatrix" in self.__dict__: self.__dict__["UseDampingMatrix"] = value; return
		self._oleobj_.Invoke(*((266, LCID, 4, 0) + (value,) + ()))
	def _set_UseForceProperty(self, value):
		if "UseForceProperty" in self.__dict__: self.__dict__["UseForceProperty"] = value; return
		self._oleobj_.Invoke(*((269, LCID, 4, 0) + (value,) + ()))
	def _set_UseUpdateCrossSectionPropertyAutomatically(self, value):
		if "UseUpdateCrossSectionPropertyAutomatically" in self.__dict__: self.__dict__["UseUpdateCrossSectionPropertyAutomatically"] = value; return
		self._oleobj_.Invoke(*((275, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	AnimationDataScaling = property(_get_AnimationDataScaling, None)
	'''
	Animation Data Scaling

	:type: recurdyn.ProcessNet.IAnimationDataScaling
	'''
	BeamCrossSection = property(_get_BeamCrossSection, None)
	'''
	BeamForce cross section

	:type: recurdyn.ProcessNet.IBeamCrossSection
	'''
	BeamCrossSectionType = property(_get_BeamCrossSectionType, _set_BeamCrossSectionType)
	'''
	BeamForce cross section type

	:type: recurdyn.ProcessNet.BeamCrossSectionType
	'''
	Color = property(_get_Color, _set_Color)
	'''
	Color

	:type: int
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	CreateAnimationScalingFlag = property(_get_CreateAnimationScalingFlag, _set_CreateAnimationScalingFlag)
	'''
	Create Animation Scaling Flag

	:type: bool
	'''
	CrossSectionArea = property(_get_CrossSectionArea, None)
	'''
	Beam library calculate automatically mass and area moment of inertia which is determined by cross section area.

	:type: recurdyn.ProcessNet.IDouble
	'''
	Density = property(_get_Density, None)
	'''
	Density

	:type: recurdyn.ProcessNet.IDouble
	'''
	EachRenderMode = property(_get_EachRenderMode, _set_EachRenderMode)
	'''
	Rendering mode

	:type: recurdyn.ProcessNet.EachRenderMode
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	InertiaPropertyInput = property(_get_InertiaPropertyInput, _set_InertiaPropertyInput)
	'''
	Material Input Type

	:type: recurdyn.ProcessNet.BeamInertiaPropertyInputType
	'''
	InitialVelocity = property(_get_InitialVelocity, None)
	'''
	InitialVelocity

	:type: recurdyn.ProcessNet.IInitialVelocity
	'''
	Ixx = property(_get_Ixx, None)
	'''
	Ixx

	:type: recurdyn.ProcessNet.IDouble
	'''
	Iyy = property(_get_Iyy, None)
	'''
	Iyy

	:type: recurdyn.ProcessNet.IDouble
	'''
	Izz = property(_get_Izz, None)
	'''
	Izz

	:type: recurdyn.ProcessNet.IDouble
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NodeThickness = property(_get_NodeThickness, None)
	'''
	Node thickness

	:type: recurdyn.ProcessNet.IDouble
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	ShearAreaRatioY = property(_get_ShearAreaRatioY, None)
	'''
	Shear area ratio Y

	:type: recurdyn.ProcessNet.IDouble
	'''
	ShearAreaRatioZ = property(_get_ShearAreaRatioZ, None)
	'''
	Shear area ratio Z

	:type: recurdyn.ProcessNet.IDouble
	'''
	ShearModulus = property(_get_ShearModulus, None)
	'''
	Shear modulus

	:type: recurdyn.ProcessNet.IDouble
	'''
	TotalMass = property(_get_TotalMass, None)
	'''
	Total Mass

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseBodyProperty = property(_get_UseBodyProperty, _set_UseBodyProperty)
	'''
	Use body property

	:type: bool
	'''
	UseDampingMatrix = property(_get_UseDampingMatrix, _set_UseDampingMatrix)
	'''
	Use damping matrix

	:type: bool
	'''
	UseForceProperty = property(_get_UseForceProperty, _set_UseForceProperty)
	'''
	Use force property

	:type: bool
	'''
	UseUpdateCrossSectionPropertyAutomatically = property(_get_UseUpdateCrossSectionPropertyAutomatically, _set_UseUpdateCrossSectionPropertyAutomatically)
	'''
	Use Update Cross Section Property Automatically

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	ViscousDampingRatio = property(_get_ViscousDampingRatio, None)
	'''
	Viscous damping ratio

	:type: recurdyn.ProcessNet.IDouble
	'''
	YoungsModulus = property(_get_YoungsModulus, None)
	'''
	Young's modulus

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_BeamCrossSectionType": _set_BeamCrossSectionType,
		"_set_Color": _set_Color,
		"_set_Comment": _set_Comment,
		"_set_CreateAnimationScalingFlag": _set_CreateAnimationScalingFlag,
		"_set_EachRenderMode": _set_EachRenderMode,
		"_set_InertiaPropertyInput": _set_InertiaPropertyInput,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_UseBodyProperty": _set_UseBodyProperty,
		"_set_UseDampingMatrix": _set_UseDampingMatrix,
		"_set_UseForceProperty": _set_UseForceProperty,
		"_set_UseUpdateCrossSectionPropertyAutomatically": _set_UseUpdateCrossSectionPropertyAutomatically,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"AnimationDataScaling": (273, 2, (9, 0), (), "AnimationDataScaling", '{7DD7CE3F-EAC8-4324-9107-C4EDFF055B1C}'),
		"BeamCrossSection": (257, 2, (9, 0), (), "BeamCrossSection", '{557175E7-72DD-447A-8DB1-319593C34BDC}'),
		"BeamCrossSectionType": (256, 2, (3, 0), (), "BeamCrossSectionType", '{01406737-1007-468F-A0BC-A2F7C43239CF}'),
		"Color": (264, 2, (19, 0), (), "Color", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"CreateAnimationScalingFlag": (274, 2, (11, 0), (), "CreateAnimationScalingFlag", None),
		"CrossSectionArea": (263, 2, (9, 0), (), "CrossSectionArea", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Density": (253, 2, (9, 0), (), "Density", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"EachRenderMode": (203, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"InertiaPropertyInput": (252, 2, (3, 0), (), "InertiaPropertyInput", '{B7ABA4A0-E416-4A90-B5AA-B2645B25A290}'),
		"InitialVelocity": (272, 2, (9, 0), (), "InitialVelocity", '{15F99EF9-5DE4-423B-9F3B-86C8FA8D2A2A}'),
		"Ixx": (258, 2, (9, 0), (), "Ixx", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Iyy": (259, 2, (9, 0), (), "Iyy", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Izz": (260, 2, (9, 0), (), "Izz", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NodeThickness": (255, 2, (9, 0), (), "NodeThickness", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"ShearAreaRatioY": (261, 2, (9, 0), (), "ShearAreaRatioY", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ShearAreaRatioZ": (262, 2, (9, 0), (), "ShearAreaRatioZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ShearModulus": (251, 2, (9, 0), (), "ShearModulus", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"TotalMass": (254, 2, (9, 0), (), "TotalMass", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseBodyProperty": (270, 2, (11, 0), (), "UseBodyProperty", None),
		"UseDampingMatrix": (266, 2, (11, 0), (), "UseDampingMatrix", None),
		"UseForceProperty": (269, 2, (11, 0), (), "UseForceProperty", None),
		"UseUpdateCrossSectionPropertyAutomatically": (275, 2, (11, 0), (), "UseUpdateCrossSectionPropertyAutomatically", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"ViscousDampingRatio": (268, 2, (9, 0), (), "ViscousDampingRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"YoungsModulus": (250, 2, (9, 0), (), "YoungsModulus", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"BeamCrossSectionType": ((256, LCID, 4, 0),()),
		"Color": ((264, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"CreateAnimationScalingFlag": ((274, LCID, 4, 0),()),
		"EachRenderMode": ((203, LCID, 4, 0),()),
		"InertiaPropertyInput": ((252, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UseBodyProperty": ((270, LCID, 4, 0),()),
		"UseDampingMatrix": ((266, LCID, 4, 0),()),
		"UseForceProperty": ((269, LCID, 4, 0),()),
		"UseUpdateCrossSectionPropertyAutomatically": ((275, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGroupGeneral(DispatchBaseClass):
	'''General group'''
	CLSID = IID('{3A5D8137-A29F-4A12-BADB-578397A6A582}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddEntities(self, arrayEntity):
		'''
		Add entities to the group
		
		:param arrayEntity: list[object]
		'''
		_arrayEntity_type = True if arrayEntity and isinstance(arrayEntity[0], win32com.client.VARIANT) else False
		if not _arrayEntity_type:
			arrayEntity = [win32com.client.VARIANT(12, _data) for _data in arrayEntity]

		ret = self._oleobj_.InvokeTypes(251, LCID, 1, (24, 0), ((8204, 1),),arrayEntity
			)

		if not _arrayEntity_type:
			arrayEntity = [_data.value for _data in arrayEntity]

		return ret


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GroupEntities(self):
		'''
		Get entities from the group
		
		:rtype: recurdyn.ProcessNet.IGenericCollection
		'''
		ret = self._oleobj_.InvokeTypes(253, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'GroupEntities', '{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')
		return ret

	def RemoveEntities(self, arrayEntity):
		'''
		Remove entities from the group
		
		:param arrayEntity: list[object]
		'''
		_arrayEntity_type = True if arrayEntity and isinstance(arrayEntity[0], win32com.client.VARIANT) else False
		if not _arrayEntity_type:
			arrayEntity = [win32com.client.VARIANT(12, _data) for _data in arrayEntity]

		ret = self._oleobj_.InvokeTypes(252, LCID, 1, (24, 0), ((8204, 1),),arrayEntity
			)

		if not _arrayEntity_type:
			arrayEntity = [_data.value for _data in arrayEntity]

		return ret


	def SetLayerNumber(self, iVal):
		'''
		Set layer Number
		
		:param iVal: int
		'''
		return self._oleobj_.InvokeTypes(202, LCID, 1, (24, 0), ((19, 1),),iVal
			)


	def UpdateActiveFlagOfAllEntities(self, Val):
		'''
		Update active flag of all entities
		
		:param Val: bool
		'''
		return self._oleobj_.InvokeTypes(204, LCID, 1, (24, 0), ((11, 1),),Val
			)


	def UpdateAllProperties(self):
		'''
		Update all properties
		'''
		return self._oleobj_.InvokeTypes(201, LCID, 1, (24, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_EachRenderMode(self):
		return self._ApplyTypes_(*(203, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_EachRenderMode(self, value):
		if "EachRenderMode" in self.__dict__: self.__dict__["EachRenderMode"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	EachRenderMode = property(_get_EachRenderMode, _set_EachRenderMode)
	'''
	Rendering mode

	:type: recurdyn.ProcessNet.EachRenderMode
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Comment": _set_Comment,
		"_set_EachRenderMode": _set_EachRenderMode,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"EachRenderMode": (203, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"EachRenderMode": ((203, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IGroupGeneralCollection(DispatchBaseClass):
	'''IGroupGeneralCollection'''
	CLSID = IID('{20D998FD-D089-43D4-B682-F84D247B6FB2}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGroupGeneral
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{3A5D8137-A29F-4A12-BADB-578397A6A582}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IGroupGeneral
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{3A5D8137-A29F-4A12-BADB-578397A6A582}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{3A5D8137-A29F-4A12-BADB-578397A6A582}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{3A5D8137-A29F-4A12-BADB-578397A6A582}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IGroupJointCMotion(DispatchBaseClass):
	'''Joint CMotion group'''
	CLSID = IID('{3B70037A-B51F-46A7-AB2B-971989A06803}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(263, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(262, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetJointTypeRX(self):
		'''
		Get joint type RX
		
		:rtype: recurdyn.ProcessNet.IJointInCMotionGroup
		'''
		ret = self._oleobj_.InvokeTypes(255, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'GetJointTypeRX', '{C8B1C218-2E2D-4A3C-8D54-1A876AFABF03}')
		return ret

	def GetJointTypeRY(self):
		'''
		Get joint type RY
		
		:rtype: recurdyn.ProcessNet.IJointInCMotionGroup
		'''
		ret = self._oleobj_.InvokeTypes(256, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'GetJointTypeRY', '{C8B1C218-2E2D-4A3C-8D54-1A876AFABF03}')
		return ret

	def GetJointTypeRZ(self):
		'''
		Get joint type RZ
		
		:rtype: recurdyn.ProcessNet.IJointInCMotionGroup
		'''
		ret = self._oleobj_.InvokeTypes(257, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'GetJointTypeRZ', '{C8B1C218-2E2D-4A3C-8D54-1A876AFABF03}')
		return ret

	def GetJointTypeX(self):
		'''
		Get joint type X
		
		:rtype: recurdyn.ProcessNet.IJointInCMotionGroup
		'''
		ret = self._oleobj_.InvokeTypes(252, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'GetJointTypeX', '{C8B1C218-2E2D-4A3C-8D54-1A876AFABF03}')
		return ret

	def GetJointTypeY(self):
		'''
		Get joint type Y
		
		:rtype: recurdyn.ProcessNet.IJointInCMotionGroup
		'''
		ret = self._oleobj_.InvokeTypes(253, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'GetJointTypeY', '{C8B1C218-2E2D-4A3C-8D54-1A876AFABF03}')
		return ret

	def GetJointTypeZ(self):
		'''
		Get joint type Z
		
		:rtype: recurdyn.ProcessNet.IJointInCMotionGroup
		'''
		ret = self._oleobj_.InvokeTypes(254, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'GetJointTypeZ', '{C8B1C218-2E2D-4A3C-8D54-1A876AFABF03}')
		return ret

	def GetPositionComponentBetweenTwoMarkers(self, CartesianMotionType):
		'''
		Update position
		
		:param CartesianMotionType: CartesianMotionType
		:rtype: float
		'''
		return self._oleobj_.InvokeTypes(264, LCID, 1, (5, 0), ((3, 1),),CartesianMotionType
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def SetLayerNumber(self, iVal):
		'''
		Set layer Number
		
		:param iVal: int
		'''
		return self._oleobj_.InvokeTypes(202, LCID, 1, (24, 0), ((19, 1),),iVal
			)


	def UpdateActiveFlagOfAllEntities(self, Val):
		'''
		Update active flag of all entities
		
		:param Val: bool
		'''
		return self._oleobj_.InvokeTypes(204, LCID, 1, (24, 0), ((11, 1),),Val
			)


	def UpdateAllProperties(self):
		'''
		Update all properties
		'''
		return self._oleobj_.InvokeTypes(201, LCID, 1, (24, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(260, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(259, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_EachRenderMode(self):
		return self._ApplyTypes_(*(203, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(258, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(261, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OnCondition(self):
		return self._ApplyTypes_(*(266, 2, (9, 0), (), "OnCondition", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefMarker(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_UseOnCondition(self):
		return self._ApplyTypes_(*(265, 2, (11, 0), (), "UseOnCondition", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((260, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((259, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_EachRenderMode(self, value):
		if "EachRenderMode" in self.__dict__: self.__dict__["EachRenderMode"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((258, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_OnCondition(self, value):
		if "OnCondition" in self.__dict__: self.__dict__["OnCondition"] = value; return
		self._oleobj_.Invoke(*((266, LCID, 4, 0) + (value,) + ()))
	def _set_RefMarker(self, value):
		if "RefMarker" in self.__dict__: self.__dict__["RefMarker"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_UseOnCondition(self, value):
		if "UseOnCondition" in self.__dict__: self.__dict__["UseOnCondition"] = value; return
		self._oleobj_.Invoke(*((265, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	EachRenderMode = property(_get_EachRenderMode, _set_EachRenderMode)
	'''
	Rendering mode

	:type: recurdyn.ProcessNet.EachRenderMode
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OnCondition = property(_get_OnCondition, _set_OnCondition)
	'''
	OnOff expression

	:type: recurdyn.ProcessNet.IExpression
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefMarker = property(_get_RefMarker, _set_RefMarker)
	'''
	Reference marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	UseOnCondition = property(_get_UseOnCondition, _set_UseOnCondition)
	'''
	Use OnOff expression

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_EachRenderMode": _set_EachRenderMode,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_OnCondition": _set_OnCondition,
		"_set_RefMarker": _set_RefMarker,
		"_set_UseOnCondition": _set_UseOnCondition,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (260, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (259, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"EachRenderMode": (203, 2, (3, 0), (), "EachRenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}'),
		"ForceDisplay": (258, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (261, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OnCondition": (266, 2, (9, 0), (), "OnCondition", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefMarker": (251, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"UseOnCondition": (265, 2, (11, 0), (), "UseOnCondition", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((260, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((259, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"EachRenderMode": ((203, LCID, 4, 0),()),
		"ForceDisplay": ((258, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"OnCondition": ((266, LCID, 4, 0),()),
		"RefMarker": ((251, LCID, 4, 0),()),
		"UseOnCondition": ((265, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IImprintEdgeOption(DispatchBaseClass):
	'''Options used when imprinting edges on the geometry'''
	CLSID = IID('{48DE281A-8619-46F6-BAA5-3A429A0AF97E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Direction(self):
		return self._ApplyTypes_(*(201, 2, (8197, 0), (), "Direction", None))
	def _get_MaxDistance(self):
		return self._ApplyTypes_(*(204, 2, (5, 0), (), "MaxDistance", None))
	def _get_UseBidirection(self):
		return self._ApplyTypes_(*(202, 2, (11, 0), (), "UseBidirection", None))
	def _get_UseExtension(self):
		return self._ApplyTypes_(*(205, 2, (11, 0), (), "UseExtension", None))
	def _get_UseMaxDistance(self):
		return self._ApplyTypes_(*(203, 2, (11, 0), (), "UseMaxDistance", None))

	def _set_Direction(self, value):
		if "Direction" in self.__dict__: self.__dict__["Direction"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (variantValue,) + ()))
	def _set_MaxDistance(self, value):
		if "MaxDistance" in self.__dict__: self.__dict__["MaxDistance"] = value; return
		self._oleobj_.Invoke(*((204, LCID, 4, 0) + (value,) + ()))
	def _set_UseBidirection(self, value):
		if "UseBidirection" in self.__dict__: self.__dict__["UseBidirection"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_UseExtension(self, value):
		if "UseExtension" in self.__dict__: self.__dict__["UseExtension"] = value; return
		self._oleobj_.Invoke(*((205, LCID, 4, 0) + (value,) + ()))
	def _set_UseMaxDistance(self, value):
		if "UseMaxDistance" in self.__dict__: self.__dict__["UseMaxDistance"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))

	Direction = property(_get_Direction, _set_Direction)
	'''
	Direction

	:type: list[float]
	'''
	MaxDistance = property(_get_MaxDistance, _set_MaxDistance)
	'''
	Max Distance

	:type: float
	'''
	UseBidirection = property(_get_UseBidirection, _set_UseBidirection)
	'''
	Use Bidirection

	:type: bool
	'''
	UseExtension = property(_get_UseExtension, _set_UseExtension)
	'''
	Use Extension

	:type: bool
	'''
	UseMaxDistance = property(_get_UseMaxDistance, _set_UseMaxDistance)
	'''
	Use Max Distance

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Direction": _set_Direction,
		"_set_MaxDistance": _set_MaxDistance,
		"_set_UseBidirection": _set_UseBidirection,
		"_set_UseExtension": _set_UseExtension,
		"_set_UseMaxDistance": _set_UseMaxDistance,
	}
	_prop_map_get_ = {
		"Direction": (201, 2, (8197, 0), (), "Direction", None),
		"MaxDistance": (204, 2, (5, 0), (), "MaxDistance", None),
		"UseBidirection": (202, 2, (11, 0), (), "UseBidirection", None),
		"UseExtension": (205, 2, (11, 0), (), "UseExtension", None),
		"UseMaxDistance": (203, 2, (11, 0), (), "UseMaxDistance", None),
	}
	_prop_map_put_ = {
		"Direction": ((201, LCID, 4, 0),()),
		"MaxDistance": ((204, LCID, 4, 0),()),
		"UseBidirection": ((202, LCID, 4, 0),()),
		"UseExtension": ((205, LCID, 4, 0),()),
		"UseMaxDistance": ((203, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IInitialVelocity(DispatchBaseClass):
	'''Initial Velocity'''
	CLSID = IID('{15F99EF9-5DE4-423B-9F3B-86C8FA8D2A2A}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_RotationalRefMarker(self):
		return self._ApplyTypes_(*(64, 2, (9, 0), (), "RotationalRefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_RotationalX(self):
		return self._ApplyTypes_(*(57, 2, (9, 0), (), "RotationalX", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RotationalY(self):
		return self._ApplyTypes_(*(58, 2, (9, 0), (), "RotationalY", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RotationalZ(self):
		return self._ApplyTypes_(*(59, 2, (9, 0), (), "RotationalZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_TranslationalRefMarker(self):
		return self._ApplyTypes_(*(63, 2, (9, 0), (), "TranslationalRefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_TranslationalX(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "TranslationalX", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_TranslationalY(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "TranslationalY", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_TranslationalZ(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "TranslationalZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseRotationalX(self):
		return self._ApplyTypes_(*(60, 2, (11, 0), (), "UseRotationalX", None))
	def _get_UseRotationalY(self):
		return self._ApplyTypes_(*(61, 2, (11, 0), (), "UseRotationalY", None))
	def _get_UseRotationalZ(self):
		return self._ApplyTypes_(*(62, 2, (11, 0), (), "UseRotationalZ", None))
	def _get_UseTranslationalX(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "UseTranslationalX", None))
	def _get_UseTranslationalY(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseTranslationalY", None))
	def _get_UseTranslationalZ(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseTranslationalZ", None))

	def _set_RotationalRefMarker(self, value):
		if "RotationalRefMarker" in self.__dict__: self.__dict__["RotationalRefMarker"] = value; return
		self._oleobj_.Invoke(*((64, LCID, 4, 0) + (value,) + ()))
	def _set_TranslationalRefMarker(self, value):
		if "TranslationalRefMarker" in self.__dict__: self.__dict__["TranslationalRefMarker"] = value; return
		self._oleobj_.Invoke(*((63, LCID, 4, 0) + (value,) + ()))
	def _set_UseRotationalX(self, value):
		if "UseRotationalX" in self.__dict__: self.__dict__["UseRotationalX"] = value; return
		self._oleobj_.Invoke(*((60, LCID, 4, 0) + (value,) + ()))
	def _set_UseRotationalY(self, value):
		if "UseRotationalY" in self.__dict__: self.__dict__["UseRotationalY"] = value; return
		self._oleobj_.Invoke(*((61, LCID, 4, 0) + (value,) + ()))
	def _set_UseRotationalZ(self, value):
		if "UseRotationalZ" in self.__dict__: self.__dict__["UseRotationalZ"] = value; return
		self._oleobj_.Invoke(*((62, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslationalX(self, value):
		if "UseTranslationalX" in self.__dict__: self.__dict__["UseTranslationalX"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslationalY(self, value):
		if "UseTranslationalY" in self.__dict__: self.__dict__["UseTranslationalY"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslationalZ(self, value):
		if "UseTranslationalZ" in self.__dict__: self.__dict__["UseTranslationalZ"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))

	RotationalRefMarker = property(_get_RotationalRefMarker, _set_RotationalRefMarker)
	'''
	Rotational velocity reference marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	RotationalX = property(_get_RotationalX, None)
	'''
	Initial rotational velocity X

	:type: recurdyn.ProcessNet.IDouble
	'''
	RotationalY = property(_get_RotationalY, None)
	'''
	Initial rotational velocity Y

	:type: recurdyn.ProcessNet.IDouble
	'''
	RotationalZ = property(_get_RotationalZ, None)
	'''
	Initial rotational velocity Z

	:type: recurdyn.ProcessNet.IDouble
	'''
	TranslationalRefMarker = property(_get_TranslationalRefMarker, _set_TranslationalRefMarker)
	'''
	Translational velocity reference marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	TranslationalX = property(_get_TranslationalX, None)
	'''
	Initial translational velocity X

	:type: recurdyn.ProcessNet.IDouble
	'''
	TranslationalY = property(_get_TranslationalY, None)
	'''
	Initial translational velocity Y

	:type: recurdyn.ProcessNet.IDouble
	'''
	TranslationalZ = property(_get_TranslationalZ, None)
	'''
	Initial translational velocity Z

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseRotationalX = property(_get_UseRotationalX, _set_UseRotationalX)
	'''
	Use Initial rotational velocity X

	:type: bool
	'''
	UseRotationalY = property(_get_UseRotationalY, _set_UseRotationalY)
	'''
	Use Initial rotational velocity Y

	:type: bool
	'''
	UseRotationalZ = property(_get_UseRotationalZ, _set_UseRotationalZ)
	'''
	Use Initial rotational velocity Z

	:type: bool
	'''
	UseTranslationalX = property(_get_UseTranslationalX, _set_UseTranslationalX)
	'''
	Use initial translational velocity X

	:type: bool
	'''
	UseTranslationalY = property(_get_UseTranslationalY, _set_UseTranslationalY)
	'''
	Use initial translational velocity Y

	:type: bool
	'''
	UseTranslationalZ = property(_get_UseTranslationalZ, _set_UseTranslationalZ)
	'''
	Use initial translational velocity Z

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_RotationalRefMarker": _set_RotationalRefMarker,
		"_set_TranslationalRefMarker": _set_TranslationalRefMarker,
		"_set_UseRotationalX": _set_UseRotationalX,
		"_set_UseRotationalY": _set_UseRotationalY,
		"_set_UseRotationalZ": _set_UseRotationalZ,
		"_set_UseTranslationalX": _set_UseTranslationalX,
		"_set_UseTranslationalY": _set_UseTranslationalY,
		"_set_UseTranslationalZ": _set_UseTranslationalZ,
	}
	_prop_map_get_ = {
		"RotationalRefMarker": (64, 2, (9, 0), (), "RotationalRefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"RotationalX": (57, 2, (9, 0), (), "RotationalX", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RotationalY": (58, 2, (9, 0), (), "RotationalY", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RotationalZ": (59, 2, (9, 0), (), "RotationalZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"TranslationalRefMarker": (63, 2, (9, 0), (), "TranslationalRefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"TranslationalX": (51, 2, (9, 0), (), "TranslationalX", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"TranslationalY": (52, 2, (9, 0), (), "TranslationalY", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"TranslationalZ": (53, 2, (9, 0), (), "TranslationalZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseRotationalX": (60, 2, (11, 0), (), "UseRotationalX", None),
		"UseRotationalY": (61, 2, (11, 0), (), "UseRotationalY", None),
		"UseRotationalZ": (62, 2, (11, 0), (), "UseRotationalZ", None),
		"UseTranslationalX": (54, 2, (11, 0), (), "UseTranslationalX", None),
		"UseTranslationalY": (55, 2, (11, 0), (), "UseTranslationalY", None),
		"UseTranslationalZ": (56, 2, (11, 0), (), "UseTranslationalZ", None),
	}
	_prop_map_put_ = {
		"RotationalRefMarker": ((64, LCID, 4, 0),()),
		"TranslationalRefMarker": ((63, LCID, 4, 0),()),
		"UseRotationalX": ((60, LCID, 4, 0),()),
		"UseRotationalY": ((61, LCID, 4, 0),()),
		"UseRotationalZ": ((62, LCID, 4, 0),()),
		"UseTranslationalX": ((54, LCID, 4, 0),()),
		"UseTranslationalY": ((55, LCID, 4, 0),()),
		"UseTranslationalZ": ((56, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IIntegratorProperty(DispatchBaseClass):
	'''Integrator property'''
	CLSID = IID('{B789D55C-FB99-4E33-A4C3-AFDD631598CE}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_ConstantStepSize(self):
		return self._ApplyTypes_(*(60, 2, (9, 0), (), "ConstantStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_CreateInitialConditionEveryStep(self):
		return self._ApplyTypes_(*(77, 2, (11, 0), (), "CreateInitialConditionEveryStep", None))
	def _get_CreateInitialConditionPlotStep(self):
		return self._ApplyTypes_(*(78, 2, (11, 0), (), "CreateInitialConditionPlotStep", None))
	def _get_EigenValueAnalysis(self):
		return self._ApplyTypes_(*(72, 2, (9, 0), (), "EigenValueAnalysis", '{54CB2134-5515-4D88-B997-71E72B9D7FFA}'))
	def _get_ErrorTolerance(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ExpressionTimeOffset(self):
		return self._ApplyTypes_(*(76, 2, (11, 0), (), "ExpressionTimeOffset", None))
	def _get_ICFCreationTypePlotStep(self):
		return self._ApplyTypes_(*(79, 2, (3, 0), (), "ICFCreationTypePlotStep", '{2853CDF8-0444-41AB-85F3-7FEF36A4CA2F}'))
	def _get_ImportEndTime(self):
		return self._ApplyTypes_(*(66, 2, (8, 0), (), "ImportEndTime", None))
	def _get_IncludeEigenValueAnalysis(self):
		return self._ApplyTypes_(*(71, 2, (11, 0), (), "IncludeEigenValueAnalysis", None))
	def _get_IncludeStateMatrix(self):
		return self._ApplyTypes_(*(73, 2, (11, 0), (), "IncludeStateMatrix", None))
	def _get_IncludeStaticAnalysis(self):
		return self._ApplyTypes_(*(69, 2, (11, 0), (), "IncludeStaticAnalysis", None))
	def _get_InitialTimeStep(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "InitialTimeStep", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_IntegratorType(self):
		return self._ApplyTypes_(*(57, 2, (3, 0), (), "IntegratorType", '{2D0591FE-A04B-4B53-94E3-6A573BA83B02}'))
	def _get_JacobianEvaluation(self):
		return self._ApplyTypes_(*(61, 2, (9, 0), (), "JacobianEvaluation", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MatchSimulationEndTime(self):
		return self._ApplyTypes_(*(67, 2, (11, 0), (), "MatchSimulationEndTime", None))
	def _get_MatchSolvingStepSize(self):
		return self._ApplyTypes_(*(62, 2, (11, 0), (), "MatchSolvingStepSize", None))
	def _get_MaxOrder(self):
		return self._ApplyTypes_(*(56, 2, (9, 0), (), "MaxOrder", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxTimeStep(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "MaxTimeStep", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_NumericalDamping(self):
		return self._ApplyTypes_(*(58, 2, (9, 0), (), "NumericalDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PlotMultiplierStepFactor(self):
		return self._ApplyTypes_(*(68, 2, (9, 0), (), "PlotMultiplierStepFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SaveEndTime(self):
		return self._ApplyTypes_(*(64, 2, (8, 0), (), "SaveEndTime", None))
	def _get_SimulationStep(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "SimulationStep", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SimulationTime(self):
		return self._ApplyTypes_(*(55, 2, (9, 0), (), "SimulationTime", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StaticAnalysis(self):
		return self._ApplyTypes_(*(70, 2, (9, 0), (), "StaticAnalysis", '{19BE442B-70CF-499D-9A4C-B6A3256CDD32}'))
	def _get_StopExpression(self):
		return self._ApplyTypes_(*(75, 2, (9, 0), (), "StopExpression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_UseConstantStepSize(self):
		return self._ApplyTypes_(*(59, 2, (11, 0), (), "UseConstantStepSize", None))
	def _get_UseImportEndTime(self):
		return self._ApplyTypes_(*(65, 2, (11, 0), (), "UseImportEndTime", None))
	def _get_UseSaveEndTime(self):
		return self._ApplyTypes_(*(63, 2, (11, 0), (), "UseSaveEndTime", None))
	def _get_UseStopCondition(self):
		return self._ApplyTypes_(*(74, 2, (11, 0), (), "UseStopCondition", None))

	def _set_CreateInitialConditionEveryStep(self, value):
		if "CreateInitialConditionEveryStep" in self.__dict__: self.__dict__["CreateInitialConditionEveryStep"] = value; return
		self._oleobj_.Invoke(*((77, LCID, 4, 0) + (value,) + ()))
	def _set_CreateInitialConditionPlotStep(self, value):
		if "CreateInitialConditionPlotStep" in self.__dict__: self.__dict__["CreateInitialConditionPlotStep"] = value; return
		self._oleobj_.Invoke(*((78, LCID, 4, 0) + (value,) + ()))
	def _set_ExpressionTimeOffset(self, value):
		if "ExpressionTimeOffset" in self.__dict__: self.__dict__["ExpressionTimeOffset"] = value; return
		self._oleobj_.Invoke(*((76, LCID, 4, 0) + (value,) + ()))
	def _set_ICFCreationTypePlotStep(self, value):
		if "ICFCreationTypePlotStep" in self.__dict__: self.__dict__["ICFCreationTypePlotStep"] = value; return
		self._oleobj_.Invoke(*((79, LCID, 4, 0) + (value,) + ()))
	def _set_ImportEndTime(self, value):
		if "ImportEndTime" in self.__dict__: self.__dict__["ImportEndTime"] = value; return
		self._oleobj_.Invoke(*((66, LCID, 4, 0) + (value,) + ()))
	def _set_IncludeEigenValueAnalysis(self, value):
		if "IncludeEigenValueAnalysis" in self.__dict__: self.__dict__["IncludeEigenValueAnalysis"] = value; return
		self._oleobj_.Invoke(*((71, LCID, 4, 0) + (value,) + ()))
	def _set_IncludeStateMatrix(self, value):
		if "IncludeStateMatrix" in self.__dict__: self.__dict__["IncludeStateMatrix"] = value; return
		self._oleobj_.Invoke(*((73, LCID, 4, 0) + (value,) + ()))
	def _set_IncludeStaticAnalysis(self, value):
		if "IncludeStaticAnalysis" in self.__dict__: self.__dict__["IncludeStaticAnalysis"] = value; return
		self._oleobj_.Invoke(*((69, LCID, 4, 0) + (value,) + ()))
	def _set_IntegratorType(self, value):
		if "IntegratorType" in self.__dict__: self.__dict__["IntegratorType"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_MatchSimulationEndTime(self, value):
		if "MatchSimulationEndTime" in self.__dict__: self.__dict__["MatchSimulationEndTime"] = value; return
		self._oleobj_.Invoke(*((67, LCID, 4, 0) + (value,) + ()))
	def _set_MatchSolvingStepSize(self, value):
		if "MatchSolvingStepSize" in self.__dict__: self.__dict__["MatchSolvingStepSize"] = value; return
		self._oleobj_.Invoke(*((62, LCID, 4, 0) + (value,) + ()))
	def _set_SaveEndTime(self, value):
		if "SaveEndTime" in self.__dict__: self.__dict__["SaveEndTime"] = value; return
		self._oleobj_.Invoke(*((64, LCID, 4, 0) + (value,) + ()))
	def _set_StopExpression(self, value):
		if "StopExpression" in self.__dict__: self.__dict__["StopExpression"] = value; return
		self._oleobj_.Invoke(*((75, LCID, 4, 0) + (value,) + ()))
	def _set_UseConstantStepSize(self, value):
		if "UseConstantStepSize" in self.__dict__: self.__dict__["UseConstantStepSize"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))
	def _set_UseImportEndTime(self, value):
		if "UseImportEndTime" in self.__dict__: self.__dict__["UseImportEndTime"] = value; return
		self._oleobj_.Invoke(*((65, LCID, 4, 0) + (value,) + ()))
	def _set_UseSaveEndTime(self, value):
		if "UseSaveEndTime" in self.__dict__: self.__dict__["UseSaveEndTime"] = value; return
		self._oleobj_.Invoke(*((63, LCID, 4, 0) + (value,) + ()))
	def _set_UseStopCondition(self, value):
		if "UseStopCondition" in self.__dict__: self.__dict__["UseStopCondition"] = value; return
		self._oleobj_.Invoke(*((74, LCID, 4, 0) + (value,) + ()))

	ConstantStepSize = property(_get_ConstantStepSize, None)
	'''
	Constant StepSize

	:type: recurdyn.ProcessNet.IDouble
	'''
	CreateInitialConditionEveryStep = property(_get_CreateInitialConditionEveryStep, _set_CreateInitialConditionEveryStep)
	'''
	Create Initial Condition in EveryStep

	:type: bool
	'''
	CreateInitialConditionPlotStep = property(_get_CreateInitialConditionPlotStep, _set_CreateInitialConditionPlotStep)
	'''
	Create Initial Condition in PlotStep

	:type: bool
	'''
	EigenValueAnalysis = property(_get_EigenValueAnalysis, None)
	'''
	EigenValue Analysis

	:type: recurdyn.ProcessNet.IEigenValueProperty
	'''
	ErrorTolerance = property(_get_ErrorTolerance, None)
	'''
	Error tolerance

	:type: recurdyn.ProcessNet.IDouble
	'''
	ExpressionTimeOffset = property(_get_ExpressionTimeOffset, _set_ExpressionTimeOffset)
	'''
	Set Expression Time Offset Automatically

	:type: bool
	'''
	ICFCreationTypePlotStep = property(_get_ICFCreationTypePlotStep, _set_ICFCreationTypePlotStep)
	'''
	Type of Initial Condition File Creation in PlotStep

	:type: recurdyn.ProcessNet.ICFCreationType
	'''
	ImportEndTime = property(_get_ImportEndTime, _set_ImportEndTime)
	'''
	Import End Time Condition

	:type: str
	'''
	IncludeEigenValueAnalysis = property(_get_IncludeEigenValueAnalysis, _set_IncludeEigenValueAnalysis)
	'''
	Include EigenValue Analysis

	:type: bool
	'''
	IncludeStateMatrix = property(_get_IncludeStateMatrix, _set_IncludeStateMatrix)
	'''
	Include State Matrix

	:type: bool
	'''
	IncludeStaticAnalysis = property(_get_IncludeStaticAnalysis, _set_IncludeStaticAnalysis)
	'''
	Include Static Analysis

	:type: bool
	'''
	InitialTimeStep = property(_get_InitialTimeStep, None)
	'''
	Initial time step

	:type: recurdyn.ProcessNet.IDouble
	'''
	IntegratorType = property(_get_IntegratorType, _set_IntegratorType)
	'''
	Integrator Type

	:type: recurdyn.ProcessNet.IntegratorType
	'''
	JacobianEvaluation = property(_get_JacobianEvaluation, None)
	'''
	Jacobian Evaluation

	:type: recurdyn.ProcessNet.IDouble
	'''
	MatchSimulationEndTime = property(_get_MatchSimulationEndTime, _set_MatchSimulationEndTime)
	'''
	Match Simulation End Time Width User Input

	:type: bool
	'''
	MatchSolvingStepSize = property(_get_MatchSolvingStepSize, _set_MatchSolvingStepSize)
	'''
	Match Solving Step Size With Report Step

	:type: bool
	'''
	MaxOrder = property(_get_MaxOrder, None)
	'''
	Maximum Order

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxTimeStep = property(_get_MaxTimeStep, None)
	'''
	Max time step

	:type: recurdyn.ProcessNet.IDouble
	'''
	NumericalDamping = property(_get_NumericalDamping, None)
	'''
	Numerical Damping

	:type: recurdyn.ProcessNet.IDouble
	'''
	PlotMultiplierStepFactor = property(_get_PlotMultiplierStepFactor, None)
	'''
	Plot Multiplier Step Factor

	:type: recurdyn.ProcessNet.IDouble
	'''
	SaveEndTime = property(_get_SaveEndTime, _set_SaveEndTime)
	'''
	Save End Time Condition

	:type: str
	'''
	SimulationStep = property(_get_SimulationStep, None)
	'''
	Simulation step

	:type: recurdyn.ProcessNet.IDouble
	'''
	SimulationTime = property(_get_SimulationTime, None)
	'''
	Simulation time

	:type: recurdyn.ProcessNet.IDouble
	'''
	StaticAnalysis = property(_get_StaticAnalysis, None)
	'''
	Static Analysis

	:type: recurdyn.ProcessNet.IEquilibriumProperty
	'''
	StopExpression = property(_get_StopExpression, _set_StopExpression)
	'''
	Stop Condition Expression

	:type: recurdyn.ProcessNet.IExpression
	'''
	UseConstantStepSize = property(_get_UseConstantStepSize, _set_UseConstantStepSize)
	'''
	Use Constant StepSize

	:type: bool
	'''
	UseImportEndTime = property(_get_UseImportEndTime, _set_UseImportEndTime)
	'''
	Use Import End Time Condition

	:type: bool
	'''
	UseSaveEndTime = property(_get_UseSaveEndTime, _set_UseSaveEndTime)
	'''
	Use Save End Time Condition

	:type: bool
	'''
	UseStopCondition = property(_get_UseStopCondition, _set_UseStopCondition)
	'''
	Use Stop Condition

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_CreateInitialConditionEveryStep": _set_CreateInitialConditionEveryStep,
		"_set_CreateInitialConditionPlotStep": _set_CreateInitialConditionPlotStep,
		"_set_ExpressionTimeOffset": _set_ExpressionTimeOffset,
		"_set_ICFCreationTypePlotStep": _set_ICFCreationTypePlotStep,
		"_set_ImportEndTime": _set_ImportEndTime,
		"_set_IncludeEigenValueAnalysis": _set_IncludeEigenValueAnalysis,
		"_set_IncludeStateMatrix": _set_IncludeStateMatrix,
		"_set_IncludeStaticAnalysis": _set_IncludeStaticAnalysis,
		"_set_IntegratorType": _set_IntegratorType,
		"_set_MatchSimulationEndTime": _set_MatchSimulationEndTime,
		"_set_MatchSolvingStepSize": _set_MatchSolvingStepSize,
		"_set_SaveEndTime": _set_SaveEndTime,
		"_set_StopExpression": _set_StopExpression,
		"_set_UseConstantStepSize": _set_UseConstantStepSize,
		"_set_UseImportEndTime": _set_UseImportEndTime,
		"_set_UseSaveEndTime": _set_UseSaveEndTime,
		"_set_UseStopCondition": _set_UseStopCondition,
	}
	_prop_map_get_ = {
		"ConstantStepSize": (60, 2, (9, 0), (), "ConstantStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"CreateInitialConditionEveryStep": (77, 2, (11, 0), (), "CreateInitialConditionEveryStep", None),
		"CreateInitialConditionPlotStep": (78, 2, (11, 0), (), "CreateInitialConditionPlotStep", None),
		"EigenValueAnalysis": (72, 2, (9, 0), (), "EigenValueAnalysis", '{54CB2134-5515-4D88-B997-71E72B9D7FFA}'),
		"ErrorTolerance": (51, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ExpressionTimeOffset": (76, 2, (11, 0), (), "ExpressionTimeOffset", None),
		"ICFCreationTypePlotStep": (79, 2, (3, 0), (), "ICFCreationTypePlotStep", '{2853CDF8-0444-41AB-85F3-7FEF36A4CA2F}'),
		"ImportEndTime": (66, 2, (8, 0), (), "ImportEndTime", None),
		"IncludeEigenValueAnalysis": (71, 2, (11, 0), (), "IncludeEigenValueAnalysis", None),
		"IncludeStateMatrix": (73, 2, (11, 0), (), "IncludeStateMatrix", None),
		"IncludeStaticAnalysis": (69, 2, (11, 0), (), "IncludeStaticAnalysis", None),
		"InitialTimeStep": (52, 2, (9, 0), (), "InitialTimeStep", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"IntegratorType": (57, 2, (3, 0), (), "IntegratorType", '{2D0591FE-A04B-4B53-94E3-6A573BA83B02}'),
		"JacobianEvaluation": (61, 2, (9, 0), (), "JacobianEvaluation", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MatchSimulationEndTime": (67, 2, (11, 0), (), "MatchSimulationEndTime", None),
		"MatchSolvingStepSize": (62, 2, (11, 0), (), "MatchSolvingStepSize", None),
		"MaxOrder": (56, 2, (9, 0), (), "MaxOrder", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxTimeStep": (53, 2, (9, 0), (), "MaxTimeStep", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"NumericalDamping": (58, 2, (9, 0), (), "NumericalDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PlotMultiplierStepFactor": (68, 2, (9, 0), (), "PlotMultiplierStepFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SaveEndTime": (64, 2, (8, 0), (), "SaveEndTime", None),
		"SimulationStep": (54, 2, (9, 0), (), "SimulationStep", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SimulationTime": (55, 2, (9, 0), (), "SimulationTime", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StaticAnalysis": (70, 2, (9, 0), (), "StaticAnalysis", '{19BE442B-70CF-499D-9A4C-B6A3256CDD32}'),
		"StopExpression": (75, 2, (9, 0), (), "StopExpression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"UseConstantStepSize": (59, 2, (11, 0), (), "UseConstantStepSize", None),
		"UseImportEndTime": (65, 2, (11, 0), (), "UseImportEndTime", None),
		"UseSaveEndTime": (63, 2, (11, 0), (), "UseSaveEndTime", None),
		"UseStopCondition": (74, 2, (11, 0), (), "UseStopCondition", None),
	}
	_prop_map_put_ = {
		"CreateInitialConditionEveryStep": ((77, LCID, 4, 0),()),
		"CreateInitialConditionPlotStep": ((78, LCID, 4, 0),()),
		"ExpressionTimeOffset": ((76, LCID, 4, 0),()),
		"ICFCreationTypePlotStep": ((79, LCID, 4, 0),()),
		"ImportEndTime": ((66, LCID, 4, 0),()),
		"IncludeEigenValueAnalysis": ((71, LCID, 4, 0),()),
		"IncludeStateMatrix": ((73, LCID, 4, 0),()),
		"IncludeStaticAnalysis": ((69, LCID, 4, 0),()),
		"IntegratorType": ((57, LCID, 4, 0),()),
		"MatchSimulationEndTime": ((67, LCID, 4, 0),()),
		"MatchSolvingStepSize": ((62, LCID, 4, 0),()),
		"SaveEndTime": ((64, LCID, 4, 0),()),
		"StopExpression": ((75, LCID, 4, 0),()),
		"UseConstantStepSize": ((59, LCID, 4, 0),()),
		"UseImportEndTime": ((65, LCID, 4, 0),()),
		"UseSaveEndTime": ((63, LCID, 4, 0),()),
		"UseStopCondition": ((74, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJoint(DispatchBaseClass):
	'''Joint'''
	CLSID = IID('{B9173DAD-05DD-4037-9367-726DDDEE988E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointAtpoint(DispatchBaseClass):
	'''The ATPOINT elementary joint is the same as the spherical joint. This joint has three rotational degree of freedom.'''
	CLSID = IID('{ADED6BDA-80A4-4D1E-824C-A999B0402A7B}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointCartesianMotion(DispatchBaseClass):
	'''The Cartesian motion(CMOTION) is the Cartesian driving constraint for a selected translational or rotational degree of freedom of a reference frame.'''
	CLSID = IID('{57A77C2D-5956-4DBE-9893-820E0EA5D034}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_CartesianMotionType(self):
		return self._ApplyTypes_(*(302, 2, (3, 0), (), "CartesianMotionType", '{3045B1EE-0E1A-4818-870B-9953EA128E5F}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Condition(self):
		return self._ApplyTypes_(*(301, 2, (3, 0), (), "Condition", '{B5BA635B-694D-449E-8D9F-B576507FF861}'))
	def _get_Expression(self):
		return self._ApplyTypes_(*(305, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_InitialPosition(self):
		return self._ApplyTypes_(*(303, 2, (5, 0), (), "InitialPosition", None))
	def _get_InitialPosition2(self):
		return self._ApplyTypes_(*(307, 2, (9, 0), (), "InitialPosition2", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_InitialVelocity(self):
		return self._ApplyTypes_(*(304, 2, (5, 0), (), "InitialVelocity", None))
	def _get_InitialVelocity2(self):
		return self._ApplyTypes_(*(308, 2, (9, 0), (), "InitialVelocity2", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefMarker(self):
		return self._ApplyTypes_(*(306, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_CartesianMotionType(self, value):
		if "CartesianMotionType" in self.__dict__: self.__dict__["CartesianMotionType"] = value; return
		self._oleobj_.Invoke(*((302, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Condition(self, value):
		if "Condition" in self.__dict__: self.__dict__["Condition"] = value; return
		self._oleobj_.Invoke(*((301, LCID, 4, 0) + (value,) + ()))
	def _set_Expression(self, value):
		if "Expression" in self.__dict__: self.__dict__["Expression"] = value; return
		self._oleobj_.Invoke(*((305, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_InitialPosition(self, value):
		if "InitialPosition" in self.__dict__: self.__dict__["InitialPosition"] = value; return
		self._oleobj_.Invoke(*((303, LCID, 4, 0) + (value,) + ()))
	def _set_InitialVelocity(self, value):
		if "InitialVelocity" in self.__dict__: self.__dict__["InitialVelocity"] = value; return
		self._oleobj_.Invoke(*((304, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_RefMarker(self, value):
		if "RefMarker" in self.__dict__: self.__dict__["RefMarker"] = value; return
		self._oleobj_.Invoke(*((306, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	CartesianMotionType = property(_get_CartesianMotionType, _set_CartesianMotionType)
	'''
	Cartesian motion type

	:type: recurdyn.ProcessNet.CartesianMotionType
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Condition = property(_get_Condition, _set_Condition)
	'''
	Condition

	:type: recurdyn.ProcessNet.CartesianMotionCondition
	'''
	Expression = property(_get_Expression, _set_Expression)
	'''
	Expression

	:type: recurdyn.ProcessNet.IExpression
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	InitialPosition = property(_get_InitialPosition, _set_InitialPosition)
	'''
	Initial position

	:type: float
	'''
	InitialPosition2 = property(_get_InitialPosition2, None)
	'''
	Initial position

	:type: recurdyn.ProcessNet.IDouble
	'''
	InitialVelocity = property(_get_InitialVelocity, _set_InitialVelocity)
	'''
	Initial velocity

	:type: float
	'''
	InitialVelocity2 = property(_get_InitialVelocity2, None)
	'''
	Initial velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefMarker = property(_get_RefMarker, _set_RefMarker)
	'''
	Reference marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_CartesianMotionType": _set_CartesianMotionType,
		"_set_Comment": _set_Comment,
		"_set_Condition": _set_Condition,
		"_set_Expression": _set_Expression,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_InitialPosition": _set_InitialPosition,
		"_set_InitialVelocity": _set_InitialVelocity,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_RefMarker": _set_RefMarker,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"CartesianMotionType": (302, 2, (3, 0), (), "CartesianMotionType", '{3045B1EE-0E1A-4818-870B-9953EA128E5F}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Condition": (301, 2, (3, 0), (), "Condition", '{B5BA635B-694D-449E-8D9F-B576507FF861}'),
		"Expression": (305, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"InitialPosition": (303, 2, (5, 0), (), "InitialPosition", None),
		"InitialPosition2": (307, 2, (9, 0), (), "InitialPosition2", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"InitialVelocity": (304, 2, (5, 0), (), "InitialVelocity", None),
		"InitialVelocity2": (308, 2, (9, 0), (), "InitialVelocity2", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefMarker": (306, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"CartesianMotionType": ((302, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Condition": ((301, LCID, 4, 0),()),
		"Expression": ((305, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"InitialPosition": ((303, LCID, 4, 0),()),
		"InitialVelocity": ((304, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"RefMarker": ((306, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointCollection(DispatchBaseClass):
	'''IJointCollection'''
	CLSID = IID('{58A5314F-24D0-4D53-AE77-23B42CB9FAC7}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IJoint
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{B9173DAD-05DD-4037-9367-726DDDEE988E}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IJoint
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{B9173DAD-05DD-4037-9367-726DDDEE988E}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{B9173DAD-05DD-4037-9367-726DDDEE988E}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{B9173DAD-05DD-4037-9367-726DDDEE988E}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IJointConstantVelocity(DispatchBaseClass):
	'''The constant velocity constraint can model a constant velocity joint. This joint has two degrees of freedom. This joint is made constant velocity in the base body and the action body about the Z-axis of the joint marker.'''
	CLSID = IID('{F6D08556-99B4-4761-89E0-D33956DF5776}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointCurveOnCurve(DispatchBaseClass):
	'''The CVCV constraint can model a continuous contact model between two curves.'''
	CLSID = IID('{6BFD6484-AB37-4091-B840-C453D24051CC}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionCurve(self):
		return self._ApplyTypes_(*(301, 2, (9, 0), (), "ActionCurve", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_ActionCurveSegmentOption(self):
		return self._ApplyTypes_(*(309, 2, (9, 0), (), "ActionCurveSegmentOption", '{C86088A5-C799-4E35-B0F6-78D60243C544}'))
	def _get_ActionInitialPosition(self):
		return self._ApplyTypes_(*(302, 2, (9, 0), (), "ActionInitialPosition", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_ActionInitialVelocity(self):
		return self._ApplyTypes_(*(303, 2, (9, 0), (), "ActionInitialVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseCurve(self):
		return self._ApplyTypes_(*(304, 2, (9, 0), (), "BaseCurve", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseCurveSegmentOption(self):
		return self._ApplyTypes_(*(310, 2, (9, 0), (), "BaseCurveSegmentOption", '{C86088A5-C799-4E35-B0F6-78D60243C544}'))
	def _get_BaseInitialPosition(self):
		return self._ApplyTypes_(*(305, 2, (9, 0), (), "BaseInitialPosition", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_BaseInitialVelocity(self):
		return self._ApplyTypes_(*(306, 2, (9, 0), (), "BaseInitialVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_Friction(self):
		return self._ApplyTypes_(*(308, 2, (9, 0), (), "Friction", '{8EFA806E-0CE1-406E-B3FA-E2CAFB1D3308}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseFriction(self):
		return self._ApplyTypes_(*(307, 2, (11, 0), (), "UseFriction", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionCurve(self, value):
		if "ActionCurve" in self.__dict__: self.__dict__["ActionCurve"] = value; return
		self._oleobj_.Invoke(*((301, LCID, 4, 0) + (value,) + ()))
	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseCurve(self, value):
		if "BaseCurve" in self.__dict__: self.__dict__["BaseCurve"] = value; return
		self._oleobj_.Invoke(*((304, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseFriction(self, value):
		if "UseFriction" in self.__dict__: self.__dict__["UseFriction"] = value; return
		self._oleobj_.Invoke(*((307, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionCurve = property(_get_ActionCurve, _set_ActionCurve)
	'''
	Action curve

	:type: recurdyn.ProcessNet.IGeometry
	'''
	ActionCurveSegmentOption = property(_get_ActionCurveSegmentOption, None)
	'''
	Action curve segment option

	:type: recurdyn.ProcessNet.IConstraintCurveSegmentOption
	'''
	ActionInitialPosition = property(_get_ActionInitialPosition, None)
	'''
	Action initial position

	:type: recurdyn.ProcessNet.IVector
	'''
	ActionInitialVelocity = property(_get_ActionInitialVelocity, None)
	'''
	Action initial velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseCurve = property(_get_BaseCurve, _set_BaseCurve)
	'''
	Base curve

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseCurveSegmentOption = property(_get_BaseCurveSegmentOption, None)
	'''
	Base curve segment option

	:type: recurdyn.ProcessNet.IConstraintCurveSegmentOption
	'''
	BaseInitialPosition = property(_get_BaseInitialPosition, None)
	'''
	Base initial position

	:type: recurdyn.ProcessNet.IVector
	'''
	BaseInitialVelocity = property(_get_BaseInitialVelocity, None)
	'''
	Base initial velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	Friction = property(_get_Friction, None)
	'''
	CVCV(curve to curve) constraint friction

	:type: recurdyn.ProcessNet.IJointPointOnCurveFriction
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseFriction = property(_get_UseFriction, _set_UseFriction)
	'''
	Use friction

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionCurve": _set_ActionCurve,
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseCurve": _set_BaseCurve,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseFriction": _set_UseFriction,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionCurve": (301, 2, (9, 0), (), "ActionCurve", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"ActionCurveSegmentOption": (309, 2, (9, 0), (), "ActionCurveSegmentOption", '{C86088A5-C799-4E35-B0F6-78D60243C544}'),
		"ActionInitialPosition": (302, 2, (9, 0), (), "ActionInitialPosition", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"ActionInitialVelocity": (303, 2, (9, 0), (), "ActionInitialVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseCurve": (304, 2, (9, 0), (), "BaseCurve", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseCurveSegmentOption": (310, 2, (9, 0), (), "BaseCurveSegmentOption", '{C86088A5-C799-4E35-B0F6-78D60243C544}'),
		"BaseInitialPosition": (305, 2, (9, 0), (), "BaseInitialPosition", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"BaseInitialVelocity": (306, 2, (9, 0), (), "BaseInitialVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"Friction": (308, 2, (9, 0), (), "Friction", '{8EFA806E-0CE1-406E-B3FA-E2CAFB1D3308}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseFriction": (307, 2, (11, 0), (), "UseFriction", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionCurve": ((301, LCID, 4, 0),()),
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseCurve": ((304, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseFriction": ((307, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointCylindrical(DispatchBaseClass):
	'''The cylindrical joint allows one rotational degree of freedom and one translational degree of freedom.'''
	CLSID = IID('{D89EE062-1A3F-4FE7-915C-8A7D7F4792F0}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_Friction(self):
		return self._ApplyTypes_(*(312, 2, (9, 0), (), "Friction", '{AB2E1933-9D6C-4FD7-BCA5-BA0D2EC0DD3D}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_InitialRotationalPosition(self):
		return self._ApplyTypes_(*(304, 2, (9, 0), (), "InitialRotationalPosition", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_InitialRotationalVelocity(self):
		return self._ApplyTypes_(*(305, 2, (9, 0), (), "InitialRotationalVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_InitialTranslationalPosition(self):
		return self._ApplyTypes_(*(302, 2, (9, 0), (), "InitialTranslationalPosition", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_InitialTranslationalVelocity(self):
		return self._ApplyTypes_(*(303, 2, (9, 0), (), "InitialTranslationalVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RotationalMotion(self):
		return self._ApplyTypes_(*(309, 2, (9, 0), (), "RotationalMotion", '{47F4E55C-4291-4251-866A-98A74112D266}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_TranslationalMotion(self):
		return self._ApplyTypes_(*(307, 2, (9, 0), (), "TranslationalMotion", '{47F4E55C-4291-4251-866A-98A74112D266}'))
	def _get_UseFriction(self):
		return self._ApplyTypes_(*(310, 2, (11, 0), (), "UseFriction", None))
	def _get_UseInitialCondition(self):
		return self._ApplyTypes_(*(301, 2, (11, 0), (), "UseInitialCondition", None))
	def _get_UseRotationalMotion(self):
		return self._ApplyTypes_(*(308, 2, (11, 0), (), "UseRotationalMotion", None))
	def _get_UseStrictlyEnforceInitialConditions(self):
		return self._ApplyTypes_(*(313, 2, (11, 0), (), "UseStrictlyEnforceInitialConditions", None))
	def _get_UseTranslationalMotion(self):
		return self._ApplyTypes_(*(306, 2, (11, 0), (), "UseTranslationalMotion", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseFriction(self, value):
		if "UseFriction" in self.__dict__: self.__dict__["UseFriction"] = value; return
		self._oleobj_.Invoke(*((310, LCID, 4, 0) + (value,) + ()))
	def _set_UseInitialCondition(self, value):
		if "UseInitialCondition" in self.__dict__: self.__dict__["UseInitialCondition"] = value; return
		self._oleobj_.Invoke(*((301, LCID, 4, 0) + (value,) + ()))
	def _set_UseRotationalMotion(self, value):
		if "UseRotationalMotion" in self.__dict__: self.__dict__["UseRotationalMotion"] = value; return
		self._oleobj_.Invoke(*((308, LCID, 4, 0) + (value,) + ()))
	def _set_UseStrictlyEnforceInitialConditions(self, value):
		if "UseStrictlyEnforceInitialConditions" in self.__dict__: self.__dict__["UseStrictlyEnforceInitialConditions"] = value; return
		self._oleobj_.Invoke(*((313, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslationalMotion(self, value):
		if "UseTranslationalMotion" in self.__dict__: self.__dict__["UseTranslationalMotion"] = value; return
		self._oleobj_.Invoke(*((306, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	Friction = property(_get_Friction, None)
	'''
	Cylindrical joint friction

	:type: recurdyn.ProcessNet.IJointCylindricalFriction
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	InitialRotationalPosition = property(_get_InitialRotationalPosition, None)
	'''
	Initial rotational position

	:type: recurdyn.ProcessNet.IDouble
	'''
	InitialRotationalVelocity = property(_get_InitialRotationalVelocity, None)
	'''
	Initial rotational velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	InitialTranslationalPosition = property(_get_InitialTranslationalPosition, None)
	'''
	Initial translational position

	:type: recurdyn.ProcessNet.IDouble
	'''
	InitialTranslationalVelocity = property(_get_InitialTranslationalVelocity, None)
	'''
	Initial translational velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RotationalMotion = property(_get_RotationalMotion, None)
	'''
	Rotational motion

	:type: recurdyn.ProcessNet.IMotion
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	TranslationalMotion = property(_get_TranslationalMotion, None)
	'''
	Translational motion

	:type: recurdyn.ProcessNet.IMotion
	'''
	UseFriction = property(_get_UseFriction, _set_UseFriction)
	'''
	Use friction

	:type: bool
	'''
	UseInitialCondition = property(_get_UseInitialCondition, _set_UseInitialCondition)
	'''
	Use initial condition

	:type: bool
	'''
	UseRotationalMotion = property(_get_UseRotationalMotion, _set_UseRotationalMotion)
	'''
	Use rotational motion

	:type: bool
	'''
	UseStrictlyEnforceInitialConditions = property(_get_UseStrictlyEnforceInitialConditions, _set_UseStrictlyEnforceInitialConditions)
	'''
	Strictly Enforce Initial Conditions

	:type: bool
	'''
	UseTranslationalMotion = property(_get_UseTranslationalMotion, _set_UseTranslationalMotion)
	'''
	Use translational motion

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseFriction": _set_UseFriction,
		"_set_UseInitialCondition": _set_UseInitialCondition,
		"_set_UseRotationalMotion": _set_UseRotationalMotion,
		"_set_UseStrictlyEnforceInitialConditions": _set_UseStrictlyEnforceInitialConditions,
		"_set_UseTranslationalMotion": _set_UseTranslationalMotion,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"Friction": (312, 2, (9, 0), (), "Friction", '{AB2E1933-9D6C-4FD7-BCA5-BA0D2EC0DD3D}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"InitialRotationalPosition": (304, 2, (9, 0), (), "InitialRotationalPosition", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"InitialRotationalVelocity": (305, 2, (9, 0), (), "InitialRotationalVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"InitialTranslationalPosition": (302, 2, (9, 0), (), "InitialTranslationalPosition", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"InitialTranslationalVelocity": (303, 2, (9, 0), (), "InitialTranslationalVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RotationalMotion": (309, 2, (9, 0), (), "RotationalMotion", '{47F4E55C-4291-4251-866A-98A74112D266}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"TranslationalMotion": (307, 2, (9, 0), (), "TranslationalMotion", '{47F4E55C-4291-4251-866A-98A74112D266}'),
		"UseFriction": (310, 2, (11, 0), (), "UseFriction", None),
		"UseInitialCondition": (301, 2, (11, 0), (), "UseInitialCondition", None),
		"UseRotationalMotion": (308, 2, (11, 0), (), "UseRotationalMotion", None),
		"UseStrictlyEnforceInitialConditions": (313, 2, (11, 0), (), "UseStrictlyEnforceInitialConditions", None),
		"UseTranslationalMotion": (306, 2, (11, 0), (), "UseTranslationalMotion", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseFriction": ((310, LCID, 4, 0),()),
		"UseInitialCondition": ((301, LCID, 4, 0),()),
		"UseRotationalMotion": ((308, LCID, 4, 0),()),
		"UseStrictlyEnforceInitialConditions": ((313, LCID, 4, 0),()),
		"UseTranslationalMotion": ((306, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointCylindricalFriction(DispatchBaseClass):
	'''Cylindrical joint friction. The cylindrical joint friction force which contains stiction algorithm.'''
	CLSID = IID('{AB2E1933-9D6C-4FD7-BCA5-BA0D2EC0DD3D}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AbsoluteVelocityThreshold(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_DynamicFrictionCoefficient(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFrictionForce(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFrictionTorque(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "MaxFrictionTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxStictionDeformation(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_OverlapDelta(self):
		return self._ApplyTypes_(*(109, 2, (9, 0), (), "OverlapDelta", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_OverlapMode(self):
		return self._ApplyTypes_(*(110, 2, (3, 0), (), "OverlapMode", '{6EE17961-4865-4EF4-B2F2-E28A05B2BD31}'))
	def _get_PinRadius(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "PinRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PreForce(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "PreForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PreTorque(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "PreTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StaticFrictionCoefficient(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseBendingMoment(self):
		return self._ApplyTypes_(*(108, 2, (11, 0), (), "UseBendingMoment", None))
	def _get_UseMaxFrictionForce(self):
		return self._ApplyTypes_(*(105, 2, (11, 0), (), "UseMaxFrictionForce", None))
	def _get_UseMaxFrictionTorque(self):
		return self._ApplyTypes_(*(107, 2, (11, 0), (), "UseMaxFrictionTorque", None))
	def _get_UseReactionForce(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseReactionForce", None))
	def _get_UseSliding(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseSliding", None))
	def _get_UseStiction(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseStiction", None))

	def _set_OverlapMode(self, value):
		if "OverlapMode" in self.__dict__: self.__dict__["OverlapMode"] = value; return
		self._oleobj_.Invoke(*((110, LCID, 4, 0) + (value,) + ()))
	def _set_UseBendingMoment(self, value):
		if "UseBendingMoment" in self.__dict__: self.__dict__["UseBendingMoment"] = value; return
		self._oleobj_.Invoke(*((108, LCID, 4, 0) + (value,) + ()))
	def _set_UseMaxFrictionForce(self, value):
		if "UseMaxFrictionForce" in self.__dict__: self.__dict__["UseMaxFrictionForce"] = value; return
		self._oleobj_.Invoke(*((105, LCID, 4, 0) + (value,) + ()))
	def _set_UseMaxFrictionTorque(self, value):
		if "UseMaxFrictionTorque" in self.__dict__: self.__dict__["UseMaxFrictionTorque"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UseReactionForce(self, value):
		if "UseReactionForce" in self.__dict__: self.__dict__["UseReactionForce"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseSliding(self, value):
		if "UseSliding" in self.__dict__: self.__dict__["UseSliding"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_UseStiction(self, value):
		if "UseStiction" in self.__dict__: self.__dict__["UseStiction"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))

	AbsoluteVelocityThreshold = property(_get_AbsoluteVelocityThreshold, None)
	'''
	Absolute threshold velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	DynamicFrictionCoefficient = property(_get_DynamicFrictionCoefficient, None)
	'''
	Dynamic friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFrictionForce = property(_get_MaxFrictionForce, None)
	'''
	Maximum friction force

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFrictionTorque = property(_get_MaxFrictionTorque, None)
	'''
	Maximum friction torque

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxStictionDeformation = property(_get_MaxStictionDeformation, None)
	'''
	Maximum stiction deformation

	:type: recurdyn.ProcessNet.IDouble
	'''
	OverlapDelta = property(_get_OverlapDelta, None)
	'''
	Overlap delta

	:type: recurdyn.ProcessNet.IDouble
	'''
	OverlapMode = property(_get_OverlapMode, _set_OverlapMode)
	'''
	Overlap mode

	:type: recurdyn.ProcessNet.OverlapMode
	'''
	PinRadius = property(_get_PinRadius, None)
	'''
	Pin radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	PreForce = property(_get_PreForce, None)
	'''
	Pre-force

	:type: recurdyn.ProcessNet.IDouble
	'''
	PreTorque = property(_get_PreTorque, None)
	'''
	Pre-torque

	:type: recurdyn.ProcessNet.IDouble
	'''
	StaticFrictionCoefficient = property(_get_StaticFrictionCoefficient, None)
	'''
	Static friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseBendingMoment = property(_get_UseBendingMoment, _set_UseBendingMoment)
	'''
	Use bending moment

	:type: bool
	'''
	UseMaxFrictionForce = property(_get_UseMaxFrictionForce, _set_UseMaxFrictionForce)
	'''
	Use maximum friction force

	:type: bool
	'''
	UseMaxFrictionTorque = property(_get_UseMaxFrictionTorque, _set_UseMaxFrictionTorque)
	'''
	Use maximum friction torque

	:type: bool
	'''
	UseReactionForce = property(_get_UseReactionForce, _set_UseReactionForce)
	'''
	Use reaction force

	:type: bool
	'''
	UseSliding = property(_get_UseSliding, _set_UseSliding)
	'''
	Use sliding

	:type: bool
	'''
	UseStiction = property(_get_UseStiction, _set_UseStiction)
	'''
	Use stiction

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_OverlapMode": _set_OverlapMode,
		"_set_UseBendingMoment": _set_UseBendingMoment,
		"_set_UseMaxFrictionForce": _set_UseMaxFrictionForce,
		"_set_UseMaxFrictionTorque": _set_UseMaxFrictionTorque,
		"_set_UseReactionForce": _set_UseReactionForce,
		"_set_UseSliding": _set_UseSliding,
		"_set_UseStiction": _set_UseStiction,
	}
	_prop_map_get_ = {
		"AbsoluteVelocityThreshold": (51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"DynamicFrictionCoefficient": (52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFrictionForce": (104, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFrictionTorque": (106, 2, (9, 0), (), "MaxFrictionTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxStictionDeformation": (53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"OverlapDelta": (109, 2, (9, 0), (), "OverlapDelta", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"OverlapMode": (110, 2, (3, 0), (), "OverlapMode", '{6EE17961-4865-4EF4-B2F2-E28A05B2BD31}'),
		"PinRadius": (103, 2, (9, 0), (), "PinRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PreForce": (101, 2, (9, 0), (), "PreForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PreTorque": (102, 2, (9, 0), (), "PreTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StaticFrictionCoefficient": (54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseBendingMoment": (108, 2, (11, 0), (), "UseBendingMoment", None),
		"UseMaxFrictionForce": (105, 2, (11, 0), (), "UseMaxFrictionForce", None),
		"UseMaxFrictionTorque": (107, 2, (11, 0), (), "UseMaxFrictionTorque", None),
		"UseReactionForce": (55, 2, (11, 0), (), "UseReactionForce", None),
		"UseSliding": (56, 2, (11, 0), (), "UseSliding", None),
		"UseStiction": (57, 2, (11, 0), (), "UseStiction", None),
	}
	_prop_map_put_ = {
		"OverlapMode": ((110, LCID, 4, 0),()),
		"UseBendingMoment": ((108, LCID, 4, 0),()),
		"UseMaxFrictionForce": ((105, LCID, 4, 0),()),
		"UseMaxFrictionTorque": ((107, LCID, 4, 0),()),
		"UseReactionForce": ((55, LCID, 4, 0),()),
		"UseSliding": ((56, LCID, 4, 0),()),
		"UseStiction": ((57, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointDistance(DispatchBaseClass):
	'''The distance joint constrains the distance between two points defined on two bodies. This joint has five degrees of freedom.'''
	CLSID = IID('{2ED808B6-A890-4694-A37C-E8E2E44BCD41}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointFixed(DispatchBaseClass):
	'''The fixed joint has zero degree of freedom.'''
	CLSID = IID('{2EA33375-B6DB-4F9D-A3B3-B86A2C91BEDA}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseAdvancedConnectionFlexibleBody(self):
		return self._ApplyTypes_(*(301, 2, (11, 0), (), "UseAdvancedConnectionFlexibleBody", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseAdvancedConnectionFlexibleBody(self, value):
		if "UseAdvancedConnectionFlexibleBody" in self.__dict__: self.__dict__["UseAdvancedConnectionFlexibleBody"] = value; return
		self._oleobj_.Invoke(*((301, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseAdvancedConnectionFlexibleBody = property(_get_UseAdvancedConnectionFlexibleBody, _set_UseAdvancedConnectionFlexibleBody)
	'''
	Advanced connection for flexible bodies.

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseAdvancedConnectionFlexibleBody": _set_UseAdvancedConnectionFlexibleBody,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseAdvancedConnectionFlexibleBody": (301, 2, (11, 0), (), "UseAdvancedConnectionFlexibleBody", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseAdvancedConnectionFlexibleBody": ((301, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointFriction(DispatchBaseClass):
	'''Joint friction'''
	CLSID = IID('{BE02BB82-F407-44ED-B185-CA270C5842A0}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AbsoluteVelocityThreshold(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_DynamicFrictionCoefficient(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxStictionDeformation(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StaticFrictionCoefficient(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseReactionForce(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseReactionForce", None))
	def _get_UseSliding(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseSliding", None))
	def _get_UseStiction(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseStiction", None))

	def _set_UseReactionForce(self, value):
		if "UseReactionForce" in self.__dict__: self.__dict__["UseReactionForce"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseSliding(self, value):
		if "UseSliding" in self.__dict__: self.__dict__["UseSliding"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_UseStiction(self, value):
		if "UseStiction" in self.__dict__: self.__dict__["UseStiction"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))

	AbsoluteVelocityThreshold = property(_get_AbsoluteVelocityThreshold, None)
	'''
	Absolute threshold velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	DynamicFrictionCoefficient = property(_get_DynamicFrictionCoefficient, None)
	'''
	Dynamic friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxStictionDeformation = property(_get_MaxStictionDeformation, None)
	'''
	Maximum stiction deformation

	:type: recurdyn.ProcessNet.IDouble
	'''
	StaticFrictionCoefficient = property(_get_StaticFrictionCoefficient, None)
	'''
	Static friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseReactionForce = property(_get_UseReactionForce, _set_UseReactionForce)
	'''
	Use reaction force

	:type: bool
	'''
	UseSliding = property(_get_UseSliding, _set_UseSliding)
	'''
	Use sliding

	:type: bool
	'''
	UseStiction = property(_get_UseStiction, _set_UseStiction)
	'''
	Use stiction

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UseReactionForce": _set_UseReactionForce,
		"_set_UseSliding": _set_UseSliding,
		"_set_UseStiction": _set_UseStiction,
	}
	_prop_map_get_ = {
		"AbsoluteVelocityThreshold": (51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"DynamicFrictionCoefficient": (52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxStictionDeformation": (53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StaticFrictionCoefficient": (54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseReactionForce": (55, 2, (11, 0), (), "UseReactionForce", None),
		"UseSliding": (56, 2, (11, 0), (), "UseSliding", None),
		"UseStiction": (57, 2, (11, 0), (), "UseStiction", None),
	}
	_prop_map_put_ = {
		"UseReactionForce": ((55, LCID, 4, 0),()),
		"UseSliding": ((56, LCID, 4, 0),()),
		"UseStiction": ((57, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointFrictionWithoutStiction(DispatchBaseClass):
	'''Joint friction without stiction'''
	CLSID = IID('{405F5B7F-682D-40AB-B9CC-5E09AAC8BF83}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AbsoluteVelocityThreshold(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_DynamicFrictionCoefficient(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFrictionForce(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StaticFrictionCoefficient(self):
		return self._ApplyTypes_(*(56, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseMaxFrictionForce(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseMaxFrictionForce", None))

	def _set_UseMaxFrictionForce(self, value):
		if "UseMaxFrictionForce" in self.__dict__: self.__dict__["UseMaxFrictionForce"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))

	AbsoluteVelocityThreshold = property(_get_AbsoluteVelocityThreshold, None)
	'''
	Absolute threshold velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	DynamicFrictionCoefficient = property(_get_DynamicFrictionCoefficient, None)
	'''
	Dynamic friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFrictionForce = property(_get_MaxFrictionForce, None)
	'''
	Maximum friction force

	:type: recurdyn.ProcessNet.IDouble
	'''
	StaticFrictionCoefficient = property(_get_StaticFrictionCoefficient, None)
	'''
	Static friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseMaxFrictionForce = property(_get_UseMaxFrictionForce, _set_UseMaxFrictionForce)
	'''
	Use maximum friction force

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UseMaxFrictionForce": _set_UseMaxFrictionForce,
	}
	_prop_map_get_ = {
		"AbsoluteVelocityThreshold": (51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"DynamicFrictionCoefficient": (52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFrictionForce": (53, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StaticFrictionCoefficient": (56, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseMaxFrictionForce": (57, 2, (11, 0), (), "UseMaxFrictionForce", None),
	}
	_prop_map_put_ = {
		"UseMaxFrictionForce": ((57, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointInCMotionGroup(DispatchBaseClass):
	'''CMOTION joint in the group cmotion'''
	CLSID = IID('{C8B1C218-2E2D-4A3C-8D54-1A876AFABF03}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Condition(self):
		return self._ApplyTypes_(*(151, 2, (3, 0), (), "Condition", '{B5BA635B-694D-449E-8D9F-B576507FF861}'))
	def _get_Expression(self):
		return self._ApplyTypes_(*(155, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_InitialPosition(self):
		return self._ApplyTypes_(*(153, 2, (5, 0), (), "InitialPosition", None))
	def _get_InitialPosition2(self):
		return self._ApplyTypes_(*(156, 2, (9, 0), (), "InitialPosition2", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_InitialVelocity(self):
		return self._ApplyTypes_(*(154, 2, (5, 0), (), "InitialVelocity", None))
	def _get_InitialVelocity2(self):
		return self._ApplyTypes_(*(157, 2, (9, 0), (), "InitialVelocity2", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_OnCondition(self):
		return self._ApplyTypes_(*(158, 2, (9, 0), (), "OnCondition", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_Use(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Use", None))

	def _set_Condition(self, value):
		if "Condition" in self.__dict__: self.__dict__["Condition"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Expression(self, value):
		if "Expression" in self.__dict__: self.__dict__["Expression"] = value; return
		self._oleobj_.Invoke(*((155, LCID, 4, 0) + (value,) + ()))
	def _set_InitialPosition(self, value):
		if "InitialPosition" in self.__dict__: self.__dict__["InitialPosition"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))
	def _set_InitialVelocity(self, value):
		if "InitialVelocity" in self.__dict__: self.__dict__["InitialVelocity"] = value; return
		self._oleobj_.Invoke(*((154, LCID, 4, 0) + (value,) + ()))
	def _set_OnCondition(self, value):
		if "OnCondition" in self.__dict__: self.__dict__["OnCondition"] = value; return
		self._oleobj_.Invoke(*((158, LCID, 4, 0) + (value,) + ()))
	def _set_Use(self, value):
		if "Use" in self.__dict__: self.__dict__["Use"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))

	Condition = property(_get_Condition, _set_Condition)
	'''
	Condition

	:type: recurdyn.ProcessNet.CartesianMotionCondition
	'''
	Expression = property(_get_Expression, _set_Expression)
	'''
	Expression

	:type: recurdyn.ProcessNet.IExpression
	'''
	InitialPosition = property(_get_InitialPosition, _set_InitialPosition)
	'''
	Initial position

	:type: float
	'''
	InitialPosition2 = property(_get_InitialPosition2, None)
	'''
	Initial position

	:type: recurdyn.ProcessNet.IDouble
	'''
	InitialVelocity = property(_get_InitialVelocity, _set_InitialVelocity)
	'''
	Initial velocity

	:type: float
	'''
	InitialVelocity2 = property(_get_InitialVelocity2, None)
	'''
	Initial velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	OnCondition = property(_get_OnCondition, _set_OnCondition)
	'''
	On condition expression

	:type: recurdyn.ProcessNet.IExpression
	'''
	Use = property(_get_Use, _set_Use)
	'''
	Use

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Condition": _set_Condition,
		"_set_Expression": _set_Expression,
		"_set_InitialPosition": _set_InitialPosition,
		"_set_InitialVelocity": _set_InitialVelocity,
		"_set_OnCondition": _set_OnCondition,
		"_set_Use": _set_Use,
	}
	_prop_map_get_ = {
		"Condition": (151, 2, (3, 0), (), "Condition", '{B5BA635B-694D-449E-8D9F-B576507FF861}'),
		"Expression": (155, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"InitialPosition": (153, 2, (5, 0), (), "InitialPosition", None),
		"InitialPosition2": (156, 2, (9, 0), (), "InitialPosition2", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"InitialVelocity": (154, 2, (5, 0), (), "InitialVelocity", None),
		"InitialVelocity2": (157, 2, (9, 0), (), "InitialVelocity2", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"OnCondition": (158, 2, (9, 0), (), "OnCondition", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"Use": (152, 2, (11, 0), (), "Use", None),
	}
	_prop_map_put_ = {
		"Condition": ((151, LCID, 4, 0),()),
		"Expression": ((155, LCID, 4, 0),()),
		"InitialPosition": ((153, LCID, 4, 0),()),
		"InitialVelocity": ((154, LCID, 4, 0),()),
		"OnCondition": ((158, LCID, 4, 0),()),
		"Use": ((152, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointInline(DispatchBaseClass):
	'''The INLINE elementary joint constrains the origin of the action marker to lie on the z-axis of a base marker.'''
	CLSID = IID('{002ECEBC-0D7D-40DE-9F2C-D6F88E5511C6}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointInplane(DispatchBaseClass):
	'''The INPLANE elementary joint constrains the origin of the action marker to lie on the X-Y plane of the base marker.'''
	CLSID = IID('{C3E0D80D-8C4D-4DA8-9206-5A7A83435267}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_Friction(self):
		return self._ApplyTypes_(*(302, 2, (9, 0), (), "Friction", '{B47415D4-8717-42A3-9F74-965184E44C73}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseFriction(self):
		return self._ApplyTypes_(*(301, 2, (11, 0), (), "UseFriction", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseFriction(self, value):
		if "UseFriction" in self.__dict__: self.__dict__["UseFriction"] = value; return
		self._oleobj_.Invoke(*((301, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	Friction = property(_get_Friction, None)
	'''
	Inplane joint friction

	:type: recurdyn.ProcessNet.IJointInplaneFriction
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseFriction = property(_get_UseFriction, _set_UseFriction)
	'''
	Use friction

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseFriction": _set_UseFriction,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"Friction": (302, 2, (9, 0), (), "Friction", '{B47415D4-8717-42A3-9F74-965184E44C73}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseFriction": (301, 2, (11, 0), (), "UseFriction", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseFriction": ((301, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointInplaneFriction(DispatchBaseClass):
	'''Inplane joint friction. The Inplane joint friction force which contains stiction algorithm.'''
	CLSID = IID('{B47415D4-8717-42A3-9F74-965184E44C73}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AbsoluteVelocityThreshold(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BallRadius(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "BallRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_DynamicFrictionCoefficient(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFrictionForce(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFrictionTorque(self):
		return self._ApplyTypes_(*(107, 2, (9, 0), (), "MaxFrictionTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxStictionDeformation(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PreForce(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "PreForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PreTorque(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "PreTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StaticFrictionCoefficient(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseMaxFrictionForce(self):
		return self._ApplyTypes_(*(104, 2, (11, 0), (), "UseMaxFrictionForce", None))
	def _get_UseMaxFrictionTorque(self):
		return self._ApplyTypes_(*(106, 2, (11, 0), (), "UseMaxFrictionTorque", None))
	def _get_UseReactionForce(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseReactionForce", None))
	def _get_UseSliding(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseSliding", None))
	def _get_UseStiction(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseStiction", None))

	def _set_UseMaxFrictionForce(self, value):
		if "UseMaxFrictionForce" in self.__dict__: self.__dict__["UseMaxFrictionForce"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_UseMaxFrictionTorque(self, value):
		if "UseMaxFrictionTorque" in self.__dict__: self.__dict__["UseMaxFrictionTorque"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))
	def _set_UseReactionForce(self, value):
		if "UseReactionForce" in self.__dict__: self.__dict__["UseReactionForce"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseSliding(self, value):
		if "UseSliding" in self.__dict__: self.__dict__["UseSliding"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_UseStiction(self, value):
		if "UseStiction" in self.__dict__: self.__dict__["UseStiction"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))

	AbsoluteVelocityThreshold = property(_get_AbsoluteVelocityThreshold, None)
	'''
	Absolute threshold velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	BallRadius = property(_get_BallRadius, None)
	'''
	Ball radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	DynamicFrictionCoefficient = property(_get_DynamicFrictionCoefficient, None)
	'''
	Dynamic friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFrictionForce = property(_get_MaxFrictionForce, None)
	'''
	Maximum friction force

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFrictionTorque = property(_get_MaxFrictionTorque, None)
	'''
	Maximum friction torque

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxStictionDeformation = property(_get_MaxStictionDeformation, None)
	'''
	Maximum stiction deformation

	:type: recurdyn.ProcessNet.IDouble
	'''
	PreForce = property(_get_PreForce, None)
	'''
	Pre-force

	:type: recurdyn.ProcessNet.IDouble
	'''
	PreTorque = property(_get_PreTorque, None)
	'''
	Pre-torque

	:type: recurdyn.ProcessNet.IDouble
	'''
	StaticFrictionCoefficient = property(_get_StaticFrictionCoefficient, None)
	'''
	Static friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseMaxFrictionForce = property(_get_UseMaxFrictionForce, _set_UseMaxFrictionForce)
	'''
	Use maximum friction force

	:type: bool
	'''
	UseMaxFrictionTorque = property(_get_UseMaxFrictionTorque, _set_UseMaxFrictionTorque)
	'''
	Use maximum friction torque

	:type: bool
	'''
	UseReactionForce = property(_get_UseReactionForce, _set_UseReactionForce)
	'''
	Use reaction force

	:type: bool
	'''
	UseSliding = property(_get_UseSliding, _set_UseSliding)
	'''
	Use sliding

	:type: bool
	'''
	UseStiction = property(_get_UseStiction, _set_UseStiction)
	'''
	Use stiction

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UseMaxFrictionForce": _set_UseMaxFrictionForce,
		"_set_UseMaxFrictionTorque": _set_UseMaxFrictionTorque,
		"_set_UseReactionForce": _set_UseReactionForce,
		"_set_UseSliding": _set_UseSliding,
		"_set_UseStiction": _set_UseStiction,
	}
	_prop_map_get_ = {
		"AbsoluteVelocityThreshold": (51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BallRadius": (103, 2, (9, 0), (), "BallRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"DynamicFrictionCoefficient": (52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFrictionForce": (105, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFrictionTorque": (107, 2, (9, 0), (), "MaxFrictionTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxStictionDeformation": (53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PreForce": (101, 2, (9, 0), (), "PreForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PreTorque": (102, 2, (9, 0), (), "PreTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StaticFrictionCoefficient": (54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseMaxFrictionForce": (104, 2, (11, 0), (), "UseMaxFrictionForce", None),
		"UseMaxFrictionTorque": (106, 2, (11, 0), (), "UseMaxFrictionTorque", None),
		"UseReactionForce": (55, 2, (11, 0), (), "UseReactionForce", None),
		"UseSliding": (56, 2, (11, 0), (), "UseSliding", None),
		"UseStiction": (57, 2, (11, 0), (), "UseStiction", None),
	}
	_prop_map_put_ = {
		"UseMaxFrictionForce": ((104, LCID, 4, 0),()),
		"UseMaxFrictionTorque": ((106, LCID, 4, 0),()),
		"UseReactionForce": ((55, LCID, 4, 0),()),
		"UseSliding": ((56, LCID, 4, 0),()),
		"UseStiction": ((57, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointOnOff(DispatchBaseClass):
	'''The OnOffJoint controls the six degree of freedom.'''
	CLSID = IID('{3509B78D-BB70-4F88-8A48-BA852F3658BE}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Expression(self):
		return self._ApplyTypes_(*(308, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseIncludeOnCondition(self):
		return self._ApplyTypes_(*(307, 2, (11, 0), (), "UseIncludeOnCondition", None))
	def _get_UseRotationalX(self):
		return self._ApplyTypes_(*(304, 2, (11, 0), (), "UseRotationalX", None))
	def _get_UseRotationalY(self):
		return self._ApplyTypes_(*(305, 2, (11, 0), (), "UseRotationalY", None))
	def _get_UseRotationalZ(self):
		return self._ApplyTypes_(*(306, 2, (11, 0), (), "UseRotationalZ", None))
	def _get_UseTranslationalX(self):
		return self._ApplyTypes_(*(301, 2, (11, 0), (), "UseTranslationalX", None))
	def _get_UseTranslationalY(self):
		return self._ApplyTypes_(*(302, 2, (11, 0), (), "UseTranslationalY", None))
	def _get_UseTranslationalZ(self):
		return self._ApplyTypes_(*(303, 2, (11, 0), (), "UseTranslationalZ", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Expression(self, value):
		if "Expression" in self.__dict__: self.__dict__["Expression"] = value; return
		self._oleobj_.Invoke(*((308, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseIncludeOnCondition(self, value):
		if "UseIncludeOnCondition" in self.__dict__: self.__dict__["UseIncludeOnCondition"] = value; return
		self._oleobj_.Invoke(*((307, LCID, 4, 0) + (value,) + ()))
	def _set_UseRotationalX(self, value):
		if "UseRotationalX" in self.__dict__: self.__dict__["UseRotationalX"] = value; return
		self._oleobj_.Invoke(*((304, LCID, 4, 0) + (value,) + ()))
	def _set_UseRotationalY(self, value):
		if "UseRotationalY" in self.__dict__: self.__dict__["UseRotationalY"] = value; return
		self._oleobj_.Invoke(*((305, LCID, 4, 0) + (value,) + ()))
	def _set_UseRotationalZ(self, value):
		if "UseRotationalZ" in self.__dict__: self.__dict__["UseRotationalZ"] = value; return
		self._oleobj_.Invoke(*((306, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslationalX(self, value):
		if "UseTranslationalX" in self.__dict__: self.__dict__["UseTranslationalX"] = value; return
		self._oleobj_.Invoke(*((301, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslationalY(self, value):
		if "UseTranslationalY" in self.__dict__: self.__dict__["UseTranslationalY"] = value; return
		self._oleobj_.Invoke(*((302, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslationalZ(self, value):
		if "UseTranslationalZ" in self.__dict__: self.__dict__["UseTranslationalZ"] = value; return
		self._oleobj_.Invoke(*((303, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Expression = property(_get_Expression, _set_Expression)
	'''
	Expression

	:type: recurdyn.ProcessNet.IExpression
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseIncludeOnCondition = property(_get_UseIncludeOnCondition, _set_UseIncludeOnCondition)
	'''
	Turn on or off the expression.

	:type: bool
	'''
	UseRotationalX = property(_get_UseRotationalX, _set_UseRotationalX)
	'''
	Turn on or off the rotational motion around x-axis.

	:type: bool
	'''
	UseRotationalY = property(_get_UseRotationalY, _set_UseRotationalY)
	'''
	Turn on or off the rotational motion around y-axis.

	:type: bool
	'''
	UseRotationalZ = property(_get_UseRotationalZ, _set_UseRotationalZ)
	'''
	Turn on or off the rotational motion around z-axis.

	:type: bool
	'''
	UseTranslationalX = property(_get_UseTranslationalX, _set_UseTranslationalX)
	'''
	Turn on or off the translational motion along x-axis.

	:type: bool
	'''
	UseTranslationalY = property(_get_UseTranslationalY, _set_UseTranslationalY)
	'''
	Turn on or off the translational motion along y-axis.

	:type: bool
	'''
	UseTranslationalZ = property(_get_UseTranslationalZ, _set_UseTranslationalZ)
	'''
	Turn on or off the translational motion along z-axis.

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_Expression": _set_Expression,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseIncludeOnCondition": _set_UseIncludeOnCondition,
		"_set_UseRotationalX": _set_UseRotationalX,
		"_set_UseRotationalY": _set_UseRotationalY,
		"_set_UseRotationalZ": _set_UseRotationalZ,
		"_set_UseTranslationalX": _set_UseTranslationalX,
		"_set_UseTranslationalY": _set_UseTranslationalY,
		"_set_UseTranslationalZ": _set_UseTranslationalZ,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Expression": (308, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseIncludeOnCondition": (307, 2, (11, 0), (), "UseIncludeOnCondition", None),
		"UseRotationalX": (304, 2, (11, 0), (), "UseRotationalX", None),
		"UseRotationalY": (305, 2, (11, 0), (), "UseRotationalY", None),
		"UseRotationalZ": (306, 2, (11, 0), (), "UseRotationalZ", None),
		"UseTranslationalX": (301, 2, (11, 0), (), "UseTranslationalX", None),
		"UseTranslationalY": (302, 2, (11, 0), (), "UseTranslationalY", None),
		"UseTranslationalZ": (303, 2, (11, 0), (), "UseTranslationalZ", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Expression": ((308, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseIncludeOnCondition": ((307, LCID, 4, 0),()),
		"UseRotationalX": ((304, LCID, 4, 0),()),
		"UseRotationalY": ((305, LCID, 4, 0),()),
		"UseRotationalZ": ((306, LCID, 4, 0),()),
		"UseTranslationalX": ((301, LCID, 4, 0),()),
		"UseTranslationalY": ((302, LCID, 4, 0),()),
		"UseTranslationalZ": ((303, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointOrientation(DispatchBaseClass):
	'''The ORIENTATION elementary joint constrains the orientation of the action marker to have the same orientation of the base marker. The resulting degrees of freedom are three.'''
	CLSID = IID('{92F68679-E702-4BF4-B969-546E11BECC63}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointParallel(DispatchBaseClass):
	'''The PARALLEL AXES elementary joint constrains the z-axis of the action marker to be parallel to the z-axis of the base marker. The resulting degrees of freedom are four.'''
	CLSID = IID('{54101676-0190-44F2-837F-2CFAFB8A11D2}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointPerpendicular(DispatchBaseClass):
	'''The PERPENDICULAR elementary joint constrains the z-axis of the action marker to be perpendicular to the z-axis of the base marker. The resulting degrees of freedom are five.'''
	CLSID = IID('{40F4819B-5A72-4CFE-9F7E-1695A1B677C7}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointPlanar(DispatchBaseClass):
	'''The planar joint allows one rotational and two translational degrees of freedom.'''
	CLSID = IID('{773D31B3-5540-4497-BDCA-D37CCC40E156}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_Friction(self):
		return self._ApplyTypes_(*(302, 2, (9, 0), (), "Friction", '{95F6FC38-9D37-4059-8037-EFF038F04EA5}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseFriction(self):
		return self._ApplyTypes_(*(301, 2, (11, 0), (), "UseFriction", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseFriction(self, value):
		if "UseFriction" in self.__dict__: self.__dict__["UseFriction"] = value; return
		self._oleobj_.Invoke(*((301, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	Friction = property(_get_Friction, None)
	'''
	Planar joint friction

	:type: recurdyn.ProcessNet.IJointPlanarFriction
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseFriction = property(_get_UseFriction, _set_UseFriction)
	'''
	Use friction

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseFriction": _set_UseFriction,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"Friction": (302, 2, (9, 0), (), "Friction", '{95F6FC38-9D37-4059-8037-EFF038F04EA5}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseFriction": (301, 2, (11, 0), (), "UseFriction", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseFriction": ((301, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointPlanarFriction(DispatchBaseClass):
	'''Planar joint friction. The Planar joint friction force which contains stiction algorithm.'''
	CLSID = IID('{95F6FC38-9D37-4059-8037-EFF038F04EA5}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AbsoluteVelocityThreshold(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_DynamicFrictionCoefficient(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FrictionArm(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "FrictionArm", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFrictionForce(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFrictionTorque(self):
		return self._ApplyTypes_(*(107, 2, (9, 0), (), "MaxFrictionTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxStictionDeformation(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PreForce(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "PreForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PreTorque(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "PreTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StaticFrictionCoefficient(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseMaxFrictionForce(self):
		return self._ApplyTypes_(*(104, 2, (11, 0), (), "UseMaxFrictionForce", None))
	def _get_UseMaxFrictionTorque(self):
		return self._ApplyTypes_(*(106, 2, (11, 0), (), "UseMaxFrictionTorque", None))
	def _get_UseReactionForce(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseReactionForce", None))
	def _get_UseSliding(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseSliding", None))
	def _get_UseStiction(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseStiction", None))

	def _set_UseMaxFrictionForce(self, value):
		if "UseMaxFrictionForce" in self.__dict__: self.__dict__["UseMaxFrictionForce"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_UseMaxFrictionTorque(self, value):
		if "UseMaxFrictionTorque" in self.__dict__: self.__dict__["UseMaxFrictionTorque"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))
	def _set_UseReactionForce(self, value):
		if "UseReactionForce" in self.__dict__: self.__dict__["UseReactionForce"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseSliding(self, value):
		if "UseSliding" in self.__dict__: self.__dict__["UseSliding"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_UseStiction(self, value):
		if "UseStiction" in self.__dict__: self.__dict__["UseStiction"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))

	AbsoluteVelocityThreshold = property(_get_AbsoluteVelocityThreshold, None)
	'''
	Absolute threshold velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	DynamicFrictionCoefficient = property(_get_DynamicFrictionCoefficient, None)
	'''
	Dynamic friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	FrictionArm = property(_get_FrictionArm, None)
	'''
	Friction Arm

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFrictionForce = property(_get_MaxFrictionForce, None)
	'''
	Maximum friction force

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFrictionTorque = property(_get_MaxFrictionTorque, None)
	'''
	Maximum friction torque

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxStictionDeformation = property(_get_MaxStictionDeformation, None)
	'''
	Maximum stiction deformation

	:type: recurdyn.ProcessNet.IDouble
	'''
	PreForce = property(_get_PreForce, None)
	'''
	Pre-force

	:type: recurdyn.ProcessNet.IDouble
	'''
	PreTorque = property(_get_PreTorque, None)
	'''
	Pre-torque

	:type: recurdyn.ProcessNet.IDouble
	'''
	StaticFrictionCoefficient = property(_get_StaticFrictionCoefficient, None)
	'''
	Static friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseMaxFrictionForce = property(_get_UseMaxFrictionForce, _set_UseMaxFrictionForce)
	'''
	Use maximum friction force

	:type: bool
	'''
	UseMaxFrictionTorque = property(_get_UseMaxFrictionTorque, _set_UseMaxFrictionTorque)
	'''
	Use maximum friction torque

	:type: bool
	'''
	UseReactionForce = property(_get_UseReactionForce, _set_UseReactionForce)
	'''
	Use reaction force

	:type: bool
	'''
	UseSliding = property(_get_UseSliding, _set_UseSliding)
	'''
	Use sliding

	:type: bool
	'''
	UseStiction = property(_get_UseStiction, _set_UseStiction)
	'''
	Use stiction

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UseMaxFrictionForce": _set_UseMaxFrictionForce,
		"_set_UseMaxFrictionTorque": _set_UseMaxFrictionTorque,
		"_set_UseReactionForce": _set_UseReactionForce,
		"_set_UseSliding": _set_UseSliding,
		"_set_UseStiction": _set_UseStiction,
	}
	_prop_map_get_ = {
		"AbsoluteVelocityThreshold": (51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"DynamicFrictionCoefficient": (52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FrictionArm": (103, 2, (9, 0), (), "FrictionArm", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFrictionForce": (105, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFrictionTorque": (107, 2, (9, 0), (), "MaxFrictionTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxStictionDeformation": (53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PreForce": (101, 2, (9, 0), (), "PreForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PreTorque": (102, 2, (9, 0), (), "PreTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StaticFrictionCoefficient": (54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseMaxFrictionForce": (104, 2, (11, 0), (), "UseMaxFrictionForce", None),
		"UseMaxFrictionTorque": (106, 2, (11, 0), (), "UseMaxFrictionTorque", None),
		"UseReactionForce": (55, 2, (11, 0), (), "UseReactionForce", None),
		"UseSliding": (56, 2, (11, 0), (), "UseSliding", None),
		"UseStiction": (57, 2, (11, 0), (), "UseStiction", None),
	}
	_prop_map_put_ = {
		"UseMaxFrictionForce": ((104, LCID, 4, 0),()),
		"UseMaxFrictionTorque": ((106, LCID, 4, 0),()),
		"UseReactionForce": ((55, LCID, 4, 0),()),
		"UseSliding": ((56, LCID, 4, 0),()),
		"UseStiction": ((57, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointPointOnCurve(DispatchBaseClass):
	'''The PTCV(Point on curve) constraint constrains one point of a body to lie on a spline curve defined on the other body. The spline curve must have been defined prior to creating the PTCV. This joint has five degrees of freedom.'''
	CLSID = IID('{0D91A8ED-1B56-40C7-8FFB-26542A0F4269}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Curve(self):
		return self._ApplyTypes_(*(301, 2, (9, 0), (), "Curve", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_CurveSegmentOption(self):
		return self._ApplyTypes_(*(309, 2, (9, 0), (), "CurveSegmentOption", '{C86088A5-C799-4E35-B0F6-78D60243C544}'))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_Friction(self):
		return self._ApplyTypes_(*(308, 2, (9, 0), (), "Friction", '{8EFA806E-0CE1-406E-B3FA-E2CAFB1D3308}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_InitialPosition(self):
		return self._ApplyTypes_(*(303, 2, (9, 0), (), "InitialPosition", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_InitialVelocity(self):
		return self._ApplyTypes_(*(304, 2, (9, 0), (), "InitialVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Motion(self):
		return self._ApplyTypes_(*(306, 2, (9, 0), (), "Motion", '{7568D19B-7019-4ABF-A18C-D41C8C39E7CE}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseFriction(self):
		return self._ApplyTypes_(*(307, 2, (11, 0), (), "UseFriction", None))
	def _get_UseInitialCondition(self):
		return self._ApplyTypes_(*(302, 2, (11, 0), (), "UseInitialCondition", None))
	def _get_UseMotion(self):
		return self._ApplyTypes_(*(305, 2, (11, 0), (), "UseMotion", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Curve(self, value):
		if "Curve" in self.__dict__: self.__dict__["Curve"] = value; return
		self._oleobj_.Invoke(*((301, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseFriction(self, value):
		if "UseFriction" in self.__dict__: self.__dict__["UseFriction"] = value; return
		self._oleobj_.Invoke(*((307, LCID, 4, 0) + (value,) + ()))
	def _set_UseInitialCondition(self, value):
		if "UseInitialCondition" in self.__dict__: self.__dict__["UseInitialCondition"] = value; return
		self._oleobj_.Invoke(*((302, LCID, 4, 0) + (value,) + ()))
	def _set_UseMotion(self, value):
		if "UseMotion" in self.__dict__: self.__dict__["UseMotion"] = value; return
		self._oleobj_.Invoke(*((305, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Curve = property(_get_Curve, _set_Curve)
	'''
	Curve

	:type: recurdyn.ProcessNet.IGeometry
	'''
	CurveSegmentOption = property(_get_CurveSegmentOption, None)
	'''
	Curve segment option

	:type: recurdyn.ProcessNet.IConstraintCurveSegmentOption
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	Friction = property(_get_Friction, None)
	'''
	PTCV(point on curve) constraint friction

	:type: recurdyn.ProcessNet.IJointPointOnCurveFriction
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	InitialPosition = property(_get_InitialPosition, None)
	'''
	Initial position

	:type: recurdyn.ProcessNet.IVector
	'''
	InitialVelocity = property(_get_InitialVelocity, None)
	'''
	Initial velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Motion = property(_get_Motion, None)
	'''
	Motion

	:type: recurdyn.ProcessNet.IMotionPointOnCurve
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseFriction = property(_get_UseFriction, _set_UseFriction)
	'''
	Use friction

	:type: bool
	'''
	UseInitialCondition = property(_get_UseInitialCondition, _set_UseInitialCondition)
	'''
	Use initial condition

	:type: bool
	'''
	UseMotion = property(_get_UseMotion, _set_UseMotion)
	'''
	Use motion

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_Curve": _set_Curve,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseFriction": _set_UseFriction,
		"_set_UseInitialCondition": _set_UseInitialCondition,
		"_set_UseMotion": _set_UseMotion,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Curve": (301, 2, (9, 0), (), "Curve", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"CurveSegmentOption": (309, 2, (9, 0), (), "CurveSegmentOption", '{C86088A5-C799-4E35-B0F6-78D60243C544}'),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"Friction": (308, 2, (9, 0), (), "Friction", '{8EFA806E-0CE1-406E-B3FA-E2CAFB1D3308}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"InitialPosition": (303, 2, (9, 0), (), "InitialPosition", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"InitialVelocity": (304, 2, (9, 0), (), "InitialVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Motion": (306, 2, (9, 0), (), "Motion", '{7568D19B-7019-4ABF-A18C-D41C8C39E7CE}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseFriction": (307, 2, (11, 0), (), "UseFriction", None),
		"UseInitialCondition": (302, 2, (11, 0), (), "UseInitialCondition", None),
		"UseMotion": (305, 2, (11, 0), (), "UseMotion", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Curve": ((301, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseFriction": ((307, LCID, 4, 0),()),
		"UseInitialCondition": ((302, LCID, 4, 0),()),
		"UseMotion": ((305, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointPointOnCurveFriction(DispatchBaseClass):
	'''PTCV(Point on curve) constraint friction'''
	CLSID = IID('{8EFA806E-0CE1-406E-B3FA-E2CAFB1D3308}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_DynamicFrictionCoefficient(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_DynamicThresholdVelocity(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "DynamicThresholdVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFrictionForce(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StaticFrictionCoefficient(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StaticThresholdVelocity(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "StaticThresholdVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseMaxFrictionForce(self):
		return self._ApplyTypes_(*(106, 2, (11, 0), (), "UseMaxFrictionForce", None))

	def _set_UseMaxFrictionForce(self, value):
		if "UseMaxFrictionForce" in self.__dict__: self.__dict__["UseMaxFrictionForce"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))

	DynamicFrictionCoefficient = property(_get_DynamicFrictionCoefficient, None)
	'''
	Dynamic friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	DynamicThresholdVelocity = property(_get_DynamicThresholdVelocity, None)
	'''
	Dynamic threshold velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFrictionForce = property(_get_MaxFrictionForce, None)
	'''
	Maximum friction force

	:type: recurdyn.ProcessNet.IDouble
	'''
	StaticFrictionCoefficient = property(_get_StaticFrictionCoefficient, None)
	'''
	Static friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	StaticThresholdVelocity = property(_get_StaticThresholdVelocity, None)
	'''
	Static threshold velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseMaxFrictionForce = property(_get_UseMaxFrictionForce, _set_UseMaxFrictionForce)
	'''
	Use maximum friction force

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UseMaxFrictionForce": _set_UseMaxFrictionForce,
	}
	_prop_map_get_ = {
		"DynamicFrictionCoefficient": (101, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"DynamicThresholdVelocity": (102, 2, (9, 0), (), "DynamicThresholdVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFrictionForce": (105, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StaticFrictionCoefficient": (103, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StaticThresholdVelocity": (104, 2, (9, 0), (), "StaticThresholdVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseMaxFrictionForce": (106, 2, (11, 0), (), "UseMaxFrictionForce", None),
	}
	_prop_map_put_ = {
		"UseMaxFrictionForce": ((106, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointPointOnSurface(DispatchBaseClass):
	'''PTSF Joint'''
	CLSID = IID('{C50A037D-F57E-4236-9597-ED57084B0581}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Surface(self):
		return self._ApplyTypes_(*(301, 2, (9, 0), (), "Surface", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UVSurfaceOption(self):
		return self._ApplyTypes_(*(303, 2, (9, 0), (), "UVSurfaceOption", '{6822B8AE-A40F-474E-A2FA-39B3BBCBD54C}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_Surface(self, value):
		if "Surface" in self.__dict__: self.__dict__["Surface"] = value; return
		self._oleobj_.Invoke(*((301, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Surface = property(_get_Surface, _set_Surface)
	'''
	Surface

	:type: recurdyn.ProcessNet.IGeometry
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UVSurfaceOption = property(_get_UVSurfaceOption, None)
	'''
	UV Surface option

	:type: recurdyn.ProcessNet.IConstraintUVPatchOption
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_Surface": _set_Surface,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Surface": (301, 2, (9, 0), (), "Surface", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UVSurfaceOption": (303, 2, (9, 0), (), "UVSurfaceOption", '{6822B8AE-A40F-474E-A2FA-39B3BBCBD54C}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"Surface": ((301, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointRevolute(DispatchBaseClass):
	'''The revolute joint allows one rotational degree of freedom.'''
	CLSID = IID('{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_Friction(self):
		return self._ApplyTypes_(*(310, 2, (9, 0), (), "Friction", '{CDA07E89-2140-42DA-A007-75583AA575E5}'))
	def _get_FrictionType(self):
		return self._ApplyTypes_(*(306, 2, (3, 0), (), "FrictionType", '{D341C102-3CD4-45ED-8686-165AEB3E3A30}'))
	def _get_FrictionWithoutStiction(self):
		return self._ApplyTypes_(*(308, 2, (9, 0), (), "FrictionWithoutStiction", '{C654350F-C53C-474B-84B2-BC299BEA04F2}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_InitialPosition(self):
		return self._ApplyTypes_(*(302, 2, (9, 0), (), "InitialPosition", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_InitialVelocity(self):
		return self._ApplyTypes_(*(303, 2, (9, 0), (), "InitialVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Motion(self):
		return self._ApplyTypes_(*(305, 2, (9, 0), (), "Motion", '{47F4E55C-4291-4251-866A-98A74112D266}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseInitialCondition(self):
		return self._ApplyTypes_(*(301, 2, (11, 0), (), "UseInitialCondition", None))
	def _get_UseMotion(self):
		return self._ApplyTypes_(*(304, 2, (11, 0), (), "UseMotion", None))
	def _get_UseStrictlyEnforceInitialConditions(self):
		return self._ApplyTypes_(*(311, 2, (11, 0), (), "UseStrictlyEnforceInitialConditions", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_FrictionType(self, value):
		if "FrictionType" in self.__dict__: self.__dict__["FrictionType"] = value; return
		self._oleobj_.Invoke(*((306, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseInitialCondition(self, value):
		if "UseInitialCondition" in self.__dict__: self.__dict__["UseInitialCondition"] = value; return
		self._oleobj_.Invoke(*((301, LCID, 4, 0) + (value,) + ()))
	def _set_UseMotion(self, value):
		if "UseMotion" in self.__dict__: self.__dict__["UseMotion"] = value; return
		self._oleobj_.Invoke(*((304, LCID, 4, 0) + (value,) + ()))
	def _set_UseStrictlyEnforceInitialConditions(self, value):
		if "UseStrictlyEnforceInitialConditions" in self.__dict__: self.__dict__["UseStrictlyEnforceInitialConditions"] = value; return
		self._oleobj_.Invoke(*((311, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	Friction = property(_get_Friction, None)
	'''
	Revolute joint friction

	:type: recurdyn.ProcessNet.IJointRevoluteFriction
	'''
	FrictionType = property(_get_FrictionType, _set_FrictionType)
	'''
	Friction type

	:type: recurdyn.ProcessNet.FrictionType
	'''
	FrictionWithoutStiction = property(_get_FrictionWithoutStiction, None)
	'''
	Revolute joint friction without stiction

	:type: recurdyn.ProcessNet.IJointRevoluteFrictionWithoutStiction
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	InitialPosition = property(_get_InitialPosition, None)
	'''
	Initial position

	:type: recurdyn.ProcessNet.IDouble
	'''
	InitialVelocity = property(_get_InitialVelocity, None)
	'''
	Initial velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Motion = property(_get_Motion, None)
	'''
	Motion

	:type: recurdyn.ProcessNet.IMotion
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseInitialCondition = property(_get_UseInitialCondition, _set_UseInitialCondition)
	'''
	Use initial condition

	:type: bool
	'''
	UseMotion = property(_get_UseMotion, _set_UseMotion)
	'''
	Use motion

	:type: bool
	'''
	UseStrictlyEnforceInitialConditions = property(_get_UseStrictlyEnforceInitialConditions, _set_UseStrictlyEnforceInitialConditions)
	'''
	Strictly Enforce Initial Conditions

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_FrictionType": _set_FrictionType,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseInitialCondition": _set_UseInitialCondition,
		"_set_UseMotion": _set_UseMotion,
		"_set_UseStrictlyEnforceInitialConditions": _set_UseStrictlyEnforceInitialConditions,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"Friction": (310, 2, (9, 0), (), "Friction", '{CDA07E89-2140-42DA-A007-75583AA575E5}'),
		"FrictionType": (306, 2, (3, 0), (), "FrictionType", '{D341C102-3CD4-45ED-8686-165AEB3E3A30}'),
		"FrictionWithoutStiction": (308, 2, (9, 0), (), "FrictionWithoutStiction", '{C654350F-C53C-474B-84B2-BC299BEA04F2}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"InitialPosition": (302, 2, (9, 0), (), "InitialPosition", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"InitialVelocity": (303, 2, (9, 0), (), "InitialVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Motion": (305, 2, (9, 0), (), "Motion", '{47F4E55C-4291-4251-866A-98A74112D266}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseInitialCondition": (301, 2, (11, 0), (), "UseInitialCondition", None),
		"UseMotion": (304, 2, (11, 0), (), "UseMotion", None),
		"UseStrictlyEnforceInitialConditions": (311, 2, (11, 0), (), "UseStrictlyEnforceInitialConditions", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"FrictionType": ((306, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseInitialCondition": ((301, LCID, 4, 0),()),
		"UseMotion": ((304, LCID, 4, 0),()),
		"UseStrictlyEnforceInitialConditions": ((311, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointRevoluteFriction(DispatchBaseClass):
	'''Revolute joint friction. The revolute joint friction force which contains stiction algorithm.'''
	CLSID = IID('{CDA07E89-2140-42DA-A007-75583AA575E5}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AbsoluteVelocityThreshold(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BendingReactionArm(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "BendingReactionArm", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_DynamicFrictionCoefficient(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FrictionArm(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "FrictionArm", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFrictionTorque(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "MaxFrictionTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxStictionDeformation(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PinRadius(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "PinRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PreTorque(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "PreTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StaticFrictionCoefficient(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseBendingMoment(self):
		return self._ApplyTypes_(*(106, 2, (11, 0), (), "UseBendingMoment", None))
	def _get_UseMaxFrictionTorque(self):
		return self._ApplyTypes_(*(107, 2, (11, 0), (), "UseMaxFrictionTorque", None))
	def _get_UseReactionForce(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseReactionForce", None))
	def _get_UseSliding(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseSliding", None))
	def _get_UseStiction(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseStiction", None))

	def _set_UseBendingMoment(self, value):
		if "UseBendingMoment" in self.__dict__: self.__dict__["UseBendingMoment"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))
	def _set_UseMaxFrictionTorque(self, value):
		if "UseMaxFrictionTorque" in self.__dict__: self.__dict__["UseMaxFrictionTorque"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UseReactionForce(self, value):
		if "UseReactionForce" in self.__dict__: self.__dict__["UseReactionForce"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseSliding(self, value):
		if "UseSliding" in self.__dict__: self.__dict__["UseSliding"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_UseStiction(self, value):
		if "UseStiction" in self.__dict__: self.__dict__["UseStiction"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))

	AbsoluteVelocityThreshold = property(_get_AbsoluteVelocityThreshold, None)
	'''
	Absolute threshold velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	BendingReactionArm = property(_get_BendingReactionArm, None)
	'''
	Bending reaction arm

	:type: recurdyn.ProcessNet.IDouble
	'''
	DynamicFrictionCoefficient = property(_get_DynamicFrictionCoefficient, None)
	'''
	Dynamic friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	FrictionArm = property(_get_FrictionArm, None)
	'''
	Friction arm

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFrictionTorque = property(_get_MaxFrictionTorque, None)
	'''
	Maximum friction torque

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxStictionDeformation = property(_get_MaxStictionDeformation, None)
	'''
	Maximum stiction deformation

	:type: recurdyn.ProcessNet.IDouble
	'''
	PinRadius = property(_get_PinRadius, None)
	'''
	Pin radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	PreTorque = property(_get_PreTorque, None)
	'''
	Pre-torque

	:type: recurdyn.ProcessNet.IDouble
	'''
	StaticFrictionCoefficient = property(_get_StaticFrictionCoefficient, None)
	'''
	Static friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseBendingMoment = property(_get_UseBendingMoment, _set_UseBendingMoment)
	'''
	Use bending moment

	:type: bool
	'''
	UseMaxFrictionTorque = property(_get_UseMaxFrictionTorque, _set_UseMaxFrictionTorque)
	'''
	Use maximum friction torque

	:type: bool
	'''
	UseReactionForce = property(_get_UseReactionForce, _set_UseReactionForce)
	'''
	Use reaction force

	:type: bool
	'''
	UseSliding = property(_get_UseSliding, _set_UseSliding)
	'''
	Use sliding

	:type: bool
	'''
	UseStiction = property(_get_UseStiction, _set_UseStiction)
	'''
	Use stiction

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UseBendingMoment": _set_UseBendingMoment,
		"_set_UseMaxFrictionTorque": _set_UseMaxFrictionTorque,
		"_set_UseReactionForce": _set_UseReactionForce,
		"_set_UseSliding": _set_UseSliding,
		"_set_UseStiction": _set_UseStiction,
	}
	_prop_map_get_ = {
		"AbsoluteVelocityThreshold": (51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BendingReactionArm": (101, 2, (9, 0), (), "BendingReactionArm", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"DynamicFrictionCoefficient": (52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FrictionArm": (102, 2, (9, 0), (), "FrictionArm", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFrictionTorque": (103, 2, (9, 0), (), "MaxFrictionTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxStictionDeformation": (53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PinRadius": (104, 2, (9, 0), (), "PinRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PreTorque": (105, 2, (9, 0), (), "PreTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StaticFrictionCoefficient": (54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseBendingMoment": (106, 2, (11, 0), (), "UseBendingMoment", None),
		"UseMaxFrictionTorque": (107, 2, (11, 0), (), "UseMaxFrictionTorque", None),
		"UseReactionForce": (55, 2, (11, 0), (), "UseReactionForce", None),
		"UseSliding": (56, 2, (11, 0), (), "UseSliding", None),
		"UseStiction": (57, 2, (11, 0), (), "UseStiction", None),
	}
	_prop_map_put_ = {
		"UseBendingMoment": ((106, LCID, 4, 0),()),
		"UseMaxFrictionTorque": ((107, LCID, 4, 0),()),
		"UseReactionForce": ((55, LCID, 4, 0),()),
		"UseSliding": ((56, LCID, 4, 0),()),
		"UseStiction": ((57, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointRevoluteFrictionWithoutStiction(DispatchBaseClass):
	'''Revolute joint friction without stiction'''
	CLSID = IID('{C654350F-C53C-474B-84B2-BC299BEA04F2}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AbsoluteVelocityThreshold(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_AxialPreloadForce(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "AxialPreloadForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_DynamicFrictionCoefficient(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_InnerRadiusFactor(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "InnerRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFrictionForce(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_OuterRadiusFactor(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "OuterRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RadialPreloadForce(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "RadialPreloadForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StaticFrictionCoefficient(self):
		return self._ApplyTypes_(*(56, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseMaxFrictionForce(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseMaxFrictionForce", None))

	def _set_UseMaxFrictionForce(self, value):
		if "UseMaxFrictionForce" in self.__dict__: self.__dict__["UseMaxFrictionForce"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))

	AbsoluteVelocityThreshold = property(_get_AbsoluteVelocityThreshold, None)
	'''
	Absolute threshold velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	AxialPreloadForce = property(_get_AxialPreloadForce, None)
	'''
	Axial preload force

	:type: recurdyn.ProcessNet.IDouble
	'''
	DynamicFrictionCoefficient = property(_get_DynamicFrictionCoefficient, None)
	'''
	Dynamic friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	InnerRadiusFactor = property(_get_InnerRadiusFactor, None)
	'''
	Inner radius factor

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFrictionForce = property(_get_MaxFrictionForce, None)
	'''
	Maximum friction force

	:type: recurdyn.ProcessNet.IDouble
	'''
	OuterRadiusFactor = property(_get_OuterRadiusFactor, None)
	'''
	Outer radius factor

	:type: recurdyn.ProcessNet.IDouble
	'''
	RadialPreloadForce = property(_get_RadialPreloadForce, None)
	'''
	Radial preload force

	:type: recurdyn.ProcessNet.IDouble
	'''
	StaticFrictionCoefficient = property(_get_StaticFrictionCoefficient, None)
	'''
	Static friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseMaxFrictionForce = property(_get_UseMaxFrictionForce, _set_UseMaxFrictionForce)
	'''
	Use maximum friction force

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UseMaxFrictionForce": _set_UseMaxFrictionForce,
	}
	_prop_map_get_ = {
		"AbsoluteVelocityThreshold": (51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"AxialPreloadForce": (103, 2, (9, 0), (), "AxialPreloadForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"DynamicFrictionCoefficient": (52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"InnerRadiusFactor": (101, 2, (9, 0), (), "InnerRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFrictionForce": (53, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"OuterRadiusFactor": (102, 2, (9, 0), (), "OuterRadiusFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RadialPreloadForce": (104, 2, (9, 0), (), "RadialPreloadForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StaticFrictionCoefficient": (56, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseMaxFrictionForce": (57, 2, (11, 0), (), "UseMaxFrictionForce", None),
	}
	_prop_map_put_ = {
		"UseMaxFrictionForce": ((57, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointScrew(DispatchBaseClass):
	'''The screw joint has one degree of freedom. The translation of Z-axis gets constraint by a pitch about rotational degree of freedom.'''
	CLSID = IID('{B6C04DD4-89BA-4A08-9071-9AACD3E4C0F9}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_Friction(self):
		return self._ApplyTypes_(*(303, 2, (9, 0), (), "Friction", '{990B9133-FDB7-45DB-8398-8297BC724D91}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Pitch(self):
		return self._ApplyTypes_(*(301, 2, (9, 0), (), "Pitch", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseFriction(self):
		return self._ApplyTypes_(*(302, 2, (11, 0), (), "UseFriction", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseFriction(self, value):
		if "UseFriction" in self.__dict__: self.__dict__["UseFriction"] = value; return
		self._oleobj_.Invoke(*((302, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	Friction = property(_get_Friction, None)
	'''
	Screw joint friction

	:type: recurdyn.ProcessNet.IJointScrewFriction
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Pitch = property(_get_Pitch, None)
	'''
	Pitch. Moving distance per one revolution along z-axis.

	:type: recurdyn.ProcessNet.IDouble
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseFriction = property(_get_UseFriction, _set_UseFriction)
	'''
	Use friction

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseFriction": _set_UseFriction,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"Friction": (303, 2, (9, 0), (), "Friction", '{990B9133-FDB7-45DB-8398-8297BC724D91}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Pitch": (301, 2, (9, 0), (), "Pitch", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseFriction": (302, 2, (11, 0), (), "UseFriction", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseFriction": ((302, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointScrewFriction(DispatchBaseClass):
	'''Screw joint friction. The Screw joint friction force which contains stiction algorithm.'''
	CLSID = IID('{990B9133-FDB7-45DB-8398-8297BC724D91}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AbsoluteVelocityThreshold(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_DynamicFrictionCoefficient(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFrictionForce(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFrictionTorque(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "MaxFrictionTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxStictionDeformation(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PinRadius(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "PinRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PreForce(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "PreForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PreTorque(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "PreTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StaticFrictionCoefficient(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseMaxFrictionForce(self):
		return self._ApplyTypes_(*(105, 2, (11, 0), (), "UseMaxFrictionForce", None))
	def _get_UseMaxFrictionTorque(self):
		return self._ApplyTypes_(*(107, 2, (11, 0), (), "UseMaxFrictionTorque", None))
	def _get_UseReactionForce(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseReactionForce", None))
	def _get_UseSliding(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseSliding", None))
	def _get_UseStiction(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseStiction", None))

	def _set_UseMaxFrictionForce(self, value):
		if "UseMaxFrictionForce" in self.__dict__: self.__dict__["UseMaxFrictionForce"] = value; return
		self._oleobj_.Invoke(*((105, LCID, 4, 0) + (value,) + ()))
	def _set_UseMaxFrictionTorque(self, value):
		if "UseMaxFrictionTorque" in self.__dict__: self.__dict__["UseMaxFrictionTorque"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UseReactionForce(self, value):
		if "UseReactionForce" in self.__dict__: self.__dict__["UseReactionForce"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseSliding(self, value):
		if "UseSliding" in self.__dict__: self.__dict__["UseSliding"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_UseStiction(self, value):
		if "UseStiction" in self.__dict__: self.__dict__["UseStiction"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))

	AbsoluteVelocityThreshold = property(_get_AbsoluteVelocityThreshold, None)
	'''
	Absolute threshold velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	DynamicFrictionCoefficient = property(_get_DynamicFrictionCoefficient, None)
	'''
	Dynamic friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFrictionForce = property(_get_MaxFrictionForce, None)
	'''
	Maximum friction force

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFrictionTorque = property(_get_MaxFrictionTorque, None)
	'''
	Maximum friction torque

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxStictionDeformation = property(_get_MaxStictionDeformation, None)
	'''
	Maximum stiction deformation

	:type: recurdyn.ProcessNet.IDouble
	'''
	PinRadius = property(_get_PinRadius, None)
	'''
	Pin radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	PreForce = property(_get_PreForce, None)
	'''
	Pre-force

	:type: recurdyn.ProcessNet.IDouble
	'''
	PreTorque = property(_get_PreTorque, None)
	'''
	Pre-torque

	:type: recurdyn.ProcessNet.IDouble
	'''
	StaticFrictionCoefficient = property(_get_StaticFrictionCoefficient, None)
	'''
	Static friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseMaxFrictionForce = property(_get_UseMaxFrictionForce, _set_UseMaxFrictionForce)
	'''
	Use maximum friction force

	:type: bool
	'''
	UseMaxFrictionTorque = property(_get_UseMaxFrictionTorque, _set_UseMaxFrictionTorque)
	'''
	Use maximum friction torque

	:type: bool
	'''
	UseReactionForce = property(_get_UseReactionForce, _set_UseReactionForce)
	'''
	Use reaction force

	:type: bool
	'''
	UseSliding = property(_get_UseSliding, _set_UseSliding)
	'''
	Use sliding

	:type: bool
	'''
	UseStiction = property(_get_UseStiction, _set_UseStiction)
	'''
	Use stiction

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UseMaxFrictionForce": _set_UseMaxFrictionForce,
		"_set_UseMaxFrictionTorque": _set_UseMaxFrictionTorque,
		"_set_UseReactionForce": _set_UseReactionForce,
		"_set_UseSliding": _set_UseSliding,
		"_set_UseStiction": _set_UseStiction,
	}
	_prop_map_get_ = {
		"AbsoluteVelocityThreshold": (51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"DynamicFrictionCoefficient": (52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFrictionForce": (104, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFrictionTorque": (106, 2, (9, 0), (), "MaxFrictionTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxStictionDeformation": (53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PinRadius": (103, 2, (9, 0), (), "PinRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PreForce": (101, 2, (9, 0), (), "PreForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PreTorque": (102, 2, (9, 0), (), "PreTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StaticFrictionCoefficient": (54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseMaxFrictionForce": (105, 2, (11, 0), (), "UseMaxFrictionForce", None),
		"UseMaxFrictionTorque": (107, 2, (11, 0), (), "UseMaxFrictionTorque", None),
		"UseReactionForce": (55, 2, (11, 0), (), "UseReactionForce", None),
		"UseSliding": (56, 2, (11, 0), (), "UseSliding", None),
		"UseStiction": (57, 2, (11, 0), (), "UseStiction", None),
	}
	_prop_map_put_ = {
		"UseMaxFrictionForce": ((105, LCID, 4, 0),()),
		"UseMaxFrictionTorque": ((107, LCID, 4, 0),()),
		"UseReactionForce": ((55, LCID, 4, 0),()),
		"UseSliding": ((56, LCID, 4, 0),()),
		"UseStiction": ((57, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointSpherical(DispatchBaseClass):
	'''The spherical joint allows three rotational degrees of freedom.'''
	CLSID = IID('{206C4CC5-E70A-4F3C-A4FD-2D6B2EEE1F5C}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_Friction(self):
		return self._ApplyTypes_(*(303, 2, (9, 0), (), "Friction", '{199E4653-210A-455C-96DA-27DF86C5DA3E}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseFriction(self):
		return self._ApplyTypes_(*(301, 2, (11, 0), (), "UseFriction", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseFriction(self, value):
		if "UseFriction" in self.__dict__: self.__dict__["UseFriction"] = value; return
		self._oleobj_.Invoke(*((301, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	Friction = property(_get_Friction, None)
	'''
	Spherical joint friction

	:type: recurdyn.ProcessNet.IJointSphericalFriction
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseFriction = property(_get_UseFriction, _set_UseFriction)
	'''
	Use friction

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseFriction": _set_UseFriction,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"Friction": (303, 2, (9, 0), (), "Friction", '{199E4653-210A-455C-96DA-27DF86C5DA3E}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseFriction": (301, 2, (11, 0), (), "UseFriction", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseFriction": ((301, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointSphericalFriction(DispatchBaseClass):
	'''Spherical joint friction. The spherical joint friction force which contains stiction algorithm.'''
	CLSID = IID('{199E4653-210A-455C-96DA-27DF86C5DA3E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AbsoluteVelocityThreshold(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BallRadius(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "BallRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_DynamicFrictionCoefficient(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFrictionTorque(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "MaxFrictionTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxStictionDeformation(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PreTorque(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "PreTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StaticFrictionCoefficient(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseMaxFrictionTorque(self):
		return self._ApplyTypes_(*(104, 2, (11, 0), (), "UseMaxFrictionTorque", None))
	def _get_UseReactionForce(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseReactionForce", None))
	def _get_UseSliding(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseSliding", None))
	def _get_UseStiction(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseStiction", None))

	def _set_UseMaxFrictionTorque(self, value):
		if "UseMaxFrictionTorque" in self.__dict__: self.__dict__["UseMaxFrictionTorque"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_UseReactionForce(self, value):
		if "UseReactionForce" in self.__dict__: self.__dict__["UseReactionForce"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseSliding(self, value):
		if "UseSliding" in self.__dict__: self.__dict__["UseSliding"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_UseStiction(self, value):
		if "UseStiction" in self.__dict__: self.__dict__["UseStiction"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))

	AbsoluteVelocityThreshold = property(_get_AbsoluteVelocityThreshold, None)
	'''
	Absolute threshold velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	BallRadius = property(_get_BallRadius, None)
	'''
	Ball radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	DynamicFrictionCoefficient = property(_get_DynamicFrictionCoefficient, None)
	'''
	Dynamic friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFrictionTorque = property(_get_MaxFrictionTorque, None)
	'''
	Maximum friction torque

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxStictionDeformation = property(_get_MaxStictionDeformation, None)
	'''
	Maximum stiction deformation

	:type: recurdyn.ProcessNet.IDouble
	'''
	PreTorque = property(_get_PreTorque, None)
	'''
	Pre-torque

	:type: recurdyn.ProcessNet.IDouble
	'''
	StaticFrictionCoefficient = property(_get_StaticFrictionCoefficient, None)
	'''
	Static friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseMaxFrictionTorque = property(_get_UseMaxFrictionTorque, _set_UseMaxFrictionTorque)
	'''
	Use maximum friction torque

	:type: bool
	'''
	UseReactionForce = property(_get_UseReactionForce, _set_UseReactionForce)
	'''
	Use reaction force

	:type: bool
	'''
	UseSliding = property(_get_UseSliding, _set_UseSliding)
	'''
	Use sliding

	:type: bool
	'''
	UseStiction = property(_get_UseStiction, _set_UseStiction)
	'''
	Use stiction

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UseMaxFrictionTorque": _set_UseMaxFrictionTorque,
		"_set_UseReactionForce": _set_UseReactionForce,
		"_set_UseSliding": _set_UseSliding,
		"_set_UseStiction": _set_UseStiction,
	}
	_prop_map_get_ = {
		"AbsoluteVelocityThreshold": (51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BallRadius": (102, 2, (9, 0), (), "BallRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"DynamicFrictionCoefficient": (52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFrictionTorque": (103, 2, (9, 0), (), "MaxFrictionTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxStictionDeformation": (53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PreTorque": (101, 2, (9, 0), (), "PreTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StaticFrictionCoefficient": (54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseMaxFrictionTorque": (104, 2, (11, 0), (), "UseMaxFrictionTorque", None),
		"UseReactionForce": (55, 2, (11, 0), (), "UseReactionForce", None),
		"UseSliding": (56, 2, (11, 0), (), "UseSliding", None),
		"UseStiction": (57, 2, (11, 0), (), "UseStiction", None),
	}
	_prop_map_put_ = {
		"UseMaxFrictionTorque": ((104, LCID, 4, 0),()),
		"UseReactionForce": ((55, LCID, 4, 0),()),
		"UseSliding": ((56, LCID, 4, 0),()),
		"UseStiction": ((57, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointTranslational(DispatchBaseClass):
	'''The translational joint allows one translational degree of freedom.'''
	CLSID = IID('{07101FE1-4B6A-41CA-9FC7-3C48C9E96785}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_Friction(self):
		return self._ApplyTypes_(*(310, 2, (9, 0), (), "Friction", '{731EF6BF-6DC5-4959-84E0-1EE7C685A1CE}'))
	def _get_FrictionType(self):
		return self._ApplyTypes_(*(306, 2, (3, 0), (), "FrictionType", '{D341C102-3CD4-45ED-8686-165AEB3E3A30}'))
	def _get_FrictionWithoutStiction(self):
		return self._ApplyTypes_(*(308, 2, (9, 0), (), "FrictionWithoutStiction", '{3292939F-35E3-469F-A8AE-7F9234326B1E}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_InitialPosition(self):
		return self._ApplyTypes_(*(302, 2, (9, 0), (), "InitialPosition", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_InitialVelocity(self):
		return self._ApplyTypes_(*(303, 2, (9, 0), (), "InitialVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Motion(self):
		return self._ApplyTypes_(*(305, 2, (9, 0), (), "Motion", '{47F4E55C-4291-4251-866A-98A74112D266}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseInitialCondition(self):
		return self._ApplyTypes_(*(301, 2, (11, 0), (), "UseInitialCondition", None))
	def _get_UseMotion(self):
		return self._ApplyTypes_(*(304, 2, (11, 0), (), "UseMotion", None))
	def _get_UseStrictlyEnforceInitialConditions(self):
		return self._ApplyTypes_(*(311, 2, (11, 0), (), "UseStrictlyEnforceInitialConditions", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_FrictionType(self, value):
		if "FrictionType" in self.__dict__: self.__dict__["FrictionType"] = value; return
		self._oleobj_.Invoke(*((306, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseInitialCondition(self, value):
		if "UseInitialCondition" in self.__dict__: self.__dict__["UseInitialCondition"] = value; return
		self._oleobj_.Invoke(*((301, LCID, 4, 0) + (value,) + ()))
	def _set_UseMotion(self, value):
		if "UseMotion" in self.__dict__: self.__dict__["UseMotion"] = value; return
		self._oleobj_.Invoke(*((304, LCID, 4, 0) + (value,) + ()))
	def _set_UseStrictlyEnforceInitialConditions(self, value):
		if "UseStrictlyEnforceInitialConditions" in self.__dict__: self.__dict__["UseStrictlyEnforceInitialConditions"] = value; return
		self._oleobj_.Invoke(*((311, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	Friction = property(_get_Friction, None)
	'''
	Translational joint friction

	:type: recurdyn.ProcessNet.IJointTranslationalFriction
	'''
	FrictionType = property(_get_FrictionType, _set_FrictionType)
	'''
	Friction type

	:type: recurdyn.ProcessNet.FrictionType
	'''
	FrictionWithoutStiction = property(_get_FrictionWithoutStiction, None)
	'''
	Translational joint friction without stiction

	:type: recurdyn.ProcessNet.IJointTranslationalFrictionWithoutStiction
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	InitialPosition = property(_get_InitialPosition, None)
	'''
	Initial position

	:type: recurdyn.ProcessNet.IDouble
	'''
	InitialVelocity = property(_get_InitialVelocity, None)
	'''
	Initial velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Motion = property(_get_Motion, None)
	'''
	Motion

	:type: recurdyn.ProcessNet.IMotion
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseInitialCondition = property(_get_UseInitialCondition, _set_UseInitialCondition)
	'''
	Use initial condition

	:type: bool
	'''
	UseMotion = property(_get_UseMotion, _set_UseMotion)
	'''
	Use motion

	:type: bool
	'''
	UseStrictlyEnforceInitialConditions = property(_get_UseStrictlyEnforceInitialConditions, _set_UseStrictlyEnforceInitialConditions)
	'''
	Strictly Enforce Initial Conditions

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_FrictionType": _set_FrictionType,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseInitialCondition": _set_UseInitialCondition,
		"_set_UseMotion": _set_UseMotion,
		"_set_UseStrictlyEnforceInitialConditions": _set_UseStrictlyEnforceInitialConditions,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"Friction": (310, 2, (9, 0), (), "Friction", '{731EF6BF-6DC5-4959-84E0-1EE7C685A1CE}'),
		"FrictionType": (306, 2, (3, 0), (), "FrictionType", '{D341C102-3CD4-45ED-8686-165AEB3E3A30}'),
		"FrictionWithoutStiction": (308, 2, (9, 0), (), "FrictionWithoutStiction", '{3292939F-35E3-469F-A8AE-7F9234326B1E}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"InitialPosition": (302, 2, (9, 0), (), "InitialPosition", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"InitialVelocity": (303, 2, (9, 0), (), "InitialVelocity", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Motion": (305, 2, (9, 0), (), "Motion", '{47F4E55C-4291-4251-866A-98A74112D266}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseInitialCondition": (301, 2, (11, 0), (), "UseInitialCondition", None),
		"UseMotion": (304, 2, (11, 0), (), "UseMotion", None),
		"UseStrictlyEnforceInitialConditions": (311, 2, (11, 0), (), "UseStrictlyEnforceInitialConditions", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"FrictionType": ((306, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseInitialCondition": ((301, LCID, 4, 0),()),
		"UseMotion": ((304, LCID, 4, 0),()),
		"UseStrictlyEnforceInitialConditions": ((311, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointTranslationalFriction(DispatchBaseClass):
	'''Translational joint friction. The translational joint friction force which contains stiction algorithm.'''
	CLSID = IID('{731EF6BF-6DC5-4959-84E0-1EE7C685A1CE}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AbsoluteVelocityThreshold(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_DynamicFrictionCoefficient(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFrictionForce(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxStictionDeformation(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_OverlapDelta(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "OverlapDelta", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_OverlapMode(self):
		return self._ApplyTypes_(*(103, 2, (3, 0), (), "OverlapMode", '{6EE17961-4865-4EF4-B2F2-E28A05B2BD31}'))
	def _get_PreForce(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "PreForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ReactionArm(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "ReactionArm", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StaticFrictionCoefficient(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseBendingMoment(self):
		return self._ApplyTypes_(*(106, 2, (11, 0), (), "UseBendingMoment", None))
	def _get_UseMaxFrictionForce(self):
		return self._ApplyTypes_(*(107, 2, (11, 0), (), "UseMaxFrictionForce", None))
	def _get_UseReactionForce(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseReactionForce", None))
	def _get_UseSliding(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseSliding", None))
	def _get_UseStiction(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseStiction", None))
	def _get_UseTorsionalMoment(self):
		return self._ApplyTypes_(*(108, 2, (11, 0), (), "UseTorsionalMoment", None))

	def _set_OverlapMode(self, value):
		if "OverlapMode" in self.__dict__: self.__dict__["OverlapMode"] = value; return
		self._oleobj_.Invoke(*((103, LCID, 4, 0) + (value,) + ()))
	def _set_UseBendingMoment(self, value):
		if "UseBendingMoment" in self.__dict__: self.__dict__["UseBendingMoment"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))
	def _set_UseMaxFrictionForce(self, value):
		if "UseMaxFrictionForce" in self.__dict__: self.__dict__["UseMaxFrictionForce"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UseReactionForce(self, value):
		if "UseReactionForce" in self.__dict__: self.__dict__["UseReactionForce"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseSliding(self, value):
		if "UseSliding" in self.__dict__: self.__dict__["UseSliding"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_UseStiction(self, value):
		if "UseStiction" in self.__dict__: self.__dict__["UseStiction"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_UseTorsionalMoment(self, value):
		if "UseTorsionalMoment" in self.__dict__: self.__dict__["UseTorsionalMoment"] = value; return
		self._oleobj_.Invoke(*((108, LCID, 4, 0) + (value,) + ()))

	AbsoluteVelocityThreshold = property(_get_AbsoluteVelocityThreshold, None)
	'''
	Absolute threshold velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	DynamicFrictionCoefficient = property(_get_DynamicFrictionCoefficient, None)
	'''
	Dynamic friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFrictionForce = property(_get_MaxFrictionForce, None)
	'''
	Maximum friction force

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxStictionDeformation = property(_get_MaxStictionDeformation, None)
	'''
	Maximum stiction deformation

	:type: recurdyn.ProcessNet.IDouble
	'''
	OverlapDelta = property(_get_OverlapDelta, None)
	'''
	Overlap delta

	:type: recurdyn.ProcessNet.IDouble
	'''
	OverlapMode = property(_get_OverlapMode, _set_OverlapMode)
	'''
	Overlap mode

	:type: recurdyn.ProcessNet.OverlapMode
	'''
	PreForce = property(_get_PreForce, None)
	'''
	Pre-force

	:type: recurdyn.ProcessNet.IDouble
	'''
	ReactionArm = property(_get_ReactionArm, None)
	'''
	Reaction arm

	:type: recurdyn.ProcessNet.IDouble
	'''
	StaticFrictionCoefficient = property(_get_StaticFrictionCoefficient, None)
	'''
	Static friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseBendingMoment = property(_get_UseBendingMoment, _set_UseBendingMoment)
	'''
	Use bending moment

	:type: bool
	'''
	UseMaxFrictionForce = property(_get_UseMaxFrictionForce, _set_UseMaxFrictionForce)
	'''
	Use maximum friction force

	:type: bool
	'''
	UseReactionForce = property(_get_UseReactionForce, _set_UseReactionForce)
	'''
	Use reaction force

	:type: bool
	'''
	UseSliding = property(_get_UseSliding, _set_UseSliding)
	'''
	Use sliding

	:type: bool
	'''
	UseStiction = property(_get_UseStiction, _set_UseStiction)
	'''
	Use stiction

	:type: bool
	'''
	UseTorsionalMoment = property(_get_UseTorsionalMoment, _set_UseTorsionalMoment)
	'''
	Use torsional moment

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_OverlapMode": _set_OverlapMode,
		"_set_UseBendingMoment": _set_UseBendingMoment,
		"_set_UseMaxFrictionForce": _set_UseMaxFrictionForce,
		"_set_UseReactionForce": _set_UseReactionForce,
		"_set_UseSliding": _set_UseSliding,
		"_set_UseStiction": _set_UseStiction,
		"_set_UseTorsionalMoment": _set_UseTorsionalMoment,
	}
	_prop_map_get_ = {
		"AbsoluteVelocityThreshold": (51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"DynamicFrictionCoefficient": (52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFrictionForce": (101, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxStictionDeformation": (53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"OverlapDelta": (102, 2, (9, 0), (), "OverlapDelta", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"OverlapMode": (103, 2, (3, 0), (), "OverlapMode", '{6EE17961-4865-4EF4-B2F2-E28A05B2BD31}'),
		"PreForce": (104, 2, (9, 0), (), "PreForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ReactionArm": (105, 2, (9, 0), (), "ReactionArm", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StaticFrictionCoefficient": (54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseBendingMoment": (106, 2, (11, 0), (), "UseBendingMoment", None),
		"UseMaxFrictionForce": (107, 2, (11, 0), (), "UseMaxFrictionForce", None),
		"UseReactionForce": (55, 2, (11, 0), (), "UseReactionForce", None),
		"UseSliding": (56, 2, (11, 0), (), "UseSliding", None),
		"UseStiction": (57, 2, (11, 0), (), "UseStiction", None),
		"UseTorsionalMoment": (108, 2, (11, 0), (), "UseTorsionalMoment", None),
	}
	_prop_map_put_ = {
		"OverlapMode": ((103, LCID, 4, 0),()),
		"UseBendingMoment": ((106, LCID, 4, 0),()),
		"UseMaxFrictionForce": ((107, LCID, 4, 0),()),
		"UseReactionForce": ((55, LCID, 4, 0),()),
		"UseSliding": ((56, LCID, 4, 0),()),
		"UseStiction": ((57, LCID, 4, 0),()),
		"UseTorsionalMoment": ((108, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointTranslationalFrictionWithoutStiction(DispatchBaseClass):
	'''Translational joint friction without stiction'''
	CLSID = IID('{3292939F-35E3-469F-A8AE-7F9234326B1E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AbsoluteVelocityThreshold(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_CrossSectionType(self):
		return self._ApplyTypes_(*(101, 2, (3, 0), (), "CrossSectionType", '{70C16F1F-3771-4B4C-8D3F-4AB432578E34}'))
	def _get_DynamicFrictionCoefficient(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_HeightFactor(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "HeightFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFrictionForce(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RadialFactor(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "RadialFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RadialPreload(self):
		return self._ApplyTypes_(*(107, 2, (9, 0), (), "RadialPreload", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StaticFrictionCoefficient(self):
		return self._ApplyTypes_(*(56, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseMaxFrictionForce(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseMaxFrictionForce", None))
	def _get_WidthFactor(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "WidthFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_XAxisPreloadForce(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "XAxisPreloadForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_YAxisPreloadForce(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "YAxisPreloadForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	def _set_CrossSectionType(self, value):
		if "CrossSectionType" in self.__dict__: self.__dict__["CrossSectionType"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UseMaxFrictionForce(self, value):
		if "UseMaxFrictionForce" in self.__dict__: self.__dict__["UseMaxFrictionForce"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))

	AbsoluteVelocityThreshold = property(_get_AbsoluteVelocityThreshold, None)
	'''
	Absolute threshold velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	CrossSectionType = property(_get_CrossSectionType, _set_CrossSectionType)
	'''
	Cross section type

	:type: recurdyn.ProcessNet.CrossSectionType
	'''
	DynamicFrictionCoefficient = property(_get_DynamicFrictionCoefficient, None)
	'''
	Dynamic friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	HeightFactor = property(_get_HeightFactor, None)
	'''
	Height factor

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFrictionForce = property(_get_MaxFrictionForce, None)
	'''
	Maximum friction force

	:type: recurdyn.ProcessNet.IDouble
	'''
	RadialFactor = property(_get_RadialFactor, None)
	'''
	Weight factor

	:type: recurdyn.ProcessNet.IDouble
	'''
	RadialPreload = property(_get_RadialPreload, None)
	'''
	Radial preload

	:type: recurdyn.ProcessNet.IDouble
	'''
	StaticFrictionCoefficient = property(_get_StaticFrictionCoefficient, None)
	'''
	Static friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseMaxFrictionForce = property(_get_UseMaxFrictionForce, _set_UseMaxFrictionForce)
	'''
	Use maximum friction force

	:type: bool
	'''
	WidthFactor = property(_get_WidthFactor, None)
	'''
	Width factor

	:type: recurdyn.ProcessNet.IDouble
	'''
	XAxisPreloadForce = property(_get_XAxisPreloadForce, None)
	'''
	X-axis preload force

	:type: recurdyn.ProcessNet.IDouble
	'''
	YAxisPreloadForce = property(_get_YAxisPreloadForce, None)
	'''
	Y-axis preload force

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
		"_set_CrossSectionType": _set_CrossSectionType,
		"_set_UseMaxFrictionForce": _set_UseMaxFrictionForce,
	}
	_prop_map_get_ = {
		"AbsoluteVelocityThreshold": (51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"CrossSectionType": (101, 2, (3, 0), (), "CrossSectionType", '{70C16F1F-3771-4B4C-8D3F-4AB432578E34}'),
		"DynamicFrictionCoefficient": (52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"HeightFactor": (102, 2, (9, 0), (), "HeightFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFrictionForce": (53, 2, (9, 0), (), "MaxFrictionForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RadialFactor": (106, 2, (9, 0), (), "RadialFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RadialPreload": (107, 2, (9, 0), (), "RadialPreload", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StaticFrictionCoefficient": (56, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseMaxFrictionForce": (57, 2, (11, 0), (), "UseMaxFrictionForce", None),
		"WidthFactor": (103, 2, (9, 0), (), "WidthFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"XAxisPreloadForce": (104, 2, (9, 0), (), "XAxisPreloadForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"YAxisPreloadForce": (105, 2, (9, 0), (), "YAxisPreloadForce", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
		"CrossSectionType": ((101, LCID, 4, 0),()),
		"UseMaxFrictionForce": ((57, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointUniversal(DispatchBaseClass):
	'''The universal joint allows two rotational degrees of freedom, namely the rotations about the two cross axes.'''
	CLSID = IID('{04E99CDC-64B1-42F2-B981-EC91848B39F6}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CopyActionToBase(self, Type):
		'''
		Copy action to base
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def CopyBaseToAction(self, Type):
		'''
		Copy base to action
		
		:param Type: CopyMarkerType
		'''
		return self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionFriction(self):
		return self._ApplyTypes_(*(303, 2, (9, 0), (), "ActionFriction", '{CCE1F47D-59F6-428E-91D7-65F36D446B05}'))
	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseFriction(self):
		return self._ApplyTypes_(*(306, 2, (9, 0), (), "BaseFriction", '{CCE1F47D-59F6-428E-91D7-65F36D446B05}'))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ForceDisplay(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(207, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayUse(self):
		return self._ApplyTypes_(*(209, 2, (11, 0), (), "ForceDisplayUse", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(204, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(208, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_UseActionFriction(self):
		return self._ApplyTypes_(*(301, 2, (11, 0), (), "UseActionFriction", None))
	def _get_UseBaseFriction(self):
		return self._ApplyTypes_(*(304, 2, (11, 0), (), "UseBaseFriction", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplay(self, value):
		if "ForceDisplay" in self.__dict__: self.__dict__["ForceDisplay"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayUse(self, value):
		if "ForceDisplayUse" in self.__dict__: self.__dict__["ForceDisplayUse"] = value; return
		self._oleobj_.Invoke(*((209, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (value,) + ()))
	def _set_UseActionFriction(self, value):
		if "UseActionFriction" in self.__dict__: self.__dict__["UseActionFriction"] = value; return
		self._oleobj_.Invoke(*((301, LCID, 4, 0) + (value,) + ()))
	def _set_UseBaseFriction(self, value):
		if "UseBaseFriction" in self.__dict__: self.__dict__["UseBaseFriction"] = value; return
		self._oleobj_.Invoke(*((304, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionFriction = property(_get_ActionFriction, None)
	'''
	Universal joint action friction

	:type: recurdyn.ProcessNet.IJointUniversalFriction
	'''
	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseFriction = property(_get_BaseFriction, None)
	'''
	Universal joint base friction

	:type: recurdyn.ProcessNet.IJointUniversalFriction
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ForceDisplay = property(_get_ForceDisplay, _set_ForceDisplay)
	'''
	Force display

	:type: recurdyn.ProcessNet.ForceDisplay
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayUse = property(_get_ForceDisplayUse, _set_ForceDisplayUse)
	'''
	Force display use

	:type: bool
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	UseActionFriction = property(_get_UseActionFriction, _set_UseActionFriction)
	'''
	Use action friction

	:type: bool
	'''
	UseBaseFriction = property(_get_UseBaseFriction, _set_UseBaseFriction)
	'''
	Use base friction

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ForceDisplay": _set_ForceDisplay,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayUse": _set_ForceDisplayUse,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_UseActionFriction": _set_UseActionFriction,
		"_set_UseBaseFriction": _set_UseBaseFriction,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionFriction": (303, 2, (9, 0), (), "ActionFriction", '{CCE1F47D-59F6-428E-91D7-65F36D446B05}'),
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseFriction": (306, 2, (9, 0), (), "BaseFriction", '{CCE1F47D-59F6-428E-91D7-65F36D446B05}'),
		"BaseMarker": (202, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ForceDisplay": (201, 2, (3, 0), (), "ForceDisplay", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'),
		"ForceDisplayColor": (207, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayUse": (209, 2, (11, 0), (), "ForceDisplayUse", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (204, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"TorqueDisplayColor": (208, 2, (19, 0), (), "TorqueDisplayColor", None),
		"UseActionFriction": (301, 2, (11, 0), (), "UseActionFriction", None),
		"UseBaseFriction": (304, 2, (11, 0), (), "UseBaseFriction", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ForceDisplay": ((201, LCID, 4, 0),()),
		"ForceDisplayColor": ((207, LCID, 4, 0),()),
		"ForceDisplayUse": ((209, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"TorqueDisplayColor": ((208, LCID, 4, 0),()),
		"UseActionFriction": ((301, LCID, 4, 0),()),
		"UseBaseFriction": ((304, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IJointUniversalFriction(DispatchBaseClass):
	'''Universal joint friction. The universal joint friction force which contains stiction algorithm.'''
	CLSID = IID('{CCE1F47D-59F6-428E-91D7-65F36D446B05}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AbsoluteVelocityThreshold(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BendingReactionArm(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "BendingReactionArm", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_DynamicFrictionCoefficient(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FrictionArm(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "FrictionArm", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxFrictionTorque(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "MaxFrictionTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaxStictionDeformation(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PinRadius(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "PinRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PreTorque(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "PreTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_StaticFrictionCoefficient(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseBendingMoment(self):
		return self._ApplyTypes_(*(107, 2, (11, 0), (), "UseBendingMoment", None))
	def _get_UseMaxFrictionTorque(self):
		return self._ApplyTypes_(*(106, 2, (11, 0), (), "UseMaxFrictionTorque", None))
	def _get_UseReactionForce(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseReactionForce", None))
	def _get_UseSliding(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseSliding", None))
	def _get_UseStiction(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseStiction", None))

	def _set_UseBendingMoment(self, value):
		if "UseBendingMoment" in self.__dict__: self.__dict__["UseBendingMoment"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UseMaxFrictionTorque(self, value):
		if "UseMaxFrictionTorque" in self.__dict__: self.__dict__["UseMaxFrictionTorque"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))
	def _set_UseReactionForce(self, value):
		if "UseReactionForce" in self.__dict__: self.__dict__["UseReactionForce"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseSliding(self, value):
		if "UseSliding" in self.__dict__: self.__dict__["UseSliding"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_UseStiction(self, value):
		if "UseStiction" in self.__dict__: self.__dict__["UseStiction"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))

	AbsoluteVelocityThreshold = property(_get_AbsoluteVelocityThreshold, None)
	'''
	Absolute threshold velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	BendingReactionArm = property(_get_BendingReactionArm, None)
	'''
	Bending reaction arm

	:type: recurdyn.ProcessNet.IDouble
	'''
	DynamicFrictionCoefficient = property(_get_DynamicFrictionCoefficient, None)
	'''
	Dynamic friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	FrictionArm = property(_get_FrictionArm, None)
	'''
	Friction arm

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxFrictionTorque = property(_get_MaxFrictionTorque, None)
	'''
	Maximum friction torque

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaxStictionDeformation = property(_get_MaxStictionDeformation, None)
	'''
	Maximum stiction deformation

	:type: recurdyn.ProcessNet.IDouble
	'''
	PinRadius = property(_get_PinRadius, None)
	'''
	Pin radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	PreTorque = property(_get_PreTorque, None)
	'''
	Pre-torque

	:type: recurdyn.ProcessNet.IDouble
	'''
	StaticFrictionCoefficient = property(_get_StaticFrictionCoefficient, None)
	'''
	Static friction coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseBendingMoment = property(_get_UseBendingMoment, _set_UseBendingMoment)
	'''
	Use bending moment

	:type: bool
	'''
	UseMaxFrictionTorque = property(_get_UseMaxFrictionTorque, _set_UseMaxFrictionTorque)
	'''
	Use maximum friction torque

	:type: bool
	'''
	UseReactionForce = property(_get_UseReactionForce, _set_UseReactionForce)
	'''
	Use reaction force

	:type: bool
	'''
	UseSliding = property(_get_UseSliding, _set_UseSliding)
	'''
	Use sliding

	:type: bool
	'''
	UseStiction = property(_get_UseStiction, _set_UseStiction)
	'''
	Use stiction

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UseBendingMoment": _set_UseBendingMoment,
		"_set_UseMaxFrictionTorque": _set_UseMaxFrictionTorque,
		"_set_UseReactionForce": _set_UseReactionForce,
		"_set_UseSliding": _set_UseSliding,
		"_set_UseStiction": _set_UseStiction,
	}
	_prop_map_get_ = {
		"AbsoluteVelocityThreshold": (51, 2, (9, 0), (), "AbsoluteVelocityThreshold", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BendingReactionArm": (104, 2, (9, 0), (), "BendingReactionArm", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"DynamicFrictionCoefficient": (52, 2, (9, 0), (), "DynamicFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FrictionArm": (102, 2, (9, 0), (), "FrictionArm", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxFrictionTorque": (105, 2, (9, 0), (), "MaxFrictionTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaxStictionDeformation": (53, 2, (9, 0), (), "MaxStictionDeformation", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PinRadius": (103, 2, (9, 0), (), "PinRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PreTorque": (101, 2, (9, 0), (), "PreTorque", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"StaticFrictionCoefficient": (54, 2, (9, 0), (), "StaticFrictionCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseBendingMoment": (107, 2, (11, 0), (), "UseBendingMoment", None),
		"UseMaxFrictionTorque": (106, 2, (11, 0), (), "UseMaxFrictionTorque", None),
		"UseReactionForce": (55, 2, (11, 0), (), "UseReactionForce", None),
		"UseSliding": (56, 2, (11, 0), (), "UseSliding", None),
		"UseStiction": (57, 2, (11, 0), (), "UseStiction", None),
	}
	_prop_map_put_ = {
		"UseBendingMoment": ((107, LCID, 4, 0),()),
		"UseMaxFrictionTorque": ((106, LCID, 4, 0),()),
		"UseReactionForce": ((55, LCID, 4, 0),()),
		"UseSliding": ((56, LCID, 4, 0),()),
		"UseStiction": ((57, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ILayer(DispatchBaseClass):
	'''Layer'''
	CLSID = IID('{2A7142D5-69B9-47B0-9E94-6E657374E32E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(152, 2, (8, 0), (), "Name", None))
	def _get_Visible(self):
		return self._ApplyTypes_(*(153, 2, (11, 0), (), "Visible", None))

	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Visible(self, value):
		if "Visible" in self.__dict__: self.__dict__["Visible"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))

	LayerNumber = property(_get_LayerNumber, None)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Layer name

	:type: str
	'''
	Visible = property(_get_Visible, _set_Visible)
	'''
	Layer visiblity

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Name": _set_Name,
		"_set_Visible": _set_Visible,
	}
	_prop_map_get_ = {
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (152, 2, (8, 0), (), "Name", None),
		"Visible": (153, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Name": ((152, LCID, 4, 0),()),
		"Visible": ((153, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ILayerCollection(DispatchBaseClass):
	'''ILayerCollection'''
	CLSID = IID('{3741CF5D-7BBB-4AE9-9FFB-EA01CBB4C991}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.ILayer
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{2A7142D5-69B9-47B0-9E94-6E657374E32E}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.ILayer
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{2A7142D5-69B9-47B0-9E94-6E657374E32E}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{2A7142D5-69B9-47B0-9E94-6E657374E32E}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{2A7142D5-69B9-47B0-9E94-6E657374E32E}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ILayerSetting(DispatchBaseClass):
	'''Layer setting'''
	CLSID = IID('{33584AC3-5F2D-4DD9-826E-1BA921B395D0}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetEntitiesInLayers(self, pVal):
		'''
		Get entites in layers
		
		:param pVal: list[int]
		:rtype: recurdyn.ProcessNet.IGenericCollection
		'''
		ret = self._oleobj_.InvokeTypes(109, LCID, 1, (9, 0), ((8211, 1),),pVal
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetEntitiesInLayers', '{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')
		return ret

	def SelectEntitiesInLayers(self, pVal):
		'''
		Select entites in layers
		
		:param pVal: list[int]
		'''
		return self._oleobj_.InvokeTypes(108, LCID, 1, (24, 0), ((8211, 1),),pVal
			)


	def _get_LayerCollection(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "LayerCollection", '{3741CF5D-7BBB-4AE9-9FFB-EA01CBB4C991}'))
	def _get_LayerCollectionWithEntities(self):
		return self._ApplyTypes_(*(107, 2, (9, 0), (), "LayerCollectionWithEntities", '{3741CF5D-7BBB-4AE9-9FFB-EA01CBB4C991}'))
	def _get_LayerFilter(self):
		return self._ApplyTypes_(*(102, 2, (3, 0), (), "LayerFilter", '{03B0D20A-818B-4164-9C9F-2DA6B7E950B3}'))
	def _get_ShowAll(self):
		return self._ApplyTypes_(*(110, 2, (11, 0), (), "ShowAll", None))
	def _get_UseUserDefinedLayer(self):
		return self._ApplyTypes_(*(106, 2, (11, 0), (), "UseUserDefinedLayer", None))
	def _get_VisibleLayer(self):
		return self._ApplyTypes_(*(103, 2, (8211, 0), (), "VisibleLayer", None))
	def _get_VisibleLayerCollection(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "VisibleLayerCollection", '{3741CF5D-7BBB-4AE9-9FFB-EA01CBB4C991}'))
	def _get_WorkingLayer(self):
		return self._ApplyTypes_(*(101, 2, (19, 0), (), "WorkingLayer", None))

	def _set_LayerFilter(self, value):
		if "LayerFilter" in self.__dict__: self.__dict__["LayerFilter"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ShowAll(self, value):
		if "ShowAll" in self.__dict__: self.__dict__["ShowAll"] = value; return
		self._oleobj_.Invoke(*((110, LCID, 4, 0) + (value,) + ()))
	def _set_UseUserDefinedLayer(self, value):
		if "UseUserDefinedLayer" in self.__dict__: self.__dict__["UseUserDefinedLayer"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))
	def _set_VisibleLayer(self, value):
		if "VisibleLayer" in self.__dict__: self.__dict__["VisibleLayer"] = value; return
		variantValue = win32com.client.VARIANT(8211, value)
		self._oleobj_.Invoke(*((103, LCID, 4, 0) + (variantValue,) + ()))
	def _set_WorkingLayer(self, value):
		if "WorkingLayer" in self.__dict__: self.__dict__["WorkingLayer"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))

	LayerCollection = property(_get_LayerCollection, None)
	'''
	Layer collection

	:type: recurdyn.ProcessNet.ILayerCollection
	'''
	LayerCollectionWithEntities = property(_get_LayerCollectionWithEntities, None)
	'''
	Layer collection with entities

	:type: recurdyn.ProcessNet.ILayerCollection
	'''
	LayerFilter = property(_get_LayerFilter, _set_LayerFilter)
	'''
	Set the layer filter

	:type: recurdyn.ProcessNet.LayerFilterTypeEx
	'''
	ShowAll = property(_get_ShowAll, _set_ShowAll)
	'''
	Show all

	:type: bool
	'''
	UseUserDefinedLayer = property(_get_UseUserDefinedLayer, _set_UseUserDefinedLayer)
	'''
	Show only layers with entities

	:type: bool
	'''
	VisibleLayer = property(_get_VisibleLayer, _set_VisibleLayer)
	'''
	Get the visible layers to the multi-layer setting

	:type: list[int]
	'''
	VisibleLayerCollection = property(_get_VisibleLayerCollection, None)
	'''
	Visible layer collection

	:type: recurdyn.ProcessNet.ILayerCollection
	'''
	WorkingLayer = property(_get_WorkingLayer, _set_WorkingLayer)
	'''
	Set this number to the working layer 

	:type: int
	'''

	_prop_map_set_function_ = {
		"_set_LayerFilter": _set_LayerFilter,
		"_set_ShowAll": _set_ShowAll,
		"_set_UseUserDefinedLayer": _set_UseUserDefinedLayer,
		"_set_VisibleLayer": _set_VisibleLayer,
		"_set_WorkingLayer": _set_WorkingLayer,
	}
	_prop_map_get_ = {
		"LayerCollection": (104, 2, (9, 0), (), "LayerCollection", '{3741CF5D-7BBB-4AE9-9FFB-EA01CBB4C991}'),
		"LayerCollectionWithEntities": (107, 2, (9, 0), (), "LayerCollectionWithEntities", '{3741CF5D-7BBB-4AE9-9FFB-EA01CBB4C991}'),
		"LayerFilter": (102, 2, (3, 0), (), "LayerFilter", '{03B0D20A-818B-4164-9C9F-2DA6B7E950B3}'),
		"ShowAll": (110, 2, (11, 0), (), "ShowAll", None),
		"UseUserDefinedLayer": (106, 2, (11, 0), (), "UseUserDefinedLayer", None),
		"VisibleLayer": (103, 2, (8211, 0), (), "VisibleLayer", None),
		"VisibleLayerCollection": (105, 2, (9, 0), (), "VisibleLayerCollection", '{3741CF5D-7BBB-4AE9-9FFB-EA01CBB4C991}'),
		"WorkingLayer": (101, 2, (19, 0), (), "WorkingLayer", None),
	}
	_prop_map_put_ = {
		"LayerFilter": ((102, LCID, 4, 0),()),
		"ShowAll": ((110, LCID, 4, 0),()),
		"UseUserDefinedLayer": ((106, LCID, 4, 0),()),
		"VisibleLayer": ((103, LCID, 4, 0),()),
		"WorkingLayer": ((101, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ILightControl(DispatchBaseClass):
	'''Model Setting - Light'''
	CLSID = IID('{2D204501-DF2E-4EAA-90E7-02756A698739}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetDirection(self):
		'''
		Direction of the light
		
		:rtype: list[float]
		'''
		return self._ApplyTypes_(53, 1, (8197, 0), (), 'GetDirection', None,)


	def SetDirection(self, pSafeArray):
		'''
		Direction of the light
		
		:param pSafeArray: list[float]
		'''
		return self._oleobj_.InvokeTypes(54, LCID, 1, (24, 0), ((8197, 1),),pSafeArray
			)


	def _get_Intensity(self):
		return self._ApplyTypes_(*(55, 2, (5, 0), (), "Intensity", None))
	def _get_Lock(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "Lock", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(52, 2, (8, 0), (), "Name", None))
	def _get_Use(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "Use", None))

	def _set_Intensity(self, value):
		if "Intensity" in self.__dict__: self.__dict__["Intensity"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_Lock(self, value):
		if "Lock" in self.__dict__: self.__dict__["Lock"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_Use(self, value):
		if "Use" in self.__dict__: self.__dict__["Use"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))

	Intensity = property(_get_Intensity, _set_Intensity)
	'''
	Light Intensity

	:type: float
	'''
	Lock = property(_get_Lock, _set_Lock)
	'''
	Lock

	:type: bool
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Specifies the Name of the light

	:type: str
	'''
	Use = property(_get_Use, _set_Use)
	'''
	Turns on or off the light

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Intensity": _set_Intensity,
		"_set_Lock": _set_Lock,
		"_set_Name": _set_Name,
		"_set_Use": _set_Use,
	}
	_prop_map_get_ = {
		"Intensity": (55, 2, (5, 0), (), "Intensity", None),
		"Lock": (56, 2, (11, 0), (), "Lock", None),
		"Name": (52, 2, (8, 0), (), "Name", None),
		"Use": (51, 2, (11, 0), (), "Use", None),
	}
	_prop_map_put_ = {
		"Intensity": ((55, LCID, 4, 0),()),
		"Lock": ((56, LCID, 4, 0),()),
		"Name": ((52, LCID, 4, 0),()),
		"Use": ((51, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ILightControlCollection(DispatchBaseClass):
	'''ILightControlCollection'''
	CLSID = IID('{4C7152BE-060E-4299-865E-FDD285928BDC}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.ILightControl
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{2D204501-DF2E-4EAA-90E7-02756A698739}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.ILightControl
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{2D204501-DF2E-4EAA-90E7-02756A698739}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{2D204501-DF2E-4EAA-90E7-02756A698739}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{2D204501-DF2E-4EAA-90E7-02756A698739}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IMFTireImportOption(DispatchBaseClass):
	'''IMFTireImportOption is obsoleted. Use IGRoadCreationOption.'''
	CLSID = IID('{E7F5FA95-8A22-45D7-AA32-2C4499D519A2}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_LeftLength(self):
		return self._ApplyTypes_(*(153, 2, (5, 0), (), "LeftLength", None))
	def _get_Length(self):
		return self._ApplyTypes_(*(151, 2, (5, 0), (), "Length", None))
	def _get_NumOfSegments(self):
		return self._ApplyTypes_(*(155, 2, (3, 0), (), "NumOfSegments", None))
	def _get_RightLength(self):
		return self._ApplyTypes_(*(154, 2, (5, 0), (), "RightLength", None))
	def _get_UseZ_Left(self):
		return self._ApplyTypes_(*(156, 2, (11, 0), (), "UseZ_Left", None))
	def _get_UseZ_Rigth(self):
		return self._ApplyTypes_(*(157, 2, (11, 0), (), "UseZ_Rigth", None))
	def _get_Width(self):
		return self._ApplyTypes_(*(152, 2, (5, 0), (), "Width", None))

	def _set_LeftLength(self, value):
		if "LeftLength" in self.__dict__: self.__dict__["LeftLength"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))
	def _set_Length(self, value):
		if "Length" in self.__dict__: self.__dict__["Length"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_NumOfSegments(self, value):
		if "NumOfSegments" in self.__dict__: self.__dict__["NumOfSegments"] = value; return
		self._oleobj_.Invoke(*((155, LCID, 4, 0) + (value,) + ()))
	def _set_RightLength(self, value):
		if "RightLength" in self.__dict__: self.__dict__["RightLength"] = value; return
		self._oleobj_.Invoke(*((154, LCID, 4, 0) + (value,) + ()))
	def _set_UseZ_Left(self, value):
		if "UseZ_Left" in self.__dict__: self.__dict__["UseZ_Left"] = value; return
		self._oleobj_.Invoke(*((156, LCID, 4, 0) + (value,) + ()))
	def _set_UseZ_Rigth(self, value):
		if "UseZ_Rigth" in self.__dict__: self.__dict__["UseZ_Rigth"] = value; return
		self._oleobj_.Invoke(*((157, LCID, 4, 0) + (value,) + ()))
	def _set_Width(self, value):
		if "Width" in self.__dict__: self.__dict__["Width"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))

	LeftLength = property(_get_LeftLength, _set_LeftLength)
	'''
	IMFTireImportOption.LeftLength is obsoleted. Use IGRoadCreationOption.LeftLength.

	:type: float
	'''
	Length = property(_get_Length, _set_Length)
	'''
	IMFTireImportOption.Length is obsoleted. Use IGRoadCreationOption.Length.

	:type: float
	'''
	NumOfSegments = property(_get_NumOfSegments, _set_NumOfSegments)
	'''
	IMFTireImportOption.NumOfSegments is obsoleted. Use IGRoadCreationOption.NumOfSegments.

	:type: int
	'''
	RightLength = property(_get_RightLength, _set_RightLength)
	'''
	IMFTireImportOption.RightLength is obsoleted. Use IGRoadCreationOption.RightLength.

	:type: float
	'''
	UseZ_Left = property(_get_UseZ_Left, _set_UseZ_Left)
	'''
	IMFTireImportOption.UseZ_Left is obsoleted. Use IGRoadCreationOption.UseZ_Left.

	:type: bool
	'''
	UseZ_Rigth = property(_get_UseZ_Rigth, _set_UseZ_Rigth)
	'''
	IMFTireImportOption.UseZ_Rigth is obsoleted. Use IGRoadCreationOption.UseZ_Rigth.

	:type: bool
	'''
	Width = property(_get_Width, _set_Width)
	'''
	IMFTireImportOption.Width is obsoleted. Use IGRoadCreationOption.Width.

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_LeftLength": _set_LeftLength,
		"_set_Length": _set_Length,
		"_set_NumOfSegments": _set_NumOfSegments,
		"_set_RightLength": _set_RightLength,
		"_set_UseZ_Left": _set_UseZ_Left,
		"_set_UseZ_Rigth": _set_UseZ_Rigth,
		"_set_Width": _set_Width,
	}
	_prop_map_get_ = {
		"LeftLength": (153, 2, (5, 0), (), "LeftLength", None),
		"Length": (151, 2, (5, 0), (), "Length", None),
		"NumOfSegments": (155, 2, (3, 0), (), "NumOfSegments", None),
		"RightLength": (154, 2, (5, 0), (), "RightLength", None),
		"UseZ_Left": (156, 2, (11, 0), (), "UseZ_Left", None),
		"UseZ_Rigth": (157, 2, (11, 0), (), "UseZ_Rigth", None),
		"Width": (152, 2, (5, 0), (), "Width", None),
	}
	_prop_map_put_ = {
		"LeftLength": ((153, LCID, 4, 0),()),
		"Length": ((151, LCID, 4, 0),()),
		"NumOfSegments": ((155, LCID, 4, 0),()),
		"RightLength": ((154, LCID, 4, 0),()),
		"UseZ_Left": ((156, LCID, 4, 0),()),
		"UseZ_Rigth": ((157, LCID, 4, 0),()),
		"Width": ((152, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IManager(DispatchBaseClass):
	'''Manager'''
	CLSID = IID('{4E50DC20-53E0-4B65-86B2-E6C6FF8C1A52}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IMarker(DispatchBaseClass):
	'''Marker'''
	CLSID = IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FFlexData(self):
		return self._ApplyTypes_(*(155, 2, (9, 0), (), "FFlexData", '{A2FF24EE-9333-4BFF-9DC3-27E495B46ACD}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerName(self):
		return self._ApplyTypes_(*(157, 2, (8, 0), (), "LayerName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(156, 2, (19, 0), (), "LayerNumber", None))
	def _get_MotherBody(self):
		return self._ApplyTypes_(*(159, 2, (9, 0), (), "MotherBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RFlexData(self):
		return self._ApplyTypes_(*(158, 2, (9, 0), (), "RFlexData", '{A2FF24EE-9333-4BFF-9DC3-17E496B46ACD}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_ShowTrace(self):
		return self._ApplyTypes_(*(154, 2, (11, 0), (), "ShowTrace", None))
	def _get_TraceLineColor(self):
		return self._ApplyTypes_(*(152, 2, (19, 0), (), "TraceLineColor", None))
	def _get_TraceLineWidth(self):
		return self._ApplyTypes_(*(153, 2, (5, 0), (), "TraceLineWidth", None))
	def _get_TraceRefMarker(self):
		return self._ApplyTypes_(*(160, 2, (9, 0), (), "TraceRefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_TraceUse(self):
		return self._ApplyTypes_(*(161, 2, (11, 0), (), "TraceUse", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((156, LCID, 4, 0) + (value,) + ()))
	def _set_MotherBody(self, value):
		if "MotherBody" in self.__dict__: self.__dict__["MotherBody"] = value; return
		self._oleobj_.Invoke(*((159, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_ShowTrace(self, value):
		if "ShowTrace" in self.__dict__: self.__dict__["ShowTrace"] = value; return
		self._oleobj_.Invoke(*((154, LCID, 4, 0) + (value,) + ()))
	def _set_TraceLineColor(self, value):
		if "TraceLineColor" in self.__dict__: self.__dict__["TraceLineColor"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_TraceLineWidth(self, value):
		if "TraceLineWidth" in self.__dict__: self.__dict__["TraceLineWidth"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))
	def _set_TraceRefMarker(self, value):
		if "TraceRefMarker" in self.__dict__: self.__dict__["TraceRefMarker"] = value; return
		self._oleobj_.Invoke(*((160, LCID, 4, 0) + (value,) + ()))
	def _set_TraceUse(self, value):
		if "TraceUse" in self.__dict__: self.__dict__["TraceUse"] = value; return
		self._oleobj_.Invoke(*((161, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FFlexData = property(_get_FFlexData, None)
	'''
	Marker fflex data

	:type: recurdyn.ProcessNet.IMarkerFFlexData
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerName = property(_get_LayerName, None)
	'''
	Layer name

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MotherBody = property(_get_MotherBody, _set_MotherBody)
	'''
	Mother Body

	:type: recurdyn.ProcessNet.IBody
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RFlexData = property(_get_RFlexData, None)
	'''
	Marker rflex data

	:type: recurdyn.ProcessNet.IMarkerRFlexData
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	ShowTrace = property(_get_ShowTrace, _set_ShowTrace)
	'''
	Show trace

	:type: bool
	'''
	TraceLineColor = property(_get_TraceLineColor, _set_TraceLineColor)
	'''
	Trace line color

	:type: int
	'''
	TraceLineWidth = property(_get_TraceLineWidth, _set_TraceLineWidth)
	'''
	Trace line width

	:type: float
	'''
	TraceRefMarker = property(_get_TraceRefMarker, _set_TraceRefMarker)
	'''
	Trace Reference Marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	TraceUse = property(_get_TraceUse, _set_TraceUse)
	'''
	Trace Use

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_MotherBody": _set_MotherBody,
		"_set_Name": _set_Name,
		"_set_ShowTrace": _set_ShowTrace,
		"_set_TraceLineColor": _set_TraceLineColor,
		"_set_TraceLineWidth": _set_TraceLineWidth,
		"_set_TraceRefMarker": _set_TraceRefMarker,
		"_set_TraceUse": _set_TraceUse,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FFlexData": (155, 2, (9, 0), (), "FFlexData", '{A2FF24EE-9333-4BFF-9DC3-27E495B46ACD}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerName": (157, 2, (8, 0), (), "LayerName", None),
		"LayerNumber": (156, 2, (19, 0), (), "LayerNumber", None),
		"MotherBody": (159, 2, (9, 0), (), "MotherBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RFlexData": (158, 2, (9, 0), (), "RFlexData", '{A2FF24EE-9333-4BFF-9DC3-17E496B46ACD}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"ShowTrace": (154, 2, (11, 0), (), "ShowTrace", None),
		"TraceLineColor": (152, 2, (19, 0), (), "TraceLineColor", None),
		"TraceLineWidth": (153, 2, (5, 0), (), "TraceLineWidth", None),
		"TraceRefMarker": (160, 2, (9, 0), (), "TraceRefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"TraceUse": (161, 2, (11, 0), (), "TraceUse", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"LayerNumber": ((156, LCID, 4, 0),()),
		"MotherBody": ((159, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"ShowTrace": ((154, LCID, 4, 0),()),
		"TraceLineColor": ((152, LCID, 4, 0),()),
		"TraceLineWidth": ((153, LCID, 4, 0),()),
		"TraceRefMarker": ((160, LCID, 4, 0),()),
		"TraceUse": ((161, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IMarkerCollection(DispatchBaseClass):
	'''IMarkerCollection'''
	CLSID = IID('{6BEF9B6B-4708-445E-A3B5-0D65BA69F748}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IMarker
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IMarker
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IMarkerFFlexData(DispatchBaseClass):
	'''Marker FFlex Data'''
	CLSID = IID('{A2FF24EE-9333-4BFF-9DC3-27E495B46ACD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def SetDisplacement(self, x, y, z):
		'''
		Set displacement
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(156, LCID, 1, (24, 0), ((5, 1), (5, 0), (5, 0)),x
			, y, z)


	def SetNearestNode(self):
		'''
		Set nearest node
		'''
		return self._oleobj_.InvokeTypes(157, LCID, 1, (24, 0), (),)


	def _get_DisplacementX(self):
		return self._ApplyTypes_(*(153, 2, (5, 0), (), "DisplacementX", None))
	def _get_DisplacementY(self):
		return self._ApplyTypes_(*(154, 2, (5, 0), (), "DisplacementY", None))
	def _get_DisplacementZ(self):
		return self._ApplyTypes_(*(155, 2, (5, 0), (), "DisplacementZ", None))
	def _get_NodeID(self):
		return self._ApplyTypes_(*(151, 2, (3, 0), (), "NodeID", None))

	def _set_NodeID(self, value):
		if "NodeID" in self.__dict__: self.__dict__["NodeID"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))

	DisplacementX = property(_get_DisplacementX, None)
	'''
	Displacement x

	:type: float
	'''
	DisplacementY = property(_get_DisplacementY, None)
	'''
	Displacement y

	:type: float
	'''
	DisplacementZ = property(_get_DisplacementZ, None)
	'''
	Displacement z

	:type: float
	'''
	NodeID = property(_get_NodeID, _set_NodeID)
	'''
	Node ID

	:type: int
	'''

	_prop_map_set_function_ = {
		"_set_NodeID": _set_NodeID,
	}
	_prop_map_get_ = {
		"DisplacementX": (153, 2, (5, 0), (), "DisplacementX", None),
		"DisplacementY": (154, 2, (5, 0), (), "DisplacementY", None),
		"DisplacementZ": (155, 2, (5, 0), (), "DisplacementZ", None),
		"NodeID": (151, 2, (3, 0), (), "NodeID", None),
	}
	_prop_map_put_ = {
		"NodeID": ((151, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IMarkerRFlexData(DispatchBaseClass):
	'''Marker RFlex Data'''
	CLSID = IID('{A2FF24EE-9333-4BFF-9DC3-17E496B46ACD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def SetDisplacement(self, x, y, z):
		'''
		Set displacement
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(156, LCID, 1, (24, 0), ((5, 1), (5, 0), (5, 0)),x
			, y, z)


	def SetNearestNode(self):
		'''
		Set nearest node
		'''
		return self._oleobj_.InvokeTypes(157, LCID, 1, (24, 0), (),)


	def _get_DisplacementX(self):
		return self._ApplyTypes_(*(153, 2, (5, 0), (), "DisplacementX", None))
	def _get_DisplacementY(self):
		return self._ApplyTypes_(*(154, 2, (5, 0), (), "DisplacementY", None))
	def _get_DisplacementZ(self):
		return self._ApplyTypes_(*(155, 2, (5, 0), (), "DisplacementZ", None))
	def _get_NodeID(self):
		return self._ApplyTypes_(*(151, 2, (3, 0), (), "NodeID", None))

	def _set_NodeID(self, value):
		if "NodeID" in self.__dict__: self.__dict__["NodeID"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))

	DisplacementX = property(_get_DisplacementX, None)
	'''
	Displacement x

	:type: float
	'''
	DisplacementY = property(_get_DisplacementY, None)
	'''
	Displacement y

	:type: float
	'''
	DisplacementZ = property(_get_DisplacementZ, None)
	'''
	Displacement z

	:type: float
	'''
	NodeID = property(_get_NodeID, _set_NodeID)
	'''
	Node ID

	:type: int
	'''

	_prop_map_set_function_ = {
		"_set_NodeID": _set_NodeID,
	}
	_prop_map_get_ = {
		"DisplacementX": (153, 2, (5, 0), (), "DisplacementX", None),
		"DisplacementY": (154, 2, (5, 0), (), "DisplacementY", None),
		"DisplacementZ": (155, 2, (5, 0), (), "DisplacementZ", None),
		"NodeID": (151, 2, (3, 0), (), "NodeID", None),
	}
	_prop_map_put_ = {
		"NodeID": ((151, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IMassProperty(DispatchBaseClass):
	'''Mass Property'''
	CLSID = IID('{931EE5BD-3011-4120-AC01-FC90D67BF3C0}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Ixx(self):
		return self._ApplyTypes_(*(52, 2, (5, 0), (), "Ixx", None))
	def _get_Ixy(self):
		return self._ApplyTypes_(*(55, 2, (5, 0), (), "Ixy", None))
	def _get_Iyy(self):
		return self._ApplyTypes_(*(53, 2, (5, 0), (), "Iyy", None))
	def _get_Iyz(self):
		return self._ApplyTypes_(*(56, 2, (5, 0), (), "Iyz", None))
	def _get_Izx(self):
		return self._ApplyTypes_(*(57, 2, (5, 0), (), "Izx", None))
	def _get_Izz(self):
		return self._ApplyTypes_(*(54, 2, (5, 0), (), "Izz", None))
	def _get_Mass(self):
		return self._ApplyTypes_(*(51, 2, (5, 0), (), "Mass", None))
	def _get_PositionOfMassCenter(self):
		return self._ApplyTypes_(*(58, 2, (8197, 0), (), "PositionOfMassCenter", None))

	Ixx = property(_get_Ixx, None)
	'''
	Ixx

	:type: float
	'''
	Ixy = property(_get_Ixy, None)
	'''
	Ixy

	:type: float
	'''
	Iyy = property(_get_Iyy, None)
	'''
	Iyy

	:type: float
	'''
	Iyz = property(_get_Iyz, None)
	'''
	Iyz

	:type: float
	'''
	Izx = property(_get_Izx, None)
	'''
	Izx

	:type: float
	'''
	Izz = property(_get_Izz, None)
	'''
	Izz

	:type: float
	'''
	Mass = property(_get_Mass, None)
	'''
	Mass

	:type: float
	'''
	PositionOfMassCenter = property(_get_PositionOfMassCenter, None)
	'''
	Postion of the mass center

	:type: list[float]
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Ixx": (52, 2, (5, 0), (), "Ixx", None),
		"Ixy": (55, 2, (5, 0), (), "Ixy", None),
		"Iyy": (53, 2, (5, 0), (), "Iyy", None),
		"Iyz": (56, 2, (5, 0), (), "Iyz", None),
		"Izx": (57, 2, (5, 0), (), "Izx", None),
		"Izz": (54, 2, (5, 0), (), "Izz", None),
		"Mass": (51, 2, (5, 0), (), "Mass", None),
		"PositionOfMassCenter": (58, 2, (8197, 0), (), "PositionOfMassCenter", None),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IMaterialProperty(DispatchBaseClass):
	'''Material property'''
	CLSID = IID('{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Density(self):
		return self._ApplyTypes_(*(151, 2, (5, 0), (), "Density", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_PoissonRatio(self):
		return self._ApplyTypes_(*(153, 2, (5, 0), (), "PoissonRatio", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_YoungsModulus(self):
		return self._ApplyTypes_(*(152, 2, (5, 0), (), "YoungsModulus", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Density(self, value):
		if "Density" in self.__dict__: self.__dict__["Density"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_PoissonRatio(self, value):
		if "PoissonRatio" in self.__dict__: self.__dict__["PoissonRatio"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_YoungsModulus(self, value):
		if "YoungsModulus" in self.__dict__: self.__dict__["YoungsModulus"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Density = property(_get_Density, _set_Density)
	'''
	Density

	:type: float
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	PoissonRatio = property(_get_PoissonRatio, _set_PoissonRatio)
	'''
	Poisson's ratio

	:type: float
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	YoungsModulus = property(_get_YoungsModulus, _set_YoungsModulus)
	'''
	Young's modulus

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Density": _set_Density,
		"_set_Name": _set_Name,
		"_set_PoissonRatio": _set_PoissonRatio,
		"_set_UserData": _set_UserData,
		"_set_YoungsModulus": _set_YoungsModulus,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Density": (151, 2, (5, 0), (), "Density", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"PoissonRatio": (153, 2, (5, 0), (), "PoissonRatio", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"YoungsModulus": (152, 2, (5, 0), (), "YoungsModulus", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Density": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"PoissonRatio": ((153, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"YoungsModulus": ((152, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IMaterialPropertyCollection(DispatchBaseClass):
	'''IMaterialPropertyCollection'''
	CLSID = IID('{FB97F4A3-BD4F-42B9-80B7-B755FDC154BD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IMaterialProperty
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IMaterialProperty
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IMeasure(DispatchBaseClass):
	'''Measure'''
	CLSID = IID('{50C894D7-EA63-455B-B693-E9AF8A66E7CB}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CalculateAngleWithThreePointsInDegrees(self, pFirstPt, pSecondPt, pThirdPt):
		'''
		Calculate angle with three points in degree
		
		:param pFirstPt: list[float]
		:param pSecondPt: list[float]
		:param pThirdPt: list[float]
		:rtype: float
		'''
		return self._oleobj_.InvokeTypes(55, LCID, 1, (5, 0), ((8197, 1), (8197, 1), (8197, 1)),pFirstPt
			, pSecondPt, pThirdPt)


	def CalculateAngleWithThreePointsInRadians(self, pFirstPt, pSecondPt, pThirdPt):
		'''
		Calculate angle with three points in radian
		
		:param pFirstPt: list[float]
		:param pSecondPt: list[float]
		:param pThirdPt: list[float]
		:rtype: float
		'''
		return self._oleobj_.InvokeTypes(56, LCID, 1, (5, 0), ((8197, 1), (8197, 1), (8197, 1)),pFirstPt
			, pSecondPt, pThirdPt)


	def CalculateCircularGeometry(self, pGeo):
		'''
		Calculate a circular geometry
		
		:param pGeo: IGeometry
		:rtype: recurdyn.ProcessNet.IMeasureCircularGeometryResult
		'''
		ret = self._oleobj_.InvokeTypes(62, LCID, 1, (9, 0), ((9, 1),),pGeo
			)
		if ret is not None:
			ret = Dispatch(ret, 'CalculateCircularGeometry', '{CE7C473B-D7DB-4232-A2F1-41C059C9E0AD}')
		return ret

	def CalculateDiplacementWithPoints(self, pFirstPt, pSecondPt, pRef):
		'''
		Calculate displacement between two points
		
		:param pFirstPt: list[float]
		:param pSecondPt: list[float]
		:param pRef: IReferenceFrame
		:rtype: list[float]
		'''
		return self._ApplyTypes_(52, 1, (8197, 0), ((8197, 1), (8197, 1), (9, 1)), 'CalculateDiplacementWithPoints', None,pFirstPt
			, pSecondPt, pRef)


	def CalculateDistanceWithGeometries(self, pGeoFirst, pGeoSecond):
		'''
		Calculate distance between two geometries
		
		:param pGeoFirst: IGeometry
		:param pGeoSecond: IGeometry
		:rtype: float
		'''
		return self._oleobj_.InvokeTypes(53, LCID, 1, (5, 0), ((9, 1), (9, 1)),pGeoFirst
			, pGeoSecond)


	def CalculateDistanceWithGeometriesEx(self, pGeoFirst, pGeoSecond, pRef):
		'''
		Calculate distance between two geometries with a reference frame.
		
		:param pGeoFirst: IGeometry
		:param pGeoSecond: IGeometry
		:param pRef: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IMeasureDistanceResult
		'''
		ret = self._oleobj_.InvokeTypes(60, LCID, 1, (9, 0), ((9, 1), (9, 1), (9, 1)),pGeoFirst
			, pGeoSecond, pRef)
		if ret is not None:
			ret = Dispatch(ret, 'CalculateDistanceWithGeometriesEx', '{BE0FEA7A-B50D-48D9-A803-A198B40539A5}')
		return ret

	def CalculateDistanceWithPoints(self, pFirstPt, pSecondPt):
		'''
		Calculate distance between two points
		
		:param pFirstPt: list[float]
		:param pSecondPt: list[float]
		:rtype: float
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (5, 0), ((8197, 1), (8197, 1)),pFirstPt
			, pSecondPt)


	def CalculateDistanceWithPointsEx(self, pFirstPt, pSecondPt, pRef):
		'''
		Calculate distance between two points
		
		:param pFirstPt: list[float]
		:param pSecondPt: list[float]
		:param pRef: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IMeasureDistanceResult
		'''
		ret = self._oleobj_.InvokeTypes(67, LCID, 1, (9, 0), ((8197, 1), (8197, 1), (9, 1)),pFirstPt
			, pSecondPt, pRef)
		if ret is not None:
			ret = Dispatch(ret, 'CalculateDistanceWithPointsEx', '{BE0FEA7A-B50D-48D9-A803-A198B40539A5}')
		return ret

	def CalculateInterference(self, pGeoFirst, pGeoSecond):
		'''
		Calculate interference
		
		:param pGeoFirst: IGeometry
		:param pGeoSecond: IGeometry
		:rtype: recurdyn.ProcessNet.InterferenceType
		'''
		return self._oleobj_.InvokeTypes(61, LCID, 1, (3, 0), ((9, 1), (9, 1)),pGeoFirst
			, pGeoSecond)


	def CalculateMass(self, bodyArray):
		'''
		Calculate the mass of bodies with a mass center
		
		:param bodyArray: list[object]
		:rtype: recurdyn.ProcessNet.IMassProperty
		'''
		_bodyArray_type = True if bodyArray and isinstance(bodyArray[0], win32com.client.VARIANT) else False
		if not _bodyArray_type:
			bodyArray = [win32com.client.VARIANT(12, _data) for _data in bodyArray]

		ret = self._oleobj_.InvokeTypes(58, LCID, 1, (9, 0), ((8204, 1),),bodyArray
			)

		if not _bodyArray_type:
			bodyArray = [_data.value for _data in bodyArray]

		if ret is not None:
			ret = Dispatch(ret, 'CalculateMass', '{931EE5BD-3011-4120-AC01-FC90D67BF3C0}')
		return ret

	def CalculateMassWithBodyPrincipalAxis(self, bodyArray):
		'''
		Calculate the mass of bodies with using body's principal axis
		
		:param bodyArray: list[object]
		:rtype: recurdyn.ProcessNet.IMassProperty
		'''
		_bodyArray_type = True if bodyArray and isinstance(bodyArray[0], win32com.client.VARIANT) else False
		if not _bodyArray_type:
			bodyArray = [win32com.client.VARIANT(12, _data) for _data in bodyArray]

		ret = self._oleobj_.InvokeTypes(68, LCID, 1, (9, 0), ((8204, 1),),bodyArray
			)

		if not _bodyArray_type:
			bodyArray = [_data.value for _data in bodyArray]

		if ret is not None:
			ret = Dispatch(ret, 'CalculateMassWithBodyPrincipalAxis', '{931EE5BD-3011-4120-AC01-FC90D67BF3C0}')
		return ret

	def CalculateMassWithMarker(self, bodyArray, pVal):
		'''
		Calculate the mass of bodies with a marker
		
		:param bodyArray: list[object]
		:param pVal: IMarker
		:rtype: recurdyn.ProcessNet.IMassProperty
		'''
		_bodyArray_type = True if bodyArray and isinstance(bodyArray[0], win32com.client.VARIANT) else False
		if not _bodyArray_type:
			bodyArray = [win32com.client.VARIANT(12, _data) for _data in bodyArray]

		ret = self._oleobj_.InvokeTypes(59, LCID, 1, (9, 0), ((8204, 1), (9, 1)),bodyArray
			, pVal)

		if not _bodyArray_type:
			bodyArray = [_data.value for _data in bodyArray]

		if ret is not None:
			ret = Dispatch(ret, 'CalculateMassWithMarker', '{931EE5BD-3011-4120-AC01-FC90D67BF3C0}')
		return ret

	def CalculateRadiusWithGeometry(self, pGeo):
		'''
		Calculate the radius of a geometry
		
		:param pGeo: IGeometry
		:rtype: float
		'''
		return self._oleobj_.InvokeTypes(57, LCID, 1, (5, 0), ((9, 1),),pGeo
			)


	def GetIntersectionPoints(self, pGeoFirst, pGeoSecond):
		'''
		Get intersection points of geometries
		
		:param pGeoFirst: IGeneric
		:param pGeoSecond: IGeneric
		:rtype: list[object]
		'''
		return self._ApplyTypes_(66, 1, (8204, 0), ((9, 1), (9, 1)), 'GetIntersectionPoints', None,pGeoFirst
			, pGeoSecond)


	def GetNDivisionNormals(self, pGeo, Val):
		'''
		Get n division points' normals of geometries
		
		:param pGeo: IGeometry
		:param Val: int
		:rtype: list[object]
		'''
		return self._ApplyTypes_(65, 1, (8204, 0), ((9, 1), (19, 1)), 'GetNDivisionNormals', None,pGeo
			, Val)


	def GetNDivisionPoints(self, pGeo, Val):
		'''
		Get n division points of geometries
		
		:param pGeo: IGeometry
		:param Val: int
		:rtype: list[object]
		'''
		return self._ApplyTypes_(63, 1, (8204, 0), ((9, 1), (19, 1)), 'GetNDivisionPoints', None,pGeo
			, Val)


	def GetNDivisionTangents(self, pGeo, Val):
		'''
		Get n division points' tangents of geometries
		
		:param pGeo: IGeometry
		:param Val: int
		:rtype: list[object]
		'''
		return self._ApplyTypes_(64, 1, (8204, 0), ((9, 1), (19, 1)), 'GetNDivisionTangents', None,pGeo
			, Val)


	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IMeasureCircularGeometryResult(DispatchBaseClass):
	'''Measure circular geomeray result'''
	CLSID = IID('{CE7C473B-D7DB-4232-A2F1-41C059C9E0AD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_ArcLength(self):
		return self._ApplyTypes_(*(103, 2, (5, 0), (), "ArcLength", None))
	def _get_CenterPoint(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "CenterPoint", '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}'))
	def _get_Radius(self):
		return self._ApplyTypes_(*(101, 2, (5, 0), (), "Radius", None))

	ArcLength = property(_get_ArcLength, None)
	'''
	Arc length

	:type: float
	'''
	CenterPoint = property(_get_CenterPoint, None)
	'''
	Center point

	:type: recurdyn.ProcessNet.IPoint3D
	'''
	Radius = property(_get_Radius, None)
	'''
	Radius

	:type: float
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"ArcLength": (103, 2, (5, 0), (), "ArcLength", None),
		"CenterPoint": (102, 2, (9, 0), (), "CenterPoint", '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}'),
		"Radius": (101, 2, (5, 0), (), "Radius", None),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IMeasureDistanceResult(DispatchBaseClass):
	'''Measure distance result'''
	CLSID = IID('{BE0FEA7A-B50D-48D9-A803-A198B40539A5}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Displacement(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "Displacement", '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}'))
	def _get_Distance(self):
		return self._ApplyTypes_(*(102, 2, (5, 0), (), "Distance", None))
	def _get_FirstPoint(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "FirstPoint", '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}'))
	def _get_MidPoint(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "MidPoint", '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}'))
	def _get_SecondPoint(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "SecondPoint", '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}'))

	Displacement = property(_get_Displacement, None)
	'''
	Displacement

	:type: recurdyn.ProcessNet.IPoint3D
	'''
	Distance = property(_get_Distance, None)
	'''
	Distance

	:type: float
	'''
	FirstPoint = property(_get_FirstPoint, None)
	'''
	First point

	:type: recurdyn.ProcessNet.IPoint3D
	'''
	MidPoint = property(_get_MidPoint, None)
	'''
	Mid point

	:type: recurdyn.ProcessNet.IPoint3D
	'''
	SecondPoint = property(_get_SecondPoint, None)
	'''
	Second point

	:type: recurdyn.ProcessNet.IPoint3D
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Displacement": (101, 2, (9, 0), (), "Displacement", '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}'),
		"Distance": (102, 2, (5, 0), (), "Distance", None),
		"FirstPoint": (103, 2, (9, 0), (), "FirstPoint", '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}'),
		"MidPoint": (105, 2, (9, 0), (), "MidPoint", '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}'),
		"SecondPoint": (104, 2, (9, 0), (), "SecondPoint", '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IMenuControl(DispatchBaseClass):
	'''Control for Menu'''
	CLSID = IID('{B2F1CBE0-707D-4E0B-B080-546D4664CA2F}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddMenuControl(self, Type, nId):
		'''
		Create MenuControl and add to MenuControl
		
		:param Type: MenuControlType
		:param nId: int
		:rtype: recurdyn.ProcessNet.IMenuControl
		'''
		ret = self._oleobj_.InvokeTypes(52, LCID, 1, (9, 0), ((3, 1), (3, 1)),Type
			, nId)
		if ret is not None:
			ret = Dispatch(ret, 'AddMenuControl', '{B2F1CBE0-707D-4E0B-B080-546D4664CA2F}')
		return ret

	def SetIcon(self):
		'''
		Set Icon
		
		:rtype: void
		'''
		return self._oleobj_.InvokeTypes(56, LCID, 1, (24, 0), ((16408, 1),),pythoncom.Missing
			)


	def SetIconFromFile(self, pVal, nX, nY):
		'''
		Set Icon from File(*.ico)
		
		:param pVal: str
		:param nX: int
		:param nY: int
		'''
		return self._oleobj_.InvokeTypes(64, LCID, 1, (24, 0), ((8, 1), (3, 1), (3, 1)),pVal
			, nX, nY)


	def SetVisible(self, Val):
		'''
		Show/Hide
		
		:param Val: bool
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (24, 0), ((11, 1),),Val
			)


	def _get_Caption(self):
		return self._ApplyTypes_(*(53, 2, (8, 0), (), "Caption", None))
	def _get_Description(self):
		return self._ApplyTypes_(*(60, 2, (8, 0), (), "Description", None))
	def _get_ID(self):
		return self._ApplyTypes_(*(54, 2, (19, 0), (), "ID", None))
	def _get_ProcessNetDllPath(self):
		return self._ApplyTypes_(*(58, 2, (8, 0), (), "ProcessNetDllPath", None))
	def _get_ProcessNetFunctionName(self):
		return self._ApplyTypes_(*(59, 2, (8, 0), (), "ProcessNetFunctionName", None))
	def _get_ProcessNetScriptPath(self):
		return self._ApplyTypes_(*(63, 2, (8, 0), (), "ProcessNetScriptPath", None))
	def _get_ProcessNetType(self):
		return self._ApplyTypes_(*(62, 2, (3, 0), (), "ProcessNetType", '{3FBEE825-C5E1-4629-B3E2-3548E2C0CE7D}'))
	def _get_Tooltip(self):
		return self._ApplyTypes_(*(61, 2, (8, 0), (), "Tooltip", None))
	def _get_UseBigIcon(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseBigIcon", None))
	def _get_UseProcessNetFunction(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseProcessNetFunction", None))

	def _set_Caption(self, value):
		if "Caption" in self.__dict__: self.__dict__["Caption"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_Description(self, value):
		if "Description" in self.__dict__: self.__dict__["Description"] = value; return
		self._oleobj_.Invoke(*((60, LCID, 4, 0) + (value,) + ()))
	def _set_ID(self, value):
		if "ID" in self.__dict__: self.__dict__["ID"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_ProcessNetDllPath(self, value):
		if "ProcessNetDllPath" in self.__dict__: self.__dict__["ProcessNetDllPath"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))
	def _set_ProcessNetFunctionName(self, value):
		if "ProcessNetFunctionName" in self.__dict__: self.__dict__["ProcessNetFunctionName"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))
	def _set_ProcessNetScriptPath(self, value):
		if "ProcessNetScriptPath" in self.__dict__: self.__dict__["ProcessNetScriptPath"] = value; return
		self._oleobj_.Invoke(*((63, LCID, 4, 0) + (value,) + ()))
	def _set_ProcessNetType(self, value):
		if "ProcessNetType" in self.__dict__: self.__dict__["ProcessNetType"] = value; return
		self._oleobj_.Invoke(*((62, LCID, 4, 0) + (value,) + ()))
	def _set_Tooltip(self, value):
		if "Tooltip" in self.__dict__: self.__dict__["Tooltip"] = value; return
		self._oleobj_.Invoke(*((61, LCID, 4, 0) + (value,) + ()))
	def _set_UseBigIcon(self, value):
		if "UseBigIcon" in self.__dict__: self.__dict__["UseBigIcon"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseProcessNetFunction(self, value):
		if "UseProcessNetFunction" in self.__dict__: self.__dict__["UseProcessNetFunction"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))

	Caption = property(_get_Caption, _set_Caption)
	'''
	Caption of Current MenuControl

	:type: str
	'''
	Description = property(_get_Description, _set_Description)
	'''
	Description of Current MenuControl

	:type: str
	'''
	ID = property(_get_ID, _set_ID)
	'''
	ID of Current MenuControl

	:type: int
	'''
	ProcessNetDllPath = property(_get_ProcessNetDllPath, _set_ProcessNetDllPath)
	'''
	Full path of ProcessNet Dll

	:type: str
	'''
	ProcessNetFunctionName = property(_get_ProcessNetFunctionName, _set_ProcessNetFunctionName)
	'''
	Function name of ProcessNet

	:type: str
	'''
	ProcessNetScriptPath = property(_get_ProcessNetScriptPath, _set_ProcessNetScriptPath)
	'''
	Full path of ProcessNet Script

	:type: str
	'''
	ProcessNetType = property(_get_ProcessNetType, _set_ProcessNetType)
	'''
	ProcessNet Type

	:type: recurdyn.ProcessNet.ProcessNetType
	'''
	Tooltip = property(_get_Tooltip, _set_Tooltip)
	'''
	Tooltip of Current MenuControl

	:type: str
	'''
	UseBigIcon = property(_get_UseBigIcon, _set_UseBigIcon)
	'''
	Use Big Icon

	:type: bool
	'''
	UseProcessNetFunction = property(_get_UseProcessNetFunction, _set_UseProcessNetFunction)
	'''
	Link ProcessNet Function to current MenuControl

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Caption": _set_Caption,
		"_set_Description": _set_Description,
		"_set_ID": _set_ID,
		"_set_ProcessNetDllPath": _set_ProcessNetDllPath,
		"_set_ProcessNetFunctionName": _set_ProcessNetFunctionName,
		"_set_ProcessNetScriptPath": _set_ProcessNetScriptPath,
		"_set_ProcessNetType": _set_ProcessNetType,
		"_set_Tooltip": _set_Tooltip,
		"_set_UseBigIcon": _set_UseBigIcon,
		"_set_UseProcessNetFunction": _set_UseProcessNetFunction,
	}
	_prop_map_get_ = {
		"Caption": (53, 2, (8, 0), (), "Caption", None),
		"Description": (60, 2, (8, 0), (), "Description", None),
		"ID": (54, 2, (19, 0), (), "ID", None),
		"ProcessNetDllPath": (58, 2, (8, 0), (), "ProcessNetDllPath", None),
		"ProcessNetFunctionName": (59, 2, (8, 0), (), "ProcessNetFunctionName", None),
		"ProcessNetScriptPath": (63, 2, (8, 0), (), "ProcessNetScriptPath", None),
		"ProcessNetType": (62, 2, (3, 0), (), "ProcessNetType", '{3FBEE825-C5E1-4629-B3E2-3548E2C0CE7D}'),
		"Tooltip": (61, 2, (8, 0), (), "Tooltip", None),
		"UseBigIcon": (55, 2, (11, 0), (), "UseBigIcon", None),
		"UseProcessNetFunction": (57, 2, (11, 0), (), "UseProcessNetFunction", None),
	}
	_prop_map_put_ = {
		"Caption": ((53, LCID, 4, 0),()),
		"Description": ((60, LCID, 4, 0),()),
		"ID": ((54, LCID, 4, 0),()),
		"ProcessNetDllPath": ((58, LCID, 4, 0),()),
		"ProcessNetFunctionName": ((59, LCID, 4, 0),()),
		"ProcessNetScriptPath": ((63, LCID, 4, 0),()),
		"ProcessNetType": ((62, LCID, 4, 0),()),
		"Tooltip": ((61, LCID, 4, 0),()),
		"UseBigIcon": ((55, LCID, 4, 0),()),
		"UseProcessNetFunction": ((57, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IMessageFileSettings(DispatchBaseClass):
	'''Message file settings'''
	CLSID = IID('{4E11EE8B-B596-40F8-8F43-1D1C22B3E1F1}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AnalysisInformation(self):
		return self._ApplyTypes_(*(154, 2, (11, 0), (), "AnalysisInformation", None))
	def _get_AnalysisProcess(self):
		return self._ApplyTypes_(*(160, 2, (11, 0), (), "AnalysisProcess", None))
	def _get_ConstraintInformation(self):
		return self._ApplyTypes_(*(155, 2, (11, 0), (), "ConstraintInformation", None))
	def _get_ConstraintViolation(self):
		return self._ApplyTypes_(*(158, 2, (11, 0), (), "ConstraintViolation", None))
	def _get_IndependentCoordinate(self):
		return self._ApplyTypes_(*(159, 2, (11, 0), (), "IndependentCoordinate", None))
	def _get_IntegratorInformation(self):
		return self._ApplyTypes_(*(156, 2, (11, 0), (), "IntegratorInformation", None))
	def _get_JointInformation(self):
		return self._ApplyTypes_(*(153, 2, (11, 0), (), "JointInformation", None))
	def _get_ModelVerification(self):
		return self._ApplyTypes_(*(151, 2, (11, 0), (), "ModelVerification", None))
	def _get_RedundantConstraint(self):
		return self._ApplyTypes_(*(157, 2, (11, 0), (), "RedundantConstraint", None))
	def _get_SolverInformation(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "SolverInformation", None))

	def _set_AnalysisInformation(self, value):
		if "AnalysisInformation" in self.__dict__: self.__dict__["AnalysisInformation"] = value; return
		self._oleobj_.Invoke(*((154, LCID, 4, 0) + (value,) + ()))
	def _set_AnalysisProcess(self, value):
		if "AnalysisProcess" in self.__dict__: self.__dict__["AnalysisProcess"] = value; return
		self._oleobj_.Invoke(*((160, LCID, 4, 0) + (value,) + ()))
	def _set_ConstraintInformation(self, value):
		if "ConstraintInformation" in self.__dict__: self.__dict__["ConstraintInformation"] = value; return
		self._oleobj_.Invoke(*((155, LCID, 4, 0) + (value,) + ()))
	def _set_ConstraintViolation(self, value):
		if "ConstraintViolation" in self.__dict__: self.__dict__["ConstraintViolation"] = value; return
		self._oleobj_.Invoke(*((158, LCID, 4, 0) + (value,) + ()))
	def _set_IndependentCoordinate(self, value):
		if "IndependentCoordinate" in self.__dict__: self.__dict__["IndependentCoordinate"] = value; return
		self._oleobj_.Invoke(*((159, LCID, 4, 0) + (value,) + ()))
	def _set_IntegratorInformation(self, value):
		if "IntegratorInformation" in self.__dict__: self.__dict__["IntegratorInformation"] = value; return
		self._oleobj_.Invoke(*((156, LCID, 4, 0) + (value,) + ()))
	def _set_JointInformation(self, value):
		if "JointInformation" in self.__dict__: self.__dict__["JointInformation"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))
	def _set_ModelVerification(self, value):
		if "ModelVerification" in self.__dict__: self.__dict__["ModelVerification"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_RedundantConstraint(self, value):
		if "RedundantConstraint" in self.__dict__: self.__dict__["RedundantConstraint"] = value; return
		self._oleobj_.Invoke(*((157, LCID, 4, 0) + (value,) + ()))
	def _set_SolverInformation(self, value):
		if "SolverInformation" in self.__dict__: self.__dict__["SolverInformation"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))

	AnalysisInformation = property(_get_AnalysisInformation, _set_AnalysisInformation)
	'''
	Use analysis informatin

	:type: bool
	'''
	AnalysisProcess = property(_get_AnalysisProcess, _set_AnalysisProcess)
	'''
	Use analysis process

	:type: bool
	'''
	ConstraintInformation = property(_get_ConstraintInformation, _set_ConstraintInformation)
	'''
	Use contraint informatin

	:type: bool
	'''
	ConstraintViolation = property(_get_ConstraintViolation, _set_ConstraintViolation)
	'''
	Use constraint violation

	:type: bool
	'''
	IndependentCoordinate = property(_get_IndependentCoordinate, _set_IndependentCoordinate)
	'''
	Use independent coordinate

	:type: bool
	'''
	IntegratorInformation = property(_get_IntegratorInformation, _set_IntegratorInformation)
	'''
	Use integrator informatin

	:type: bool
	'''
	JointInformation = property(_get_JointInformation, _set_JointInformation)
	'''
	Use joint informatin

	:type: bool
	'''
	ModelVerification = property(_get_ModelVerification, _set_ModelVerification)
	'''
	Use model verification

	:type: bool
	'''
	RedundantConstraint = property(_get_RedundantConstraint, _set_RedundantConstraint)
	'''
	Use redundant Constraint

	:type: bool
	'''
	SolverInformation = property(_get_SolverInformation, _set_SolverInformation)
	'''
	Use solver informatin

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_AnalysisInformation": _set_AnalysisInformation,
		"_set_AnalysisProcess": _set_AnalysisProcess,
		"_set_ConstraintInformation": _set_ConstraintInformation,
		"_set_ConstraintViolation": _set_ConstraintViolation,
		"_set_IndependentCoordinate": _set_IndependentCoordinate,
		"_set_IntegratorInformation": _set_IntegratorInformation,
		"_set_JointInformation": _set_JointInformation,
		"_set_ModelVerification": _set_ModelVerification,
		"_set_RedundantConstraint": _set_RedundantConstraint,
		"_set_SolverInformation": _set_SolverInformation,
	}
	_prop_map_get_ = {
		"AnalysisInformation": (154, 2, (11, 0), (), "AnalysisInformation", None),
		"AnalysisProcess": (160, 2, (11, 0), (), "AnalysisProcess", None),
		"ConstraintInformation": (155, 2, (11, 0), (), "ConstraintInformation", None),
		"ConstraintViolation": (158, 2, (11, 0), (), "ConstraintViolation", None),
		"IndependentCoordinate": (159, 2, (11, 0), (), "IndependentCoordinate", None),
		"IntegratorInformation": (156, 2, (11, 0), (), "IntegratorInformation", None),
		"JointInformation": (153, 2, (11, 0), (), "JointInformation", None),
		"ModelVerification": (151, 2, (11, 0), (), "ModelVerification", None),
		"RedundantConstraint": (157, 2, (11, 0), (), "RedundantConstraint", None),
		"SolverInformation": (152, 2, (11, 0), (), "SolverInformation", None),
	}
	_prop_map_put_ = {
		"AnalysisInformation": ((154, LCID, 4, 0),()),
		"AnalysisProcess": ((160, LCID, 4, 0),()),
		"ConstraintInformation": ((155, LCID, 4, 0),()),
		"ConstraintViolation": ((158, LCID, 4, 0),()),
		"IndependentCoordinate": ((159, LCID, 4, 0),()),
		"IntegratorInformation": ((156, LCID, 4, 0),()),
		"JointInformation": ((153, LCID, 4, 0),()),
		"ModelVerification": ((151, LCID, 4, 0),()),
		"RedundantConstraint": ((157, LCID, 4, 0),()),
		"SolverInformation": ((152, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IModelDocument(DispatchBaseClass):
	'''Model document'''
	CLSID = IID('{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Activate(self):
		'''
		Activate method
		'''
		return self._oleobj_.InvokeTypes(74, LCID, 1, (24, 0), (),)


	def Analysis(self, AnalysisMode):
		'''
		Analysis method
		
		:param AnalysisMode: AnalysisMode
		'''
		return self._oleobj_.InvokeTypes(56, LCID, 1, (24, 0), ((3, 1),),AnalysisMode
			)


	def AnalysisPause(self):
		'''
		Pause Analysis, this function can be used in the Windows Forms
		'''
		return self._oleobj_.InvokeTypes(97, LCID, 1, (24, 0), (),)


	def AnalysisResume(self):
		'''
		Resume Analysis, this function can be used in the Windows Forms
		'''
		return self._oleobj_.InvokeTypes(98, LCID, 1, (24, 0), (),)


	def AnalysisStart(self, AnalysisMode):
		'''
		Start Analysis, this function can be used in the Windows Forms
		
		:param AnalysisMode: AnalysisMode
		'''
		return self._oleobj_.InvokeTypes(100, LCID, 1, (24, 0), ((3, 1),),AnalysisMode
			)


	def AnalysisStop(self):
		'''
		Stop Analysis, this function can be used in the Windows Forms
		'''
		return self._oleobj_.InvokeTypes(99, LCID, 1, (24, 0), (),)


	def ChangeDataStorage(self, ppResult):
		'''
		Change data storage
		
		:param ppResult: IGeneric
		'''
		return self._oleobj_.InvokeTypes(79, LCID, 1, (24, 0), ((9, 1),),ppResult
			)


	def ChangeWorkingPlane(self, WorkingPlaneType):
		'''
		Change working plane
		
		:param WorkingPlaneType: WorkingPlaneType
		'''
		return self._oleobj_.InvokeTypes(59, LCID, 1, (24, 0), ((3, 1),),WorkingPlaneType
			)


	def ChangeWorkingPlane2(self, WorkingPlaneType):
		'''
		Change working plane
		
		:param WorkingPlaneType: WorkingPlaneType2
		'''
		return self._oleobj_.InvokeTypes(126, LCID, 1, (24, 0), ((3, 1),),WorkingPlaneType
			)


	def ClearUndoHistory(self):
		'''
		Clear undo history, internal use only
		'''
		return self._oleobj_.InvokeTypes(80, LCID, 1, (24, 0), (),)


	def CloseAllDialog(self):
		'''
		Close all dialog
		'''
		return self._oleobj_.InvokeTypes(83, LCID, 1, (24, 0), (),)


	def CloseDialog(self, ppResult, closeType):
		'''
		Close dialog
		
		:param ppResult: IGeneric
		:param closeType: CloseDialogType
		'''
		return self._oleobj_.InvokeTypes(82, LCID, 1, (24, 0), ((9, 1), (3, 1)),ppResult
			, closeType)


	def Copy(self):
		'''
		Copy entity, similar to Ctrl-C in GUI
		'''
		return self._oleobj_.InvokeTypes(67, LCID, 1, (24, 0), (),)


	def CreateMaterialProperty(self, strName, dDensity, dYoungsModulus, dPoissonRatio):
		'''
		Creates a material property
		
		:param strName: str
		:param dDensity: float
		:param dYoungsModulus: float
		:param dPoissonRatio: float
		:rtype: recurdyn.ProcessNet.IMaterialProperty
		'''
		ret = self._oleobj_.InvokeTypes(95, LCID, 1, (9, 0), ((8, 1), (5, 1), (5, 1), (5, 1)),strName
			, dDensity, dYoungsModulus, dPoissonRatio)
		if ret is not None:
			ret = Dispatch(ret, 'CreateMaterialProperty', '{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}')
		return ret

	def CreatePlotDocument(self, PlotDocType):
		'''
		Creates a plot document
		
		:param PlotDocType: PlotDocType
		:rtype: recurdyn.ProcessNet.IPlotDocument
		'''
		ret = self._oleobj_.InvokeTypes(64, LCID, 1, (9, 0), ((3, 1),),PlotDocType
			)
		if ret is not None:
			ret = Dispatch(ret, 'CreatePlotDocument', '{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}')
		return ret

	def CreateReferenceFrame(self):
		'''
		Creates a reference frame
		
		:rtype: recurdyn.ProcessNet.IReferenceFrame
		'''
		ret = self._oleobj_.InvokeTypes(72, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'CreateReferenceFrame', '{6A3295D9-E76B-473C-9655-23B7B1CBD671}')
		return ret

	def Cut(self):
		'''
		Cut entity, similar to Ctrl-X in GUI
		'''
		return self._oleobj_.InvokeTypes(71, LCID, 1, (24, 0), (),)


	def Delete(self):
		'''
		Delete selected entity by Select() method
		'''
		return self._oleobj_.InvokeTypes(68, LCID, 1, (24, 0), (),)


	def DeleteEntity(self, pVal):
		'''
		Delete entity in current model document
		
		:param pVal: IGeneric
		'''
		return self._oleobj_.InvokeTypes(92, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def DeselectAll(self):
		'''
		Deselect All
		'''
		return self._oleobj_.InvokeTypes(69, LCID, 1, (24, 0), (),)


	def DesignStudyAnalysis(self):
		'''
		Design study analysis
		'''
		return self._oleobj_.InvokeTypes(108, LCID, 1, (24, 0), (),)


	def ExportContourData(self, path, dataType, exportType, objectIndices):
		'''
		Export Contour Data
		
		:param path: str
		:param dataType: int
		:param exportType: int
		:param objectIndices: list[int]
		'''
		return self._oleobj_.InvokeTypes(141, LCID, 1, (24, 0), ((8, 1), (3, 1), (3, 1), (8195, 1)),path
			, dataType, exportType, objectIndices)


	def ExportPararameterTemplate(self, strFile, OverWrite):
		'''
		Export Pararameter Template
		
		:param strFile: str
		:param OverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(131, LCID, 1, (24, 0), ((8, 1), (11, 1)),strFile
			, OverWrite)


	def FileExport(self, strFile, OverWrite):
		'''
		Export file
		
		:param strFile: str
		:param OverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(62, LCID, 1, (24, 0), ((8, 1), (11, 1)),strFile
			, OverWrite)


	def FileExtract(self, strFile, AnimationFrame):
		'''
		Extract file at given animation frame
		
		:param strFile: str
		:param AnimationFrame: int
		'''
		return self._oleobj_.InvokeTypes(106, LCID, 1, (24, 0), ((8, 1), (19, 1)),strFile
			, AnimationFrame)


	def FileImport(self, strFile):
		'''
		Import file
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(58, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def FileImportWithCADSetting(self, strFile):
		'''
		Import file using assembly hierarchy
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(136, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def FileSave(self, strFile, OverWrite):
		'''
		Save file
		
		:param strFile: str
		:param OverWrite: bool
		:rtype: bool
		'''
		return self._oleobj_.InvokeTypes(57, LCID, 1, (11, 0), ((8, 1), (11, 1)),strFile
			, OverWrite)


	def Fit(self):
		'''
		Fit method
		'''
		return self._oleobj_.InvokeTypes(84, LCID, 1, (24, 0), (),)


	def GetDataStorage(self):
		'''
		Get datastorage
		
		:rtype: recurdyn.ProcessNet.IGeneric
		'''
		ret = self._oleobj_.InvokeTypes(53, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'GetDataStorage', '{27A86788-8B85-40CF-BE7F-BA915103A7DB}')
		return ret

	def GetEntity(self, strName, pDataStorage):
		'''
		Get an entity
		
		:param strName: str
		:param pDataStorage: IGeneric
		:rtype: recurdyn.ProcessNet.IGeneric
		'''
		ret = self._oleobj_.InvokeTypes(52, LCID, 1, (9, 0), ((8, 1), (9, 1)),strName
			, pDataStorage)
		if ret is not None:
			ret = Dispatch(ret, 'GetEntity', '{27A86788-8B85-40CF-BE7F-BA915103A7DB}')
		return ret

	def GetEntityFromFullName(self, strFullName):
		'''
		Get entity from entity's full name
		
		:param strFullName: str
		:rtype: recurdyn.ProcessNet.IGeneric
		'''
		ret = self._oleobj_.InvokeTypes(90, LCID, 1, (9, 0), ((8, 1),),strFullName
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetEntityFromFullName', '{27A86788-8B85-40CF-BE7F-BA915103A7DB}')
		return ret

	def GetPath(self, PathType):
		'''
		Get path
		
		:param PathType: PathType
		:rtype: str
		'''
		return self._oleobj_.InvokeTypes(77, LCID, 1, (8, 0), ((3, 1),),PathType
			)


	def GetPlotData(self, pDisp, strData):
		'''
		Get plot data
		
		:param pDisp: IGeneric
		:param strData: str
		:rtype: list[float]
		'''
		return self._ApplyTypes_(78, 1, (8197, 0), ((9, 1), (8, 1)), 'GetPlotData', None,pDisp
			, strData)


	def GetPlotDataTime(self):
		'''
		Get plot data time
		
		:rtype: list[float]
		'''
		return self._ApplyTypes_(123, 1, (8197, 0), (), 'GetPlotDataTime', None,)


	def GetSelectedEntities(self):
		'''
		Get selected entities
		
		:rtype: recurdyn.ProcessNet.IGenericCollection
		'''
		ret = self._oleobj_.InvokeTypes(124, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'GetSelectedEntities', '{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')
		return ret

	def ImportPararameterTemplate(self, strFile):
		'''
		Import Pararameter Template
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(130, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def OpenDialog(self, ppResult):
		'''
		Open dialog
		
		:param ppResult: IGeneric
		'''
		return self._oleobj_.InvokeTypes(81, LCID, 1, (24, 0), ((9, 1),),ppResult
			)


	def Paste(self, PasteType, strNamePrefix):
		'''
		Paste entity, similar to Ctrl-V in GUI
		
		:param PasteType: PasteType
		:param strNamePrefix: str
		'''
		return self._oleobj_.InvokeTypes(66, LCID, 1, (24, 0), ((3, 1), (8, 1)),PasteType
			, strNamePrefix)


	def PostProcess(self):
		'''
		PostProcess - internally calls UpdateDatabaseWindow() and SetModified()
		'''
		return self._oleobj_.InvokeTypes(87, LCID, 1, (24, 0), (),)


	def Redraw(self):
		'''
		Redraw method
		'''
		return self._oleobj_.InvokeTypes(54, LCID, 1, (24, 0), (),)


	def ScenarioAnalysis(self):
		'''
		Scenario Analysis
		'''
		return self._oleobj_.InvokeTypes(102, LCID, 1, (24, 0), (),)


	def ScenarioAnalysis2(self):
		'''
		Scenario analysis for IScenario2 interface
		'''
		return self._oleobj_.InvokeTypes(135, LCID, 1, (24, 0), (),)


	def Select(self, SelectType, pEntity):
		'''
		Select entity
		
		:param SelectType: SelectType
		:param pEntity: IGeneric
		'''
		return self._oleobj_.InvokeTypes(65, LCID, 1, (24, 0), ((3, 1), (9, 1)),SelectType
			, pEntity)


	def SelectAll(self):
		'''
		Select all entity
		'''
		return self._oleobj_.InvokeTypes(133, LCID, 1, (24, 0), (),)


	def SelectEntityUsingGUI(self, Type):
		'''
		SelectEntityUsingGUI is obsolete. Use SelectSingleEntityUsingGUI or SelectSingleGeometryUsingGUI
		
		:param Type: EntityType
		:rtype: recurdyn.ProcessNet.IGeneric
		'''
		ret = self._oleobj_.InvokeTypes(101, LCID, 1, (9, 0), ((3, 1),),Type
			)
		if ret is not None:
			ret = Dispatch(ret, 'SelectEntityUsingGUI', '{27A86788-8B85-40CF-BE7F-BA915103A7DB}')
		return ret

	def SelectMultiComponentsUsingGUI(self, Type):
		'''
		Select multi IDs by using GUI
		
		:param Type: IDType
		:rtype: list[int]
		'''
		return self._ApplyTypes_(132, 1, (8195, 0), ((3, 1),), 'SelectMultiComponentsUsingGUI', None,Type
			)


	def SelectMultiEntitiesUsingGUI(self, Type):
		'''
		Select entities by using GUI
		
		:param Type: EntityType2
		:rtype: recurdyn.ProcessNet.IGenericCollection
		'''
		ret = self._oleobj_.InvokeTypes(125, LCID, 1, (9, 0), ((3, 1),),Type
			)
		if ret is not None:
			ret = Dispatch(ret, 'SelectMultiEntitiesUsingGUI', '{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')
		return ret

	def SelectMultiGeometriesUsingGUI(self, Type):
		'''
		Select geometries by using GUI
		
		:param Type: GeometryType
		:rtype: recurdyn.ProcessNet.IGenericCollection
		'''
		ret = self._oleobj_.InvokeTypes(117, LCID, 1, (9, 0), ((3, 1),),Type
			)
		if ret is not None:
			ret = Dispatch(ret, 'SelectMultiGeometriesUsingGUI', '{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')
		return ret

	def SelectMultiPointsUsingGUI(self):
		'''
		Select multi points by using GUI
		
		:rtype: list[object]
		'''
		return self._ApplyTypes_(120, 1, (8204, 0), (), 'SelectMultiPointsUsingGUI', None,)


	def SelectPointUsingGUI(self):
		'''
		SelectPointUsingGUI is obsolete. Use SelectSinglePointUsingGUI
		
		:rtype: recurdyn.ProcessNet.IPoint3D
		'''
		ret = self._oleobj_.InvokeTypes(109, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'SelectPointUsingGUI', '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')
		return ret

	def SelectSingleComponentUsingGUI(self, Type):
		'''
		Select a unique ID by using GUI
		
		:param Type: IDType
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(113, LCID, 1, (3, 0), ((3, 1),),Type
			)


	def SelectSingleEntityUsingGUI(self, Type):
		'''
		Select an entity by using GUI
		
		:param Type: EntityType2
		:rtype: recurdyn.ProcessNet.IGeneric
		'''
		ret = self._oleobj_.InvokeTypes(111, LCID, 1, (9, 0), ((3, 1),),Type
			)
		if ret is not None:
			ret = Dispatch(ret, 'SelectSingleEntityUsingGUI', '{27A86788-8B85-40CF-BE7F-BA915103A7DB}')
		return ret

	def SelectSingleGeometryUsingGUI(self, Type):
		'''
		Select a geometry by using GUI
		
		:param Type: GeometryType
		:rtype: recurdyn.ProcessNet.IGeneric
		'''
		ret = self._oleobj_.InvokeTypes(112, LCID, 1, (9, 0), ((3, 1),),Type
			)
		if ret is not None:
			ret = Dispatch(ret, 'SelectSingleGeometryUsingGUI', '{27A86788-8B85-40CF-BE7F-BA915103A7DB}')
		return ret

	def SelectSinglePointUsingGUI(self):
		'''
		Select single point by using GUI
		
		:rtype: list[float]
		'''
		return self._ApplyTypes_(119, 1, (8197, 0), (), 'SelectSinglePointUsingGUI', None,)


	def SetAnalysisResponseResult(self, Val):
		'''
		Set analysis response result
		
		:param Val: float
		'''
		return self._oleobj_.InvokeTypes(114, LCID, 1, (24, 0), ((5, 1),),Val
			)


	def SetModified(self):
		'''
		Set modified flag, if model contents are changed and if you close model, save dialog will appear
		'''
		return self._oleobj_.InvokeTypes(89, LCID, 1, (24, 0), (),)


	def SetOutputFileName(self, strOuput):
		'''
		Set output file name
		
		:param strOuput: str
		'''
		return self._oleobj_.InvokeTypes(70, LCID, 1, (24, 0), ((8, 1),),strOuput
			)


	def SetUndoHistory(self, pVal):
		'''
		Set undo history point
		
		:param pVal: str
		'''
		return self._oleobj_.InvokeTypes(86, LCID, 1, (24, 0), ((8, 1),),pVal
			)


	def SettingSolverPriority(self, SolverPriority):
		'''
		Setting solver priority
		
		:param SolverPriority: SolverPriority
		'''
		return self._oleobj_.InvokeTypes(61, LCID, 1, (24, 0), ((3, 1),),SolverPriority
			)


	def UpdateDatabaseWindow(self):
		'''
		Update database window, after you change name of entity, use UpdateDatabaseWindow
		'''
		return self._oleobj_.InvokeTypes(88, LCID, 1, (24, 0), (),)


	def UpdateDatabaseWindowOneEntity(self, pVal):
		'''
		Update database window for a modified entity
		
		:param pVal: IGeneric
		'''
		return self._oleobj_.InvokeTypes(116, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def UpdateView(self):
		'''
		Update the view without recreating geometries and bodies
		'''
		return self._oleobj_.InvokeTypes(142, LCID, 1, (24, 0), (),)


	def Validate(self):
		'''
		Validate data, be sure to call Validate() to verity your model has clean data
		
		:rtype: bool
		'''
		return self._oleobj_.InvokeTypes(85, LCID, 1, (11, 0), (),)


	def _get_Animation(self):
		return self._ApplyTypes_(*(96, 2, (9, 0), (), "Animation", '{5AEA7149-EE08-4B4E-B593-5AD90B54E3E6}'))
	def _get_Contour(self):
		return self._ApplyTypes_(*(138, 2, (9, 0), (), "Contour", '{E32E43FB-3356-4D36-8A51-C22DE7E397BF}'))
	def _get_CurrentLayer(self):
		return self._ApplyTypes_(*(105, 2, (19, 0), (), "CurrentLayer", None))
	def _get_FileExportOption(self):
		return self._ApplyTypes_(*(137, 2, (9, 0), (), "FileExportOption", '{3D7C1E76-2C4C-480F-9D7B-5ECC6CB9FA2D}'))
	def _get_FileImportOption(self):
		return self._ApplyTypes_(*(110, 2, (9, 0), (), "FileImportOption", '{6EA01552-F3C2-4CB5-B537-5F25196A168D}'))
	def _get_LayerFilter(self):
		return self._ApplyTypes_(*(104, 2, (3, 0), (), "LayerFilter", '{47ACF541-B58A-4216-B57C-8F50BE894A55}'))
	def _get_LayerSetting(self):
		return self._ApplyTypes_(*(115, 2, (9, 0), (), "LayerSetting", '{33584AC3-5F2D-4DD9-826E-1BA921B395D0}'))
	def _get_MaterialPropertyCollection(self):
		return self._ApplyTypes_(*(94, 2, (9, 0), (), "MaterialPropertyCollection", '{FB97F4A3-BD4F-42B9-80B7-B755FDC154BD}'))
	def _get_MessageFileSettings(self):
		return self._ApplyTypes_(*(118, 2, (9, 0), (), "MessageFileSettings", '{4E11EE8B-B596-40F8-8F43-1D1C22B3E1F1}'))
	def _get_Model(self):
		return self._ApplyTypes_(*(55, 2, (9, 0), (), "Model", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_ModelProperty(self):
		return self._ApplyTypes_(*(76, 2, (9, 0), (), "ModelProperty", '{54B0F80C-BD55-4F49-8E1A-D1D840603430}'))
	def _get_ModelSetting(self):
		return self._ApplyTypes_(*(75, 2, (9, 0), (), "ModelSetting", '{0B9DFF92-6648-4BB9-83BA-9C6443B2F2CD}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(51, 2, (8, 0), (), "Name", None))
	def _get_OutputFileName(self):
		return self._ApplyTypes_(*(121, 2, (8, 0), (), "OutputFileName", None))
	def _get_OwnerApplication(self):
		return self._ApplyTypes_(*(91, 2, (9, 0), (), "OwnerApplication", '{0E72DCBC-60DD-495E-B067-85BA9DDC18BB}'))
	def _get_PostAnalysis(self):
		return self._ApplyTypes_(*(140, 2, (9, 0), (), "PostAnalysis", '{0FCAD09C-F67B-415A-BDB7-472A2AC90A59}'))
	def _get_RDDevelopement(self):
		return self._ApplyTypes_(*(107, 2, (9, 0), (), "RDDevelopement", '{C65A8D10-195A-4939-8359-D7DEC09DC500}'))
	def _get_RDDevelopementExternal(self):
		return self._ApplyTypes_(*(139, 2, (9, 0), (), "RDDevelopementExternal", '{C65A8D10-195A-4939-8359-D7DEC09DC500}'))
	def _get_Unit(self):
		return self._ApplyTypes_(*(93, 2, (9, 0), (), "Unit", '{09A65909-6FBB-488A-9726-D320F5666395}'))
	def _get_UseAutoUpdateMaterialProperty(self):
		return self._ApplyTypes_(*(134, 2, (11, 0), (), "UseAutoUpdateMaterialProperty", None))
	def _get_UseOutputFileName(self):
		return self._ApplyTypes_(*(122, 2, (11, 0), (), "UseOutputFileName", None))
	def _get_Utility(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "Utility", '{512577A8-E193-4449-8C6B-A2D59EDBFCF0}'))
	def _get_WorkingPlane(self):
		return self._ApplyTypes_(*(63, 2, (9, 0), (), "WorkingPlane", '{7EE8FD42-208D-4F80-B89A-297D54D686DA}'))

	def _set_CurrentLayer(self, value):
		if "CurrentLayer" in self.__dict__: self.__dict__["CurrentLayer"] = value; return
		self._oleobj_.Invoke(*((105, LCID, 4, 0) + (value,) + ()))
	def _set_LayerFilter(self, value):
		if "LayerFilter" in self.__dict__: self.__dict__["LayerFilter"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_OutputFileName(self, value):
		if "OutputFileName" in self.__dict__: self.__dict__["OutputFileName"] = value; return
		self._oleobj_.Invoke(*((121, LCID, 4, 0) + (value,) + ()))
	def _set_UseAutoUpdateMaterialProperty(self, value):
		if "UseAutoUpdateMaterialProperty" in self.__dict__: self.__dict__["UseAutoUpdateMaterialProperty"] = value; return
		self._oleobj_.Invoke(*((134, LCID, 4, 0) + (value,) + ()))
	def _set_UseOutputFileName(self, value):
		if "UseOutputFileName" in self.__dict__: self.__dict__["UseOutputFileName"] = value; return
		self._oleobj_.Invoke(*((122, LCID, 4, 0) + (value,) + ()))

	Animation = property(_get_Animation, None)
	Contour = property(_get_Contour, None)
	CurrentLayer = property(_get_CurrentLayer, _set_CurrentLayer)
	'''
	This is an obsolete property. use layer proerpty 

	:type: int
	'''
	FileExportOption = property(_get_FileExportOption, None)
	'''
	Get file export option

	:type: recurdyn.ProcessNet.IFileExportOption
	'''
	FileImportOption = property(_get_FileImportOption, None)
	'''
	Get file import option

	:type: recurdyn.ProcessNet.IFileImportOption
	'''
	LayerFilter = property(_get_LayerFilter, _set_LayerFilter)
	'''
	This is an obsolete property. use layer proerpty

	:type: recurdyn.ProcessNet.LayerFilterType
	'''
	LayerSetting = property(_get_LayerSetting, None)
	MaterialPropertyCollection = property(_get_MaterialPropertyCollection, None)
	MessageFileSettings = property(_get_MessageFileSettings, None)
	'''
	Message file settings

	:type: recurdyn.ProcessNet.IMessageFileSettings
	'''
	Model = property(_get_Model, None)
	'''
	Model

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	ModelProperty = property(_get_ModelProperty, None)
	'''
	Model property

	:type: recurdyn.ProcessNet.IModelProperty
	'''
	ModelSetting = property(_get_ModelSetting, None)
	'''
	Model setting

	:type: recurdyn.ProcessNet.IModelSetting
	'''
	Name = property(_get_Name, None)
	'''
	Name

	:type: str
	'''
	OutputFileName = property(_get_OutputFileName, _set_OutputFileName)
	'''
	Set output file name

	:type: str
	'''
	OwnerApplication = property(_get_OwnerApplication, None)
	'''
	Owner Application

	:type: recurdyn.ProcessNet.IApplication
	'''
	PostAnalysis = property(_get_PostAnalysis, None)
	'''
	Post Analysis

	:type: recurdyn.ProcessNet.IPostAnalysis
	'''
	RDDevelopement = property(_get_RDDevelopement, None)
	'''
	Interface for Developement

	:type: recurdyn.ProcessNet.IDevelopement
	'''
	RDDevelopementExternal = property(_get_RDDevelopementExternal, None)
	'''
	Interface for Developement

	:type: recurdyn.ProcessNet.IDevelopement
	'''
	Unit = property(_get_Unit, None)
	'''
	Get current unit

	:type: recurdyn.ProcessNet.IUnit
	'''
	UseAutoUpdateMaterialProperty = property(_get_UseAutoUpdateMaterialProperty, _set_UseAutoUpdateMaterialProperty)
	'''
	Use update material property during PNet process

	:type: bool
	'''
	UseOutputFileName = property(_get_UseOutputFileName, _set_UseOutputFileName)
	'''
	Use output file name

	:type: bool
	'''
	Utility = property(_get_Utility, None)
	WorkingPlane = property(_get_WorkingPlane, None)
	'''
	Working Plane

	:type: recurdyn.ProcessNet.IWorkingPlane
	'''

	_prop_map_set_function_ = {
		"_set_CurrentLayer": _set_CurrentLayer,
		"_set_LayerFilter": _set_LayerFilter,
		"_set_OutputFileName": _set_OutputFileName,
		"_set_UseAutoUpdateMaterialProperty": _set_UseAutoUpdateMaterialProperty,
		"_set_UseOutputFileName": _set_UseOutputFileName,
	}
	_prop_map_get_ = {
		"Animation": (96, 2, (9, 0), (), "Animation", '{5AEA7149-EE08-4B4E-B593-5AD90B54E3E6}'),
		"Contour": (138, 2, (9, 0), (), "Contour", '{E32E43FB-3356-4D36-8A51-C22DE7E397BF}'),
		"CurrentLayer": (105, 2, (19, 0), (), "CurrentLayer", None),
		"FileExportOption": (137, 2, (9, 0), (), "FileExportOption", '{3D7C1E76-2C4C-480F-9D7B-5ECC6CB9FA2D}'),
		"FileImportOption": (110, 2, (9, 0), (), "FileImportOption", '{6EA01552-F3C2-4CB5-B537-5F25196A168D}'),
		"LayerFilter": (104, 2, (3, 0), (), "LayerFilter", '{47ACF541-B58A-4216-B57C-8F50BE894A55}'),
		"LayerSetting": (115, 2, (9, 0), (), "LayerSetting", '{33584AC3-5F2D-4DD9-826E-1BA921B395D0}'),
		"MaterialPropertyCollection": (94, 2, (9, 0), (), "MaterialPropertyCollection", '{FB97F4A3-BD4F-42B9-80B7-B755FDC154BD}'),
		"MessageFileSettings": (118, 2, (9, 0), (), "MessageFileSettings", '{4E11EE8B-B596-40F8-8F43-1D1C22B3E1F1}'),
		"Model": (55, 2, (9, 0), (), "Model", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"ModelProperty": (76, 2, (9, 0), (), "ModelProperty", '{54B0F80C-BD55-4F49-8E1A-D1D840603430}'),
		"ModelSetting": (75, 2, (9, 0), (), "ModelSetting", '{0B9DFF92-6648-4BB9-83BA-9C6443B2F2CD}'),
		"Name": (51, 2, (8, 0), (), "Name", None),
		"OutputFileName": (121, 2, (8, 0), (), "OutputFileName", None),
		"OwnerApplication": (91, 2, (9, 0), (), "OwnerApplication", '{0E72DCBC-60DD-495E-B067-85BA9DDC18BB}'),
		"PostAnalysis": (140, 2, (9, 0), (), "PostAnalysis", '{0FCAD09C-F67B-415A-BDB7-472A2AC90A59}'),
		"RDDevelopement": (107, 2, (9, 0), (), "RDDevelopement", '{C65A8D10-195A-4939-8359-D7DEC09DC500}'),
		"RDDevelopementExternal": (139, 2, (9, 0), (), "RDDevelopementExternal", '{C65A8D10-195A-4939-8359-D7DEC09DC500}'),
		"Unit": (93, 2, (9, 0), (), "Unit", '{09A65909-6FBB-488A-9726-D320F5666395}'),
		"UseAutoUpdateMaterialProperty": (134, 2, (11, 0), (), "UseAutoUpdateMaterialProperty", None),
		"UseOutputFileName": (122, 2, (11, 0), (), "UseOutputFileName", None),
		"Utility": (103, 2, (9, 0), (), "Utility", '{512577A8-E193-4449-8C6B-A2D59EDBFCF0}'),
		"WorkingPlane": (63, 2, (9, 0), (), "WorkingPlane", '{7EE8FD42-208D-4F80-B89A-297D54D686DA}'),
	}
	_prop_map_put_ = {
		"CurrentLayer": ((105, LCID, 4, 0),()),
		"LayerFilter": ((104, LCID, 4, 0),()),
		"OutputFileName": ((121, LCID, 4, 0),()),
		"UseAutoUpdateMaterialProperty": ((134, LCID, 4, 0),()),
		"UseOutputFileName": ((122, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IModelDocumentCollection(DispatchBaseClass):
	'''IModelDocumentCollection'''
	CLSID = IID('{E26DEB95-B8AC-4666-8673-A9D41A440E2C}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IModelDocument
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IModelDocument
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IModelProperty(DispatchBaseClass):
	'''Model property'''
	CLSID = IID('{54B0F80C-BD55-4F49-8E1A-D1D840603430}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_CommonAnalysisProperty(self):
		return self._ApplyTypes_(*(115, 2, (9, 0), (), "CommonAnalysisProperty", '{82ADFBAE-2220-4034-A55A-45CA75777ACF}'))
	def _get_DynamicAnalysisProperty(self):
		return self._ApplyTypes_(*(112, 2, (9, 0), (), "DynamicAnalysisProperty", '{B789D55C-FB99-4E33-A4C3-AFDD631598CE}'))
	def _get_EigenValueAnalysisProperty(self):
		return self._ApplyTypes_(*(114, 2, (9, 0), (), "EigenValueAnalysisProperty", '{54CB2134-5515-4D88-B997-71E72B9D7FFA}'))
	def _get_FrequencyResponseAnalysisProperty(self):
		return self._ApplyTypes_(*(120, 2, (9, 0), (), "FrequencyResponseAnalysisProperty", '{7C4DC70C-432E-4059-9983-3628D55F94BD}'))
	def _get_GravityX(self):
		return self._ApplyTypes_(*(104, 2, (5, 0), (), "GravityX", None))
	def _get_GravityXIDouble(self):
		return self._ApplyTypes_(*(117, 2, (9, 0), (), "GravityXIDouble", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_GravityY(self):
		return self._ApplyTypes_(*(105, 2, (5, 0), (), "GravityY", None))
	def _get_GravityYIDouble(self):
		return self._ApplyTypes_(*(118, 2, (9, 0), (), "GravityYIDouble", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_GravityZ(self):
		return self._ApplyTypes_(*(106, 2, (5, 0), (), "GravityZ", None))
	def _get_GravityZIDouble(self):
		return self._ApplyTypes_(*(119, 2, (9, 0), (), "GravityZIDouble", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ScenarioAnalysisProperty(self):
		return self._ApplyTypes_(*(116, 2, (9, 0), (), "ScenarioAnalysisProperty", '{F212FA3B-9005-4F21-8513-893B10A6D8C7}'))
	def _get_StaticAnalysisProperty(self):
		return self._ApplyTypes_(*(113, 2, (9, 0), (), "StaticAnalysisProperty", '{19BE442B-70CF-499D-9A4C-B6A3256CDD32}'))
	def _get_TimeOffset(self):
		return self._ApplyTypes_(*(108, 2, (5, 0), (), "TimeOffset", None))
	def _get_Tolerance(self):
		return self._ApplyTypes_(*(109, 2, (5, 0), (), "Tolerance", None))
	def _get_UseGravity(self):
		return self._ApplyTypes_(*(107, 2, (11, 0), (), "UseGravity", None))

	def _set_GravityX(self, value):
		if "GravityX" in self.__dict__: self.__dict__["GravityX"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_GravityY(self, value):
		if "GravityY" in self.__dict__: self.__dict__["GravityY"] = value; return
		self._oleobj_.Invoke(*((105, LCID, 4, 0) + (value,) + ()))
	def _set_GravityZ(self, value):
		if "GravityZ" in self.__dict__: self.__dict__["GravityZ"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))
	def _set_TimeOffset(self, value):
		if "TimeOffset" in self.__dict__: self.__dict__["TimeOffset"] = value; return
		self._oleobj_.Invoke(*((108, LCID, 4, 0) + (value,) + ()))
	def _set_Tolerance(self, value):
		if "Tolerance" in self.__dict__: self.__dict__["Tolerance"] = value; return
		self._oleobj_.Invoke(*((109, LCID, 4, 0) + (value,) + ()))
	def _set_UseGravity(self, value):
		if "UseGravity" in self.__dict__: self.__dict__["UseGravity"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	CommonAnalysisProperty = property(_get_CommonAnalysisProperty, None)
	'''
	Advanced analysis property

	:type: recurdyn.ProcessNet.ICommonAnalysisProperty
	'''
	DynamicAnalysisProperty = property(_get_DynamicAnalysisProperty, None)
	'''
	Dynamic analysis property

	:type: recurdyn.ProcessNet.IIntegratorProperty
	'''
	EigenValueAnalysisProperty = property(_get_EigenValueAnalysisProperty, None)
	'''
	Eigenvalue analysis property

	:type: recurdyn.ProcessNet.IEigenValueProperty
	'''
	FrequencyResponseAnalysisProperty = property(_get_FrequencyResponseAnalysisProperty, None)
	'''
	Frequency response analysis property

	:type: recurdyn.ProcessNet.IFrequencyResponseProperty
	'''
	GravityX = property(_get_GravityX, _set_GravityX)
	'''
	Gravity X

	:type: float
	'''
	GravityXIDouble = property(_get_GravityXIDouble, None)
	'''
	Gravity X

	:type: recurdyn.ProcessNet.IDouble
	'''
	GravityY = property(_get_GravityY, _set_GravityY)
	'''
	Gravity Y

	:type: float
	'''
	GravityYIDouble = property(_get_GravityYIDouble, None)
	'''
	Gravity Y

	:type: recurdyn.ProcessNet.IDouble
	'''
	GravityZ = property(_get_GravityZ, _set_GravityZ)
	'''
	Gravity Z

	:type: float
	'''
	GravityZIDouble = property(_get_GravityZIDouble, None)
	'''
	Gravity Z

	:type: recurdyn.ProcessNet.IDouble
	'''
	ScenarioAnalysisProperty = property(_get_ScenarioAnalysisProperty, None)
	'''
	Scenario analysis property

	:type: recurdyn.ProcessNet.IScenarioAnalysisProperty
	'''
	StaticAnalysisProperty = property(_get_StaticAnalysisProperty, None)
	'''
	Static analysis property

	:type: recurdyn.ProcessNet.IEquilibriumProperty
	'''
	TimeOffset = property(_get_TimeOffset, _set_TimeOffset)
	'''
	Time offset for extraced model

	:type: float
	'''
	Tolerance = property(_get_Tolerance, _set_Tolerance)
	'''
	Tolerance for expression

	:type: float
	'''
	UseGravity = property(_get_UseGravity, _set_UseGravity)
	'''
	Use Gravity

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_GravityX": _set_GravityX,
		"_set_GravityY": _set_GravityY,
		"_set_GravityZ": _set_GravityZ,
		"_set_TimeOffset": _set_TimeOffset,
		"_set_Tolerance": _set_Tolerance,
		"_set_UseGravity": _set_UseGravity,
	}
	_prop_map_get_ = {
		"CommonAnalysisProperty": (115, 2, (9, 0), (), "CommonAnalysisProperty", '{82ADFBAE-2220-4034-A55A-45CA75777ACF}'),
		"DynamicAnalysisProperty": (112, 2, (9, 0), (), "DynamicAnalysisProperty", '{B789D55C-FB99-4E33-A4C3-AFDD631598CE}'),
		"EigenValueAnalysisProperty": (114, 2, (9, 0), (), "EigenValueAnalysisProperty", '{54CB2134-5515-4D88-B997-71E72B9D7FFA}'),
		"FrequencyResponseAnalysisProperty": (120, 2, (9, 0), (), "FrequencyResponseAnalysisProperty", '{7C4DC70C-432E-4059-9983-3628D55F94BD}'),
		"GravityX": (104, 2, (5, 0), (), "GravityX", None),
		"GravityXIDouble": (117, 2, (9, 0), (), "GravityXIDouble", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"GravityY": (105, 2, (5, 0), (), "GravityY", None),
		"GravityYIDouble": (118, 2, (9, 0), (), "GravityYIDouble", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"GravityZ": (106, 2, (5, 0), (), "GravityZ", None),
		"GravityZIDouble": (119, 2, (9, 0), (), "GravityZIDouble", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ScenarioAnalysisProperty": (116, 2, (9, 0), (), "ScenarioAnalysisProperty", '{F212FA3B-9005-4F21-8513-893B10A6D8C7}'),
		"StaticAnalysisProperty": (113, 2, (9, 0), (), "StaticAnalysisProperty", '{19BE442B-70CF-499D-9A4C-B6A3256CDD32}'),
		"TimeOffset": (108, 2, (5, 0), (), "TimeOffset", None),
		"Tolerance": (109, 2, (5, 0), (), "Tolerance", None),
		"UseGravity": (107, 2, (11, 0), (), "UseGravity", None),
	}
	_prop_map_put_ = {
		"GravityX": ((104, LCID, 4, 0),()),
		"GravityY": ((105, LCID, 4, 0),()),
		"GravityZ": ((106, LCID, 4, 0),()),
		"TimeOffset": ((108, LCID, 4, 0),()),
		"Tolerance": ((109, LCID, 4, 0),()),
		"UseGravity": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IModelSetting(DispatchBaseClass):
	'''Model setting'''
	CLSID = IID('{0B9DFF92-6648-4BB9-83BA-9C6443B2F2CD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Export(self, strFile, bOverWrite):
		'''
		Export method
		
		:param strFile: str
		:param bOverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(81, LCID, 1, (24, 0), ((8, 1), (11, 1)),strFile
			, bOverWrite)


	def Import(self, strFile):
		'''
		Import method
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(80, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def ResetAllSettings(self):
		'''
		Reset all settings
		'''
		return self._oleobj_.InvokeTypes(79, LCID, 1, (24, 0), (),)


	def SetAsDefault(self):
		'''
		Set as default
		'''
		return self._oleobj_.InvokeTypes(78, LCID, 1, (24, 0), (),)


	def _get_AnimationControl(self):
		return self._ApplyTypes_(*(72, 2, (9, 0), (), "AnimationControl", '{918A0CB3-A5E0-4A9D-906E-D4DF3C194530}'))
	def _get_BackgroundColor(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "BackgroundColor", '{1972ACE7-FAA6-4C64-A067-C0B2EB23C93A}'))
	def _get_CameraSetting(self):
		return self._ApplyTypes_(*(73, 2, (9, 0), (), "CameraSetting", '{0FDF3022-5D98-4409-B16E-716A01915002}'))
	def _get_CustomView(self):
		return self._ApplyTypes_(*(74, 2, (9, 0), (), "CustomView", '{0F88BBEF-C77F-472D-9936-E84B77F9756A}'))
	def _get_DatabaseSetting(self):
		return self._ApplyTypes_(*(92, 2, (9, 0), (), "DatabaseSetting", '{4DFAE9F4-7DC9-469C-9FEF-6DBB2575E0CA}'))
	def _get_DisplayAnimationDuringSimulation(self):
		return self._ApplyTypes_(*(75, 2, (11, 0), (), "DisplayAnimationDuringSimulation", None))
	def _get_Flexibility(self):
		return self._ApplyTypes_(*(82, 2, (9, 0), (), "Flexibility", '{021CF62C-20FB-4D9B-8C0B-89E4C73CE14C}'))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(52, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayCustomColorFlag(self):
		return self._ApplyTypes_(*(101, 2, (11, 0), (), "ForceDisplayCustomColorFlag", None))
	def _get_ForceDisplayScale(self):
		return self._ApplyTypes_(*(53, 2, (5, 0), (), "ForceDisplayScale", None))
	def _get_ForceDisplayWidth(self):
		return self._ApplyTypes_(*(54, 2, (5, 0), (), "ForceDisplayWidth", None))
	def _get_Grid(self):
		return self._ApplyTypes_(*(76, 2, (11, 0), (), "Grid", None))
	def _get_GridSnap(self):
		return self._ApplyTypes_(*(77, 2, (11, 0), (), "GridSnap", None))
	def _get_IconSize(self):
		return self._ApplyTypes_(*(58, 2, (5, 0), (), "IconSize", None))
	def _get_MarkerSize(self):
		return self._ApplyTypes_(*(59, 2, (5, 0), (), "MarkerSize", None))
	def _get_ModelSettingCAD(self):
		return self._ApplyTypes_(*(99, 2, (9, 0), (), "ModelSettingCAD", '{EED70022-9601-4CFC-B6A1-BADDE4A5A4B1}'))
	def _get_ModelSettingDefault(self):
		return self._ApplyTypes_(*(94, 2, (9, 0), (), "ModelSettingDefault", '{75368D13-6E62-4893-A825-339547DA46C4}'))
	def _get_ModelSettingDisplay(self):
		return self._ApplyTypes_(*(83, 2, (9, 0), (), "ModelSettingDisplay", '{845806A7-7BB3-4643-878D-CE4247682409}'))
	def _get_ModelSettingGeneral(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "ModelSettingGeneral", '{83A06AD8-8A05-4627-823B-E6C5C9716634}'))
	def _get_ModelSettingLight(self):
		return self._ApplyTypes_(*(93, 2, (9, 0), (), "ModelSettingLight", '{B81B4D27-0B09-4FCD-B29B-55CCCF9E45DD}'))
	def _get_ModelSettingPlot(self):
		return self._ApplyTypes_(*(91, 2, (9, 0), (), "ModelSettingPlot", '{AB76BF02-4EA9-4EC3-AF0E-3B42300415CD}'))
	def _get_NameOnOffType(self):
		return self._ApplyTypes_(*(84, 2, (3, 0), (), "NameOnOffType", '{6E1380FC-4B13-4333-B14B-856128DA895A}'))
	def _get_ShowIconAll(self):
		return self._ApplyTypes_(*(60, 2, (11, 0), (), "ShowIconAll", None))
	def _get_ShowIconContact(self):
		return self._ApplyTypes_(*(63, 2, (11, 0), (), "ShowIconContact", None))
	def _get_ShowIconForce(self):
		return self._ApplyTypes_(*(62, 2, (11, 0), (), "ShowIconForce", None))
	def _get_ShowIconInitialVelocity(self):
		return self._ApplyTypes_(*(66, 2, (11, 0), (), "ShowIconInitialVelocity", None))
	def _get_ShowIconJoint(self):
		return self._ApplyTypes_(*(61, 2, (11, 0), (), "ShowIconJoint", None))
	def _get_ShowIconParametricPoint(self):
		return self._ApplyTypes_(*(65, 2, (11, 0), (), "ShowIconParametricPoint", None))
	def _get_ShowIconSensor(self):
		return self._ApplyTypes_(*(64, 2, (11, 0), (), "ShowIconSensor", None))
	def _get_ShowInertiaReferenceFrame(self):
		return self._ApplyTypes_(*(70, 2, (11, 0), (), "ShowInertiaReferenceFrame", None))
	def _get_ShowLight(self):
		return self._ApplyTypes_(*(71, 2, (11, 0), (), "ShowLight", None))
	def _get_ShowMarkerAll(self):
		return self._ApplyTypes_(*(67, 2, (11, 0), (), "ShowMarkerAll", None))
	def _get_ShowMarkerCenter(self):
		return self._ApplyTypes_(*(68, 2, (11, 0), (), "ShowMarkerCenter", None))
	def _get_ShowMarkerGeneral(self):
		return self._ApplyTypes_(*(69, 2, (11, 0), (), "ShowMarkerGeneral", None))
	def _get_ShowNameAll(self):
		return self._ApplyTypes_(*(85, 2, (11, 0), (), "ShowNameAll", None))
	def _get_ShowNameFFlexBody(self):
		return self._ApplyTypes_(*(96, 2, (11, 0), (), "ShowNameFFlexBody", None))
	def _get_ShowNameGeneralBody(self):
		return self._ApplyTypes_(*(86, 2, (11, 0), (), "ShowNameGeneralBody", None))
	def _get_ShowNameGeneralMarker(self):
		return self._ApplyTypes_(*(87, 2, (11, 0), (), "ShowNameGeneralMarker", None))
	def _get_ShowNameGroup(self):
		return self._ApplyTypes_(*(98, 2, (11, 0), (), "ShowNameGroup", None))
	def _get_ShowNameParametricPoint(self):
		return self._ApplyTypes_(*(88, 2, (11, 0), (), "ShowNameParametricPoint", None))
	def _get_ShowNameRFlexBody(self):
		return self._ApplyTypes_(*(97, 2, (11, 0), (), "ShowNameRFlexBody", None))
	def _get_ShowNameRigidBody(self):
		return self._ApplyTypes_(*(95, 2, (11, 0), (), "ShowNameRigidBody", None))
	def _get_SnapToGeometry(self):
		return self._ApplyTypes_(*(89, 2, (11, 0), (), "SnapToGeometry", None))
	def _get_SnapToNode(self):
		return self._ApplyTypes_(*(90, 2, (11, 0), (), "SnapToNode", None))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(55, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_TorqueDisplayScale(self):
		return self._ApplyTypes_(*(56, 2, (5, 0), (), "TorqueDisplayScale", None))
	def _get_TorqueDisplayWidth(self):
		return self._ApplyTypes_(*(57, 2, (5, 0), (), "TorqueDisplayWidth", None))

	def _set_DisplayAnimationDuringSimulation(self, value):
		if "DisplayAnimationDuringSimulation" in self.__dict__: self.__dict__["DisplayAnimationDuringSimulation"] = value; return
		self._oleobj_.Invoke(*((75, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayCustomColorFlag(self, value):
		if "ForceDisplayCustomColorFlag" in self.__dict__: self.__dict__["ForceDisplayCustomColorFlag"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayScale(self, value):
		if "ForceDisplayScale" in self.__dict__: self.__dict__["ForceDisplayScale"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayWidth(self, value):
		if "ForceDisplayWidth" in self.__dict__: self.__dict__["ForceDisplayWidth"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_Grid(self, value):
		if "Grid" in self.__dict__: self.__dict__["Grid"] = value; return
		self._oleobj_.Invoke(*((76, LCID, 4, 0) + (value,) + ()))
	def _set_GridSnap(self, value):
		if "GridSnap" in self.__dict__: self.__dict__["GridSnap"] = value; return
		self._oleobj_.Invoke(*((77, LCID, 4, 0) + (value,) + ()))
	def _set_IconSize(self, value):
		if "IconSize" in self.__dict__: self.__dict__["IconSize"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))
	def _set_MarkerSize(self, value):
		if "MarkerSize" in self.__dict__: self.__dict__["MarkerSize"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))
	def _set_NameOnOffType(self, value):
		if "NameOnOffType" in self.__dict__: self.__dict__["NameOnOffType"] = value; return
		self._oleobj_.Invoke(*((84, LCID, 4, 0) + (value,) + ()))
	def _set_ShowIconAll(self, value):
		if "ShowIconAll" in self.__dict__: self.__dict__["ShowIconAll"] = value; return
		self._oleobj_.Invoke(*((60, LCID, 4, 0) + (value,) + ()))
	def _set_ShowIconContact(self, value):
		if "ShowIconContact" in self.__dict__: self.__dict__["ShowIconContact"] = value; return
		self._oleobj_.Invoke(*((63, LCID, 4, 0) + (value,) + ()))
	def _set_ShowIconForce(self, value):
		if "ShowIconForce" in self.__dict__: self.__dict__["ShowIconForce"] = value; return
		self._oleobj_.Invoke(*((62, LCID, 4, 0) + (value,) + ()))
	def _set_ShowIconInitialVelocity(self, value):
		if "ShowIconInitialVelocity" in self.__dict__: self.__dict__["ShowIconInitialVelocity"] = value; return
		self._oleobj_.Invoke(*((66, LCID, 4, 0) + (value,) + ()))
	def _set_ShowIconJoint(self, value):
		if "ShowIconJoint" in self.__dict__: self.__dict__["ShowIconJoint"] = value; return
		self._oleobj_.Invoke(*((61, LCID, 4, 0) + (value,) + ()))
	def _set_ShowIconParametricPoint(self, value):
		if "ShowIconParametricPoint" in self.__dict__: self.__dict__["ShowIconParametricPoint"] = value; return
		self._oleobj_.Invoke(*((65, LCID, 4, 0) + (value,) + ()))
	def _set_ShowIconSensor(self, value):
		if "ShowIconSensor" in self.__dict__: self.__dict__["ShowIconSensor"] = value; return
		self._oleobj_.Invoke(*((64, LCID, 4, 0) + (value,) + ()))
	def _set_ShowInertiaReferenceFrame(self, value):
		if "ShowInertiaReferenceFrame" in self.__dict__: self.__dict__["ShowInertiaReferenceFrame"] = value; return
		self._oleobj_.Invoke(*((70, LCID, 4, 0) + (value,) + ()))
	def _set_ShowLight(self, value):
		if "ShowLight" in self.__dict__: self.__dict__["ShowLight"] = value; return
		self._oleobj_.Invoke(*((71, LCID, 4, 0) + (value,) + ()))
	def _set_ShowMarkerAll(self, value):
		if "ShowMarkerAll" in self.__dict__: self.__dict__["ShowMarkerAll"] = value; return
		self._oleobj_.Invoke(*((67, LCID, 4, 0) + (value,) + ()))
	def _set_ShowMarkerCenter(self, value):
		if "ShowMarkerCenter" in self.__dict__: self.__dict__["ShowMarkerCenter"] = value; return
		self._oleobj_.Invoke(*((68, LCID, 4, 0) + (value,) + ()))
	def _set_ShowMarkerGeneral(self, value):
		if "ShowMarkerGeneral" in self.__dict__: self.__dict__["ShowMarkerGeneral"] = value; return
		self._oleobj_.Invoke(*((69, LCID, 4, 0) + (value,) + ()))
	def _set_ShowNameAll(self, value):
		if "ShowNameAll" in self.__dict__: self.__dict__["ShowNameAll"] = value; return
		self._oleobj_.Invoke(*((85, LCID, 4, 0) + (value,) + ()))
	def _set_ShowNameFFlexBody(self, value):
		if "ShowNameFFlexBody" in self.__dict__: self.__dict__["ShowNameFFlexBody"] = value; return
		self._oleobj_.Invoke(*((96, LCID, 4, 0) + (value,) + ()))
	def _set_ShowNameGeneralBody(self, value):
		if "ShowNameGeneralBody" in self.__dict__: self.__dict__["ShowNameGeneralBody"] = value; return
		self._oleobj_.Invoke(*((86, LCID, 4, 0) + (value,) + ()))
	def _set_ShowNameGeneralMarker(self, value):
		if "ShowNameGeneralMarker" in self.__dict__: self.__dict__["ShowNameGeneralMarker"] = value; return
		self._oleobj_.Invoke(*((87, LCID, 4, 0) + (value,) + ()))
	def _set_ShowNameGroup(self, value):
		if "ShowNameGroup" in self.__dict__: self.__dict__["ShowNameGroup"] = value; return
		self._oleobj_.Invoke(*((98, LCID, 4, 0) + (value,) + ()))
	def _set_ShowNameParametricPoint(self, value):
		if "ShowNameParametricPoint" in self.__dict__: self.__dict__["ShowNameParametricPoint"] = value; return
		self._oleobj_.Invoke(*((88, LCID, 4, 0) + (value,) + ()))
	def _set_ShowNameRFlexBody(self, value):
		if "ShowNameRFlexBody" in self.__dict__: self.__dict__["ShowNameRFlexBody"] = value; return
		self._oleobj_.Invoke(*((97, LCID, 4, 0) + (value,) + ()))
	def _set_ShowNameRigidBody(self, value):
		if "ShowNameRigidBody" in self.__dict__: self.__dict__["ShowNameRigidBody"] = value; return
		self._oleobj_.Invoke(*((95, LCID, 4, 0) + (value,) + ()))
	def _set_SnapToGeometry(self, value):
		if "SnapToGeometry" in self.__dict__: self.__dict__["SnapToGeometry"] = value; return
		self._oleobj_.Invoke(*((89, LCID, 4, 0) + (value,) + ()))
	def _set_SnapToNode(self, value):
		if "SnapToNode" in self.__dict__: self.__dict__["SnapToNode"] = value; return
		self._oleobj_.Invoke(*((90, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayScale(self, value):
		if "TorqueDisplayScale" in self.__dict__: self.__dict__["TorqueDisplayScale"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayWidth(self, value):
		if "TorqueDisplayWidth" in self.__dict__: self.__dict__["TorqueDisplayWidth"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))

	AnimationControl = property(_get_AnimationControl, None)
	'''
	Animation Control

	:type: recurdyn.ProcessNet.IAnimationControl
	'''
	BackgroundColor = property(_get_BackgroundColor, None)
	'''
	obsolete function

	:type: recurdyn.ProcessNet.IBackgroundColor
	'''
	CameraSetting = property(_get_CameraSetting, None)
	'''
	Camera Setting

	:type: recurdyn.ProcessNet.ICameraSetting
	'''
	CustomView = property(_get_CustomView, None)
	'''
	Custom View

	:type: recurdyn.ProcessNet.ICustomView
	'''
	DatabaseSetting = property(_get_DatabaseSetting, None)
	'''
	Database Setting

	:type: recurdyn.ProcessNet.IModelSettingDatabase
	'''
	DisplayAnimationDuringSimulation = property(_get_DisplayAnimationDuringSimulation, _set_DisplayAnimationDuringSimulation)
	'''
	Display Animation During Simulation

	:type: bool
	'''
	Flexibility = property(_get_Flexibility, None)
	'''
	Flexibility

	:type: recurdyn.ProcessNet.IModelSettingFlexibility
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	obsolete function

	:type: int
	'''
	ForceDisplayCustomColorFlag = property(_get_ForceDisplayCustomColorFlag, _set_ForceDisplayCustomColorFlag)
	'''
	The flag of using custom force display color

	:type: bool
	'''
	ForceDisplayScale = property(_get_ForceDisplayScale, _set_ForceDisplayScale)
	'''
	obsolete function

	:type: float
	'''
	ForceDisplayWidth = property(_get_ForceDisplayWidth, _set_ForceDisplayWidth)
	'''
	obsolete function

	:type: float
	'''
	Grid = property(_get_Grid, _set_Grid)
	'''
	Grid On/Off

	:type: bool
	'''
	GridSnap = property(_get_GridSnap, _set_GridSnap)
	'''
	Grid snap

	:type: bool
	'''
	IconSize = property(_get_IconSize, _set_IconSize)
	'''
	Icon size

	:type: float
	'''
	MarkerSize = property(_get_MarkerSize, _set_MarkerSize)
	'''
	Marker size

	:type: float
	'''
	ModelSettingCAD = property(_get_ModelSettingCAD, None)
	'''
	CAD settings

	:type: recurdyn.ProcessNet.IModelSettingCAD
	'''
	ModelSettingDefault = property(_get_ModelSettingDefault, None)
	'''
	Model display settings

	:type: recurdyn.ProcessNet.IModelSettingDefault
	'''
	ModelSettingDisplay = property(_get_ModelSettingDisplay, None)
	'''
	obsolete function

	:type: recurdyn.ProcessNet.IModelSettingDisplay
	'''
	ModelSettingGeneral = property(_get_ModelSettingGeneral, None)
	'''
	Model general settings

	:type: recurdyn.ProcessNet.IModelSettingGeneral
	'''
	ModelSettingLight = property(_get_ModelSettingLight, None)
	'''
	Model Light Settings

	:type: recurdyn.ProcessNet.IModelSettingLight
	'''
	ModelSettingPlot = property(_get_ModelSettingPlot, None)
	'''
	Model setting of Plot

	:type: recurdyn.ProcessNet.IModelSettingPlot
	'''
	NameOnOffType = property(_get_NameOnOffType, _set_NameOnOffType)
	'''
	Name On/Off type

	:type: recurdyn.ProcessNet.NameOnOffType
	'''
	ShowIconAll = property(_get_ShowIconAll, _set_ShowIconAll)
	'''
	Show All Icons

	:type: bool
	'''
	ShowIconContact = property(_get_ShowIconContact, _set_ShowIconContact)
	'''
	Show Contact Icons

	:type: bool
	'''
	ShowIconForce = property(_get_ShowIconForce, _set_ShowIconForce)
	'''
	Show Force Icons

	:type: bool
	'''
	ShowIconInitialVelocity = property(_get_ShowIconInitialVelocity, _set_ShowIconInitialVelocity)
	'''
	Show Initial Velocity Icons

	:type: bool
	'''
	ShowIconJoint = property(_get_ShowIconJoint, _set_ShowIconJoint)
	'''
	Show Joint Icons

	:type: bool
	'''
	ShowIconParametricPoint = property(_get_ShowIconParametricPoint, _set_ShowIconParametricPoint)
	'''
	Show Parametric Point Icons

	:type: bool
	'''
	ShowIconSensor = property(_get_ShowIconSensor, _set_ShowIconSensor)
	'''
	Show Sensor Icons

	:type: bool
	'''
	ShowInertiaReferenceFrame = property(_get_ShowInertiaReferenceFrame, _set_ShowInertiaReferenceFrame)
	'''
	Show Inertia Reference Frame

	:type: bool
	'''
	ShowLight = property(_get_ShowLight, _set_ShowLight)
	'''
	This is an obsolete property. Use ModelSettingLight.

	:type: bool
	'''
	ShowMarkerAll = property(_get_ShowMarkerAll, _set_ShowMarkerAll)
	'''
	Show All Markers

	:type: bool
	'''
	ShowMarkerCenter = property(_get_ShowMarkerCenter, _set_ShowMarkerCenter)
	'''
	Show Center Markers

	:type: bool
	'''
	ShowMarkerGeneral = property(_get_ShowMarkerGeneral, _set_ShowMarkerGeneral)
	'''
	Show General Markers

	:type: bool
	'''
	ShowNameAll = property(_get_ShowNameAll, _set_ShowNameAll)
	'''
	Show All Names

	:type: bool
	'''
	ShowNameFFlexBody = property(_get_ShowNameFFlexBody, _set_ShowNameFFlexBody)
	'''
	Show General Body Name

	:type: bool
	'''
	ShowNameGeneralBody = property(_get_ShowNameGeneralBody, _set_ShowNameGeneralBody)
	'''
	Show General Body Name

	:type: bool
	'''
	ShowNameGeneralMarker = property(_get_ShowNameGeneralMarker, _set_ShowNameGeneralMarker)
	'''
	Show General Marker Name

	:type: bool
	'''
	ShowNameGroup = property(_get_ShowNameGroup, _set_ShowNameGroup)
	'''
	Show General Body Name

	:type: bool
	'''
	ShowNameParametricPoint = property(_get_ShowNameParametricPoint, _set_ShowNameParametricPoint)
	'''
	Show Parametric Point Name

	:type: bool
	'''
	ShowNameRFlexBody = property(_get_ShowNameRFlexBody, _set_ShowNameRFlexBody)
	'''
	Show General Body Name

	:type: bool
	'''
	ShowNameRigidBody = property(_get_ShowNameRigidBody, _set_ShowNameRigidBody)
	'''
	Show General Body Name

	:type: bool
	'''
	SnapToGeometry = property(_get_SnapToGeometry, _set_SnapToGeometry)
	'''
	Sanp to geometry during point navigation

	:type: bool
	'''
	SnapToNode = property(_get_SnapToNode, _set_SnapToNode)
	'''
	Sanp to node during point navigation

	:type: bool
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	obsolete function

	:type: int
	'''
	TorqueDisplayScale = property(_get_TorqueDisplayScale, _set_TorqueDisplayScale)
	'''
	obsolete function

	:type: float
	'''
	TorqueDisplayWidth = property(_get_TorqueDisplayWidth, _set_TorqueDisplayWidth)
	'''
	obsolete function

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_DisplayAnimationDuringSimulation": _set_DisplayAnimationDuringSimulation,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayCustomColorFlag": _set_ForceDisplayCustomColorFlag,
		"_set_ForceDisplayScale": _set_ForceDisplayScale,
		"_set_ForceDisplayWidth": _set_ForceDisplayWidth,
		"_set_Grid": _set_Grid,
		"_set_GridSnap": _set_GridSnap,
		"_set_IconSize": _set_IconSize,
		"_set_MarkerSize": _set_MarkerSize,
		"_set_NameOnOffType": _set_NameOnOffType,
		"_set_ShowIconAll": _set_ShowIconAll,
		"_set_ShowIconContact": _set_ShowIconContact,
		"_set_ShowIconForce": _set_ShowIconForce,
		"_set_ShowIconInitialVelocity": _set_ShowIconInitialVelocity,
		"_set_ShowIconJoint": _set_ShowIconJoint,
		"_set_ShowIconParametricPoint": _set_ShowIconParametricPoint,
		"_set_ShowIconSensor": _set_ShowIconSensor,
		"_set_ShowInertiaReferenceFrame": _set_ShowInertiaReferenceFrame,
		"_set_ShowLight": _set_ShowLight,
		"_set_ShowMarkerAll": _set_ShowMarkerAll,
		"_set_ShowMarkerCenter": _set_ShowMarkerCenter,
		"_set_ShowMarkerGeneral": _set_ShowMarkerGeneral,
		"_set_ShowNameAll": _set_ShowNameAll,
		"_set_ShowNameFFlexBody": _set_ShowNameFFlexBody,
		"_set_ShowNameGeneralBody": _set_ShowNameGeneralBody,
		"_set_ShowNameGeneralMarker": _set_ShowNameGeneralMarker,
		"_set_ShowNameGroup": _set_ShowNameGroup,
		"_set_ShowNameParametricPoint": _set_ShowNameParametricPoint,
		"_set_ShowNameRFlexBody": _set_ShowNameRFlexBody,
		"_set_ShowNameRigidBody": _set_ShowNameRigidBody,
		"_set_SnapToGeometry": _set_SnapToGeometry,
		"_set_SnapToNode": _set_SnapToNode,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_TorqueDisplayScale": _set_TorqueDisplayScale,
		"_set_TorqueDisplayWidth": _set_TorqueDisplayWidth,
	}
	_prop_map_get_ = {
		"AnimationControl": (72, 2, (9, 0), (), "AnimationControl", '{918A0CB3-A5E0-4A9D-906E-D4DF3C194530}'),
		"BackgroundColor": (51, 2, (9, 0), (), "BackgroundColor", '{1972ACE7-FAA6-4C64-A067-C0B2EB23C93A}'),
		"CameraSetting": (73, 2, (9, 0), (), "CameraSetting", '{0FDF3022-5D98-4409-B16E-716A01915002}'),
		"CustomView": (74, 2, (9, 0), (), "CustomView", '{0F88BBEF-C77F-472D-9936-E84B77F9756A}'),
		"DatabaseSetting": (92, 2, (9, 0), (), "DatabaseSetting", '{4DFAE9F4-7DC9-469C-9FEF-6DBB2575E0CA}'),
		"DisplayAnimationDuringSimulation": (75, 2, (11, 0), (), "DisplayAnimationDuringSimulation", None),
		"Flexibility": (82, 2, (9, 0), (), "Flexibility", '{021CF62C-20FB-4D9B-8C0B-89E4C73CE14C}'),
		"ForceDisplayColor": (52, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayCustomColorFlag": (101, 2, (11, 0), (), "ForceDisplayCustomColorFlag", None),
		"ForceDisplayScale": (53, 2, (5, 0), (), "ForceDisplayScale", None),
		"ForceDisplayWidth": (54, 2, (5, 0), (), "ForceDisplayWidth", None),
		"Grid": (76, 2, (11, 0), (), "Grid", None),
		"GridSnap": (77, 2, (11, 0), (), "GridSnap", None),
		"IconSize": (58, 2, (5, 0), (), "IconSize", None),
		"MarkerSize": (59, 2, (5, 0), (), "MarkerSize", None),
		"ModelSettingCAD": (99, 2, (9, 0), (), "ModelSettingCAD", '{EED70022-9601-4CFC-B6A1-BADDE4A5A4B1}'),
		"ModelSettingDefault": (94, 2, (9, 0), (), "ModelSettingDefault", '{75368D13-6E62-4893-A825-339547DA46C4}'),
		"ModelSettingDisplay": (83, 2, (9, 0), (), "ModelSettingDisplay", '{845806A7-7BB3-4643-878D-CE4247682409}'),
		"ModelSettingGeneral": (102, 2, (9, 0), (), "ModelSettingGeneral", '{83A06AD8-8A05-4627-823B-E6C5C9716634}'),
		"ModelSettingLight": (93, 2, (9, 0), (), "ModelSettingLight", '{B81B4D27-0B09-4FCD-B29B-55CCCF9E45DD}'),
		"ModelSettingPlot": (91, 2, (9, 0), (), "ModelSettingPlot", '{AB76BF02-4EA9-4EC3-AF0E-3B42300415CD}'),
		"NameOnOffType": (84, 2, (3, 0), (), "NameOnOffType", '{6E1380FC-4B13-4333-B14B-856128DA895A}'),
		"ShowIconAll": (60, 2, (11, 0), (), "ShowIconAll", None),
		"ShowIconContact": (63, 2, (11, 0), (), "ShowIconContact", None),
		"ShowIconForce": (62, 2, (11, 0), (), "ShowIconForce", None),
		"ShowIconInitialVelocity": (66, 2, (11, 0), (), "ShowIconInitialVelocity", None),
		"ShowIconJoint": (61, 2, (11, 0), (), "ShowIconJoint", None),
		"ShowIconParametricPoint": (65, 2, (11, 0), (), "ShowIconParametricPoint", None),
		"ShowIconSensor": (64, 2, (11, 0), (), "ShowIconSensor", None),
		"ShowInertiaReferenceFrame": (70, 2, (11, 0), (), "ShowInertiaReferenceFrame", None),
		"ShowLight": (71, 2, (11, 0), (), "ShowLight", None),
		"ShowMarkerAll": (67, 2, (11, 0), (), "ShowMarkerAll", None),
		"ShowMarkerCenter": (68, 2, (11, 0), (), "ShowMarkerCenter", None),
		"ShowMarkerGeneral": (69, 2, (11, 0), (), "ShowMarkerGeneral", None),
		"ShowNameAll": (85, 2, (11, 0), (), "ShowNameAll", None),
		"ShowNameFFlexBody": (96, 2, (11, 0), (), "ShowNameFFlexBody", None),
		"ShowNameGeneralBody": (86, 2, (11, 0), (), "ShowNameGeneralBody", None),
		"ShowNameGeneralMarker": (87, 2, (11, 0), (), "ShowNameGeneralMarker", None),
		"ShowNameGroup": (98, 2, (11, 0), (), "ShowNameGroup", None),
		"ShowNameParametricPoint": (88, 2, (11, 0), (), "ShowNameParametricPoint", None),
		"ShowNameRFlexBody": (97, 2, (11, 0), (), "ShowNameRFlexBody", None),
		"ShowNameRigidBody": (95, 2, (11, 0), (), "ShowNameRigidBody", None),
		"SnapToGeometry": (89, 2, (11, 0), (), "SnapToGeometry", None),
		"SnapToNode": (90, 2, (11, 0), (), "SnapToNode", None),
		"TorqueDisplayColor": (55, 2, (19, 0), (), "TorqueDisplayColor", None),
		"TorqueDisplayScale": (56, 2, (5, 0), (), "TorqueDisplayScale", None),
		"TorqueDisplayWidth": (57, 2, (5, 0), (), "TorqueDisplayWidth", None),
	}
	_prop_map_put_ = {
		"DisplayAnimationDuringSimulation": ((75, LCID, 4, 0),()),
		"ForceDisplayColor": ((52, LCID, 4, 0),()),
		"ForceDisplayCustomColorFlag": ((101, LCID, 4, 0),()),
		"ForceDisplayScale": ((53, LCID, 4, 0),()),
		"ForceDisplayWidth": ((54, LCID, 4, 0),()),
		"Grid": ((76, LCID, 4, 0),()),
		"GridSnap": ((77, LCID, 4, 0),()),
		"IconSize": ((58, LCID, 4, 0),()),
		"MarkerSize": ((59, LCID, 4, 0),()),
		"NameOnOffType": ((84, LCID, 4, 0),()),
		"ShowIconAll": ((60, LCID, 4, 0),()),
		"ShowIconContact": ((63, LCID, 4, 0),()),
		"ShowIconForce": ((62, LCID, 4, 0),()),
		"ShowIconInitialVelocity": ((66, LCID, 4, 0),()),
		"ShowIconJoint": ((61, LCID, 4, 0),()),
		"ShowIconParametricPoint": ((65, LCID, 4, 0),()),
		"ShowIconSensor": ((64, LCID, 4, 0),()),
		"ShowInertiaReferenceFrame": ((70, LCID, 4, 0),()),
		"ShowLight": ((71, LCID, 4, 0),()),
		"ShowMarkerAll": ((67, LCID, 4, 0),()),
		"ShowMarkerCenter": ((68, LCID, 4, 0),()),
		"ShowMarkerGeneral": ((69, LCID, 4, 0),()),
		"ShowNameAll": ((85, LCID, 4, 0),()),
		"ShowNameFFlexBody": ((96, LCID, 4, 0),()),
		"ShowNameGeneralBody": ((86, LCID, 4, 0),()),
		"ShowNameGeneralMarker": ((87, LCID, 4, 0),()),
		"ShowNameGroup": ((98, LCID, 4, 0),()),
		"ShowNameParametricPoint": ((88, LCID, 4, 0),()),
		"ShowNameRFlexBody": ((97, LCID, 4, 0),()),
		"ShowNameRigidBody": ((95, LCID, 4, 0),()),
		"SnapToGeometry": ((89, LCID, 4, 0),()),
		"SnapToNode": ((90, LCID, 4, 0),()),
		"TorqueDisplayColor": ((55, LCID, 4, 0),()),
		"TorqueDisplayScale": ((56, LCID, 4, 0),()),
		"TorqueDisplayWidth": ((57, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IModelSettingCAD(DispatchBaseClass):
	'''Model Setting - CAD'''
	CLSID = IID('{EED70022-9601-4CFC-B6A1-BADDE4A5A4B1}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AssemblyOptionForCATIA(self):
		return self._ApplyTypes_(*(111, 2, (3, 0), (), "AssemblyOptionForCATIA", '{3FCF662A-AABA-49AE-966E-99F07E9C1F9C}'))
	def _get_CADAssemblyHierarchy(self):
		return self._ApplyTypes_(*(106, 2, (11, 0), (), "CADAssemblyHierarchy", None))
	def _get_CADHierarchyDialog(self):
		return self._ApplyTypes_(*(108, 2, (11, 0), (), "CADHierarchyDialog", None))
	def _get_ConvertPrimitiveGeometriesWhenImportingCADFiles(self):
		return self._ApplyTypes_(*(103, 2, (11, 0), (), "ConvertPrimitiveGeometriesWhenImportingCADFiles", None))
	def _get_CreateTranslatorLogFile(self):
		return self._ApplyTypes_(*(113, 2, (11, 0), (), "CreateTranslatorLogFile", None))
	def _get_HierarchyConversionLevel(self):
		return self._ApplyTypes_(*(107, 2, (3, 0), (), "HierarchyConversionLevel", '{BBBFE795-B968-4308-A6A6-F1D08F52A5D2}'))
	def _get_ImportCADOptionsDialog(self):
		return self._ApplyTypes_(*(105, 2, (11, 0), (), "ImportCADOptionsDialog", None))
	def _get_ImportedCADDataColor(self):
		return self._ApplyTypes_(*(102, 2, (19, 0), (), "ImportedCADDataColor", None))
	def _get_KeepEdgesBooleanUnite(self):
		return self._ApplyTypes_(*(104, 2, (11, 0), (), "KeepEdgesBooleanUnite", None))
	def _get_TranslatorExportOptions(self):
		return self._ApplyTypes_(*(115, 2, (9, 0), (), "TranslatorExportOptions", '{BF6D6355-72CE-4B22-B038-CDEAA00F7CE8}'))
	def _get_TranslatorImportOptions(self):
		return self._ApplyTypes_(*(114, 2, (9, 0), (), "TranslatorImportOptions", '{FE0C7461-8AFD-47CA-A284-C05BD15B68FC}'))
	def _get_UseHealingOptionForCATIA(self):
		return self._ApplyTypes_(*(109, 2, (11, 0), (), "UseHealingOptionForCATIA", None))
	def _get_UseImportedCADDataColor(self):
		return self._ApplyTypes_(*(101, 2, (11, 0), (), "UseImportedCADDataColor", None))
	def _get_UseSolidAsSheetForCATIA(self):
		return self._ApplyTypes_(*(110, 2, (11, 0), (), "UseSolidAsSheetForCATIA", None))
	def _get_UseSolidTrimForSTEP(self):
		return self._ApplyTypes_(*(112, 2, (11, 0), (), "UseSolidTrimForSTEP", None))

	def _set_AssemblyOptionForCATIA(self, value):
		if "AssemblyOptionForCATIA" in self.__dict__: self.__dict__["AssemblyOptionForCATIA"] = value; return
		self._oleobj_.Invoke(*((111, LCID, 4, 0) + (value,) + ()))
	def _set_CADAssemblyHierarchy(self, value):
		if "CADAssemblyHierarchy" in self.__dict__: self.__dict__["CADAssemblyHierarchy"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))
	def _set_CADHierarchyDialog(self, value):
		if "CADHierarchyDialog" in self.__dict__: self.__dict__["CADHierarchyDialog"] = value; return
		self._oleobj_.Invoke(*((108, LCID, 4, 0) + (value,) + ()))
	def _set_ConvertPrimitiveGeometriesWhenImportingCADFiles(self, value):
		if "ConvertPrimitiveGeometriesWhenImportingCADFiles" in self.__dict__: self.__dict__["ConvertPrimitiveGeometriesWhenImportingCADFiles"] = value; return
		self._oleobj_.Invoke(*((103, LCID, 4, 0) + (value,) + ()))
	def _set_CreateTranslatorLogFile(self, value):
		if "CreateTranslatorLogFile" in self.__dict__: self.__dict__["CreateTranslatorLogFile"] = value; return
		self._oleobj_.Invoke(*((113, LCID, 4, 0) + (value,) + ()))
	def _set_HierarchyConversionLevel(self, value):
		if "HierarchyConversionLevel" in self.__dict__: self.__dict__["HierarchyConversionLevel"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_ImportCADOptionsDialog(self, value):
		if "ImportCADOptionsDialog" in self.__dict__: self.__dict__["ImportCADOptionsDialog"] = value; return
		self._oleobj_.Invoke(*((105, LCID, 4, 0) + (value,) + ()))
	def _set_ImportedCADDataColor(self, value):
		if "ImportedCADDataColor" in self.__dict__: self.__dict__["ImportedCADDataColor"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_KeepEdgesBooleanUnite(self, value):
		if "KeepEdgesBooleanUnite" in self.__dict__: self.__dict__["KeepEdgesBooleanUnite"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_UseHealingOptionForCATIA(self, value):
		if "UseHealingOptionForCATIA" in self.__dict__: self.__dict__["UseHealingOptionForCATIA"] = value; return
		self._oleobj_.Invoke(*((109, LCID, 4, 0) + (value,) + ()))
	def _set_UseImportedCADDataColor(self, value):
		if "UseImportedCADDataColor" in self.__dict__: self.__dict__["UseImportedCADDataColor"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UseSolidAsSheetForCATIA(self, value):
		if "UseSolidAsSheetForCATIA" in self.__dict__: self.__dict__["UseSolidAsSheetForCATIA"] = value; return
		self._oleobj_.Invoke(*((110, LCID, 4, 0) + (value,) + ()))
	def _set_UseSolidTrimForSTEP(self, value):
		if "UseSolidTrimForSTEP" in self.__dict__: self.__dict__["UseSolidTrimForSTEP"] = value; return
		self._oleobj_.Invoke(*((112, LCID, 4, 0) + (value,) + ()))

	AssemblyOptionForCATIA = property(_get_AssemblyOptionForCATIA, _set_AssemblyOptionForCATIA)
	'''
	obsolete function

	:type: recurdyn.ProcessNet.ImportOptionCATIAAssemlyType
	'''
	CADAssemblyHierarchy = property(_get_CADAssemblyHierarchy, _set_CADAssemblyHierarchy)
	'''
	Use CAD assembly when importing CAD files

	:type: bool
	'''
	CADHierarchyDialog = property(_get_CADHierarchyDialog, _set_CADHierarchyDialog)
	'''
	Use assembly detail dialog

	:type: bool
	'''
	ConvertPrimitiveGeometriesWhenImportingCADFiles = property(_get_ConvertPrimitiveGeometriesWhenImportingCADFiles, _set_ConvertPrimitiveGeometriesWhenImportingCADFiles)
	'''
	Convert primitive bodies when importing CAD files

	:type: bool
	'''
	CreateTranslatorLogFile = property(_get_CreateTranslatorLogFile, _set_CreateTranslatorLogFile)
	'''
	Create translator log file

	:type: bool
	'''
	HierarchyConversionLevel = property(_get_HierarchyConversionLevel, _set_HierarchyConversionLevel)
	'''
	CAD assmebly conversion level

	:type: recurdyn.ProcessNet.CADAssemblyLevel
	'''
	ImportCADOptionsDialog = property(_get_ImportCADOptionsDialog, _set_ImportCADOptionsDialog)
	'''
	Use import CAD options dialog

	:type: bool
	'''
	ImportedCADDataColor = property(_get_ImportedCADDataColor, _set_ImportedCADDataColor)
	'''
	Imported CAD data color

	:type: int
	'''
	KeepEdgesBooleanUnite = property(_get_KeepEdgesBooleanUnite, _set_KeepEdgesBooleanUnite)
	'''
	Keep Edges when Boolean Unite Operation

	:type: bool
	'''
	TranslatorExportOptions = property(_get_TranslatorExportOptions, None)
	'''
	Translator Export Options

	:type: recurdyn.ProcessNet.ITranslatorExportOptions
	'''
	TranslatorImportOptions = property(_get_TranslatorImportOptions, None)
	'''
	Translator Import Options

	:type: recurdyn.ProcessNet.ITranslatorImportOptions
	'''
	UseHealingOptionForCATIA = property(_get_UseHealingOptionForCATIA, _set_UseHealingOptionForCATIA)
	'''
	obsolete function

	:type: bool
	'''
	UseImportedCADDataColor = property(_get_UseImportedCADDataColor, _set_UseImportedCADDataColor)
	'''
	Use imported CAD data color

	:type: bool
	'''
	UseSolidAsSheetForCATIA = property(_get_UseSolidAsSheetForCATIA, _set_UseSolidAsSheetForCATIA)
	'''
	obsolete function

	:type: bool
	'''
	UseSolidTrimForSTEP = property(_get_UseSolidTrimForSTEP, _set_UseSolidTrimForSTEP)
	'''
	obsolete function

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_AssemblyOptionForCATIA": _set_AssemblyOptionForCATIA,
		"_set_CADAssemblyHierarchy": _set_CADAssemblyHierarchy,
		"_set_CADHierarchyDialog": _set_CADHierarchyDialog,
		"_set_ConvertPrimitiveGeometriesWhenImportingCADFiles": _set_ConvertPrimitiveGeometriesWhenImportingCADFiles,
		"_set_CreateTranslatorLogFile": _set_CreateTranslatorLogFile,
		"_set_HierarchyConversionLevel": _set_HierarchyConversionLevel,
		"_set_ImportCADOptionsDialog": _set_ImportCADOptionsDialog,
		"_set_ImportedCADDataColor": _set_ImportedCADDataColor,
		"_set_KeepEdgesBooleanUnite": _set_KeepEdgesBooleanUnite,
		"_set_UseHealingOptionForCATIA": _set_UseHealingOptionForCATIA,
		"_set_UseImportedCADDataColor": _set_UseImportedCADDataColor,
		"_set_UseSolidAsSheetForCATIA": _set_UseSolidAsSheetForCATIA,
		"_set_UseSolidTrimForSTEP": _set_UseSolidTrimForSTEP,
	}
	_prop_map_get_ = {
		"AssemblyOptionForCATIA": (111, 2, (3, 0), (), "AssemblyOptionForCATIA", '{3FCF662A-AABA-49AE-966E-99F07E9C1F9C}'),
		"CADAssemblyHierarchy": (106, 2, (11, 0), (), "CADAssemblyHierarchy", None),
		"CADHierarchyDialog": (108, 2, (11, 0), (), "CADHierarchyDialog", None),
		"ConvertPrimitiveGeometriesWhenImportingCADFiles": (103, 2, (11, 0), (), "ConvertPrimitiveGeometriesWhenImportingCADFiles", None),
		"CreateTranslatorLogFile": (113, 2, (11, 0), (), "CreateTranslatorLogFile", None),
		"HierarchyConversionLevel": (107, 2, (3, 0), (), "HierarchyConversionLevel", '{BBBFE795-B968-4308-A6A6-F1D08F52A5D2}'),
		"ImportCADOptionsDialog": (105, 2, (11, 0), (), "ImportCADOptionsDialog", None),
		"ImportedCADDataColor": (102, 2, (19, 0), (), "ImportedCADDataColor", None),
		"KeepEdgesBooleanUnite": (104, 2, (11, 0), (), "KeepEdgesBooleanUnite", None),
		"TranslatorExportOptions": (115, 2, (9, 0), (), "TranslatorExportOptions", '{BF6D6355-72CE-4B22-B038-CDEAA00F7CE8}'),
		"TranslatorImportOptions": (114, 2, (9, 0), (), "TranslatorImportOptions", '{FE0C7461-8AFD-47CA-A284-C05BD15B68FC}'),
		"UseHealingOptionForCATIA": (109, 2, (11, 0), (), "UseHealingOptionForCATIA", None),
		"UseImportedCADDataColor": (101, 2, (11, 0), (), "UseImportedCADDataColor", None),
		"UseSolidAsSheetForCATIA": (110, 2, (11, 0), (), "UseSolidAsSheetForCATIA", None),
		"UseSolidTrimForSTEP": (112, 2, (11, 0), (), "UseSolidTrimForSTEP", None),
	}
	_prop_map_put_ = {
		"AssemblyOptionForCATIA": ((111, LCID, 4, 0),()),
		"CADAssemblyHierarchy": ((106, LCID, 4, 0),()),
		"CADHierarchyDialog": ((108, LCID, 4, 0),()),
		"ConvertPrimitiveGeometriesWhenImportingCADFiles": ((103, LCID, 4, 0),()),
		"CreateTranslatorLogFile": ((113, LCID, 4, 0),()),
		"HierarchyConversionLevel": ((107, LCID, 4, 0),()),
		"ImportCADOptionsDialog": ((105, LCID, 4, 0),()),
		"ImportedCADDataColor": ((102, LCID, 4, 0),()),
		"KeepEdgesBooleanUnite": ((104, LCID, 4, 0),()),
		"UseHealingOptionForCATIA": ((109, LCID, 4, 0),()),
		"UseImportedCADDataColor": ((101, LCID, 4, 0),()),
		"UseSolidAsSheetForCATIA": ((110, LCID, 4, 0),()),
		"UseSolidTrimForSTEP": ((112, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IModelSettingDatabase(DispatchBaseClass):
	'''Model Setting - Database'''
	CLSID = IID('{4DFAE9F4-7DC9-469C-9FEF-6DBB2575E0CA}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_DisplayDigitNumber(self):
		return self._ApplyTypes_(*(134, 2, (3, 0), (), "DisplayDigitNumber", None))
	def _get_ShowDatabaseAR(self):
		return self._ApplyTypes_(*(128, 2, (11, 0), (), "ShowDatabaseAR", None))
	def _get_ShowDatabaseAll(self):
		return self._ApplyTypes_(*(101, 2, (11, 0), (), "ShowDatabaseAll", None))
	def _get_ShowDatabaseBC(self):
		return self._ApplyTypes_(*(123, 2, (11, 0), (), "ShowDatabaseBC", None))
	def _get_ShowDatabaseBody(self):
		return self._ApplyTypes_(*(102, 2, (11, 0), (), "ShowDatabaseBody", None))
	def _get_ShowDatabaseConstraint(self):
		return self._ApplyTypes_(*(125, 2, (11, 0), (), "ShowDatabaseConstraint", None))
	def _get_ShowDatabaseContact(self):
		return self._ApplyTypes_(*(105, 2, (11, 0), (), "ShowDatabaseContact", None))
	def _get_ShowDatabaseCoupler(self):
		return self._ApplyTypes_(*(126, 2, (11, 0), (), "ShowDatabaseCoupler", None))
	def _get_ShowDatabaseDP(self):
		return self._ApplyTypes_(*(127, 2, (11, 0), (), "ShowDatabaseDP", None))
	def _get_ShowDatabaseDV(self):
		return self._ApplyTypes_(*(132, 2, (11, 0), (), "ShowDatabaseDV", None))
	def _get_ShowDatabaseDiffEq(self):
		return self._ApplyTypes_(*(119, 2, (11, 0), (), "ShowDatabaseDiffEq", None))
	def _get_ShowDatabaseEx(self):
		return self._ApplyTypes_(*(117, 2, (11, 0), (), "ShowDatabaseEx", None))
	def _get_ShowDatabaseForce(self):
		return self._ApplyTypes_(*(104, 2, (11, 0), (), "ShowDatabaseForce", None))
	def _get_ShowDatabaseGPIN(self):
		return self._ApplyTypes_(*(110, 2, (11, 0), (), "ShowDatabaseGPIN", None))
	def _get_ShowDatabaseGPOUT(self):
		return self._ApplyTypes_(*(111, 2, (11, 0), (), "ShowDatabaseGPOUT", None))
	def _get_ShowDatabaseGroup(self):
		return self._ApplyTypes_(*(129, 2, (11, 0), (), "ShowDatabaseGroup", None))
	def _get_ShowDatabaseJoint(self):
		return self._ApplyTypes_(*(103, 2, (11, 0), (), "ShowDatabaseJoint", None))
	def _get_ShowDatabaseNodeConstraint(self):
		return self._ApplyTypes_(*(135, 2, (11, 0), (), "ShowDatabaseNodeConstraint", None))
	def _get_ShowDatabasePI(self):
		return self._ApplyTypes_(*(124, 2, (11, 0), (), "ShowDatabasePI", None))
	def _get_ShowDatabasePIN(self):
		return self._ApplyTypes_(*(108, 2, (11, 0), (), "ShowDatabasePIN", None))
	def _get_ShowDatabasePOUT(self):
		return self._ApplyTypes_(*(109, 2, (11, 0), (), "ShowDatabasePOUT", None))
	def _get_ShowDatabasePP(self):
		return self._ApplyTypes_(*(107, 2, (11, 0), (), "ShowDatabasePP", None))
	def _get_ShowDatabasePPC(self):
		return self._ApplyTypes_(*(114, 2, (11, 0), (), "ShowDatabasePPC", None))
	def _get_ShowDatabasePV(self):
		return self._ApplyTypes_(*(106, 2, (11, 0), (), "ShowDatabasePV", None))
	def _get_ShowDatabasePVC(self):
		return self._ApplyTypes_(*(115, 2, (11, 0), (), "ShowDatabasePVC", None))
	def _get_ShowDatabaseRequest(self):
		return self._ApplyTypes_(*(112, 2, (11, 0), (), "ShowDatabaseRequest", None))
	def _get_ShowDatabaseScope(self):
		return self._ApplyTypes_(*(121, 2, (11, 0), (), "ShowDatabaseScope", None))
	def _get_ShowDatabaseSensor(self):
		return self._ApplyTypes_(*(122, 2, (11, 0), (), "ShowDatabaseSensor", None))
	def _get_ShowDatabaseSpline(self):
		return self._ApplyTypes_(*(113, 2, (11, 0), (), "ShowDatabaseSpline", None))
	def _get_ShowDatabaseString(self):
		return self._ApplyTypes_(*(116, 2, (11, 0), (), "ShowDatabaseString", None))
	def _get_ShowDatabaseSubsystem(self):
		return self._ApplyTypes_(*(130, 2, (11, 0), (), "ShowDatabaseSubsystem", None))
	def _get_ShowDatabaseUSUB(self):
		return self._ApplyTypes_(*(118, 2, (11, 0), (), "ShowDatabaseUSUB", None))
	def _get_ShowDatabaseVarEq(self):
		return self._ApplyTypes_(*(120, 2, (11, 0), (), "ShowDatabaseVarEq", None))
	def _get_ShowDetailInformation(self):
		return self._ApplyTypes_(*(133, 2, (11, 0), (), "ShowDetailInformation", None))
	def _get_Sort(self):
		return self._ApplyTypes_(*(131, 2, (3, 0), (), "Sort", '{BB63AA1B-70C6-49EB-B3B4-2B651AA9EFF7}'))

	def _set_DisplayDigitNumber(self, value):
		if "DisplayDigitNumber" in self.__dict__: self.__dict__["DisplayDigitNumber"] = value; return
		self._oleobj_.Invoke(*((134, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseAR(self, value):
		if "ShowDatabaseAR" in self.__dict__: self.__dict__["ShowDatabaseAR"] = value; return
		self._oleobj_.Invoke(*((128, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseAll(self, value):
		if "ShowDatabaseAll" in self.__dict__: self.__dict__["ShowDatabaseAll"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseBC(self, value):
		if "ShowDatabaseBC" in self.__dict__: self.__dict__["ShowDatabaseBC"] = value; return
		self._oleobj_.Invoke(*((123, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseBody(self, value):
		if "ShowDatabaseBody" in self.__dict__: self.__dict__["ShowDatabaseBody"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseConstraint(self, value):
		if "ShowDatabaseConstraint" in self.__dict__: self.__dict__["ShowDatabaseConstraint"] = value; return
		self._oleobj_.Invoke(*((125, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseContact(self, value):
		if "ShowDatabaseContact" in self.__dict__: self.__dict__["ShowDatabaseContact"] = value; return
		self._oleobj_.Invoke(*((105, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseCoupler(self, value):
		if "ShowDatabaseCoupler" in self.__dict__: self.__dict__["ShowDatabaseCoupler"] = value; return
		self._oleobj_.Invoke(*((126, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseDP(self, value):
		if "ShowDatabaseDP" in self.__dict__: self.__dict__["ShowDatabaseDP"] = value; return
		self._oleobj_.Invoke(*((127, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseDV(self, value):
		if "ShowDatabaseDV" in self.__dict__: self.__dict__["ShowDatabaseDV"] = value; return
		self._oleobj_.Invoke(*((132, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseDiffEq(self, value):
		if "ShowDatabaseDiffEq" in self.__dict__: self.__dict__["ShowDatabaseDiffEq"] = value; return
		self._oleobj_.Invoke(*((119, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseEx(self, value):
		if "ShowDatabaseEx" in self.__dict__: self.__dict__["ShowDatabaseEx"] = value; return
		self._oleobj_.Invoke(*((117, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseForce(self, value):
		if "ShowDatabaseForce" in self.__dict__: self.__dict__["ShowDatabaseForce"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseGPIN(self, value):
		if "ShowDatabaseGPIN" in self.__dict__: self.__dict__["ShowDatabaseGPIN"] = value; return
		self._oleobj_.Invoke(*((110, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseGPOUT(self, value):
		if "ShowDatabaseGPOUT" in self.__dict__: self.__dict__["ShowDatabaseGPOUT"] = value; return
		self._oleobj_.Invoke(*((111, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseGroup(self, value):
		if "ShowDatabaseGroup" in self.__dict__: self.__dict__["ShowDatabaseGroup"] = value; return
		self._oleobj_.Invoke(*((129, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseJoint(self, value):
		if "ShowDatabaseJoint" in self.__dict__: self.__dict__["ShowDatabaseJoint"] = value; return
		self._oleobj_.Invoke(*((103, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseNodeConstraint(self, value):
		if "ShowDatabaseNodeConstraint" in self.__dict__: self.__dict__["ShowDatabaseNodeConstraint"] = value; return
		self._oleobj_.Invoke(*((135, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabasePI(self, value):
		if "ShowDatabasePI" in self.__dict__: self.__dict__["ShowDatabasePI"] = value; return
		self._oleobj_.Invoke(*((124, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabasePIN(self, value):
		if "ShowDatabasePIN" in self.__dict__: self.__dict__["ShowDatabasePIN"] = value; return
		self._oleobj_.Invoke(*((108, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabasePOUT(self, value):
		if "ShowDatabasePOUT" in self.__dict__: self.__dict__["ShowDatabasePOUT"] = value; return
		self._oleobj_.Invoke(*((109, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabasePP(self, value):
		if "ShowDatabasePP" in self.__dict__: self.__dict__["ShowDatabasePP"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabasePPC(self, value):
		if "ShowDatabasePPC" in self.__dict__: self.__dict__["ShowDatabasePPC"] = value; return
		self._oleobj_.Invoke(*((114, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabasePV(self, value):
		if "ShowDatabasePV" in self.__dict__: self.__dict__["ShowDatabasePV"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabasePVC(self, value):
		if "ShowDatabasePVC" in self.__dict__: self.__dict__["ShowDatabasePVC"] = value; return
		self._oleobj_.Invoke(*((115, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseRequest(self, value):
		if "ShowDatabaseRequest" in self.__dict__: self.__dict__["ShowDatabaseRequest"] = value; return
		self._oleobj_.Invoke(*((112, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseScope(self, value):
		if "ShowDatabaseScope" in self.__dict__: self.__dict__["ShowDatabaseScope"] = value; return
		self._oleobj_.Invoke(*((121, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseSensor(self, value):
		if "ShowDatabaseSensor" in self.__dict__: self.__dict__["ShowDatabaseSensor"] = value; return
		self._oleobj_.Invoke(*((122, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseSpline(self, value):
		if "ShowDatabaseSpline" in self.__dict__: self.__dict__["ShowDatabaseSpline"] = value; return
		self._oleobj_.Invoke(*((113, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseString(self, value):
		if "ShowDatabaseString" in self.__dict__: self.__dict__["ShowDatabaseString"] = value; return
		self._oleobj_.Invoke(*((116, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseSubsystem(self, value):
		if "ShowDatabaseSubsystem" in self.__dict__: self.__dict__["ShowDatabaseSubsystem"] = value; return
		self._oleobj_.Invoke(*((130, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseUSUB(self, value):
		if "ShowDatabaseUSUB" in self.__dict__: self.__dict__["ShowDatabaseUSUB"] = value; return
		self._oleobj_.Invoke(*((118, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDatabaseVarEq(self, value):
		if "ShowDatabaseVarEq" in self.__dict__: self.__dict__["ShowDatabaseVarEq"] = value; return
		self._oleobj_.Invoke(*((120, LCID, 4, 0) + (value,) + ()))
	def _set_ShowDetailInformation(self, value):
		if "ShowDetailInformation" in self.__dict__: self.__dict__["ShowDetailInformation"] = value; return
		self._oleobj_.Invoke(*((133, LCID, 4, 0) + (value,) + ()))
	def _set_Sort(self, value):
		if "Sort" in self.__dict__: self.__dict__["Sort"] = value; return
		self._oleobj_.Invoke(*((131, LCID, 4, 0) + (value,) + ()))

	DisplayDigitNumber = property(_get_DisplayDigitNumber, _set_DisplayDigitNumber)
	'''
	Digit number of the display information

	:type: int
	'''
	ShowDatabaseAR = property(_get_ShowDatabaseAR, _set_ShowDatabaseAR)
	'''
	Show ARs in the database window

	:type: bool
	'''
	ShowDatabaseAll = property(_get_ShowDatabaseAll, _set_ShowDatabaseAll)
	'''
	Show all entities in the database window

	:type: bool
	'''
	ShowDatabaseBC = property(_get_ShowDatabaseBC, _set_ShowDatabaseBC)
	'''
	Show BCs in the database window

	:type: bool
	'''
	ShowDatabaseBody = property(_get_ShowDatabaseBody, _set_ShowDatabaseBody)
	'''
	Show bodies in the database window

	:type: bool
	'''
	ShowDatabaseConstraint = property(_get_ShowDatabaseConstraint, _set_ShowDatabaseConstraint)
	'''
	Show Constraints in the database window

	:type: bool
	'''
	ShowDatabaseContact = property(_get_ShowDatabaseContact, _set_ShowDatabaseContact)
	'''
	Show contacts in the database window

	:type: bool
	'''
	ShowDatabaseCoupler = property(_get_ShowDatabaseCoupler, _set_ShowDatabaseCoupler)
	'''
	Show Couplers in the database window

	:type: bool
	'''
	ShowDatabaseDP = property(_get_ShowDatabaseDP, _set_ShowDatabaseDP)
	'''
	Show DPs in the database window

	:type: bool
	'''
	ShowDatabaseDV = property(_get_ShowDatabaseDV, _set_ShowDatabaseDV)
	'''
	Show DVs in the database window

	:type: bool
	'''
	ShowDatabaseDiffEq = property(_get_ShowDatabaseDiffEq, _set_ShowDatabaseDiffEq)
	'''
	Show Diff.Eqs in the database window

	:type: bool
	'''
	ShowDatabaseEx = property(_get_ShowDatabaseEx, _set_ShowDatabaseEx)
	'''
	Show Expressions in the database window

	:type: bool
	'''
	ShowDatabaseForce = property(_get_ShowDatabaseForce, _set_ShowDatabaseForce)
	'''
	Show forces in the database window

	:type: bool
	'''
	ShowDatabaseGPIN = property(_get_ShowDatabaseGPIN, _set_ShowDatabaseGPIN)
	'''
	Show GPINs in the database window

	:type: bool
	'''
	ShowDatabaseGPOUT = property(_get_ShowDatabaseGPOUT, _set_ShowDatabaseGPOUT)
	'''
	Show GPOUTs in the database window

	:type: bool
	'''
	ShowDatabaseGroup = property(_get_ShowDatabaseGroup, _set_ShowDatabaseGroup)
	'''
	Show Groups in the database window

	:type: bool
	'''
	ShowDatabaseJoint = property(_get_ShowDatabaseJoint, _set_ShowDatabaseJoint)
	'''
	Show joints in the database window

	:type: bool
	'''
	ShowDatabaseNodeConstraint = property(_get_ShowDatabaseNodeConstraint, _set_ShowDatabaseNodeConstraint)
	'''
	Show NCon in the database window

	:type: bool
	'''
	ShowDatabasePI = property(_get_ShowDatabasePI, _set_ShowDatabasePI)
	'''
	Show PIs in the database window

	:type: bool
	'''
	ShowDatabasePIN = property(_get_ShowDatabasePIN, _set_ShowDatabasePIN)
	'''
	Show PINs in the database window

	:type: bool
	'''
	ShowDatabasePOUT = property(_get_ShowDatabasePOUT, _set_ShowDatabasePOUT)
	'''
	Show POUTs in the database window

	:type: bool
	'''
	ShowDatabasePP = property(_get_ShowDatabasePP, _set_ShowDatabasePP)
	'''
	Show PPs in the database window

	:type: bool
	'''
	ShowDatabasePPC = property(_get_ShowDatabasePPC, _set_ShowDatabasePPC)
	'''
	Show PPCs in the database window

	:type: bool
	'''
	ShowDatabasePV = property(_get_ShowDatabasePV, _set_ShowDatabasePV)
	'''
	Show PVs in the database window

	:type: bool
	'''
	ShowDatabasePVC = property(_get_ShowDatabasePVC, _set_ShowDatabasePVC)
	'''
	Show PVCs in the database window

	:type: bool
	'''
	ShowDatabaseRequest = property(_get_ShowDatabaseRequest, _set_ShowDatabaseRequest)
	'''
	Show Requests in the database window

	:type: bool
	'''
	ShowDatabaseScope = property(_get_ShowDatabaseScope, _set_ShowDatabaseScope)
	'''
	Show Scopes in the database window

	:type: bool
	'''
	ShowDatabaseSensor = property(_get_ShowDatabaseSensor, _set_ShowDatabaseSensor)
	'''
	Show Sensors in the database window

	:type: bool
	'''
	ShowDatabaseSpline = property(_get_ShowDatabaseSpline, _set_ShowDatabaseSpline)
	'''
	Show Splines in the database window

	:type: bool
	'''
	ShowDatabaseString = property(_get_ShowDatabaseString, _set_ShowDatabaseString)
	'''
	Show Strings in the database window

	:type: bool
	'''
	ShowDatabaseSubsystem = property(_get_ShowDatabaseSubsystem, _set_ShowDatabaseSubsystem)
	'''
	Show Subsystems in the database window

	:type: bool
	'''
	ShowDatabaseUSUB = property(_get_ShowDatabaseUSUB, _set_ShowDatabaseUSUB)
	'''
	Show USUBs in the database window

	:type: bool
	'''
	ShowDatabaseVarEq = property(_get_ShowDatabaseVarEq, _set_ShowDatabaseVarEq)
	'''
	Show Var.Eqs in the database window

	:type: bool
	'''
	ShowDetailInformation = property(_get_ShowDetailInformation, _set_ShowDetailInformation)
	'''
	Show detail information in the database window

	:type: bool
	'''
	Sort = property(_get_Sort, _set_Sort)
	'''
	Sort entities in the database window

	:type: recurdyn.ProcessNet.DatabaseSortType
	'''

	_prop_map_set_function_ = {
		"_set_DisplayDigitNumber": _set_DisplayDigitNumber,
		"_set_ShowDatabaseAR": _set_ShowDatabaseAR,
		"_set_ShowDatabaseAll": _set_ShowDatabaseAll,
		"_set_ShowDatabaseBC": _set_ShowDatabaseBC,
		"_set_ShowDatabaseBody": _set_ShowDatabaseBody,
		"_set_ShowDatabaseConstraint": _set_ShowDatabaseConstraint,
		"_set_ShowDatabaseContact": _set_ShowDatabaseContact,
		"_set_ShowDatabaseCoupler": _set_ShowDatabaseCoupler,
		"_set_ShowDatabaseDP": _set_ShowDatabaseDP,
		"_set_ShowDatabaseDV": _set_ShowDatabaseDV,
		"_set_ShowDatabaseDiffEq": _set_ShowDatabaseDiffEq,
		"_set_ShowDatabaseEx": _set_ShowDatabaseEx,
		"_set_ShowDatabaseForce": _set_ShowDatabaseForce,
		"_set_ShowDatabaseGPIN": _set_ShowDatabaseGPIN,
		"_set_ShowDatabaseGPOUT": _set_ShowDatabaseGPOUT,
		"_set_ShowDatabaseGroup": _set_ShowDatabaseGroup,
		"_set_ShowDatabaseJoint": _set_ShowDatabaseJoint,
		"_set_ShowDatabaseNodeConstraint": _set_ShowDatabaseNodeConstraint,
		"_set_ShowDatabasePI": _set_ShowDatabasePI,
		"_set_ShowDatabasePIN": _set_ShowDatabasePIN,
		"_set_ShowDatabasePOUT": _set_ShowDatabasePOUT,
		"_set_ShowDatabasePP": _set_ShowDatabasePP,
		"_set_ShowDatabasePPC": _set_ShowDatabasePPC,
		"_set_ShowDatabasePV": _set_ShowDatabasePV,
		"_set_ShowDatabasePVC": _set_ShowDatabasePVC,
		"_set_ShowDatabaseRequest": _set_ShowDatabaseRequest,
		"_set_ShowDatabaseScope": _set_ShowDatabaseScope,
		"_set_ShowDatabaseSensor": _set_ShowDatabaseSensor,
		"_set_ShowDatabaseSpline": _set_ShowDatabaseSpline,
		"_set_ShowDatabaseString": _set_ShowDatabaseString,
		"_set_ShowDatabaseSubsystem": _set_ShowDatabaseSubsystem,
		"_set_ShowDatabaseUSUB": _set_ShowDatabaseUSUB,
		"_set_ShowDatabaseVarEq": _set_ShowDatabaseVarEq,
		"_set_ShowDetailInformation": _set_ShowDetailInformation,
		"_set_Sort": _set_Sort,
	}
	_prop_map_get_ = {
		"DisplayDigitNumber": (134, 2, (3, 0), (), "DisplayDigitNumber", None),
		"ShowDatabaseAR": (128, 2, (11, 0), (), "ShowDatabaseAR", None),
		"ShowDatabaseAll": (101, 2, (11, 0), (), "ShowDatabaseAll", None),
		"ShowDatabaseBC": (123, 2, (11, 0), (), "ShowDatabaseBC", None),
		"ShowDatabaseBody": (102, 2, (11, 0), (), "ShowDatabaseBody", None),
		"ShowDatabaseConstraint": (125, 2, (11, 0), (), "ShowDatabaseConstraint", None),
		"ShowDatabaseContact": (105, 2, (11, 0), (), "ShowDatabaseContact", None),
		"ShowDatabaseCoupler": (126, 2, (11, 0), (), "ShowDatabaseCoupler", None),
		"ShowDatabaseDP": (127, 2, (11, 0), (), "ShowDatabaseDP", None),
		"ShowDatabaseDV": (132, 2, (11, 0), (), "ShowDatabaseDV", None),
		"ShowDatabaseDiffEq": (119, 2, (11, 0), (), "ShowDatabaseDiffEq", None),
		"ShowDatabaseEx": (117, 2, (11, 0), (), "ShowDatabaseEx", None),
		"ShowDatabaseForce": (104, 2, (11, 0), (), "ShowDatabaseForce", None),
		"ShowDatabaseGPIN": (110, 2, (11, 0), (), "ShowDatabaseGPIN", None),
		"ShowDatabaseGPOUT": (111, 2, (11, 0), (), "ShowDatabaseGPOUT", None),
		"ShowDatabaseGroup": (129, 2, (11, 0), (), "ShowDatabaseGroup", None),
		"ShowDatabaseJoint": (103, 2, (11, 0), (), "ShowDatabaseJoint", None),
		"ShowDatabaseNodeConstraint": (135, 2, (11, 0), (), "ShowDatabaseNodeConstraint", None),
		"ShowDatabasePI": (124, 2, (11, 0), (), "ShowDatabasePI", None),
		"ShowDatabasePIN": (108, 2, (11, 0), (), "ShowDatabasePIN", None),
		"ShowDatabasePOUT": (109, 2, (11, 0), (), "ShowDatabasePOUT", None),
		"ShowDatabasePP": (107, 2, (11, 0), (), "ShowDatabasePP", None),
		"ShowDatabasePPC": (114, 2, (11, 0), (), "ShowDatabasePPC", None),
		"ShowDatabasePV": (106, 2, (11, 0), (), "ShowDatabasePV", None),
		"ShowDatabasePVC": (115, 2, (11, 0), (), "ShowDatabasePVC", None),
		"ShowDatabaseRequest": (112, 2, (11, 0), (), "ShowDatabaseRequest", None),
		"ShowDatabaseScope": (121, 2, (11, 0), (), "ShowDatabaseScope", None),
		"ShowDatabaseSensor": (122, 2, (11, 0), (), "ShowDatabaseSensor", None),
		"ShowDatabaseSpline": (113, 2, (11, 0), (), "ShowDatabaseSpline", None),
		"ShowDatabaseString": (116, 2, (11, 0), (), "ShowDatabaseString", None),
		"ShowDatabaseSubsystem": (130, 2, (11, 0), (), "ShowDatabaseSubsystem", None),
		"ShowDatabaseUSUB": (118, 2, (11, 0), (), "ShowDatabaseUSUB", None),
		"ShowDatabaseVarEq": (120, 2, (11, 0), (), "ShowDatabaseVarEq", None),
		"ShowDetailInformation": (133, 2, (11, 0), (), "ShowDetailInformation", None),
		"Sort": (131, 2, (3, 0), (), "Sort", '{BB63AA1B-70C6-49EB-B3B4-2B651AA9EFF7}'),
	}
	_prop_map_put_ = {
		"DisplayDigitNumber": ((134, LCID, 4, 0),()),
		"ShowDatabaseAR": ((128, LCID, 4, 0),()),
		"ShowDatabaseAll": ((101, LCID, 4, 0),()),
		"ShowDatabaseBC": ((123, LCID, 4, 0),()),
		"ShowDatabaseBody": ((102, LCID, 4, 0),()),
		"ShowDatabaseConstraint": ((125, LCID, 4, 0),()),
		"ShowDatabaseContact": ((105, LCID, 4, 0),()),
		"ShowDatabaseCoupler": ((126, LCID, 4, 0),()),
		"ShowDatabaseDP": ((127, LCID, 4, 0),()),
		"ShowDatabaseDV": ((132, LCID, 4, 0),()),
		"ShowDatabaseDiffEq": ((119, LCID, 4, 0),()),
		"ShowDatabaseEx": ((117, LCID, 4, 0),()),
		"ShowDatabaseForce": ((104, LCID, 4, 0),()),
		"ShowDatabaseGPIN": ((110, LCID, 4, 0),()),
		"ShowDatabaseGPOUT": ((111, LCID, 4, 0),()),
		"ShowDatabaseGroup": ((129, LCID, 4, 0),()),
		"ShowDatabaseJoint": ((103, LCID, 4, 0),()),
		"ShowDatabaseNodeConstraint": ((135, LCID, 4, 0),()),
		"ShowDatabasePI": ((124, LCID, 4, 0),()),
		"ShowDatabasePIN": ((108, LCID, 4, 0),()),
		"ShowDatabasePOUT": ((109, LCID, 4, 0),()),
		"ShowDatabasePP": ((107, LCID, 4, 0),()),
		"ShowDatabasePPC": ((114, LCID, 4, 0),()),
		"ShowDatabasePV": ((106, LCID, 4, 0),()),
		"ShowDatabasePVC": ((115, LCID, 4, 0),()),
		"ShowDatabaseRequest": ((112, LCID, 4, 0),()),
		"ShowDatabaseScope": ((121, LCID, 4, 0),()),
		"ShowDatabaseSensor": ((122, LCID, 4, 0),()),
		"ShowDatabaseSpline": ((113, LCID, 4, 0),()),
		"ShowDatabaseString": ((116, LCID, 4, 0),()),
		"ShowDatabaseSubsystem": ((130, LCID, 4, 0),()),
		"ShowDatabaseUSUB": ((118, LCID, 4, 0),()),
		"ShowDatabaseVarEq": ((120, LCID, 4, 0),()),
		"ShowDetailInformation": ((133, LCID, 4, 0),()),
		"Sort": ((131, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IModelSettingDefault(DispatchBaseClass):
	'''Model Setting - Set As Default'''
	CLSID = IID('{75368D13-6E62-4893-A825-339547DA46C4}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_All(self):
		return self._ApplyTypes_(*(108, 2, (11, 0), (), "All", None))
	def _get_CAD(self):
		return self._ApplyTypes_(*(109, 2, (11, 0), (), "CAD", None))
	def _get_Database(self):
		return self._ApplyTypes_(*(103, 2, (11, 0), (), "Database", None))
	def _get_Display(self):
		return self._ApplyTypes_(*(102, 2, (11, 0), (), "Display", None))
	def _get_Flexibility(self):
		return self._ApplyTypes_(*(106, 2, (11, 0), (), "Flexibility", None))
	def _get_Gravity(self):
		return self._ApplyTypes_(*(101, 2, (11, 0), (), "Gravity", None))
	def _get_Light(self):
		return self._ApplyTypes_(*(104, 2, (11, 0), (), "Light", None))
	def _get_ProcessNet(self):
		return self._ApplyTypes_(*(107, 2, (11, 0), (), "ProcessNet", None))
	def _get_Simulation(self):
		return self._ApplyTypes_(*(105, 2, (11, 0), (), "Simulation", None))

	def _set_All(self, value):
		if "All" in self.__dict__: self.__dict__["All"] = value; return
		self._oleobj_.Invoke(*((108, LCID, 4, 0) + (value,) + ()))
	def _set_CAD(self, value):
		if "CAD" in self.__dict__: self.__dict__["CAD"] = value; return
		self._oleobj_.Invoke(*((109, LCID, 4, 0) + (value,) + ()))
	def _set_Database(self, value):
		if "Database" in self.__dict__: self.__dict__["Database"] = value; return
		self._oleobj_.Invoke(*((103, LCID, 4, 0) + (value,) + ()))
	def _set_Display(self, value):
		if "Display" in self.__dict__: self.__dict__["Display"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Flexibility(self, value):
		if "Flexibility" in self.__dict__: self.__dict__["Flexibility"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))
	def _set_Gravity(self, value):
		if "Gravity" in self.__dict__: self.__dict__["Gravity"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_Light(self, value):
		if "Light" in self.__dict__: self.__dict__["Light"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_ProcessNet(self, value):
		if "ProcessNet" in self.__dict__: self.__dict__["ProcessNet"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_Simulation(self, value):
		if "Simulation" in self.__dict__: self.__dict__["Simulation"] = value; return
		self._oleobj_.Invoke(*((105, LCID, 4, 0) + (value,) + ()))

	All = property(_get_All, _set_All)
	CAD = property(_get_CAD, _set_CAD)
	Database = property(_get_Database, _set_Database)
	Display = property(_get_Display, _set_Display)
	Flexibility = property(_get_Flexibility, _set_Flexibility)
	Gravity = property(_get_Gravity, _set_Gravity)
	Light = property(_get_Light, _set_Light)
	ProcessNet = property(_get_ProcessNet, _set_ProcessNet)
	Simulation = property(_get_Simulation, _set_Simulation)

	_prop_map_set_function_ = {
		"_set_All": _set_All,
		"_set_CAD": _set_CAD,
		"_set_Database": _set_Database,
		"_set_Display": _set_Display,
		"_set_Flexibility": _set_Flexibility,
		"_set_Gravity": _set_Gravity,
		"_set_Light": _set_Light,
		"_set_ProcessNet": _set_ProcessNet,
		"_set_Simulation": _set_Simulation,
	}
	_prop_map_get_ = {
		"All": (108, 2, (11, 0), (), "All", None),
		"CAD": (109, 2, (11, 0), (), "CAD", None),
		"Database": (103, 2, (11, 0), (), "Database", None),
		"Display": (102, 2, (11, 0), (), "Display", None),
		"Flexibility": (106, 2, (11, 0), (), "Flexibility", None),
		"Gravity": (101, 2, (11, 0), (), "Gravity", None),
		"Light": (104, 2, (11, 0), (), "Light", None),
		"ProcessNet": (107, 2, (11, 0), (), "ProcessNet", None),
		"Simulation": (105, 2, (11, 0), (), "Simulation", None),
	}
	_prop_map_put_ = {
		"All": ((108, LCID, 4, 0),()),
		"CAD": ((109, LCID, 4, 0),()),
		"Database": ((103, LCID, 4, 0),()),
		"Display": ((102, LCID, 4, 0),()),
		"Flexibility": ((106, LCID, 4, 0),()),
		"Gravity": ((101, LCID, 4, 0),()),
		"Light": ((104, LCID, 4, 0),()),
		"ProcessNet": ((107, LCID, 4, 0),()),
		"Simulation": ((105, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IModelSettingDisplay(DispatchBaseClass):
	'''Model Setting - Display'''
	CLSID = IID('{845806A7-7BB3-4643-878D-CE4247682409}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def UpdateGridSetting(self):
		'''
		Update Grid Setting
		'''
		return self._oleobj_.InvokeTypes(115, LCID, 1, (24, 0), (),)


	def _get_AccelerateRenderingInViewControl(self):
		return self._ApplyTypes_(*(150, 2, (11, 0), (), "AccelerateRenderingInViewControl", None))
	def _get_AlignCenterMarkerOrientationWithBodyPrincipalAxis(self):
		return self._ApplyTypes_(*(149, 2, (11, 0), (), "AlignCenterMarkerOrientationWithBodyPrincipalAxis", None))
	def _get_ArrowColor(self):
		return self._ApplyTypes_(*(128, 2, (19, 0), (), "ArrowColor", None))
	def _get_AutoFitWhenChangingWorkingPlane(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "AutoFitWhenChangingWorkingPlane", None))
	def _get_BackgroundColor(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "BackgroundColor", '{1972ACE7-FAA6-4C64-A067-C0B2EB23C93A}'))
	def _get_BackgroundPicturePathName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "BackgroundPicturePathName", None))
	def _get_ClippingVolumeFarFactor(self):
		return self._ApplyTypes_(*(118, 2, (4, 0), (), "ClippingVolumeFarFactor", None))
	def _get_ClippingVolumeNearFactor(self):
		return self._ApplyTypes_(*(117, 2, (4, 0), (), "ClippingVolumeNearFactor", None))
	def _get_ContractSurfaceNormalDirectionValue(self):
		return self._ApplyTypes_(*(130, 2, (19, 0), (), "ContractSurfaceNormalDirectionValue", None))
	def _get_CreatedBodyColorType(self):
		return self._ApplyTypes_(*(125, 2, (3, 0), (), "CreatedBodyColorType", '{80EEDCEF-0244-454F-8125-8078A319E63C}'))
	def _get_CurveDetailLevel(self):
		return self._ApplyTypes_(*(123, 2, (3, 0), (), "CurveDetailLevel", '{BA789320-DC38-48E9-88AB-1178877903FD}'))
	def _get_ErrorTolerance(self):
		return self._ApplyTypes_(*(147, 2, (5, 0), (), "ErrorTolerance", None))
	def _get_FontSize(self):
		return self._ApplyTypes_(*(158, 2, (19, 0), (), "FontSize", None))
	def _get_FontSizeInWorkingWindow(self):
		return self._ApplyTypes_(*(119, 2, (19, 0), (), "FontSizeInWorkingWindow", None))
	def _get_ForceDisplayColor(self):
		return self._ApplyTypes_(*(135, 2, (19, 0), (), "ForceDisplayColor", None))
	def _get_ForceDisplayScale(self):
		return self._ApplyTypes_(*(136, 2, (5, 0), (), "ForceDisplayScale", None))
	def _get_ForceDisplayValueDecimal(self):
		return self._ApplyTypes_(*(143, 2, (3, 0), (), "ForceDisplayValueDecimal", None))
	def _get_ForceDisplayWidth(self):
		return self._ApplyTypes_(*(137, 2, (5, 0), (), "ForceDisplayWidth", None))
	def _get_GeometryDetailLevel(self):
		return self._ApplyTypes_(*(124, 2, (3, 0), (), "GeometryDetailLevel", '{709F4BB5-B608-423B-8F78-40615C3C8D1E}'))
	def _get_GridAngle(self):
		return self._ApplyTypes_(*(108, 2, (5, 0), (), "GridAngle", None))
	def _get_GridColor(self):
		return self._ApplyTypes_(*(112, 2, (19, 0), (), "GridColor", None))
	def _get_GridHeight(self):
		return self._ApplyTypes_(*(106, 2, (5, 0), (), "GridHeight", None))
	def _get_GridRadius(self):
		return self._ApplyTypes_(*(107, 2, (5, 0), (), "GridRadius", None))
	def _get_GridShape(self):
		return self._ApplyTypes_(*(110, 2, (3, 0), (), "GridShape", '{F0386531-8654-4FEA-A94B-EE8EC6ECAF75}'))
	def _get_GridThickness(self):
		return self._ApplyTypes_(*(109, 2, (3, 0), (), "GridThickness", None))
	def _get_GridType(self):
		return self._ApplyTypes_(*(104, 2, (3, 0), (), "GridType", '{27F9291D-CC9B-4F85-B76B-B7A48A9DE3FF}'))
	def _get_GridWidth(self):
		return self._ApplyTypes_(*(105, 2, (5, 0), (), "GridWidth", None))
	def _get_GuideColor(self):
		return self._ApplyTypes_(*(154, 2, (19, 0), (), "GuideColor", None))
	def _get_HideInactiveEntity(self):
		return self._ApplyTypes_(*(148, 2, (11, 0), (), "HideInactiveEntity", None))
	def _get_HighlightColor(self):
		return self._ApplyTypes_(*(132, 2, (19, 0), (), "HighlightColor", None))
	def _get_HightlightEntityColor(self):
		return self._ApplyTypes_(*(156, 2, (19, 0), (), "HightlightEntityColor", None))
	def _get_IconColor(self):
		return self._ApplyTypes_(*(127, 2, (19, 0), (), "IconColor", None))
	def _get_ImportedCADDataColor(self):
		return self._ApplyTypes_(*(146, 2, (19, 0), (), "ImportedCADDataColor", None))
	def _get_InactiveColorFactor(self):
		return self._ApplyTypes_(*(164, 2, (4, 0), (), "InactiveColorFactor", None))
	def _get_InactiveColorShade(self):
		return self._ApplyTypes_(*(162, 2, (19, 0), (), "InactiveColorShade", None))
	def _get_InactiveColorWire(self):
		return self._ApplyTypes_(*(163, 2, (19, 0), (), "InactiveColorWire", None))
	def _get_LineWidthLevel(self):
		return self._ApplyTypes_(*(144, 2, (3, 0), (), "LineWidthLevel", None))
	def _get_NumberOfGridSegments(self):
		return self._ApplyTypes_(*(111, 2, (3, 0), (), "NumberOfGridSegments", None))
	def _get_RecognizePrimitiveGeometriesWhenImportingCADFiles(self):
		return self._ApplyTypes_(*(153, 2, (11, 0), (), "RecognizePrimitiveGeometriesWhenImportingCADFiles", None))
	def _get_RenderMode(self):
		return self._ApplyTypes_(*(120, 2, (3, 0), (), "RenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EB}'))
	def _get_ResolutionX(self):
		return self._ApplyTypes_(*(160, 2, (19, 0), (), "ResolutionX", None))
	def _get_ResolutionY(self):
		return self._ApplyTypes_(*(161, 2, (19, 0), (), "ResolutionY", None))
	def _get_SelectedBodyColor(self):
		return self._ApplyTypes_(*(155, 2, (19, 0), (), "SelectedBodyColor", None))
	def _get_SelectionColor(self):
		return self._ApplyTypes_(*(131, 2, (19, 0), (), "SelectionColor", None))
	def _get_ShadeWireColor(self):
		return self._ApplyTypes_(*(159, 2, (19, 0), (), "ShadeWireColor", None))
	def _get_ShowContactSurfaceNormalDirection(self):
		return self._ApplyTypes_(*(129, 2, (11, 0), (), "ShowContactSurfaceNormalDirection", None))
	def _get_ShowForceDisplayValue(self):
		return self._ApplyTypes_(*(142, 2, (11, 0), (), "ShowForceDisplayValue", None))
	def _get_TextColor(self):
		return self._ApplyTypes_(*(133, 2, (19, 0), (), "TextColor", None))
	def _get_TorqueDisplayColor(self):
		return self._ApplyTypes_(*(138, 2, (19, 0), (), "TorqueDisplayColor", None))
	def _get_TorqueDisplayScale(self):
		return self._ApplyTypes_(*(139, 2, (5, 0), (), "TorqueDisplayScale", None))
	def _get_TorqueDisplayWidth(self):
		return self._ApplyTypes_(*(140, 2, (5, 0), (), "TorqueDisplayWidth", None))
	def _get_UseBackgroundImage(self):
		return self._ApplyTypes_(*(102, 2, (11, 0), (), "UseBackgroundImage", None))
	def _get_UseBackgroundPicture(self):
		return self._ApplyTypes_(*(157, 2, (11, 0), (), "UseBackgroundPicture", None))
	def _get_UseClippingVolume(self):
		return self._ApplyTypes_(*(116, 2, (11, 0), (), "UseClippingVolume", None))
	def _get_UseCustomForceDisplayColor(self):
		return self._ApplyTypes_(*(141, 2, (11, 0), (), "UseCustomForceDisplayColor", None))
	def _get_UseGraphicalQuality(self):
		return self._ApplyTypes_(*(122, 2, (11, 0), (), "UseGraphicalQuality", None))
	def _get_UseImportedCADDataColor(self):
		return self._ApplyTypes_(*(145, 2, (11, 0), (), "UseImportedCADDataColor", None))
	def _get_UseInitializeGridwhenCreatingSubsystemToolkit(self):
		return self._ApplyTypes_(*(114, 2, (11, 0), (), "UseInitializeGridwhenCreatingSubsystemToolkit", None))
	def _get_UseReflectionEffectAsDefault(self):
		return self._ApplyTypes_(*(126, 2, (11, 0), (), "UseReflectionEffectAsDefault", None))
	def _get_UseShowGrid(self):
		return self._ApplyTypes_(*(113, 2, (11, 0), (), "UseShowGrid", None))
	def _get_UseTransparentBackgroundOfTooltipBox(self):
		return self._ApplyTypes_(*(134, 2, (11, 0), (), "UseTransparentBackgroundOfTooltipBox", None))
	def _get_UseWindowsAero(self):
		return self._ApplyTypes_(*(151, 2, (11, 0), (), "UseWindowsAero", None))
	def _get_WireColorOfShadeWithWireRender(self):
		return self._ApplyTypes_(*(121, 2, (19, 0), (), "WireColorOfShadeWithWireRender", None))

	def _set_AccelerateRenderingInViewControl(self, value):
		if "AccelerateRenderingInViewControl" in self.__dict__: self.__dict__["AccelerateRenderingInViewControl"] = value; return
		self._oleobj_.Invoke(*((150, LCID, 4, 0) + (value,) + ()))
	def _set_AlignCenterMarkerOrientationWithBodyPrincipalAxis(self, value):
		if "AlignCenterMarkerOrientationWithBodyPrincipalAxis" in self.__dict__: self.__dict__["AlignCenterMarkerOrientationWithBodyPrincipalAxis"] = value; return
		self._oleobj_.Invoke(*((149, LCID, 4, 0) + (value,) + ()))
	def _set_ArrowColor(self, value):
		if "ArrowColor" in self.__dict__: self.__dict__["ArrowColor"] = value; return
		self._oleobj_.Invoke(*((128, LCID, 4, 0) + (value,) + ()))
	def _set_AutoFitWhenChangingWorkingPlane(self, value):
		if "AutoFitWhenChangingWorkingPlane" in self.__dict__: self.__dict__["AutoFitWhenChangingWorkingPlane"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BackgroundPicturePathName(self, value):
		if "BackgroundPicturePathName" in self.__dict__: self.__dict__["BackgroundPicturePathName"] = value; return
		self._oleobj_.Invoke(*((103, LCID, 4, 0) + (value,) + ()))
	def _set_ClippingVolumeFarFactor(self, value):
		if "ClippingVolumeFarFactor" in self.__dict__: self.__dict__["ClippingVolumeFarFactor"] = value; return
		self._oleobj_.Invoke(*((118, LCID, 4, 0) + (value,) + ()))
	def _set_ClippingVolumeNearFactor(self, value):
		if "ClippingVolumeNearFactor" in self.__dict__: self.__dict__["ClippingVolumeNearFactor"] = value; return
		self._oleobj_.Invoke(*((117, LCID, 4, 0) + (value,) + ()))
	def _set_ContractSurfaceNormalDirectionValue(self, value):
		if "ContractSurfaceNormalDirectionValue" in self.__dict__: self.__dict__["ContractSurfaceNormalDirectionValue"] = value; return
		self._oleobj_.Invoke(*((130, LCID, 4, 0) + (value,) + ()))
	def _set_CreatedBodyColorType(self, value):
		if "CreatedBodyColorType" in self.__dict__: self.__dict__["CreatedBodyColorType"] = value; return
		self._oleobj_.Invoke(*((125, LCID, 4, 0) + (value,) + ()))
	def _set_CurveDetailLevel(self, value):
		if "CurveDetailLevel" in self.__dict__: self.__dict__["CurveDetailLevel"] = value; return
		self._oleobj_.Invoke(*((123, LCID, 4, 0) + (value,) + ()))
	def _set_ErrorTolerance(self, value):
		if "ErrorTolerance" in self.__dict__: self.__dict__["ErrorTolerance"] = value; return
		self._oleobj_.Invoke(*((147, LCID, 4, 0) + (value,) + ()))
	def _set_FontSize(self, value):
		if "FontSize" in self.__dict__: self.__dict__["FontSize"] = value; return
		self._oleobj_.Invoke(*((158, LCID, 4, 0) + (value,) + ()))
	def _set_FontSizeInWorkingWindow(self, value):
		if "FontSizeInWorkingWindow" in self.__dict__: self.__dict__["FontSizeInWorkingWindow"] = value; return
		self._oleobj_.Invoke(*((119, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayColor(self, value):
		if "ForceDisplayColor" in self.__dict__: self.__dict__["ForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((135, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayScale(self, value):
		if "ForceDisplayScale" in self.__dict__: self.__dict__["ForceDisplayScale"] = value; return
		self._oleobj_.Invoke(*((136, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayValueDecimal(self, value):
		if "ForceDisplayValueDecimal" in self.__dict__: self.__dict__["ForceDisplayValueDecimal"] = value; return
		self._oleobj_.Invoke(*((143, LCID, 4, 0) + (value,) + ()))
	def _set_ForceDisplayWidth(self, value):
		if "ForceDisplayWidth" in self.__dict__: self.__dict__["ForceDisplayWidth"] = value; return
		self._oleobj_.Invoke(*((137, LCID, 4, 0) + (value,) + ()))
	def _set_GeometryDetailLevel(self, value):
		if "GeometryDetailLevel" in self.__dict__: self.__dict__["GeometryDetailLevel"] = value; return
		self._oleobj_.Invoke(*((124, LCID, 4, 0) + (value,) + ()))
	def _set_GridAngle(self, value):
		if "GridAngle" in self.__dict__: self.__dict__["GridAngle"] = value; return
		self._oleobj_.Invoke(*((108, LCID, 4, 0) + (value,) + ()))
	def _set_GridColor(self, value):
		if "GridColor" in self.__dict__: self.__dict__["GridColor"] = value; return
		self._oleobj_.Invoke(*((112, LCID, 4, 0) + (value,) + ()))
	def _set_GridHeight(self, value):
		if "GridHeight" in self.__dict__: self.__dict__["GridHeight"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))
	def _set_GridRadius(self, value):
		if "GridRadius" in self.__dict__: self.__dict__["GridRadius"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_GridShape(self, value):
		if "GridShape" in self.__dict__: self.__dict__["GridShape"] = value; return
		self._oleobj_.Invoke(*((110, LCID, 4, 0) + (value,) + ()))
	def _set_GridThickness(self, value):
		if "GridThickness" in self.__dict__: self.__dict__["GridThickness"] = value; return
		self._oleobj_.Invoke(*((109, LCID, 4, 0) + (value,) + ()))
	def _set_GridType(self, value):
		if "GridType" in self.__dict__: self.__dict__["GridType"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_GridWidth(self, value):
		if "GridWidth" in self.__dict__: self.__dict__["GridWidth"] = value; return
		self._oleobj_.Invoke(*((105, LCID, 4, 0) + (value,) + ()))
	def _set_GuideColor(self, value):
		if "GuideColor" in self.__dict__: self.__dict__["GuideColor"] = value; return
		self._oleobj_.Invoke(*((154, LCID, 4, 0) + (value,) + ()))
	def _set_HideInactiveEntity(self, value):
		if "HideInactiveEntity" in self.__dict__: self.__dict__["HideInactiveEntity"] = value; return
		self._oleobj_.Invoke(*((148, LCID, 4, 0) + (value,) + ()))
	def _set_HighlightColor(self, value):
		if "HighlightColor" in self.__dict__: self.__dict__["HighlightColor"] = value; return
		self._oleobj_.Invoke(*((132, LCID, 4, 0) + (value,) + ()))
	def _set_HightlightEntityColor(self, value):
		if "HightlightEntityColor" in self.__dict__: self.__dict__["HightlightEntityColor"] = value; return
		self._oleobj_.Invoke(*((156, LCID, 4, 0) + (value,) + ()))
	def _set_IconColor(self, value):
		if "IconColor" in self.__dict__: self.__dict__["IconColor"] = value; return
		self._oleobj_.Invoke(*((127, LCID, 4, 0) + (value,) + ()))
	def _set_ImportedCADDataColor(self, value):
		if "ImportedCADDataColor" in self.__dict__: self.__dict__["ImportedCADDataColor"] = value; return
		self._oleobj_.Invoke(*((146, LCID, 4, 0) + (value,) + ()))
	def _set_InactiveColorFactor(self, value):
		if "InactiveColorFactor" in self.__dict__: self.__dict__["InactiveColorFactor"] = value; return
		self._oleobj_.Invoke(*((164, LCID, 4, 0) + (value,) + ()))
	def _set_InactiveColorShade(self, value):
		if "InactiveColorShade" in self.__dict__: self.__dict__["InactiveColorShade"] = value; return
		self._oleobj_.Invoke(*((162, LCID, 4, 0) + (value,) + ()))
	def _set_InactiveColorWire(self, value):
		if "InactiveColorWire" in self.__dict__: self.__dict__["InactiveColorWire"] = value; return
		self._oleobj_.Invoke(*((163, LCID, 4, 0) + (value,) + ()))
	def _set_LineWidthLevel(self, value):
		if "LineWidthLevel" in self.__dict__: self.__dict__["LineWidthLevel"] = value; return
		self._oleobj_.Invoke(*((144, LCID, 4, 0) + (value,) + ()))
	def _set_NumberOfGridSegments(self, value):
		if "NumberOfGridSegments" in self.__dict__: self.__dict__["NumberOfGridSegments"] = value; return
		self._oleobj_.Invoke(*((111, LCID, 4, 0) + (value,) + ()))
	def _set_RecognizePrimitiveGeometriesWhenImportingCADFiles(self, value):
		if "RecognizePrimitiveGeometriesWhenImportingCADFiles" in self.__dict__: self.__dict__["RecognizePrimitiveGeometriesWhenImportingCADFiles"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))
	def _set_RenderMode(self, value):
		if "RenderMode" in self.__dict__: self.__dict__["RenderMode"] = value; return
		self._oleobj_.Invoke(*((120, LCID, 4, 0) + (value,) + ()))
	def _set_ResolutionX(self, value):
		if "ResolutionX" in self.__dict__: self.__dict__["ResolutionX"] = value; return
		self._oleobj_.Invoke(*((160, LCID, 4, 0) + (value,) + ()))
	def _set_ResolutionY(self, value):
		if "ResolutionY" in self.__dict__: self.__dict__["ResolutionY"] = value; return
		self._oleobj_.Invoke(*((161, LCID, 4, 0) + (value,) + ()))
	def _set_SelectedBodyColor(self, value):
		if "SelectedBodyColor" in self.__dict__: self.__dict__["SelectedBodyColor"] = value; return
		self._oleobj_.Invoke(*((155, LCID, 4, 0) + (value,) + ()))
	def _set_SelectionColor(self, value):
		if "SelectionColor" in self.__dict__: self.__dict__["SelectionColor"] = value; return
		self._oleobj_.Invoke(*((131, LCID, 4, 0) + (value,) + ()))
	def _set_ShadeWireColor(self, value):
		if "ShadeWireColor" in self.__dict__: self.__dict__["ShadeWireColor"] = value; return
		self._oleobj_.Invoke(*((159, LCID, 4, 0) + (value,) + ()))
	def _set_ShowContactSurfaceNormalDirection(self, value):
		if "ShowContactSurfaceNormalDirection" in self.__dict__: self.__dict__["ShowContactSurfaceNormalDirection"] = value; return
		self._oleobj_.Invoke(*((129, LCID, 4, 0) + (value,) + ()))
	def _set_ShowForceDisplayValue(self, value):
		if "ShowForceDisplayValue" in self.__dict__: self.__dict__["ShowForceDisplayValue"] = value; return
		self._oleobj_.Invoke(*((142, LCID, 4, 0) + (value,) + ()))
	def _set_TextColor(self, value):
		if "TextColor" in self.__dict__: self.__dict__["TextColor"] = value; return
		self._oleobj_.Invoke(*((133, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayColor(self, value):
		if "TorqueDisplayColor" in self.__dict__: self.__dict__["TorqueDisplayColor"] = value; return
		self._oleobj_.Invoke(*((138, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayScale(self, value):
		if "TorqueDisplayScale" in self.__dict__: self.__dict__["TorqueDisplayScale"] = value; return
		self._oleobj_.Invoke(*((139, LCID, 4, 0) + (value,) + ()))
	def _set_TorqueDisplayWidth(self, value):
		if "TorqueDisplayWidth" in self.__dict__: self.__dict__["TorqueDisplayWidth"] = value; return
		self._oleobj_.Invoke(*((140, LCID, 4, 0) + (value,) + ()))
	def _set_UseBackgroundImage(self, value):
		if "UseBackgroundImage" in self.__dict__: self.__dict__["UseBackgroundImage"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_UseBackgroundPicture(self, value):
		if "UseBackgroundPicture" in self.__dict__: self.__dict__["UseBackgroundPicture"] = value; return
		self._oleobj_.Invoke(*((157, LCID, 4, 0) + (value,) + ()))
	def _set_UseClippingVolume(self, value):
		if "UseClippingVolume" in self.__dict__: self.__dict__["UseClippingVolume"] = value; return
		self._oleobj_.Invoke(*((116, LCID, 4, 0) + (value,) + ()))
	def _set_UseCustomForceDisplayColor(self, value):
		if "UseCustomForceDisplayColor" in self.__dict__: self.__dict__["UseCustomForceDisplayColor"] = value; return
		self._oleobj_.Invoke(*((141, LCID, 4, 0) + (value,) + ()))
	def _set_UseGraphicalQuality(self, value):
		if "UseGraphicalQuality" in self.__dict__: self.__dict__["UseGraphicalQuality"] = value; return
		self._oleobj_.Invoke(*((122, LCID, 4, 0) + (value,) + ()))
	def _set_UseImportedCADDataColor(self, value):
		if "UseImportedCADDataColor" in self.__dict__: self.__dict__["UseImportedCADDataColor"] = value; return
		self._oleobj_.Invoke(*((145, LCID, 4, 0) + (value,) + ()))
	def _set_UseInitializeGridwhenCreatingSubsystemToolkit(self, value):
		if "UseInitializeGridwhenCreatingSubsystemToolkit" in self.__dict__: self.__dict__["UseInitializeGridwhenCreatingSubsystemToolkit"] = value; return
		self._oleobj_.Invoke(*((114, LCID, 4, 0) + (value,) + ()))
	def _set_UseReflectionEffectAsDefault(self, value):
		if "UseReflectionEffectAsDefault" in self.__dict__: self.__dict__["UseReflectionEffectAsDefault"] = value; return
		self._oleobj_.Invoke(*((126, LCID, 4, 0) + (value,) + ()))
	def _set_UseShowGrid(self, value):
		if "UseShowGrid" in self.__dict__: self.__dict__["UseShowGrid"] = value; return
		self._oleobj_.Invoke(*((113, LCID, 4, 0) + (value,) + ()))
	def _set_UseTransparentBackgroundOfTooltipBox(self, value):
		if "UseTransparentBackgroundOfTooltipBox" in self.__dict__: self.__dict__["UseTransparentBackgroundOfTooltipBox"] = value; return
		self._oleobj_.Invoke(*((134, LCID, 4, 0) + (value,) + ()))
	def _set_UseWindowsAero(self, value):
		if "UseWindowsAero" in self.__dict__: self.__dict__["UseWindowsAero"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_WireColorOfShadeWithWireRender(self, value):
		if "WireColorOfShadeWithWireRender" in self.__dict__: self.__dict__["WireColorOfShadeWithWireRender"] = value; return
		self._oleobj_.Invoke(*((121, LCID, 4, 0) + (value,) + ()))

	AccelerateRenderingInViewControl = property(_get_AccelerateRenderingInViewControl, _set_AccelerateRenderingInViewControl)
	'''
	obsolete functon

	:type: bool
	'''
	AlignCenterMarkerOrientationWithBodyPrincipalAxis = property(_get_AlignCenterMarkerOrientationWithBodyPrincipalAxis, _set_AlignCenterMarkerOrientationWithBodyPrincipalAxis)
	'''
	obsolete functon

	:type: bool
	'''
	ArrowColor = property(_get_ArrowColor, _set_ArrowColor)
	'''
	Arrow color

	:type: int
	'''
	AutoFitWhenChangingWorkingPlane = property(_get_AutoFitWhenChangingWorkingPlane, _set_AutoFitWhenChangingWorkingPlane)
	'''
	obsolete functon

	:type: bool
	'''
	BackgroundColor = property(_get_BackgroundColor, None)
	'''
	Background color

	:type: recurdyn.ProcessNet.IBackgroundColor
	'''
	BackgroundPicturePathName = property(_get_BackgroundPicturePathName, _set_BackgroundPicturePathName)
	'''
	Background picture path name

	:type: str
	'''
	ClippingVolumeFarFactor = property(_get_ClippingVolumeFarFactor, _set_ClippingVolumeFarFactor)
	'''
	Clipping volume far factor

	:type: float
	'''
	ClippingVolumeNearFactor = property(_get_ClippingVolumeNearFactor, _set_ClippingVolumeNearFactor)
	'''
	Clipping volume near factor

	:type: float
	'''
	ContractSurfaceNormalDirectionValue = property(_get_ContractSurfaceNormalDirectionValue, _set_ContractSurfaceNormalDirectionValue)
	'''
	Contact surface normal direction value

	:type: int
	'''
	CreatedBodyColorType = property(_get_CreatedBodyColorType, _set_CreatedBodyColorType)
	'''
	Created body color

	:type: recurdyn.ProcessNet.CreatedBodyColorType
	'''
	CurveDetailLevel = property(_get_CurveDetailLevel, _set_CurveDetailLevel)
	'''
	Level of detail - curve

	:type: recurdyn.ProcessNet.CurveDetailLevelType
	'''
	ErrorTolerance = property(_get_ErrorTolerance, _set_ErrorTolerance)
	'''
	obsolete functon

	:type: float
	'''
	FontSize = property(_get_FontSize, _set_FontSize)
	'''
	obsolete functon

	:type: int
	'''
	FontSizeInWorkingWindow = property(_get_FontSizeInWorkingWindow, _set_FontSizeInWorkingWindow)
	'''
	Font size in working window

	:type: int
	'''
	ForceDisplayColor = property(_get_ForceDisplayColor, _set_ForceDisplayColor)
	'''
	Force display color

	:type: int
	'''
	ForceDisplayScale = property(_get_ForceDisplayScale, _set_ForceDisplayScale)
	'''
	Force display scale

	:type: float
	'''
	ForceDisplayValueDecimal = property(_get_ForceDisplayValueDecimal, _set_ForceDisplayValueDecimal)
	'''
	Value of force display magnitude decimal

	:type: int
	'''
	ForceDisplayWidth = property(_get_ForceDisplayWidth, _set_ForceDisplayWidth)
	'''
	Force display width

	:type: float
	'''
	GeometryDetailLevel = property(_get_GeometryDetailLevel, _set_GeometryDetailLevel)
	'''
	Level of detail - geometry

	:type: recurdyn.ProcessNet.GeometryDetailLevelType
	'''
	GridAngle = property(_get_GridAngle, _set_GridAngle)
	'''
	Grid angle (for cylindrical coordinate system)

	:type: float
	'''
	GridColor = property(_get_GridColor, _set_GridColor)
	'''
	Grid color

	:type: int
	'''
	GridHeight = property(_get_GridHeight, _set_GridHeight)
	'''
	Grid height (for Cartesian coordinate system)

	:type: float
	'''
	GridRadius = property(_get_GridRadius, _set_GridRadius)
	'''
	Grid radius (for cylindrical coordinate system)

	:type: float
	'''
	GridShape = property(_get_GridShape, _set_GridShape)
	'''
	Grid shape

	:type: recurdyn.ProcessNet.GridShape
	'''
	GridThickness = property(_get_GridThickness, _set_GridThickness)
	'''
	Grid thickness

	:type: int
	'''
	GridType = property(_get_GridType, _set_GridType)
	'''
	Grid coordinate type

	:type: recurdyn.ProcessNet.GridType
	'''
	GridWidth = property(_get_GridWidth, _set_GridWidth)
	'''
	Grid width (for Cartesian coordinate system)

	:type: float
	'''
	GuideColor = property(_get_GuideColor, _set_GuideColor)
	'''
	obsolete functon

	:type: int
	'''
	HideInactiveEntity = property(_get_HideInactiveEntity, _set_HideInactiveEntity)
	'''
	obsolete functon

	:type: bool
	'''
	HighlightColor = property(_get_HighlightColor, _set_HighlightColor)
	'''
	Highlight color

	:type: int
	'''
	HightlightEntityColor = property(_get_HightlightEntityColor, _set_HightlightEntityColor)
	'''
	obsolete functon

	:type: int
	'''
	IconColor = property(_get_IconColor, _set_IconColor)
	'''
	Icon color

	:type: int
	'''
	ImportedCADDataColor = property(_get_ImportedCADDataColor, _set_ImportedCADDataColor)
	'''
	obsolete functon

	:type: int
	'''
	InactiveColorFactor = property(_get_InactiveColorFactor, _set_InactiveColorFactor)
	'''
	Inactive Color Factor

	:type: float
	'''
	InactiveColorShade = property(_get_InactiveColorShade, _set_InactiveColorShade)
	'''
	Inactive Color Shade

	:type: int
	'''
	InactiveColorWire = property(_get_InactiveColorWire, _set_InactiveColorWire)
	'''
	Inactive Color Wire

	:type: int
	'''
	LineWidthLevel = property(_get_LineWidthLevel, _set_LineWidthLevel)
	'''
	Width of line

	:type: int
	'''
	NumberOfGridSegments = property(_get_NumberOfGridSegments, _set_NumberOfGridSegments)
	'''
	Number of grid segments

	:type: int
	'''
	RecognizePrimitiveGeometriesWhenImportingCADFiles = property(_get_RecognizePrimitiveGeometriesWhenImportingCADFiles, _set_RecognizePrimitiveGeometriesWhenImportingCADFiles)
	'''
	obsolete functon

	:type: bool
	'''
	RenderMode = property(_get_RenderMode, _set_RenderMode)
	'''
	Rendering mode

	:type: recurdyn.ProcessNet.RenderMode
	'''
	ResolutionX = property(_get_ResolutionX, _set_ResolutionX)
	'''
	Resolution X

	:type: int
	'''
	ResolutionY = property(_get_ResolutionY, _set_ResolutionY)
	'''
	Resolution Y

	:type: int
	'''
	SelectedBodyColor = property(_get_SelectedBodyColor, _set_SelectedBodyColor)
	'''
	obsolete functon

	:type: int
	'''
	SelectionColor = property(_get_SelectionColor, _set_SelectionColor)
	'''
	Selection color

	:type: int
	'''
	ShadeWireColor = property(_get_ShadeWireColor, _set_ShadeWireColor)
	'''
	obsolete functon

	:type: int
	'''
	ShowContactSurfaceNormalDirection = property(_get_ShowContactSurfaceNormalDirection, _set_ShowContactSurfaceNormalDirection)
	'''
	Show normal direction of contact surface

	:type: bool
	'''
	ShowForceDisplayValue = property(_get_ShowForceDisplayValue, _set_ShowForceDisplayValue)
	'''
	Show force display magnitude flag

	:type: bool
	'''
	TextColor = property(_get_TextColor, _set_TextColor)
	'''
	Text color

	:type: int
	'''
	TorqueDisplayColor = property(_get_TorqueDisplayColor, _set_TorqueDisplayColor)
	'''
	Torque display color

	:type: int
	'''
	TorqueDisplayScale = property(_get_TorqueDisplayScale, _set_TorqueDisplayScale)
	'''
	Torque display scale

	:type: float
	'''
	TorqueDisplayWidth = property(_get_TorqueDisplayWidth, _set_TorqueDisplayWidth)
	'''
	Torque display width

	:type: float
	'''
	UseBackgroundImage = property(_get_UseBackgroundImage, _set_UseBackgroundImage)
	'''
	Use background image

	:type: bool
	'''
	UseBackgroundPicture = property(_get_UseBackgroundPicture, _set_UseBackgroundPicture)
	'''
	obsolete functon

	:type: bool
	'''
	UseClippingVolume = property(_get_UseClippingVolume, _set_UseClippingVolume)
	'''
	Use clipping volume

	:type: bool
	'''
	UseCustomForceDisplayColor = property(_get_UseCustomForceDisplayColor, _set_UseCustomForceDisplayColor)
	'''
	Use custom force display color

	:type: bool
	'''
	UseGraphicalQuality = property(_get_UseGraphicalQuality, _set_UseGraphicalQuality)
	'''
	Graphical quality

	:type: bool
	'''
	UseImportedCADDataColor = property(_get_UseImportedCADDataColor, _set_UseImportedCADDataColor)
	'''
	obsolete functon

	:type: bool
	'''
	UseInitializeGridwhenCreatingSubsystemToolkit = property(_get_UseInitializeGridwhenCreatingSubsystemToolkit, _set_UseInitializeGridwhenCreatingSubsystemToolkit)
	'''
	Apply Initialize Grid when Creating Subsystem Toolkit

	:type: bool
	'''
	UseReflectionEffectAsDefault = property(_get_UseReflectionEffectAsDefault, _set_UseReflectionEffectAsDefault)
	'''
	Use reflection effect as default

	:type: bool
	'''
	UseShowGrid = property(_get_UseShowGrid, _set_UseShowGrid)
	'''
	Show Grid

	:type: bool
	'''
	UseTransparentBackgroundOfTooltipBox = property(_get_UseTransparentBackgroundOfTooltipBox, _set_UseTransparentBackgroundOfTooltipBox)
	'''
	Use transparent background of tooltip box

	:type: bool
	'''
	UseWindowsAero = property(_get_UseWindowsAero, _set_UseWindowsAero)
	'''
	obsolete functon

	:type: bool
	'''
	WireColorOfShadeWithWireRender = property(_get_WireColorOfShadeWithWireRender, _set_WireColorOfShadeWithWireRender)
	'''
	Wire color of shade with wire render option

	:type: int
	'''

	_prop_map_set_function_ = {
		"_set_AccelerateRenderingInViewControl": _set_AccelerateRenderingInViewControl,
		"_set_AlignCenterMarkerOrientationWithBodyPrincipalAxis": _set_AlignCenterMarkerOrientationWithBodyPrincipalAxis,
		"_set_ArrowColor": _set_ArrowColor,
		"_set_AutoFitWhenChangingWorkingPlane": _set_AutoFitWhenChangingWorkingPlane,
		"_set_BackgroundPicturePathName": _set_BackgroundPicturePathName,
		"_set_ClippingVolumeFarFactor": _set_ClippingVolumeFarFactor,
		"_set_ClippingVolumeNearFactor": _set_ClippingVolumeNearFactor,
		"_set_ContractSurfaceNormalDirectionValue": _set_ContractSurfaceNormalDirectionValue,
		"_set_CreatedBodyColorType": _set_CreatedBodyColorType,
		"_set_CurveDetailLevel": _set_CurveDetailLevel,
		"_set_ErrorTolerance": _set_ErrorTolerance,
		"_set_FontSize": _set_FontSize,
		"_set_FontSizeInWorkingWindow": _set_FontSizeInWorkingWindow,
		"_set_ForceDisplayColor": _set_ForceDisplayColor,
		"_set_ForceDisplayScale": _set_ForceDisplayScale,
		"_set_ForceDisplayValueDecimal": _set_ForceDisplayValueDecimal,
		"_set_ForceDisplayWidth": _set_ForceDisplayWidth,
		"_set_GeometryDetailLevel": _set_GeometryDetailLevel,
		"_set_GridAngle": _set_GridAngle,
		"_set_GridColor": _set_GridColor,
		"_set_GridHeight": _set_GridHeight,
		"_set_GridRadius": _set_GridRadius,
		"_set_GridShape": _set_GridShape,
		"_set_GridThickness": _set_GridThickness,
		"_set_GridType": _set_GridType,
		"_set_GridWidth": _set_GridWidth,
		"_set_GuideColor": _set_GuideColor,
		"_set_HideInactiveEntity": _set_HideInactiveEntity,
		"_set_HighlightColor": _set_HighlightColor,
		"_set_HightlightEntityColor": _set_HightlightEntityColor,
		"_set_IconColor": _set_IconColor,
		"_set_ImportedCADDataColor": _set_ImportedCADDataColor,
		"_set_InactiveColorFactor": _set_InactiveColorFactor,
		"_set_InactiveColorShade": _set_InactiveColorShade,
		"_set_InactiveColorWire": _set_InactiveColorWire,
		"_set_LineWidthLevel": _set_LineWidthLevel,
		"_set_NumberOfGridSegments": _set_NumberOfGridSegments,
		"_set_RecognizePrimitiveGeometriesWhenImportingCADFiles": _set_RecognizePrimitiveGeometriesWhenImportingCADFiles,
		"_set_RenderMode": _set_RenderMode,
		"_set_ResolutionX": _set_ResolutionX,
		"_set_ResolutionY": _set_ResolutionY,
		"_set_SelectedBodyColor": _set_SelectedBodyColor,
		"_set_SelectionColor": _set_SelectionColor,
		"_set_ShadeWireColor": _set_ShadeWireColor,
		"_set_ShowContactSurfaceNormalDirection": _set_ShowContactSurfaceNormalDirection,
		"_set_ShowForceDisplayValue": _set_ShowForceDisplayValue,
		"_set_TextColor": _set_TextColor,
		"_set_TorqueDisplayColor": _set_TorqueDisplayColor,
		"_set_TorqueDisplayScale": _set_TorqueDisplayScale,
		"_set_TorqueDisplayWidth": _set_TorqueDisplayWidth,
		"_set_UseBackgroundImage": _set_UseBackgroundImage,
		"_set_UseBackgroundPicture": _set_UseBackgroundPicture,
		"_set_UseClippingVolume": _set_UseClippingVolume,
		"_set_UseCustomForceDisplayColor": _set_UseCustomForceDisplayColor,
		"_set_UseGraphicalQuality": _set_UseGraphicalQuality,
		"_set_UseImportedCADDataColor": _set_UseImportedCADDataColor,
		"_set_UseInitializeGridwhenCreatingSubsystemToolkit": _set_UseInitializeGridwhenCreatingSubsystemToolkit,
		"_set_UseReflectionEffectAsDefault": _set_UseReflectionEffectAsDefault,
		"_set_UseShowGrid": _set_UseShowGrid,
		"_set_UseTransparentBackgroundOfTooltipBox": _set_UseTransparentBackgroundOfTooltipBox,
		"_set_UseWindowsAero": _set_UseWindowsAero,
		"_set_WireColorOfShadeWithWireRender": _set_WireColorOfShadeWithWireRender,
	}
	_prop_map_get_ = {
		"AccelerateRenderingInViewControl": (150, 2, (11, 0), (), "AccelerateRenderingInViewControl", None),
		"AlignCenterMarkerOrientationWithBodyPrincipalAxis": (149, 2, (11, 0), (), "AlignCenterMarkerOrientationWithBodyPrincipalAxis", None),
		"ArrowColor": (128, 2, (19, 0), (), "ArrowColor", None),
		"AutoFitWhenChangingWorkingPlane": (152, 2, (11, 0), (), "AutoFitWhenChangingWorkingPlane", None),
		"BackgroundColor": (101, 2, (9, 0), (), "BackgroundColor", '{1972ACE7-FAA6-4C64-A067-C0B2EB23C93A}'),
		"BackgroundPicturePathName": (103, 2, (8, 0), (), "BackgroundPicturePathName", None),
		"ClippingVolumeFarFactor": (118, 2, (4, 0), (), "ClippingVolumeFarFactor", None),
		"ClippingVolumeNearFactor": (117, 2, (4, 0), (), "ClippingVolumeNearFactor", None),
		"ContractSurfaceNormalDirectionValue": (130, 2, (19, 0), (), "ContractSurfaceNormalDirectionValue", None),
		"CreatedBodyColorType": (125, 2, (3, 0), (), "CreatedBodyColorType", '{80EEDCEF-0244-454F-8125-8078A319E63C}'),
		"CurveDetailLevel": (123, 2, (3, 0), (), "CurveDetailLevel", '{BA789320-DC38-48E9-88AB-1178877903FD}'),
		"ErrorTolerance": (147, 2, (5, 0), (), "ErrorTolerance", None),
		"FontSize": (158, 2, (19, 0), (), "FontSize", None),
		"FontSizeInWorkingWindow": (119, 2, (19, 0), (), "FontSizeInWorkingWindow", None),
		"ForceDisplayColor": (135, 2, (19, 0), (), "ForceDisplayColor", None),
		"ForceDisplayScale": (136, 2, (5, 0), (), "ForceDisplayScale", None),
		"ForceDisplayValueDecimal": (143, 2, (3, 0), (), "ForceDisplayValueDecimal", None),
		"ForceDisplayWidth": (137, 2, (5, 0), (), "ForceDisplayWidth", None),
		"GeometryDetailLevel": (124, 2, (3, 0), (), "GeometryDetailLevel", '{709F4BB5-B608-423B-8F78-40615C3C8D1E}'),
		"GridAngle": (108, 2, (5, 0), (), "GridAngle", None),
		"GridColor": (112, 2, (19, 0), (), "GridColor", None),
		"GridHeight": (106, 2, (5, 0), (), "GridHeight", None),
		"GridRadius": (107, 2, (5, 0), (), "GridRadius", None),
		"GridShape": (110, 2, (3, 0), (), "GridShape", '{F0386531-8654-4FEA-A94B-EE8EC6ECAF75}'),
		"GridThickness": (109, 2, (3, 0), (), "GridThickness", None),
		"GridType": (104, 2, (3, 0), (), "GridType", '{27F9291D-CC9B-4F85-B76B-B7A48A9DE3FF}'),
		"GridWidth": (105, 2, (5, 0), (), "GridWidth", None),
		"GuideColor": (154, 2, (19, 0), (), "GuideColor", None),
		"HideInactiveEntity": (148, 2, (11, 0), (), "HideInactiveEntity", None),
		"HighlightColor": (132, 2, (19, 0), (), "HighlightColor", None),
		"HightlightEntityColor": (156, 2, (19, 0), (), "HightlightEntityColor", None),
		"IconColor": (127, 2, (19, 0), (), "IconColor", None),
		"ImportedCADDataColor": (146, 2, (19, 0), (), "ImportedCADDataColor", None),
		"InactiveColorFactor": (164, 2, (4, 0), (), "InactiveColorFactor", None),
		"InactiveColorShade": (162, 2, (19, 0), (), "InactiveColorShade", None),
		"InactiveColorWire": (163, 2, (19, 0), (), "InactiveColorWire", None),
		"LineWidthLevel": (144, 2, (3, 0), (), "LineWidthLevel", None),
		"NumberOfGridSegments": (111, 2, (3, 0), (), "NumberOfGridSegments", None),
		"RecognizePrimitiveGeometriesWhenImportingCADFiles": (153, 2, (11, 0), (), "RecognizePrimitiveGeometriesWhenImportingCADFiles", None),
		"RenderMode": (120, 2, (3, 0), (), "RenderMode", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147EB}'),
		"ResolutionX": (160, 2, (19, 0), (), "ResolutionX", None),
		"ResolutionY": (161, 2, (19, 0), (), "ResolutionY", None),
		"SelectedBodyColor": (155, 2, (19, 0), (), "SelectedBodyColor", None),
		"SelectionColor": (131, 2, (19, 0), (), "SelectionColor", None),
		"ShadeWireColor": (159, 2, (19, 0), (), "ShadeWireColor", None),
		"ShowContactSurfaceNormalDirection": (129, 2, (11, 0), (), "ShowContactSurfaceNormalDirection", None),
		"ShowForceDisplayValue": (142, 2, (11, 0), (), "ShowForceDisplayValue", None),
		"TextColor": (133, 2, (19, 0), (), "TextColor", None),
		"TorqueDisplayColor": (138, 2, (19, 0), (), "TorqueDisplayColor", None),
		"TorqueDisplayScale": (139, 2, (5, 0), (), "TorqueDisplayScale", None),
		"TorqueDisplayWidth": (140, 2, (5, 0), (), "TorqueDisplayWidth", None),
		"UseBackgroundImage": (102, 2, (11, 0), (), "UseBackgroundImage", None),
		"UseBackgroundPicture": (157, 2, (11, 0), (), "UseBackgroundPicture", None),
		"UseClippingVolume": (116, 2, (11, 0), (), "UseClippingVolume", None),
		"UseCustomForceDisplayColor": (141, 2, (11, 0), (), "UseCustomForceDisplayColor", None),
		"UseGraphicalQuality": (122, 2, (11, 0), (), "UseGraphicalQuality", None),
		"UseImportedCADDataColor": (145, 2, (11, 0), (), "UseImportedCADDataColor", None),
		"UseInitializeGridwhenCreatingSubsystemToolkit": (114, 2, (11, 0), (), "UseInitializeGridwhenCreatingSubsystemToolkit", None),
		"UseReflectionEffectAsDefault": (126, 2, (11, 0), (), "UseReflectionEffectAsDefault", None),
		"UseShowGrid": (113, 2, (11, 0), (), "UseShowGrid", None),
		"UseTransparentBackgroundOfTooltipBox": (134, 2, (11, 0), (), "UseTransparentBackgroundOfTooltipBox", None),
		"UseWindowsAero": (151, 2, (11, 0), (), "UseWindowsAero", None),
		"WireColorOfShadeWithWireRender": (121, 2, (19, 0), (), "WireColorOfShadeWithWireRender", None),
	}
	_prop_map_put_ = {
		"AccelerateRenderingInViewControl": ((150, LCID, 4, 0),()),
		"AlignCenterMarkerOrientationWithBodyPrincipalAxis": ((149, LCID, 4, 0),()),
		"ArrowColor": ((128, LCID, 4, 0),()),
		"AutoFitWhenChangingWorkingPlane": ((152, LCID, 4, 0),()),
		"BackgroundPicturePathName": ((103, LCID, 4, 0),()),
		"ClippingVolumeFarFactor": ((118, LCID, 4, 0),()),
		"ClippingVolumeNearFactor": ((117, LCID, 4, 0),()),
		"ContractSurfaceNormalDirectionValue": ((130, LCID, 4, 0),()),
		"CreatedBodyColorType": ((125, LCID, 4, 0),()),
		"CurveDetailLevel": ((123, LCID, 4, 0),()),
		"ErrorTolerance": ((147, LCID, 4, 0),()),
		"FontSize": ((158, LCID, 4, 0),()),
		"FontSizeInWorkingWindow": ((119, LCID, 4, 0),()),
		"ForceDisplayColor": ((135, LCID, 4, 0),()),
		"ForceDisplayScale": ((136, LCID, 4, 0),()),
		"ForceDisplayValueDecimal": ((143, LCID, 4, 0),()),
		"ForceDisplayWidth": ((137, LCID, 4, 0),()),
		"GeometryDetailLevel": ((124, LCID, 4, 0),()),
		"GridAngle": ((108, LCID, 4, 0),()),
		"GridColor": ((112, LCID, 4, 0),()),
		"GridHeight": ((106, LCID, 4, 0),()),
		"GridRadius": ((107, LCID, 4, 0),()),
		"GridShape": ((110, LCID, 4, 0),()),
		"GridThickness": ((109, LCID, 4, 0),()),
		"GridType": ((104, LCID, 4, 0),()),
		"GridWidth": ((105, LCID, 4, 0),()),
		"GuideColor": ((154, LCID, 4, 0),()),
		"HideInactiveEntity": ((148, LCID, 4, 0),()),
		"HighlightColor": ((132, LCID, 4, 0),()),
		"HightlightEntityColor": ((156, LCID, 4, 0),()),
		"IconColor": ((127, LCID, 4, 0),()),
		"ImportedCADDataColor": ((146, LCID, 4, 0),()),
		"InactiveColorFactor": ((164, LCID, 4, 0),()),
		"InactiveColorShade": ((162, LCID, 4, 0),()),
		"InactiveColorWire": ((163, LCID, 4, 0),()),
		"LineWidthLevel": ((144, LCID, 4, 0),()),
		"NumberOfGridSegments": ((111, LCID, 4, 0),()),
		"RecognizePrimitiveGeometriesWhenImportingCADFiles": ((153, LCID, 4, 0),()),
		"RenderMode": ((120, LCID, 4, 0),()),
		"ResolutionX": ((160, LCID, 4, 0),()),
		"ResolutionY": ((161, LCID, 4, 0),()),
		"SelectedBodyColor": ((155, LCID, 4, 0),()),
		"SelectionColor": ((131, LCID, 4, 0),()),
		"ShadeWireColor": ((159, LCID, 4, 0),()),
		"ShowContactSurfaceNormalDirection": ((129, LCID, 4, 0),()),
		"ShowForceDisplayValue": ((142, LCID, 4, 0),()),
		"TextColor": ((133, LCID, 4, 0),()),
		"TorqueDisplayColor": ((138, LCID, 4, 0),()),
		"TorqueDisplayScale": ((139, LCID, 4, 0),()),
		"TorqueDisplayWidth": ((140, LCID, 4, 0),()),
		"UseBackgroundImage": ((102, LCID, 4, 0),()),
		"UseBackgroundPicture": ((157, LCID, 4, 0),()),
		"UseClippingVolume": ((116, LCID, 4, 0),()),
		"UseCustomForceDisplayColor": ((141, LCID, 4, 0),()),
		"UseGraphicalQuality": ((122, LCID, 4, 0),()),
		"UseImportedCADDataColor": ((145, LCID, 4, 0),()),
		"UseInitializeGridwhenCreatingSubsystemToolkit": ((114, LCID, 4, 0),()),
		"UseReflectionEffectAsDefault": ((126, LCID, 4, 0),()),
		"UseShowGrid": ((113, LCID, 4, 0),()),
		"UseTransparentBackgroundOfTooltipBox": ((134, LCID, 4, 0),()),
		"UseWindowsAero": ((151, LCID, 4, 0),()),
		"WireColorOfShadeWithWireRender": ((121, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IModelSettingFlexibility(DispatchBaseClass):
	'''Model Setting - Flexibility'''
	CLSID = IID('{021CF62C-20FB-4D9B-8C0B-89E4C73CE14C}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_FFlex(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "FFlex", '{470BF1F3-2ADB-44D0-A820-C88165387DD1}'))
	def _get_Flexible(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "Flexible", '{D8DF157B-E900-4ED1-8A7A-36FD7611B889}'))
	def _get_RFlex(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "RFlex", '{38DEE9F7-E829-461E-A2FA-7AB93E5AE392}'))

	FFlex = property(_get_FFlex, None)
	'''
	Flexibility - FFlex

	:type: recurdyn.ProcessNet.IModelSettingFlexibilityFFlex
	'''
	Flexible = property(_get_Flexible, None)
	'''
	Flexibility - Flexible

	:type: recurdyn.ProcessNet.IModelSettingFlexibilityFlexible
	'''
	RFlex = property(_get_RFlex, None)
	'''
	Flexibility - RFlex

	:type: recurdyn.ProcessNet.IModelSettingFlexibilityRFlex
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"FFlex": (101, 2, (9, 0), (), "FFlex", '{470BF1F3-2ADB-44D0-A820-C88165387DD1}'),
		"Flexible": (103, 2, (9, 0), (), "Flexible", '{D8DF157B-E900-4ED1-8A7A-36FD7611B889}'),
		"RFlex": (102, 2, (9, 0), (), "RFlex", '{38DEE9F7-E829-461E-A2FA-7AB93E5AE392}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IModelSettingFlexibilityFFlex(DispatchBaseClass):
	'''Model Setting - Flexibility - FFlex'''
	CLSID = IID('{470BF1F3-2ADB-44D0-A820-C88165387DD1}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AdvancedWeightingFactorCalculation(self):
		return self._ApplyTypes_(*(151, 2, (11, 0), (), "AdvancedWeightingFactorCalculation", None))
	def _get_AutomaticOutputsforMarkers(self):
		return self._ApplyTypes_(*(154, 2, (11, 0), (), "AutomaticOutputsforMarkers", None))
	def _get_CoreOption(self):
		return self._ApplyTypes_(*(152, 2, (3, 0), (), "CoreOption", '{975E72D8-BA15-4AB0-9B89-6968A54D2FE5}'))
	def _get_StressRecoveryType(self):
		return self._ApplyTypes_(*(153, 2, (3, 0), (), "StressRecoveryType", '{82CC641D-AB98-4571-A443-18EB0D52D7BC}'))

	def _set_AdvancedWeightingFactorCalculation(self, value):
		if "AdvancedWeightingFactorCalculation" in self.__dict__: self.__dict__["AdvancedWeightingFactorCalculation"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_AutomaticOutputsforMarkers(self, value):
		if "AutomaticOutputsforMarkers" in self.__dict__: self.__dict__["AutomaticOutputsforMarkers"] = value; return
		self._oleobj_.Invoke(*((154, LCID, 4, 0) + (value,) + ()))
	def _set_CoreOption(self, value):
		if "CoreOption" in self.__dict__: self.__dict__["CoreOption"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_StressRecoveryType(self, value):
		if "StressRecoveryType" in self.__dict__: self.__dict__["StressRecoveryType"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))

	AdvancedWeightingFactorCalculation = property(_get_AdvancedWeightingFactorCalculation, _set_AdvancedWeightingFactorCalculation)
	'''
	obsolete functon (default value = true)

	:type: bool
	'''
	AutomaticOutputsforMarkers = property(_get_AutomaticOutputsforMarkers, _set_AutomaticOutputsforMarkers)
	'''
	Automatic Outputs for Markers

	:type: bool
	'''
	CoreOption = property(_get_CoreOption, _set_CoreOption)
	'''
	Core Option

	:type: recurdyn.ProcessNet.Core_Option
	'''
	StressRecoveryType = property(_get_StressRecoveryType, _set_StressRecoveryType)
	'''
	Stress Recovery Type

	:type: recurdyn.ProcessNet.StressRecoveryType
	'''

	_prop_map_set_function_ = {
		"_set_AdvancedWeightingFactorCalculation": _set_AdvancedWeightingFactorCalculation,
		"_set_AutomaticOutputsforMarkers": _set_AutomaticOutputsforMarkers,
		"_set_CoreOption": _set_CoreOption,
		"_set_StressRecoveryType": _set_StressRecoveryType,
	}
	_prop_map_get_ = {
		"AdvancedWeightingFactorCalculation": (151, 2, (11, 0), (), "AdvancedWeightingFactorCalculation", None),
		"AutomaticOutputsforMarkers": (154, 2, (11, 0), (), "AutomaticOutputsforMarkers", None),
		"CoreOption": (152, 2, (3, 0), (), "CoreOption", '{975E72D8-BA15-4AB0-9B89-6968A54D2FE5}'),
		"StressRecoveryType": (153, 2, (3, 0), (), "StressRecoveryType", '{82CC641D-AB98-4571-A443-18EB0D52D7BC}'),
	}
	_prop_map_put_ = {
		"AdvancedWeightingFactorCalculation": ((151, LCID, 4, 0),()),
		"AutomaticOutputsforMarkers": ((154, LCID, 4, 0),()),
		"CoreOption": ((152, LCID, 4, 0),()),
		"StressRecoveryType": ((153, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IModelSettingFlexibilityFlexible(DispatchBaseClass):
	'''Model Setting - Flexibility - Flexible'''
	CLSID = IID('{D8DF157B-E900-4ED1-8A7A-36FD7611B889}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_SkipOutputGenerationwhenPausingSimulation(self):
		return self._ApplyTypes_(*(151, 2, (11, 0), (), "SkipOutputGenerationwhenPausingSimulation", None))

	def _set_SkipOutputGenerationwhenPausingSimulation(self, value):
		if "SkipOutputGenerationwhenPausingSimulation" in self.__dict__: self.__dict__["SkipOutputGenerationwhenPausingSimulation"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))

	SkipOutputGenerationwhenPausingSimulation = property(_get_SkipOutputGenerationwhenPausingSimulation, _set_SkipOutputGenerationwhenPausingSimulation)
	'''
	Skip Output Generation When Pausing Simulation

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_SkipOutputGenerationwhenPausingSimulation": _set_SkipOutputGenerationwhenPausingSimulation,
	}
	_prop_map_get_ = {
		"SkipOutputGenerationwhenPausingSimulation": (151, 2, (11, 0), (), "SkipOutputGenerationwhenPausingSimulation", None),
	}
	_prop_map_put_ = {
		"SkipOutputGenerationwhenPausingSimulation": ((151, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IModelSettingFlexibilityRFlex(DispatchBaseClass):
	'''Model Setting - Flexibility - RFlex'''
	CLSID = IID('{38DEE9F7-E829-461E-A2FA-7AB93E5AE392}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AutomaticOutputsforMarkers(self):
		return self._ApplyTypes_(*(155, 2, (11, 0), (), "AutomaticOutputsforMarkers", None))
	def _get_DisplacementData(self):
		return self._ApplyTypes_(*(151, 2, (11, 0), (), "DisplacementData", None))
	def _get_MassInvariant(self):
		return self._ApplyTypes_(*(157, 2, (3, 0), (), "MassInvariant", '{F81396F2-35BB-497C-A05D-6E5A382BBABF}'))
	def _get_MaxNoOfInterfaceNodeMarkers(self):
		return self._ApplyTypes_(*(156, 2, (19, 0), (), "MaxNoOfInterfaceNodeMarkers", None))
	def _get_OutputFileSetting(self):
		return self._ApplyTypes_(*(154, 2, (9, 0), (), "OutputFileSetting", '{350C9018-D3B8-4D6B-B9EC-271CE461FDC0}'))
	def _get_RedundantCheck(self):
		return self._ApplyTypes_(*(158, 2, (3, 0), (), "RedundantCheck", '{69EFDC99-225F-4137-8D0A-456204A65102}'))
	def _get_StrainData(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "StrainData", None))
	def _get_StressData(self):
		return self._ApplyTypes_(*(153, 2, (11, 0), (), "StressData", None))

	def _set_AutomaticOutputsforMarkers(self, value):
		if "AutomaticOutputsforMarkers" in self.__dict__: self.__dict__["AutomaticOutputsforMarkers"] = value; return
		self._oleobj_.Invoke(*((155, LCID, 4, 0) + (value,) + ()))
	def _set_DisplacementData(self, value):
		if "DisplacementData" in self.__dict__: self.__dict__["DisplacementData"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_MassInvariant(self, value):
		if "MassInvariant" in self.__dict__: self.__dict__["MassInvariant"] = value; return
		self._oleobj_.Invoke(*((157, LCID, 4, 0) + (value,) + ()))
	def _set_MaxNoOfInterfaceNodeMarkers(self, value):
		if "MaxNoOfInterfaceNodeMarkers" in self.__dict__: self.__dict__["MaxNoOfInterfaceNodeMarkers"] = value; return
		self._oleobj_.Invoke(*((156, LCID, 4, 0) + (value,) + ()))
	def _set_RedundantCheck(self, value):
		if "RedundantCheck" in self.__dict__: self.__dict__["RedundantCheck"] = value; return
		self._oleobj_.Invoke(*((158, LCID, 4, 0) + (value,) + ()))
	def _set_StrainData(self, value):
		if "StrainData" in self.__dict__: self.__dict__["StrainData"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_StressData(self, value):
		if "StressData" in self.__dict__: self.__dict__["StressData"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))

	AutomaticOutputsforMarkers = property(_get_AutomaticOutputsforMarkers, _set_AutomaticOutputsforMarkers)
	'''
	Automatic Outputs for Markers

	:type: bool
	'''
	DisplacementData = property(_get_DisplacementData, _set_DisplacementData)
	'''
	Displacement Data(*.rfa)

	:type: bool
	'''
	MassInvariant = property(_get_MassInvariant, _set_MassInvariant)
	'''
	Mass Invariant Type

	:type: recurdyn.ProcessNet.MassInvariantType
	'''
	MaxNoOfInterfaceNodeMarkers = property(_get_MaxNoOfInterfaceNodeMarkers, _set_MaxNoOfInterfaceNodeMarkers)
	'''
	Max Number of markers to create in inteface nodes

	:type: int
	'''
	OutputFileSetting = property(_get_OutputFileSetting, None)
	'''
	Output File Setting

	:type: recurdyn.ProcessNet.IStrainStressOutputFileSetting
	'''
	RedundantCheck = property(_get_RedundantCheck, _set_RedundantCheck)
	'''
	Redundant Check Type

	:type: recurdyn.ProcessNet.RedundantCheckType
	'''
	StrainData = property(_get_StrainData, _set_StrainData)
	'''
	Strain Data(*.erd)

	:type: bool
	'''
	StressData = property(_get_StressData, _set_StressData)
	'''
	Stress Data(*.srd)

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_AutomaticOutputsforMarkers": _set_AutomaticOutputsforMarkers,
		"_set_DisplacementData": _set_DisplacementData,
		"_set_MassInvariant": _set_MassInvariant,
		"_set_MaxNoOfInterfaceNodeMarkers": _set_MaxNoOfInterfaceNodeMarkers,
		"_set_RedundantCheck": _set_RedundantCheck,
		"_set_StrainData": _set_StrainData,
		"_set_StressData": _set_StressData,
	}
	_prop_map_get_ = {
		"AutomaticOutputsforMarkers": (155, 2, (11, 0), (), "AutomaticOutputsforMarkers", None),
		"DisplacementData": (151, 2, (11, 0), (), "DisplacementData", None),
		"MassInvariant": (157, 2, (3, 0), (), "MassInvariant", '{F81396F2-35BB-497C-A05D-6E5A382BBABF}'),
		"MaxNoOfInterfaceNodeMarkers": (156, 2, (19, 0), (), "MaxNoOfInterfaceNodeMarkers", None),
		"OutputFileSetting": (154, 2, (9, 0), (), "OutputFileSetting", '{350C9018-D3B8-4D6B-B9EC-271CE461FDC0}'),
		"RedundantCheck": (158, 2, (3, 0), (), "RedundantCheck", '{69EFDC99-225F-4137-8D0A-456204A65102}'),
		"StrainData": (152, 2, (11, 0), (), "StrainData", None),
		"StressData": (153, 2, (11, 0), (), "StressData", None),
	}
	_prop_map_put_ = {
		"AutomaticOutputsforMarkers": ((155, LCID, 4, 0),()),
		"DisplacementData": ((151, LCID, 4, 0),()),
		"MassInvariant": ((157, LCID, 4, 0),()),
		"MaxNoOfInterfaceNodeMarkers": ((156, LCID, 4, 0),()),
		"RedundantCheck": ((158, LCID, 4, 0),()),
		"StrainData": ((152, LCID, 4, 0),()),
		"StressData": ((153, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IModelSettingGeneral(DispatchBaseClass):
	'''Model Setting - General'''
	CLSID = IID('{83A06AD8-8A05-4627-823B-E6C5C9716634}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AccelerateRenderingWhenControllingView(self):
		return self._ApplyTypes_(*(105, 2, (11, 0), (), "AccelerateRenderingWhenControllingView", None))
	def _get_AlignCenterMarkerOrientationWithBodyPrincipalAxis(self):
		return self._ApplyTypes_(*(107, 2, (11, 0), (), "AlignCenterMarkerOrientationWithBodyPrincipalAxis", None))
	def _get_AutofitAfterChangeOfWorkingWindow(self):
		return self._ApplyTypes_(*(106, 2, (11, 0), (), "AutofitAfterChangeOfWorkingWindow", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_CreateBackupFile(self):
		return self._ApplyTypes_(*(108, 2, (11, 0), (), "CreateBackupFile", None))
	def _get_ErrorTolerance(self):
		return self._ApplyTypes_(*(109, 2, (5, 0), (), "ErrorTolerance", None))
	def _get_HideInactiveEntity(self):
		return self._ApplyTypes_(*(104, 2, (11, 0), (), "HideInactiveEntity", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_SaveDialogSizePosition(self):
		return self._ApplyTypes_(*(111, 2, (11, 0), (), "SaveDialogSizePosition", None))
	def _get_ShiftWhenPasting(self):
		return self._ApplyTypes_(*(103, 2, (11, 0), (), "ShiftWhenPasting", None))
	def _get_ZoomFactor(self):
		return self._ApplyTypes_(*(110, 2, (4, 0), (), "ZoomFactor", None))

	def _set_AccelerateRenderingWhenControllingView(self, value):
		if "AccelerateRenderingWhenControllingView" in self.__dict__: self.__dict__["AccelerateRenderingWhenControllingView"] = value; return
		self._oleobj_.Invoke(*((105, LCID, 4, 0) + (value,) + ()))
	def _set_AlignCenterMarkerOrientationWithBodyPrincipalAxis(self, value):
		if "AlignCenterMarkerOrientationWithBodyPrincipalAxis" in self.__dict__: self.__dict__["AlignCenterMarkerOrientationWithBodyPrincipalAxis"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_AutofitAfterChangeOfWorkingWindow(self, value):
		if "AutofitAfterChangeOfWorkingWindow" in self.__dict__: self.__dict__["AutofitAfterChangeOfWorkingWindow"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_CreateBackupFile(self, value):
		if "CreateBackupFile" in self.__dict__: self.__dict__["CreateBackupFile"] = value; return
		self._oleobj_.Invoke(*((108, LCID, 4, 0) + (value,) + ()))
	def _set_ErrorTolerance(self, value):
		if "ErrorTolerance" in self.__dict__: self.__dict__["ErrorTolerance"] = value; return
		self._oleobj_.Invoke(*((109, LCID, 4, 0) + (value,) + ()))
	def _set_HideInactiveEntity(self, value):
		if "HideInactiveEntity" in self.__dict__: self.__dict__["HideInactiveEntity"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_SaveDialogSizePosition(self, value):
		if "SaveDialogSizePosition" in self.__dict__: self.__dict__["SaveDialogSizePosition"] = value; return
		self._oleobj_.Invoke(*((111, LCID, 4, 0) + (value,) + ()))
	def _set_ShiftWhenPasting(self, value):
		if "ShiftWhenPasting" in self.__dict__: self.__dict__["ShiftWhenPasting"] = value; return
		self._oleobj_.Invoke(*((103, LCID, 4, 0) + (value,) + ()))
	def _set_ZoomFactor(self, value):
		if "ZoomFactor" in self.__dict__: self.__dict__["ZoomFactor"] = value; return
		self._oleobj_.Invoke(*((110, LCID, 4, 0) + (value,) + ()))

	AccelerateRenderingWhenControllingView = property(_get_AccelerateRenderingWhenControllingView, _set_AccelerateRenderingWhenControllingView)
	'''
	Accelerate rendering when controlling view

	:type: bool
	'''
	AlignCenterMarkerOrientationWithBodyPrincipalAxis = property(_get_AlignCenterMarkerOrientationWithBodyPrincipalAxis, _set_AlignCenterMarkerOrientationWithBodyPrincipalAxis)
	'''
	Align center marker orientation with body principal axis

	:type: bool
	'''
	AutofitAfterChangeOfWorkingWindow = property(_get_AutofitAfterChangeOfWorkingWindow, _set_AutofitAfterChangeOfWorkingWindow)
	'''
	Autofit after change of working window

	:type: bool
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	CreateBackupFile = property(_get_CreateBackupFile, _set_CreateBackupFile)
	'''
	Create backup file (*.rbak)

	:type: bool
	'''
	ErrorTolerance = property(_get_ErrorTolerance, _set_ErrorTolerance)
	'''
	Error tolerance

	:type: float
	'''
	HideInactiveEntity = property(_get_HideInactiveEntity, _set_HideInactiveEntity)
	'''
	Hide inactive entity

	:type: bool
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	SaveDialogSizePosition = property(_get_SaveDialogSizePosition, _set_SaveDialogSizePosition)
	'''
	Save dialog size and position

	:type: bool
	'''
	ShiftWhenPasting = property(_get_ShiftWhenPasting, _set_ShiftWhenPasting)
	'''
	paste entities are shifted as much as grid size

	:type: bool
	'''
	ZoomFactor = property(_get_ZoomFactor, _set_ZoomFactor)
	'''
	Zoom factor

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_AccelerateRenderingWhenControllingView": _set_AccelerateRenderingWhenControllingView,
		"_set_AlignCenterMarkerOrientationWithBodyPrincipalAxis": _set_AlignCenterMarkerOrientationWithBodyPrincipalAxis,
		"_set_AutofitAfterChangeOfWorkingWindow": _set_AutofitAfterChangeOfWorkingWindow,
		"_set_Comment": _set_Comment,
		"_set_CreateBackupFile": _set_CreateBackupFile,
		"_set_ErrorTolerance": _set_ErrorTolerance,
		"_set_HideInactiveEntity": _set_HideInactiveEntity,
		"_set_Name": _set_Name,
		"_set_SaveDialogSizePosition": _set_SaveDialogSizePosition,
		"_set_ShiftWhenPasting": _set_ShiftWhenPasting,
		"_set_ZoomFactor": _set_ZoomFactor,
	}
	_prop_map_get_ = {
		"AccelerateRenderingWhenControllingView": (105, 2, (11, 0), (), "AccelerateRenderingWhenControllingView", None),
		"AlignCenterMarkerOrientationWithBodyPrincipalAxis": (107, 2, (11, 0), (), "AlignCenterMarkerOrientationWithBodyPrincipalAxis", None),
		"AutofitAfterChangeOfWorkingWindow": (106, 2, (11, 0), (), "AutofitAfterChangeOfWorkingWindow", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"CreateBackupFile": (108, 2, (11, 0), (), "CreateBackupFile", None),
		"ErrorTolerance": (109, 2, (5, 0), (), "ErrorTolerance", None),
		"HideInactiveEntity": (104, 2, (11, 0), (), "HideInactiveEntity", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"SaveDialogSizePosition": (111, 2, (11, 0), (), "SaveDialogSizePosition", None),
		"ShiftWhenPasting": (103, 2, (11, 0), (), "ShiftWhenPasting", None),
		"ZoomFactor": (110, 2, (4, 0), (), "ZoomFactor", None),
	}
	_prop_map_put_ = {
		"AccelerateRenderingWhenControllingView": ((105, LCID, 4, 0),()),
		"AlignCenterMarkerOrientationWithBodyPrincipalAxis": ((107, LCID, 4, 0),()),
		"AutofitAfterChangeOfWorkingWindow": ((106, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"CreateBackupFile": ((108, LCID, 4, 0),()),
		"ErrorTolerance": ((109, LCID, 4, 0),()),
		"HideInactiveEntity": ((104, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"SaveDialogSizePosition": ((111, LCID, 4, 0),()),
		"ShiftWhenPasting": ((103, LCID, 4, 0),()),
		"ZoomFactor": ((110, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IModelSettingLight(DispatchBaseClass):
	'''Model Setting - Light'''
	CLSID = IID('{B81B4D27-0B09-4FCD-B29B-55CCCF9E45DD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Add(self, strName):
		'''
		Add a light contol in the list
		
		:param strName: str
		:rtype: recurdyn.ProcessNet.ILightControl
		'''
		ret = self._oleobj_.InvokeTypes(102, LCID, 1, (9, 0), ((8, 1),),strName
			)
		if ret is not None:
			ret = Dispatch(ret, 'Add', '{2D204501-DF2E-4EAA-90E7-02756A698739}')
		return ret

	def Delete(self, pVal):
		'''
		Delete a light contol in the list
		
		:param pVal: ILightControl
		'''
		return self._oleobj_.InvokeTypes(103, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def Update(self):
		'''
		Update light
		'''
		return self._oleobj_.InvokeTypes(104, LCID, 1, (24, 0), (),)


	def _get_LightControlCollection(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "LightControlCollection", '{4C7152BE-060E-4299-865E-FDD285928BDC}'))

	LightControlCollection = property(_get_LightControlCollection, None)

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"LightControlCollection": (101, 2, (9, 0), (), "LightControlCollection", '{4C7152BE-060E-4299-865E-FDD285928BDC}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IModelSettingPlot(DispatchBaseClass):
	'''Model Setting - Plot'''
	CLSID = IID('{AB76BF02-4EA9-4EC3-AF0E-3B42300415CD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_DefaultPlotTemplateType(self):
		return self._ApplyTypes_(*(102, 2, (3, 0), (), "DefaultPlotTemplateType", '{AEE3451E-0C34-41CE-839A-529F36851DBB}'))
	def _get_SpecifiedDefaultPlotTemplateFile(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "SpecifiedDefaultPlotTemplateFile", None))
	def _get_UseDefaultPlotTemplate(self):
		return self._ApplyTypes_(*(101, 2, (11, 0), (), "UseDefaultPlotTemplate", None))

	def _set_DefaultPlotTemplateType(self, value):
		if "DefaultPlotTemplateType" in self.__dict__: self.__dict__["DefaultPlotTemplateType"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_SpecifiedDefaultPlotTemplateFile(self, value):
		if "SpecifiedDefaultPlotTemplateFile" in self.__dict__: self.__dict__["SpecifiedDefaultPlotTemplateFile"] = value; return
		self._oleobj_.Invoke(*((103, LCID, 4, 0) + (value,) + ()))
	def _set_UseDefaultPlotTemplate(self, value):
		if "UseDefaultPlotTemplate" in self.__dict__: self.__dict__["UseDefaultPlotTemplate"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))

	DefaultPlotTemplateType = property(_get_DefaultPlotTemplateType, _set_DefaultPlotTemplateType)
	'''
	The type of default plot template

	:type: recurdyn.ProcessNet.DefaultPlotTemplateType
	'''
	SpecifiedDefaultPlotTemplateFile = property(_get_SpecifiedDefaultPlotTemplateFile, _set_SpecifiedDefaultPlotTemplateFile)
	'''
	The specified file name of default plot template

	:type: str
	'''
	UseDefaultPlotTemplate = property(_get_UseDefaultPlotTemplate, _set_UseDefaultPlotTemplate)
	'''
	If true, apply the plot template file(*.template) when the mode is changed to Plot.

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_DefaultPlotTemplateType": _set_DefaultPlotTemplateType,
		"_set_SpecifiedDefaultPlotTemplateFile": _set_SpecifiedDefaultPlotTemplateFile,
		"_set_UseDefaultPlotTemplate": _set_UseDefaultPlotTemplate,
	}
	_prop_map_get_ = {
		"DefaultPlotTemplateType": (102, 2, (3, 0), (), "DefaultPlotTemplateType", '{AEE3451E-0C34-41CE-839A-529F36851DBB}'),
		"SpecifiedDefaultPlotTemplateFile": (103, 2, (8, 0), (), "SpecifiedDefaultPlotTemplateFile", None),
		"UseDefaultPlotTemplate": (101, 2, (11, 0), (), "UseDefaultPlotTemplate", None),
	}
	_prop_map_put_ = {
		"DefaultPlotTemplateType": ((102, LCID, 4, 0),()),
		"SpecifiedDefaultPlotTemplateFile": ((103, LCID, 4, 0),()),
		"UseDefaultPlotTemplate": ((101, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IMotion(DispatchBaseClass):
	'''Motion'''
	CLSID = IID('{47F4E55C-4291-4251-866A-98A74112D266}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Condition(self):
		return self._ApplyTypes_(*(156, 2, (3, 0), (), "Condition", '{70901B7E-3DCF-4FEB-942E-27D3626EE52D}'))
	def _get_Expression(self):
		return self._ApplyTypes_(*(152, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_InitialPosition(self):
		return self._ApplyTypes_(*(153, 2, (5, 0), (), "InitialPosition", None))
	def _get_InitialPositionIDouble(self):
		return self._ApplyTypes_(*(157, 2, (9, 0), (), "InitialPositionIDouble", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_InitialVelocity(self):
		return self._ApplyTypes_(*(154, 2, (5, 0), (), "InitialVelocity", None))
	def _get_InitialVelocityIDouble(self):
		return self._ApplyTypes_(*(158, 2, (9, 0), (), "InitialVelocityIDouble", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Type(self):
		return self._ApplyTypes_(*(151, 2, (3, 0), (), "Type", '{94BD2B18-1251-4CF2-8423-311BAD5E6A7C}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_UserSubroutine(self):
		return self._ApplyTypes_(*(155, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Condition(self, value):
		if "Condition" in self.__dict__: self.__dict__["Condition"] = value; return
		self._oleobj_.Invoke(*((156, LCID, 4, 0) + (value,) + ()))
	def _set_Expression(self, value):
		if "Expression" in self.__dict__: self.__dict__["Expression"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_InitialPosition(self, value):
		if "InitialPosition" in self.__dict__: self.__dict__["InitialPosition"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))
	def _set_InitialVelocity(self, value):
		if "InitialVelocity" in self.__dict__: self.__dict__["InitialVelocity"] = value; return
		self._oleobj_.Invoke(*((154, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_Type(self, value):
		if "Type" in self.__dict__: self.__dict__["Type"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UserSubroutine(self, value):
		if "UserSubroutine" in self.__dict__: self.__dict__["UserSubroutine"] = value; return
		self._oleobj_.Invoke(*((155, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Condition = property(_get_Condition, _set_Condition)
	'''
	Condition

	:type: recurdyn.ProcessNet.MotionCondition
	'''
	Expression = property(_get_Expression, _set_Expression)
	'''
	Expression

	:type: recurdyn.ProcessNet.IExpression
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	InitialPosition = property(_get_InitialPosition, _set_InitialPosition)
	'''
	InitialPosition is changed from double into IDouble. Use InitialPositionIDouble.

	:type: float
	'''
	InitialPositionIDouble = property(_get_InitialPositionIDouble, None)
	'''
	Initial position

	:type: recurdyn.ProcessNet.IDouble
	'''
	InitialVelocity = property(_get_InitialVelocity, _set_InitialVelocity)
	'''
	InitialVelocity is changed from double into IDouble. Use InitialVelocityIDouble.

	:type: float
	'''
	InitialVelocityIDouble = property(_get_InitialVelocityIDouble, None)
	'''
	Initial velocity

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Type = property(_get_Type, _set_Type)
	'''
	Motion type

	:type: recurdyn.ProcessNet.MotionType
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	UserSubroutine = property(_get_UserSubroutine, _set_UserSubroutine)
	'''
	User subroutine

	:type: recurdyn.ProcessNet.IUserSubroutine
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Condition": _set_Condition,
		"_set_Expression": _set_Expression,
		"_set_InitialPosition": _set_InitialPosition,
		"_set_InitialVelocity": _set_InitialVelocity,
		"_set_Name": _set_Name,
		"_set_Type": _set_Type,
		"_set_UserData": _set_UserData,
		"_set_UserSubroutine": _set_UserSubroutine,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Condition": (156, 2, (3, 0), (), "Condition", '{70901B7E-3DCF-4FEB-942E-27D3626EE52D}'),
		"Expression": (152, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"InitialPosition": (153, 2, (5, 0), (), "InitialPosition", None),
		"InitialPositionIDouble": (157, 2, (9, 0), (), "InitialPositionIDouble", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"InitialVelocity": (154, 2, (5, 0), (), "InitialVelocity", None),
		"InitialVelocityIDouble": (158, 2, (9, 0), (), "InitialVelocityIDouble", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Type": (151, 2, (3, 0), (), "Type", '{94BD2B18-1251-4CF2-8423-311BAD5E6A7C}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"UserSubroutine": (155, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Condition": ((156, LCID, 4, 0),()),
		"Expression": ((152, LCID, 4, 0),()),
		"InitialPosition": ((153, LCID, 4, 0),()),
		"InitialVelocity": ((154, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"Type": ((151, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"UserSubroutine": ((155, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IMotionPointOnCurve(DispatchBaseClass):
	'''Motion'''
	CLSID = IID('{7568D19B-7019-4ABF-A18C-D41C8C39E7CE}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Condition(self):
		return self._ApplyTypes_(*(155, 2, (3, 0), (), "Condition", '{AA0392CF-8DA3-4D16-8280-13D900515BF7}'))
	def _get_Expression(self):
		return self._ApplyTypes_(*(152, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_InitialPosition(self):
		return self._ApplyTypes_(*(153, 2, (5, 0), (), "InitialPosition", None))
	def _get_InitialPositionIDouble(self):
		return self._ApplyTypes_(*(157, 2, (9, 0), (), "InitialPositionIDouble", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_StartingFromtheAssemblyPosition(self):
		return self._ApplyTypes_(*(156, 2, (11, 0), (), "StartingFromtheAssemblyPosition", None))
	def _get_Type(self):
		return self._ApplyTypes_(*(151, 2, (3, 0), (), "Type", '{94BD2B18-1251-4CF2-8423-311BAD5E6A7C}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_UserSubroutine(self):
		return self._ApplyTypes_(*(154, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Condition(self, value):
		if "Condition" in self.__dict__: self.__dict__["Condition"] = value; return
		self._oleobj_.Invoke(*((155, LCID, 4, 0) + (value,) + ()))
	def _set_Expression(self, value):
		if "Expression" in self.__dict__: self.__dict__["Expression"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_InitialPosition(self, value):
		if "InitialPosition" in self.__dict__: self.__dict__["InitialPosition"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_StartingFromtheAssemblyPosition(self, value):
		if "StartingFromtheAssemblyPosition" in self.__dict__: self.__dict__["StartingFromtheAssemblyPosition"] = value; return
		self._oleobj_.Invoke(*((156, LCID, 4, 0) + (value,) + ()))
	def _set_Type(self, value):
		if "Type" in self.__dict__: self.__dict__["Type"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UserSubroutine(self, value):
		if "UserSubroutine" in self.__dict__: self.__dict__["UserSubroutine"] = value; return
		self._oleobj_.Invoke(*((154, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Condition = property(_get_Condition, _set_Condition)
	'''
	Condition

	:type: recurdyn.ProcessNet.MotionConditionPointOnCurve
	'''
	Expression = property(_get_Expression, _set_Expression)
	'''
	Expression

	:type: recurdyn.ProcessNet.IExpression
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	InitialPosition = property(_get_InitialPosition, _set_InitialPosition)
	'''
	InitialPosition is changed from double into IDouble. Use InitialPositionIDouble.

	:type: float
	'''
	InitialPositionIDouble = property(_get_InitialPositionIDouble, None)
	'''
	Initial position

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	StartingFromtheAssemblyPosition = property(_get_StartingFromtheAssemblyPosition, _set_StartingFromtheAssemblyPosition)
	'''
	Starting from the assembly position

	:type: bool
	'''
	Type = property(_get_Type, _set_Type)
	'''
	Motion type

	:type: recurdyn.ProcessNet.MotionType
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	UserSubroutine = property(_get_UserSubroutine, _set_UserSubroutine)
	'''
	User subroutine

	:type: recurdyn.ProcessNet.IUserSubroutine
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Condition": _set_Condition,
		"_set_Expression": _set_Expression,
		"_set_InitialPosition": _set_InitialPosition,
		"_set_Name": _set_Name,
		"_set_StartingFromtheAssemblyPosition": _set_StartingFromtheAssemblyPosition,
		"_set_Type": _set_Type,
		"_set_UserData": _set_UserData,
		"_set_UserSubroutine": _set_UserSubroutine,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Condition": (155, 2, (3, 0), (), "Condition", '{AA0392CF-8DA3-4D16-8280-13D900515BF7}'),
		"Expression": (152, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"InitialPosition": (153, 2, (5, 0), (), "InitialPosition", None),
		"InitialPositionIDouble": (157, 2, (9, 0), (), "InitialPositionIDouble", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"StartingFromtheAssemblyPosition": (156, 2, (11, 0), (), "StartingFromtheAssemblyPosition", None),
		"Type": (151, 2, (3, 0), (), "Type", '{94BD2B18-1251-4CF2-8423-311BAD5E6A7C}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"UserSubroutine": (154, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Condition": ((155, LCID, 4, 0),()),
		"Expression": ((152, LCID, 4, 0),()),
		"InitialPosition": ((153, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"StartingFromtheAssemblyPosition": ((156, LCID, 4, 0),()),
		"Type": ((151, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"UserSubroutine": ((154, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class INode(DispatchBaseClass):
	'''Node Interface'''
	CLSID = IID('{7D9BF8A1-6222-49D0-A13D-E07499CE4ADA}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_ID(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "ID", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_x(self):
		return self._ApplyTypes_(*(152, 2, (5, 0), (), "x", None))
	def _get_y(self):
		return self._ApplyTypes_(*(153, 2, (5, 0), (), "y", None))
	def _get_z(self):
		return self._ApplyTypes_(*(154, 2, (5, 0), (), "z", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ID(self, value):
		if "ID" in self.__dict__: self.__dict__["ID"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_x(self, value):
		if "x" in self.__dict__: self.__dict__["x"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_y(self, value):
		if "y" in self.__dict__: self.__dict__["y"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))
	def _set_z(self, value):
		if "z" in self.__dict__: self.__dict__["z"] = value; return
		self._oleobj_.Invoke(*((154, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	ID = property(_get_ID, _set_ID)
	'''
	ID

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	x = property(_get_x, _set_x)
	'''
	Position X

	:type: float
	'''
	y = property(_get_y, _set_y)
	'''
	Position Y

	:type: float
	'''
	z = property(_get_z, _set_z)
	'''
	Position Z

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_ID": _set_ID,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
		"_set_x": _set_x,
		"_set_y": _set_y,
		"_set_z": _set_z,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"ID": (151, 2, (19, 0), (), "ID", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"x": (152, 2, (5, 0), (), "x", None),
		"y": (153, 2, (5, 0), (), "y", None),
		"z": (154, 2, (5, 0), (), "z", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"ID": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"x": ((152, LCID, 4, 0),()),
		"y": ((153, LCID, 4, 0),()),
		"z": ((154, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class INodeBC(DispatchBaseClass):
	'''Node boundary condition'''
	CLSID = IID('{28491D53-A2CA-45CC-80CC-CB1FB4E7A32C}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_RotationalDOFX(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "RotationalDOFX", None))
	def _get_RotationalDOFY(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "RotationalDOFY", None))
	def _get_RotationalDOFZ(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "RotationalDOFZ", None))
	def _get_Select(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "Select", None))
	def _get_TranslationalDOFX(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "TranslationalDOFX", None))
	def _get_TranslationalDOFY(self):
		return self._ApplyTypes_(*(53, 2, (11, 0), (), "TranslationalDOFY", None))
	def _get_TranslationalDOFZ(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "TranslationalDOFZ", None))

	def _set_RotationalDOFX(self, value):
		if "RotationalDOFX" in self.__dict__: self.__dict__["RotationalDOFX"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_RotationalDOFY(self, value):
		if "RotationalDOFY" in self.__dict__: self.__dict__["RotationalDOFY"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_RotationalDOFZ(self, value):
		if "RotationalDOFZ" in self.__dict__: self.__dict__["RotationalDOFZ"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_Select(self, value):
		if "Select" in self.__dict__: self.__dict__["Select"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_TranslationalDOFX(self, value):
		if "TranslationalDOFX" in self.__dict__: self.__dict__["TranslationalDOFX"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_TranslationalDOFY(self, value):
		if "TranslationalDOFY" in self.__dict__: self.__dict__["TranslationalDOFY"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_TranslationalDOFZ(self, value):
		if "TranslationalDOFZ" in self.__dict__: self.__dict__["TranslationalDOFZ"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))

	RotationalDOFX = property(_get_RotationalDOFX, _set_RotationalDOFX)
	'''
	Rotational DOF X

	:type: bool
	'''
	RotationalDOFY = property(_get_RotationalDOFY, _set_RotationalDOFY)
	'''
	Rotational DOF Y

	:type: bool
	'''
	RotationalDOFZ = property(_get_RotationalDOFZ, _set_RotationalDOFZ)
	'''
	Rotational DOF Z

	:type: bool
	'''
	Select = property(_get_Select, _set_Select)
	'''
	Select

	:type: bool
	'''
	TranslationalDOFX = property(_get_TranslationalDOFX, _set_TranslationalDOFX)
	'''
	Translational DOF X

	:type: bool
	'''
	TranslationalDOFY = property(_get_TranslationalDOFY, _set_TranslationalDOFY)
	'''
	Translational DOF Y

	:type: bool
	'''
	TranslationalDOFZ = property(_get_TranslationalDOFZ, _set_TranslationalDOFZ)
	'''
	Translational DOF Z

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_RotationalDOFX": _set_RotationalDOFX,
		"_set_RotationalDOFY": _set_RotationalDOFY,
		"_set_RotationalDOFZ": _set_RotationalDOFZ,
		"_set_Select": _set_Select,
		"_set_TranslationalDOFX": _set_TranslationalDOFX,
		"_set_TranslationalDOFY": _set_TranslationalDOFY,
		"_set_TranslationalDOFZ": _set_TranslationalDOFZ,
	}
	_prop_map_get_ = {
		"RotationalDOFX": (55, 2, (11, 0), (), "RotationalDOFX", None),
		"RotationalDOFY": (56, 2, (11, 0), (), "RotationalDOFY", None),
		"RotationalDOFZ": (57, 2, (11, 0), (), "RotationalDOFZ", None),
		"Select": (51, 2, (11, 0), (), "Select", None),
		"TranslationalDOFX": (52, 2, (11, 0), (), "TranslationalDOFX", None),
		"TranslationalDOFY": (53, 2, (11, 0), (), "TranslationalDOFY", None),
		"TranslationalDOFZ": (54, 2, (11, 0), (), "TranslationalDOFZ", None),
	}
	_prop_map_put_ = {
		"RotationalDOFX": ((55, LCID, 4, 0),()),
		"RotationalDOFY": ((56, LCID, 4, 0),()),
		"RotationalDOFZ": ((57, LCID, 4, 0),()),
		"Select": ((51, LCID, 4, 0),()),
		"TranslationalDOFX": ((52, LCID, 4, 0),()),
		"TranslationalDOFY": ((53, LCID, 4, 0),()),
		"TranslationalDOFZ": ((54, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class INodeBCCollection(DispatchBaseClass):
	'''INodeBCCollection'''
	CLSID = IID('{7F035946-EE7C-4557-BAFC-000BDD366EDF}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.INodeBC
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{28491D53-A2CA-45CC-80CC-CB1FB4E7A32C}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.INodeBC
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{28491D53-A2CA-45CC-80CC-CB1FB4E7A32C}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{28491D53-A2CA-45CC-80CC-CB1FB4E7A32C}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{28491D53-A2CA-45CC-80CC-CB1FB4E7A32C}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class INodeOutput(DispatchBaseClass):
	'''Node output'''
	CLSID = IID('{C3E2B430-98D5-4D24-BB8C-3B00F28373F3}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Select(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "Select", None))

	def _set_Select(self, value):
		if "Select" in self.__dict__: self.__dict__["Select"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))

	Select = property(_get_Select, _set_Select)
	'''
	Select

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Select": _set_Select,
	}
	_prop_map_get_ = {
		"Select": (51, 2, (11, 0), (), "Select", None),
	}
	_prop_map_put_ = {
		"Select": ((51, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class INodeOutputCollection(DispatchBaseClass):
	'''INodeOutputCollection'''
	CLSID = IID('{4549131A-72B6-45B1-9ABE-C2A32F250FED}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.INodeOutput
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{C3E2B430-98D5-4D24-BB8C-3B00F28373F3}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.INodeOutput
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{C3E2B430-98D5-4D24-BB8C-3B00F28373F3}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{C3E2B430-98D5-4D24-BB8C-3B00F28373F3}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{C3E2B430-98D5-4D24-BB8C-3B00F28373F3}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class INodeReadOnly(DispatchBaseClass):
	'''Read only Node Interface'''
	CLSID = IID('{FAB91948-4286-4309-BAB1-225770C71E9E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_ID(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "ID", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_x(self):
		return self._ApplyTypes_(*(152, 2, (5, 0), (), "x", None))
	def _get_y(self):
		return self._ApplyTypes_(*(153, 2, (5, 0), (), "y", None))
	def _get_z(self):
		return self._ApplyTypes_(*(154, 2, (5, 0), (), "z", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	ID = property(_get_ID, None)
	'''
	ID

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	x = property(_get_x, None)
	'''
	Position X

	:type: float
	'''
	y = property(_get_y, None)
	'''
	Position Y

	:type: float
	'''
	z = property(_get_z, None)
	'''
	Position Z

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"ID": (151, 2, (19, 0), (), "ID", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"x": (152, 2, (5, 0), (), "x", None),
		"y": (153, 2, (5, 0), (), "y", None),
		"z": (154, 2, (5, 0), (), "z", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IObjectControl(DispatchBaseClass):
	'''Object Control'''
	CLSID = IID('{21BE44B2-CA0C-4C78-8EB3-B3CA8BDE0726}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AlignObjectWithFace(self, pActionFace, pBaseFace, btype):
		'''
		Align object with face
		
		:param pActionFace: IGeometryFace
		:param pBaseFace: IGeometryFace
		:param btype: AlignNomalVectorType
		'''
		return self._oleobj_.InvokeTypes(56, LCID, 1, (24, 0), ((9, 1), (9, 1), (3, 1)),pActionFace
			, pBaseFace, btype)


	def AlignObjectWithOrientation(self, pEntity, pReferenceObject):
		'''
		Align object with orientation
		
		:param pEntity: IGeneric
		:param pReferenceObject: IGeneric
		'''
		return self._oleobj_.InvokeTypes(55, LCID, 1, (24, 0), ((9, 1), (9, 1)),pEntity
			, pReferenceObject)


	def RotateObjectWithScalar(self, pEntity, pAxisOrigin, pAxisDirection, dDegree):
		'''
		Rotate object with Scalar
		
		:param pEntity: IGeneric
		:param pAxisOrigin: list[float]
		:param pAxisDirection: list[float]
		:param dDegree: float
		'''
		return self._oleobj_.InvokeTypes(53, LCID, 1, (24, 0), ((9, 1), (8197, 1), (8197, 1), (5, 1)),pEntity
			, pAxisOrigin, pAxisDirection, dDegree)


	def RotateObjectWithVector(self, pEntity, pAxisOrigin, pAxisDirection, pFirstVector, pSecondVector):
		'''
		Rotate object with vector
		
		:param pEntity: IGeneric
		:param pAxisOrigin: list[float]
		:param pAxisDirection: list[float]
		:param pFirstVector: list[float]
		:param pSecondVector: list[float]
		'''
		return self._oleobj_.InvokeTypes(54, LCID, 1, (24, 0), ((9, 1), (8197, 1), (8197, 1), (8197, 1), (8197, 1)),pEntity
			, pAxisOrigin, pAxisDirection, pFirstVector, pSecondVector)


	def TranslateObjectWithTwoPoints(self, pEntity, pFirstPt, pSecondPt):
		'''
		Translate object with two point
		
		:param pEntity: IGeneric
		:param pFirstPt: list[float]
		:param pSecondPt: list[float]
		'''
		return self._oleobj_.InvokeTypes(52, LCID, 1, (24, 0), ((9, 1), (8197, 1), (8197, 1)),pEntity
			, pFirstPt, pSecondPt)


	def TranslateObjectWithVector(self, pEntity, pDirection, dDistance):
		'''
		Translate object with vector
		
		:param pEntity: IGeneric
		:param pDirection: list[float]
		:param dDistance: float
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (24, 0), ((9, 1), (8197, 1), (5, 1)),pEntity
			, pDirection, dDistance)


	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IPairConstraint(DispatchBaseClass):
	'''Coupler'''
	CLSID = IID('{E53E6E5E-C0B7-4F3F-9E32-30F47855CD70}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Comment": _set_Comment,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IPairConstraintCollection(DispatchBaseClass):
	'''IPairConstraintCollection'''
	CLSID = IID('{B21BD336-10F0-43BF-9EA3-E2258E754366}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IPairConstraint
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{E53E6E5E-C0B7-4F3F-9E32-30F47855CD70}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IPairConstraint
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{E53E6E5E-C0B7-4F3F-9E32-30F47855CD70}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{E53E6E5E-C0B7-4F3F-9E32-30F47855CD70}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{E53E6E5E-C0B7-4F3F-9E32-30F47855CD70}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPairConstraintCoupler(DispatchBaseClass):
	'''The coupler can be used to relate relative coordinates of revolute, translational, and cylindrical joints. The relative coordinates may have a linear relationship, which is defined as scales.'''
	CLSID = IID('{842283CC-9684-472C-B061-E5659014C471}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Coupler1(self):
		return self._ApplyTypes_(*(304, 2, (9, 0), (), "Coupler1", '{B9173DAD-05DD-4037-9367-726DDDEE988E}'))
	def _get_Coupler1Scale(self):
		return self._ApplyTypes_(*(305, 2, (9, 0), (), "Coupler1Scale", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Coupler1Type(self):
		return self._ApplyTypes_(*(309, 2, (3, 0), (), "Coupler1Type", '{03F35DB8-F120-47FC-82B7-BCDA7152AF3A}'))
	def _get_Coupler2(self):
		return self._ApplyTypes_(*(306, 2, (9, 0), (), "Coupler2", '{B9173DAD-05DD-4037-9367-726DDDEE988E}'))
	def _get_Coupler2Scale(self):
		return self._ApplyTypes_(*(307, 2, (9, 0), (), "Coupler2Scale", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Coupler2Type(self):
		return self._ApplyTypes_(*(310, 2, (3, 0), (), "Coupler2Type", '{03F35DB8-F120-47FC-82B7-BCDA7152AF3A}'))
	def _get_Driver(self):
		return self._ApplyTypes_(*(302, 2, (9, 0), (), "Driver", '{B9173DAD-05DD-4037-9367-726DDDEE988E}'))
	def _get_DriverScale(self):
		return self._ApplyTypes_(*(303, 2, (9, 0), (), "DriverScale", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_DriverType(self):
		return self._ApplyTypes_(*(308, 2, (3, 0), (), "DriverType", '{03F35DB8-F120-47FC-82B7-BCDA7152AF3A}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Type(self):
		return self._ApplyTypes_(*(301, 2, (3, 0), (), "Type", '{74E41256-D5D8-4EC8-82EE-2061F1AEC87A}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Coupler1(self, value):
		if "Coupler1" in self.__dict__: self.__dict__["Coupler1"] = value; return
		self._oleobj_.Invoke(*((304, LCID, 4, 0) + (value,) + ()))
	def _set_Coupler1Type(self, value):
		if "Coupler1Type" in self.__dict__: self.__dict__["Coupler1Type"] = value; return
		self._oleobj_.Invoke(*((309, LCID, 4, 0) + (value,) + ()))
	def _set_Coupler2(self, value):
		if "Coupler2" in self.__dict__: self.__dict__["Coupler2"] = value; return
		self._oleobj_.Invoke(*((306, LCID, 4, 0) + (value,) + ()))
	def _set_Coupler2Type(self, value):
		if "Coupler2Type" in self.__dict__: self.__dict__["Coupler2Type"] = value; return
		self._oleobj_.Invoke(*((310, LCID, 4, 0) + (value,) + ()))
	def _set_Driver(self, value):
		if "Driver" in self.__dict__: self.__dict__["Driver"] = value; return
		self._oleobj_.Invoke(*((302, LCID, 4, 0) + (value,) + ()))
	def _set_DriverType(self, value):
		if "DriverType" in self.__dict__: self.__dict__["DriverType"] = value; return
		self._oleobj_.Invoke(*((308, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_Type(self, value):
		if "Type" in self.__dict__: self.__dict__["Type"] = value; return
		self._oleobj_.Invoke(*((301, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Coupler1 = property(_get_Coupler1, _set_Coupler1)
	'''
	Coupler1

	:type: recurdyn.ProcessNet.IJoint
	'''
	Coupler1Scale = property(_get_Coupler1Scale, None)
	'''
	Coupler1 scale

	:type: recurdyn.ProcessNet.IDouble
	'''
	Coupler1Type = property(_get_Coupler1Type, _set_Coupler1Type)
	'''
	Coupler1 type

	:type: recurdyn.ProcessNet.CouplerJointType
	'''
	Coupler2 = property(_get_Coupler2, _set_Coupler2)
	'''
	Coupler2

	:type: recurdyn.ProcessNet.IJoint
	'''
	Coupler2Scale = property(_get_Coupler2Scale, None)
	'''
	Coupler2 scale

	:type: recurdyn.ProcessNet.IDouble
	'''
	Coupler2Type = property(_get_Coupler2Type, _set_Coupler2Type)
	'''
	Coupler2 type

	:type: recurdyn.ProcessNet.CouplerJointType
	'''
	Driver = property(_get_Driver, _set_Driver)
	'''
	Driver

	:type: recurdyn.ProcessNet.IJoint
	'''
	DriverScale = property(_get_DriverScale, None)
	'''
	Driver scale

	:type: recurdyn.ProcessNet.IDouble
	'''
	DriverType = property(_get_DriverType, _set_DriverType)
	'''
	Driver type

	:type: recurdyn.ProcessNet.CouplerJointType
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Type = property(_get_Type, _set_Type)
	'''
	Type

	:type: recurdyn.ProcessNet.CouplerType
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Comment": _set_Comment,
		"_set_Coupler1": _set_Coupler1,
		"_set_Coupler1Type": _set_Coupler1Type,
		"_set_Coupler2": _set_Coupler2,
		"_set_Coupler2Type": _set_Coupler2Type,
		"_set_Driver": _set_Driver,
		"_set_DriverType": _set_DriverType,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_Type": _set_Type,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Coupler1": (304, 2, (9, 0), (), "Coupler1", '{B9173DAD-05DD-4037-9367-726DDDEE988E}'),
		"Coupler1Scale": (305, 2, (9, 0), (), "Coupler1Scale", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Coupler1Type": (309, 2, (3, 0), (), "Coupler1Type", '{03F35DB8-F120-47FC-82B7-BCDA7152AF3A}'),
		"Coupler2": (306, 2, (9, 0), (), "Coupler2", '{B9173DAD-05DD-4037-9367-726DDDEE988E}'),
		"Coupler2Scale": (307, 2, (9, 0), (), "Coupler2Scale", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Coupler2Type": (310, 2, (3, 0), (), "Coupler2Type", '{03F35DB8-F120-47FC-82B7-BCDA7152AF3A}'),
		"Driver": (302, 2, (9, 0), (), "Driver", '{B9173DAD-05DD-4037-9367-726DDDEE988E}'),
		"DriverScale": (303, 2, (9, 0), (), "DriverScale", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"DriverType": (308, 2, (3, 0), (), "DriverType", '{03F35DB8-F120-47FC-82B7-BCDA7152AF3A}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Type": (301, 2, (3, 0), (), "Type", '{74E41256-D5D8-4EC8-82EE-2061F1AEC87A}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Coupler1": ((304, LCID, 4, 0),()),
		"Coupler1Type": ((309, LCID, 4, 0),()),
		"Coupler2": ((306, LCID, 4, 0),()),
		"Coupler2Type": ((310, LCID, 4, 0),()),
		"Driver": ((302, LCID, 4, 0),()),
		"DriverType": ((308, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"Type": ((301, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IPairConstraintGear(DispatchBaseClass):
	'''You can use a gear constraint to relate relative coordinates of two revolute joints. You can define the gear ratio by attaching a common velocity marker on the carrier body to which the joints are attaches.'''
	CLSID = IID('{D56837DF-B61D-4938-A25D-02A0B67193C8}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_CommonVelocityMarker(self):
		return self._ApplyTypes_(*(303, 2, (9, 0), (), "CommonVelocityMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_FirstJoint(self):
		return self._ApplyTypes_(*(301, 2, (9, 0), (), "FirstJoint", '{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_SecondJoint(self):
		return self._ApplyTypes_(*(302, 2, (9, 0), (), "SecondJoint", '{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_CommonVelocityMarker(self, value):
		if "CommonVelocityMarker" in self.__dict__: self.__dict__["CommonVelocityMarker"] = value; return
		self._oleobj_.Invoke(*((303, LCID, 4, 0) + (value,) + ()))
	def _set_FirstJoint(self, value):
		if "FirstJoint" in self.__dict__: self.__dict__["FirstJoint"] = value; return
		self._oleobj_.Invoke(*((301, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_SecondJoint(self, value):
		if "SecondJoint" in self.__dict__: self.__dict__["SecondJoint"] = value; return
		self._oleobj_.Invoke(*((302, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	CommonVelocityMarker = property(_get_CommonVelocityMarker, _set_CommonVelocityMarker)
	'''
	Common velocity marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	FirstJoint = property(_get_FirstJoint, _set_FirstJoint)
	'''
	First joint

	:type: recurdyn.ProcessNet.IJointRevolute
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	SecondJoint = property(_get_SecondJoint, _set_SecondJoint)
	'''
	Second joint

	:type: recurdyn.ProcessNet.IJointRevolute
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Comment": _set_Comment,
		"_set_CommonVelocityMarker": _set_CommonVelocityMarker,
		"_set_FirstJoint": _set_FirstJoint,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_SecondJoint": _set_SecondJoint,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"CommonVelocityMarker": (303, 2, (9, 0), (), "CommonVelocityMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"FirstJoint": (301, 2, (9, 0), (), "FirstJoint", '{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"SecondJoint": (302, 2, (9, 0), (), "SecondJoint", '{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"CommonVelocityMarker": ((303, LCID, 4, 0),()),
		"FirstJoint": ((301, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"SecondJoint": ((302, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IParametricPoint(DispatchBaseClass):
	'''Parametric point'''
	CLSID = IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetGlobalPoint(self):
		'''
		Point viewed at intertia reference frame
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(156, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetGlobalPoint', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def Update(self):
		'''
		Update ParametricPoint
		'''
		return self._oleobj_.InvokeTypes(158, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_PointX(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "PointX", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PointY(self):
		return self._ApplyTypes_(*(152, 2, (9, 0), (), "PointY", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PointZ(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "PointZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RefMarker(self):
		return self._ApplyTypes_(*(154, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_RefMarkerEx(self):
		return self._ApplyTypes_(*(157, 2, (9, 0), (), "RefMarkerEx", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Text(self):
		return self._ApplyTypes_(*(159, 2, (8, 0), (), "Text", None))
	def _get_UseDesignParameter(self):
		return self._ApplyTypes_(*(155, 2, (11, 0), (), "UseDesignParameter", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_RefMarker(self, value):
		if "RefMarker" in self.__dict__: self.__dict__["RefMarker"] = value; return
		self._oleobj_.Invoke(*((154, LCID, 4, 0) + (value,) + ()))
	def _set_Text(self, value):
		if "Text" in self.__dict__: self.__dict__["Text"] = value; return
		self._oleobj_.Invoke(*((159, LCID, 4, 0) + (value,) + ()))
	def _set_UseDesignParameter(self, value):
		if "UseDesignParameter" in self.__dict__: self.__dict__["UseDesignParameter"] = value; return
		self._oleobj_.Invoke(*((155, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	PointX = property(_get_PointX, None)
	'''
	X Point

	:type: recurdyn.ProcessNet.IDouble
	'''
	PointY = property(_get_PointY, None)
	'''
	Y Point

	:type: recurdyn.ProcessNet.IDouble
	'''
	PointZ = property(_get_PointZ, None)
	'''
	Z Point

	:type: recurdyn.ProcessNet.IDouble
	'''
	RefMarker = property(_get_RefMarker, _set_RefMarker)
	'''
	Reference marker (Inertia reference frame is default.)

	:type: recurdyn.ProcessNet.IMarker
	'''
	RefMarkerEx = property(_get_RefMarkerEx, None)
	'''
	Reference marker for debugging

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Text = property(_get_Text, _set_Text)
	'''
	Text

	:type: str
	'''
	UseDesignParameter = property(_get_UseDesignParameter, _set_UseDesignParameter)
	'''
	If true, parametric point is exported in *.rdp file

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_RefMarker": _set_RefMarker,
		"_set_Text": _set_Text,
		"_set_UseDesignParameter": _set_UseDesignParameter,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"PointX": (151, 2, (9, 0), (), "PointX", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PointY": (152, 2, (9, 0), (), "PointY", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PointZ": (153, 2, (9, 0), (), "PointZ", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RefMarker": (154, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"RefMarkerEx": (157, 2, (9, 0), (), "RefMarkerEx", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Text": (159, 2, (8, 0), (), "Text", None),
		"UseDesignParameter": (155, 2, (11, 0), (), "UseDesignParameter", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"RefMarker": ((154, LCID, 4, 0),()),
		"Text": ((159, LCID, 4, 0),()),
		"UseDesignParameter": ((155, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IParametricPointCollection(DispatchBaseClass):
	'''IParametricPointCollection'''
	CLSID = IID('{65267578-7015-4BB5-BB65-F5F81CCEA244}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IParametricPoint
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IParametricPoint
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IParametricPointConnector(DispatchBaseClass):
	'''Parametric point connector'''
	CLSID = IID('{5A26F623-DA73-4531-884A-946494037A2B}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Add(self, pVal):
		'''
		Add Reference ParametricPoint
		
		:param pVal: IParametricPoint
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def Delete(self, pVal):
		'''
		Delete Reference ParametricPoint
		
		:param pVal: IParametricPoint
		'''
		return self._oleobj_.InvokeTypes(152, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def DeleteAll(self):
		'''
		Delete All References
		'''
		return self._oleobj_.InvokeTypes(157, LCID, 1, (24, 0), (),)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetReferenceByIndex(self, Index):
		'''
		Get Reference PP
		
		:param Index: int
		:rtype: recurdyn.ProcessNet.IParametricPoint
		'''
		ret = self._oleobj_.InvokeTypes(155, LCID, 1, (9, 0), ((19, 1),),Index
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetReferenceByIndex', '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')
		return ret

	def NumOfReferences(self):
		'''
		Get Reference Count
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(156, LCID, 1, (19, 0), (),)


	def Update(self):
		'''
		Update ParametricPoint Connector
		'''
		return self._oleobj_.InvokeTypes(154, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Point(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Point", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Point = property(_get_Point, None)
	'''
	Point

	:type: recurdyn.ProcessNet.IVector
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Point": (153, 2, (9, 0), (), "Point", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IParametricPointConnectorCollection(DispatchBaseClass):
	'''IParametricPointConnectorCollection'''
	CLSID = IID('{2BA7F21D-5583-410B-8ABB-6AAE09261D4F}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IParametricPointConnector
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{5A26F623-DA73-4531-884A-946494037A2B}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IParametricPointConnector
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{5A26F623-DA73-4531-884A-946494037A2B}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{5A26F623-DA73-4531-884A-946494037A2B}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{5A26F623-DA73-4531-884A-946494037A2B}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IParametricValue(DispatchBaseClass):
	'''Parametric value'''
	CLSID = IID('{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Text(self):
		return self._ApplyTypes_(*(152, 2, (8, 0), (), "Text", None))
	def _get_UseDesignParameter(self):
		return self._ApplyTypes_(*(153, 2, (11, 0), (), "UseDesignParameter", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_Value(self):
		return self._ApplyTypes_(*(151, 2, (5, 0), (), "Value", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_Text(self, value):
		if "Text" in self.__dict__: self.__dict__["Text"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_UseDesignParameter(self, value):
		if "UseDesignParameter" in self.__dict__: self.__dict__["UseDesignParameter"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_Value(self, value):
		if "Value" in self.__dict__: self.__dict__["Value"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Text = property(_get_Text, _set_Text)
	'''
	Text

	:type: str
	'''
	UseDesignParameter = property(_get_UseDesignParameter, _set_UseDesignParameter)
	'''
	If true, parametric value is exported in *.rdp file

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	Value = property(_get_Value, _set_Value)
	'''
	Value

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_Text": _set_Text,
		"_set_UseDesignParameter": _set_UseDesignParameter,
		"_set_UserData": _set_UserData,
		"_set_Value": _set_Value,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Text": (152, 2, (8, 0), (), "Text", None),
		"UseDesignParameter": (153, 2, (11, 0), (), "UseDesignParameter", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"Value": (151, 2, (5, 0), (), "Value", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"Text": ((152, LCID, 4, 0),()),
		"UseDesignParameter": ((153, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"Value": ((151, LCID, 4, 0),()),
	}
	def __call__(self):
		return self._ApplyTypes_(*(151, 2, (5, 0), (), "Value", None))
	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IParametricValueCollection(DispatchBaseClass):
	'''IParametricValueCollection'''
	CLSID = IID('{65267578-7015-4BB5-BB65-F5F81CCEA245}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IParametricValue
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IParametricValue
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IParametricValueConnector(DispatchBaseClass):
	'''Parametric value connector'''
	CLSID = IID('{3C8942E4-0A9C-48DB-AFF4-882202E3BA8A}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Add(self, pVal):
		'''
		Add Reference ParametricValue
		
		:param pVal: IParametricValue
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def Delete(self, pVal):
		'''
		Delete Reference ParametricValue
		
		:param pVal: IParametricValue
		'''
		return self._oleobj_.InvokeTypes(152, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def DeleteAll(self):
		'''
		Delete All References
		'''
		return self._oleobj_.InvokeTypes(157, LCID, 1, (24, 0), (),)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetReferenceByIndex(self, Index):
		'''
		Get Reference PV
		
		:param Index: int
		:rtype: recurdyn.ProcessNet.IParametricValue
		'''
		ret = self._oleobj_.InvokeTypes(155, LCID, 1, (9, 0), ((19, 1),),Index
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetReferenceByIndex', '{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')
		return ret

	def NumOfReferences(self):
		'''
		Get Reference Count
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(156, LCID, 1, (19, 0), (),)


	def Update(self):
		'''
		Update ParametricValue Connector
		'''
		return self._oleobj_.InvokeTypes(154, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_Value(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Value", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	Value = property(_get_Value, None)
	'''
	Value

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"Value": (153, 2, (9, 0), (), "Value", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __call__(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "Value", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IParametricValueConnectorCollection(DispatchBaseClass):
	'''IParametricValueConnectorCollection'''
	CLSID = IID('{25597944-74D4-4F24-8145-CD11FE87BCC8}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IParametricValueConnector
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{3C8942E4-0A9C-48DB-AFF4-882202E3BA8A}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IParametricValueConnector
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{3C8942E4-0A9C-48DB-AFF4-882202E3BA8A}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{3C8942E4-0A9C-48DB-AFF4-882202E3BA8A}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{3C8942E4-0A9C-48DB-AFF4-882202E3BA8A}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPattern(DispatchBaseClass):
	'''Pattern'''
	CLSID = IID('{23C82686-D1A0-4821-B9EE-F8D0CA03DF32}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Rotation(self, pMulti, iCount, pPoint, pAxis, dAngle):
		'''
		Rotation pattern geometries
		
		:param pMulti: list[object]
		:param iCount: int
		:param pPoint: list[float]
		:param pAxis: list[float]
		:param dAngle: float
		:rtype: list[object]
		'''
		_pMulti_type = True if pMulti and isinstance(pMulti[0], win32com.client.VARIANT) else False
		if not _pMulti_type:
			pMulti = [win32com.client.VARIANT(12, _data) for _data in pMulti]

		ret = self._ApplyTypes_(52, 1, (8204, 0), ((8204, 1), (19, 1), (8197, 1), (8197, 1), (5, 1)), 'Rotation', None,pMulti
			, iCount, pPoint, pAxis, dAngle)

		if not _pMulti_type:
			pMulti = [_data.value for _data in pMulti]

		return ret


	def RotationWithTranslation(self, pMulti, iCount, pPoint, pAxis, dAngle, Type, iCountT, pDirection, dDistance):
		'''
		Rotation pattern geometries
		
		:param pMulti: list[object]
		:param iCount: int
		:param pPoint: list[float]
		:param pAxis: list[float]
		:param dAngle: float
		:param Type: PatternRotationTranslationType
		:param iCountT: int
		:param pDirection: list[float]
		:param dDistance: float
		:rtype: list[object]
		'''
		_pMulti_type = True if pMulti and isinstance(pMulti[0], win32com.client.VARIANT) else False
		if not _pMulti_type:
			pMulti = [win32com.client.VARIANT(12, _data) for _data in pMulti]

		ret = self._ApplyTypes_(53, 1, (8204, 0), ((8204, 1), (19, 1), (8197, 1), (8197, 1), (5, 1), (3, 1), (19, 1), (8197, 1), (5, 1)), 'RotationWithTranslation', None,pMulti
			, iCount, pPoint, pAxis, dAngle, Type
			, iCountT, pDirection, dDistance)

		if not _pMulti_type:
			pMulti = [_data.value for _data in pMulti]

		return ret


	def Translation(self, pMulti, iCount, pDirection, dDistance):
		'''
		Translation pattern geometries
		
		:param pMulti: list[object]
		:param iCount: int
		:param pDirection: list[float]
		:param dDistance: float
		:rtype: list[object]
		'''
		_pMulti_type = True if pMulti and isinstance(pMulti[0], win32com.client.VARIANT) else False
		if not _pMulti_type:
			pMulti = [win32com.client.VARIANT(12, _data) for _data in pMulti]

		ret = self._ApplyTypes_(51, 1, (8204, 0), ((8204, 1), (19, 1), (8197, 1), (5, 1)), 'Translation', None,pMulti
			, iCount, pDirection, dDistance)

		if not _pMulti_type:
			pMulti = [_data.value for _data in pMulti]

		return ret


	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IPerformanceIndex(DispatchBaseClass):
	'''Performance index'''
	CLSID = IID('{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Expression(self):
		return self._ApplyTypes_(*(152, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_ProcessNetDllPath(self):
		return self._ApplyTypes_(*(157, 2, (8, 0), (), "ProcessNetDllPath", None))
	def _get_ProcessNetFunctionName(self):
		return self._ApplyTypes_(*(158, 2, (8, 0), (), "ProcessNetFunctionName", None))
	def _get_ProcessNetScriptPath(self):
		return self._ApplyTypes_(*(159, 2, (8, 0), (), "ProcessNetScriptPath", None))
	def _get_ProcessNetType(self):
		return self._ApplyTypes_(*(156, 2, (3, 0), (), "ProcessNetType", '{3FBEE825-C5E1-4629-B3E2-3548E2C0CE7D}'))
	def _get_ResultType(self):
		return self._ApplyTypes_(*(153, 2, (3, 0), (), "ResultType", '{48BC58C9-3315-4123-B837-9E6C373B6F0D}'))
	def _get_Scope(self):
		return self._ApplyTypes_(*(155, 2, (9, 0), (), "Scope", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Type(self):
		return self._ApplyTypes_(*(151, 2, (3, 0), (), "Type", '{F647DDAA-8DDC-4516-8EC6-0C1099295F3A}'))
	def _get_Use(self):
		return self._ApplyTypes_(*(154, 2, (11, 0), (), "Use", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Expression(self, value):
		if "Expression" in self.__dict__: self.__dict__["Expression"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_ProcessNetDllPath(self, value):
		if "ProcessNetDllPath" in self.__dict__: self.__dict__["ProcessNetDllPath"] = value; return
		self._oleobj_.Invoke(*((157, LCID, 4, 0) + (value,) + ()))
	def _set_ProcessNetFunctionName(self, value):
		if "ProcessNetFunctionName" in self.__dict__: self.__dict__["ProcessNetFunctionName"] = value; return
		self._oleobj_.Invoke(*((158, LCID, 4, 0) + (value,) + ()))
	def _set_ProcessNetScriptPath(self, value):
		if "ProcessNetScriptPath" in self.__dict__: self.__dict__["ProcessNetScriptPath"] = value; return
		self._oleobj_.Invoke(*((159, LCID, 4, 0) + (value,) + ()))
	def _set_ProcessNetType(self, value):
		if "ProcessNetType" in self.__dict__: self.__dict__["ProcessNetType"] = value; return
		self._oleobj_.Invoke(*((156, LCID, 4, 0) + (value,) + ()))
	def _set_ResultType(self, value):
		if "ResultType" in self.__dict__: self.__dict__["ResultType"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))
	def _set_Scope(self, value):
		if "Scope" in self.__dict__: self.__dict__["Scope"] = value; return
		self._oleobj_.Invoke(*((155, LCID, 4, 0) + (value,) + ()))
	def _set_Type(self, value):
		if "Type" in self.__dict__: self.__dict__["Type"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Use(self, value):
		if "Use" in self.__dict__: self.__dict__["Use"] = value; return
		self._oleobj_.Invoke(*((154, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Expression = property(_get_Expression, _set_Expression)
	'''
	Expression

	:type: recurdyn.ProcessNet.IExpression
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	ProcessNetDllPath = property(_get_ProcessNetDllPath, _set_ProcessNetDllPath)
	'''
	Full path of ProcessNet Dll

	:type: str
	'''
	ProcessNetFunctionName = property(_get_ProcessNetFunctionName, _set_ProcessNetFunctionName)
	'''
	Function name of ProcessNet

	:type: str
	'''
	ProcessNetScriptPath = property(_get_ProcessNetScriptPath, _set_ProcessNetScriptPath)
	'''
	Full path of ProcessNet Script

	:type: str
	'''
	ProcessNetType = property(_get_ProcessNetType, _set_ProcessNetType)
	'''
	ProcessNet Type

	:type: recurdyn.ProcessNet.ProcessNetType
	'''
	ResultType = property(_get_ResultType, _set_ResultType)
	'''
	Result Type

	:type: recurdyn.ProcessNet.PerformanceIndexResultType
	'''
	Scope = property(_get_Scope, _set_Scope)
	'''
	Scope

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Type = property(_get_Type, _set_Type)
	'''
	PerformanceIndex type

	:type: recurdyn.ProcessNet.PerformanceIndexType
	'''
	Use = property(_get_Use, _set_Use)
	'''
	This is only used by IDOE. So, if true, IPerformanceIndex will be added automatically.

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Expression": _set_Expression,
		"_set_Name": _set_Name,
		"_set_ProcessNetDllPath": _set_ProcessNetDllPath,
		"_set_ProcessNetFunctionName": _set_ProcessNetFunctionName,
		"_set_ProcessNetScriptPath": _set_ProcessNetScriptPath,
		"_set_ProcessNetType": _set_ProcessNetType,
		"_set_ResultType": _set_ResultType,
		"_set_Scope": _set_Scope,
		"_set_Type": _set_Type,
		"_set_Use": _set_Use,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Expression": (152, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"ProcessNetDllPath": (157, 2, (8, 0), (), "ProcessNetDllPath", None),
		"ProcessNetFunctionName": (158, 2, (8, 0), (), "ProcessNetFunctionName", None),
		"ProcessNetScriptPath": (159, 2, (8, 0), (), "ProcessNetScriptPath", None),
		"ProcessNetType": (156, 2, (3, 0), (), "ProcessNetType", '{3FBEE825-C5E1-4629-B3E2-3548E2C0CE7D}'),
		"ResultType": (153, 2, (3, 0), (), "ResultType", '{48BC58C9-3315-4123-B837-9E6C373B6F0D}'),
		"Scope": (155, 2, (9, 0), (), "Scope", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Type": (151, 2, (3, 0), (), "Type", '{F647DDAA-8DDC-4516-8EC6-0C1099295F3A}'),
		"Use": (154, 2, (11, 0), (), "Use", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Expression": ((152, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"ProcessNetDllPath": ((157, LCID, 4, 0),()),
		"ProcessNetFunctionName": ((158, LCID, 4, 0),()),
		"ProcessNetScriptPath": ((159, LCID, 4, 0),()),
		"ProcessNetType": ((156, LCID, 4, 0),()),
		"ResultType": ((153, LCID, 4, 0),()),
		"Scope": ((155, LCID, 4, 0),()),
		"Type": ((151, LCID, 4, 0),()),
		"Use": ((154, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IPerformanceIndexCollection(DispatchBaseClass):
	'''IPerformanceIndexCollection'''
	CLSID = IID('{CC76CCE9-4D71-4DE9-8A4C-490E57C838C2}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IPerformanceIndex
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IPerformanceIndex
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPlotDocument(DispatchBaseClass):
	'''Plot document'''
	CLSID = IID('{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Activate(self):
		'''
		Activate method
		'''
		return self._oleobj_.InvokeTypes(59, LCID, 1, (24, 0), (),)


	def ActivatePage(self, iIndex):
		'''
		Activate page
		
		:param iIndex: int
		'''
		return self._oleobj_.InvokeTypes(102, LCID, 1, (24, 0), ((3, 1),),iIndex
			)


	def ActivateView(self, iRow, iCol):
		'''
		Activate view
		
		:param iRow: int
		:param iCol: int
		'''
		return self._oleobj_.InvokeTypes(57, LCID, 1, (24, 0), ((3, 1), (3, 1)),iRow
			, iCol)


	def AddPage(self):
		'''
		Add a page
		'''
		return self._oleobj_.InvokeTypes(60, LCID, 1, (24, 0), (),)


	def CalculusDifferential(self, uIndex, enOption, vbPlotNewPage, vbAddToDatabase):
		'''
		Calculus - Differential
		
		:param uIndex: int
		:param enOption: CalculusOption
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(77, LCID, 1, (24, 0), ((19, 1), (3, 1), (11, 1), (11, 1)),uIndex
			, enOption, vbPlotNewPage, vbAddToDatabase)


	def CalculusIntegral(self, uIndex, enOption, vbPlotNewPage, vbAddToDatabase):
		'''
		Calculus - Integral
		
		:param uIndex: int
		:param enOption: CalculusOption
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(78, LCID, 1, (24, 0), ((19, 1), (3, 1), (11, 1), (11, 1)),uIndex
			, enOption, vbPlotNewPage, vbAddToDatabase)


	def ClearActivePage(self):
		'''
		Clear the active page
		'''
		return self._oleobj_.InvokeTypes(61, LCID, 1, (24, 0), (),)


	def DeletePage(self, iIndex):
		'''
		Delete page
		
		:param iIndex: int
		'''
		return self._oleobj_.InvokeTypes(103, LCID, 1, (24, 0), ((3, 1),),iIndex
			)


	def DeleteRPLT(self, fileIndex):
		'''
		Delete imported rplt with index
		
		:param fileIndex: int
		'''
		return self._oleobj_.InvokeTypes(112, LCID, 1, (24, 0), ((3, 1),),fileIndex
			)


	def DrawCurveWithIndex(self, Index, xName, yName):
		'''
		Draw curve with index
		
		:param Index: int
		:param xName: str
		:param yName: str
		:rtype: recurdyn.Chart.ISeries
		'''
		ret = self._oleobj_.InvokeTypes(109, LCID, 1, (9, 0), ((3, 1), (8, 1), (8, 1)),Index
			, xName, yName)
		if ret is not None:
			ret = Dispatch(ret, 'DrawCurveWithIndex', '{6EFBEC37-9BE6-43D4-8F59-36391BF2839B}')
		return ret

	def DrawPlot(self, legend, dataX, dataY):
		'''
		Draw plot
		
		:param legend: str
		:param dataX: list[float]
		:param dataY: list[float]
		'''
		return self._oleobj_.InvokeTypes(56, LCID, 1, (24, 0), ((8, 1), (8197, 1), (8197, 1)),legend
			, dataX, dataY)


	def DrawPlotBubble(self, legend, xData, yData, yRadius):
		'''
		Draw bubble plot
		
		:param legend: str
		:param xData: list[float]
		:param yData: list[float]
		:param yRadius: list[float]
		'''
		return self._oleobj_.InvokeTypes(89, LCID, 1, (24, 0), ((8, 1), (8197, 1), (8197, 1), (8197, 1)),legend
			, xData, yData, yRadius)


	def DrawPlotBubbleEx(self, legend, xData, yData, yRadius, vbTransparency, vbMarkerColorSaturation, vbMarkerBorderColorSaturation, sPointBorderLineWidth):
		'''
		Draw bubble plot with settings of transparency, marker color, marker border color
		
		:param legend: str
		:param xData: list[float]
		:param yData: list[float]
		:param yRadius: list[float]
		:param vbTransparency: bool
		:param vbMarkerColorSaturation: bool
		:param vbMarkerBorderColorSaturation: bool
		:param sPointBorderLineWidth: int
		'''
		return self._oleobj_.InvokeTypes(90, LCID, 1, (24, 0), ((8, 1), (8197, 1), (8197, 1), (8197, 1), (11, 1), (11, 1), (11, 1), (2, 1)),legend
			, xData, yData, yRadius, vbTransparency, vbMarkerColorSaturation
			, vbMarkerBorderColorSaturation, sPointBorderLineWidth)


	def DrawPlotBubbleWithColor(self, legend, xData, yData, yRadius, valColor):
		'''
		Draw bubble plot with color
		
		:param legend: str
		:param xData: list[float]
		:param yData: list[float]
		:param yRadius: list[float]
		:param valColor: int
		'''
		return self._oleobj_.InvokeTypes(94, LCID, 1, (24, 0), ((8, 1), (8197, 1), (8197, 1), (8197, 1), (19, 1)),legend
			, xData, yData, yRadius, valColor)


	def ExportData(self, strFileName, arrDataName, vbExportWithName, vbScientificNotation, iDigit):
		'''
		Export data
		
		:param strFileName: str
		:param arrDataName: list[str]
		:param vbExportWithName: bool
		:param vbScientificNotation: bool
		:param iDigit: int
		'''
		return self._oleobj_.InvokeTypes(65, LCID, 1, (24, 0), ((8, 1), (8200, 1), (11, 1), (11, 1), (3, 1)),strFileName
			, arrDataName, vbExportWithName, vbScientificNotation, iDigit)


	def ExportDataWithIndex(self, FileName, indices, arrDataName, vbExportWithName, vbScientificNotation, iDigit):
		'''
		Export data with index
		
		:param FileName: str
		:param indices: list[int]
		:param arrDataName: list[str]
		:param vbExportWithName: bool
		:param vbScientificNotation: bool
		:param iDigit: int
		'''
		return self._oleobj_.InvokeTypes(110, LCID, 1, (24, 0), ((8, 1), (8195, 1), (8200, 1), (11, 1), (11, 1), (3, 1)),FileName
			, indices, arrDataName, vbExportWithName, vbScientificNotation, iDigit
			)


	def ExportImageFile(self, strFile, enImageFileFormat, OverWrite):
		'''
		Export Image File
		
		:param strFile: str
		:param enImageFileFormat: ImageFileFormat
		:param OverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(85, LCID, 1, (24, 0), ((8, 1), (3, 1), (11, 1)),strFile
			, enImageFileFormat, OverWrite)


	def ExportPlotTemplate(self, strFile):
		'''
		Export plot template xml file
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(95, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def ExportPlotTemplateFile(self, strFile):
		'''
		Export plot template(*.template) file
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(101, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def FFTMagnitude(self, uIndex, enMethod, nN, dMinX, dMaxX, vbPlotNewPage, vbAddToDatabase):
		'''
		FFT - Magnitude
		
		:param uIndex: int
		:param enMethod: FFTWindowMethod
		:param nN: int
		:param dMinX: float
		:param dMaxX: float
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(79, LCID, 1, (24, 0), ((19, 1), (3, 1), (3, 1), (5, 1), (5, 1), (11, 1), (11, 1)),uIndex
			, enMethod, nN, dMinX, dMaxX, vbPlotNewPage
			, vbAddToDatabase)


	def FFTPhase(self, uIndex, enMethod, nN, dMinX, dMaxX, vbPlotNewPage, vbAddToDatabase):
		'''
		FFT - Phase
		
		:param uIndex: int
		:param enMethod: FFTWindowMethod
		:param nN: int
		:param dMinX: float
		:param dMaxX: float
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(80, LCID, 1, (24, 0), ((19, 1), (3, 1), (3, 1), (5, 1), (5, 1), (11, 1), (11, 1)),uIndex
			, enMethod, nN, dMinX, dMaxX, vbPlotNewPage
			, vbAddToDatabase)


	def FFTPowerSpectralDensity(self, uIndex, enMethod, nN, dMinX, dMaxX, vbPlotNewPage, vbAddToDatabase):
		'''
		FFT - PowerSpectralDensity
		
		:param uIndex: int
		:param enMethod: FFTWindowMethod
		:param nN: int
		:param dMinX: float
		:param dMaxX: float
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(81, LCID, 1, (24, 0), ((19, 1), (3, 1), (3, 1), (5, 1), (5, 1), (11, 1), (11, 1)),uIndex
			, enMethod, nN, dMinX, dMaxX, vbPlotNewPage
			, vbAddToDatabase)


	def FFTPowerSpectralDensity2(self, uIndex, enMethod, nN, dMinX, dMaxX, enPSDType, vbPlotNewPage, vbAddToDatabase):
		'''
		FFT - PowerSpectralDensity
		
		:param uIndex: int
		:param enMethod: FFTWindowMethod
		:param nN: int
		:param dMinX: float
		:param dMaxX: float
		:param enPSDType: PSDType
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(118, LCID, 1, (24, 0), ((19, 1), (3, 1), (3, 1), (5, 1), (5, 1), (3, 1), (11, 1), (11, 1)),uIndex
			, enMethod, nN, dMinX, dMaxX, enPSDType
			, vbPlotNewPage, vbAddToDatabase)


	def FileSave(self, strFile, OverWrite):
		'''
		Save plot file
		
		:param strFile: str
		:param OverWrite: bool
		:rtype: bool
		'''
		return self._oleobj_.InvokeTypes(96, LCID, 1, (11, 0), ((8, 1), (11, 1)),strFile
			, OverWrite)


	def FilterButterWorth(self, uIndex, enMethod, nOrder, dCutoff1, dCutoff2, vbPlotNewPage, vbAddToDatabase):
		'''
		Filter - Butter Worth
		
		:param uIndex: int
		:param enMethod: FilterOption
		:param nOrder: int
		:param dCutoff1: float
		:param dCutoff2: float
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(82, LCID, 1, (24, 0), ((19, 1), (3, 1), (3, 1), (5, 1), (5, 1), (11, 1), (11, 1)),uIndex
			, enMethod, nOrder, dCutoff1, dCutoff2, vbPlotNewPage
			, vbAddToDatabase)


	def FilterTransferFunction(self, uIndex, arrNumerator, arrDenominator, vbPlotNewPage, vbAddToDatabase):
		'''
		Filter - Transfer Function
		
		:param uIndex: int
		:param arrNumerator: list[float]
		:param arrDenominator: list[float]
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(83, LCID, 1, (24, 0), ((19, 1), (8197, 1), (8197, 1), (11, 1), (11, 1)),uIndex
			, arrNumerator, arrDenominator, vbPlotNewPage, vbAddToDatabase)


	def GetAnimationCustomView(self, PlotWindowPosition):
		'''
		Get Animation Custom View
		
		:param PlotWindowPosition: PlotWindowPosition
		:rtype: recurdyn.ProcessNet.ICustomView
		'''
		ret = self._oleobj_.InvokeTypes(117, LCID, 1, (9, 0), ((3, 1),),PlotWindowPosition
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetAnimationCustomView', '{0F88BBEF-C77F-472D-9936-E84B77F9756A}')
		return ret

	def GetChartControl(self, iRow, iCol):
		'''
		Chart control
		
		:param iRow: int
		:param iCol: int
		:rtype: recurdyn.Chart.IChart
		'''
		ret = self._oleobj_.InvokeTypes(64, LCID, 1, (9, 0), ((3, 1), (3, 1)),iRow
			, iCol)
		if ret is not None:
			ret = Dispatch(ret, 'GetChartControl', '{6EFBEC37-9BE6-43D4-8F59-36391BF28395}')
		return ret

	def GetImportedFilePathList(self):
		'''
		Get rplt file path list
		
		:rtype: list[str]
		'''
		return self._ApplyTypes_(106, 1, (8200, 0), (), 'GetImportedFilePathList', None,)


	def GetInternalChartControl(self, iRow, iCol):
		'''
		FunctionBay Internal Use Only
		
		:param iRow: int
		:param iCol: int
		:rtype: dispatch
		'''
		ret = self._oleobj_.InvokeTypes(52, LCID, 1, (9, 0), ((3, 1), (3, 1)),iRow
			, iCol)
		if ret is not None:
			ret = Dispatch(ret, 'GetInternalChartControl', None)
		return ret

	def GetPageCount(self):
		'''
		Get Page Count
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(115, LCID, 1, (3, 0), (),)


	def GetPageName(self, iIndex):
		'''
		Get page name
		
		:param iIndex: int
		:rtype: str
		'''
		return self._oleobj_.InvokeTypes(104, LCID, 1, (8, 0), ((3, 1),),iIndex
			)


	def GetPlotData(self, dataFullName):
		'''
		Get plot data
		
		:param dataFullName: str
		:rtype: list[float]
		'''
		return self._ApplyTypes_(54, 1, (8197, 0), ((8, 1),), 'GetPlotData', None,dataFullName
			)


	def GetPlotDataFromIndex(self, fileIndex, dataName):
		'''
		Get plot data from index
		
		:param fileIndex: int
		:param dataName: str
		:rtype: list[float]
		'''
		return self._ApplyTypes_(58, 1, (8197, 0), ((3, 1), (8, 1)), 'GetPlotDataFromIndex', None,fileIndex
			, dataName)


	def GetPlottableNameList(self, uIndex):
		'''
		Get plottable name list
		
		:param uIndex: int
		:rtype: list[str]
		'''
		return self._ApplyTypes_(91, 1, (8200, 0), ((19, 1),), 'GetPlottableNameList', None,uIndex
			)


	def GetUserData(self, dataID):
		'''
		Get user data with data ID
		
		:param dataID: int
		:rtype: list[float]
		'''
		return self._ApplyTypes_(113, 1, (8197, 0), ((3, 1),), 'GetUserData', None,dataID
			)


	def GetUserDataNameList(self):
		'''
		Get names of user data
		
		:rtype: list[str]
		'''
		return self._ApplyTypes_(114, 1, (8200, 0), (), 'GetUserDataNameList', None,)


	def ImportPlotDataFile(self, strFile):
		'''
		Import plot data file, returns number of plot data file - 1
		
		:param strFile: str
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(55, LCID, 1, (3, 0), ((8, 1),),strFile
			)


	def ImportPlotTemplateFile(self, strFile):
		'''
		Import plot template(*.template) file.
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(100, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def InterpolationAkimaSpline(self, uIndex, uNPoints, dMinX, dMaxX, vbPlotNewPage, vbAddToDatabase):
		'''
		Interpolation - Akima Spline
		
		:param uIndex: int
		:param uNPoints: int
		:param dMinX: float
		:param dMaxX: float
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(75, LCID, 1, (24, 0), ((19, 1), (19, 1), (5, 1), (5, 1), (11, 1), (11, 1)),uIndex
			, uNPoints, dMinX, dMaxX, vbPlotNewPage, vbAddToDatabase
			)


	def InterpolationCubicSpline(self, uIndex, uNPoints, dMinX, dMaxX, vbPlotNewPage, vbAddToDatabase):
		'''
		Interpolation - Cubic Spline
		
		:param uIndex: int
		:param uNPoints: int
		:param dMinX: float
		:param dMaxX: float
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(76, LCID, 1, (24, 0), ((19, 1), (19, 1), (5, 1), (5, 1), (11, 1), (11, 1)),uIndex
			, uNPoints, dMinX, dMaxX, vbPlotNewPage, vbAddToDatabase
			)


	def InterpolationLinear(self, uIndex, uNPoints, dMinX, dMaxX, vbPlotNewPage, vbAddToDatabase):
		'''
		Interpolation - Linear
		
		:param uIndex: int
		:param uNPoints: int
		:param dMinX: float
		:param dMaxX: float
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(73, LCID, 1, (24, 0), ((19, 1), (19, 1), (5, 1), (5, 1), (11, 1), (11, 1)),uIndex
			, uNPoints, dMinX, dMaxX, vbPlotNewPage, vbAddToDatabase
			)


	def InterpolationPolynomial(self, uIndex, uNPoints, enOrder, dMinX, dMaxX, vbPlotNewPage, vbAddToDatabase):
		'''
		Interpolation - Polynomial
		
		:param uIndex: int
		:param uNPoints: int
		:param enOrder: InterpolationPolynomialOrder
		:param dMinX: float
		:param dMaxX: float
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(74, LCID, 1, (24, 0), ((19, 1), (19, 1), (3, 1), (5, 1), (5, 1), (11, 1), (11, 1)),uIndex
			, uNPoints, enOrder, dMinX, dMaxX, vbPlotNewPage
			, vbAddToDatabase)


	def LoadAnimation(self, PlotWindowPosition):
		'''
		Load Animation
		
		:param PlotWindowPosition: PlotWindowPosition
		:rtype: bool
		'''
		return self._oleobj_.InvokeTypes(97, LCID, 1, (11, 0), ((3, 1),),PlotWindowPosition
			)


	def LoadPlot(self, PlotWindowPosition):
		'''
		Load Plot
		
		:param PlotWindowPosition: PlotWindowPosition
		:rtype: bool
		'''
		return self._oleobj_.InvokeTypes(98, LCID, 1, (11, 0), ((3, 1),),PlotWindowPosition
			)


	def PlotShowWindowType(self, ShowWindowOption):
		'''
		Plot Show Window Type
		
		:param ShowWindowOption: ShowWindowOption
		'''
		return self._oleobj_.InvokeTypes(99, LCID, 1, (24, 0), ((3, 1),),ShowWindowOption
			)


	def SetPageName(self, iIndex, strName):
		'''
		set page name
		
		:param iIndex: int
		:param strName: str
		'''
		return self._oleobj_.InvokeTypes(105, LCID, 1, (24, 0), ((3, 1), (8, 1)),iIndex
			, strName)


	def SetRelatedModelDocument(self, pDocument):
		'''
		Set related model document
		
		:param pDocument: IModelDocument
		'''
		return self._oleobj_.InvokeTypes(84, LCID, 1, (24, 0), ((9, 1),),pDocument
			)


	def SimpleMathAbsolute(self, uIndex, vbPlotNewPage, vbAddToDatabase):
		'''
		SimpleMath - Absolute
		
		:param uIndex: int
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(70, LCID, 1, (24, 0), ((19, 1), (11, 1), (11, 1)),uIndex
			, vbPlotNewPage, vbAddToDatabase)


	def SimpleMathDivide(self, uIndex1, uIndex2, vbPlotNewPage, vbAddToDatabase):
		'''
		SimpleMath - Divide
		
		:param uIndex1: int
		:param uIndex2: int
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(69, LCID, 1, (24, 0), ((19, 1), (19, 1), (11, 1), (11, 1)),uIndex1
			, uIndex2, vbPlotNewPage, vbAddToDatabase)


	def SimpleMathMultiply(self, uIndex1, uIndex2, vbPlotNewPage, vbAddToDatabase):
		'''
		SimpleMath - Multiply
		
		:param uIndex1: int
		:param uIndex2: int
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(68, LCID, 1, (24, 0), ((19, 1), (19, 1), (11, 1), (11, 1)),uIndex1
			, uIndex2, vbPlotNewPage, vbAddToDatabase)


	def SimpleMathScale(self, uIndex, dScaleX, dScaleY, vbPlotNewPage, vbAddToDatabase):
		'''
		SimpleMath - Scale
		
		:param uIndex: int
		:param dScaleX: float
		:param dScaleY: float
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(71, LCID, 1, (24, 0), ((19, 1), (5, 1), (5, 1), (11, 1), (11, 1)),uIndex
			, dScaleX, dScaleY, vbPlotNewPage, vbAddToDatabase)


	def SimpleMathSubtract(self, uIndex1, uIndex2, vbPlotNewPage, vbAddToDatabase):
		'''
		SimpleMath - Subtract
		
		:param uIndex1: int
		:param uIndex2: int
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(67, LCID, 1, (24, 0), ((19, 1), (19, 1), (11, 1), (11, 1)),uIndex1
			, uIndex2, vbPlotNewPage, vbAddToDatabase)


	def SimpleMathSum(self, uIndex1, uIndex2, vbPlotNewPage, vbAddToDatabase):
		'''
		SimpleMath - Sum
		
		:param uIndex1: int
		:param uIndex2: int
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(66, LCID, 1, (24, 0), ((19, 1), (19, 1), (11, 1), (11, 1)),uIndex1
			, uIndex2, vbPlotNewPage, vbAddToDatabase)


	def SimpleMathTranslate(self, uIndex, enOption, dOffsetX, dOffsetY, uIndexAlign, vbPlotNewPage, vbAddToDatabase):
		'''
		SimpleMath - Translate
		
		:param uIndex: int
		:param enOption: SimpleMathTranslateOption
		:param dOffsetX: float
		:param dOffsetY: float
		:param uIndexAlign: int
		:param vbPlotNewPage: bool
		:param vbAddToDatabase: bool
		'''
		return self._oleobj_.InvokeTypes(72, LCID, 1, (24, 0), ((19, 1), (3, 1), (5, 1), (5, 1), (19, 1), (11, 1), (11, 1)),uIndex
			, enOption, dOffsetX, dOffsetY, uIndexAlign, vbPlotNewPage
			, vbAddToDatabase)


	def _get_ActiveChartControl(self):
		return self._ApplyTypes_(*(63, 2, (9, 0), (), "ActiveChartControl", '{6EFBEC37-9BE6-43D4-8F59-36391BF28395}'))
	def _get_AddSeriesAxisType(self):
		return self._ApplyTypes_(*(107, 2, (3, 0), (), "AddSeriesAxisType", '{D260937C-03B2-41A4-B36F-37CC3C282146}'))
	def _get_AutoFit(self):
		return self._ApplyTypes_(*(92, 2, (11, 0), (), "AutoFit", None))
	def _get_CampbellDiagram3D(self):
		return self._ApplyTypes_(*(111, 2, (9, 0), (), "CampbellDiagram3D", '{2BB11C40-A053-4367-9C20-DE894FB04B41}'))
	def _get_DrawRangeMax(self):
		return self._ApplyTypes_(*(88, 2, (5, 0), (), "DrawRangeMax", None))
	def _get_DrawRangeMin(self):
		return self._ApplyTypes_(*(87, 2, (5, 0), (), "DrawRangeMin", None))
	def _get_ImportedFileCount(self):
		return self._ApplyTypes_(*(93, 2, (19, 0), (), "ImportedFileCount", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(51, 2, (8, 0), (), "Name", None))
	def _get_OwnerApplication(self):
		return self._ApplyTypes_(*(62, 2, (9, 0), (), "OwnerApplication", '{0E72DCBC-60DD-495E-B067-85BA9DDC18BB}'))
	def _get_RelativeModelDocument(self):
		return self._ApplyTypes_(*(116, 2, (9, 0), (), "RelativeModelDocument", '{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}'))
	def _get_SiginificantDigit(self):
		return self._ApplyTypes_(*(108, 2, (19, 0), (), "SiginificantDigit", None))
	def _get_UseDrawRange(self):
		return self._ApplyTypes_(*(86, 2, (11, 0), (), "UseDrawRange", None))

	def _set_AddSeriesAxisType(self, value):
		if "AddSeriesAxisType" in self.__dict__: self.__dict__["AddSeriesAxisType"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_AutoFit(self, value):
		if "AutoFit" in self.__dict__: self.__dict__["AutoFit"] = value; return
		self._oleobj_.Invoke(*((92, LCID, 4, 0) + (value,) + ()))
	def _set_DrawRangeMax(self, value):
		if "DrawRangeMax" in self.__dict__: self.__dict__["DrawRangeMax"] = value; return
		self._oleobj_.Invoke(*((88, LCID, 4, 0) + (value,) + ()))
	def _set_DrawRangeMin(self, value):
		if "DrawRangeMin" in self.__dict__: self.__dict__["DrawRangeMin"] = value; return
		self._oleobj_.Invoke(*((87, LCID, 4, 0) + (value,) + ()))
	def _set_SiginificantDigit(self, value):
		if "SiginificantDigit" in self.__dict__: self.__dict__["SiginificantDigit"] = value; return
		self._oleobj_.Invoke(*((108, LCID, 4, 0) + (value,) + ()))
	def _set_UseDrawRange(self, value):
		if "UseDrawRange" in self.__dict__: self.__dict__["UseDrawRange"] = value; return
		self._oleobj_.Invoke(*((86, LCID, 4, 0) + (value,) + ()))

	ActiveChartControl = property(_get_ActiveChartControl, None)
	'''
	Active chart control

	:type: recurdyn.Chart.IChart
	'''
	AddSeriesAxisType = property(_get_AddSeriesAxisType, _set_AddSeriesAxisType)
	'''
	Select the axis type when draw plot

	:type: recurdyn.ProcessNet.AddSeriesAxisType
	'''
	AutoFit = property(_get_AutoFit, _set_AutoFit)
	'''
	Get auto fit flag

	:type: bool
	'''
	CampbellDiagram3D = property(_get_CampbellDiagram3D, None)
	DrawRangeMax = property(_get_DrawRangeMax, _set_DrawRangeMax)
	'''
	Draw range maximum value

	:type: float
	'''
	DrawRangeMin = property(_get_DrawRangeMin, _set_DrawRangeMin)
	'''
	Draw range minimum value

	:type: float
	'''
	ImportedFileCount = property(_get_ImportedFileCount, None)
	'''
	Get file count

	:type: int
	'''
	Name = property(_get_Name, None)
	'''
	Name

	:type: str
	'''
	OwnerApplication = property(_get_OwnerApplication, None)
	'''
	Owner Application

	:type: recurdyn.ProcessNet.IApplication
	'''
	RelativeModelDocument = property(_get_RelativeModelDocument, None)
	'''
	Relative Model Document

	:type: recurdyn.ProcessNet.IModelDocument
	'''
	SiginificantDigit = property(_get_SiginificantDigit, _set_SiginificantDigit)
	'''
	The siginificant digit of the plot document

	:type: int
	'''
	UseDrawRange = property(_get_UseDrawRange, _set_UseDrawRange)
	'''
	Use draw range flag

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_AddSeriesAxisType": _set_AddSeriesAxisType,
		"_set_AutoFit": _set_AutoFit,
		"_set_DrawRangeMax": _set_DrawRangeMax,
		"_set_DrawRangeMin": _set_DrawRangeMin,
		"_set_SiginificantDigit": _set_SiginificantDigit,
		"_set_UseDrawRange": _set_UseDrawRange,
	}
	_prop_map_get_ = {
		"ActiveChartControl": (63, 2, (9, 0), (), "ActiveChartControl", '{6EFBEC37-9BE6-43D4-8F59-36391BF28395}'),
		"AddSeriesAxisType": (107, 2, (3, 0), (), "AddSeriesAxisType", '{D260937C-03B2-41A4-B36F-37CC3C282146}'),
		"AutoFit": (92, 2, (11, 0), (), "AutoFit", None),
		"CampbellDiagram3D": (111, 2, (9, 0), (), "CampbellDiagram3D", '{2BB11C40-A053-4367-9C20-DE894FB04B41}'),
		"DrawRangeMax": (88, 2, (5, 0), (), "DrawRangeMax", None),
		"DrawRangeMin": (87, 2, (5, 0), (), "DrawRangeMin", None),
		"ImportedFileCount": (93, 2, (19, 0), (), "ImportedFileCount", None),
		"Name": (51, 2, (8, 0), (), "Name", None),
		"OwnerApplication": (62, 2, (9, 0), (), "OwnerApplication", '{0E72DCBC-60DD-495E-B067-85BA9DDC18BB}'),
		"RelativeModelDocument": (116, 2, (9, 0), (), "RelativeModelDocument", '{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}'),
		"SiginificantDigit": (108, 2, (19, 0), (), "SiginificantDigit", None),
		"UseDrawRange": (86, 2, (11, 0), (), "UseDrawRange", None),
	}
	_prop_map_put_ = {
		"AddSeriesAxisType": ((107, LCID, 4, 0),()),
		"AutoFit": ((92, LCID, 4, 0),()),
		"DrawRangeMax": ((88, LCID, 4, 0),()),
		"DrawRangeMin": ((87, LCID, 4, 0),()),
		"SiginificantDigit": ((108, LCID, 4, 0),()),
		"UseDrawRange": ((86, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IPlotDocumentCollection(DispatchBaseClass):
	'''IPlotDocumentCollection'''
	CLSID = IID('{AEE53265-74B8-4B8B-96B0-5EFB4F5AACB8}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IPlotDocument
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IPlotDocument
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPoint2D(DispatchBaseClass):
	'''Point2D'''
	CLSID = IID('{5C8577DA-B2F5-4C78-AF81-251818CE7223}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_x(self):
		return self._ApplyTypes_(*(51, 2, (5, 0), (), "x", None))
	def _get_y(self):
		return self._ApplyTypes_(*(52, 2, (5, 0), (), "y", None))

	def _set_x(self, value):
		if "x" in self.__dict__: self.__dict__["x"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_y(self, value):
		if "y" in self.__dict__: self.__dict__["y"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	x = property(_get_x, _set_x)
	'''
	x value

	:type: float
	'''
	y = property(_get_y, _set_y)
	'''
	y value

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_x": _set_x,
		"_set_y": _set_y,
	}
	_prop_map_get_ = {
		"x": (51, 2, (5, 0), (), "x", None),
		"y": (52, 2, (5, 0), (), "y", None),
	}
	_prop_map_put_ = {
		"x": ((51, LCID, 4, 0),()),
		"y": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IPoint2DCollection(DispatchBaseClass):
	'''IPoint2DCollection'''
	CLSID = IID('{CDBA1369-C276-42F4-8C85-562A82C32E54}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IPoint2D
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{5C8577DA-B2F5-4C78-AF81-251818CE7223}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IPoint2D
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{5C8577DA-B2F5-4C78-AF81-251818CE7223}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{5C8577DA-B2F5-4C78-AF81-251818CE7223}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{5C8577DA-B2F5-4C78-AF81-251818CE7223}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPoint2DWithRadius(DispatchBaseClass):
	'''Point2D with Radius'''
	CLSID = IID('{F7D1F12D-2871-468E-844A-AF31810CF78E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_r(self):
		return self._ApplyTypes_(*(53, 2, (5, 0), (), "r", None))
	def _get_x(self):
		return self._ApplyTypes_(*(51, 2, (5, 0), (), "x", None))
	def _get_y(self):
		return self._ApplyTypes_(*(52, 2, (5, 0), (), "y", None))

	def _set_r(self, value):
		if "r" in self.__dict__: self.__dict__["r"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_x(self, value):
		if "x" in self.__dict__: self.__dict__["x"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_y(self, value):
		if "y" in self.__dict__: self.__dict__["y"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	r = property(_get_r, _set_r)
	'''
	radius value

	:type: float
	'''
	x = property(_get_x, _set_x)
	'''
	x value

	:type: float
	'''
	y = property(_get_y, _set_y)
	'''
	y value

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_r": _set_r,
		"_set_x": _set_x,
		"_set_y": _set_y,
	}
	_prop_map_get_ = {
		"r": (53, 2, (5, 0), (), "r", None),
		"x": (51, 2, (5, 0), (), "x", None),
		"y": (52, 2, (5, 0), (), "y", None),
	}
	_prop_map_put_ = {
		"r": ((53, LCID, 4, 0),()),
		"x": ((51, LCID, 4, 0),()),
		"y": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IPoint2DWithRadiusCollection(DispatchBaseClass):
	'''IPoint2DWithRadiusCollection'''
	CLSID = IID('{2C0D70A3-D197-4781-940A-1672F3B420B9}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IPoint2DWithRadius
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{F7D1F12D-2871-468E-844A-AF31810CF78E}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IPoint2DWithRadius
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{F7D1F12D-2871-468E-844A-AF31810CF78E}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{F7D1F12D-2871-468E-844A-AF31810CF78E}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{F7D1F12D-2871-468E-844A-AF31810CF78E}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPoint3D(DispatchBaseClass):
	'''Point3D'''
	CLSID = IID('{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_x(self):
		return self._ApplyTypes_(*(51, 2, (5, 0), (), "x", None))
	def _get_y(self):
		return self._ApplyTypes_(*(52, 2, (5, 0), (), "y", None))
	def _get_z(self):
		return self._ApplyTypes_(*(53, 2, (5, 0), (), "z", None))

	def _set_x(self, value):
		if "x" in self.__dict__: self.__dict__["x"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_y(self, value):
		if "y" in self.__dict__: self.__dict__["y"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_z(self, value):
		if "z" in self.__dict__: self.__dict__["z"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))

	x = property(_get_x, _set_x)
	'''
	x value

	:type: float
	'''
	y = property(_get_y, _set_y)
	'''
	y value

	:type: float
	'''
	z = property(_get_z, _set_z)
	'''
	z value

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_x": _set_x,
		"_set_y": _set_y,
		"_set_z": _set_z,
	}
	_prop_map_get_ = {
		"x": (51, 2, (5, 0), (), "x", None),
		"y": (52, 2, (5, 0), (), "y", None),
		"z": (53, 2, (5, 0), (), "z", None),
	}
	_prop_map_put_ = {
		"x": ((51, LCID, 4, 0),()),
		"y": ((52, LCID, 4, 0),()),
		"z": ((53, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IPoint3DCollection(DispatchBaseClass):
	'''IPoint3DCollection'''
	CLSID = IID('{7AAA986F-35DD-4DCF-843A-CEBA8E09D33A}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AppendPoint(self, dX, dY, dZ):
		'''
		Add a point to the point collecion
		
		:param dX: float
		:param dY: float
		:param dZ: float
		'''
		return self._oleobj_.InvokeTypes(52, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),dX
			, dY, dZ)


	def Clear(self):
		'''
		Clear the point collection
		'''
		return self._oleobj_.InvokeTypes(56, LCID, 1, (24, 0), (),)


	def DeletePoint(self, iIndex):
		'''
		Delete a point from the collecion
		
		:param iIndex: int
		'''
		return self._oleobj_.InvokeTypes(53, LCID, 1, (24, 0), ((3, 1),),iIndex
			)


	def Export(self, strFile, bOverWrite):
		'''
		Export the point collection to the file
		
		:param strFile: str
		:param bOverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(54, LCID, 1, (24, 0), ((8, 1), (11, 1)),strFile
			, bOverWrite)


	def Import(self, strFile):
		'''
		Import the point collection file
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(55, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IPoint3D
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IPoint3D
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPoint3DWithRadius(DispatchBaseClass):
	'''IPoint3D with radius'''
	CLSID = IID('{3656AD01-A48C-43E5-A87A-567128C5129E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_r(self):
		return self._ApplyTypes_(*(54, 2, (5, 0), (), "r", None))
	def _get_x(self):
		return self._ApplyTypes_(*(51, 2, (5, 0), (), "x", None))
	def _get_y(self):
		return self._ApplyTypes_(*(52, 2, (5, 0), (), "y", None))
	def _get_z(self):
		return self._ApplyTypes_(*(53, 2, (5, 0), (), "z", None))

	def _set_r(self, value):
		if "r" in self.__dict__: self.__dict__["r"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_x(self, value):
		if "x" in self.__dict__: self.__dict__["x"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_y(self, value):
		if "y" in self.__dict__: self.__dict__["y"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_z(self, value):
		if "z" in self.__dict__: self.__dict__["z"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))

	r = property(_get_r, _set_r)
	'''
	radius value

	:type: float
	'''
	x = property(_get_x, _set_x)
	'''
	x value

	:type: float
	'''
	y = property(_get_y, _set_y)
	'''
	y value

	:type: float
	'''
	z = property(_get_z, _set_z)
	'''
	z value

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_r": _set_r,
		"_set_x": _set_x,
		"_set_y": _set_y,
		"_set_z": _set_z,
	}
	_prop_map_get_ = {
		"r": (54, 2, (5, 0), (), "r", None),
		"x": (51, 2, (5, 0), (), "x", None),
		"y": (52, 2, (5, 0), (), "y", None),
		"z": (53, 2, (5, 0), (), "z", None),
	}
	_prop_map_put_ = {
		"r": ((54, LCID, 4, 0),()),
		"x": ((51, LCID, 4, 0),()),
		"y": ((52, LCID, 4, 0),()),
		"z": ((53, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IPoint3DWithRadiusCollection(DispatchBaseClass):
	'''IPoint3DWithRadiusCollection'''
	CLSID = IID('{0476BFAD-0FF1-4CA4-8B59-AE9E00842CCB}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Add(self, x, y, z, Radius):
		'''
		Add a point to the point collecion
		
		:param x: float
		:param y: float
		:param z: float
		:param Radius: float
		'''
		return self._oleobj_.InvokeTypes(52, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1), (5, 1)),x
			, y, z, Radius)


	def Clear(self):
		'''
		Clear the point collection
		'''
		return self._oleobj_.InvokeTypes(55, LCID, 1, (24, 0), (),)


	def Delete(self, Index):
		'''
		Delete a point from the collecion
		
		:param Index: int
		'''
		return self._oleobj_.InvokeTypes(54, LCID, 1, (24, 0), ((3, 1),),Index
			)


	def Insert(self, Index, x, y, z, Radius):
		'''
		Insert a point to the point collecion
		
		:param Index: int
		:param x: float
		:param y: float
		:param z: float
		:param Radius: float
		'''
		return self._oleobj_.InvokeTypes(53, LCID, 1, (24, 0), ((3, 1), (5, 1), (5, 1), (5, 1), (5, 1)),Index
			, x, y, z, Radius)


	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IPoint3DWithRadius
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{3656AD01-A48C-43E5-A87A-567128C5129E}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IPoint3DWithRadius
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{3656AD01-A48C-43E5-A87A-567128C5129E}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{3656AD01-A48C-43E5-A87A-567128C5129E}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{3656AD01-A48C-43E5-A87A-567128C5129E}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPointCollection(DispatchBaseClass):
	'''IPointCollection'''
	CLSID = IID('{6BEF9B6B-4708-445E-A3B5-0D65BA69F749}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AppendParametricPoint(self, pVal):
		'''
		Add a parametric point to the point collection
		
		:param pVal: IParametricPoint
		'''
		return self._oleobj_.InvokeTypes(53, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def AppendPoint(self, dX, dY, dZ):
		'''
		Add a point to the point collecion
		
		:param dX: float
		:param dY: float
		:param dZ: float
		'''
		return self._oleobj_.InvokeTypes(52, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),dX
			, dY, dZ)


	def DeletePoint(self, iIndex):
		'''
		Delete a point from the collecion
		
		:param iIndex: int
		'''
		return self._oleobj_.InvokeTypes(56, LCID, 1, (24, 0), ((3, 1),),iIndex
			)


	def InsertParametricPoint(self, iIndex, pVal):
		'''
		Insert a parametric point to the point collection
		
		:param iIndex: int
		:param pVal: IParametricPoint
		'''
		return self._oleobj_.InvokeTypes(55, LCID, 1, (24, 0), ((3, 1), (9, 1)),iIndex
			, pVal)


	def InsertPoint(self, iIndex, dX, dY, dZ):
		'''
		Insert a point to the point collecion
		
		:param iIndex: int
		:param dX: float
		:param dY: float
		:param dZ: float
		'''
		return self._oleobj_.InvokeTypes(54, LCID, 1, (24, 0), ((3, 1), (5, 1), (5, 1), (5, 1)),iIndex
			, dX, dY, dZ)


	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IVector
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{918CAF9A-7A62-4EC4-B45D-C259C997B661}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IVector
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{918CAF9A-7A62-4EC4-B45D-C259C997B661}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{918CAF9A-7A62-4EC4-B45D-C259C997B661}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPostAnalysis(DispatchBaseClass):
	'''Post Analysis'''
	CLSID = IID('{0FCAD09C-F67B-415A-BDB7-472A2AC90A59}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_EigenMovement(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "EigenMovement", '{8F416D31-9366-4C4A-8395-3DFE99C21F1D}'))

	EigenMovement = property(_get_EigenMovement, None)
	'''
	Eigen Movement

	:type: recurdyn.ProcessNet.IEigenMovement
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"EigenMovement": (51, 2, (9, 0), (), "EigenMovement", '{8F416D31-9366-4C4A-8395-3DFE99C21F1D}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IProcessNet(DispatchBaseClass):
	'''ProcessNet'''
	CLSID = IID('{2B53283A-FA48-4CFB-87A7-93D2FC9F8A5F}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Run(self, functionName, assemblyPath, Type):
		'''
		Run ProcessNet Function
		
		:param functionName: str
		:param assemblyPath: str
		:param Type: ProcessNetType
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (24, 0), ((8, 1), (8, 0), (3, 0)),functionName
			, assemblyPath, Type)


	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IReferenceFrame(DispatchBaseClass):
	'''Reference frame'''
	CLSID = IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AtModel(self):
		'''
		Calculate reference frame measured from model
		
		:rtype: recurdyn.ProcessNet.IReferenceFrame
		'''
		ret = self._oleobj_.InvokeTypes(169, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'AtModel', '{6A3295D9-E76B-473C-9655-23B7B1CBD671}')
		return ret

	def AtReferenceFrame(self, pRefFrameGiven):
		'''
		Calculate reference frame measured from given reference frame
		
		:param pRefFrameGiven: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IReferenceFrame
		'''
		ret = self._oleobj_.InvokeTypes(170, LCID, 1, (9, 0), ((9, 1),),pRefFrameGiven
			)
		if ret is not None:
			ret = Dispatch(ret, 'AtReferenceFrame', '{6A3295D9-E76B-473C-9655-23B7B1CBD671}')
		return ret

	def GetEulerAngle(self):
		'''
		Get Euler angle with radian
		
		:rtype: (recurdyn.ProcessNet.EulerAngle, float, float, float)
		'''
		return self._ApplyTypes_(165, 1, (24, 0), ((16387, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetEulerAngle', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing)


	def GetEulerAngleDegree(self):
		'''
		Get Euler angle wtih degree
		
		:rtype: (recurdyn.ProcessNet.EulerAngle, float, float, float)
		'''
		return self._ApplyTypes_(172, 1, (24, 0), ((16387, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetEulerAngleDegree', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing)


	def GetMasterPoint(self):
		'''
		Get master point
		
		:rtype: (recurdyn.ProcessNet.AxisType, float, float, float)
		'''
		return self._ApplyTypes_(163, 1, (24, 0), ((16387, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetMasterPoint', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing)


	def GetOrigin(self):
		'''
		Get origin
		
		:rtype: (float, float, float)
		'''
		return self._ApplyTypes_(162, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2)), 'GetOrigin', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetSlavePoint(self):
		'''
		Get slave point
		
		:rtype: (recurdyn.ProcessNet.AxisType, float, float, float)
		'''
		return self._ApplyTypes_(164, 1, (24, 0), ((16387, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetSlavePoint', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing)


	def SetEulerAngle(self, eulerType, a, b, c):
		'''
		Set Euler angle with radian
		
		:param eulerType: EulerAngle
		:param a: float
		:param b: float
		:param c: float
		'''
		return self._oleobj_.InvokeTypes(161, LCID, 1, (24, 0), ((3, 1), (5, 1), (5, 1), (5, 1)),eulerType
			, a, b, c)


	def SetEulerAngleDegree(self, eulerType, a, b, c):
		'''
		Set Euler angle with degree
		
		:param eulerType: EulerAngle
		:param a: float
		:param b: float
		:param c: float
		'''
		return self._oleobj_.InvokeTypes(171, LCID, 1, (24, 0), ((3, 1), (5, 1), (5, 1), (5, 1)),eulerType
			, a, b, c)


	def SetMasterPoint(self, AxisType, x, y, z):
		'''
		Set master point
		
		:param AxisType: AxisType
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(159, LCID, 1, (24, 0), ((3, 1), (5, 1), (5, 1), (5, 1)),AxisType
			, x, y, z)


	def SetOrigin(self, x, y, z):
		'''
		Set origin
		
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(158, LCID, 1, (24, 0), ((5, 1), (5, 1), (5, 1)),x
			, y, z)


	def SetReferenceFrame(self, pRefFrame):
		'''
		Set reference frame
		
		:param pRefFrame: IReferenceFrame
		'''
		return self._oleobj_.InvokeTypes(166, LCID, 1, (24, 0), ((9, 1),),pRefFrame
			)


	def SetSlavePoint(self, AxisType, x, y, z):
		'''
		Set slave point
		
		:param AxisType: AxisType
		:param x: float
		:param y: float
		:param z: float
		'''
		return self._oleobj_.InvokeTypes(160, LCID, 1, (24, 0), ((3, 1), (5, 1), (5, 1), (5, 1)),AxisType
			, x, y, z)


	def UpdateOrientation(self):
		'''
		Update orientation
		'''
		return self._oleobj_.InvokeTypes(167, LCID, 1, (24, 0), (),)


	def _get_EulerAngle(self):
		return self._ApplyTypes_(*(154, 2, (9, 0), (), "EulerAngle", '{9D220527-04EE-4578-9457-4C2061D099E7}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(175, 2, (8, 0), (), "FullName", None))
	def _get_GetName(self):
		return self._ApplyTypes_(*(173, 2, (8, 0), (), "GetName", None))
	def _get_MasterPoint(self):
		return self._ApplyTypes_(*(152, 2, (9, 0), (), "MasterPoint", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_MasterPointType(self):
		return self._ApplyTypes_(*(155, 2, (3, 0), (), "MasterPointType", '{30E13C29-97B5-4A36-99AF-09D3F2FAD89C}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(174, 2, (8, 0), (), "Name", None))
	def _get_OrientationType(self):
		return self._ApplyTypes_(*(157, 2, (3, 0), (), "OrientationType", '{8FAAC199-EEC5-4638-9F70-10B5A4CBBB3E}'))
	def _get_Origin(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "Origin", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_ParentRefFrame(self):
		return self._ApplyTypes_(*(168, 2, (9, 0), (), "ParentRefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_SlavePoint(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "SlavePoint", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'))
	def _get_SlavePointType(self):
		return self._ApplyTypes_(*(156, 2, (3, 0), (), "SlavePointType", '{30E13C29-97B5-4A36-99AF-09D3F2FAD89C}'))

	def _set_MasterPointType(self, value):
		if "MasterPointType" in self.__dict__: self.__dict__["MasterPointType"] = value; return
		self._oleobj_.Invoke(*((155, LCID, 4, 0) + (value,) + ()))
	def _set_OrientationType(self, value):
		if "OrientationType" in self.__dict__: self.__dict__["OrientationType"] = value; return
		self._oleobj_.Invoke(*((157, LCID, 4, 0) + (value,) + ()))
	def _set_SlavePointType(self, value):
		if "SlavePointType" in self.__dict__: self.__dict__["SlavePointType"] = value; return
		self._oleobj_.Invoke(*((156, LCID, 4, 0) + (value,) + ()))

	EulerAngle = property(_get_EulerAngle, None)
	'''
	Euler angle

	:type: recurdyn.ProcessNet.IEulerAngle
	'''
	FullName = property(_get_FullName, None)
	'''
	Full name

	:type: str
	'''
	GetName = property(_get_GetName, None)
	'''
	obsolete

	:type: str
	'''
	MasterPoint = property(_get_MasterPoint, None)
	'''
	Master point

	:type: recurdyn.ProcessNet.IVector
	'''
	MasterPointType = property(_get_MasterPointType, _set_MasterPointType)
	'''
	Master point type

	:type: recurdyn.ProcessNet.AxisType
	'''
	Name = property(_get_Name, None)
	'''
	name

	:type: str
	'''
	OrientationType = property(_get_OrientationType, _set_OrientationType)
	'''
	Orientation type

	:type: recurdyn.ProcessNet.OrientationType
	'''
	Origin = property(_get_Origin, None)
	'''
	Origin

	:type: recurdyn.ProcessNet.IVector
	'''
	ParentRefFrame = property(_get_ParentRefFrame, None)
	'''
	Parent reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	SlavePoint = property(_get_SlavePoint, None)
	'''
	Salve point

	:type: recurdyn.ProcessNet.IVector
	'''
	SlavePointType = property(_get_SlavePointType, _set_SlavePointType)
	'''
	Slave point type

	:type: recurdyn.ProcessNet.AxisType
	'''

	_prop_map_set_function_ = {
		"_set_MasterPointType": _set_MasterPointType,
		"_set_OrientationType": _set_OrientationType,
		"_set_SlavePointType": _set_SlavePointType,
	}
	_prop_map_get_ = {
		"EulerAngle": (154, 2, (9, 0), (), "EulerAngle", '{9D220527-04EE-4578-9457-4C2061D099E7}'),
		"FullName": (175, 2, (8, 0), (), "FullName", None),
		"GetName": (173, 2, (8, 0), (), "GetName", None),
		"MasterPoint": (152, 2, (9, 0), (), "MasterPoint", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"MasterPointType": (155, 2, (3, 0), (), "MasterPointType", '{30E13C29-97B5-4A36-99AF-09D3F2FAD89C}'),
		"Name": (174, 2, (8, 0), (), "Name", None),
		"OrientationType": (157, 2, (3, 0), (), "OrientationType", '{8FAAC199-EEC5-4638-9F70-10B5A4CBBB3E}'),
		"Origin": (151, 2, (9, 0), (), "Origin", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"ParentRefFrame": (168, 2, (9, 0), (), "ParentRefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"SlavePoint": (153, 2, (9, 0), (), "SlavePoint", '{918CAF9A-7A62-4EC4-B45D-C259C997B661}'),
		"SlavePointType": (156, 2, (3, 0), (), "SlavePointType", '{30E13C29-97B5-4A36-99AF-09D3F2FAD89C}'),
	}
	_prop_map_put_ = {
		"MasterPointType": ((155, LCID, 4, 0),()),
		"OrientationType": ((157, LCID, 4, 0),()),
		"SlavePointType": ((156, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IRelationMap(DispatchBaseClass):
	'''Relation Map'''
	CLSID = IID('{5A99CECC-EA9D-4687-8156-FF398A176E63}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRelationMapEntities(self, pSource):
		'''
		Get Related geometries
		
		:param pSource: IGeneric
		:rtype: recurdyn.ProcessNet.IGenericCollection
		'''
		ret = self._oleobj_.InvokeTypes(51, LCID, 1, (9, 0), ((9, 1),),pSource
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetRelationMapEntities', '{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')
		return ret

	def _get_ShowBody(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "ShowBody", None))
	def _get_ShowContact(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "ShowContact", None))
	def _get_ShowForce(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "ShowForce", None))
	def _get_ShowInactive(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "ShowInactive", None))
	def _get_ShowJoint(self):
		return self._ApplyTypes_(*(53, 2, (11, 0), (), "ShowJoint", None))
	def _get_ShowSubentity(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "ShowSubentity", None))

	def _set_ShowBody(self, value):
		if "ShowBody" in self.__dict__: self.__dict__["ShowBody"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_ShowContact(self, value):
		if "ShowContact" in self.__dict__: self.__dict__["ShowContact"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_ShowForce(self, value):
		if "ShowForce" in self.__dict__: self.__dict__["ShowForce"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_ShowInactive(self, value):
		if "ShowInactive" in self.__dict__: self.__dict__["ShowInactive"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_ShowJoint(self, value):
		if "ShowJoint" in self.__dict__: self.__dict__["ShowJoint"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_ShowSubentity(self, value):
		if "ShowSubentity" in self.__dict__: self.__dict__["ShowSubentity"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))

	ShowBody = property(_get_ShowBody, _set_ShowBody)
	'''
	Show body

	:type: bool
	'''
	ShowContact = property(_get_ShowContact, _set_ShowContact)
	'''
	Show contact

	:type: bool
	'''
	ShowForce = property(_get_ShowForce, _set_ShowForce)
	'''
	Show force

	:type: bool
	'''
	ShowInactive = property(_get_ShowInactive, _set_ShowInactive)
	'''
	Show inactive

	:type: bool
	'''
	ShowJoint = property(_get_ShowJoint, _set_ShowJoint)
	'''
	Show joint

	:type: bool
	'''
	ShowSubentity = property(_get_ShowSubentity, _set_ShowSubentity)
	'''
	Show subentity

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_ShowBody": _set_ShowBody,
		"_set_ShowContact": _set_ShowContact,
		"_set_ShowForce": _set_ShowForce,
		"_set_ShowInactive": _set_ShowInactive,
		"_set_ShowJoint": _set_ShowJoint,
		"_set_ShowSubentity": _set_ShowSubentity,
	}
	_prop_map_get_ = {
		"ShowBody": (52, 2, (11, 0), (), "ShowBody", None),
		"ShowContact": (55, 2, (11, 0), (), "ShowContact", None),
		"ShowForce": (54, 2, (11, 0), (), "ShowForce", None),
		"ShowInactive": (57, 2, (11, 0), (), "ShowInactive", None),
		"ShowJoint": (53, 2, (11, 0), (), "ShowJoint", None),
		"ShowSubentity": (56, 2, (11, 0), (), "ShowSubentity", None),
	}
	_prop_map_put_ = {
		"ShowBody": ((52, LCID, 4, 0),()),
		"ShowContact": ((55, LCID, 4, 0),()),
		"ShowForce": ((54, LCID, 4, 0),()),
		"ShowInactive": ((57, LCID, 4, 0),()),
		"ShowJoint": ((53, LCID, 4, 0),()),
		"ShowSubentity": ((56, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IRequestExpression(DispatchBaseClass):
	'''Request expression'''
	CLSID = IID('{70D93511-61EB-4AB6-80D8-B142DB3D7923}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetPlotNameList(self):
		'''
		Get Plottable Name List
		
		:rtype: list[str]
		'''
		return self._ApplyTypes_(207, 1, (8200, 0), (), 'GetPlotNameList', None,)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Expression1(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "Expression1", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_Expression2(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "Expression2", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_Expression3(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "Expression3", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_Expression4(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "Expression4", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_Expression5(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "Expression5", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_Expression6(self):
		return self._ApplyTypes_(*(206, 2, (9, 0), (), "Expression6", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Expression1(self, value):
		if "Expression1" in self.__dict__: self.__dict__["Expression1"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Expression2(self, value):
		if "Expression2" in self.__dict__: self.__dict__["Expression2"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Expression3(self, value):
		if "Expression3" in self.__dict__: self.__dict__["Expression3"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Expression4(self, value):
		if "Expression4" in self.__dict__: self.__dict__["Expression4"] = value; return
		self._oleobj_.Invoke(*((204, LCID, 4, 0) + (value,) + ()))
	def _set_Expression5(self, value):
		if "Expression5" in self.__dict__: self.__dict__["Expression5"] = value; return
		self._oleobj_.Invoke(*((205, LCID, 4, 0) + (value,) + ()))
	def _set_Expression6(self, value):
		if "Expression6" in self.__dict__: self.__dict__["Expression6"] = value; return
		self._oleobj_.Invoke(*((206, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Expression1 = property(_get_Expression1, _set_Expression1)
	'''
	Expression 1

	:type: recurdyn.ProcessNet.IExpression
	'''
	Expression2 = property(_get_Expression2, _set_Expression2)
	'''
	Expression 2

	:type: recurdyn.ProcessNet.IExpression
	'''
	Expression3 = property(_get_Expression3, _set_Expression3)
	'''
	Expression 3

	:type: recurdyn.ProcessNet.IExpression
	'''
	Expression4 = property(_get_Expression4, _set_Expression4)
	'''
	Expression 4

	:type: recurdyn.ProcessNet.IExpression
	'''
	Expression5 = property(_get_Expression5, _set_Expression5)
	'''
	Expression 5

	:type: recurdyn.ProcessNet.IExpression
	'''
	Expression6 = property(_get_Expression6, _set_Expression6)
	'''
	Expression 6

	:type: recurdyn.ProcessNet.IExpression
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Comment": _set_Comment,
		"_set_Expression1": _set_Expression1,
		"_set_Expression2": _set_Expression2,
		"_set_Expression3": _set_Expression3,
		"_set_Expression4": _set_Expression4,
		"_set_Expression5": _set_Expression5,
		"_set_Expression6": _set_Expression6,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Expression1": (201, 2, (9, 0), (), "Expression1", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"Expression2": (202, 2, (9, 0), (), "Expression2", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"Expression3": (203, 2, (9, 0), (), "Expression3", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"Expression4": (204, 2, (9, 0), (), "Expression4", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"Expression5": (205, 2, (9, 0), (), "Expression5", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"Expression6": (206, 2, (9, 0), (), "Expression6", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Expression1": ((201, LCID, 4, 0),()),
		"Expression2": ((202, LCID, 4, 0),()),
		"Expression3": ((203, LCID, 4, 0),()),
		"Expression4": ((204, LCID, 4, 0),()),
		"Expression5": ((205, LCID, 4, 0),()),
		"Expression6": ((206, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IRequestExpressionCollection(DispatchBaseClass):
	'''IRequestExpressionCollection'''
	CLSID = IID('{65267578-7015-4BB5-BB65-F5F81CCEA242}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IRequestExpression
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{70D93511-61EB-4AB6-80D8-B142DB3D7923}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IRequestExpression
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{70D93511-61EB-4AB6-80D8-B142DB3D7923}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{70D93511-61EB-4AB6-80D8-B142DB3D7923}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{70D93511-61EB-4AB6-80D8-B142DB3D7923}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IRequestStandard(DispatchBaseClass):
	'''Request standard'''
	CLSID = IID('{BAD8E0C8-CE5C-4AFD-88DE-427445F73C75}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetPlotNameList(self):
		'''
		Get Plottable Name List
		
		:rtype: list[str]
		'''
		return self._ApplyTypes_(207, 1, (8200, 0), (), 'GetPlotNameList', None,)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_EulerAngle(self):
		return self._ApplyTypes_(*(205, 2, (3, 0), (), "EulerAngle", '{A952E8B8-4277-4459-8636-46BE3982535C}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefMarker(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Type(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "Type", '{B30ED634-1939-40CE-B123-73818AAD745C}'))
	def _get_Use4thMarkerFlag(self):
		return self._ApplyTypes_(*(206, 2, (11, 0), (), "Use4thMarkerFlag", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_EulerAngle(self, value):
		if "EulerAngle" in self.__dict__: self.__dict__["EulerAngle"] = value; return
		self._oleobj_.Invoke(*((205, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_RefMarker(self, value):
		if "RefMarker" in self.__dict__: self.__dict__["RefMarker"] = value; return
		self._oleobj_.Invoke(*((204, LCID, 4, 0) + (value,) + ()))
	def _set_Type(self, value):
		if "Type" in self.__dict__: self.__dict__["Type"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Use4thMarkerFlag(self, value):
		if "Use4thMarkerFlag" in self.__dict__: self.__dict__["Use4thMarkerFlag"] = value; return
		self._oleobj_.Invoke(*((206, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	EulerAngle = property(_get_EulerAngle, _set_EulerAngle)
	'''
	Euler angle

	:type: recurdyn.ProcessNet.EulerAngle
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefMarker = property(_get_RefMarker, _set_RefMarker)
	'''
	Reference marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Type = property(_get_Type, _set_Type)
	'''
	Standard request type

	:type: recurdyn.ProcessNet.RequestStandardType
	'''
	Use4thMarkerFlag = property(_get_Use4thMarkerFlag, _set_Use4thMarkerFlag)
	'''
	Use 4th Marker Flag

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_Active": _set_Active,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_EulerAngle": _set_EulerAngle,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_RefMarker": _set_RefMarker,
		"_set_Type": _set_Type,
		"_set_Use4thMarkerFlag": _set_Use4thMarkerFlag,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"ActionMarker": (202, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BaseMarker": (203, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"EulerAngle": (205, 2, (3, 0), (), "EulerAngle", '{A952E8B8-4277-4459-8636-46BE3982535C}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefMarker": (204, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Type": (201, 2, (3, 0), (), "Type", '{B30ED634-1939-40CE-B123-73818AAD745C}'),
		"Use4thMarkerFlag": (206, 2, (11, 0), (), "Use4thMarkerFlag", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((202, LCID, 4, 0),()),
		"Active": ((152, LCID, 4, 0),()),
		"BaseMarker": ((203, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"EulerAngle": ((205, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"RefMarker": ((204, LCID, 4, 0),()),
		"Type": ((201, LCID, 4, 0),()),
		"Use4thMarkerFlag": ((206, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IRequestStandardCollection(DispatchBaseClass):
	'''IRequestStandardCollection'''
	CLSID = IID('{65267578-7015-4BB5-BB65-F5F81CCEA240}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IRequestStandard
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{BAD8E0C8-CE5C-4AFD-88DE-427445F73C75}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IRequestStandard
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{BAD8E0C8-CE5C-4AFD-88DE-427445F73C75}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{BAD8E0C8-CE5C-4AFD-88DE-427445F73C75}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{BAD8E0C8-CE5C-4AFD-88DE-427445F73C75}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IRequestUserSubroutine(DispatchBaseClass):
	'''Request user subroutine'''
	CLSID = IID('{F13A88C4-88A8-439B-B06A-A6827B3D4489}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetPlotNameList(self):
		'''
		Get Plottable Name List
		
		:rtype: list[str]
		'''
		return self._ApplyTypes_(202, 1, (8200, 0), (), 'GetPlotNameList', None,)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_UserSubroutine(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UserSubroutine(self, value):
		if "UserSubroutine" in self.__dict__: self.__dict__["UserSubroutine"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	UserSubroutine = property(_get_UserSubroutine, _set_UserSubroutine)
	'''
	User subroutine

	:type: recurdyn.ProcessNet.IUserSubroutine
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Comment": _set_Comment,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
		"_set_UserSubroutine": _set_UserSubroutine,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"UserSubroutine": (201, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"UserSubroutine": ((201, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IRequestUserSubroutineCollection(DispatchBaseClass):
	'''IRequestUserSubroutineCollection'''
	CLSID = IID('{65267578-7015-4BB5-BB65-F5F81CCEA241}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IRequestUserSubroutine
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{F13A88C4-88A8-439B-B06A-A6827B3D4489}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IRequestUserSubroutine
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{F13A88C4-88A8-439B-B06A-A6827B3D4489}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{F13A88C4-88A8-439B-B06A-A6827B3D4489}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{F13A88C4-88A8-439B-B06A-A6827B3D4489}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IRibbonGroup(DispatchBaseClass):
	'''RibbonGroup'''
	CLSID = IID('{CEFE050D-2992-4FDE-AD88-796B864516A0}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddMenuControl(self, Type, nId):
		'''
		Create MenuControl and add to RibbonGroup
		
		:param Type: MenuControlType
		:param nId: int
		:rtype: recurdyn.ProcessNet.IMenuControl
		'''
		ret = self._oleobj_.InvokeTypes(53, LCID, 1, (9, 0), ((3, 1), (3, 1)),Type
			, nId)
		if ret is not None:
			ret = Dispatch(ret, 'AddMenuControl', '{B2F1CBE0-707D-4E0B-B080-546D4664CA2F}')
		return ret

	def GetMenuControl(self, Index):
		'''
		Get MenuControl using index starting at 0
		
		:param Index: int
		:rtype: recurdyn.ProcessNet.IMenuControl
		'''
		ret = self._oleobj_.InvokeTypes(54, LCID, 1, (9, 0), ((19, 1),),Index
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetMenuControl', '{B2F1CBE0-707D-4E0B-B080-546D4664CA2F}')
		return ret

	def InsertMenuControl(self, pVal):
		'''
		Insert MenuControl to RibbonGroup
		
		:param pVal: IMenuControl
		'''
		return self._oleobj_.InvokeTypes(52, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def SetVisible(self, Val):
		'''
		Show/Hide
		
		:param Val: bool
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (24, 0), ((11, 1),),Val
			)


	def _get_Caption(self):
		return self._ApplyTypes_(*(56, 2, (8, 0), (), "Caption", None))
	def _get_ID(self):
		return self._ApplyTypes_(*(57, 2, (19, 0), (), "ID", None))
	def _get_Index(self):
		return self._ApplyTypes_(*(58, 2, (19, 0), (), "Index", None))
	def _get_MenuControlCount(self):
		return self._ApplyTypes_(*(55, 2, (19, 0), (), "MenuControlCount", None))

	def _set_Caption(self, value):
		if "Caption" in self.__dict__: self.__dict__["Caption"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_ID(self, value):
		if "ID" in self.__dict__: self.__dict__["ID"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))

	Caption = property(_get_Caption, _set_Caption)
	'''
	Caption of Current RibbonGroup

	:type: str
	'''
	ID = property(_get_ID, _set_ID)
	'''
	ID of Current RibbonGroup

	:type: int
	'''
	Index = property(_get_Index, None)
	'''
	Index of Current RibbonGroup

	:type: int
	'''
	MenuControlCount = property(_get_MenuControlCount, None)
	'''
	Number of MenuControl in Current RibbonGroup

	:type: int
	'''

	_prop_map_set_function_ = {
		"_set_Caption": _set_Caption,
		"_set_ID": _set_ID,
	}
	_prop_map_get_ = {
		"Caption": (56, 2, (8, 0), (), "Caption", None),
		"ID": (57, 2, (19, 0), (), "ID", None),
		"Index": (58, 2, (19, 0), (), "Index", None),
		"MenuControlCount": (55, 2, (19, 0), (), "MenuControlCount", None),
	}
	_prop_map_put_ = {
		"Caption": ((56, LCID, 4, 0),()),
		"ID": ((57, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IRibbonManager(DispatchBaseClass):
	'''Ribbon Control Manager'''
	CLSID = IID('{81691554-1F9A-435A-9730-5C995EEFBDBD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddRibbonTab(self, szCaption):
		'''
		Create RibbonTab and add to RibbonManager
		
		:param szCaption: str
		:rtype: recurdyn.ProcessNet.IRibbonTab
		'''
		ret = self._oleobj_.InvokeTypes(51, LCID, 1, (9, 0), ((8, 1),),szCaption
			)
		if ret is not None:
			ret = Dispatch(ret, 'AddRibbonTab', '{E4EE4AC4-95CE-4D3D-BBC6-1962F46A4CA2}')
		return ret

	def FindRibbonTab(self, Caption):
		'''
		Find RibbonTab using Caption
		
		:param Caption: str
		:rtype: recurdyn.ProcessNet.IRibbonTab
		'''
		ret = self._oleobj_.InvokeTypes(52, LCID, 1, (9, 0), ((8, 1),),Caption
			)
		if ret is not None:
			ret = Dispatch(ret, 'FindRibbonTab', '{E4EE4AC4-95CE-4D3D-BBC6-1962F46A4CA2}')
		return ret

	def FindRibbonTabByID(self, idTab):
		'''
		Find RibbonTab using ID
		
		:param idTab: int
		:rtype: recurdyn.ProcessNet.IRibbonTab
		'''
		ret = self._oleobj_.InvokeTypes(53, LCID, 1, (9, 0), ((19, 1),),idTab
			)
		if ret is not None:
			ret = Dispatch(ret, 'FindRibbonTabByID', '{E4EE4AC4-95CE-4D3D-BBC6-1962F46A4CA2}')
		return ret

	def FindRibbonTabByIndex(self, Index):
		'''
		Find RibbonTab using index starting at 0
		
		:param Index: int
		:rtype: recurdyn.ProcessNet.IRibbonTab
		'''
		ret = self._oleobj_.InvokeTypes(54, LCID, 1, (9, 0), ((19, 1),),Index
			)
		if ret is not None:
			ret = Dispatch(ret, 'FindRibbonTabByIndex', '{E4EE4AC4-95CE-4D3D-BBC6-1962F46A4CA2}')
		return ret

	def _get_RibbonTabCount(self):
		return self._ApplyTypes_(*(55, 2, (19, 0), (), "RibbonTabCount", None))

	RibbonTabCount = property(_get_RibbonTabCount, None)
	'''
	Number of RibbonGroup in Current RibbonTab

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"RibbonTabCount": (55, 2, (19, 0), (), "RibbonTabCount", None),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IRibbonTab(DispatchBaseClass):
	'''RibbonTab'''
	CLSID = IID('{E4EE4AC4-95CE-4D3D-BBC6-1962F46A4CA2}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddRibbonGroup(self, szCaption):
		'''
		Create RibbonGroup and add to RibbonTab
		
		:param szCaption: str
		:rtype: recurdyn.ProcessNet.IRibbonGroup
		'''
		ret = self._oleobj_.InvokeTypes(52, LCID, 1, (9, 0), ((8, 1),),szCaption
			)
		if ret is not None:
			ret = Dispatch(ret, 'AddRibbonGroup', '{CEFE050D-2992-4FDE-AD88-796B864516A0}')
		return ret

	def FindRibbonGroup(self, szCaption):
		'''
		Find RibbonGroup using Caption
		
		:param szCaption: str
		:rtype: recurdyn.ProcessNet.IRibbonGroup
		'''
		ret = self._oleobj_.InvokeTypes(53, LCID, 1, (9, 0), ((8, 1),),szCaption
			)
		if ret is not None:
			ret = Dispatch(ret, 'FindRibbonGroup', '{CEFE050D-2992-4FDE-AD88-796B864516A0}')
		return ret

	def FindRibbonGroupByID(self, idGroup):
		'''
		Find RibbonGroup using ID
		
		:param idGroup: int
		:rtype: recurdyn.ProcessNet.IRibbonGroup
		'''
		ret = self._oleobj_.InvokeTypes(54, LCID, 1, (9, 0), ((19, 1),),idGroup
			)
		if ret is not None:
			ret = Dispatch(ret, 'FindRibbonGroupByID', '{CEFE050D-2992-4FDE-AD88-796B864516A0}')
		return ret

	def FindRibbonGroupByIndex(self, Index):
		'''
		Find RibbonGroup using index starting at 0
		
		:param Index: int
		:rtype: recurdyn.ProcessNet.IRibbonGroup
		'''
		ret = self._oleobj_.InvokeTypes(55, LCID, 1, (9, 0), ((19, 1),),Index
			)
		if ret is not None:
			ret = Dispatch(ret, 'FindRibbonGroupByIndex', '{CEFE050D-2992-4FDE-AD88-796B864516A0}')
		return ret

	def SetVisible(self, Val):
		'''
		Show/Hide
		
		:param Val: bool
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (24, 0), ((11, 1),),Val
			)


	def _get_Caption(self):
		return self._ApplyTypes_(*(57, 2, (8, 0), (), "Caption", None))
	def _get_ID(self):
		return self._ApplyTypes_(*(58, 2, (19, 0), (), "ID", None))
	def _get_Index(self):
		return self._ApplyTypes_(*(59, 2, (19, 0), (), "Index", None))
	def _get_RibbonGroupCount(self):
		return self._ApplyTypes_(*(56, 2, (19, 0), (), "RibbonGroupCount", None))
	def _get_Tooltip(self):
		return self._ApplyTypes_(*(60, 2, (8, 0), (), "Tooltip", None))

	def _set_Caption(self, value):
		if "Caption" in self.__dict__: self.__dict__["Caption"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_ID(self, value):
		if "ID" in self.__dict__: self.__dict__["ID"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))
	def _set_Tooltip(self, value):
		if "Tooltip" in self.__dict__: self.__dict__["Tooltip"] = value; return
		self._oleobj_.Invoke(*((60, LCID, 4, 0) + (value,) + ()))

	Caption = property(_get_Caption, _set_Caption)
	'''
	Caption of Current RibbonTab

	:type: str
	'''
	ID = property(_get_ID, _set_ID)
	'''
	ID of Current RibbonTab

	:type: int
	'''
	Index = property(_get_Index, None)
	'''
	Index of Current RibbonTab

	:type: int
	'''
	RibbonGroupCount = property(_get_RibbonGroupCount, None)
	'''
	Number of RibbonGroup in Current RibbonTab

	:type: int
	'''
	Tooltip = property(_get_Tooltip, _set_Tooltip)
	'''
	Tooltip of Current RibbonTab

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Caption": _set_Caption,
		"_set_ID": _set_ID,
		"_set_Tooltip": _set_Tooltip,
	}
	_prop_map_get_ = {
		"Caption": (57, 2, (8, 0), (), "Caption", None),
		"ID": (58, 2, (19, 0), (), "ID", None),
		"Index": (59, 2, (19, 0), (), "Index", None),
		"RibbonGroupCount": (56, 2, (19, 0), (), "RibbonGroupCount", None),
		"Tooltip": (60, 2, (8, 0), (), "Tooltip", None),
	}
	_prop_map_put_ = {
		"Caption": ((57, LCID, 4, 0),()),
		"ID": ((58, LCID, 4, 0),()),
		"Tooltip": ((60, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IRoadData(DispatchBaseClass):
	'''RoadData'''
	CLSID = IID('{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def ExportRoadData(self, strFile):
		'''
		Export RoadData
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(152, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Color(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "Color", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Color = property(_get_Color, _set_Color)
	'''
	Color

	:type: int
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Color": _set_Color,
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Color": (151, 2, (19, 0), (), "Color", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Color": ((151, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IRoadDataCollection(DispatchBaseClass):
	'''IRoadDataCollection'''
	CLSID = IID('{68A5A87D-7640-4F09-8D24-945200D2DB33}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IRoadData
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IRoadData
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IScenario(DispatchBaseClass):
	'''Scenario'''
	CLSID = IID('{F5E81BAC-818D-4484-8F07-73FC13F44C82}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenario2(DispatchBaseClass):
	'''IScenario2'''
	CLSID = IID('{A25F296D-01DC-4AD2-BEC8-67B2EF4C99DD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScenarioType(self):
		'''
		Scenario type
		
		:rtype: recurdyn.ProcessNet.ScenarioType
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (3, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioActivate(DispatchBaseClass):
	'''Scenario Activate'''
	CLSID = IID('{4C3D72C7-FCA5-4C7A-8763-603E86EB359F}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Entity(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))

	def _set_Entity(self, value):
		if "Entity" in self.__dict__: self.__dict__["Entity"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))

	Entity = property(_get_Entity, _set_Entity)
	'''
	Entity

	:type: recurdyn.ProcessNet.IGeneric
	'''

	_prop_map_set_function_ = {
		"_set_Entity": _set_Entity,
	}
	_prop_map_get_ = {
		"Entity": (101, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
	}
	_prop_map_put_ = {
		"Entity": ((101, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioActivate2(DispatchBaseClass):
	'''Scenario Activate'''
	CLSID = IID('{C4C5B81A-3AF6-48A0-80BF-6E40789D1290}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScenarioType(self):
		'''
		Scenario type
		
		:rtype: recurdyn.ProcessNet.ScenarioType
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (3, 0), (),)


	def Update(self):
		'''
		Update method
		'''
		return self._oleobj_.InvokeTypes(202, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Entity(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Entity(self, value):
		if "Entity" in self.__dict__: self.__dict__["Entity"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Entity = property(_get_Entity, _set_Entity)
	'''
	Entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Entity": _set_Entity,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Entity": (201, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Entity": ((201, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioAnalysisProperty(DispatchBaseClass):
	'''Scenario analysis property'''
	CLSID = IID('{F212FA3B-9005-4F21-8513-893B10A6D8C7}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Export(self, strFileName, OverWrite):
		'''
		Export RSS file
		
		:param strFileName: str
		:param OverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(52, LCID, 1, (24, 0), ((8, 1), (11, 1)),strFileName
			, OverWrite)


	def ExportForStandaloneSolver(self, strFileName, OverWrite):
		'''
		Export RSS file for Standalone Solver
		
		:param strFileName: str
		:param OverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(57, LCID, 1, (24, 0), ((8, 1), (11, 1)),strFileName
			, OverWrite)


	def Import(self, strFileName):
		'''
		Import RSS file
		
		:param strFileName: str
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (24, 0), ((8, 1),),strFileName
			)


	def _get_ScenarioAnalysisTool(self):
		return self._ApplyTypes_(*(56, 2, (9, 0), (), "ScenarioAnalysisTool", '{955125C7-1D7D-4D86-8DC7-85B3A459DA55}'))
	def _get_ScenarioCollection(self):
		return self._ApplyTypes_(*(55, 2, (9, 0), (), "ScenarioCollection", '{4F34AAB3-4060-4BF7-AEAC-6B348267BB3D}'))

	def _set_UseDisplayAnimation(self, value):
		if "UseDisplayAnimation" in self.__dict__: self.__dict__["UseDisplayAnimation"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UseHideRecurDyn(self, value):
		if "UseHideRecurDyn" in self.__dict__: self.__dict__["UseHideRecurDyn"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))

	ScenarioAnalysisTool = property(_get_ScenarioAnalysisTool, None)
	'''
	Scenario analysis tools to make each scenario

	:type: recurdyn.ProcessNet.IScenarioAnalysisTool
	'''
	ScenarioCollection = property(_get_ScenarioCollection, None)
	'''
	Scenario collection

	:type: recurdyn.ProcessNet.IScenarioCollection
	'''
	UseDisplayAnimation = property(None, _set_UseDisplayAnimation)
	'''
	Use Display Animation

	:type: bool
	'''
	UseHideRecurDyn = property(None, _set_UseHideRecurDyn)
	'''
	Use Hide RecurDyn during Simulation

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UseDisplayAnimation": _set_UseDisplayAnimation,
		"_set_UseHideRecurDyn": _set_UseHideRecurDyn,
	}
	_prop_map_get_ = {
		"ScenarioAnalysisTool": (56, 2, (9, 0), (), "ScenarioAnalysisTool", '{955125C7-1D7D-4D86-8DC7-85B3A459DA55}'),
		"ScenarioCollection": (55, 2, (9, 0), (), "ScenarioCollection", '{4F34AAB3-4060-4BF7-AEAC-6B348267BB3D}'),
	}
	_prop_map_put_ = {
		"UseDisplayAnimation": ((53, LCID, 4, 0),()),
		"UseHideRecurDyn": ((54, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioAnalysisProperty2(DispatchBaseClass):
	'''Scenario analysis property'''
	CLSID = IID('{5FC5751E-20BB-455D-B127-751487DB0768}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddActivate(self, pEntity):
		'''
		Add Force Activation Scenario
		
		:param pEntity: IGeneric
		:rtype: recurdyn.ProcessNet.IScenarioActivate2
		'''
		ret = self._oleobj_.InvokeTypes(67, LCID, 1, (9, 0), ((9, 1),),pEntity
			)
		if ret is not None:
			ret = Dispatch(ret, 'AddActivate', '{C4C5B81A-3AF6-48A0-80BF-6E40789D1290}')
		return ret

	def AddDeactivate(self, pEntity):
		'''
		Add Force Deactivateion Scenario
		
		:param pEntity: IGeneric
		:rtype: recurdyn.ProcessNet.IScenarioDeactivate2
		'''
		ret = self._oleobj_.InvokeTypes(68, LCID, 1, (9, 0), ((9, 1),),pEntity
			)
		if ret is not None:
			ret = Dispatch(ret, 'AddDeactivate', '{F8AAF1F0-C97B-4387-9CC4-6AA41DECC60F}')
		return ret

	def AddEigenParameter(self, dMaxNoMode, bIncludeDamping):
		'''
		Add Eigen Parameter Scenario
		
		:param dMaxNoMode: float
		:param bIncludeDamping: bool
		:rtype: recurdyn.ProcessNet.IScenarioEigenParameter2
		'''
		ret = self._oleobj_.InvokeTypes(69, LCID, 1, (9, 0), ((5, 1), (11, 1)),dMaxNoMode
			, bIncludeDamping)
		if ret is not None:
			ret = Dispatch(ret, 'AddEigenParameter', '{71863406-3B7D-46D3-B9FA-2FA8E1AD8254}')
		return ret

	def AddEquilibrium(self, dErrorTolerance, dMaximumIteration, dConvergenceFactor):
		'''
		Add Equilibrium Scenario
		
		:param dErrorTolerance: float
		:param dMaximumIteration: float
		:param dConvergenceFactor: float
		:rtype: recurdyn.ProcessNet.IScenarioEquilibrium2
		'''
		ret = self._oleobj_.InvokeTypes(66, LCID, 1, (9, 0), ((5, 1), (5, 1), (5, 1)),dErrorTolerance
			, dMaximumIteration, dConvergenceFactor)
		if ret is not None:
			ret = Dispatch(ret, 'AddEquilibrium', '{3FADE3FB-0EC0-4467-B9C8-17548393F352}')
		return ret

	def AddFRAParameter(self, dMaxNoMode, dAnimationFrame, dAmplitudeFactor, bIncludeDamping, bLogarithmicStep):
		'''
		Add FRA Parameter Scenario
		
		:param dMaxNoMode: float
		:param dAnimationFrame: float
		:param dAmplitudeFactor: float
		:param bIncludeDamping: bool
		:param bLogarithmicStep: bool
		:rtype: recurdyn.ProcessNet.IScenarioFRAParameter2
		'''
		ret = self._oleobj_.InvokeTypes(70, LCID, 1, (9, 0), ((5, 1), (5, 1), (5, 1), (11, 1), (11, 1)),dMaxNoMode
			, dAnimationFrame, dAmplitudeFactor, bIncludeDamping, bLogarithmicStep)
		if ret is not None:
			ret = Dispatch(ret, 'AddFRAParameter', '{9365F2E3-E085-4C23-930F-DF99569638FF}')
		return ret

	def AddIntegrationADV(self, dMaximumstepSize, dErrorTolerance, dNumericalDamping):
		'''
		Add Integration ADV Scenario
		
		:param dMaximumstepSize: float
		:param dErrorTolerance: float
		:param dNumericalDamping: float
		:rtype: recurdyn.ProcessNet.IScenarioIntegrationADV
		'''
		ret = self._oleobj_.InvokeTypes(71, LCID, 1, (9, 0), ((5, 1), (5, 1), (5, 1)),dMaximumstepSize
			, dErrorTolerance, dNumericalDamping)
		if ret is not None:
			ret = Dispatch(ret, 'AddIntegrationADV', '{B8E9A36E-121C-4225-9F0C-843F5216B394}')
		return ret

	def AddIntegrationDDA(self, dMaximumstepSize, dErrorTolerance):
		'''
		This is an obsolete function. Use AddIntegrationIMG function.
		
		:param dMaximumstepSize: float
		:param dErrorTolerance: float
		:rtype: recurdyn.ProcessNet.IScenarioIntegrationDDA2
		'''
		ret = self._oleobj_.InvokeTypes(62, LCID, 1, (9, 0), ((5, 1), (5, 1)),dMaximumstepSize
			, dErrorTolerance)
		if ret is not None:
			ret = Dispatch(ret, 'AddIntegrationDDA', '{8CE8A4EC-13F2-437E-8834-FD48DB9D609A}')
		return ret

	def AddIntegrationHYB(self, dMaximumstepSize, dErrorTolerance, dNumericalDamping):
		'''
		Add Integration HYB Scenario
		
		:param dMaximumstepSize: float
		:param dErrorTolerance: float
		:param dNumericalDamping: float
		:rtype: recurdyn.ProcessNet.IScenarioIntegrationHYB2
		'''
		ret = self._oleobj_.InvokeTypes(64, LCID, 1, (9, 0), ((5, 1), (5, 1), (5, 1)),dMaximumstepSize
			, dErrorTolerance, dNumericalDamping)
		if ret is not None:
			ret = Dispatch(ret, 'AddIntegrationHYB', '{7C151D45-EF3F-4C46-9F72-77E78BC4F5C6}')
		return ret

	def AddIntegrationIMG(self, dMaximumstepSize, dErrorTolerance, dNumericalDamping):
		'''
		Add Integration IMG Scenario
		
		:param dMaximumstepSize: float
		:param dErrorTolerance: float
		:param dNumericalDamping: float
		:rtype: recurdyn.ProcessNet.IScenarioIntegrationIMG2
		'''
		ret = self._oleobj_.InvokeTypes(63, LCID, 1, (9, 0), ((5, 1), (5, 1), (5, 1)),dMaximumstepSize
			, dErrorTolerance, dNumericalDamping)
		if ret is not None:
			ret = Dispatch(ret, 'AddIntegrationIMG', '{680EBB11-DF6A-4BB0-9F7D-24C76FB16BE1}')
		return ret

	def AddIntegrationTRK(self, dMaximumstepSize, dErrorTolerance, dNumericalDamping):
		'''
		Add Integration TRK Scenario
		
		:param dMaximumstepSize: float
		:param dErrorTolerance: float
		:param dNumericalDamping: float
		:rtype: recurdyn.ProcessNet.IScenarioIntegrationTRK2
		'''
		ret = self._oleobj_.InvokeTypes(65, LCID, 1, (9, 0), ((5, 1), (5, 1), (5, 1)),dMaximumstepSize
			, dErrorTolerance, dNumericalDamping)
		if ret is not None:
			ret = Dispatch(ret, 'AddIntegrationTRK', '{E308F573-419A-4A53-8B0C-1351BACEBE4B}')
		return ret

	def AddSimulationDynamic(self, dEndTime, dStep):
		'''
		Add Dynamic Simulation Scenario
		
		:param dEndTime: float
		:param dStep: float
		:rtype: recurdyn.ProcessNet.IScenarioSimulationDynamic2
		'''
		ret = self._oleobj_.InvokeTypes(58, LCID, 1, (9, 0), ((5, 1), (5, 1)),dEndTime
			, dStep)
		if ret is not None:
			ret = Dispatch(ret, 'AddSimulationDynamic', '{819BAA2D-0DFF-490C-A3C7-5FF91590FD1E}')
		return ret

	def AddSimulationEigenvalue(self, dAmplitudeFactor, dNoOfFrame):
		'''
		Add Eigenvalue Simulation Scenario
		
		:param dAmplitudeFactor: float
		:param dNoOfFrame: float
		:rtype: recurdyn.ProcessNet.IScenarioSimulationEigenvalue2
		'''
		ret = self._oleobj_.InvokeTypes(60, LCID, 1, (9, 0), ((5, 1), (5, 1)),dAmplitudeFactor
			, dNoOfFrame)
		if ret is not None:
			ret = Dispatch(ret, 'AddSimulationEigenvalue', '{26550F0C-C58A-41CD-9A52-4EC1448C3E91}')
		return ret

	def AddSimulationFrequencyResponse(self, dFreqStart, dFreqEnd, dFreqStep):
		'''
		Add Frequency Response Simulation Scenario
		
		:param dFreqStart: float
		:param dFreqEnd: float
		:param dFreqStep: float
		:rtype: recurdyn.ProcessNet.IScenarioSimulationFrequencyResponse2
		'''
		ret = self._oleobj_.InvokeTypes(61, LCID, 1, (9, 0), ((5, 1), (5, 1), (5, 1)),dFreqStart
			, dFreqEnd, dFreqStep)
		if ret is not None:
			ret = Dispatch(ret, 'AddSimulationFrequencyResponse', '{1DFB8E58-D3D2-4D57-B10D-304E10FA9CCD}')
		return ret

	def AddSimulationStatic(self, dEndTime, dStep):
		'''
		Add Static Simulation Scenario
		
		:param dEndTime: float
		:param dStep: float
		:rtype: recurdyn.ProcessNet.IScenarioSimulationStatic2
		'''
		ret = self._oleobj_.InvokeTypes(59, LCID, 1, (9, 0), ((5, 1), (5, 1)),dEndTime
			, dStep)
		if ret is not None:
			ret = Dispatch(ret, 'AddSimulationStatic', '{22898563-4CD6-4D2F-9862-05006C178494}')
		return ret

	def DeleteScenario(self, pEntity):
		'''
		Delete Scenario
		
		:param pEntity: IScenario2
		'''
		return self._oleobj_.InvokeTypes(57, LCID, 1, (24, 0), ((9, 1),),pEntity
			)


	def Export(self, strFileName, OverWrite):
		'''
		Export RSS file
		
		:param strFileName: str
		:param OverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(52, LCID, 1, (24, 0), ((8, 1), (11, 1)),strFileName
			, OverWrite)


	def ExportForStandaloneSolver(self, strFileName, OverWrite):
		'''
		Export RSS file for Standalone Solver
		
		:param strFileName: str
		:param OverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(56, LCID, 1, (24, 0), ((8, 1), (11, 1)),strFileName
			, OverWrite)


	def Import(self, strFileName):
		'''
		Import RSS file
		
		:param strFileName: str
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (24, 0), ((8, 1),),strFileName
			)


	def _get_ScenarioCollection(self):
		return self._ApplyTypes_(*(55, 2, (9, 0), (), "ScenarioCollection", '{1E5FBACB-348B-4483-9E16-F653F5A21CF7}'))

	def _set_UseDisplayAnimation(self, value):
		if "UseDisplayAnimation" in self.__dict__: self.__dict__["UseDisplayAnimation"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UseHideRecurDyn(self, value):
		if "UseHideRecurDyn" in self.__dict__: self.__dict__["UseHideRecurDyn"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))

	ScenarioCollection = property(_get_ScenarioCollection, None)
	'''
	Scenario collection

	:type: recurdyn.ProcessNet.IScenarioCollection2
	'''
	UseDisplayAnimation = property(None, _set_UseDisplayAnimation)
	'''
	Use Display Animation

	:type: bool
	'''
	UseHideRecurDyn = property(None, _set_UseHideRecurDyn)
	'''
	Use Hide RecurDyn during Simulation

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UseDisplayAnimation": _set_UseDisplayAnimation,
		"_set_UseHideRecurDyn": _set_UseHideRecurDyn,
	}
	_prop_map_get_ = {
		"ScenarioCollection": (55, 2, (9, 0), (), "ScenarioCollection", '{1E5FBACB-348B-4483-9E16-F653F5A21CF7}'),
	}
	_prop_map_put_ = {
		"UseDisplayAnimation": ((53, LCID, 4, 0),()),
		"UseHideRecurDyn": ((54, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioAnalysisTool(DispatchBaseClass):
	'''Scenario analysis tool'''
	CLSID = IID('{955125C7-1D7D-4D86-8DC7-85B3A459DA55}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def LoadActivate(self, pEntity):
		'''
		Load Force Activation
		
		:param pEntity: IGeneric
		:rtype: recurdyn.ProcessNet.IScenarioActivate
		'''
		ret = self._oleobj_.InvokeTypes(60, LCID, 1, (9, 0), ((9, 1),),pEntity
			)
		if ret is not None:
			ret = Dispatch(ret, 'LoadActivate', '{4C3D72C7-FCA5-4C7A-8763-603E86EB359F}')
		return ret

	def LoadDeactivate(self, pEntity):
		'''
		Load Force Deactivateion
		
		:param pEntity: IGeneric
		:rtype: recurdyn.ProcessNet.IScenarioDeactivate
		'''
		ret = self._oleobj_.InvokeTypes(61, LCID, 1, (9, 0), ((9, 1),),pEntity
			)
		if ret is not None:
			ret = Dispatch(ret, 'LoadDeactivate', '{37FD2978-18F9-4D8C-9F36-B571FA460491}')
		return ret

	def LoadEigenParameter(self, dMaxNoMode, bIncludeDamping):
		'''
		Load Eigen Parameter
		
		:param dMaxNoMode: float
		:param bIncludeDamping: bool
		:rtype: recurdyn.ProcessNet.IScenarioEigenParameter
		'''
		ret = self._oleobj_.InvokeTypes(62, LCID, 1, (9, 0), ((5, 1), (11, 1)),dMaxNoMode
			, bIncludeDamping)
		if ret is not None:
			ret = Dispatch(ret, 'LoadEigenParameter', '{82AE0C9E-3F21-4838-965B-C87D06833B63}')
		return ret

	def LoadEquilibrium(self, dErrorTolerance, dMaximumIteration, dConvergenceFactor):
		'''
		Load Equilibrium
		
		:param dErrorTolerance: float
		:param dMaximumIteration: float
		:param dConvergenceFactor: float
		:rtype: recurdyn.ProcessNet.IScenarioEquilibrium
		'''
		ret = self._oleobj_.InvokeTypes(59, LCID, 1, (9, 0), ((5, 1), (5, 1), (5, 1)),dErrorTolerance
			, dMaximumIteration, dConvergenceFactor)
		if ret is not None:
			ret = Dispatch(ret, 'LoadEquilibrium', '{BF4C8308-7B3B-41AE-A799-3C51380A5931}')
		return ret

	def LoadFRAParameter(self, dMaxNoMode, dAnimationFrame, dAmplitudeFactor, bIncludeDamping, bLogarithmicStep):
		'''
		Load FRA Parameter
		
		:param dMaxNoMode: float
		:param dAnimationFrame: float
		:param dAmplitudeFactor: float
		:param bIncludeDamping: bool
		:param bLogarithmicStep: bool
		:rtype: recurdyn.ProcessNet.IScenarioFRAParameter
		'''
		ret = self._oleobj_.InvokeTypes(63, LCID, 1, (9, 0), ((5, 1), (5, 1), (5, 1), (11, 1), (11, 1)),dMaxNoMode
			, dAnimationFrame, dAmplitudeFactor, bIncludeDamping, bLogarithmicStep)
		if ret is not None:
			ret = Dispatch(ret, 'LoadFRAParameter', '{F13554D8-3EBD-4AF2-AAFB-11FF4B4756D7}')
		return ret

	def LoadIntegrationDDA(self, dMaximumstepSize, dErrorTolerance):
		'''
		This is an obsolete function.
		
		:param dMaximumstepSize: float
		:param dErrorTolerance: float
		:rtype: recurdyn.ProcessNet.IScenarioIntegrationDDA
		'''
		ret = self._oleobj_.InvokeTypes(55, LCID, 1, (9, 0), ((5, 1), (5, 1)),dMaximumstepSize
			, dErrorTolerance)
		if ret is not None:
			ret = Dispatch(ret, 'LoadIntegrationDDA', '{FD461A28-C99A-4BA7-B816-260FE7E0950E}')
		return ret

	def LoadIntegrationHYB(self, dMaximumstepSize, dErrorTolerance, dNumericalDamping):
		'''
		Load Integration HYB
		
		:param dMaximumstepSize: float
		:param dErrorTolerance: float
		:param dNumericalDamping: float
		:rtype: recurdyn.ProcessNet.IScenarioIntegrationHYB
		'''
		ret = self._oleobj_.InvokeTypes(57, LCID, 1, (9, 0), ((5, 1), (5, 1), (5, 1)),dMaximumstepSize
			, dErrorTolerance, dNumericalDamping)
		if ret is not None:
			ret = Dispatch(ret, 'LoadIntegrationHYB', '{879C1DAE-86EC-47C7-81C0-B02F3628F46F}')
		return ret

	def LoadIntegrationIMG(self, dMaximumstepSize, dErrorTolerance, dNumericalDamping):
		'''
		Load Integratin IMG
		
		:param dMaximumstepSize: float
		:param dErrorTolerance: float
		:param dNumericalDamping: float
		:rtype: recurdyn.ProcessNet.IScenarioIntegrationIMG
		'''
		ret = self._oleobj_.InvokeTypes(56, LCID, 1, (9, 0), ((5, 1), (5, 1), (5, 1)),dMaximumstepSize
			, dErrorTolerance, dNumericalDamping)
		if ret is not None:
			ret = Dispatch(ret, 'LoadIntegrationIMG', '{2B48E9C0-40F9-48D4-AA5C-BBB99D0DD8BD}')
		return ret

	def LoadIntegrationTRK(self, dMaximumstepSize, dErrorTolerance, dNumericalDamping):
		'''
		Load Integration TRK
		
		:param dMaximumstepSize: float
		:param dErrorTolerance: float
		:param dNumericalDamping: float
		:rtype: recurdyn.ProcessNet.IScenarioIntegrationTRK
		'''
		ret = self._oleobj_.InvokeTypes(58, LCID, 1, (9, 0), ((5, 1), (5, 1), (5, 1)),dMaximumstepSize
			, dErrorTolerance, dNumericalDamping)
		if ret is not None:
			ret = Dispatch(ret, 'LoadIntegrationTRK', '{F013ED05-BDE6-493B-B4FC-7584C250C5FC}')
		return ret

	def LoadSimulationDynamic(self, dEndTime, dStep):
		'''
		Load Dynamic Simulation
		
		:param dEndTime: float
		:param dStep: float
		:rtype: recurdyn.ProcessNet.IScenarioSimulationDynamic
		'''
		ret = self._oleobj_.InvokeTypes(51, LCID, 1, (9, 0), ((5, 1), (5, 1)),dEndTime
			, dStep)
		if ret is not None:
			ret = Dispatch(ret, 'LoadSimulationDynamic', '{BB2EB111-0323-4B54-B0E9-B24757D1C5E3}')
		return ret

	def LoadSimulationEigenvalue(self, dAmplitudeFactor, dNoOfFrame):
		'''
		Load Eigenvalue Simulation
		
		:param dAmplitudeFactor: float
		:param dNoOfFrame: float
		:rtype: recurdyn.ProcessNet.IScenarioSimulationEigenvalue
		'''
		ret = self._oleobj_.InvokeTypes(53, LCID, 1, (9, 0), ((5, 1), (5, 1)),dAmplitudeFactor
			, dNoOfFrame)
		if ret is not None:
			ret = Dispatch(ret, 'LoadSimulationEigenvalue', '{9D73DB69-F99F-45F5-9A29-2F8661214C67}')
		return ret

	def LoadSimulationFrequencyResponse(self, dFreqStart, dFreqEnd, dFreqStep):
		'''
		Load Frequency Response Simulation
		
		:param dFreqStart: float
		:param dFreqEnd: float
		:param dFreqStep: float
		:rtype: recurdyn.ProcessNet.IScenarioSimulationFrequencyResponse
		'''
		ret = self._oleobj_.InvokeTypes(54, LCID, 1, (9, 0), ((5, 1), (5, 1), (5, 1)),dFreqStart
			, dFreqEnd, dFreqStep)
		if ret is not None:
			ret = Dispatch(ret, 'LoadSimulationFrequencyResponse', '{0F8B6060-98A3-4734-968D-FE9919D96B20}')
		return ret

	def LoadSimulationStatic(self, dEndTime, dStep):
		'''
		Load Static Simulation
		
		:param dEndTime: float
		:param dStep: float
		:rtype: recurdyn.ProcessNet.IScenarioSimulationStatic
		'''
		ret = self._oleobj_.InvokeTypes(52, LCID, 1, (9, 0), ((5, 1), (5, 1)),dEndTime
			, dStep)
		if ret is not None:
			ret = Dispatch(ret, 'LoadSimulationStatic', '{703335D3-4FFB-4973-B3CC-F2150716A970}')
		return ret

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioCollection(DispatchBaseClass):
	'''IScenarioCollection'''
	CLSID = IID('{4F34AAB3-4060-4BF7-AEAC-6B348267BB3D}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Add(self, scenario):
		'''
		Add a scenario to the scenario collecion
		
		:param scenario: IScenario
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (24, 0), ((9, 1),),scenario
			)


	def Delete(self, iIndex):
		'''
		Delete a scenario from the scenario collecion
		
		:param iIndex: int
		'''
		return self._oleobj_.InvokeTypes(53, LCID, 1, (24, 0), ((3, 1),),iIndex
			)


	def Insert(self, iIndex, scenario):
		'''
		Insert a scenario to the scenario collection
		
		:param iIndex: int
		:param scenario: IScenario
		'''
		return self._oleobj_.InvokeTypes(52, LCID, 1, (24, 0), ((3, 1), (9, 1)),iIndex
			, scenario)


	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IScenario
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{F5E81BAC-818D-4484-8F07-73FC13F44C82}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: int
		:rtype: recurdyn.ProcessNet.IScenario
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((3, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{F5E81BAC-818D-4484-8F07-73FC13F44C82}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{F5E81BAC-818D-4484-8F07-73FC13F44C82}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{F5E81BAC-818D-4484-8F07-73FC13F44C82}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IScenarioCollection2(DispatchBaseClass):
	'''IScenarioCollection2 for IScenario2'''
	CLSID = IID('{1E5FBACB-348B-4483-9E16-F653F5A21CF7}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IScenario2
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{A25F296D-01DC-4AD2-BEC8-67B2EF4C99DD}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IScenario2
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{A25F296D-01DC-4AD2-BEC8-67B2EF4C99DD}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{A25F296D-01DC-4AD2-BEC8-67B2EF4C99DD}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{A25F296D-01DC-4AD2-BEC8-67B2EF4C99DD}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IScenarioDeactivate(DispatchBaseClass):
	'''Scenario Deactivate'''
	CLSID = IID('{37FD2978-18F9-4D8C-9F36-B571FA460491}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Entity(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))

	def _set_Entity(self, value):
		if "Entity" in self.__dict__: self.__dict__["Entity"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))

	Entity = property(_get_Entity, _set_Entity)
	'''
	Entity

	:type: recurdyn.ProcessNet.IGeneric
	'''

	_prop_map_set_function_ = {
		"_set_Entity": _set_Entity,
	}
	_prop_map_get_ = {
		"Entity": (101, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
	}
	_prop_map_put_ = {
		"Entity": ((101, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioDeactivate2(DispatchBaseClass):
	'''Scenario Deactivate'''
	CLSID = IID('{F8AAF1F0-C97B-4387-9CC4-6AA41DECC60F}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScenarioType(self):
		'''
		Scenario type
		
		:rtype: recurdyn.ProcessNet.ScenarioType
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (3, 0), (),)


	def Update(self):
		'''
		Update method
		'''
		return self._oleobj_.InvokeTypes(202, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Entity(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Entity(self, value):
		if "Entity" in self.__dict__: self.__dict__["Entity"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Entity = property(_get_Entity, _set_Entity)
	'''
	Entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Entity": _set_Entity,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Entity": (201, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Entity": ((201, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioEigenParameter(DispatchBaseClass):
	'''Scenario Eigen Paremeter'''
	CLSID = IID('{82AE0C9E-3F21-4838-965B-C87D06833B63}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_IncludeDamping(self):
		return self._ApplyTypes_(*(102, 2, (11, 0), (), "IncludeDamping", None))
	def _get_MaxNoMode(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "MaxNoMode", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	def _set_IncludeDamping(self, value):
		if "IncludeDamping" in self.__dict__: self.__dict__["IncludeDamping"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))

	IncludeDamping = property(_get_IncludeDamping, _set_IncludeDamping)
	'''
	Include Damping

	:type: bool
	'''
	MaxNoMode = property(_get_MaxNoMode, None)
	'''
	Max No. Mode

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
		"_set_IncludeDamping": _set_IncludeDamping,
	}
	_prop_map_get_ = {
		"IncludeDamping": (102, 2, (11, 0), (), "IncludeDamping", None),
		"MaxNoMode": (101, 2, (9, 0), (), "MaxNoMode", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
		"IncludeDamping": ((102, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioEigenParameter2(DispatchBaseClass):
	'''Scenario Eigen Paremeter'''
	CLSID = IID('{71863406-3B7D-46D3-B9FA-2FA8E1AD8254}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScenarioType(self):
		'''
		Scenario type
		
		:rtype: recurdyn.ProcessNet.ScenarioType
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (3, 0), (),)


	def Update(self):
		'''
		Update method
		'''
		return self._oleobj_.InvokeTypes(203, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_IncludeDamping(self):
		return self._ApplyTypes_(*(202, 2, (11, 0), (), "IncludeDamping", None))
	def _get_MaxNoMode(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "MaxNoMode", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_IncludeDamping(self, value):
		if "IncludeDamping" in self.__dict__: self.__dict__["IncludeDamping"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	IncludeDamping = property(_get_IncludeDamping, _set_IncludeDamping)
	'''
	Include Damping

	:type: bool
	'''
	MaxNoMode = property(_get_MaxNoMode, None)
	'''
	Max No. Mode

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_IncludeDamping": _set_IncludeDamping,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"IncludeDamping": (202, 2, (11, 0), (), "IncludeDamping", None),
		"MaxNoMode": (201, 2, (9, 0), (), "MaxNoMode", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"IncludeDamping": ((202, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioEquilibrium(DispatchBaseClass):
	'''Scenario Equilibrium'''
	CLSID = IID('{BF4C8308-7B3B-41AE-A799-3C51380A5931}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_ConvergenceFactor(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "ConvergenceFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ErrorTolerance(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaximumIteration(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "MaximumIteration", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	ConvergenceFactor = property(_get_ConvergenceFactor, None)
	'''
	ConvergenceFactor

	:type: recurdyn.ProcessNet.IDouble
	'''
	ErrorTolerance = property(_get_ErrorTolerance, None)
	'''
	Error tolerance

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaximumIteration = property(_get_MaximumIteration, None)
	'''
	Maximum iteration

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"ConvergenceFactor": (103, 2, (9, 0), (), "ConvergenceFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ErrorTolerance": (101, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaximumIteration": (102, 2, (9, 0), (), "MaximumIteration", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioEquilibrium2(DispatchBaseClass):
	'''Scenario Equilibrium'''
	CLSID = IID('{3FADE3FB-0EC0-4467-B9C8-17548393F352}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScenarioType(self):
		'''
		Scenario type
		
		:rtype: recurdyn.ProcessNet.ScenarioType
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (3, 0), (),)


	def Update(self):
		'''
		Update method
		'''
		return self._oleobj_.InvokeTypes(204, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ConvergenceFactor(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ConvergenceFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ErrorTolerance(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_MaximumIteration(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "MaximumIteration", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ConvergenceFactor = property(_get_ConvergenceFactor, None)
	'''
	ConvergenceFactor

	:type: recurdyn.ProcessNet.IDouble
	'''
	ErrorTolerance = property(_get_ErrorTolerance, None)
	'''
	Error tolerance

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	MaximumIteration = property(_get_MaximumIteration, None)
	'''
	Maximum iteration

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ConvergenceFactor": (203, 2, (9, 0), (), "ConvergenceFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ErrorTolerance": (201, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"MaximumIteration": (202, 2, (9, 0), (), "MaximumIteration", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioFRAParameter(DispatchBaseClass):
	'''Scenario FRA Paremeter'''
	CLSID = IID('{F13554D8-3EBD-4AF2-AAFB-11FF4B4756D7}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AmplitudeFactor(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "AmplitudeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_AnimationFrame(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "AnimationFrame", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_IncludeDamping(self):
		return self._ApplyTypes_(*(104, 2, (11, 0), (), "IncludeDamping", None))
	def _get_LogarithmicStep(self):
		return self._ApplyTypes_(*(105, 2, (11, 0), (), "LogarithmicStep", None))
	def _get_MaxNoMode(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "MaxNoMode", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	def _set_IncludeDamping(self, value):
		if "IncludeDamping" in self.__dict__: self.__dict__["IncludeDamping"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_LogarithmicStep(self, value):
		if "LogarithmicStep" in self.__dict__: self.__dict__["LogarithmicStep"] = value; return
		self._oleobj_.Invoke(*((105, LCID, 4, 0) + (value,) + ()))

	AmplitudeFactor = property(_get_AmplitudeFactor, None)
	'''
	Amplitude Factor

	:type: recurdyn.ProcessNet.IDouble
	'''
	AnimationFrame = property(_get_AnimationFrame, None)
	'''
	Animation Frame

	:type: recurdyn.ProcessNet.IDouble
	'''
	IncludeDamping = property(_get_IncludeDamping, _set_IncludeDamping)
	'''
	Include Damping

	:type: bool
	'''
	LogarithmicStep = property(_get_LogarithmicStep, _set_LogarithmicStep)
	'''
	Logarithmic Step

	:type: bool
	'''
	MaxNoMode = property(_get_MaxNoMode, None)
	'''
	Max No. Mode

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
		"_set_IncludeDamping": _set_IncludeDamping,
		"_set_LogarithmicStep": _set_LogarithmicStep,
	}
	_prop_map_get_ = {
		"AmplitudeFactor": (103, 2, (9, 0), (), "AmplitudeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"AnimationFrame": (102, 2, (9, 0), (), "AnimationFrame", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"IncludeDamping": (104, 2, (11, 0), (), "IncludeDamping", None),
		"LogarithmicStep": (105, 2, (11, 0), (), "LogarithmicStep", None),
		"MaxNoMode": (101, 2, (9, 0), (), "MaxNoMode", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
		"IncludeDamping": ((104, LCID, 4, 0),()),
		"LogarithmicStep": ((105, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioFRAParameter2(DispatchBaseClass):
	'''Scenario FRA Paremeter'''
	CLSID = IID('{9365F2E3-E085-4C23-930F-DF99569638FF}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScenarioType(self):
		'''
		Scenario type
		
		:rtype: recurdyn.ProcessNet.ScenarioType
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (3, 0), (),)


	def Update(self):
		'''
		Update method
		'''
		return self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), (),)


	def _get_AmplitudeFactor(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "AmplitudeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_AnimationFrame(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "AnimationFrame", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_IncludeDamping(self):
		return self._ApplyTypes_(*(204, 2, (11, 0), (), "IncludeDamping", None))
	def _get_LogarithmicStep(self):
		return self._ApplyTypes_(*(205, 2, (11, 0), (), "LogarithmicStep", None))
	def _get_MaxNoMode(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "MaxNoMode", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_IncludeDamping(self, value):
		if "IncludeDamping" in self.__dict__: self.__dict__["IncludeDamping"] = value; return
		self._oleobj_.Invoke(*((204, LCID, 4, 0) + (value,) + ()))
	def _set_LogarithmicStep(self, value):
		if "LogarithmicStep" in self.__dict__: self.__dict__["LogarithmicStep"] = value; return
		self._oleobj_.Invoke(*((205, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	AmplitudeFactor = property(_get_AmplitudeFactor, None)
	'''
	Amplitude Factor

	:type: recurdyn.ProcessNet.IDouble
	'''
	AnimationFrame = property(_get_AnimationFrame, None)
	'''
	Animation Frame

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	IncludeDamping = property(_get_IncludeDamping, _set_IncludeDamping)
	'''
	Include Damping

	:type: bool
	'''
	LogarithmicStep = property(_get_LogarithmicStep, _set_LogarithmicStep)
	'''
	Logarithmic Step

	:type: bool
	'''
	MaxNoMode = property(_get_MaxNoMode, None)
	'''
	Max No. Mode

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_IncludeDamping": _set_IncludeDamping,
		"_set_LogarithmicStep": _set_LogarithmicStep,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"AmplitudeFactor": (203, 2, (9, 0), (), "AmplitudeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"AnimationFrame": (202, 2, (9, 0), (), "AnimationFrame", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"IncludeDamping": (204, 2, (11, 0), (), "IncludeDamping", None),
		"LogarithmicStep": (205, 2, (11, 0), (), "LogarithmicStep", None),
		"MaxNoMode": (201, 2, (9, 0), (), "MaxNoMode", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"IncludeDamping": ((204, LCID, 4, 0),()),
		"LogarithmicStep": ((205, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioIntegrationADV(DispatchBaseClass):
	'''Scenario ADV Integration'''
	CLSID = IID('{B8E9A36E-121C-4225-9F0C-843F5216B394}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScenarioType(self):
		'''
		Scenario type
		
		:rtype: recurdyn.ProcessNet.ScenarioType
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (3, 0), (),)


	def Update(self):
		'''
		Update method
		'''
		return self._oleobj_.InvokeTypes(204, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ErrorTolerance(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_MaximumStepSize(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NumericalDamping(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "NumericalDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ErrorTolerance = property(_get_ErrorTolerance, None)
	'''
	Error tolerance

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	MaximumStepSize = property(_get_MaximumStepSize, None)
	'''
	Maximum step size

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NumericalDamping = property(_get_NumericalDamping, None)
	'''
	Numerical damping

	:type: recurdyn.ProcessNet.IDouble
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ErrorTolerance": (202, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"MaximumStepSize": (201, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NumericalDamping": (203, 2, (9, 0), (), "NumericalDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioIntegrationDDA(DispatchBaseClass):
	'''obsolete interface. Use IScenarioIntegrationIMG2 interface'''
	CLSID = IID('{FD461A28-C99A-4BA7-B816-260FE7E0950E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_ErrorTolerance(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaximumStepSize(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	ErrorTolerance = property(_get_ErrorTolerance, None)
	'''
	Error tolerance

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaximumStepSize = property(_get_MaximumStepSize, None)
	'''
	Maximum step size

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"ErrorTolerance": (102, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaximumStepSize": (101, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioIntegrationDDA2(DispatchBaseClass):
	'''obsolete interface. Use IScenarioIntegrationIMG2 interface'''
	CLSID = IID('{8CE8A4EC-13F2-437E-8834-FD48DB9D609A}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScenarioType(self):
		'''
		Scenario type
		
		:rtype: recurdyn.ProcessNet.ScenarioType
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (3, 0), (),)


	def Update(self):
		'''
		Update method
		'''
		return self._oleobj_.InvokeTypes(203, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ErrorTolerance(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_MaximumStepSize(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ErrorTolerance = property(_get_ErrorTolerance, None)
	'''
	Error tolerance

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	MaximumStepSize = property(_get_MaximumStepSize, None)
	'''
	Maximum step size

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ErrorTolerance": (202, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"MaximumStepSize": (201, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioIntegrationHYB(DispatchBaseClass):
	'''Scenario HYB Integration'''
	CLSID = IID('{879C1DAE-86EC-47C7-81C0-B02F3628F46F}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_ErrorTolerance(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaximumStepSize(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_NumericalDamping(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "NumericalDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	ErrorTolerance = property(_get_ErrorTolerance, None)
	'''
	Error tolerance

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaximumStepSize = property(_get_MaximumStepSize, None)
	'''
	Maximum step size

	:type: recurdyn.ProcessNet.IDouble
	'''
	NumericalDamping = property(_get_NumericalDamping, None)
	'''
	Numerical damping

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"ErrorTolerance": (102, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaximumStepSize": (101, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"NumericalDamping": (103, 2, (9, 0), (), "NumericalDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioIntegrationHYB2(DispatchBaseClass):
	'''Scenario HYB Integration'''
	CLSID = IID('{7C151D45-EF3F-4C46-9F72-77E78BC4F5C6}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScenarioType(self):
		'''
		Scenario type
		
		:rtype: recurdyn.ProcessNet.ScenarioType
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (3, 0), (),)


	def Update(self):
		'''
		Update method
		'''
		return self._oleobj_.InvokeTypes(204, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ErrorTolerance(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_MaximumStepSize(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NumericalDamping(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "NumericalDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ErrorTolerance = property(_get_ErrorTolerance, None)
	'''
	Error tolerance

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	MaximumStepSize = property(_get_MaximumStepSize, None)
	'''
	Maximum step size

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NumericalDamping = property(_get_NumericalDamping, None)
	'''
	Numerical damping

	:type: recurdyn.ProcessNet.IDouble
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ErrorTolerance": (202, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"MaximumStepSize": (201, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NumericalDamping": (203, 2, (9, 0), (), "NumericalDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioIntegrationIMG(DispatchBaseClass):
	'''Scenario IMG Integration'''
	CLSID = IID('{2B48E9C0-40F9-48D4-AA5C-BBB99D0DD8BD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_ErrorTolerance(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaximumStepSize(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_NumericalDamping(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "NumericalDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	ErrorTolerance = property(_get_ErrorTolerance, None)
	'''
	Error tolerance

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaximumStepSize = property(_get_MaximumStepSize, None)
	'''
	Maximum step size

	:type: recurdyn.ProcessNet.IDouble
	'''
	NumericalDamping = property(_get_NumericalDamping, None)
	'''
	Numerical damping

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"ErrorTolerance": (102, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaximumStepSize": (101, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"NumericalDamping": (103, 2, (9, 0), (), "NumericalDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioIntegrationIMG2(DispatchBaseClass):
	'''Scenario IMG Integration'''
	CLSID = IID('{680EBB11-DF6A-4BB0-9F7D-24C76FB16BE1}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScenarioType(self):
		'''
		Scenario type
		
		:rtype: recurdyn.ProcessNet.ScenarioType
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (3, 0), (),)


	def Update(self):
		'''
		Update method
		'''
		return self._oleobj_.InvokeTypes(204, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ErrorTolerance(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_MaximumStepSize(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NumericalDamping(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "NumericalDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ErrorTolerance = property(_get_ErrorTolerance, None)
	'''
	Error tolerance

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	MaximumStepSize = property(_get_MaximumStepSize, None)
	'''
	Maximum step size

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NumericalDamping = property(_get_NumericalDamping, None)
	'''
	Numerical damping

	:type: recurdyn.ProcessNet.IDouble
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ErrorTolerance": (202, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"MaximumStepSize": (201, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NumericalDamping": (203, 2, (9, 0), (), "NumericalDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioIntegrationTRK(DispatchBaseClass):
	'''Scenario TRK Integration'''
	CLSID = IID('{F013ED05-BDE6-493B-B4FC-7584C250C5FC}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_ErrorTolerance(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_MaximumStepSize(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_NumericalDamping(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "NumericalDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	ErrorTolerance = property(_get_ErrorTolerance, None)
	'''
	Error tolerance

	:type: recurdyn.ProcessNet.IDouble
	'''
	MaximumStepSize = property(_get_MaximumStepSize, None)
	'''
	Maximum step size

	:type: recurdyn.ProcessNet.IDouble
	'''
	NumericalDamping = property(_get_NumericalDamping, None)
	'''
	Numerical damping

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"ErrorTolerance": (102, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"MaximumStepSize": (101, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"NumericalDamping": (103, 2, (9, 0), (), "NumericalDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioIntegrationTRK2(DispatchBaseClass):
	'''Scenario TRK Integration'''
	CLSID = IID('{E308F573-419A-4A53-8B0C-1351BACEBE4B}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScenarioType(self):
		'''
		Scenario type
		
		:rtype: recurdyn.ProcessNet.ScenarioType
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (3, 0), (),)


	def Update(self):
		'''
		Update method
		'''
		return self._oleobj_.InvokeTypes(204, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ErrorTolerance(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_MaximumStepSize(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NumericalDamping(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "NumericalDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ErrorTolerance = property(_get_ErrorTolerance, None)
	'''
	Error tolerance

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	MaximumStepSize = property(_get_MaximumStepSize, None)
	'''
	Maximum step size

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NumericalDamping = property(_get_NumericalDamping, None)
	'''
	Numerical damping

	:type: recurdyn.ProcessNet.IDouble
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ErrorTolerance": (202, 2, (9, 0), (), "ErrorTolerance", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"MaximumStepSize": (201, 2, (9, 0), (), "MaximumStepSize", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NumericalDamping": (203, 2, (9, 0), (), "NumericalDamping", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioSimulationDynamic(DispatchBaseClass):
	'''Scenario Dynamic Simulation'''
	CLSID = IID('{BB2EB111-0323-4B54-B0E9-B24757D1C5E3}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_EndTime(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "EndTime", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Step(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "Step", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	EndTime = property(_get_EndTime, None)
	'''
	End time

	:type: recurdyn.ProcessNet.IDouble
	'''
	Step = property(_get_Step, None)
	'''
	Step

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"EndTime": (101, 2, (9, 0), (), "EndTime", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Step": (102, 2, (9, 0), (), "Step", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioSimulationDynamic2(DispatchBaseClass):
	'''Scenario Dynamic Simulation'''
	CLSID = IID('{819BAA2D-0DFF-490C-A3C7-5FF91590FD1E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScenarioType(self):
		'''
		Scenario type
		
		:rtype: recurdyn.ProcessNet.ScenarioType
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (3, 0), (),)


	def Update(self):
		'''
		Update method
		'''
		return self._oleobj_.InvokeTypes(203, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_EndTime(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "EndTime", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Step(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "Step", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	EndTime = property(_get_EndTime, None)
	'''
	End time

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Step = property(_get_Step, None)
	'''
	Step

	:type: recurdyn.ProcessNet.IDouble
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"EndTime": (201, 2, (9, 0), (), "EndTime", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Step": (202, 2, (9, 0), (), "Step", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioSimulationEigenvalue(DispatchBaseClass):
	'''Scenario Eigenvalue Simulation'''
	CLSID = IID('{9D73DB69-F99F-45F5-9A29-2F8661214C67}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AmplitudeFactor(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "AmplitudeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_NoOfFrame(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "NoOfFrame", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	AmplitudeFactor = property(_get_AmplitudeFactor, None)
	'''
	End time

	:type: recurdyn.ProcessNet.IDouble
	'''
	NoOfFrame = property(_get_NoOfFrame, None)
	'''
	Step

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"AmplitudeFactor": (101, 2, (9, 0), (), "AmplitudeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"NoOfFrame": (102, 2, (9, 0), (), "NoOfFrame", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioSimulationEigenvalue2(DispatchBaseClass):
	'''Scenario Eigenvalue Simulation'''
	CLSID = IID('{26550F0C-C58A-41CD-9A52-4EC1448C3E91}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScenarioType(self):
		'''
		Scenario type
		
		:rtype: recurdyn.ProcessNet.ScenarioType
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (3, 0), (),)


	def Update(self):
		'''
		Update method
		'''
		return self._oleobj_.InvokeTypes(203, LCID, 1, (24, 0), (),)


	def _get_AmplitudeFactor(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "AmplitudeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NoOfFrame(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "NoOfFrame", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	AmplitudeFactor = property(_get_AmplitudeFactor, None)
	'''
	End time

	:type: recurdyn.ProcessNet.IDouble
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NoOfFrame = property(_get_NoOfFrame, None)
	'''
	Step

	:type: recurdyn.ProcessNet.IDouble
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"AmplitudeFactor": (201, 2, (9, 0), (), "AmplitudeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NoOfFrame": (202, 2, (9, 0), (), "NoOfFrame", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioSimulationFrequencyResponse(DispatchBaseClass):
	'''Scenario Frequency Response Simulation'''
	CLSID = IID('{0F8B6060-98A3-4734-968D-FE9919D96B20}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_FreqEnd(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "FreqEnd", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FreqStart(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "FreqStart", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FreqStep(self):
		return self._ApplyTypes_(*(103, 2, (9, 0), (), "FreqStep", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	FreqEnd = property(_get_FreqEnd, None)
	'''
	End frequency

	:type: recurdyn.ProcessNet.IDouble
	'''
	FreqStart = property(_get_FreqStart, None)
	'''
	Start frequency

	:type: recurdyn.ProcessNet.IDouble
	'''
	FreqStep = property(_get_FreqStep, None)
	'''
	Frequency step

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"FreqEnd": (102, 2, (9, 0), (), "FreqEnd", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FreqStart": (101, 2, (9, 0), (), "FreqStart", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FreqStep": (103, 2, (9, 0), (), "FreqStep", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioSimulationFrequencyResponse2(DispatchBaseClass):
	'''Scenario Frequency Response Simulation'''
	CLSID = IID('{1DFB8E58-D3D2-4D57-B10D-304E10FA9CCD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScenarioType(self):
		'''
		Scenario type
		
		:rtype: recurdyn.ProcessNet.ScenarioType
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (3, 0), (),)


	def Update(self):
		'''
		Update method
		'''
		return self._oleobj_.InvokeTypes(204, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FreqEnd(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "FreqEnd", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FreqStart(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "FreqStart", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FreqStep(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "FreqStep", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FreqEnd = property(_get_FreqEnd, None)
	'''
	End frequency

	:type: recurdyn.ProcessNet.IDouble
	'''
	FreqStart = property(_get_FreqStart, None)
	'''
	Start frequency

	:type: recurdyn.ProcessNet.IDouble
	'''
	FreqStep = property(_get_FreqStep, None)
	'''
	Frequency step

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FreqEnd": (202, 2, (9, 0), (), "FreqEnd", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FreqStart": (201, 2, (9, 0), (), "FreqStart", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FreqStep": (203, 2, (9, 0), (), "FreqStep", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioSimulationStatic(DispatchBaseClass):
	'''Scenario Static Simulation'''
	CLSID = IID('{703335D3-4FFB-4973-B3CC-F2150716A970}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_EndTime(self):
		return self._ApplyTypes_(*(101, 2, (9, 0), (), "EndTime", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Step(self):
		return self._ApplyTypes_(*(102, 2, (9, 0), (), "Step", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	EndTime = property(_get_EndTime, None)
	'''
	End time

	:type: recurdyn.ProcessNet.IDouble
	'''
	Step = property(_get_Step, None)
	'''
	Step

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"EndTime": (101, 2, (9, 0), (), "EndTime", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Step": (102, 2, (9, 0), (), "Step", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScenarioSimulationStatic2(DispatchBaseClass):
	'''Scenario Static Simulation'''
	CLSID = IID('{22898563-4CD6-4D2F-9862-05006C178494}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def GetScenarioType(self):
		'''
		Scenario type
		
		:rtype: recurdyn.ProcessNet.ScenarioType
		'''
		return self._oleobj_.InvokeTypes(151, LCID, 1, (3, 0), (),)


	def Update(self):
		'''
		Update method
		'''
		return self._oleobj_.InvokeTypes(203, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_EndTime(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "EndTime", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Step(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "Step", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	EndTime = property(_get_EndTime, None)
	'''
	End time

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Step = property(_get_Step, None)
	'''
	Step

	:type: recurdyn.ProcessNet.IDouble
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"EndTime": (201, 2, (9, 0), (), "EndTime", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Step": (202, 2, (9, 0), (), "Step", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScope(DispatchBaseClass):
	'''Scope'''
	CLSID = IID('{586914A9-8C8A-42ED-8202-DF1CC8BFE47B}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddDataToPlot(self):
		'''
		Add data to plot document
		'''
		return self._oleobj_.InvokeTypes(152, LCID, 1, (24, 0), (),)


	def AddDataToPlot2(self):
		'''
		Add data to plot document
		
		:rtype: list[int]
		'''
		return self._ApplyTypes_(154, 1, (8195, 0), (), 'AddDataToPlot2', None,)


	def GetPlotData(self):
		'''
		Get plot data
		
		:rtype: list[float]
		'''
		return self._ApplyTypes_(153, 1, (8197, 0), (), 'GetPlotData', None,)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_Visible(self):
		return self._ApplyTypes_(*(151, 2, (11, 0), (), "Visible", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_Visible(self, value):
		if "Visible" in self.__dict__: self.__dict__["Visible"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	Visible = property(_get_Visible, _set_Visible)
	'''
	Visible

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
		"_set_Visible": _set_Visible,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"Visible": (151, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"Visible": ((151, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScopeAngle(DispatchBaseClass):
	'''Scope angle'''
	CLSID = IID('{1448FE04-1A3C-495A-8944-98789C61326C}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddDataToPlot(self):
		'''
		Add data to plot document
		'''
		return self._oleobj_.InvokeTypes(152, LCID, 1, (24, 0), (),)


	def AddDataToPlot2(self):
		'''
		Add data to plot document
		
		:rtype: list[int]
		'''
		return self._ApplyTypes_(154, 1, (8195, 0), (), 'AddDataToPlot2', None,)


	def GetPlotData(self):
		'''
		Get plot data
		
		:rtype: list[float]
		'''
		return self._ApplyTypes_(153, 1, (8197, 0), (), 'GetPlotData', None,)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_CenterMarker(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "CenterMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_EndMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "EndMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_StartMarker(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "StartMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_Visible(self):
		return self._ApplyTypes_(*(151, 2, (11, 0), (), "Visible", None))

	def _set_CenterMarker(self, value):
		if "CenterMarker" in self.__dict__: self.__dict__["CenterMarker"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_EndMarker(self, value):
		if "EndMarker" in self.__dict__: self.__dict__["EndMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_StartMarker(self, value):
		if "StartMarker" in self.__dict__: self.__dict__["StartMarker"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_Visible(self, value):
		if "Visible" in self.__dict__: self.__dict__["Visible"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))

	CenterMarker = property(_get_CenterMarker, _set_CenterMarker)
	'''
	Center marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	EndMarker = property(_get_EndMarker, _set_EndMarker)
	'''
	End marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	StartMarker = property(_get_StartMarker, _set_StartMarker)
	'''
	Start marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	Visible = property(_get_Visible, _set_Visible)
	'''
	Visible

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_CenterMarker": _set_CenterMarker,
		"_set_Comment": _set_Comment,
		"_set_EndMarker": _set_EndMarker,
		"_set_Name": _set_Name,
		"_set_StartMarker": _set_StartMarker,
		"_set_UserData": _set_UserData,
		"_set_Visible": _set_Visible,
	}
	_prop_map_get_ = {
		"CenterMarker": (202, 2, (9, 0), (), "CenterMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"EndMarker": (203, 2, (9, 0), (), "EndMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"StartMarker": (201, 2, (9, 0), (), "StartMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"Visible": (151, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"CenterMarker": ((202, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"EndMarker": ((203, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"StartMarker": ((201, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"Visible": ((151, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScopeCollection(DispatchBaseClass):
	'''IScopeCollection'''
	CLSID = IID('{65267578-7015-4BB5-BB65-F5F81CCEA24A}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IScope
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{586914A9-8C8A-42ED-8202-DF1CC8BFE47B}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IScope
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{586914A9-8C8A-42ED-8202-DF1CC8BFE47B}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{586914A9-8C8A-42ED-8202-DF1CC8BFE47B}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{586914A9-8C8A-42ED-8202-DF1CC8BFE47B}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IScopeEntity(DispatchBaseClass):
	'''Scope entity'''
	CLSID = IID('{45D6BAEA-6C9A-4878-9F5D-F0AE79A1EE31}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddDataToPlot(self):
		'''
		Add data to plot document
		'''
		return self._oleobj_.InvokeTypes(152, LCID, 1, (24, 0), (),)


	def AddDataToPlot2(self):
		'''
		Add data to plot document
		
		:rtype: list[int]
		'''
		return self._ApplyTypes_(154, 1, (8195, 0), (), 'AddDataToPlot2', None,)


	def GetPlotData(self):
		'''
		Get plot data
		
		:rtype: list[float]
		'''
		return self._ApplyTypes_(153, 1, (8197, 0), (), 'GetPlotData', None,)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Component(self):
		return self._ApplyTypes_(*(206, 2, (8, 0), (), "Component", None))
	def _get_ComponentList(self):
		return self._ApplyTypes_(*(205, 2, (8200, 0), (), "ComponentList", None))
	def _get_Entity(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NodeID(self):
		return self._ApplyTypes_(*(204, 2, (3, 0), (), "NodeID", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Type(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "Type", '{6239B5E4-2791-4C62-B9F4-F6333EEDDC3F}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_Visible(self):
		return self._ApplyTypes_(*(151, 2, (11, 0), (), "Visible", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Component(self, value):
		if "Component" in self.__dict__: self.__dict__["Component"] = value; return
		self._oleobj_.Invoke(*((206, LCID, 4, 0) + (value,) + ()))
	def _set_Entity(self, value):
		if "Entity" in self.__dict__: self.__dict__["Entity"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_RefMarker(self, value):
		if "RefMarker" in self.__dict__: self.__dict__["RefMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_Type(self, value):
		if "Type" in self.__dict__: self.__dict__["Type"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_Visible(self, value):
		if "Visible" in self.__dict__: self.__dict__["Visible"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Component = property(_get_Component, _set_Component)
	'''
	Scope entity Component

	:type: str
	'''
	ComponentList = property(_get_ComponentList, None)
	'''
	Component list

	:type: list[str]
	'''
	Entity = property(_get_Entity, _set_Entity)
	'''
	Entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NodeID = property(_get_NodeID, None)
	'''
	Node ID

	:type: int
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefMarker = property(_get_RefMarker, _set_RefMarker)
	'''
	Reference marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Type = property(_get_Type, _set_Type)
	'''
	Scope entity type

	:type: recurdyn.ProcessNet.ScopeEntityType
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	Visible = property(_get_Visible, _set_Visible)
	'''
	Visible

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Component": _set_Component,
		"_set_Entity": _set_Entity,
		"_set_Name": _set_Name,
		"_set_RefMarker": _set_RefMarker,
		"_set_Type": _set_Type,
		"_set_UserData": _set_UserData,
		"_set_Visible": _set_Visible,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Component": (206, 2, (8, 0), (), "Component", None),
		"ComponentList": (205, 2, (8200, 0), (), "ComponentList", None),
		"Entity": (202, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NodeID": (204, 2, (3, 0), (), "NodeID", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefMarker": (203, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Type": (201, 2, (3, 0), (), "Type", '{6239B5E4-2791-4C62-B9F4-F6333EEDDC3F}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"Visible": (151, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Component": ((206, LCID, 4, 0),()),
		"Entity": ((202, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"RefMarker": ((203, LCID, 4, 0),()),
		"Type": ((201, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"Visible": ((151, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScopeExpression(DispatchBaseClass):
	'''Scope expression'''
	CLSID = IID('{7B3C335F-849F-4A18-BE0E-BDE3BACFA0EE}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddDataToPlot(self):
		'''
		Add data to plot document
		'''
		return self._oleobj_.InvokeTypes(152, LCID, 1, (24, 0), (),)


	def AddDataToPlot2(self):
		'''
		Add data to plot document
		
		:rtype: list[int]
		'''
		return self._ApplyTypes_(154, 1, (8195, 0), (), 'AddDataToPlot2', None,)


	def GetPlotData(self):
		'''
		Get plot data
		
		:rtype: list[float]
		'''
		return self._ApplyTypes_(153, 1, (8197, 0), (), 'GetPlotData', None,)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Expression(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_Visible(self):
		return self._ApplyTypes_(*(151, 2, (11, 0), (), "Visible", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Expression(self, value):
		if "Expression" in self.__dict__: self.__dict__["Expression"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_Visible(self, value):
		if "Visible" in self.__dict__: self.__dict__["Visible"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Expression = property(_get_Expression, _set_Expression)
	'''
	Expression

	:type: recurdyn.ProcessNet.IExpression
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	Visible = property(_get_Visible, _set_Visible)
	'''
	Visible

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Expression": _set_Expression,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
		"_set_Visible": _set_Visible,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Expression": (201, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"Visible": (151, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Expression": ((201, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"Visible": ((151, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScopeGapInterference(DispatchBaseClass):
	'''Scope Gap or Interference'''
	CLSID = IID('{1DD425A8-DC9F-4E7C-94CF-A3D1F90D8A75}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddDataToPlot(self):
		'''
		Add data to plot document
		'''
		return self._oleobj_.InvokeTypes(152, LCID, 1, (24, 0), (),)


	def AddDataToPlot2(self):
		'''
		Add data to plot document
		
		:rtype: list[int]
		'''
		return self._ApplyTypes_(154, 1, (8195, 0), (), 'AddDataToPlot2', None,)


	def GetPlotData(self):
		'''
		Get plot data
		
		:rtype: list[float]
		'''
		return self._ApplyTypes_(153, 1, (8197, 0), (), 'GetPlotData', None,)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionGeometry(self):
		return self._ApplyTypes_(*(202, 2, (9, 0), (), "ActionGeometry", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_BaseGeometry(self):
		return self._ApplyTypes_(*(201, 2, (9, 0), (), "BaseGeometry", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Type(self):
		return self._ApplyTypes_(*(203, 2, (3, 0), (), "Type", '{E419FAFA-B044-4EC0-86A2-C7854943AA55}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_Visible(self):
		return self._ApplyTypes_(*(151, 2, (11, 0), (), "Visible", None))

	def _set_ActionGeometry(self, value):
		if "ActionGeometry" in self.__dict__: self.__dict__["ActionGeometry"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_BaseGeometry(self, value):
		if "BaseGeometry" in self.__dict__: self.__dict__["BaseGeometry"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_Type(self, value):
		if "Type" in self.__dict__: self.__dict__["Type"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_Visible(self, value):
		if "Visible" in self.__dict__: self.__dict__["Visible"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))

	ActionGeometry = property(_get_ActionGeometry, _set_ActionGeometry)
	'''
	Action Geometry

	:type: recurdyn.ProcessNet.IGeometry
	'''
	BaseGeometry = property(_get_BaseGeometry, _set_BaseGeometry)
	'''
	Base Geometry

	:type: recurdyn.ProcessNet.IGeometry
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Type = property(_get_Type, _set_Type)
	'''
	Scope type

	:type: recurdyn.ProcessNet.ScopeGapInterferenceType
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	Visible = property(_get_Visible, _set_Visible)
	'''
	Visible

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_ActionGeometry": _set_ActionGeometry,
		"_set_BaseGeometry": _set_BaseGeometry,
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_Type": _set_Type,
		"_set_UserData": _set_UserData,
		"_set_Visible": _set_Visible,
	}
	_prop_map_get_ = {
		"ActionGeometry": (202, 2, (9, 0), (), "ActionGeometry", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"BaseGeometry": (201, 2, (9, 0), (), "BaseGeometry", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Type": (203, 2, (3, 0), (), "Type", '{E419FAFA-B044-4EC0-86A2-C7854943AA55}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"Visible": (151, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"ActionGeometry": ((202, LCID, 4, 0),()),
		"BaseGeometry": ((201, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"Type": ((203, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"Visible": ((151, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IScopePointToPoint(DispatchBaseClass):
	'''Scope point to point'''
	CLSID = IID('{1814A992-158F-4A63-A3E6-1E69A1587342}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddDataToPlot(self):
		'''
		Add data to plot document
		'''
		return self._oleobj_.InvokeTypes(152, LCID, 1, (24, 0), (),)


	def AddDataToPlot2(self):
		'''
		Add data to plot document
		
		:rtype: list[int]
		'''
		return self._ApplyTypes_(154, 1, (8195, 0), (), 'AddDataToPlot2', None,)


	def GetPlotData(self):
		'''
		Get plot data
		
		:rtype: list[float]
		'''
		return self._ApplyTypes_(153, 1, (8197, 0), (), 'GetPlotData', None,)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_ActionMarker(self):
		return self._ApplyTypes_(*(203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_BaseMarker(self):
		return self._ApplyTypes_(*(204, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ComponentType(self):
		return self._ApplyTypes_(*(202, 2, (3, 0), (), "ComponentType", '{9B9C7C25-9C1B-4043-94A3-E195D1D5895E}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefMarker(self):
		return self._ApplyTypes_(*(205, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_Type(self):
		return self._ApplyTypes_(*(201, 2, (3, 0), (), "Type", '{106FA94C-210E-47A8-911D-6D204E299B26}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_Visible(self):
		return self._ApplyTypes_(*(151, 2, (11, 0), (), "Visible", None))

	def _set_ActionMarker(self, value):
		if "ActionMarker" in self.__dict__: self.__dict__["ActionMarker"] = value; return
		self._oleobj_.Invoke(*((203, LCID, 4, 0) + (value,) + ()))
	def _set_BaseMarker(self, value):
		if "BaseMarker" in self.__dict__: self.__dict__["BaseMarker"] = value; return
		self._oleobj_.Invoke(*((204, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_ComponentType(self, value):
		if "ComponentType" in self.__dict__: self.__dict__["ComponentType"] = value; return
		self._oleobj_.Invoke(*((202, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_RefMarker(self, value):
		if "RefMarker" in self.__dict__: self.__dict__["RefMarker"] = value; return
		self._oleobj_.Invoke(*((205, LCID, 4, 0) + (value,) + ()))
	def _set_Type(self, value):
		if "Type" in self.__dict__: self.__dict__["Type"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_Visible(self, value):
		if "Visible" in self.__dict__: self.__dict__["Visible"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))

	ActionMarker = property(_get_ActionMarker, _set_ActionMarker)
	'''
	Action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	BaseMarker = property(_get_BaseMarker, _set_BaseMarker)
	'''
	Base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ComponentType = property(_get_ComponentType, _set_ComponentType)
	'''
	Component type

	:type: recurdyn.ProcessNet.ScopePointToPointComponentType
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefMarker = property(_get_RefMarker, _set_RefMarker)
	'''
	Reference marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	Type = property(_get_Type, _set_Type)
	'''
	Scope point to point type

	:type: recurdyn.ProcessNet.ScopePointToPointType
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	Visible = property(_get_Visible, _set_Visible)
	'''
	Visible

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_ActionMarker": _set_ActionMarker,
		"_set_BaseMarker": _set_BaseMarker,
		"_set_Comment": _set_Comment,
		"_set_ComponentType": _set_ComponentType,
		"_set_Name": _set_Name,
		"_set_RefMarker": _set_RefMarker,
		"_set_Type": _set_Type,
		"_set_UserData": _set_UserData,
		"_set_Visible": _set_Visible,
	}
	_prop_map_get_ = {
		"ActionMarker": (203, 2, (9, 0), (), "ActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"BaseMarker": (204, 2, (9, 0), (), "BaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ComponentType": (202, 2, (3, 0), (), "ComponentType", '{9B9C7C25-9C1B-4043-94A3-E195D1D5895E}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefMarker": (205, 2, (9, 0), (), "RefMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"Type": (201, 2, (3, 0), (), "Type", '{106FA94C-210E-47A8-911D-6D204E299B26}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"Visible": (151, 2, (11, 0), (), "Visible", None),
	}
	_prop_map_put_ = {
		"ActionMarker": ((203, LCID, 4, 0),()),
		"BaseMarker": ((204, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"ComponentType": ((202, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"RefMarker": ((205, LCID, 4, 0),()),
		"Type": ((201, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"Visible": ((151, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ISensor(DispatchBaseClass):
	'''Sensor'''
	CLSID = IID('{6D4E47C0-B7BC-4559-9CA0-25B0C957AFAC}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Color(self):
		return self._ApplyTypes_(*(201, 2, (19, 0), (), "Color", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Depth(self):
		return self._ApplyTypes_(*(209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NormalDirection(self):
		return self._ApplyTypes_(*(208, 2, (8197, 0), (), "NormalDirection", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UseDepthInformation(self):
		return self._ApplyTypes_(*(207, 2, (11, 0), (), "UseDepthInformation", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_NormalDirection(self, value):
		if "NormalDirection" in self.__dict__: self.__dict__["NormalDirection"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (variantValue,) + ()))
	def _set_UseDepthInformation(self, value):
		if "UseDepthInformation" in self.__dict__: self.__dict__["UseDepthInformation"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Color = property(_get_Color, _set_Color)
	'''
	Graphic color of sensor

	:type: int
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Depth = property(_get_Depth, None)
	'''
	Depth

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NormalDirection = property(_get_NormalDirection, _set_NormalDirection)
	'''
	NormalDirection

	:type: list[float]
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UseDepthInformation = property(_get_UseDepthInformation, _set_UseDepthInformation)
	'''
	UseDepthInformation

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Color": _set_Color,
		"_set_Comment": _set_Comment,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_NormalDirection": _set_NormalDirection,
		"_set_UseDepthInformation": _set_UseDepthInformation,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Color": (201, 2, (19, 0), (), "Color", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Depth": (209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NormalDirection": (208, 2, (8197, 0), (), "NormalDirection", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UseDepthInformation": (207, 2, (11, 0), (), "UseDepthInformation", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Color": ((201, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"NormalDirection": ((208, LCID, 4, 0),()),
		"UseDepthInformation": ((207, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ISensorCollection(DispatchBaseClass):
	'''ISensorCollection'''
	CLSID = IID('{507862D8-28C1-423F-9D91-7BE66F10A6DF}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.ISensor
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{6D4E47C0-B7BC-4559-9CA0-25B0C957AFAC}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.ISensor
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{6D4E47C0-B7BC-4559-9CA0-25B0C957AFAC}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{6D4E47C0-B7BC-4559-9CA0-25B0C957AFAC}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{6D4E47C0-B7BC-4559-9CA0-25B0C957AFAC}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISensorDisplacement(DispatchBaseClass):
	'''Sensor displacement'''
	CLSID = IID('{08F5AF0B-ADB1-4AB4-8FAB-54ADCB9B5F36}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Color(self):
		return self._ApplyTypes_(*(201, 2, (19, 0), (), "Color", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Depth(self):
		return self._ApplyTypes_(*(209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Entity(self):
		return self._ApplyTypes_(*(250, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NormalDirection(self):
		return self._ApplyTypes_(*(208, 2, (8197, 0), (), "NormalDirection", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Range(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ReferenceMarker(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "ReferenceMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_SensorMarker(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "SensorMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_UseDepthInformation(self):
		return self._ApplyTypes_(*(207, 2, (11, 0), (), "UseDepthInformation", None))
	def _get_UseReferenceMarker(self):
		return self._ApplyTypes_(*(252, 2, (11, 0), (), "UseReferenceMarker", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Entity(self, value):
		if "Entity" in self.__dict__: self.__dict__["Entity"] = value; return
		self._oleobj_.Invoke(*((250, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_NormalDirection(self, value):
		if "NormalDirection" in self.__dict__: self.__dict__["NormalDirection"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (variantValue,) + ()))
	def _set_ReferenceMarker(self, value):
		if "ReferenceMarker" in self.__dict__: self.__dict__["ReferenceMarker"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_SensorMarker(self, value):
		if "SensorMarker" in self.__dict__: self.__dict__["SensorMarker"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_UseDepthInformation(self, value):
		if "UseDepthInformation" in self.__dict__: self.__dict__["UseDepthInformation"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Color = property(_get_Color, _set_Color)
	'''
	Graphic color of sensor

	:type: int
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Depth = property(_get_Depth, None)
	'''
	Depth

	:type: recurdyn.ProcessNet.IDouble
	'''
	Entity = property(_get_Entity, _set_Entity)
	'''
	Sensed entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NormalDirection = property(_get_NormalDirection, _set_NormalDirection)
	'''
	NormalDirection

	:type: list[float]
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Range = property(_get_Range, None)
	'''
	Range of sensor

	:type: recurdyn.ProcessNet.IDouble
	'''
	ReferenceMarker = property(_get_ReferenceMarker, _set_ReferenceMarker)
	'''
	Sensor marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	SensorMarker = property(_get_SensorMarker, _set_SensorMarker)
	'''
	Sensor marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	UseDepthInformation = property(_get_UseDepthInformation, _set_UseDepthInformation)
	'''
	UseDepthInformation

	:type: bool
	'''
	UseReferenceMarker = property(_get_UseReferenceMarker, None)
	'''
	Use reference marker

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Color": _set_Color,
		"_set_Comment": _set_Comment,
		"_set_Entity": _set_Entity,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_NormalDirection": _set_NormalDirection,
		"_set_ReferenceMarker": _set_ReferenceMarker,
		"_set_SensorMarker": _set_SensorMarker,
		"_set_UseDepthInformation": _set_UseDepthInformation,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Color": (201, 2, (19, 0), (), "Color", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Depth": (209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Entity": (250, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NormalDirection": (208, 2, (8197, 0), (), "NormalDirection", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Range": (254, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ReferenceMarker": (253, 2, (9, 0), (), "ReferenceMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"SensorMarker": (251, 2, (9, 0), (), "SensorMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"UseDepthInformation": (207, 2, (11, 0), (), "UseDepthInformation", None),
		"UseReferenceMarker": (252, 2, (11, 0), (), "UseReferenceMarker", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Color": ((201, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Entity": ((250, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"NormalDirection": ((208, LCID, 4, 0),()),
		"ReferenceMarker": ((253, LCID, 4, 0),()),
		"SensorMarker": ((251, LCID, 4, 0),()),
		"UseDepthInformation": ((207, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ISensorDistance(DispatchBaseClass):
	'''Sensor distance'''
	CLSID = IID('{0CC3861B-CC2A-4402-9135-C8BC804EABBD}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Color(self):
		return self._ApplyTypes_(*(201, 2, (19, 0), (), "Color", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Depth(self):
		return self._ApplyTypes_(*(209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Direction(self):
		return self._ApplyTypes_(*(255, 2, (8197, 0), (), "Direction", None))
	def _get_Entity(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MotherBody(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "MotherBody", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NormalDirection(self):
		return self._ApplyTypes_(*(208, 2, (8197, 0), (), "NormalDirection", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Position(self):
		return self._ApplyTypes_(*(253, 2, (8197, 0), (), "Position", None))
	def _get_Range(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseDepthInformation(self):
		return self._ApplyTypes_(*(207, 2, (11, 0), (), "UseDepthInformation", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Direction(self, value):
		if "Direction" in self.__dict__: self.__dict__["Direction"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Entity(self, value):
		if "Entity" in self.__dict__: self.__dict__["Entity"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_MotherBody(self, value):
		if "MotherBody" in self.__dict__: self.__dict__["MotherBody"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_NormalDirection(self, value):
		if "NormalDirection" in self.__dict__: self.__dict__["NormalDirection"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Position(self, value):
		if "Position" in self.__dict__: self.__dict__["Position"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (variantValue,) + ()))
	def _set_UseDepthInformation(self, value):
		if "UseDepthInformation" in self.__dict__: self.__dict__["UseDepthInformation"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Color = property(_get_Color, _set_Color)
	'''
	Graphic color of sensor

	:type: int
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Depth = property(_get_Depth, None)
	'''
	Depth

	:type: recurdyn.ProcessNet.IDouble
	'''
	Direction = property(_get_Direction, _set_Direction)
	'''
	Direction of sensor

	:type: list[float]
	'''
	Entity = property(_get_Entity, _set_Entity)
	'''
	Sensed entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MotherBody = property(_get_MotherBody, _set_MotherBody)
	'''
	Mother body

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NormalDirection = property(_get_NormalDirection, _set_NormalDirection)
	'''
	NormalDirection

	:type: list[float]
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Position = property(_get_Position, _set_Position)
	'''
	Center point of sensor

	:type: list[float]
	'''
	Range = property(_get_Range, None)
	'''
	Range of sensor

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseDepthInformation = property(_get_UseDepthInformation, _set_UseDepthInformation)
	'''
	UseDepthInformation

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Color": _set_Color,
		"_set_Comment": _set_Comment,
		"_set_Direction": _set_Direction,
		"_set_Entity": _set_Entity,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_MotherBody": _set_MotherBody,
		"_set_Name": _set_Name,
		"_set_NormalDirection": _set_NormalDirection,
		"_set_Position": _set_Position,
		"_set_UseDepthInformation": _set_UseDepthInformation,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Color": (201, 2, (19, 0), (), "Color", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Depth": (209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Direction": (255, 2, (8197, 0), (), "Direction", None),
		"Entity": (252, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MotherBody": (251, 2, (9, 0), (), "MotherBody", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NormalDirection": (208, 2, (8197, 0), (), "NormalDirection", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Position": (253, 2, (8197, 0), (), "Position", None),
		"Range": (254, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseDepthInformation": (207, 2, (11, 0), (), "UseDepthInformation", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Color": ((201, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Direction": ((255, LCID, 4, 0),()),
		"Entity": ((252, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"MotherBody": ((251, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"NormalDirection": ((208, LCID, 4, 0),()),
		"Position": ((253, LCID, 4, 0),()),
		"UseDepthInformation": ((207, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ISensorEvent(DispatchBaseClass):
	'''Sensor event'''
	CLSID = IID('{FB0F1AE7-3A1E-4326-B1BF-8225DA2BF11E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddMarker(self, pVal):
		'''
		Add a marker
		
		:param pVal: IMarker
		'''
		return self._oleobj_.InvokeTypes(258, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def DeleteMarker(self, pVal):
		'''
		Delete a marker
		
		:param pVal: IMarker
		'''
		return self._oleobj_.InvokeTypes(259, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def Markers(self):
		'''
		Markers collection
		
		:rtype: recurdyn.ProcessNet.IMarkerCollection
		'''
		ret = self._oleobj_.InvokeTypes(260, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'Markers', '{6BEF9B6B-4708-445E-A3B5-0D65BA69F748}')
		return ret

	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Color(self):
		return self._ApplyTypes_(*(201, 2, (19, 0), (), "Color", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Depth(self):
		return self._ApplyTypes_(*(209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Entity(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Marker(self):
		return self._ApplyTypes_(*(257, 2, (9, 0), (), "Marker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_MotherBody(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "MotherBody", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NormalDirection(self):
		return self._ApplyTypes_(*(208, 2, (8197, 0), (), "NormalDirection", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Position(self):
		return self._ApplyTypes_(*(253, 2, (8197, 0), (), "Position", None))
	def _get_Range(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Type(self):
		return self._ApplyTypes_(*(255, 2, (3, 0), (), "Type", '{3D748E59-2352-4DAF-BB28-523AFB1C9F67}'))
	def _get_UseDepthInformation(self):
		return self._ApplyTypes_(*(207, 2, (11, 0), (), "UseDepthInformation", None))
	def _get_UseMarker(self):
		return self._ApplyTypes_(*(256, 2, (11, 0), (), "UseMarker", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Entity(self, value):
		if "Entity" in self.__dict__: self.__dict__["Entity"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Marker(self, value):
		if "Marker" in self.__dict__: self.__dict__["Marker"] = value; return
		self._oleobj_.Invoke(*((257, LCID, 4, 0) + (value,) + ()))
	def _set_MotherBody(self, value):
		if "MotherBody" in self.__dict__: self.__dict__["MotherBody"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_NormalDirection(self, value):
		if "NormalDirection" in self.__dict__: self.__dict__["NormalDirection"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Position(self, value):
		if "Position" in self.__dict__: self.__dict__["Position"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Type(self, value):
		if "Type" in self.__dict__: self.__dict__["Type"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_UseDepthInformation(self, value):
		if "UseDepthInformation" in self.__dict__: self.__dict__["UseDepthInformation"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_UseMarker(self, value):
		if "UseMarker" in self.__dict__: self.__dict__["UseMarker"] = value; return
		self._oleobj_.Invoke(*((256, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Color = property(_get_Color, _set_Color)
	'''
	Graphic color of sensor

	:type: int
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Depth = property(_get_Depth, None)
	'''
	Depth

	:type: recurdyn.ProcessNet.IDouble
	'''
	Entity = property(_get_Entity, _set_Entity)
	'''
	Sensed entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Marker = property(_get_Marker, _set_Marker)
	'''
	Marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	MotherBody = property(_get_MotherBody, _set_MotherBody)
	'''
	Mother body

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NormalDirection = property(_get_NormalDirection, _set_NormalDirection)
	'''
	NormalDirection

	:type: list[float]
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Position = property(_get_Position, _set_Position)
	'''
	Center point of sensor

	:type: list[float]
	'''
	Range = property(_get_Range, None)
	'''
	Range of sensor

	:type: recurdyn.ProcessNet.IDouble
	'''
	Type = property(_get_Type, _set_Type)
	'''
	Type

	:type: recurdyn.ProcessNet.SensorEventType
	'''
	UseDepthInformation = property(_get_UseDepthInformation, _set_UseDepthInformation)
	'''
	UseDepthInformation

	:type: bool
	'''
	UseMarker = property(_get_UseMarker, _set_UseMarker)
	'''
	Use marker

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Color": _set_Color,
		"_set_Comment": _set_Comment,
		"_set_Entity": _set_Entity,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Marker": _set_Marker,
		"_set_MotherBody": _set_MotherBody,
		"_set_Name": _set_Name,
		"_set_NormalDirection": _set_NormalDirection,
		"_set_Position": _set_Position,
		"_set_Type": _set_Type,
		"_set_UseDepthInformation": _set_UseDepthInformation,
		"_set_UseMarker": _set_UseMarker,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Color": (201, 2, (19, 0), (), "Color", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Depth": (209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Entity": (252, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Marker": (257, 2, (9, 0), (), "Marker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"MotherBody": (251, 2, (9, 0), (), "MotherBody", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NormalDirection": (208, 2, (8197, 0), (), "NormalDirection", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Position": (253, 2, (8197, 0), (), "Position", None),
		"Range": (254, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Type": (255, 2, (3, 0), (), "Type", '{3D748E59-2352-4DAF-BB28-523AFB1C9F67}'),
		"UseDepthInformation": (207, 2, (11, 0), (), "UseDepthInformation", None),
		"UseMarker": (256, 2, (11, 0), (), "UseMarker", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Color": ((201, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Entity": ((252, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Marker": ((257, LCID, 4, 0),()),
		"MotherBody": ((251, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"NormalDirection": ((208, LCID, 4, 0),()),
		"Position": ((253, LCID, 4, 0),()),
		"Type": ((255, LCID, 4, 0),()),
		"UseDepthInformation": ((207, LCID, 4, 0),()),
		"UseMarker": ((256, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ISensorLaser(DispatchBaseClass):
	'''Sensor Laser'''
	CLSID = IID('{BFB1489A-2BE8-4AE0-833F-21B119D4260C}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Color(self):
		return self._ApplyTypes_(*(201, 2, (19, 0), (), "Color", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Depth(self):
		return self._ApplyTypes_(*(209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NormalDirection(self):
		return self._ApplyTypes_(*(208, 2, (8197, 0), (), "NormalDirection", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Range(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SensorMarker(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "SensorMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_TargetGeometry(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "TargetGeometry", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'))
	def _get_TargetPatchOption(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "TargetPatchOption", '{D479C190-172F-42AC-A4B9-5B3AFE1EB81B}'))
	def _get_UseDepthInformation(self):
		return self._ApplyTypes_(*(207, 2, (11, 0), (), "UseDepthInformation", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_NormalDirection(self, value):
		if "NormalDirection" in self.__dict__: self.__dict__["NormalDirection"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (variantValue,) + ()))
	def _set_SensorMarker(self, value):
		if "SensorMarker" in self.__dict__: self.__dict__["SensorMarker"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_TargetGeometry(self, value):
		if "TargetGeometry" in self.__dict__: self.__dict__["TargetGeometry"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_UseDepthInformation(self, value):
		if "UseDepthInformation" in self.__dict__: self.__dict__["UseDepthInformation"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Color = property(_get_Color, _set_Color)
	'''
	Graphic color of sensor

	:type: int
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Depth = property(_get_Depth, None)
	'''
	Depth

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NormalDirection = property(_get_NormalDirection, _set_NormalDirection)
	'''
	NormalDirection

	:type: list[float]
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Range = property(_get_Range, None)
	'''
	Range of sensor

	:type: recurdyn.ProcessNet.IDouble
	'''
	SensorMarker = property(_get_SensorMarker, _set_SensorMarker)
	'''
	Sensor marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	TargetGeometry = property(_get_TargetGeometry, _set_TargetGeometry)
	'''
	Target geometry

	:type: recurdyn.ProcessNet.IGeometry
	'''
	TargetPatchOption = property(_get_TargetPatchOption, None)
	'''
	Patch option of target geometry

	:type: recurdyn.ProcessNet.IContactSolidPatchOption
	'''
	UseDepthInformation = property(_get_UseDepthInformation, _set_UseDepthInformation)
	'''
	UseDepthInformation

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Color": _set_Color,
		"_set_Comment": _set_Comment,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_NormalDirection": _set_NormalDirection,
		"_set_SensorMarker": _set_SensorMarker,
		"_set_TargetGeometry": _set_TargetGeometry,
		"_set_UseDepthInformation": _set_UseDepthInformation,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Color": (201, 2, (19, 0), (), "Color", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Depth": (209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NormalDirection": (208, 2, (8197, 0), (), "NormalDirection", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Range": (255, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SensorMarker": (251, 2, (9, 0), (), "SensorMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"TargetGeometry": (253, 2, (9, 0), (), "TargetGeometry", '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}'),
		"TargetPatchOption": (254, 2, (9, 0), (), "TargetPatchOption", '{D479C190-172F-42AC-A4B9-5B3AFE1EB81B}'),
		"UseDepthInformation": (207, 2, (11, 0), (), "UseDepthInformation", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Color": ((201, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"NormalDirection": ((208, LCID, 4, 0),()),
		"SensorMarker": ((251, LCID, 4, 0),()),
		"TargetGeometry": ((253, LCID, 4, 0),()),
		"UseDepthInformation": ((207, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ISensorLaserEx(DispatchBaseClass):
	'''Sensor LaserEx'''
	CLSID = IID('{BD5CA94C-B210-4D55-BB8C-438744A1E3EB}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddEntity(self, pVal):
		'''
		Add a geometry or patch set
		
		:param pVal: IGeneric
		'''
		return self._oleobj_.InvokeTypes(255, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def DeleteAllEntities(self):
		'''
		Delete all target geometries or patch sets
		'''
		return self._oleobj_.InvokeTypes(257, LCID, 1, (24, 0), (),)


	def DeleteEntity(self, pVal):
		'''
		Delete a geometry or patch set
		
		:param pVal: IGeneric
		'''
		return self._oleobj_.InvokeTypes(256, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def TargetEntities(self):
		'''
		Target entities collection
		
		:rtype: recurdyn.ProcessNet.IGenericCollection
		'''
		ret = self._oleobj_.InvokeTypes(258, LCID, 1, (9, 0), (),)
		if ret is not None:
			ret = Dispatch(ret, 'TargetEntities', '{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')
		return ret

	def TargetPatchOption(self, pVal):
		'''
		Sensor patch option of the target entity
		
		:param pVal: IGeneric
		:rtype: recurdyn.ProcessNet.ISensorPatchOption
		'''
		ret = self._oleobj_.InvokeTypes(259, LCID, 1, (9, 0), ((9, 1),),pVal
			)
		if ret is not None:
			ret = Dispatch(ret, 'TargetPatchOption', '{09917A88-72B3-47A8-98CD-679E220D7F78}')
		return ret

	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Color(self):
		return self._ApplyTypes_(*(201, 2, (19, 0), (), "Color", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Depth(self):
		return self._ApplyTypes_(*(209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NormalDirection(self):
		return self._ApplyTypes_(*(208, 2, (8197, 0), (), "NormalDirection", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Range(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SensorMarker(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "SensorMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_UseDepthInformation(self):
		return self._ApplyTypes_(*(207, 2, (11, 0), (), "UseDepthInformation", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_NormalDirection(self, value):
		if "NormalDirection" in self.__dict__: self.__dict__["NormalDirection"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (variantValue,) + ()))
	def _set_SensorMarker(self, value):
		if "SensorMarker" in self.__dict__: self.__dict__["SensorMarker"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_UseDepthInformation(self, value):
		if "UseDepthInformation" in self.__dict__: self.__dict__["UseDepthInformation"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Color = property(_get_Color, _set_Color)
	'''
	Graphic color of sensor

	:type: int
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Depth = property(_get_Depth, None)
	'''
	Depth

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NormalDirection = property(_get_NormalDirection, _set_NormalDirection)
	'''
	NormalDirection

	:type: list[float]
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Range = property(_get_Range, None)
	'''
	Range

	:type: recurdyn.ProcessNet.IDouble
	'''
	SensorMarker = property(_get_SensorMarker, _set_SensorMarker)
	'''
	Sensor marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	UseDepthInformation = property(_get_UseDepthInformation, _set_UseDepthInformation)
	'''
	UseDepthInformation

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Color": _set_Color,
		"_set_Comment": _set_Comment,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_NormalDirection": _set_NormalDirection,
		"_set_SensorMarker": _set_SensorMarker,
		"_set_UseDepthInformation": _set_UseDepthInformation,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Color": (201, 2, (19, 0), (), "Color", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Depth": (209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NormalDirection": (208, 2, (8197, 0), (), "NormalDirection", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Range": (253, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SensorMarker": (251, 2, (9, 0), (), "SensorMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"UseDepthInformation": (207, 2, (11, 0), (), "UseDepthInformation", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Color": ((201, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"NormalDirection": ((208, LCID, 4, 0),()),
		"SensorMarker": ((251, LCID, 4, 0),()),
		"UseDepthInformation": ((207, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ISensorPatchOption(DispatchBaseClass):
	'''Sensor patch option'''
	CLSID = IID('{09917A88-72B3-47A8-98CD-679E220D7F78}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_MaxFacetSizeFactor(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "MaxFacetSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_PlaneToleranceFactor(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "PlaneToleranceFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseMaxFacetSizeFactor(self):
		return self._ApplyTypes_(*(53, 2, (11, 0), (), "UseMaxFacetSizeFactor", None))
	def _get_UsePlaneToleranceFactor(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "UsePlaneToleranceFactor", None))

	def _set_UseMaxFacetSizeFactor(self, value):
		if "UseMaxFacetSizeFactor" in self.__dict__: self.__dict__["UseMaxFacetSizeFactor"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UsePlaneToleranceFactor(self, value):
		if "UsePlaneToleranceFactor" in self.__dict__: self.__dict__["UsePlaneToleranceFactor"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))

	MaxFacetSizeFactor = property(_get_MaxFacetSizeFactor, None)
	'''
	You can specify the maximum facet size factor as a value from 0 to 10. This value controls the maximum size of triangular patch length.

	:type: recurdyn.ProcessNet.IDouble
	'''
	PlaneToleranceFactor = property(_get_PlaneToleranceFactor, None)
	'''
	You can specify the plane tolerance factor as a value from 0 to 10. A smaller value produces a more refined patch.

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseMaxFacetSizeFactor = property(_get_UseMaxFacetSizeFactor, _set_UseMaxFacetSizeFactor)
	'''
	Use maximum facet size factor

	:type: bool
	'''
	UsePlaneToleranceFactor = property(_get_UsePlaneToleranceFactor, _set_UsePlaneToleranceFactor)
	'''
	Use plane tolerance factor

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_UseMaxFacetSizeFactor": _set_UseMaxFacetSizeFactor,
		"_set_UsePlaneToleranceFactor": _set_UsePlaneToleranceFactor,
	}
	_prop_map_get_ = {
		"MaxFacetSizeFactor": (54, 2, (9, 0), (), "MaxFacetSizeFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"PlaneToleranceFactor": (52, 2, (9, 0), (), "PlaneToleranceFactor", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseMaxFacetSizeFactor": (53, 2, (11, 0), (), "UseMaxFacetSizeFactor", None),
		"UsePlaneToleranceFactor": (51, 2, (11, 0), (), "UsePlaneToleranceFactor", None),
	}
	_prop_map_put_ = {
		"UseMaxFacetSizeFactor": ((53, LCID, 4, 0),()),
		"UsePlaneToleranceFactor": ((51, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ISensorPointInBox(DispatchBaseClass):
	'''Sensor PointInBox'''
	CLSID = IID('{EDFD7500-666A-4F69-AA26-194A60C955E3}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_BoxCenter(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "BoxCenter", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_BoxDepth(self):
		return self._ApplyTypes_(*(257, 2, (9, 0), (), "BoxDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BoxHeight(self):
		return self._ApplyTypes_(*(256, 2, (9, 0), (), "BoxHeight", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BoxWidth(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "BoxWidth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Color(self):
		return self._ApplyTypes_(*(201, 2, (19, 0), (), "Color", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Depth(self):
		return self._ApplyTypes_(*(209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NormalDirection(self):
		return self._ApplyTypes_(*(208, 2, (8197, 0), (), "NormalDirection", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_SensorMarker(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "SensorMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_TargetGeometry(self):
		return self._ApplyTypes_(*(253, 2, (9, 0), (), "TargetGeometry", '{7B6155CC-0035-4449-9748-DFCE0956F5D9}'))
	def _get_UseDepthInformation(self):
		return self._ApplyTypes_(*(207, 2, (11, 0), (), "UseDepthInformation", None))
	def _get_UseTargetGeometry(self):
		return self._ApplyTypes_(*(252, 2, (11, 0), (), "UseTargetGeometry", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_BoxCenter(self, value):
		if "BoxCenter" in self.__dict__: self.__dict__["BoxCenter"] = value; return
		self._oleobj_.Invoke(*((254, LCID, 4, 0) + (value,) + ()))
	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_NormalDirection(self, value):
		if "NormalDirection" in self.__dict__: self.__dict__["NormalDirection"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (variantValue,) + ()))
	def _set_SensorMarker(self, value):
		if "SensorMarker" in self.__dict__: self.__dict__["SensorMarker"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_TargetGeometry(self, value):
		if "TargetGeometry" in self.__dict__: self.__dict__["TargetGeometry"] = value; return
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (value,) + ()))
	def _set_UseDepthInformation(self, value):
		if "UseDepthInformation" in self.__dict__: self.__dict__["UseDepthInformation"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_UseTargetGeometry(self, value):
		if "UseTargetGeometry" in self.__dict__: self.__dict__["UseTargetGeometry"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	BoxCenter = property(_get_BoxCenter, _set_BoxCenter)
	'''
	If UseTargetGeometry is false, target entity will be the box at BoxCenter position with BoxWidth, BoxHeight, BoxDepth

	:type: recurdyn.ProcessNet.IMarker
	'''
	BoxDepth = property(_get_BoxDepth, None)
	'''
	Depth of box at BoxCenter

	:type: recurdyn.ProcessNet.IDouble
	'''
	BoxHeight = property(_get_BoxHeight, None)
	'''
	Height of box at BoxCenter

	:type: recurdyn.ProcessNet.IDouble
	'''
	BoxWidth = property(_get_BoxWidth, None)
	'''
	Width of box at BoxCenter

	:type: recurdyn.ProcessNet.IDouble
	'''
	Color = property(_get_Color, _set_Color)
	'''
	Graphic color of sensor

	:type: int
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Depth = property(_get_Depth, None)
	'''
	Depth

	:type: recurdyn.ProcessNet.IDouble
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NormalDirection = property(_get_NormalDirection, _set_NormalDirection)
	'''
	NormalDirection

	:type: list[float]
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	SensorMarker = property(_get_SensorMarker, _set_SensorMarker)
	'''
	Sensor marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	TargetGeometry = property(_get_TargetGeometry, _set_TargetGeometry)
	'''
	Target geometry

	:type: recurdyn.ProcessNet.IGeometryBox
	'''
	UseDepthInformation = property(_get_UseDepthInformation, _set_UseDepthInformation)
	'''
	UseDepthInformation

	:type: bool
	'''
	UseTargetGeometry = property(_get_UseTargetGeometry, _set_UseTargetGeometry)
	'''
	Use geometry

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_BoxCenter": _set_BoxCenter,
		"_set_Color": _set_Color,
		"_set_Comment": _set_Comment,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_Name": _set_Name,
		"_set_NormalDirection": _set_NormalDirection,
		"_set_SensorMarker": _set_SensorMarker,
		"_set_TargetGeometry": _set_TargetGeometry,
		"_set_UseDepthInformation": _set_UseDepthInformation,
		"_set_UseTargetGeometry": _set_UseTargetGeometry,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"BoxCenter": (254, 2, (9, 0), (), "BoxCenter", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"BoxDepth": (257, 2, (9, 0), (), "BoxDepth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BoxHeight": (256, 2, (9, 0), (), "BoxHeight", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BoxWidth": (255, 2, (9, 0), (), "BoxWidth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Color": (201, 2, (19, 0), (), "Color", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Depth": (209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NormalDirection": (208, 2, (8197, 0), (), "NormalDirection", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"SensorMarker": (251, 2, (9, 0), (), "SensorMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"TargetGeometry": (253, 2, (9, 0), (), "TargetGeometry", '{7B6155CC-0035-4449-9748-DFCE0956F5D9}'),
		"UseDepthInformation": (207, 2, (11, 0), (), "UseDepthInformation", None),
		"UseTargetGeometry": (252, 2, (11, 0), (), "UseTargetGeometry", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"BoxCenter": ((254, LCID, 4, 0),()),
		"Color": ((201, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"NormalDirection": ((208, LCID, 4, 0),()),
		"SensorMarker": ((251, LCID, 4, 0),()),
		"TargetGeometry": ((253, LCID, 4, 0),()),
		"UseDepthInformation": ((207, LCID, 4, 0),()),
		"UseTargetGeometry": ((252, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ISensorSlip(DispatchBaseClass):
	'''Sensor slip'''
	CLSID = IID('{08675B12-6A90-4082-BAED-E54382FDF107}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Color(self):
		return self._ApplyTypes_(*(201, 2, (19, 0), (), "Color", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Depth(self):
		return self._ApplyTypes_(*(209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Entity(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MotherBody(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "MotherBody", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NormalDirection(self):
		return self._ApplyTypes_(*(208, 2, (8197, 0), (), "NormalDirection", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Position(self):
		return self._ApplyTypes_(*(253, 2, (8197, 0), (), "Position", None))
	def _get_Range(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RollerBody(self):
		return self._ApplyTypes_(*(255, 2, (9, 0), (), "RollerBody", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_UseDepthInformation(self):
		return self._ApplyTypes_(*(207, 2, (11, 0), (), "UseDepthInformation", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Entity(self, value):
		if "Entity" in self.__dict__: self.__dict__["Entity"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_MotherBody(self, value):
		if "MotherBody" in self.__dict__: self.__dict__["MotherBody"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_NormalDirection(self, value):
		if "NormalDirection" in self.__dict__: self.__dict__["NormalDirection"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Position(self, value):
		if "Position" in self.__dict__: self.__dict__["Position"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (variantValue,) + ()))
	def _set_RollerBody(self, value):
		if "RollerBody" in self.__dict__: self.__dict__["RollerBody"] = value; return
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (value,) + ()))
	def _set_UseDepthInformation(self, value):
		if "UseDepthInformation" in self.__dict__: self.__dict__["UseDepthInformation"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Color = property(_get_Color, _set_Color)
	'''
	Graphic color of sensor

	:type: int
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Depth = property(_get_Depth, None)
	'''
	Depth

	:type: recurdyn.ProcessNet.IDouble
	'''
	Entity = property(_get_Entity, _set_Entity)
	'''
	Sensed entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MotherBody = property(_get_MotherBody, _set_MotherBody)
	'''
	Mother body

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NormalDirection = property(_get_NormalDirection, _set_NormalDirection)
	'''
	NormalDirection

	:type: list[float]
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Position = property(_get_Position, _set_Position)
	'''
	Center point of sensor

	:type: list[float]
	'''
	Range = property(_get_Range, None)
	'''
	Range of sensor

	:type: recurdyn.ProcessNet.IDouble
	'''
	RollerBody = property(_get_RollerBody, _set_RollerBody)
	'''
	Base entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	UseDepthInformation = property(_get_UseDepthInformation, _set_UseDepthInformation)
	'''
	UseDepthInformation

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Color": _set_Color,
		"_set_Comment": _set_Comment,
		"_set_Entity": _set_Entity,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_MotherBody": _set_MotherBody,
		"_set_Name": _set_Name,
		"_set_NormalDirection": _set_NormalDirection,
		"_set_Position": _set_Position,
		"_set_RollerBody": _set_RollerBody,
		"_set_UseDepthInformation": _set_UseDepthInformation,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Color": (201, 2, (19, 0), (), "Color", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Depth": (209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Entity": (252, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MotherBody": (251, 2, (9, 0), (), "MotherBody", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NormalDirection": (208, 2, (8197, 0), (), "NormalDirection", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Position": (253, 2, (8197, 0), (), "Position", None),
		"Range": (254, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RollerBody": (255, 2, (9, 0), (), "RollerBody", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"UseDepthInformation": (207, 2, (11, 0), (), "UseDepthInformation", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Color": ((201, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Entity": ((252, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"MotherBody": ((251, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"NormalDirection": ((208, LCID, 4, 0),()),
		"Position": ((253, LCID, 4, 0),()),
		"RollerBody": ((255, LCID, 4, 0),()),
		"UseDepthInformation": ((207, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ISensorSpeed(DispatchBaseClass):
	'''Sensor speed'''
	CLSID = IID('{CCB7E742-F0DF-4F22-A377-04AA675FD281}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Color(self):
		return self._ApplyTypes_(*(201, 2, (19, 0), (), "Color", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Depth(self):
		return self._ApplyTypes_(*(209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Direction(self):
		return self._ApplyTypes_(*(255, 2, (8197, 0), (), "Direction", None))
	def _get_Entity(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MotherBody(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "MotherBody", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NormalDirection(self):
		return self._ApplyTypes_(*(208, 2, (8197, 0), (), "NormalDirection", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Position(self):
		return self._ApplyTypes_(*(253, 2, (8197, 0), (), "Position", None))
	def _get_Range(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseDepthInformation(self):
		return self._ApplyTypes_(*(207, 2, (11, 0), (), "UseDepthInformation", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Direction(self, value):
		if "Direction" in self.__dict__: self.__dict__["Direction"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((255, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Entity(self, value):
		if "Entity" in self.__dict__: self.__dict__["Entity"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_MotherBody(self, value):
		if "MotherBody" in self.__dict__: self.__dict__["MotherBody"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_NormalDirection(self, value):
		if "NormalDirection" in self.__dict__: self.__dict__["NormalDirection"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Position(self, value):
		if "Position" in self.__dict__: self.__dict__["Position"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (variantValue,) + ()))
	def _set_UseDepthInformation(self, value):
		if "UseDepthInformation" in self.__dict__: self.__dict__["UseDepthInformation"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Color = property(_get_Color, _set_Color)
	'''
	Graphic color of sensor

	:type: int
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Depth = property(_get_Depth, None)
	'''
	Depth

	:type: recurdyn.ProcessNet.IDouble
	'''
	Direction = property(_get_Direction, _set_Direction)
	'''
	Direction of sensor

	:type: list[float]
	'''
	Entity = property(_get_Entity, _set_Entity)
	'''
	Sensed entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MotherBody = property(_get_MotherBody, _set_MotherBody)
	'''
	Mother body

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NormalDirection = property(_get_NormalDirection, _set_NormalDirection)
	'''
	NormalDirection

	:type: list[float]
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Position = property(_get_Position, _set_Position)
	'''
	Center point of sensor

	:type: list[float]
	'''
	Range = property(_get_Range, None)
	'''
	Range of sensor

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseDepthInformation = property(_get_UseDepthInformation, _set_UseDepthInformation)
	'''
	UseDepthInformation

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Color": _set_Color,
		"_set_Comment": _set_Comment,
		"_set_Direction": _set_Direction,
		"_set_Entity": _set_Entity,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_MotherBody": _set_MotherBody,
		"_set_Name": _set_Name,
		"_set_NormalDirection": _set_NormalDirection,
		"_set_Position": _set_Position,
		"_set_UseDepthInformation": _set_UseDepthInformation,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Color": (201, 2, (19, 0), (), "Color", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Depth": (209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Direction": (255, 2, (8197, 0), (), "Direction", None),
		"Entity": (252, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MotherBody": (251, 2, (9, 0), (), "MotherBody", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NormalDirection": (208, 2, (8197, 0), (), "NormalDirection", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Position": (253, 2, (8197, 0), (), "Position", None),
		"Range": (254, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseDepthInformation": (207, 2, (11, 0), (), "UseDepthInformation", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Color": ((201, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Direction": ((255, LCID, 4, 0),()),
		"Entity": ((252, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"MotherBody": ((251, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"NormalDirection": ((208, LCID, 4, 0),()),
		"Position": ((253, LCID, 4, 0),()),
		"UseDepthInformation": ((207, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ISensorTension(DispatchBaseClass):
	'''Sensor tension'''
	CLSID = IID('{55C49622-A503-4651-BF1E-2A84CD9E27AB}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Color(self):
		return self._ApplyTypes_(*(201, 2, (19, 0), (), "Color", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Depth(self):
		return self._ApplyTypes_(*(209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Entity(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MotherBody(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "MotherBody", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NormalDirection(self):
		return self._ApplyTypes_(*(208, 2, (8197, 0), (), "NormalDirection", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Position(self):
		return self._ApplyTypes_(*(253, 2, (8197, 0), (), "Position", None))
	def _get_Range(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseDepthInformation(self):
		return self._ApplyTypes_(*(207, 2, (11, 0), (), "UseDepthInformation", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Entity(self, value):
		if "Entity" in self.__dict__: self.__dict__["Entity"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_MotherBody(self, value):
		if "MotherBody" in self.__dict__: self.__dict__["MotherBody"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_NormalDirection(self, value):
		if "NormalDirection" in self.__dict__: self.__dict__["NormalDirection"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Position(self, value):
		if "Position" in self.__dict__: self.__dict__["Position"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (variantValue,) + ()))
	def _set_UseDepthInformation(self, value):
		if "UseDepthInformation" in self.__dict__: self.__dict__["UseDepthInformation"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Color = property(_get_Color, _set_Color)
	'''
	Graphic color of sensor

	:type: int
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Depth = property(_get_Depth, None)
	'''
	Depth

	:type: recurdyn.ProcessNet.IDouble
	'''
	Entity = property(_get_Entity, _set_Entity)
	'''
	Sensed entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MotherBody = property(_get_MotherBody, _set_MotherBody)
	'''
	Mother body

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NormalDirection = property(_get_NormalDirection, _set_NormalDirection)
	'''
	NormalDirection

	:type: list[float]
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Position = property(_get_Position, _set_Position)
	'''
	Center point of sensor

	:type: list[float]
	'''
	Range = property(_get_Range, None)
	'''
	Range of sensor

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseDepthInformation = property(_get_UseDepthInformation, _set_UseDepthInformation)
	'''
	UseDepthInformation

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Color": _set_Color,
		"_set_Comment": _set_Comment,
		"_set_Entity": _set_Entity,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_MotherBody": _set_MotherBody,
		"_set_Name": _set_Name,
		"_set_NormalDirection": _set_NormalDirection,
		"_set_Position": _set_Position,
		"_set_UseDepthInformation": _set_UseDepthInformation,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Color": (201, 2, (19, 0), (), "Color", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Depth": (209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Entity": (252, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MotherBody": (251, 2, (9, 0), (), "MotherBody", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NormalDirection": (208, 2, (8197, 0), (), "NormalDirection", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Position": (253, 2, (8197, 0), (), "Position", None),
		"Range": (254, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseDepthInformation": (207, 2, (11, 0), (), "UseDepthInformation", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Color": ((201, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Entity": ((252, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"MotherBody": ((251, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"NormalDirection": ((208, LCID, 4, 0),()),
		"Position": ((253, LCID, 4, 0),()),
		"UseDepthInformation": ((207, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ISensorTensionEx(DispatchBaseClass):
	'''Sensor tension ex'''
	CLSID = IID('{FD6480C3-36F4-4627-9725-6B484795DC39}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "Active", None))
	def _get_Color(self):
		return self._ApplyTypes_(*(201, 2, (19, 0), (), "Color", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Depth(self):
		return self._ApplyTypes_(*(209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Entity(self):
		return self._ApplyTypes_(*(252, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(151, 2, (19, 0), (), "LayerNumber", None))
	def _get_MotherBody(self):
		return self._ApplyTypes_(*(251, 2, (9, 0), (), "MotherBody", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_NormalDirection(self):
		return self._ApplyTypes_(*(208, 2, (8197, 0), (), "NormalDirection", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Position(self):
		return self._ApplyTypes_(*(253, 2, (8197, 0), (), "Position", None))
	def _get_Range(self):
		return self._ApplyTypes_(*(254, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Type(self):
		return self._ApplyTypes_(*(301, 2, (3, 0), (), "Type", '{CCC4494C-8137-4397-A09C-D4B654861CED}'))
	def _get_UseDepthInformation(self):
		return self._ApplyTypes_(*(207, 2, (11, 0), (), "UseDepthInformation", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Color(self, value):
		if "Color" in self.__dict__: self.__dict__["Color"] = value; return
		self._oleobj_.Invoke(*((201, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Entity(self, value):
		if "Entity" in self.__dict__: self.__dict__["Entity"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_MotherBody(self, value):
		if "MotherBody" in self.__dict__: self.__dict__["MotherBody"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_NormalDirection(self, value):
		if "NormalDirection" in self.__dict__: self.__dict__["NormalDirection"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((208, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Position(self, value):
		if "Position" in self.__dict__: self.__dict__["Position"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Type(self, value):
		if "Type" in self.__dict__: self.__dict__["Type"] = value; return
		self._oleobj_.Invoke(*((301, LCID, 4, 0) + (value,) + ()))
	def _set_UseDepthInformation(self, value):
		if "UseDepthInformation" in self.__dict__: self.__dict__["UseDepthInformation"] = value; return
		self._oleobj_.Invoke(*((207, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	Active

	:type: bool
	'''
	Color = property(_get_Color, _set_Color)
	'''
	Graphic color of sensor

	:type: int
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Depth = property(_get_Depth, None)
	'''
	Depth

	:type: recurdyn.ProcessNet.IDouble
	'''
	Entity = property(_get_Entity, _set_Entity)
	'''
	Sensed entity

	:type: recurdyn.ProcessNet.IGeneric
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MotherBody = property(_get_MotherBody, _set_MotherBody)
	'''
	Mother body

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	NormalDirection = property(_get_NormalDirection, _set_NormalDirection)
	'''
	NormalDirection

	:type: list[float]
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Position = property(_get_Position, _set_Position)
	'''
	Center point of sensor

	:type: list[float]
	'''
	Range = property(_get_Range, None)
	'''
	Range of sensor

	:type: recurdyn.ProcessNet.IDouble
	'''
	Type = property(_get_Type, _set_Type)
	'''
	Type

	:type: recurdyn.ProcessNet.TensionSensorType
	'''
	UseDepthInformation = property(_get_UseDepthInformation, _set_UseDepthInformation)
	'''
	UseDepthInformation

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Color": _set_Color,
		"_set_Comment": _set_Comment,
		"_set_Entity": _set_Entity,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_MotherBody": _set_MotherBody,
		"_set_Name": _set_Name,
		"_set_NormalDirection": _set_NormalDirection,
		"_set_Position": _set_Position,
		"_set_Type": _set_Type,
		"_set_UseDepthInformation": _set_UseDepthInformation,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Active": (152, 2, (11, 0), (), "Active", None),
		"Color": (201, 2, (19, 0), (), "Color", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Depth": (209, 2, (9, 0), (), "Depth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Entity": (252, 2, (9, 0), (), "Entity", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"LayerNumber": (151, 2, (19, 0), (), "LayerNumber", None),
		"MotherBody": (251, 2, (9, 0), (), "MotherBody", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"NormalDirection": (208, 2, (8197, 0), (), "NormalDirection", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Position": (253, 2, (8197, 0), (), "Position", None),
		"Range": (254, 2, (9, 0), (), "Range", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Type": (301, 2, (3, 0), (), "Type", '{CCC4494C-8137-4397-A09C-D4B654861CED}'),
		"UseDepthInformation": (207, 2, (11, 0), (), "UseDepthInformation", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Active": ((152, LCID, 4, 0),()),
		"Color": ((201, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Entity": ((252, LCID, 4, 0),()),
		"LayerNumber": ((151, LCID, 4, 0),()),
		"MotherBody": ((251, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"NormalDirection": ((208, LCID, 4, 0),()),
		"Position": ((253, LCID, 4, 0),()),
		"Type": ((301, LCID, 4, 0),()),
		"UseDepthInformation": ((207, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IShellOffsetFaceInfo(DispatchBaseClass):
	'''Geometry Shell Solid Offset Info'''
	CLSID = IID('{43AE7027-38BD-4D92-B4BC-5567F9078524}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_Offset(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "Offset", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_OffsetFaceCollection(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "OffsetFaceCollection", '{B5FF572C-A887-464A-8C86-0E92F1ED744F}'))

	Offset = property(_get_Offset, None)
	'''
	Offset Value

	:type: recurdyn.ProcessNet.IDouble
	'''
	OffsetFaceCollection = property(_get_OffsetFaceCollection, None)
	'''
	Offset Face Collection

	:type: recurdyn.ProcessNet.IGeometryFaceCollection
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Offset": (51, 2, (9, 0), (), "Offset", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"OffsetFaceCollection": (52, 2, (9, 0), (), "OffsetFaceCollection", '{B5FF572C-A887-464A-8C86-0E92F1ED744F}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IShellOffsetFaceInfoCollection(DispatchBaseClass):
	'''IShellOffsetFaceInfoCollection'''
	CLSID = IID('{4F28E7D4-55B5-4398-8AB5-B7586AE44EDE}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IShellOffsetFaceInfo
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{43AE7027-38BD-4D92-B4BC-5567F9078524}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IShellOffsetFaceInfo
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{43AE7027-38BD-4D92-B4BC-5567F9078524}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{43AE7027-38BD-4D92-B4BC-5567F9078524}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{43AE7027-38BD-4D92-B4BC-5567F9078524}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISpecialParametricMarker(DispatchBaseClass):
	'''Special parametric marker'''
	CLSID = IID('{01CC4DB0-561C-43AD-8D89-9485F040B0E5}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ISpecialParametricValue(DispatchBaseClass):
	'''Special parametric value'''
	CLSID = IID('{B58006F8-C5AC-4B97-8096-AF292F9DBE55}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_Value(self):
		return self._ApplyTypes_(*(151, 2, (5, 0), (), "Value", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_Value(self, value):
		if "Value" in self.__dict__: self.__dict__["Value"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	Value = property(_get_Value, _set_Value)
	'''
	Value

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
		"_set_Value": _set_Value,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"Value": (151, 2, (5, 0), (), "Value", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"Value": ((151, LCID, 4, 0),()),
	}
	def __call__(self):
		return self._ApplyTypes_(*(151, 2, (5, 0), (), "Value", None))
	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ISpline(DispatchBaseClass):
	'''Spline'''
	CLSID = IID('{E76144D2-715D-41B4-A432-7B6C7F713FC2}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def Validate(self):
		'''
		Validate method
		'''
		return self._oleobj_.InvokeTypes(166, LCID, 1, (24, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_EndPointSlopeEnd(self):
		return self._ApplyTypes_(*(161, 2, (9, 0), (), "EndPointSlopeEnd", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_EndPointSlopeStart(self):
		return self._ApplyTypes_(*(160, 2, (9, 0), (), "EndPointSlopeStart", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Extrapolation(self):
		return self._ApplyTypes_(*(157, 2, (3, 0), (), "Extrapolation", '{51913AE0-BDE0-4D9C-8552-A75EBEF4A402}'))
	def _get_FileName(self):
		return self._ApplyTypes_(*(153, 2, (8, 0), (), "FileName", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Interpolation(self):
		return self._ApplyTypes_(*(167, 2, (3, 0), (), "Interpolation", '{6AA9C9F2-BE64-4AFD-B4F1-493AEBDF5F10}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_OffsetX(self):
		return self._ApplyTypes_(*(162, 2, (9, 0), (), "OffsetX", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_OffsetY(self):
		return self._ApplyTypes_(*(163, 2, (9, 0), (), "OffsetY", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_ScaleFactorX(self):
		return self._ApplyTypes_(*(154, 2, (9, 0), (), "ScaleFactorX", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ScaleFactorY(self):
		return self._ApplyTypes_(*(155, 2, (9, 0), (), "ScaleFactorY", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Type(self):
		return self._ApplyTypes_(*(151, 2, (3, 0), (), "Type", '{2B2A8E20-833D-4F83-B40C-B4EF4F934233}'))
	def _get_UseEndPointSlopeEnd(self):
		return self._ApplyTypes_(*(159, 2, (11, 0), (), "UseEndPointSlopeEnd", None))
	def _get_UseEndPointSlopeStart(self):
		return self._ApplyTypes_(*(158, 2, (11, 0), (), "UseEndPointSlopeStart", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_Value(self):
		return self._ApplyTypes_(*(152, 2, (8204, 0), (), "Value", None))
	def _get_Value3D(self):
		return self._ApplyTypes_(*(165, 2, (8204, 0), (), "Value3D", None))
	def _get_ValueZ(self):
		return self._ApplyTypes_(*(164, 2, (8197, 0), (), "ValueZ", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Extrapolation(self, value):
		if "Extrapolation" in self.__dict__: self.__dict__["Extrapolation"] = value; return
		self._oleobj_.Invoke(*((157, LCID, 4, 0) + (value,) + ()))
	def _set_FileName(self, value):
		if "FileName" in self.__dict__: self.__dict__["FileName"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))
	def _set_Interpolation(self, value):
		if "Interpolation" in self.__dict__: self.__dict__["Interpolation"] = value; return
		self._oleobj_.Invoke(*((167, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_Type(self, value):
		if "Type" in self.__dict__: self.__dict__["Type"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_UseEndPointSlopeEnd(self, value):
		if "UseEndPointSlopeEnd" in self.__dict__: self.__dict__["UseEndPointSlopeEnd"] = value; return
		self._oleobj_.Invoke(*((159, LCID, 4, 0) + (value,) + ()))
	def _set_UseEndPointSlopeStart(self, value):
		if "UseEndPointSlopeStart" in self.__dict__: self.__dict__["UseEndPointSlopeStart"] = value; return
		self._oleobj_.Invoke(*((158, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_Value(self, value):
		if "Value" in self.__dict__: self.__dict__["Value"] = value; return
		_value_type = True if value and isinstance(value[0], win32com.client.VARIANT) else False
		if not _value_type:
			value = [win32com.client.VARIANT(12, _data) for _data in value]
		variantValue = win32com.client.VARIANT(8204, value)
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (variantValue,) + ()))
		if not _value_type:
			value = [_data.value for _data in value]
	def _set_Value3D(self, value):
		if "Value3D" in self.__dict__: self.__dict__["Value3D"] = value; return
		_value_type = True if value and isinstance(value[0], win32com.client.VARIANT) else False
		if not _value_type:
			value = [win32com.client.VARIANT(12, _data) for _data in value]
		variantValue = win32com.client.VARIANT(8204, value)
		self._oleobj_.Invoke(*((165, LCID, 4, 0) + (variantValue,) + ()))
		if not _value_type:
			value = [_data.value for _data in value]
	def _set_ValueZ(self, value):
		if "ValueZ" in self.__dict__: self.__dict__["ValueZ"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((164, LCID, 4, 0) + (variantValue,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	EndPointSlopeEnd = property(_get_EndPointSlopeEnd, None)
	'''
	End Point Slope End

	:type: recurdyn.ProcessNet.IDouble
	'''
	EndPointSlopeStart = property(_get_EndPointSlopeStart, None)
	'''
	End Point Slope Start 

	:type: recurdyn.ProcessNet.IDouble
	'''
	Extrapolation = property(_get_Extrapolation, _set_Extrapolation)
	'''
	Extrapolation type

	:type: recurdyn.ProcessNet.ExtrapolationType
	'''
	FileName = property(_get_FileName, _set_FileName)
	'''
	File name

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Interpolation = property(_get_Interpolation, _set_Interpolation)
	'''
	Interpolation type

	:type: recurdyn.ProcessNet.SplineInterpolationType
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	OffsetX = property(_get_OffsetX, None)
	'''
	X offset

	:type: recurdyn.ProcessNet.IDouble
	'''
	OffsetY = property(_get_OffsetY, None)
	'''
	Y offset

	:type: recurdyn.ProcessNet.IDouble
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	ScaleFactorX = property(_get_ScaleFactorX, None)
	'''
	Scale factor X

	:type: recurdyn.ProcessNet.IDouble
	'''
	ScaleFactorY = property(_get_ScaleFactorY, None)
	'''
	Scale factor Y

	:type: recurdyn.ProcessNet.IDouble
	'''
	Type = property(_get_Type, _set_Type)
	'''
	Data type

	:type: recurdyn.ProcessNet.SplineType
	'''
	UseEndPointSlopeEnd = property(_get_UseEndPointSlopeEnd, _set_UseEndPointSlopeEnd)
	'''
	Use End Point Slope End

	:type: bool
	'''
	UseEndPointSlopeStart = property(_get_UseEndPointSlopeStart, _set_UseEndPointSlopeStart)
	'''
	Use End Point Slope Start

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	Value = property(_get_Value, _set_Value)
	'''
	Spline data

	:type: list[object]
	'''
	Value3D = property(_get_Value3D, _set_Value3D)
	'''
	Spline 3D data

	:type: list[object]
	'''
	ValueZ = property(_get_ValueZ, _set_ValueZ)
	'''
	Spline Z data

	:type: list[float]
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Extrapolation": _set_Extrapolation,
		"_set_FileName": _set_FileName,
		"_set_Interpolation": _set_Interpolation,
		"_set_Name": _set_Name,
		"_set_Type": _set_Type,
		"_set_UseEndPointSlopeEnd": _set_UseEndPointSlopeEnd,
		"_set_UseEndPointSlopeStart": _set_UseEndPointSlopeStart,
		"_set_UserData": _set_UserData,
		"_set_Value": _set_Value,
		"_set_Value3D": _set_Value3D,
		"_set_ValueZ": _set_ValueZ,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"EndPointSlopeEnd": (161, 2, (9, 0), (), "EndPointSlopeEnd", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"EndPointSlopeStart": (160, 2, (9, 0), (), "EndPointSlopeStart", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Extrapolation": (157, 2, (3, 0), (), "Extrapolation", '{51913AE0-BDE0-4D9C-8552-A75EBEF4A402}'),
		"FileName": (153, 2, (8, 0), (), "FileName", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Interpolation": (167, 2, (3, 0), (), "Interpolation", '{6AA9C9F2-BE64-4AFD-B4F1-493AEBDF5F10}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"OffsetX": (162, 2, (9, 0), (), "OffsetX", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"OffsetY": (163, 2, (9, 0), (), "OffsetY", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"ScaleFactorX": (154, 2, (9, 0), (), "ScaleFactorX", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ScaleFactorY": (155, 2, (9, 0), (), "ScaleFactorY", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Type": (151, 2, (3, 0), (), "Type", '{2B2A8E20-833D-4F83-B40C-B4EF4F934233}'),
		"UseEndPointSlopeEnd": (159, 2, (11, 0), (), "UseEndPointSlopeEnd", None),
		"UseEndPointSlopeStart": (158, 2, (11, 0), (), "UseEndPointSlopeStart", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"Value": (152, 2, (8204, 0), (), "Value", None),
		"Value3D": (165, 2, (8204, 0), (), "Value3D", None),
		"ValueZ": (164, 2, (8197, 0), (), "ValueZ", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Extrapolation": ((157, LCID, 4, 0),()),
		"FileName": ((153, LCID, 4, 0),()),
		"Interpolation": ((167, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"Type": ((151, LCID, 4, 0),()),
		"UseEndPointSlopeEnd": ((159, LCID, 4, 0),()),
		"UseEndPointSlopeStart": ((158, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"Value": ((152, LCID, 4, 0),()),
		"Value3D": ((165, LCID, 4, 0),()),
		"ValueZ": ((164, LCID, 4, 0),()),
	}
	def __call__(self):
		return self._ApplyTypes_(*(152, 2, (8204, 0), (), "Value", None))
	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ISplineCollection(DispatchBaseClass):
	'''ISplineCollection'''
	CLSID = IID('{65267578-7015-4BB5-BB65-F5F81CCEA243}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.ISpline
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{E76144D2-715D-41B4-A432-7B6C7F713FC2}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.ISpline
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{E76144D2-715D-41B4-A432-7B6C7F713FC2}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{E76144D2-715D-41B4-A432-7B6C7F713FC2}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{E76144D2-715D-41B4-A432-7B6C7F713FC2}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IStrainStressOutputFileSetting(DispatchBaseClass):
	'''Output File Setting'''
	CLSID = IID('{350C9018-D3B8-4D6B-B9EC-271CE461FDC0}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def CheckAllStrain(self):
		'''
		Check All Strain
		'''
		return self._oleobj_.InvokeTypes(174, LCID, 1, (24, 0), (),)


	def CheckAllStress(self):
		'''
		Check All Stress
		'''
		return self._oleobj_.InvokeTypes(176, LCID, 1, (24, 0), (),)


	def ClearCheckStrain(self):
		'''
		Clear Check Strain
		'''
		return self._oleobj_.InvokeTypes(173, LCID, 1, (24, 0), (),)


	def ClearCheckStress(self):
		'''
		Clear Check Stress
		'''
		return self._oleobj_.InvokeTypes(175, LCID, 1, (24, 0), (),)


	def _get_DataPrecision(self):
		return self._ApplyTypes_(*(177, 2, (3, 0), (), "DataPrecision", '{8C37DF1E-4736-41A4-B4D7-41B06C8C39B4}'))
	def _get_E1(self):
		return self._ApplyTypes_(*(157, 2, (11, 0), (), "E1", None))
	def _get_E2(self):
		return self._ApplyTypes_(*(158, 2, (11, 0), (), "E2", None))
	def _get_E3(self):
		return self._ApplyTypes_(*(159, 2, (11, 0), (), "E3", None))
	def _get_EINT(self):
		return self._ApplyTypes_(*(160, 2, (11, 0), (), "EINT", None))
	def _get_EMISES(self):
		return self._ApplyTypes_(*(161, 2, (11, 0), (), "EMISES", None))
	def _get_EX(self):
		return self._ApplyTypes_(*(151, 2, (11, 0), (), "EX", None))
	def _get_EXY(self):
		return self._ApplyTypes_(*(154, 2, (11, 0), (), "EXY", None))
	def _get_EY(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "EY", None))
	def _get_EYZ(self):
		return self._ApplyTypes_(*(155, 2, (11, 0), (), "EYZ", None))
	def _get_EZ(self):
		return self._ApplyTypes_(*(153, 2, (11, 0), (), "EZ", None))
	def _get_EZX(self):
		return self._ApplyTypes_(*(156, 2, (11, 0), (), "EZX", None))
	def _get_S1(self):
		return self._ApplyTypes_(*(168, 2, (11, 0), (), "S1", None))
	def _get_S2(self):
		return self._ApplyTypes_(*(169, 2, (11, 0), (), "S2", None))
	def _get_S3(self):
		return self._ApplyTypes_(*(170, 2, (11, 0), (), "S3", None))
	def _get_SINT(self):
		return self._ApplyTypes_(*(171, 2, (11, 0), (), "SINT", None))
	def _get_SMISES(self):
		return self._ApplyTypes_(*(172, 2, (11, 0), (), "SMISES", None))
	def _get_SX(self):
		return self._ApplyTypes_(*(162, 2, (11, 0), (), "SX", None))
	def _get_SXY(self):
		return self._ApplyTypes_(*(165, 2, (11, 0), (), "SXY", None))
	def _get_SY(self):
		return self._ApplyTypes_(*(163, 2, (11, 0), (), "SY", None))
	def _get_SYZ(self):
		return self._ApplyTypes_(*(166, 2, (11, 0), (), "SYZ", None))
	def _get_SZ(self):
		return self._ApplyTypes_(*(164, 2, (11, 0), (), "SZ", None))
	def _get_SZX(self):
		return self._ApplyTypes_(*(167, 2, (11, 0), (), "SZX", None))

	def _set_DataPrecision(self, value):
		if "DataPrecision" in self.__dict__: self.__dict__["DataPrecision"] = value; return
		self._oleobj_.Invoke(*((177, LCID, 4, 0) + (value,) + ()))
	def _set_E1(self, value):
		if "E1" in self.__dict__: self.__dict__["E1"] = value; return
		self._oleobj_.Invoke(*((157, LCID, 4, 0) + (value,) + ()))
	def _set_E2(self, value):
		if "E2" in self.__dict__: self.__dict__["E2"] = value; return
		self._oleobj_.Invoke(*((158, LCID, 4, 0) + (value,) + ()))
	def _set_E3(self, value):
		if "E3" in self.__dict__: self.__dict__["E3"] = value; return
		self._oleobj_.Invoke(*((159, LCID, 4, 0) + (value,) + ()))
	def _set_EINT(self, value):
		if "EINT" in self.__dict__: self.__dict__["EINT"] = value; return
		self._oleobj_.Invoke(*((160, LCID, 4, 0) + (value,) + ()))
	def _set_EMISES(self, value):
		if "EMISES" in self.__dict__: self.__dict__["EMISES"] = value; return
		self._oleobj_.Invoke(*((161, LCID, 4, 0) + (value,) + ()))
	def _set_EX(self, value):
		if "EX" in self.__dict__: self.__dict__["EX"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_EXY(self, value):
		if "EXY" in self.__dict__: self.__dict__["EXY"] = value; return
		self._oleobj_.Invoke(*((154, LCID, 4, 0) + (value,) + ()))
	def _set_EY(self, value):
		if "EY" in self.__dict__: self.__dict__["EY"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_EYZ(self, value):
		if "EYZ" in self.__dict__: self.__dict__["EYZ"] = value; return
		self._oleobj_.Invoke(*((155, LCID, 4, 0) + (value,) + ()))
	def _set_EZ(self, value):
		if "EZ" in self.__dict__: self.__dict__["EZ"] = value; return
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (value,) + ()))
	def _set_EZX(self, value):
		if "EZX" in self.__dict__: self.__dict__["EZX"] = value; return
		self._oleobj_.Invoke(*((156, LCID, 4, 0) + (value,) + ()))
	def _set_S1(self, value):
		if "S1" in self.__dict__: self.__dict__["S1"] = value; return
		self._oleobj_.Invoke(*((168, LCID, 4, 0) + (value,) + ()))
	def _set_S2(self, value):
		if "S2" in self.__dict__: self.__dict__["S2"] = value; return
		self._oleobj_.Invoke(*((169, LCID, 4, 0) + (value,) + ()))
	def _set_S3(self, value):
		if "S3" in self.__dict__: self.__dict__["S3"] = value; return
		self._oleobj_.Invoke(*((170, LCID, 4, 0) + (value,) + ()))
	def _set_SINT(self, value):
		if "SINT" in self.__dict__: self.__dict__["SINT"] = value; return
		self._oleobj_.Invoke(*((171, LCID, 4, 0) + (value,) + ()))
	def _set_SMISES(self, value):
		if "SMISES" in self.__dict__: self.__dict__["SMISES"] = value; return
		self._oleobj_.Invoke(*((172, LCID, 4, 0) + (value,) + ()))
	def _set_SX(self, value):
		if "SX" in self.__dict__: self.__dict__["SX"] = value; return
		self._oleobj_.Invoke(*((162, LCID, 4, 0) + (value,) + ()))
	def _set_SXY(self, value):
		if "SXY" in self.__dict__: self.__dict__["SXY"] = value; return
		self._oleobj_.Invoke(*((165, LCID, 4, 0) + (value,) + ()))
	def _set_SY(self, value):
		if "SY" in self.__dict__: self.__dict__["SY"] = value; return
		self._oleobj_.Invoke(*((163, LCID, 4, 0) + (value,) + ()))
	def _set_SYZ(self, value):
		if "SYZ" in self.__dict__: self.__dict__["SYZ"] = value; return
		self._oleobj_.Invoke(*((166, LCID, 4, 0) + (value,) + ()))
	def _set_SZ(self, value):
		if "SZ" in self.__dict__: self.__dict__["SZ"] = value; return
		self._oleobj_.Invoke(*((164, LCID, 4, 0) + (value,) + ()))
	def _set_SZX(self, value):
		if "SZX" in self.__dict__: self.__dict__["SZX"] = value; return
		self._oleobj_.Invoke(*((167, LCID, 4, 0) + (value,) + ()))

	DataPrecision = property(_get_DataPrecision, _set_DataPrecision)
	'''
	Strain Stress Data Precision

	:type: recurdyn.ProcessNet.StrainStressDataPrecision
	'''
	E1 = property(_get_E1, _set_E1)
	'''
	Strain E1

	:type: bool
	'''
	E2 = property(_get_E2, _set_E2)
	'''
	Strain E2

	:type: bool
	'''
	E3 = property(_get_E3, _set_E3)
	'''
	Strain E3

	:type: bool
	'''
	EINT = property(_get_EINT, _set_EINT)
	'''
	Strain EINT

	:type: bool
	'''
	EMISES = property(_get_EMISES, _set_EMISES)
	'''
	Strain EMISES

	:type: bool
	'''
	EX = property(_get_EX, _set_EX)
	'''
	Strain EX

	:type: bool
	'''
	EXY = property(_get_EXY, _set_EXY)
	'''
	Strain EXY

	:type: bool
	'''
	EY = property(_get_EY, _set_EY)
	'''
	Strain EY

	:type: bool
	'''
	EYZ = property(_get_EYZ, _set_EYZ)
	'''
	Strain EYZ

	:type: bool
	'''
	EZ = property(_get_EZ, _set_EZ)
	'''
	Strain EZ

	:type: bool
	'''
	EZX = property(_get_EZX, _set_EZX)
	'''
	Strain EZX

	:type: bool
	'''
	S1 = property(_get_S1, _set_S1)
	'''
	Stress S1

	:type: bool
	'''
	S2 = property(_get_S2, _set_S2)
	'''
	Stress S2

	:type: bool
	'''
	S3 = property(_get_S3, _set_S3)
	'''
	Stress S3

	:type: bool
	'''
	SINT = property(_get_SINT, _set_SINT)
	'''
	Stress SINT

	:type: bool
	'''
	SMISES = property(_get_SMISES, _set_SMISES)
	'''
	Stress SMISES

	:type: bool
	'''
	SX = property(_get_SX, _set_SX)
	'''
	Stress SX

	:type: bool
	'''
	SXY = property(_get_SXY, _set_SXY)
	'''
	Stress SXY

	:type: bool
	'''
	SY = property(_get_SY, _set_SY)
	'''
	Stress SY

	:type: bool
	'''
	SYZ = property(_get_SYZ, _set_SYZ)
	'''
	Stress SYZ

	:type: bool
	'''
	SZ = property(_get_SZ, _set_SZ)
	'''
	Stress SZ

	:type: bool
	'''
	SZX = property(_get_SZX, _set_SZX)
	'''
	Stress SZX

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_DataPrecision": _set_DataPrecision,
		"_set_E1": _set_E1,
		"_set_E2": _set_E2,
		"_set_E3": _set_E3,
		"_set_EINT": _set_EINT,
		"_set_EMISES": _set_EMISES,
		"_set_EX": _set_EX,
		"_set_EXY": _set_EXY,
		"_set_EY": _set_EY,
		"_set_EYZ": _set_EYZ,
		"_set_EZ": _set_EZ,
		"_set_EZX": _set_EZX,
		"_set_S1": _set_S1,
		"_set_S2": _set_S2,
		"_set_S3": _set_S3,
		"_set_SINT": _set_SINT,
		"_set_SMISES": _set_SMISES,
		"_set_SX": _set_SX,
		"_set_SXY": _set_SXY,
		"_set_SY": _set_SY,
		"_set_SYZ": _set_SYZ,
		"_set_SZ": _set_SZ,
		"_set_SZX": _set_SZX,
	}
	_prop_map_get_ = {
		"DataPrecision": (177, 2, (3, 0), (), "DataPrecision", '{8C37DF1E-4736-41A4-B4D7-41B06C8C39B4}'),
		"E1": (157, 2, (11, 0), (), "E1", None),
		"E2": (158, 2, (11, 0), (), "E2", None),
		"E3": (159, 2, (11, 0), (), "E3", None),
		"EINT": (160, 2, (11, 0), (), "EINT", None),
		"EMISES": (161, 2, (11, 0), (), "EMISES", None),
		"EX": (151, 2, (11, 0), (), "EX", None),
		"EXY": (154, 2, (11, 0), (), "EXY", None),
		"EY": (152, 2, (11, 0), (), "EY", None),
		"EYZ": (155, 2, (11, 0), (), "EYZ", None),
		"EZ": (153, 2, (11, 0), (), "EZ", None),
		"EZX": (156, 2, (11, 0), (), "EZX", None),
		"S1": (168, 2, (11, 0), (), "S1", None),
		"S2": (169, 2, (11, 0), (), "S2", None),
		"S3": (170, 2, (11, 0), (), "S3", None),
		"SINT": (171, 2, (11, 0), (), "SINT", None),
		"SMISES": (172, 2, (11, 0), (), "SMISES", None),
		"SX": (162, 2, (11, 0), (), "SX", None),
		"SXY": (165, 2, (11, 0), (), "SXY", None),
		"SY": (163, 2, (11, 0), (), "SY", None),
		"SYZ": (166, 2, (11, 0), (), "SYZ", None),
		"SZ": (164, 2, (11, 0), (), "SZ", None),
		"SZX": (167, 2, (11, 0), (), "SZX", None),
	}
	_prop_map_put_ = {
		"DataPrecision": ((177, LCID, 4, 0),()),
		"E1": ((157, LCID, 4, 0),()),
		"E2": ((158, LCID, 4, 0),()),
		"E3": ((159, LCID, 4, 0),()),
		"EINT": ((160, LCID, 4, 0),()),
		"EMISES": ((161, LCID, 4, 0),()),
		"EX": ((151, LCID, 4, 0),()),
		"EXY": ((154, LCID, 4, 0),()),
		"EY": ((152, LCID, 4, 0),()),
		"EYZ": ((155, LCID, 4, 0),()),
		"EZ": ((153, LCID, 4, 0),()),
		"EZX": ((156, LCID, 4, 0),()),
		"S1": ((168, LCID, 4, 0),()),
		"S2": ((169, LCID, 4, 0),()),
		"S3": ((170, LCID, 4, 0),()),
		"SINT": ((171, LCID, 4, 0),()),
		"SMISES": ((172, LCID, 4, 0),()),
		"SX": ((162, LCID, 4, 0),()),
		"SXY": ((165, LCID, 4, 0),()),
		"SY": ((163, LCID, 4, 0),()),
		"SYZ": ((166, LCID, 4, 0),()),
		"SZ": ((164, LCID, 4, 0),()),
		"SZX": ((167, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IString(DispatchBaseClass):
	'''String'''
	CLSID = IID('{16DE1264-A4F7-4A8E-8F3C-E8B5210CB2D9}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Text(self):
		return self._ApplyTypes_(*(151, 2, (8, 0), (), "Text", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_Text(self, value):
		if "Text" in self.__dict__: self.__dict__["Text"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Text = property(_get_Text, _set_Text)
	'''
	Text

	:type: str
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_Text": _set_Text,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Text": (151, 2, (8, 0), (), "Text", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"Text": ((151, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IStringCollection(DispatchBaseClass):
	'''IStringCollection'''
	CLSID = IID('{C9116090-BCBB-453C-A283-49E55A3344CA}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IString
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{16DE1264-A4F7-4A8E-8F3C-E8B5210CB2D9}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IString
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{16DE1264-A4F7-4A8E-8F3C-E8B5210CB2D9}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{16DE1264-A4F7-4A8E-8F3C-E8B5210CB2D9}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{16DE1264-A4F7-4A8E-8F3C-E8B5210CB2D9}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISubSystem(DispatchBaseClass):
	'''Subsystem'''
	CLSID = IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def ChangeLayerNumber(self, uiLayerNo):
		'''
		Change Internal Entity Layer Number.
		
		:param uiLayerNo: int
		'''
		return self._oleobj_.InvokeTypes(546, LCID, 1, (24, 0), ((19, 1),),uiLayerNo
			)


	def CreateBodyBox(self, strName, pRefFrame, dWidth, dHeight, dDepth):
		'''
		Creates a box body
		
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:param dWidth: float
		:param dHeight: float
		:param dDepth: float
		:rtype: recurdyn.ProcessNet.IBody
		'''
		ret = self._oleobj_.InvokeTypes(154, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (5, 1), (5, 1)),strName
			, pRefFrame, dWidth, dHeight, dDepth)
		if ret is not None:
			ret = Dispatch(ret, 'CreateBodyBox', '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
		return ret

	def CreateBodyCone(self, strName, pFirstPoint, pSecondPoint, dTopRadius, dBottomRadius):
		'''
		Creates a cone body
		
		:param strName: str
		:param pFirstPoint: list[float]
		:param pSecondPoint: list[float]
		:param dTopRadius: float
		:param dBottomRadius: float
		:rtype: recurdyn.ProcessNet.IBody
		'''
		ret = self._oleobj_.InvokeTypes(159, LCID, 1, (9, 0), ((8, 1), (8197, 1), (8197, 1), (5, 1), (5, 1)),strName
			, pFirstPoint, pSecondPoint, dTopRadius, dBottomRadius)
		if ret is not None:
			ret = Dispatch(ret, 'CreateBodyCone', '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
		return ret

	def CreateBodyCylinder(self, strName, pRefFrame, dRadius, dHeight):
		'''
		Creates a cylinder body
		
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:param dRadius: float
		:param dHeight: float
		:rtype: recurdyn.ProcessNet.IBody
		'''
		ret = self._oleobj_.InvokeTypes(152, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (5, 1)),strName
			, pRefFrame, dRadius, dHeight)
		if ret is not None:
			ret = Dispatch(ret, 'CreateBodyCylinder', '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
		return ret

	def CreateBodyCylinderWithPointPointRadius(self, strName, pFirstPoint, pSecondPoint, dRadius):
		'''
		Creates a cylinder body with point, point and radius
		
		:param strName: str
		:param pFirstPoint: list[float]
		:param pSecondPoint: list[float]
		:param dRadius: float
		:rtype: recurdyn.ProcessNet.IBody
		'''
		ret = self._oleobj_.InvokeTypes(153, LCID, 1, (9, 0), ((8, 1), (8197, 1), (8197, 1), (5, 1)),strName
			, pFirstPoint, pSecondPoint, dRadius)
		if ret is not None:
			ret = Dispatch(ret, 'CreateBodyCylinderWithPointPointRadius', '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
		return ret

	def CreateBodyEllipsoid(self, strName, pRefFrame, dRadius, dRadiusY, dRadiusZ):
		'''
		Creates an ellipsoid body
		
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:param dRadius: float
		:param dRadiusY: float
		:param dRadiusZ: float
		:rtype: recurdyn.ProcessNet.IBody
		'''
		ret = self._oleobj_.InvokeTypes(156, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (5, 1), (5, 1)),strName
			, pRefFrame, dRadius, dRadiusY, dRadiusZ)
		if ret is not None:
			ret = Dispatch(ret, 'CreateBodyEllipsoid', '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
		return ret

	def CreateBodyGeneral(self, strName):
		'''
		Creates a general body
		
		:param strName: str
		:rtype: recurdyn.ProcessNet.IBody
		'''
		ret = self._oleobj_.InvokeTypes(162, LCID, 1, (9, 0), ((8, 1),),strName
			)
		if ret is not None:
			ret = Dispatch(ret, 'CreateBodyGeneral', '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
		return ret

	def CreateBodyLink(self, strName, pFirstPoint, pSecondPoint, dDepth):
		'''
		Creates a link body
		
		:param strName: str
		:param pFirstPoint: list[float]
		:param pSecondPoint: list[float]
		:param dDepth: float
		:rtype: recurdyn.ProcessNet.IBody
		'''
		ret = self._oleobj_.InvokeTypes(160, LCID, 1, (9, 0), ((8, 1), (8197, 1), (8197, 1), (5, 1)),strName
			, pFirstPoint, pSecondPoint, dDepth)
		if ret is not None:
			ret = Dispatch(ret, 'CreateBodyLink', '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
		return ret

	def CreateBodyLinkWithRadius(self, strName, pFirstPoint, pSecondPoint, dFirstRadious, dSecondRadious, dDepth):
		'''
		Creates a link body with radius
		
		:param strName: str
		:param pFirstPoint: list[float]
		:param pSecondPoint: list[float]
		:param dFirstRadious: float
		:param dSecondRadious: float
		:param dDepth: float
		:rtype: recurdyn.ProcessNet.IBody
		'''
		ret = self._oleobj_.InvokeTypes(161, LCID, 1, (9, 0), ((8, 1), (8197, 1), (8197, 1), (5, 1), (5, 1), (5, 1)),strName
			, pFirstPoint, pSecondPoint, dFirstRadious, dSecondRadious, dDepth
			)
		if ret is not None:
			ret = Dispatch(ret, 'CreateBodyLinkWithRadius', '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
		return ret

	def CreateBodyPrism(self, strName, pRefFrame, dRadius, dHeight, NSides):
		'''
		Creates a prism body
		
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:param dRadius: float
		:param dHeight: float
		:param NSides: int
		:rtype: recurdyn.ProcessNet.IBody
		'''
		ret = self._oleobj_.InvokeTypes(158, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (5, 1), (3, 1)),strName
			, pRefFrame, dRadius, dHeight, NSides)
		if ret is not None:
			ret = Dispatch(ret, 'CreateBodyPrism', '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
		return ret

	def CreateBodySphere(self, strName, pRefFrame, dRadius):
		'''
		Creates a sphere Body
		
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:param dRadius: float
		:rtype: recurdyn.ProcessNet.IBody
		'''
		ret = self._oleobj_.InvokeTypes(155, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1)),strName
			, pRefFrame, dRadius)
		if ret is not None:
			ret = Dispatch(ret, 'CreateBodySphere', '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
		return ret

	def CreateBodyTorus(self, strName, pRefFrame, dMajorRadius, dMinorRadius):
		'''
		Creates a torus body
		
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:param dMajorRadius: float
		:param dMinorRadius: float
		:rtype: recurdyn.ProcessNet.IBody
		'''
		ret = self._oleobj_.InvokeTypes(157, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (5, 1)),strName
			, pRefFrame, dMajorRadius, dMinorRadius)
		if ret is not None:
			ret = Dispatch(ret, 'CreateBodyTorus', '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
		return ret

	def CreateBodyTorusWithAngle(self, strName, pRefFrame, dMajorRadius, dMinorRadius, dAngle):
		'''
		Creates a torus body with angle
		
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:param dMajorRadius: float
		:param dMinorRadius: float
		:param dAngle: float
		:rtype: recurdyn.ProcessNet.IBody
		'''
		ret = self._oleobj_.InvokeTypes(500, LCID, 1, (9, 0), ((8, 1), (9, 1), (5, 1), (5, 1), (5, 1)),strName
			, pRefFrame, dMajorRadius, dMinorRadius, dAngle)
		if ret is not None:
			ret = Dispatch(ret, 'CreateBodyTorusWithAngle', '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')
		return ret

	def CreateContactCam2D(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a cam2D contact
		
		:param strName: str
		:param pBaseEntity: IGeometry
		:param pActionEntity: IGeometry
		:rtype: recurdyn.ProcessNet.IContactCam2D
		'''
		ret = self._oleobj_.InvokeTypes(256, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactCam2D', '{690A46F3-D9C2-4AFF-8493-1667E2AB01C8}')
		return ret

	def CreateContactCamLine2D(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a camline2D contact
		
		:param strName: str
		:param pBaseEntity: IGeometry
		:param pActionEntity: IGeometry
		:rtype: recurdyn.ProcessNet.IContactCamLine2D
		'''
		ret = self._oleobj_.InvokeTypes(257, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactCamLine2D', '{59D79E1B-8BF5-4AA3-93F4-971C64745639}')
		return ret

	def CreateContactCircleInCircle(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a circle in circle contact
		
		:param strName: str
		:param pBaseEntity: IGeometry
		:param pActionEntity: IGeometry
		:rtype: recurdyn.ProcessNet.IContactCircleInCircle
		'''
		ret = self._oleobj_.InvokeTypes(255, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactCircleInCircle', '{56C95894-62F4-4D51-B976-862FC3E711AB}')
		return ret

	def CreateContactCircleToCircle(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a circle to circle contact
		
		:param strName: str
		:param pBaseEntity: IGeometry
		:param pActionEntity: IGeometry
		:rtype: recurdyn.ProcessNet.IContactCircleToCircle
		'''
		ret = self._oleobj_.InvokeTypes(254, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactCircleToCircle', '{EC57C6FE-34A6-456F-AE24-7A8AACD2E723}')
		return ret

	def CreateContactCircleToCurve(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a circle to curve contact
		
		:param strName: str
		:param pBaseEntity: IGeometry
		:param pActionEntity: IGeometry
		:rtype: recurdyn.ProcessNet.IContactCircleToCurve
		'''
		ret = self._oleobj_.InvokeTypes(241, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactCircleToCurve', '{6A2CED63-4688-4E31-8407-68455039C297}')
		return ret

	def CreateContactConeInCone(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a cone in cone contact
		
		:param strName: str
		:param pBaseEntity: IGeometryCone
		:param pActionEntity: IGeometryCone
		:rtype: recurdyn.ProcessNet.IContactConeInCone
		'''
		ret = self._oleobj_.InvokeTypes(261, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactConeInCone', '{58994473-EE23-4CC2-9F1B-EC20B9398A03}')
		return ret

	def CreateContactConeInCone2(self, Name, baseCone, actionCone):
		'''
		Creates a cone in cone contact
		
		:param Name: str
		:param baseCone: IGeometry
		:param actionCone: IGeometry
		:rtype: recurdyn.ProcessNet.IContactConeInCone
		'''
		ret = self._oleobj_.InvokeTypes(391, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseCone, actionCone)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactConeInCone2', '{58994473-EE23-4CC2-9F1B-EC20B9398A03}')
		return ret

	def CreateContactConeToCone(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a cone to cone contact
		
		:param strName: str
		:param pBaseEntity: IGeometryCone
		:param pActionEntity: IGeometryCone
		:rtype: recurdyn.ProcessNet.IContactConeToCone
		'''
		ret = self._oleobj_.InvokeTypes(262, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactConeToCone', '{60BF370A-91E7-47B9-8BBC-584843818988}')
		return ret

	def CreateContactConeToCone2(self, Name, baseCone, actionCone):
		'''
		Creates a cone to cone contact
		
		:param Name: str
		:param baseCone: IGeometry
		:param actionCone: IGeometry
		:rtype: recurdyn.ProcessNet.IContactConeToCone
		'''
		ret = self._oleobj_.InvokeTypes(390, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseCone, actionCone)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactConeToCone2', '{60BF370A-91E7-47B9-8BBC-584843818988}')
		return ret

	def CreateContactConeToCylinder(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a cone to cylinder contact
		
		:param strName: str
		:param pBaseEntity: IGeometryCylinder
		:param pActionEntity: IGeometryCone
		:rtype: recurdyn.ProcessNet.IContactConeToCylinder
		'''
		ret = self._oleobj_.InvokeTypes(265, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactConeToCylinder', '{DA496635-4F2C-44AB-B59D-B2F1A6946C62}')
		return ret

	def CreateContactConeToCylinder2(self, Name, baseCylinder, actionCone):
		'''
		Creates a cone to cylinder contact
		
		:param Name: str
		:param baseCylinder: IGeometry
		:param actionCone: IGeometry
		:rtype: recurdyn.ProcessNet.IContactConeToCylinder
		'''
		ret = self._oleobj_.InvokeTypes(392, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseCylinder, actionCone)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactConeToCylinder2', '{DA496635-4F2C-44AB-B59D-B2F1A6946C62}')
		return ret

	def CreateContactCurveToCurve(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a curve to curve contact
		
		:param strName: str
		:param pBaseEntity: IGeometry
		:param pActionEntity: IGeometry
		:rtype: recurdyn.ProcessNet.IContactCurveToCurve
		'''
		ret = self._oleobj_.InvokeTypes(247, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactCurveToCurve', '{3710687E-E5C7-436E-8127-3ECAC2851397}')
		return ret

	def CreateContactCylinderInCylinder(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a cylinder in cylinder contact
		
		:param strName: str
		:param pBaseEntity: IGeometryCylinder
		:param pActionEntity: IGeometryCylinder
		:rtype: recurdyn.ProcessNet.IContactCylinderInCylinder
		'''
		ret = self._oleobj_.InvokeTypes(260, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactCylinderInCylinder', '{D4E093C4-C608-4D7E-A620-25FA02B21B83}')
		return ret

	def CreateContactCylinderInCylinder2(self, Name, baseCylinder, actionCylinder):
		'''
		Creates a cylinder in cylinder contact
		
		:param Name: str
		:param baseCylinder: IGeometry
		:param actionCylinder: IGeometry
		:rtype: recurdyn.ProcessNet.IContactCylinderInCylinder
		'''
		ret = self._oleobj_.InvokeTypes(388, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseCylinder, actionCylinder)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactCylinderInCylinder2', '{D4E093C4-C608-4D7E-A620-25FA02B21B83}')
		return ret

	def CreateContactCylinderToBox(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a cylinder to box contact
		
		:param strName: str
		:param pBaseEntity: IGeometryBox
		:param pActionEntity: IGeometryCylinder
		:rtype: recurdyn.ProcessNet.IContactCylinderToBox
		'''
		ret = self._oleobj_.InvokeTypes(511, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactCylinderToBox', '{B006015D-09FE-4F3A-9922-B74E7C4036A0}')
		return ret

	def CreateContactCylinderToBox2(self, strName, baseBox, actionCylinder):
		'''
		Creates a cylinder to box contact
		
		:param strName: str
		:param baseBox: IGeometry
		:param actionCylinder: IGeometry
		:rtype: recurdyn.ProcessNet.IContactCylinderToBox
		'''
		ret = self._oleobj_.InvokeTypes(393, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, baseBox, actionCylinder)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactCylinderToBox2', '{B006015D-09FE-4F3A-9922-B74E7C4036A0}')
		return ret

	def CreateContactCylinderToCylinder(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a cylinder to cylinder contact
		
		:param strName: str
		:param pBaseEntity: IGeometryCylinder
		:param pActionEntity: IGeometryCylinder
		:rtype: recurdyn.ProcessNet.IContactCylinderToCylinder
		'''
		ret = self._oleobj_.InvokeTypes(259, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactCylinderToCylinder', '{CA52FC45-8B33-4AB7-BE25-8454F1C1CB57}')
		return ret

	def CreateContactCylinderToCylinder2(self, Name, baseCylinder, actionCylinder):
		'''
		Creates a cylinder to cylinder contact
		
		:param Name: str
		:param baseCylinder: IGeometry
		:param actionCylinder: IGeometry
		:rtype: recurdyn.ProcessNet.IContactCylinderToCylinder
		'''
		ret = self._oleobj_.InvokeTypes(387, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseCylinder, actionCylinder)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactCylinderToCylinder2', '{CA52FC45-8B33-4AB7-BE25-8454F1C1CB57}')
		return ret

	def CreateContactCylinderToSurface(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a cylinder to surface contact
		
		:param strName: str
		:param pBaseEntity: IGeometry
		:param pActionEntity: IGeometryCylinder
		:rtype: recurdyn.ProcessNet.IContactCylinderToSurface
		'''
		ret = self._oleobj_.InvokeTypes(258, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactCylinderToSurface', '{2B0D7BEC-4344-49F3-BF7A-CFEB25A06BFC}')
		return ret

	def CreateContactCylinderToSurface2(self, Name, baseSurface, actionCylinder):
		'''
		Creates a cylinder to surface contact
		
		:param Name: str
		:param baseSurface: IGeometry
		:param actionCylinder: IGeometry
		:rtype: recurdyn.ProcessNet.IContactCylinderToSurface
		'''
		ret = self._oleobj_.InvokeTypes(389, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseSurface, actionCylinder)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactCylinderToSurface2', '{2B0D7BEC-4344-49F3-BF7A-CFEB25A06BFC}')
		return ret

	def CreateContactExtendedSurfaceToSurface(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates an extended surface to surface Contact
		
		:param strName: str
		:param pBaseEntity: IGeometry
		:param pActionEntity: IGeometry
		:rtype: recurdyn.ProcessNet.IContactExtendedSurfaceToSurface
		'''
		ret = self._oleobj_.InvokeTypes(246, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactExtendedSurfaceToSurface', '{6495A425-79AC-40E6-8BF6-A95AA1A2D578}')
		return ret

	def CreateContactGeo(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a geo contact
		
		:param strName: str
		:param pBaseEntity: IGeometry
		:param pActionEntity: IGeometry
		:rtype: recurdyn.ProcessNet.IContactGeo
		'''
		ret = self._oleobj_.InvokeTypes(498, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactGeo', '{6CAFE73E-3494-41D3-AB87-13A59CB8CF2A}')
		return ret

	def CreateContactGeoCircle(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a geo circle contact
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:rtype: recurdyn.ProcessNet.IContactGeoCurve
		'''
		ret = self._oleobj_.InvokeTypes(531, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactGeoCircle', '{0BD26902-38C3-4C3F-B2B5-6038996BC174}')
		return ret

	def CreateContactGeoCurve(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a geo curve contact
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:rtype: recurdyn.ProcessNet.IContactGeoCurve
		'''
		ret = self._oleobj_.InvokeTypes(507, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactGeoCurve', '{0BD26902-38C3-4C3F-B2B5-6038996BC174}')
		return ret

	def CreateContactGeoCurveToSurface(self, strName, pBaseSurface, pActionCurve):
		'''
		Creates a geo curve to surface contact
		
		:param strName: str
		:param pBaseSurface: IGeneric
		:param pActionCurve: IGeneric
		:rtype: recurdyn.ProcessNet.IContactGeoCurveToSurface
		'''
		ret = self._oleobj_.InvokeTypes(534, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseSurface, pActionCurve)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactGeoCurveToSurface', '{53B9175B-11B0-4E63-B525-8062109E72D5}')
		return ret

	def CreateContactGeoCylinder(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a geo cylinder contact
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:rtype: recurdyn.ProcessNet.IContactGeoSurface
		'''
		ret = self._oleobj_.InvokeTypes(520, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactGeoCylinder', '{8B44BA63-1871-4074-863D-1434F7D479B7}')
		return ret

	def CreateContactGeoSphere(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a geo sphere contact
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:rtype: recurdyn.ProcessNet.IContactGeoSurface
		'''
		ret = self._oleobj_.InvokeTypes(515, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactGeoSphere', '{8B44BA63-1871-4074-863D-1434F7D479B7}')
		return ret

	def CreateContactGeoSurface(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a geo surface contact
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:rtype: recurdyn.ProcessNet.IContactGeoSurface
		'''
		ret = self._oleobj_.InvokeTypes(506, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactGeoSurface', '{8B44BA63-1871-4074-863D-1434F7D479B7}')
		return ret

	def CreateContactSolidContact(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a solid contact
		
		:param strName: str
		:param pBaseEntity: IGeometry
		:param pActionEntity: IGeometry
		:rtype: recurdyn.ProcessNet.IContactSolidContact
		'''
		ret = self._oleobj_.InvokeTypes(263, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSolidContact', '{C2F210C5-9B2E-43C2-9C50-D57E01780041}')
		return ret

	def CreateContactSphereArcExtrude(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame):
		'''
		Creates a sphere arc extrude contact
		
		:param strName: str
		:param pBaseEntity: IGeometry
		:param pActionEntity: IGeometrySphere
		:param pBaseRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IContactSphereArcExtrude
		'''
		ret = self._oleobj_.InvokeTypes(268, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereArcExtrude', '{950986EE-CD2C-4719-A2C1-329FB478FA05}')
		return ret

	def CreateContactSphereArcRevolution(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame):
		'''
		Creates a sphere arc revolution contact
		
		:param strName: str
		:param pBaseEntity: IGeometry
		:param pActionEntity: IGeometrySphere
		:param pBaseRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IContactSphereArcRevolution
		'''
		ret = self._oleobj_.InvokeTypes(267, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereArcRevolution', '{8B3A469C-6172-4F76-91BC-34C074A7754A}')
		return ret

	def CreateContactSphereInBox(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a sphere in box contact
		
		:param strName: str
		:param pBaseEntity: IGeometryBox
		:param pActionEntity: IGeometrySphere
		:rtype: recurdyn.ProcessNet.IContactSphereInBox
		'''
		ret = self._oleobj_.InvokeTypes(252, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereInBox', '{EF263E7B-85A1-4B43-97F6-3BD08C9334DB}')
		return ret

	def CreateContactSphereInBox2(self, Name, baseBox, actionSphere):
		'''
		Creates a sphere in box contact
		
		:param Name: str
		:param baseBox: IGeometry
		:param actionSphere: IGeometry
		:rtype: recurdyn.ProcessNet.IContactSphereInBox
		'''
		ret = self._oleobj_.InvokeTypes(379, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseBox, actionSphere)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereInBox2', '{EF263E7B-85A1-4B43-97F6-3BD08C9334DB}')
		return ret

	def CreateContactSphereInCone(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a sphere in cone contact
		
		:param strName: str
		:param pBaseEntity: IGeometryCone
		:param pActionEntity: IGeometrySphere
		:rtype: recurdyn.ProcessNet.IContactSphereInCone
		'''
		ret = self._oleobj_.InvokeTypes(290, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereInCone', '{4D515A5F-EE68-43AD-8C60-6AD2B9DF8D09}')
		return ret

	def CreateContactSphereInCone2(self, Name, baseCone, actionSphere):
		'''
		Creates a sphere in cone contact
		
		:param Name: str
		:param baseCone: IGeometry
		:param actionSphere: IGeometry
		:rtype: recurdyn.ProcessNet.IContactSphereInCone
		'''
		ret = self._oleobj_.InvokeTypes(383, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseCone, actionSphere)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereInCone2', '{4D515A5F-EE68-43AD-8C60-6AD2B9DF8D09}')
		return ret

	def CreateContactSphereInCylinder(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a sphere in cylinder contact
		
		:param strName: str
		:param pBaseEntity: IGeometryCylinder
		:param pActionEntity: IGeometrySphere
		:rtype: recurdyn.ProcessNet.IContactSphereInCylinder
		'''
		ret = self._oleobj_.InvokeTypes(251, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereInCylinder', '{7A5148F6-528B-4BCD-A271-47F8842D6E6C}')
		return ret

	def CreateContactSphereInCylinder2(self, Name, baseCylinder, actionSphere):
		'''
		Creates a sphere in cylinder contact
		
		:param Name: str
		:param baseCylinder: IGeometry
		:param actionSphere: IGeometry
		:rtype: recurdyn.ProcessNet.IContactSphereInCylinder
		'''
		ret = self._oleobj_.InvokeTypes(377, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseCylinder, actionSphere)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereInCylinder2', '{7A5148F6-528B-4BCD-A271-47F8842D6E6C}')
		return ret

	def CreateContactSphereInSphere(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a sphere in sphere contact
		
		:param strName: str
		:param pBaseEntity: IGeometrySphere
		:param pActionEntity: IGeometrySphere
		:rtype: recurdyn.ProcessNet.IContactSphereInSphere
		'''
		ret = self._oleobj_.InvokeTypes(243, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereInSphere', '{B60FAA98-F5DA-4096-B282-4C015E99D9A8}')
		return ret

	def CreateContactSphereInSphere2(self, Name, baseSphere, actionSphere):
		'''
		Creates a sphere in sphere contact
		
		:param Name: str
		:param baseSphere: IGeometry
		:param actionSphere: IGeometry
		:rtype: recurdyn.ProcessNet.IContactSphereInSphere
		'''
		ret = self._oleobj_.InvokeTypes(375, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseSphere, actionSphere)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereInSphere2', '{B60FAA98-F5DA-4096-B282-4C015E99D9A8}')
		return ret

	def CreateContactSphereInTorus(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a sphere in torus contact
		
		:param strName: str
		:param pBaseEntity: IGeometryTorus
		:param pActionEntity: IGeometrySphere
		:rtype: recurdyn.ProcessNet.IContactSphereInTorus
		'''
		ret = self._oleobj_.InvokeTypes(253, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereInTorus', '{6D130ECF-C4B3-4E13-ABDC-7C6023E11A3B}')
		return ret

	def CreateContactSphereInTorus2(self, Name, baseTorus, actionSphere):
		'''
		Creates a sphere in torus contact
		
		:param Name: str
		:param baseTorus: IGeometry
		:param actionSphere: IGeometry
		:rtype: recurdyn.ProcessNet.IContactSphereInTorus
		'''
		ret = self._oleobj_.InvokeTypes(381, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseTorus, actionSphere)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereInTorus2', '{6D130ECF-C4B3-4E13-ABDC-7C6023E11A3B}')
		return ret

	def CreateContactSphereToArcExtrusion(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a sphere to arc extrusion contact
		
		:param strName: str
		:param pBaseEntity: IGeometryArcExtrusion
		:param pActionEntity: IGeometrySphere
		:rtype: recurdyn.ProcessNet.IContactSphereToArcExtrusion
		'''
		ret = self._oleobj_.InvokeTypes(270, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereToArcExtrusion', '{F535B5BD-3EC1-4774-AB37-BF8A82D076C1}')
		return ret

	def CreateContactSphereToArcExtrusion2(self, Name, baseArcExtrusion, actionSphere):
		'''
		Creates a sphere to arc extrusion contact
		
		:param Name: str
		:param baseArcExtrusion: IGeometryArcExtrusion
		:param actionSphere: IGeometry
		:rtype: recurdyn.ProcessNet.IContactSphereToArcExtrusion
		'''
		ret = self._oleobj_.InvokeTypes(385, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseArcExtrusion, actionSphere)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereToArcExtrusion2', '{F535B5BD-3EC1-4774-AB37-BF8A82D076C1}')
		return ret

	def CreateContactSphereToArcRevolution(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a sphere to arc revolution contact
		
		:param strName: str
		:param pBaseEntity: IGeometryArcRevolution
		:param pActionEntity: IGeometrySphere
		:rtype: recurdyn.ProcessNet.IContactSphereToArcRevolution
		'''
		ret = self._oleobj_.InvokeTypes(269, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereToArcRevolution', '{2FACF09B-48C8-4A94-92D7-BF9F43647CB3}')
		return ret

	def CreateContactSphereToArcRevolution2(self, Name, baseArcRevolution, actionSphere):
		'''
		Creates a sphere to arc revolution contact
		
		:param Name: str
		:param baseArcRevolution: IGeometryArcRevolution
		:param actionSphere: IGeometry
		:rtype: recurdyn.ProcessNet.IContactSphereToArcRevolution
		'''
		ret = self._oleobj_.InvokeTypes(384, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseArcRevolution, actionSphere)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereToArcRevolution2', '{2FACF09B-48C8-4A94-92D7-BF9F43647CB3}')
		return ret

	def CreateContactSphereToBox(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a sphere to box contact
		
		:param strName: str
		:param pBaseEntity: IGeometryBox
		:param pActionEntity: IGeometrySphere
		:rtype: recurdyn.ProcessNet.IContactSphereToBox
		'''
		ret = self._oleobj_.InvokeTypes(249, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereToBox', '{32D72143-2B38-4E05-921B-1A1F3282FEB1}')
		return ret

	def CreateContactSphereToBox2(self, Name, baseBox, actionSphere):
		'''
		Creates a sphere to box contact
		
		:param Name: str
		:param baseBox: IGeometry
		:param actionSphere: IGeometry
		:rtype: recurdyn.ProcessNet.IContactSphereToBox
		'''
		ret = self._oleobj_.InvokeTypes(378, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseBox, actionSphere)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereToBox2', '{32D72143-2B38-4E05-921B-1A1F3282FEB1}')
		return ret

	def CreateContactSphereToCone(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a sphere to cone contact
		
		:param strName: str
		:param pBaseEntity: IGeometryCone
		:param pActionEntity: IGeometrySphere
		:rtype: recurdyn.ProcessNet.IContactSphereToCone
		'''
		ret = self._oleobj_.InvokeTypes(264, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereToCone', '{028811A2-89B0-4A54-B105-7682DC7D07DB}')
		return ret

	def CreateContactSphereToCone2(self, Name, baseCone, actionSphere):
		'''
		Creates a sphere to cone contact
		
		:param Name: str
		:param baseCone: IGeometry
		:param actionSphere: IGeometry
		:rtype: recurdyn.ProcessNet.IContactSphereToCone
		'''
		ret = self._oleobj_.InvokeTypes(382, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseCone, actionSphere)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereToCone2', '{028811A2-89B0-4A54-B105-7682DC7D07DB}')
		return ret

	def CreateContactSphereToCylinder(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a sphere to cylinder contact
		
		:param strName: str
		:param pBaseEntity: IGeometryCylinder
		:param pActionEntity: IGeometrySphere
		:rtype: recurdyn.ProcessNet.IContactSphereToCylinder
		'''
		ret = self._oleobj_.InvokeTypes(248, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereToCylinder', '{17DA0A15-1706-4346-8982-C0E9243F866E}')
		return ret

	def CreateContactSphereToCylinder2(self, Name, baseCylinder, actionSphere):
		'''
		Creates a sphere to cylinder contact
		
		:param Name: str
		:param baseCylinder: IGeometry
		:param actionSphere: IGeometry
		:rtype: recurdyn.ProcessNet.IContactSphereToCylinder
		'''
		ret = self._oleobj_.InvokeTypes(376, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseCylinder, actionSphere)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereToCylinder2', '{17DA0A15-1706-4346-8982-C0E9243F866E}')
		return ret

	def CreateContactSphereToSphere(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a sphere to sphere contact
		
		:param strName: str
		:param pBaseEntity: IGeometrySphere
		:param pActionEntity: IGeometrySphere
		:rtype: recurdyn.ProcessNet.IContactSphereToSphere
		'''
		ret = self._oleobj_.InvokeTypes(242, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereToSphere', '{5333486D-3939-4899-8357-62D694707155}')
		return ret

	def CreateContactSphereToSphere2(self, Name, baseSphere, actionSphere):
		'''
		Creates a sphere to sphere contact
		
		:param Name: str
		:param baseSphere: IGeometry
		:param actionSphere: IGeometry
		:rtype: recurdyn.ProcessNet.IContactSphereToSphere
		'''
		ret = self._oleobj_.InvokeTypes(374, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseSphere, actionSphere)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereToSphere2', '{5333486D-3939-4899-8357-62D694707155}')
		return ret

	def CreateContactSphereToSurface(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a sphere to surface contact
		
		:param strName: str
		:param pBaseEntity: IGeometry
		:param pActionEntity: IGeometrySphere
		:rtype: recurdyn.ProcessNet.IContactSphereToSurface
		'''
		ret = self._oleobj_.InvokeTypes(244, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereToSurface', '{8928F336-9095-49D0-9AAC-1D599E3F26A7}')
		return ret

	def CreateContactSphereToSurface2(self, Name, baseSurface, actionSphere):
		'''
		Creates a sphere to surface contact
		
		:param Name: str
		:param baseSurface: IGeometry
		:param actionSphere: IGeometry
		:rtype: recurdyn.ProcessNet.IContactSphereToSurface
		'''
		ret = self._oleobj_.InvokeTypes(386, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseSurface, actionSphere)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereToSurface2', '{8928F336-9095-49D0-9AAC-1D599E3F26A7}')
		return ret

	def CreateContactSphereToTorus(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a sphere to torus contact
		
		:param strName: str
		:param pBaseEntity: IGeometryTorus
		:param pActionEntity: IGeometrySphere
		:rtype: recurdyn.ProcessNet.IContactSphereToTorus
		'''
		ret = self._oleobj_.InvokeTypes(250, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereToTorus', '{15C4A86F-4FC5-4305-87EF-918AEB6C9B8D}')
		return ret

	def CreateContactSphereToTorus2(self, Name, baseTorus, actionSphere):
		'''
		Creates a sphere to torus contact
		
		:param Name: str
		:param baseTorus: IGeometry
		:param actionSphere: IGeometry
		:rtype: recurdyn.ProcessNet.IContactSphereToTorus
		'''
		ret = self._oleobj_.InvokeTypes(380, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),Name
			, baseTorus, actionSphere)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSphereToTorus2', '{15C4A86F-4FC5-4305-87EF-918AEB6C9B8D}')
		return ret

	def CreateContactSurfaceToSurface(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a surface to surface contact
		
		:param strName: str
		:param pBaseEntity: IGeometry
		:param pActionEntity: IGeometry
		:rtype: recurdyn.ProcessNet.IContactSurfaceToSurface
		'''
		ret = self._oleobj_.InvokeTypes(266, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactSurfaceToSurface', '{1D599359-EBA8-4D8D-A611-6EEBABBF5BB0}')
		return ret

	def CreateContactUVSurfaceToSphere(self, strName, pBaseEntity, pActionEntity):
		'''
		Creates a UV Surface to Sphere contact
		
		:param strName: str
		:param pBaseEntity: IGeometry
		:param pActionEntity: IGeometry
		:rtype: recurdyn.ProcessNet.IContactUVSurface
		'''
		ret = self._oleobj_.InvokeTypes(540, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateContactUVSurfaceToSphere', '{50DC0F54-508C-4B1A-825F-EEF9288B6828}')
		return ret

	def CreateDesignVariable(self, strName, ParametricValue):
		'''
		Create a design variable
		
		:param strName: str
		:param ParametricValue: IParametricValue
		:rtype: recurdyn.ProcessNet.IDesignVariable
		'''
		ret = self._oleobj_.InvokeTypes(273, LCID, 1, (9, 0), ((8, 1), (9, 1)),strName
			, ParametricValue)
		if ret is not None:
			ret = Dispatch(ret, 'CreateDesignVariable', '{44DA6D75-D10A-48E2-8077-5D9B9293842D}')
		return ret

	def CreateDifferentialEquation(self, strName, enType, pExpression):
		'''
		Creates a differential equation
		
		:param strName: str
		:param enType: DifferentialEquationFunctionType
		:param pExpression: IExpression
		:rtype: recurdyn.ProcessNet.IDifferentialEquation
		'''
		ret = self._oleobj_.InvokeTypes(278, LCID, 1, (9, 0), ((8, 1), (3, 1), (9, 1)),strName
			, enType, pExpression)
		if ret is not None:
			ret = Dispatch(ret, 'CreateDifferentialEquation', '{591F39F5-FBE0-49DF-83B6-6C0550D95A6A}')
		return ret

	def CreateDifferentialEquationWithUserSubroutine(self, strName, enType, pUserSubroutine):
		'''
		Creates a differential equation with user subroutine
		
		:param strName: str
		:param enType: DifferentialEquationFunctionType
		:param pUserSubroutine: IUserSubroutine
		:rtype: recurdyn.ProcessNet.IDifferentialEquation
		'''
		ret = self._oleobj_.InvokeTypes(279, LCID, 1, (9, 0), ((8, 1), (3, 1), (9, 1)),strName
			, enType, pUserSubroutine)
		if ret is not None:
			ret = Dispatch(ret, 'CreateDifferentialEquationWithUserSubroutine', '{591F39F5-FBE0-49DF-83B6-6C0550D95A6A}')
		return ret

	def CreateExpression(self, strName, strExpression):
		'''
		Creates an expression
		
		:param strName: str
		:param strExpression: str
		:rtype: recurdyn.ProcessNet.IExpression
		'''
		ret = self._oleobj_.InvokeTypes(280, LCID, 1, (9, 0), ((8, 1), (8, 1)),strName
			, strExpression)
		if ret is not None:
			ret = Dispatch(ret, 'CreateExpression', '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')
		return ret

	def CreateExpressionWithArguments(self, strName, strExpression, strArgument):
		'''
		Creates an expression
		
		:param strName: str
		:param strExpression: str
		:param strArgument: list[str]
		:rtype: recurdyn.ProcessNet.IExpression
		'''
		ret = self._oleobj_.InvokeTypes(493, LCID, 1, (9, 0), ((8, 1), (8, 1), (8200, 1)),strName
			, strExpression, strArgument)
		if ret is not None:
			ret = Dispatch(ret, 'CreateExpressionWithArguments', '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')
		return ret

	def CreateForceAxial(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates an axial force
		
		:param strName: str
		:param pBaseEntity: IBody
		:param pActionEntity: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceAxial
		'''
		ret = self._oleobj_.InvokeTypes(212, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceAxial', '{960E870B-7C56-4FF5-95DE-E735C751F8E7}')
		return ret

	def CreateForceAxialEx(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates an axial force
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceAxial
		'''
		ret = self._oleobj_.InvokeTypes(331, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceAxialEx', '{960E870B-7C56-4FF5-95DE-E735C751F8E7}')
		return ret

	def CreateForceBeam(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a beam force
		
		:param strName: str
		:param pBaseEntity: IBody
		:param pActionEntity: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceBeam
		'''
		ret = self._oleobj_.InvokeTypes(222, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceBeam', '{53C512F8-E418-4F65-9755-271B9A6F59E0}')
		return ret

	def CreateForceBeamEx(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a beam force
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceBeam
		'''
		ret = self._oleobj_.InvokeTypes(339, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceBeamEx', '{53C512F8-E418-4F65-9755-271B9A6F59E0}')
		return ret

	def CreateForceBeamExWithRefAdjustment(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a beam force
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceBeam
		'''
		ret = self._oleobj_.InvokeTypes(510, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceBeamExWithRefAdjustment', '{53C512F8-E418-4F65-9755-271B9A6F59E0}')
		return ret

	def CreateForceBeamWithRefAdjustment(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a beam force
		
		:param strName: str
		:param pBaseEntity: IBody
		:param pActionEntity: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceBeam
		'''
		ret = self._oleobj_.InvokeTypes(509, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceBeamWithRefAdjustment', '{53C512F8-E418-4F65-9755-271B9A6F59E0}')
		return ret

	def CreateForceBushing(self, strName, pBaseEntity, pActionEntity, pRefFrame):
		'''
		Creates a bushing force
		
		:param strName: str
		:param pBaseEntity: IBody
		:param pActionEntity: IBody
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceBushing
		'''
		ret = self._oleobj_.InvokeTypes(216, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceBushing', '{54235E69-8E20-4D33-8A62-623CCD9C87AA}')
		return ret

	def CreateForceBushingEx(self, strName, pBaseEntity, pActionEntity, pRefFrame):
		'''
		Creates a bushing force
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceBushing
		'''
		ret = self._oleobj_.InvokeTypes(335, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceBushingEx', '{54235E69-8E20-4D33-8A62-623CCD9C87AA}')
		return ret

	def CreateForceMatrix(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a matrix force
		
		:param strName: str
		:param pBaseEntity: IBody
		:param pActionEntity: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceMatrix
		'''
		ret = self._oleobj_.InvokeTypes(217, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceMatrix', '{5A0426A9-C465-48F7-9456-7F6008CB0A7E}')
		return ret

	def CreateForceMatrixEx(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a matrix force
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceMatrix
		'''
		ret = self._oleobj_.InvokeTypes(336, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceMatrixEx', '{5A0426A9-C465-48F7-9456-7F6008CB0A7E}')
		return ret

	def CreateForceMatrixWithNodeOrBody(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a matrix force with node or body
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceMatrix
		'''
		ret = self._oleobj_.InvokeTypes(361, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceMatrixWithNodeOrBody', '{5A0426A9-C465-48F7-9456-7F6008CB0A7E}')
		return ret

	def CreateForcePlate(self, strName, pEntity1, pEntity2, pEntity3, pEntity4, pRefFrame1, pRefFrame2, pRefFrame3, pRefFrame4):
		'''
		Creates a plate force
		
		:param strName: str
		:param pEntity1: IBody
		:param pEntity2: IBody
		:param pEntity3: IBody
		:param pEntity4: IBody
		:param pRefFrame1: IReferenceFrame
		:param pRefFrame2: IReferenceFrame
		:param pRefFrame3: IReferenceFrame
		:param pRefFrame4: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForcePlate
		'''
		ret = self._oleobj_.InvokeTypes(223, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pEntity1, pEntity2, pEntity3, pEntity4, pRefFrame1
			, pRefFrame2, pRefFrame3, pRefFrame4)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForcePlate', '{64E1EBEB-71A0-4986-90F3-8C0B77A3F88B}')
		return ret

	def CreateForcePlateEx(self, strName, pEntity1, pEntity2, pEntity3, pEntity4, pRefFrame1, pRefFrame2, pRefFrame3, pRefFrame4):
		'''
		Creates a plate force
		
		:param strName: str
		:param pEntity1: IGeneric
		:param pEntity2: IGeneric
		:param pEntity3: IGeneric
		:param pEntity4: IGeneric
		:param pRefFrame1: IReferenceFrame
		:param pRefFrame2: IReferenceFrame
		:param pRefFrame3: IReferenceFrame
		:param pRefFrame4: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForcePlate
		'''
		ret = self._oleobj_.InvokeTypes(340, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pEntity1, pEntity2, pEntity3, pEntity4, pRefFrame1
			, pRefFrame2, pRefFrame3, pRefFrame4)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForcePlateEx', '{64E1EBEB-71A0-4986-90F3-8C0B77A3F88B}')
		return ret

	def CreateForceRotational(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a rotational force
		
		:param strName: str
		:param pBaseEntity: IBody
		:param pActionEntity: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceRotational
		'''
		ret = self._oleobj_.InvokeTypes(214, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceRotational', '{52BFD3CF-4CC9-4ECE-9B8C-E7A28EF9D4A2}')
		return ret

	def CreateForceRotationalAxialWithBody(self, strName, pBaseEntity, pActionEntity, pRefFrame):
		'''
		Creates a rotational axial force with body
		
		:param strName: str
		:param pBaseEntity: IBody
		:param pActionEntity: IBody
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceAxialRotational
		'''
		ret = self._oleobj_.InvokeTypes(221, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceRotationalAxialWithBody', '{65024A22-5502-4F83-83D1-8C0EE0CE1712}')
		return ret

	def CreateForceRotationalAxialWithBodyEx(self, strName, pBaseEntity, pActionEntity, pRefFrame):
		'''
		Creates a rotational axial force with body
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceAxialRotational
		'''
		ret = self._oleobj_.InvokeTypes(338, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceRotationalAxialWithBodyEx', '{65024A22-5502-4F83-83D1-8C0EE0CE1712}')
		return ret

	def CreateForceRotationalAxialWithJoint(self, strName, pExtendedJoint):
		'''
		Creates a rotational axial force with joint
		
		:param strName: str
		:param pExtendedJoint: IJoint
		:rtype: recurdyn.ProcessNet.IForceAxialRotational
		'''
		ret = self._oleobj_.InvokeTypes(220, LCID, 1, (9, 0), ((8, 1), (9, 1)),strName
			, pExtendedJoint)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceRotationalAxialWithJoint', '{65024A22-5502-4F83-83D1-8C0EE0CE1712}')
		return ret

	def CreateForceRotationalEx(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a rotational force
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceRotational
		'''
		ret = self._oleobj_.InvokeTypes(333, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceRotationalEx', '{52BFD3CF-4CC9-4ECE-9B8C-E7A28EF9D4A2}')
		return ret

	def CreateForceRotationalSpringWithBody(self, strName, pBaseEntity, pActionEntity, pRefFrame):
		'''
		Creates a rotational spring force with body
		
		:param strName: str
		:param pBaseEntity: IBody
		:param pActionEntity: IBody
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceSpringRotational
		'''
		ret = self._oleobj_.InvokeTypes(219, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceRotationalSpringWithBody', '{C5BE32C6-5CCE-4BAF-B0BF-4B304BFEC2C5}')
		return ret

	def CreateForceRotationalSpringWithBodyEx(self, strName, pBaseEntity, pActionEntity, pRefFrame):
		'''
		Creates a rotational spring force with body
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceSpringRotational
		'''
		ret = self._oleobj_.InvokeTypes(337, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceRotationalSpringWithBodyEx', '{C5BE32C6-5CCE-4BAF-B0BF-4B304BFEC2C5}')
		return ret

	def CreateForceRotationalSpringWithJoint(self, strName, pRevJoint):
		'''
		Creates a rotational spring force with joint
		
		:param strName: str
		:param pRevJoint: IJoint
		:rtype: recurdyn.ProcessNet.IForceSpringRotational
		'''
		ret = self._oleobj_.InvokeTypes(218, LCID, 1, (9, 0), ((8, 1), (9, 1)),strName
			, pRevJoint)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceRotationalSpringWithJoint', '{C5BE32C6-5CCE-4BAF-B0BF-4B304BFEC2C5}')
		return ret

	def CreateForceScrew(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a screw force
		
		:param strName: str
		:param pBaseEntity: IBody
		:param pActionEntity: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceScrew
		'''
		ret = self._oleobj_.InvokeTypes(215, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceScrew', '{D996544C-0967-4920-83A6-A3C9FB97E153}')
		return ret

	def CreateForceScrewEx(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a screw force
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceScrew
		'''
		ret = self._oleobj_.InvokeTypes(334, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceScrewEx', '{D996544C-0967-4920-83A6-A3C9FB97E153}')
		return ret

	def CreateForceSpring(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a spring force
		
		:param strName: str
		:param pBaseEntity: IBody
		:param pActionEntity: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceSpring
		'''
		ret = self._oleobj_.InvokeTypes(211, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceSpring', '{164BA461-0C9B-4F07-A027-C82298891823}')
		return ret

	def CreateForceSpringEx(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a spring force
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceSpring
		'''
		ret = self._oleobj_.InvokeTypes(330, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceSpringEx', '{164BA461-0C9B-4F07-A027-C82298891823}')
		return ret

	def CreateForceTireGround(self, strName, pActionEntity, pRefFrame):
		'''
		Creates a tire force ground
		
		:param strName: str
		:param pActionEntity: IBody
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceTire
		'''
		ret = self._oleobj_.InvokeTypes(224, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pActionEntity, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceTireGround', '{57CC4E39-380C-40B8-AE7F-0908ADC0DB18}')
		return ret

	def CreateForceTireGroundEx(self, strName, pActionEntity, pRefFrame):
		'''
		Creates a tire force ground
		
		:param strName: str
		:param pActionEntity: IGeneric
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceTire
		'''
		ret = self._oleobj_.InvokeTypes(341, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pActionEntity, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceTireGroundEx', '{57CC4E39-380C-40B8-AE7F-0908ADC0DB18}')
		return ret

	def CreateForceTireSolidContact(self, strName, pBaseEntity, pActionEntity, pRefFrame):
		'''
		Creates a tire force solid contact
		
		:param strName: str
		:param pBaseEntity: IGeometry
		:param pActionEntity: IGeometry
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceTire
		'''
		ret = self._oleobj_.InvokeTypes(225, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceTireSolidContact', '{57CC4E39-380C-40B8-AE7F-0908ADC0DB18}')
		return ret

	def CreateForceTranslational(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a translational force
		
		:param strName: str
		:param pBaseEntity: IBody
		:param pActionEntity: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceTranslational
		'''
		ret = self._oleobj_.InvokeTypes(213, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceTranslational', '{F82CE83C-C5A5-42AC-867F-079BCF051FEA}')
		return ret

	def CreateForceTranslationalEx(self, strName, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a translational force
		
		:param strName: str
		:param pBaseEntity: IGeneric
		:param pActionEntity: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IForceTranslational
		'''
		ret = self._oleobj_.InvokeTypes(332, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseEntity, pActionEntity, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateForceTranslationalEx', '{F82CE83C-C5A5-42AC-867F-079BCF051FEA}')
		return ret

	def CreateGeneralConstraint(self, strName, pExpression):
		'''
		Creates a general constraint
		
		:param strName: str
		:param pExpression: IExpression
		:rtype: recurdyn.ProcessNet.IGeneralConstraint
		'''
		ret = self._oleobj_.InvokeTypes(512, LCID, 1, (9, 0), ((8, 1), (9, 1)),strName
			, pExpression)
		if ret is not None:
			ret = Dispatch(ret, 'CreateGeneralConstraint', '{DF992967-ADE4-434E-B7BA-DDA5B595BD44}')
		return ret

	def CreateGroupBeamWithCurve(self, strName, pGeo, UseTotalSegment, uiMeshSegment):
		'''
		Creates a beam group with curve
		
		:param strName: str
		:param pGeo: IGeometryWire
		:param UseTotalSegment: bool
		:param uiMeshSegment: int
		:rtype: recurdyn.ProcessNet.IGroupBeam
		'''
		ret = self._oleobj_.InvokeTypes(528, LCID, 1, (9, 0), ((8, 1), (9, 1), (11, 1), (19, 1)),strName
			, pGeo, UseTotalSegment, uiMeshSegment)
		if ret is not None:
			ret = Dispatch(ret, 'CreateGroupBeamWithCurve', '{E30FCF4E-CD27-4F1D-B463-B7CD3E2AEF12}')
		return ret

	def CreateGroupBeamWithPoints(self, strName, pMultiPoints, bSpline, UseTotalSegment, uiMeshSegment):
		'''
		Creates a beam group with points
		
		:param strName: str
		:param pMultiPoints: list[object]
		:param bSpline: bool
		:param UseTotalSegment: bool
		:param uiMeshSegment: int
		:rtype: recurdyn.ProcessNet.IGroupBeam
		'''
		_pMultiPoints_type = True if pMultiPoints and isinstance(pMultiPoints[0], win32com.client.VARIANT) else False
		if not _pMultiPoints_type:
			pMultiPoints = [win32com.client.VARIANT(12, _data) for _data in pMultiPoints]

		ret = self._oleobj_.InvokeTypes(526, LCID, 1, (9, 0), ((8, 1), (8204, 1), (11, 1), (11, 1), (19, 1)),strName
			, pMultiPoints, bSpline, UseTotalSegment, uiMeshSegment)

		if not _pMultiPoints_type:
			pMultiPoints = [_data.value for _data in pMultiPoints]

		if ret is not None:
			ret = Dispatch(ret, 'CreateGroupBeamWithPoints', '{E30FCF4E-CD27-4F1D-B463-B7CD3E2AEF12}')
		return ret

	def CreateGroupGeneral(self, strName, arrayEntity):
		'''
		Creates a general group
		
		:param strName: str
		:param arrayEntity: list[object]
		:rtype: recurdyn.ProcessNet.IGroupGeneral
		'''
		_arrayEntity_type = True if arrayEntity and isinstance(arrayEntity[0], win32com.client.VARIANT) else False
		if not _arrayEntity_type:
			arrayEntity = [win32com.client.VARIANT(12, _data) for _data in arrayEntity]

		ret = self._oleobj_.InvokeTypes(535, LCID, 1, (9, 0), ((8, 1), (8204, 1)),strName
			, arrayEntity)

		if not _arrayEntity_type:
			arrayEntity = [_data.value for _data in arrayEntity]

		if ret is not None:
			ret = Dispatch(ret, 'CreateGroupGeneral', '{3A5D8137-A29F-4A12-BADB-578397A6A582}')
		return ret

	def CreateJointAtpoint(self, strName, pBaseBody, pActionBody, pRefFrame):
		'''
		Creates an atpoint joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointAtpoint
		'''
		ret = self._oleobj_.InvokeTypes(191, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointAtpoint', '{ADED6BDA-80A4-4D1E-824C-A999B0402A7B}')
		return ret

	def CreateJointAtpointEx(self, strName, pBaseBody, pActionBody, pRefFrame):
		'''
		Creates an atpoint joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointAtpoint
		'''
		ret = self._oleobj_.InvokeTypes(313, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointAtpointEx', '{ADED6BDA-80A4-4D1E-824C-A999B0402A7B}')
		return ret

	def CreateJointCartesianMotion(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a Cartesian motion Joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointCartesianMotion
		'''
		ret = self._oleobj_.InvokeTypes(203, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointCartesianMotion', '{57A77C2D-5956-4DBE-9893-820E0EA5D034}')
		return ret

	def CreateJointCartesianMotionEx(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a Cartesian motion Joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointCartesianMotion
		'''
		ret = self._oleobj_.InvokeTypes(320, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointCartesianMotionEx', '{57A77C2D-5956-4DBE-9893-820E0EA5D034}')
		return ret

	def CreateJointCartesianMotionGroup(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a Group of cartesian motion joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IGroupJointCMotion
		'''
		ret = self._oleobj_.InvokeTypes(522, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointCartesianMotionGroup', '{3B70037A-B51F-46A7-AB2B-971989A06803}')
		return ret

	def CreateJointConstantVelocity(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a constant velocity joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointConstantVelocity
		'''
		ret = self._oleobj_.InvokeTypes(199, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointConstantVelocity', '{F6D08556-99B4-4761-89E0-D33956DF5776}')
		return ret

	def CreateJointConstantVelocityEx(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a constant velocity joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointConstantVelocity
		'''
		ret = self._oleobj_.InvokeTypes(319, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointConstantVelocityEx', '{F6D08556-99B4-4761-89E0-D33956DF5776}')
		return ret

	def CreateJointCurveOnCurve(self, strName, pBaseCurve, pActionCurve, pRefFrame):
		'''
		Creates a curve on curve joint
		
		:param strName: str
		:param pBaseCurve: IGeometry
		:param pActionCurve: IGeometry
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointCurveOnCurve
		'''
		ret = self._oleobj_.InvokeTypes(198, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseCurve, pActionCurve, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointCurveOnCurve', '{6BFD6484-AB37-4091-B840-C453D24051CC}')
		return ret

	def CreateJointCylindrical(self, strName, pBaseBody, pActionBody, pRefFrame):
		'''
		Creates a cylindrical joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointCylindrical
		'''
		ret = self._oleobj_.InvokeTypes(184, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointCylindrical', '{D89EE062-1A3F-4FE7-915C-8A7D7F4792F0}')
		return ret

	def CreateJointCylindricalEx(self, strName, pBaseBody, pActionBody, pRefFrame):
		'''
		Creates a cylindrical joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointCylindrical
		'''
		ret = self._oleobj_.InvokeTypes(324, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointCylindricalEx', '{D89EE062-1A3F-4FE7-915C-8A7D7F4792F0}')
		return ret

	def CreateJointDistance(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a distance joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointDistance
		'''
		ret = self._oleobj_.InvokeTypes(190, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointDistance', '{2ED808B6-A890-4694-A37C-E8E2E44BCD41}')
		return ret

	def CreateJointDistanceEx(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a distance joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointDistance
		'''
		ret = self._oleobj_.InvokeTypes(312, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointDistanceEx', '{2ED808B6-A890-4694-A37C-E8E2E44BCD41}')
		return ret

	def CreateJointFixed(self, strName, pBaseBody, pActionBody, pRefFrame):
		'''
		Creates a fixed joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointFixed
		'''
		ret = self._oleobj_.InvokeTypes(189, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointFixed', '{2EA33375-B6DB-4F9D-A3B3-B86A2C91BEDA}')
		return ret

	def CreateJointFixedEx(self, strName, pBaseBody, pActionBody, pRefFrame):
		'''
		Creates a fixed joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointFixed
		'''
		ret = self._oleobj_.InvokeTypes(311, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointFixedEx', '{2EA33375-B6DB-4F9D-A3B3-B86A2C91BEDA}')
		return ret

	def CreateJointInline(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates an inline joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointInline
		'''
		ret = self._oleobj_.InvokeTypes(192, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointInline', '{002ECEBC-0D7D-40DE-9F2C-D6F88E5511C6}')
		return ret

	def CreateJointInlineEx(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates an inline joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointInline
		'''
		ret = self._oleobj_.InvokeTypes(314, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointInlineEx', '{002ECEBC-0D7D-40DE-9F2C-D6F88E5511C6}')
		return ret

	def CreateJointInplane(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates an inplane joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointInplane
		'''
		ret = self._oleobj_.InvokeTypes(193, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointInplane', '{C3E0D80D-8C4D-4DA8-9206-5A7A83435267}')
		return ret

	def CreateJointInplaneEx(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates an inplane joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointInplane
		'''
		ret = self._oleobj_.InvokeTypes(315, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointInplaneEx', '{C3E0D80D-8C4D-4DA8-9206-5A7A83435267}')
		return ret

	def CreateJointOnOff(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a on off Joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointOnOff
		'''
		ret = self._oleobj_.InvokeTypes(204, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 0)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointOnOff', '{3509B78D-BB70-4F88-8A48-BA852F3658BE}')
		return ret

	def CreateJointOnOffEx(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a on off Joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointOnOff
		'''
		ret = self._oleobj_.InvokeTypes(549, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 0)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointOnOffEx', '{3509B78D-BB70-4F88-8A48-BA852F3658BE}')
		return ret

	def CreateJointOrientation(self, strName, pBaseBody, pActionBody, pRefFrame):
		'''
		Creates an orientation joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointOrientation
		'''
		ret = self._oleobj_.InvokeTypes(194, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointOrientation', '{92F68679-E702-4BF4-B969-546E11BECC63}')
		return ret

	def CreateJointOrientationEx(self, strName, pBaseBody, pActionBody, pRefFrame):
		'''
		Creates an orientation joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointOrientation
		'''
		ret = self._oleobj_.InvokeTypes(316, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointOrientationEx', '{92F68679-E702-4BF4-B969-546E11BECC63}')
		return ret

	def CreateJointParallel(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a parallel joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointParallel
		'''
		ret = self._oleobj_.InvokeTypes(195, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointParallel', '{54101676-0190-44F2-837F-2CFAFB8A11D2}')
		return ret

	def CreateJointParallelEx(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a parallel joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointParallel
		'''
		ret = self._oleobj_.InvokeTypes(317, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointParallelEx', '{54101676-0190-44F2-837F-2CFAFB8A11D2}')
		return ret

	def CreateJointPerpendicular(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a perpendicular joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointPerpendicular
		'''
		ret = self._oleobj_.InvokeTypes(196, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointPerpendicular', '{40F4819B-5A72-4CFE-9F7E-1695A1B677C7}')
		return ret

	def CreateJointPerpendicularEx(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a perpendicular joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointPerpendicular
		'''
		ret = self._oleobj_.InvokeTypes(318, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointPerpendicularEx', '{40F4819B-5A72-4CFE-9F7E-1695A1B677C7}')
		return ret

	def CreateJointPlanar(self, strName, pBaseBody, pActionBody, pRefFrame):
		'''
		Creates a planar joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointPlanar
		'''
		ret = self._oleobj_.InvokeTypes(186, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointPlanar', '{773D31B3-5540-4497-BDCA-D37CCC40E156}')
		return ret

	def CreateJointPlanarEx(self, strName, pBaseBody, pActionBody, pRefFrame):
		'''
		Creates a planar joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointPlanar
		'''
		ret = self._oleobj_.InvokeTypes(326, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointPlanarEx', '{773D31B3-5540-4497-BDCA-D37CCC40E156}')
		return ret

	def CreateJointPointOnCurve(self, strName, pBaseCurve, pActionBody, pRefFrame):
		'''
		Creates a point on curve joint
		
		:param strName: str
		:param pBaseCurve: IGeometry
		:param pActionBody: IBody
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointPointOnCurve
		'''
		ret = self._oleobj_.InvokeTypes(197, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseCurve, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointPointOnCurve', '{0D91A8ED-1B56-40C7-8FFB-26542A0F4269}')
		return ret

	def CreateJointPointOnCurveEx(self, strName, pBaseCurve, pActionBody, pRefFrame):
		'''
		Creates a point on curve joint
		
		:param strName: str
		:param pBaseCurve: IGeometry
		:param pActionBody: IGeneric
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointPointOnCurve
		'''
		ret = self._oleobj_.InvokeTypes(550, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseCurve, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointPointOnCurveEx', '{0D91A8ED-1B56-40C7-8FFB-26542A0F4269}')
		return ret

	def CreateJointPointOnSurface(self, strName, pBaseSurface, pActionBody, pRefFrame):
		'''
		Creates a point on surface joint
		
		:param strName: str
		:param pBaseSurface: IGeometry
		:param pActionBody: IBody
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointPointOnSurface
		'''
		ret = self._oleobj_.InvokeTypes(544, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseSurface, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointPointOnSurface', '{C50A037D-F57E-4236-9597-ED57084B0581}')
		return ret

	def CreateJointPointOnSurfaceEx(self, strName, pBaseSurface, pActionBody, pRefFrame):
		'''
		Creates a point on surface joint
		
		:param strName: str
		:param pBaseSurface: IGeometry
		:param pActionBody: IGeneric
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointPointOnSurface
		'''
		ret = self._oleobj_.InvokeTypes(551, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseSurface, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointPointOnSurfaceEx', '{C50A037D-F57E-4236-9597-ED57084B0581}')
		return ret

	def CreateJointRevolute(self, strName, pBaseBody, pActionBody, pRefFrame):
		'''
		Creates a revolute joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointRevolute
		'''
		ret = self._oleobj_.InvokeTypes(181, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointRevolute', '{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}')
		return ret

	def CreateJointRevoluteEx(self, strName, pBaseBody, pActionBody, pRefFrame):
		'''
		Creates a revolute joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointRevolute
		'''
		ret = self._oleobj_.InvokeTypes(321, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointRevoluteEx', '{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}')
		return ret

	def CreateJointScrew(self, strName, pBaseBody, pActionBody, pRefFrame, dPitch):
		'''
		Creates a screw joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pRefFrame: IReferenceFrame
		:param dPitch: float
		:rtype: recurdyn.ProcessNet.IJointScrew
		'''
		ret = self._oleobj_.InvokeTypes(188, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (5, 1)),strName
			, pBaseBody, pActionBody, pRefFrame, dPitch)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointScrew', '{B6C04DD4-89BA-4A08-9071-9AACD3E4C0F9}')
		return ret

	def CreateJointScrewEx(self, strName, pBaseBody, pActionBody, pRefFrame, dPitch):
		'''
		Creates a screw joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pRefFrame: IReferenceFrame
		:param dPitch: float
		:rtype: recurdyn.ProcessNet.IJointScrew
		'''
		ret = self._oleobj_.InvokeTypes(327, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (5, 1)),strName
			, pBaseBody, pActionBody, pRefFrame, dPitch)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointScrewEx', '{B6C04DD4-89BA-4A08-9071-9AACD3E4C0F9}')
		return ret

	def CreateJointSpherical(self, strName, pBaseBody, pActionBody, pRefFrame):
		'''
		Creates a spherical joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointSpherical
		'''
		ret = self._oleobj_.InvokeTypes(183, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointSpherical', '{206C4CC5-E70A-4F3C-A4FD-2D6B2EEE1F5C}')
		return ret

	def CreateJointSphericalEx(self, strName, pBaseBody, pActionBody, pRefFrame):
		'''
		Creates a spherical joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointSpherical
		'''
		ret = self._oleobj_.InvokeTypes(323, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointSphericalEx', '{206C4CC5-E70A-4F3C-A4FD-2D6B2EEE1F5C}')
		return ret

	def CreateJointTranslational(self, strName, pBaseBody, pActionBody, pRefFrame):
		'''
		Creates a translational joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointTranslational
		'''
		ret = self._oleobj_.InvokeTypes(182, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointTranslational', '{07101FE1-4B6A-41CA-9FC7-3C48C9E96785}')
		return ret

	def CreateJointTranslationalEx(self, strName, pBaseBody, pActionBody, pRefFrame):
		'''
		Creates a translational joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointTranslational
		'''
		ret = self._oleobj_.InvokeTypes(322, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointTranslationalEx', '{07101FE1-4B6A-41CA-9FC7-3C48C9E96785}')
		return ret

	def CreateJointUniversal(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a universal joint
		
		:param strName: str
		:param pBaseBody: IBody
		:param pActionBody: IBody
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointUniversal
		'''
		ret = self._oleobj_.InvokeTypes(185, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointUniversal', '{04E99CDC-64B1-42F2-B981-EC91848B39F6}')
		return ret

	def CreateJointUniversalEx(self, strName, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame):
		'''
		Creates a universal joint
		
		:param strName: str
		:param pBaseBody: IGeneric
		:param pActionBody: IGeneric
		:param pBaseRefFrame: IReferenceFrame
		:param pActionRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IJointUniversal
		'''
		ret = self._oleobj_.InvokeTypes(325, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseBody, pActionBody, pBaseRefFrame, pActionRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateJointUniversalEx', '{04E99CDC-64B1-42F2-B981-EC91848B39F6}')
		return ret

	def CreateMarker(self, strName, pBody, pRefFrame):
		'''
		Creates a marker
		
		:param strName: str
		:param pBody: IBody
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IMarker
		'''
		ret = self._oleobj_.InvokeTypes(163, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pBody, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateMarker', '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')
		return ret

	def CreateMarkerWithPointPoint(self, strName, pBody, pFirstPoint, pSecondPoint):
		'''
		Creates a marker with two points
		
		:param strName: str
		:param pBody: IBody
		:param pFirstPoint: list[float]
		:param pSecondPoint: list[float]
		:rtype: recurdyn.ProcessNet.IMarker
		'''
		ret = self._oleobj_.InvokeTypes(170, LCID, 1, (9, 0), ((8, 1), (9, 1), (8197, 1), (8197, 1)),strName
			, pBody, pFirstPoint, pSecondPoint)
		if ret is not None:
			ret = Dispatch(ret, 'CreateMarkerWithPointPoint', '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')
		return ret

	def CreateMaterialProperty(self, strName, dDensity, dYoungsModulus, dPoissonRatio):
		'''
		Creates a material property
		
		:param strName: str
		:param dDensity: float
		:param dYoungsModulus: float
		:param dPoissonRatio: float
		:rtype: recurdyn.ProcessNet.IMaterialProperty
		'''
		ret = self._oleobj_.InvokeTypes(287, LCID, 1, (9, 0), ((8, 1), (5, 1), (5, 1), (5, 1)),strName
			, dDensity, dYoungsModulus, dPoissonRatio)
		if ret is not None:
			ret = Dispatch(ret, 'CreateMaterialProperty', '{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}')
		return ret

	def CreatePairConstraintCoupler(self, strName, pDriverJoint, pCouplerJoint):
		'''
		Creates a coupler constraint
		
		:param strName: str
		:param pDriverJoint: IJoint
		:param pCouplerJoint: IJoint
		:rtype: recurdyn.ProcessNet.IPairConstraintCoupler
		'''
		ret = self._oleobj_.InvokeTypes(200, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pDriverJoint, pCouplerJoint)
		if ret is not None:
			ret = Dispatch(ret, 'CreatePairConstraintCoupler', '{842283CC-9684-472C-B061-E5659014C471}')
		return ret

	def CreatePairConstraintCouplerWithTwoCoupledJoint(self, strName, pDriverJoint, pCouplerJoint1, pCouplerJoint2):
		'''
		Creates a coupler constraint with two coupled joints
		
		:param strName: str
		:param pDriverJoint: IJoint
		:param pCouplerJoint1: IJoint
		:param pCouplerJoint2: IJoint
		:rtype: recurdyn.ProcessNet.IPairConstraintCoupler
		'''
		ret = self._oleobj_.InvokeTypes(201, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pDriverJoint, pCouplerJoint1, pCouplerJoint2)
		if ret is not None:
			ret = Dispatch(ret, 'CreatePairConstraintCouplerWithTwoCoupledJoint', '{842283CC-9684-472C-B061-E5659014C471}')
		return ret

	def CreatePairConstraintGear(self, strName, pBaseJoint, pActionJoint, pBaseRefFrame):
		'''
		Creates a gear constraint
		
		:param strName: str
		:param pBaseJoint: IJointRevolute
		:param pActionJoint: IJointRevolute
		:param pBaseRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.IPairConstraintGear
		'''
		ret = self._oleobj_.InvokeTypes(202, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pBaseJoint, pActionJoint, pBaseRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreatePairConstraintGear', '{D56837DF-B61D-4938-A25D-02A0B67193C8}')
		return ret

	def CreateParametricPoint(self, strName, pPoint, pRefMarker):
		'''
		Creates a parametric point
		
		:param strName: str
		:param pPoint: list[float]
		:param pRefMarker: IMarker
		:rtype: recurdyn.ProcessNet.IParametricPoint
		'''
		ret = self._oleobj_.InvokeTypes(271, LCID, 1, (9, 0), ((8, 1), (8197, 1), (9, 1)),strName
			, pPoint, pRefMarker)
		if ret is not None:
			ret = Dispatch(ret, 'CreateParametricPoint', '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')
		return ret

	def CreateParametricPointConnector(self, strName):
		'''
		CreateParametricPointConnector method
		
		:param strName: str
		:rtype: recurdyn.ProcessNet.IParametricPointConnector
		'''
		ret = self._oleobj_.InvokeTypes(274, LCID, 1, (9, 0), ((8, 1),),strName
			)
		if ret is not None:
			ret = Dispatch(ret, 'CreateParametricPointConnector', '{5A26F623-DA73-4531-884A-946494037A2B}')
		return ret

	def CreateParametricPointWithText(self, strName, strText, pRefMarker):
		'''
		Creates a parametric point with text
		
		:param strName: str
		:param strText: str
		:param pRefMarker: IMarker
		:rtype: recurdyn.ProcessNet.IParametricPoint
		'''
		ret = self._oleobj_.InvokeTypes(480, LCID, 1, (9, 0), ((8, 1), (8, 1), (9, 1)),strName
			, strText, pRefMarker)
		if ret is not None:
			ret = Dispatch(ret, 'CreateParametricPointWithText', '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')
		return ret

	def CreateParametricValue(self, strName, dValue):
		'''
		Creates a parametric value
		
		:param strName: str
		:param dValue: float
		:rtype: recurdyn.ProcessNet.IParametricValue
		'''
		ret = self._oleobj_.InvokeTypes(272, LCID, 1, (9, 0), ((8, 1), (5, 1)),strName
			, dValue)
		if ret is not None:
			ret = Dispatch(ret, 'CreateParametricValue', '{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')
		return ret

	def CreateParametricValueConnector(self, strName):
		'''
		CreateParametricValueConnector method
		
		:param strName: str
		:rtype: recurdyn.ProcessNet.IParametricValueConnector
		'''
		ret = self._oleobj_.InvokeTypes(275, LCID, 1, (9, 0), ((8, 1),),strName
			)
		if ret is not None:
			ret = Dispatch(ret, 'CreateParametricValueConnector', '{3C8942E4-0A9C-48DB-AFF4-882202E3BA8A}')
		return ret

	def CreateParametricValueWithText(self, strName, strText):
		'''
		Creates a parametric value with text
		
		:param strName: str
		:param strText: str
		:rtype: recurdyn.ProcessNet.IParametricValue
		'''
		ret = self._oleobj_.InvokeTypes(486, LCID, 1, (9, 0), ((8, 1), (8, 1)),strName
			, strText)
		if ret is not None:
			ret = Dispatch(ret, 'CreateParametricValueWithText', '{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')
		return ret

	def CreatePerformanceIndex(self, strName, Type, Expression):
		'''
		Create a performance index with expression
		
		:param strName: str
		:param Type: PerformanceIndexType
		:param Expression: IExpression
		:rtype: recurdyn.ProcessNet.IPerformanceIndex
		'''
		ret = self._oleobj_.InvokeTypes(286, LCID, 1, (9, 0), ((8, 1), (3, 1), (9, 1)),strName
			, Type, Expression)
		if ret is not None:
			ret = Dispatch(ret, 'CreatePerformanceIndex', '{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}')
		return ret

	def CreatePerformanceIndex2(self, strName, enumType):
		'''
		Create a performance index with result type
		
		:param strName: str
		:param enumType: PerformanceIndexResultType
		:rtype: recurdyn.ProcessNet.IPerformanceIndex
		'''
		ret = self._oleobj_.InvokeTypes(295, LCID, 1, (9, 0), ((8, 1), (3, 1)),strName
			, enumType)
		if ret is not None:
			ret = Dispatch(ret, 'CreatePerformanceIndex2', '{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}')
		return ret

	def CreateRequestExpression(self, strName, pEx1, pEx2, pEx3, pEx4, pEx5, pEx6):
		'''
		Creates a request expression
		
		:param strName: str
		:param pEx1: IExpression
		:param pEx2: IExpression
		:param pEx3: IExpression
		:param pEx4: IExpression
		:param pEx5: IExpression
		:param pEx6: IExpression
		:rtype: recurdyn.ProcessNet.IRequestExpression
		'''
		ret = self._oleobj_.InvokeTypes(283, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1), (9, 1), (9, 1), (9, 1)),strName
			, pEx1, pEx2, pEx3, pEx4, pEx5
			, pEx6)
		if ret is not None:
			ret = Dispatch(ret, 'CreateRequestExpression', '{70D93511-61EB-4AB6-80D8-B142DB3D7923}')
		return ret

	def CreateRequestStandard(self, strName, enType, pActionMarker, pBaseMarker, pRefMarker):
		'''
		Creates a request standard
		
		:param strName: str
		:param enType: RequestStandardType
		:param pActionMarker: IMarker
		:param pBaseMarker: IMarker
		:param pRefMarker: IMarker
		:rtype: recurdyn.ProcessNet.IRequestStandard
		'''
		ret = self._oleobj_.InvokeTypes(282, LCID, 1, (9, 0), ((8, 1), (3, 1), (9, 1), (9, 1), (9, 1)),strName
			, enType, pActionMarker, pBaseMarker, pRefMarker)
		if ret is not None:
			ret = Dispatch(ret, 'CreateRequestStandard', '{BAD8E0C8-CE5C-4AFD-88DE-427445F73C75}')
		return ret

	def CreateRequestUserSubroutine(self, strName, pUserSubroutine):
		'''
		Creates a request user subroutine
		
		:param strName: str
		:param pUserSubroutine: IUserSubroutine
		:rtype: recurdyn.ProcessNet.IRequestUserSubroutine
		'''
		ret = self._oleobj_.InvokeTypes(284, LCID, 1, (9, 0), ((8, 1), (9, 1)),strName
			, pUserSubroutine)
		if ret is not None:
			ret = Dispatch(ret, 'CreateRequestUserSubroutine', '{F13A88C4-88A8-439B-B06A-A6827B3D4489}')
		return ret

	def CreateScopeAngle(self, strName, pStartMarker, pCenterMarker, pEndMarker):
		'''
		Creates a scope angle
		
		:param strName: str
		:param pStartMarker: IMarker
		:param pCenterMarker: IMarker
		:param pEndMarker: IMarker
		:rtype: recurdyn.ProcessNet.IScopeAngle
		'''
		ret = self._oleobj_.InvokeTypes(301, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (9, 1)),strName
			, pStartMarker, pCenterMarker, pEndMarker)
		if ret is not None:
			ret = Dispatch(ret, 'CreateScopeAngle', '{1448FE04-1A3C-495A-8944-98789C61326C}')
		return ret

	def CreateScopeEntity(self, strName, pEntity):
		'''
		Creates a scope entity
		
		:param strName: str
		:param pEntity: IGeneric
		:rtype: recurdyn.ProcessNet.IScopeEntity
		'''
		ret = self._oleobj_.InvokeTypes(304, LCID, 1, (9, 0), ((8, 1), (9, 1)),strName
			, pEntity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateScopeEntity', '{45D6BAEA-6C9A-4878-9F5D-F0AE79A1EE31}')
		return ret

	def CreateScopeEntityComponent(self, strName, pEntity, Component):
		'''
		Creates a scope entity and component
		
		:param strName: str
		:param pEntity: IGeneric
		:param Component: str
		:rtype: recurdyn.ProcessNet.IScopeEntity
		'''
		ret = self._oleobj_.InvokeTypes(306, LCID, 1, (9, 0), ((8, 1), (9, 1), (8, 1)),strName
			, pEntity, Component)
		if ret is not None:
			ret = Dispatch(ret, 'CreateScopeEntityComponent', '{45D6BAEA-6C9A-4878-9F5D-F0AE79A1EE31}')
		return ret

	def CreateScopeExpression(self, strName, pExpression):
		'''
		Creates a scope expression
		
		:param strName: str
		:param pExpression: IExpression
		:rtype: recurdyn.ProcessNet.IScopeExpression
		'''
		ret = self._oleobj_.InvokeTypes(303, LCID, 1, (9, 0), ((8, 1), (9, 1)),strName
			, pExpression)
		if ret is not None:
			ret = Dispatch(ret, 'CreateScopeExpression', '{7B3C335F-849F-4A18-BE0E-BDE3BACFA0EE}')
		return ret

	def CreateScopeGapInterference(self, Name, Base, Action, Type):
		'''
		Creates a scope gap or interference
		
		:param Name: str
		:param Base: IGeometry
		:param Action: IGeometry
		:param Type: ScopeGapInterferenceType
		:rtype: recurdyn.ProcessNet.IScopeGapInterference
		'''
		ret = self._oleobj_.InvokeTypes(305, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (3, 1)),Name
			, Base, Action, Type)
		if ret is not None:
			ret = Dispatch(ret, 'CreateScopeGapInterference', '{1DD425A8-DC9F-4E7C-94CF-A3D1F90D8A75}')
		return ret

	def CreateScopePointToPoint(self, strName, enType, enComponentType, pActionMarker, pBaseMarker, pRefMarker):
		'''
		Creates a scope point to point
		
		:param strName: str
		:param enType: ScopePointToPointType
		:param enComponentType: ScopePointToPointComponentType
		:param pActionMarker: IMarker
		:param pBaseMarker: IMarker
		:param pRefMarker: IMarker
		:rtype: recurdyn.ProcessNet.IScopePointToPoint
		'''
		ret = self._oleobj_.InvokeTypes(302, LCID, 1, (9, 0), ((8, 1), (3, 1), (3, 1), (9, 1), (9, 1), (9, 1)),strName
			, enType, enComponentType, pActionMarker, pBaseMarker, pRefMarker
			)
		if ret is not None:
			ret = Dispatch(ret, 'CreateScopePointToPoint', '{1814A992-158F-4A63-A3E6-1E69A1587342}')
		return ret

	def CreateSensorLaser(self, strName, pSensorMarker, pGeometry, dRange):
		'''
		Creates a laser sensor
		
		:param strName: str
		:param pSensorMarker: IMarker
		:param pGeometry: IGeometry
		:param dRange: float
		:rtype: recurdyn.ProcessNet.ISensorLaser
		'''
		ret = self._oleobj_.InvokeTypes(372, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (5, 1)),strName
			, pSensorMarker, pGeometry, dRange)
		if ret is not None:
			ret = Dispatch(ret, 'CreateSensorLaser', '{BFB1489A-2BE8-4AE0-833F-21B119D4260C}')
		return ret

	def CreateSensorLaserEx(self, Name, markerSensor, markerRef, Range, Entity):
		'''
		Creates a laser sensor
		
		:param Name: str
		:param markerSensor: IMarker
		:param markerRef: IMarker
		:param Range: float
		:param Entity: IGeneric
		:rtype: recurdyn.ProcessNet.ISensorLaserEx
		'''
		ret = self._oleobj_.InvokeTypes(373, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (5, 1), (9, 1)),Name
			, markerSensor, markerRef, Range, Entity)
		if ret is not None:
			ret = Dispatch(ret, 'CreateSensorLaserEx', '{BD5CA94C-B210-4D55-BB8C-438744A1E3EB}')
		return ret

	def CreateSensorPointInBox(self, strName, pSensorMarker, pGeometryBox):
		'''
		Creates a point in box sensor
		
		:param strName: str
		:param pSensorMarker: IMarker
		:param pGeometryBox: IGeometryBox
		:rtype: recurdyn.ProcessNet.ISensorPointInBox
		'''
		ret = self._oleobj_.InvokeTypes(370, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1)),strName
			, pSensorMarker, pGeometryBox)
		if ret is not None:
			ret = Dispatch(ret, 'CreateSensorPointInBox', '{EDFD7500-666A-4F69-AA26-194A60C955E3}')
		return ret

	def CreateSensorPointInBoxWithMarker(self, strName, pSensorMarker, pBoxCenter, dBoxWidth, dBoxHeight, dBoxDepth):
		'''
		Creates a point in box sensor
		
		:param strName: str
		:param pSensorMarker: IMarker
		:param pBoxCenter: IMarker
		:param dBoxWidth: float
		:param dBoxHeight: float
		:param dBoxDepth: float
		:rtype: recurdyn.ProcessNet.ISensorPointInBox
		'''
		ret = self._oleobj_.InvokeTypes(371, LCID, 1, (9, 0), ((8, 1), (9, 1), (9, 1), (5, 1), (5, 1), (5, 1)),strName
			, pSensorMarker, pBoxCenter, dBoxWidth, dBoxHeight, dBoxDepth
			)
		if ret is not None:
			ret = Dispatch(ret, 'CreateSensorPointInBoxWithMarker', '{EDFD7500-666A-4F69-AA26-194A60C955E3}')
		return ret

	def CreateSpline3DWithValue(self, strName, pMultiPoint, pPointZ):
		'''
		Create a 3D spline from value
		
		:param strName: str
		:param pMultiPoint: list[object]
		:param pPointZ: list[float]
		:rtype: recurdyn.ProcessNet.ISpline
		'''
		_pMultiPoint_type = True if pMultiPoint and isinstance(pMultiPoint[0], win32com.client.VARIANT) else False
		if not _pMultiPoint_type:
			pMultiPoint = [win32com.client.VARIANT(12, _data) for _data in pMultiPoint]

		ret = self._oleobj_.InvokeTypes(502, LCID, 1, (9, 0), ((8, 1), (8204, 1), (8197, 1)),strName
			, pMultiPoint, pPointZ)

		if not _pMultiPoint_type:
			pMultiPoint = [_data.value for _data in pMultiPoint]

		if ret is not None:
			ret = Dispatch(ret, 'CreateSpline3DWithValue', '{E76144D2-715D-41B4-A432-7B6C7F713FC2}')
		return ret

	def CreateSplineWithFile(self, strName, strFileName):
		'''
		Creates a spline from file
		
		:param strName: str
		:param strFileName: str
		:rtype: recurdyn.ProcessNet.ISpline
		'''
		ret = self._oleobj_.InvokeTypes(289, LCID, 1, (9, 0), ((8, 1), (8, 1)),strName
			, strFileName)
		if ret is not None:
			ret = Dispatch(ret, 'CreateSplineWithFile', '{E76144D2-715D-41B4-A432-7B6C7F713FC2}')
		return ret

	def CreateSplineWithValue(self, strName, pMultiPoint):
		'''
		Creates a spline from value
		
		:param strName: str
		:param pMultiPoint: list[object]
		:rtype: recurdyn.ProcessNet.ISpline
		'''
		_pMultiPoint_type = True if pMultiPoint and isinstance(pMultiPoint[0], win32com.client.VARIANT) else False
		if not _pMultiPoint_type:
			pMultiPoint = [win32com.client.VARIANT(12, _data) for _data in pMultiPoint]

		ret = self._oleobj_.InvokeTypes(288, LCID, 1, (9, 0), ((8, 1), (8204, 1)),strName
			, pMultiPoint)

		if not _pMultiPoint_type:
			pMultiPoint = [_data.value for _data in pMultiPoint]

		if ret is not None:
			ret = Dispatch(ret, 'CreateSplineWithValue', '{E76144D2-715D-41B4-A432-7B6C7F713FC2}')
		return ret

	def CreateString(self, strName, strString):
		'''
		Creates a string
		
		:param strName: str
		:param strString: str
		:rtype: recurdyn.ProcessNet.IString
		'''
		ret = self._oleobj_.InvokeTypes(491, LCID, 1, (9, 0), ((8, 1), (8, 1)),strName
			, strString)
		if ret is not None:
			ret = Dispatch(ret, 'CreateString', '{16DE1264-A4F7-4A8E-8F3C-E8B5210CB2D9}')
		return ret

	def CreateSubSystem(self, SubSystemType, strName, pRefFrame):
		'''
		Creates a subsystem
		
		:param SubSystemType: SubSystemType
		:param strName: str
		:param pRefFrame: IReferenceFrame
		:rtype: recurdyn.ProcessNet.ISubSystem
		'''
		ret = self._oleobj_.InvokeTypes(352, LCID, 1, (9, 0), ((3, 1), (8, 1), (9, 1)),SubSystemType
			, strName, pRefFrame)
		if ret is not None:
			ret = Dispatch(ret, 'CreateSubSystem', '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}')
		return ret

	def CreateUserSubroutine(self, strName, strUserParameter, strDllName):
		'''
		Creates a user subroutine
		
		:param strName: str
		:param strUserParameter: str
		:param strDllName: str
		:rtype: recurdyn.ProcessNet.IUserSubroutine
		'''
		ret = self._oleobj_.InvokeTypes(285, LCID, 1, (9, 0), ((8, 1), (8, 1), (8, 1)),strName
			, strUserParameter, strDllName)
		if ret is not None:
			ret = Dispatch(ret, 'CreateUserSubroutine', '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')
		return ret

	def CreateVariableEquation(self, strName, pExpression):
		'''
		Creates a variable equation
		
		:param strName: str
		:param pExpression: IExpression
		:rtype: recurdyn.ProcessNet.IVariableEquation
		'''
		ret = self._oleobj_.InvokeTypes(276, LCID, 1, (9, 0), ((8, 1), (9, 1)),strName
			, pExpression)
		if ret is not None:
			ret = Dispatch(ret, 'CreateVariableEquation', '{1ECE0007-85A7-4F9B-AD9E-FEE2684A398E}')
		return ret

	def CreateVariableEquationWithUserSubroutine(self, strName, pUserSubroutine):
		'''
		Creates a variable equation with user subroutine
		
		:param strName: str
		:param pUserSubroutine: IUserSubroutine
		:rtype: recurdyn.ProcessNet.IVariableEquation
		'''
		ret = self._oleobj_.InvokeTypes(277, LCID, 1, (9, 0), ((8, 1), (9, 1)),strName
			, pUserSubroutine)
		if ret is not None:
			ret = Dispatch(ret, 'CreateVariableEquationWithUserSubroutine', '{1ECE0007-85A7-4F9B-AD9E-FEE2684A398E}')
		return ret

	def DeleteStandAloneNodes(self):
		'''
		Delete stand alone nodes
		'''
		return self._oleobj_.InvokeTypes(518, LCID, 1, (24, 0), (),)


	def DeleteUnusedFlexibleMaterialsProperties(self):
		'''
		Delete unused matetrials and properties
		'''
		return self._oleobj_.InvokeTypes(541, LCID, 1, (24, 0), (),)


	def DeleteUnusedMarkers(self):
		'''
		Delete unused markers
		'''
		return self._oleobj_.InvokeTypes(505, LCID, 1, (24, 0), (),)


	def DeleteUnusedSubEntities(self):
		'''
		Delete unused subentities
		'''
		return self._oleobj_.InvokeTypes(547, LCID, 1, (24, 0), (),)


	def ExportParametricPoint(self, strFileName):
		'''
		Export parametric point
		
		:param strFileName: str
		'''
		return self._oleobj_.InvokeTypes(483, LCID, 1, (24, 0), ((8, 1),),strFileName
			)


	def ExportParametricValue(self, strFileName):
		'''
		Export parametric value
		
		:param strFileName: str
		'''
		return self._oleobj_.InvokeTypes(485, LCID, 1, (24, 0), ((8, 1),),strFileName
			)


	def ExportSubEntity(self, strFileName):
		'''
		Export subentities
		
		:param strFileName: str
		'''
		return self._oleobj_.InvokeTypes(525, LCID, 1, (24, 0), ((8, 1),),strFileName
			)


	def FileExport(self, strFile, OverWrite):
		'''
		Export File
		
		:param strFile: str
		:param OverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(487, LCID, 1, (24, 0), ((8, 1), (11, 1)),strFile
			, OverWrite)


	def FileImport(self, strFile):
		'''
		Import file
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(168, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def FileImportWithCADSetting(self, strFile):
		'''
		Import file using assembly hierarchy
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(538, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def GetBoundingBox(self):
		'''
		Get bounding box, internal use only
		
		:rtype: (float, float, float, float, float, float)
		'''
		return self._ApplyTypes_(310, 1, (24, 0), ((16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2), (16389, 2)), 'GetBoundingBox', None,pythoncom.Missing
			, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing, pythoncom.Missing
			)


	def GetEntity(self, strName):
		'''
		Get an entity
		
		:param strName: str
		:rtype: recurdyn.ProcessNet.IGeneric
		'''
		ret = self._oleobj_.InvokeTypes(351, LCID, 1, (9, 0), ((8, 1),),strName
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetEntity', '{27A86788-8B85-40CF-BE7F-BA915103A7DB}')
		return ret

	def GetNewEntityName(self, namePrefix):
		'''
		GetNewEntityName method
		
		:param namePrefix: str
		:rtype: str
		'''
		return self._oleobj_.InvokeTypes(494, LCID, 1, (8, 0), ((8, 1),),namePrefix
			)


	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def ImportParametricPoint(self, strFileName):
		'''
		Import parametric point
		
		:param strFileName: str
		'''
		return self._oleobj_.InvokeTypes(482, LCID, 1, (24, 0), ((8, 1),),strFileName
			)


	def ImportParametricValue(self, strFileName):
		'''
		Import parametric value
		
		:param strFileName: str
		'''
		return self._oleobj_.InvokeTypes(484, LCID, 1, (24, 0), ((8, 1),),strFileName
			)


	def ImportSubEntity(self, strFileName):
		'''
		Import subentities
		
		:param strFileName: str
		'''
		return self._oleobj_.InvokeTypes(524, LCID, 1, (24, 0), ((8, 1),),strFileName
			)


	def Merge(self, pTarget, arrSource):
		'''
		Merge bodies
		
		:param pTarget: IBody
		:param arrSource: list[object]
		'''
		_arrSource_type = True if arrSource and isinstance(arrSource[0], win32com.client.VARIANT) else False
		if not _arrSource_type:
			arrSource = [win32com.client.VARIANT(12, _data) for _data in arrSource]

		ret = self._oleobj_.InvokeTypes(481, LCID, 1, (24, 0), ((9, 1), (8204, 1)),pTarget
			, arrSource)

		if not _arrSource_type:
			arrSource = [_data.value for _data in arrSource]

		return ret


	def MergeWithUserInputMass(self, pTarget, arrSource):
		'''
		Merge bodies with a mass input
		
		:param pTarget: IBody
		:param arrSource: list[object]
		'''
		_arrSource_type = True if arrSource and isinstance(arrSource[0], win32com.client.VARIANT) else False
		if not _arrSource_type:
			arrSource = [win32com.client.VARIANT(12, _data) for _data in arrSource]

		ret = self._oleobj_.InvokeTypes(530, LCID, 1, (24, 0), ((9, 1), (8204, 1)),pTarget
			, arrSource)

		if not _arrSource_type:
			arrSource = [_data.value for _data in arrSource]

		return ret


	def MirrorWithGeometry(self, arrayEntity, geoPlne, MirrorType):
		'''
		Mirror entities with geometry plane
		
		:param arrayEntity: list[object]
		:param geoPlne: IGeometry
		:param MirrorType: MirrorType
		'''
		_arrayEntity_type = True if arrayEntity and isinstance(arrayEntity[0], win32com.client.VARIANT) else False
		if not _arrayEntity_type:
			arrayEntity = [win32com.client.VARIANT(12, _data) for _data in arrayEntity]

		ret = self._oleobj_.InvokeTypes(503, LCID, 1, (24, 0), ((8204, 1), (9, 1), (3, 1)),arrayEntity
			, geoPlne, MirrorType)

		if not _arrayEntity_type:
			arrayEntity = [_data.value for _data in arrayEntity]

		return ret


	def MirrorWithMarker(self, arrayEntity, pMarker, PlaneType, MirrorType):
		'''
		Mirror entities with marker plane
		
		:param arrayEntity: list[object]
		:param pMarker: IMarker
		:param PlaneType: PlaneType
		:param MirrorType: MirrorType
		'''
		_arrayEntity_type = True if arrayEntity and isinstance(arrayEntity[0], win32com.client.VARIANT) else False
		if not _arrayEntity_type:
			arrayEntity = [win32com.client.VARIANT(12, _data) for _data in arrayEntity]

		ret = self._oleobj_.InvokeTypes(504, LCID, 1, (24, 0), ((8204, 1), (9, 1), (3, 1), (3, 1)),arrayEntity
			, pMarker, PlaneType, MirrorType)

		if not _arrayEntity_type:
			arrayEntity = [_data.value for _data in arrayEntity]

		return ret


	def Redraw(self):
		'''
		Redraw method
		'''
		return self._oleobj_.InvokeTypes(490, LCID, 1, (24, 0), (),)


	def UnGroup(self, pVal):
		'''
		Ungroup entities from a general group
		
		:param pVal: IGroupGeneral
		'''
		return self._oleobj_.InvokeTypes(536, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def UpdateBoundingBox(self):
		'''
		Redraw
		'''
		return self._oleobj_.InvokeTypes(499, LCID, 1, (24, 0), (),)


	def _get_AutoDesignToolkit(self):
		return self._ApplyTypes_(*(543, 2, (9, 0), (), "AutoDesignToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'))
	def _get_BNPSubSystem(self):
		return self._ApplyTypes_(*(497, 2, (9, 0), (), "BNPSubSystem", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_BodyCollection(self):
		return self._ApplyTypes_(*(451, 2, (9, 0), (), "BodyCollection", '{E26794CD-5D37-4617-BB5A-1AD85F3ED410}'))
	def _get_CameraSetting(self):
		return self._ApplyTypes_(*(514, 2, (9, 0), (), "CameraSetting", '{0FDF3022-5D98-4409-B16E-716A01915002}'))
	def _get_ChainSubSystem(self):
		return self._ApplyTypes_(*(533, 2, (9, 0), (), "ChainSubSystem", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_ContactCollection(self):
		return self._ApplyTypes_(*(455, 2, (9, 0), (), "ContactCollection", '{1B5A2AF8-F3DB-49CC-A112-21B0CD80C8EE}'))
	def _get_ControlGeneralToolkit(self):
		return self._ApplyTypes_(*(539, 2, (9, 0), (), "ControlGeneralToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'))
	def _get_ControlToolkit(self):
		return self._ApplyTypes_(*(488, 2, (9, 0), (), "ControlToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'))
	def _get_DOE(self):
		return self._ApplyTypes_(*(548, 2, (9, 0), (), "DOE", '{0EECEDE2-6ADD-4945-9061-B3B8D138FC12}'))
	def _get_DesignStudy(self):
		return self._ApplyTypes_(*(496, 2, (9, 0), (), "DesignStudy", '{A02C4C84-917B-448D-9137-1019967E7138}'))
	def _get_DesignVariableCollection(self):
		return self._ApplyTypes_(*(468, 2, (9, 0), (), "DesignVariableCollection", '{EA742AA0-0675-4ABA-8145-C00A73F97747}'))
	def _get_DifferentialEquationCollection(self):
		return self._ApplyTypes_(*(465, 2, (9, 0), (), "DifferentialEquationCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA249}'))
	def _get_DummyBody(self):
		return self._ApplyTypes_(*(489, 2, (9, 0), (), "DummyBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_DurabilityToolkit(self):
		return self._ApplyTypes_(*(501, 2, (9, 0), (), "DurabilityToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'))
	def _get_ExpressionCollection(self):
		return self._ApplyTypes_(*(462, 2, (9, 0), (), "ExpressionCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA246}'))
	def _get_ExternalSPIToolkit(self):
		return self._ApplyTypes_(*(545, 2, (9, 0), (), "ExternalSPIToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'))
	def _get_FFlexToolkit(self):
		return self._ApplyTypes_(*(355, 2, (9, 0), (), "FFlexToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'))
	def _get_FlexInterface(self):
		return self._ApplyTypes_(*(508, 2, (9, 0), (), "FlexInterface", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'))
	def _get_ForceCollection(self):
		return self._ApplyTypes_(*(454, 2, (9, 0), (), "ForceCollection", '{B1359BD3-DD1C-4A0C-A16D-466CC9B0B4F5}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_GManager(self):
		return self._ApplyTypes_(*(521, 2, (9, 0), (), "GManager", '{4E50DC20-53E0-4B65-86B2-E6C6FF8C1A52}'))
	def _get_GeneralConstraintCollection(self):
		return self._ApplyTypes_(*(513, 2, (9, 0), (), "GeneralConstraintCollection", '{F63C5479-BE87-431C-963C-DD79C9F33259}'))
	def _get_Graphic(self):
		return self._ApplyTypes_(*(166, 2, (9, 0), (), "Graphic", '{262F564D-8707-4A0E-806C-D9FB21F59324}'))
	def _get_Ground(self):
		return self._ApplyTypes_(*(164, 2, (9, 0), (), "Ground", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_GroupGeneralCollection(self):
		return self._ApplyTypes_(*(542, 2, (9, 0), (), "GroupGeneralCollection", '{20D998FD-D089-43D4-B682-F84D247B6FB2}'))
	def _get_JointCollection(self):
		return self._ApplyTypes_(*(452, 2, (9, 0), (), "JointCollection", '{58A5314F-24D0-4D53-AE77-23B42CB9FAC7}'))
	def _get_LayerNumber(self):
		return self._ApplyTypes_(*(360, 2, (19, 0), (), "LayerNumber", None))
	def _get_MMSToolkit(self):
		return self._ApplyTypes_(*(537, 2, (9, 0), (), "MMSToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'))
	def _get_MTT2DSubSystem(self):
		return self._ApplyTypes_(*(356, 2, (9, 0), (), "MTT2DSubSystem", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_MTT3DSubSystem(self):
		return self._ApplyTypes_(*(358, 2, (9, 0), (), "MTT3DSubSystem", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_MotherBody(self):
		return self._ApplyTypes_(*(165, 2, (9, 0), (), "MotherBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerModelDocument(self):
		return self._ApplyTypes_(*(167, 2, (9, 0), (), "OwnerModelDocument", '{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_PairConstraintCollection(self):
		return self._ApplyTypes_(*(453, 2, (9, 0), (), "PairConstraintCollection", '{B21BD336-10F0-43BF-9EA3-E2258E754366}'))
	def _get_ParametricPointCollection(self):
		return self._ApplyTypes_(*(460, 2, (9, 0), (), "ParametricPointCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA244}'))
	def _get_ParametricPointConnectorCollection(self):
		return self._ApplyTypes_(*(516, 2, (9, 0), (), "ParametricPointConnectorCollection", '{2BA7F21D-5583-410B-8ABB-6AAE09261D4F}'))
	def _get_ParametricValueCollection(self):
		return self._ApplyTypes_(*(461, 2, (9, 0), (), "ParametricValueCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA245}'))
	def _get_ParametricValueConnectorCollection(self):
		return self._ApplyTypes_(*(517, 2, (9, 0), (), "ParametricValueConnectorCollection", '{25597944-74D4-4F24-8145-CD11FE87BCC8}'))
	def _get_ParticleInterface(self):
		return self._ApplyTypes_(*(519, 2, (9, 0), (), "ParticleInterface", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'))
	def _get_PerformanceIndexCollection(self):
		return self._ApplyTypes_(*(467, 2, (9, 0), (), "PerformanceIndexCollection", '{CC76CCE9-4D71-4DE9-8A4C-490E57C838C2}'))
	def _get_R2R2DSubSystem(self):
		return self._ApplyTypes_(*(529, 2, (9, 0), (), "R2R2DSubSystem", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_RFlexToolkit(self):
		return self._ApplyTypes_(*(354, 2, (9, 0), (), "RFlexToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'))
	def _get_RefFrame(self):
		return self._ApplyTypes_(*(151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'))
	def _get_RequestExpressionCollection(self):
		return self._ApplyTypes_(*(458, 2, (9, 0), (), "RequestExpressionCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA242}'))
	def _get_RequestStandardCollection(self):
		return self._ApplyTypes_(*(456, 2, (9, 0), (), "RequestStandardCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA240}'))
	def _get_RequestUserSubroutineCollection(self):
		return self._ApplyTypes_(*(457, 2, (9, 0), (), "RequestUserSubroutineCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA241}'))
	def _get_ScenarioAnalysisProperty2(self):
		return self._ApplyTypes_(*(532, 2, (9, 0), (), "ScenarioAnalysisProperty2", '{5FC5751E-20BB-455D-B127-751487DB0768}'))
	def _get_ScopeCollection(self):
		return self._ApplyTypes_(*(466, 2, (9, 0), (), "ScopeCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA24A}'))
	def _get_SensorCollection(self):
		return self._ApplyTypes_(*(523, 2, (9, 0), (), "SensorCollection", '{507862D8-28C1-423F-9D91-7BE66F10A6DF}'))
	def _get_SplineCollection(self):
		return self._ApplyTypes_(*(459, 2, (9, 0), (), "SplineCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA243}'))
	def _get_StringCollection(self):
		return self._ApplyTypes_(*(492, 2, (9, 0), (), "StringCollection", '{C9116090-BCBB-453C-A283-49E55A3344CA}'))
	def _get_SubSystemCollection(self):
		return self._ApplyTypes_(*(450, 2, (9, 0), (), "SubSystemCollection", '{D1451F25-D6A2-42B7-8DDF-D0F221D5FBFE}'))
	def _get_TireToolkit(self):
		return self._ApplyTypes_(*(357, 2, (9, 0), (), "TireToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'))
	def _get_TrackHMSubSystem(self):
		return self._ApplyTypes_(*(495, 2, (9, 0), (), "TrackHMSubSystem", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_TrackLMSubSystem(self):
		return self._ApplyTypes_(*(359, 2, (9, 0), (), "TrackLMSubSystem", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_UserSubroutineCollection(self):
		return self._ApplyTypes_(*(463, 2, (9, 0), (), "UserSubroutineCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA247}'))
	def _get_VariableEquationCollection(self):
		return self._ApplyTypes_(*(464, 2, (9, 0), (), "VariableEquationCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA248}'))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_LayerNumber(self, value):
		if "LayerNumber" in self.__dict__: self.__dict__["LayerNumber"] = value; return
		self._oleobj_.Invoke(*((360, LCID, 4, 0) + (value,) + ()))
	def _set_MotherBody(self, value):
		if "MotherBody" in self.__dict__: self.__dict__["MotherBody"] = value; return
		self._oleobj_.Invoke(*((165, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	AutoDesignToolkit = property(_get_AutoDesignToolkit, None)
	'''
	returns an AutoDesign IToolkit, ex) IAutoDesignToolkit toolkit = model.DurabilityToolkit as IAutoDesignToolkit

	:type: recurdyn.ProcessNet.IToolkit
	'''
	BNPSubSystem = property(_get_BNPSubSystem, None)
	'''
	returns a ISubSystem, and It is needed to explicit casting to IBNPSubSystem, ex) IBNPSubSystem bnpSub = subSystem.BNPSubSystem as IBNPSubSystem

	:type: recurdyn.ProcessNet.IGeneric
	'''
	BodyCollection = property(_get_BodyCollection, None)
	CameraSetting = property(_get_CameraSetting, None)
	'''
	Camera Setting

	:type: recurdyn.ProcessNet.ICameraSetting
	'''
	ChainSubSystem = property(_get_ChainSubSystem, None)
	'''
	returns a ISubSystem, and It is needed to explicit casting to IChainSubSystem, ex) IBNPSubSystem chainSub = subSystem.ChainSubSystem as IChainSubSystem

	:type: recurdyn.ProcessNet.IGeneric
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	ContactCollection = property(_get_ContactCollection, None)
	ControlGeneralToolkit = property(_get_ControlGeneralToolkit, None)
	'''
	returns a General Control IToolkit, ex) IControlGeneralToolkit toolkit = model.ControlGeneralToolkit as IControlGeneralToolkit

	:type: recurdyn.ProcessNet.IToolkit
	'''
	ControlToolkit = property(_get_ControlToolkit, None)
	'''
	returns a Control IToolkit, ex) IControlToolkit toolkit = model.ControlToolkit as IControlToolkit

	:type: recurdyn.ProcessNet.IToolkit
	'''
	DOE = property(_get_DOE, None)
	'''
	DOE

	:type: recurdyn.ProcessNet.IDOE
	'''
	DesignStudy = property(_get_DesignStudy, None)
	'''
	Design Study

	:type: recurdyn.ProcessNet.IDesignStudy
	'''
	DesignVariableCollection = property(_get_DesignVariableCollection, None)
	DifferentialEquationCollection = property(_get_DifferentialEquationCollection, None)
	DummyBody = property(_get_DummyBody, None)
	'''
	Mother Body

	:type: recurdyn.ProcessNet.IBody
	'''
	DurabilityToolkit = property(_get_DurabilityToolkit, None)
	'''
	returns a Durability IToolkit, ex) IDurabilityToolkit toolkit = model.IDurabilityToolkit as IDurabilityToolkit

	:type: recurdyn.ProcessNet.IToolkit
	'''
	ExpressionCollection = property(_get_ExpressionCollection, None)
	ExternalSPIToolkit = property(_get_ExternalSPIToolkit, None)
	'''
	External SPI Toolkit

	:type: recurdyn.ProcessNet.IToolkit
	'''
	FFlexToolkit = property(_get_FFlexToolkit, None)
	'''
	returns a FFlex IToolkit, ex) IFFlexToolkit toolkit = model.IFFlexToolkit as IFFlexToolkit

	:type: recurdyn.ProcessNet.IToolkit
	'''
	FlexInterface = property(_get_FlexInterface, None)
	'''
	Get a FlexInterface Toolkit

	:type: recurdyn.ProcessNet.IToolkit
	'''
	ForceCollection = property(_get_ForceCollection, None)
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	GManager = property(_get_GManager, None)
	'''
	Get a GManager Interface

	:type: recurdyn.ProcessNet.IManager
	'''
	GeneralConstraintCollection = property(_get_GeneralConstraintCollection, None)
	Graphic = property(_get_Graphic, None)
	'''
	Graphic

	:type: recurdyn.ProcessNet.IGraphicPropertySubSystem
	'''
	Ground = property(_get_Ground, None)
	'''
	Ground Body

	:type: recurdyn.ProcessNet.IBody
	'''
	GroupGeneralCollection = property(_get_GroupGeneralCollection, None)
	JointCollection = property(_get_JointCollection, None)
	LayerNumber = property(_get_LayerNumber, _set_LayerNumber)
	'''
	Layer number

	:type: int
	'''
	MMSToolkit = property(_get_MMSToolkit, None)
	'''
	returns a MMS IToolkit, ex) IMMSToolkit toolkit = model.IMMSToolkit as IMMSToolkit

	:type: recurdyn.ProcessNet.IToolkit
	'''
	MTT2DSubSystem = property(_get_MTT2DSubSystem, None)
	'''
	returns a ISubSystem, and It is needed to explicit casting to IMTT2DSubSystem, ex) IMTT2DSubSystem mtt2d = subSystem.MTT2DSubSystem as IMTT2DSubSystem

	:type: recurdyn.ProcessNet.IGeneric
	'''
	MTT3DSubSystem = property(_get_MTT3DSubSystem, None)
	'''
	returns a ISubSystem, and It is needed to explicit casting to IMTT3DSubSystem, ex) IMTT3DSubSystem mtt3d = subSystem.MTT3DSubSystem as IMTT3DSubSystem

	:type: recurdyn.ProcessNet.IGeneric
	'''
	MotherBody = property(_get_MotherBody, _set_MotherBody)
	'''
	Mother Body

	:type: recurdyn.ProcessNet.IBody
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerModelDocument = property(_get_OwnerModelDocument, None)
	'''
	Owner ModelDocument

	:type: recurdyn.ProcessNet.IModelDocument
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	PairConstraintCollection = property(_get_PairConstraintCollection, None)
	ParametricPointCollection = property(_get_ParametricPointCollection, None)
	ParametricPointConnectorCollection = property(_get_ParametricPointConnectorCollection, None)
	ParametricValueCollection = property(_get_ParametricValueCollection, None)
	ParametricValueConnectorCollection = property(_get_ParametricValueConnectorCollection, None)
	ParticleInterface = property(_get_ParticleInterface, None)
	'''
	Get a ParticleInterface Toolkit

	:type: recurdyn.ProcessNet.IToolkit
	'''
	PerformanceIndexCollection = property(_get_PerformanceIndexCollection, None)
	R2R2DSubSystem = property(_get_R2R2DSubSystem, None)
	'''
	returns a ISubSystem, and It is needed to explicit casting to IR2R2DSubSystem, ex) IR2R2DSubSystem R2R2DSub = subSystem.R2R2DSubSystem as IR2R2DSubSystem

	:type: recurdyn.ProcessNet.IGeneric
	'''
	RFlexToolkit = property(_get_RFlexToolkit, None)
	'''
	returns a RFlex IToolkit, ex) IRFlexToolkit toolkit = model.RFlexToolkit as IRFlexToolkit

	:type: recurdyn.ProcessNet.IToolkit
	'''
	RefFrame = property(_get_RefFrame, None)
	'''
	Reference frame

	:type: recurdyn.ProcessNet.IReferenceFrame
	'''
	RequestExpressionCollection = property(_get_RequestExpressionCollection, None)
	RequestStandardCollection = property(_get_RequestStandardCollection, None)
	RequestUserSubroutineCollection = property(_get_RequestUserSubroutineCollection, None)
	ScenarioAnalysisProperty2 = property(_get_ScenarioAnalysisProperty2, None)
	'''
	Scenario anlaysis properties in the subsystem

	:type: recurdyn.ProcessNet.IScenarioAnalysisProperty2
	'''
	ScopeCollection = property(_get_ScopeCollection, None)
	SensorCollection = property(_get_SensorCollection, None)
	SplineCollection = property(_get_SplineCollection, None)
	StringCollection = property(_get_StringCollection, None)
	SubSystemCollection = property(_get_SubSystemCollection, None)
	TireToolkit = property(_get_TireToolkit, None)
	'''
	returns a Tire IToolkit, ex) ITireToolkit toolkit = model.ITireToolkit as ITireToolkit

	:type: recurdyn.ProcessNet.IToolkit
	'''
	TrackHMSubSystem = property(_get_TrackHMSubSystem, None)
	'''
	returns a ISubSystem, and It is needed to explicit casting to ITrackHMSubSystem, ex) ITrackHMSubSystem trackHM = subSystem.TrackHMSubSystem as ITrackHMSubSystem

	:type: recurdyn.ProcessNet.IGeneric
	'''
	TrackLMSubSystem = property(_get_TrackLMSubSystem, None)
	'''
	returns a ISubSystem, and It is needed to explicit casting to ITrackLMSubSystem, ex) ITrackLMSubSystem trackLM = subSystem.TrackLMSubSystem as ITrackLMSubSystem

	:type: recurdyn.ProcessNet.IGeneric
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	UserSubroutineCollection = property(_get_UserSubroutineCollection, None)
	VariableEquationCollection = property(_get_VariableEquationCollection, None)

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_LayerNumber": _set_LayerNumber,
		"_set_MotherBody": _set_MotherBody,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"AutoDesignToolkit": (543, 2, (9, 0), (), "AutoDesignToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'),
		"BNPSubSystem": (497, 2, (9, 0), (), "BNPSubSystem", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"BodyCollection": (451, 2, (9, 0), (), "BodyCollection", '{E26794CD-5D37-4617-BB5A-1AD85F3ED410}'),
		"CameraSetting": (514, 2, (9, 0), (), "CameraSetting", '{0FDF3022-5D98-4409-B16E-716A01915002}'),
		"ChainSubSystem": (533, 2, (9, 0), (), "ChainSubSystem", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"ContactCollection": (455, 2, (9, 0), (), "ContactCollection", '{1B5A2AF8-F3DB-49CC-A112-21B0CD80C8EE}'),
		"ControlGeneralToolkit": (539, 2, (9, 0), (), "ControlGeneralToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'),
		"ControlToolkit": (488, 2, (9, 0), (), "ControlToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'),
		"DOE": (548, 2, (9, 0), (), "DOE", '{0EECEDE2-6ADD-4945-9061-B3B8D138FC12}'),
		"DesignStudy": (496, 2, (9, 0), (), "DesignStudy", '{A02C4C84-917B-448D-9137-1019967E7138}'),
		"DesignVariableCollection": (468, 2, (9, 0), (), "DesignVariableCollection", '{EA742AA0-0675-4ABA-8145-C00A73F97747}'),
		"DifferentialEquationCollection": (465, 2, (9, 0), (), "DifferentialEquationCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA249}'),
		"DummyBody": (489, 2, (9, 0), (), "DummyBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"DurabilityToolkit": (501, 2, (9, 0), (), "DurabilityToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'),
		"ExpressionCollection": (462, 2, (9, 0), (), "ExpressionCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA246}'),
		"ExternalSPIToolkit": (545, 2, (9, 0), (), "ExternalSPIToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'),
		"FFlexToolkit": (355, 2, (9, 0), (), "FFlexToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'),
		"FlexInterface": (508, 2, (9, 0), (), "FlexInterface", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'),
		"ForceCollection": (454, 2, (9, 0), (), "ForceCollection", '{B1359BD3-DD1C-4A0C-A16D-466CC9B0B4F5}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"GManager": (521, 2, (9, 0), (), "GManager", '{4E50DC20-53E0-4B65-86B2-E6C6FF8C1A52}'),
		"GeneralConstraintCollection": (513, 2, (9, 0), (), "GeneralConstraintCollection", '{F63C5479-BE87-431C-963C-DD79C9F33259}'),
		"Graphic": (166, 2, (9, 0), (), "Graphic", '{262F564D-8707-4A0E-806C-D9FB21F59324}'),
		"Ground": (164, 2, (9, 0), (), "Ground", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"GroupGeneralCollection": (542, 2, (9, 0), (), "GroupGeneralCollection", '{20D998FD-D089-43D4-B682-F84D247B6FB2}'),
		"JointCollection": (452, 2, (9, 0), (), "JointCollection", '{58A5314F-24D0-4D53-AE77-23B42CB9FAC7}'),
		"LayerNumber": (360, 2, (19, 0), (), "LayerNumber", None),
		"MMSToolkit": (537, 2, (9, 0), (), "MMSToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'),
		"MTT2DSubSystem": (356, 2, (9, 0), (), "MTT2DSubSystem", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"MTT3DSubSystem": (358, 2, (9, 0), (), "MTT3DSubSystem", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"MotherBody": (165, 2, (9, 0), (), "MotherBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerModelDocument": (167, 2, (9, 0), (), "OwnerModelDocument", '{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"PairConstraintCollection": (453, 2, (9, 0), (), "PairConstraintCollection", '{B21BD336-10F0-43BF-9EA3-E2258E754366}'),
		"ParametricPointCollection": (460, 2, (9, 0), (), "ParametricPointCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA244}'),
		"ParametricPointConnectorCollection": (516, 2, (9, 0), (), "ParametricPointConnectorCollection", '{2BA7F21D-5583-410B-8ABB-6AAE09261D4F}'),
		"ParametricValueCollection": (461, 2, (9, 0), (), "ParametricValueCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA245}'),
		"ParametricValueConnectorCollection": (517, 2, (9, 0), (), "ParametricValueConnectorCollection", '{25597944-74D4-4F24-8145-CD11FE87BCC8}'),
		"ParticleInterface": (519, 2, (9, 0), (), "ParticleInterface", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'),
		"PerformanceIndexCollection": (467, 2, (9, 0), (), "PerformanceIndexCollection", '{CC76CCE9-4D71-4DE9-8A4C-490E57C838C2}'),
		"R2R2DSubSystem": (529, 2, (9, 0), (), "R2R2DSubSystem", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"RFlexToolkit": (354, 2, (9, 0), (), "RFlexToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'),
		"RefFrame": (151, 2, (9, 0), (), "RefFrame", '{6A3295D9-E76B-473C-9655-23B7B1CBD671}'),
		"RequestExpressionCollection": (458, 2, (9, 0), (), "RequestExpressionCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA242}'),
		"RequestStandardCollection": (456, 2, (9, 0), (), "RequestStandardCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA240}'),
		"RequestUserSubroutineCollection": (457, 2, (9, 0), (), "RequestUserSubroutineCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA241}'),
		"ScenarioAnalysisProperty2": (532, 2, (9, 0), (), "ScenarioAnalysisProperty2", '{5FC5751E-20BB-455D-B127-751487DB0768}'),
		"ScopeCollection": (466, 2, (9, 0), (), "ScopeCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA24A}'),
		"SensorCollection": (523, 2, (9, 0), (), "SensorCollection", '{507862D8-28C1-423F-9D91-7BE66F10A6DF}'),
		"SplineCollection": (459, 2, (9, 0), (), "SplineCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA243}'),
		"StringCollection": (492, 2, (9, 0), (), "StringCollection", '{C9116090-BCBB-453C-A283-49E55A3344CA}'),
		"SubSystemCollection": (450, 2, (9, 0), (), "SubSystemCollection", '{D1451F25-D6A2-42B7-8DDF-D0F221D5FBFE}'),
		"TireToolkit": (357, 2, (9, 0), (), "TireToolkit", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}'),
		"TrackHMSubSystem": (495, 2, (9, 0), (), "TrackHMSubSystem", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"TrackLMSubSystem": (359, 2, (9, 0), (), "TrackLMSubSystem", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"UserSubroutineCollection": (463, 2, (9, 0), (), "UserSubroutineCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA247}'),
		"VariableEquationCollection": (464, 2, (9, 0), (), "VariableEquationCollection", '{65267578-7015-4BB5-BB65-F5F81CCEA248}'),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"LayerNumber": ((360, LCID, 4, 0),()),
		"MotherBody": ((165, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ISubSystemCollection(DispatchBaseClass):
	'''ISubSystemCollection'''
	CLSID = IID('{D1451F25-D6A2-42B7-8DDF-D0F221D5FBFE}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.ISubSystem
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.ISubSystem
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISweepOption(DispatchBaseClass):
	'''Options used when creating sweep geometry'''
	CLSID = IID('{5099BF4D-2B9E-405B-A041-3D4760AE1AA9}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_FixedAxis(self):
		return self._ApplyTypes_(*(253, 2, (8197, 0), (), "FixedAxis", None))
	def _get_UseFixedAxis(self):
		return self._ApplyTypes_(*(252, 2, (11, 0), (), "UseFixedAxis", None))
	def _get_UseTangent(self):
		return self._ApplyTypes_(*(251, 2, (11, 0), (), "UseTangent", None))

	def _set_FixedAxis(self, value):
		if "FixedAxis" in self.__dict__: self.__dict__["FixedAxis"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((253, LCID, 4, 0) + (variantValue,) + ()))
	def _set_UseFixedAxis(self, value):
		if "UseFixedAxis" in self.__dict__: self.__dict__["UseFixedAxis"] = value; return
		self._oleobj_.Invoke(*((252, LCID, 4, 0) + (value,) + ()))
	def _set_UseTangent(self, value):
		if "UseTangent" in self.__dict__: self.__dict__["UseTangent"] = value; return
		self._oleobj_.Invoke(*((251, LCID, 4, 0) + (value,) + ()))

	FixedAxis = property(_get_FixedAxis, _set_FixedAxis)
	'''
	Fixed Axis

	:type: list[float]
	'''
	UseFixedAxis = property(_get_UseFixedAxis, _set_UseFixedAxis)
	'''
	Use Fixed Axis

	:type: bool
	'''
	UseTangent = property(_get_UseTangent, _set_UseTangent)
	'''
	Use Tangent

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_FixedAxis": _set_FixedAxis,
		"_set_UseFixedAxis": _set_UseFixedAxis,
		"_set_UseTangent": _set_UseTangent,
	}
	_prop_map_get_ = {
		"FixedAxis": (253, 2, (8197, 0), (), "FixedAxis", None),
		"UseFixedAxis": (252, 2, (11, 0), (), "UseFixedAxis", None),
		"UseTangent": (251, 2, (11, 0), (), "UseTangent", None),
	}
	_prop_map_put_ = {
		"FixedAxis": ((253, LCID, 4, 0),()),
		"UseFixedAxis": ((252, LCID, 4, 0),()),
		"UseTangent": ((251, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ITireOutputChannel(DispatchBaseClass):
	'''Tire output channel'''
	CLSID = IID('{AB5A2925-53BC-4D4C-8101-4C3774E2DDEC}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_KingPinActionMarker(self):
		return self._ApplyTypes_(*(64, 2, (9, 0), (), "KingPinActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_KingPinBaseMarker(self):
		return self._ApplyTypes_(*(65, 2, (9, 0), (), "KingPinBaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_LongitudinalAxis(self):
		return self._ApplyTypes_(*(62, 2, (8197, 0), (), "LongitudinalAxis", None))
	def _get_LongitudinalMarker(self):
		return self._ApplyTypes_(*(61, 2, (9, 0), (), "LongitudinalMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))
	def _get_UseAccelerationOfHub(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "UseAccelerationOfHub", None))
	def _get_UseCamberAngle(self):
		return self._ApplyTypes_(*(59, 2, (11, 0), (), "UseCamberAngle", None))
	def _get_UseCasterAngle(self):
		return self._ApplyTypes_(*(63, 2, (11, 0), (), "UseCasterAngle", None))
	def _get_UseDisplacementOfHub(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UseDisplacementOfHub", None))
	def _get_UseFrictionEllipseProperty(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseFrictionEllipseProperty", None))
	def _get_UseSAECoordinateSystem(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseSAECoordinateSystem", None))
	def _get_UseTireContactProperty(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "UseTireContactProperty", None))
	def _get_UseTireForceAtContactPatch(self):
		return self._ApplyTypes_(*(58, 2, (11, 0), (), "UseTireForceAtContactPatch", None))
	def _get_UseTireKinematicProperty(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseTireKinematicProperty", None))
	def _get_UseToeAngle(self):
		return self._ApplyTypes_(*(60, 2, (11, 0), (), "UseToeAngle", None))
	def _get_UseVelocityOfHub(self):
		return self._ApplyTypes_(*(53, 2, (11, 0), (), "UseVelocityOfHub", None))

	def _set_KingPinActionMarker(self, value):
		if "KingPinActionMarker" in self.__dict__: self.__dict__["KingPinActionMarker"] = value; return
		self._oleobj_.Invoke(*((64, LCID, 4, 0) + (value,) + ()))
	def _set_KingPinBaseMarker(self, value):
		if "KingPinBaseMarker" in self.__dict__: self.__dict__["KingPinBaseMarker"] = value; return
		self._oleobj_.Invoke(*((65, LCID, 4, 0) + (value,) + ()))
	def _set_LongitudinalAxis(self, value):
		if "LongitudinalAxis" in self.__dict__: self.__dict__["LongitudinalAxis"] = value; return
		variantValue = win32com.client.VARIANT(8197, value)
		self._oleobj_.Invoke(*((62, LCID, 4, 0) + (variantValue,) + ()))
	def _set_LongitudinalMarker(self, value):
		if "LongitudinalMarker" in self.__dict__: self.__dict__["LongitudinalMarker"] = value; return
		self._oleobj_.Invoke(*((61, LCID, 4, 0) + (value,) + ()))
	def _set_UseAccelerationOfHub(self, value):
		if "UseAccelerationOfHub" in self.__dict__: self.__dict__["UseAccelerationOfHub"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_UseCamberAngle(self, value):
		if "UseCamberAngle" in self.__dict__: self.__dict__["UseCamberAngle"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))
	def _set_UseCasterAngle(self, value):
		if "UseCasterAngle" in self.__dict__: self.__dict__["UseCasterAngle"] = value; return
		self._oleobj_.Invoke(*((63, LCID, 4, 0) + (value,) + ()))
	def _set_UseDisplacementOfHub(self, value):
		if "UseDisplacementOfHub" in self.__dict__: self.__dict__["UseDisplacementOfHub"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_UseFrictionEllipseProperty(self, value):
		if "UseFrictionEllipseProperty" in self.__dict__: self.__dict__["UseFrictionEllipseProperty"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_UseSAECoordinateSystem(self, value):
		if "UseSAECoordinateSystem" in self.__dict__: self.__dict__["UseSAECoordinateSystem"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseTireContactProperty(self, value):
		if "UseTireContactProperty" in self.__dict__: self.__dict__["UseTireContactProperty"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_UseTireForceAtContactPatch(self, value):
		if "UseTireForceAtContactPatch" in self.__dict__: self.__dict__["UseTireForceAtContactPatch"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))
	def _set_UseTireKinematicProperty(self, value):
		if "UseTireKinematicProperty" in self.__dict__: self.__dict__["UseTireKinematicProperty"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_UseToeAngle(self, value):
		if "UseToeAngle" in self.__dict__: self.__dict__["UseToeAngle"] = value; return
		self._oleobj_.Invoke(*((60, LCID, 4, 0) + (value,) + ()))
	def _set_UseVelocityOfHub(self, value):
		if "UseVelocityOfHub" in self.__dict__: self.__dict__["UseVelocityOfHub"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))

	KingPinActionMarker = property(_get_KingPinActionMarker, _set_KingPinActionMarker)
	'''
	King pin action marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	KingPinBaseMarker = property(_get_KingPinBaseMarker, _set_KingPinBaseMarker)
	'''
	King pin base marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	LongitudinalAxis = property(_get_LongitudinalAxis, _set_LongitudinalAxis)
	'''
	Longitudinal axis

	:type: list[float]
	'''
	LongitudinalMarker = property(_get_LongitudinalMarker, _set_LongitudinalMarker)
	'''
	Longitudinal marker

	:type: recurdyn.ProcessNet.IMarker
	'''
	UseAccelerationOfHub = property(_get_UseAccelerationOfHub, _set_UseAccelerationOfHub)
	'''
	Use acceleration of hub

	:type: bool
	'''
	UseCamberAngle = property(_get_UseCamberAngle, _set_UseCamberAngle)
	'''
	Use camber angle

	:type: bool
	'''
	UseCasterAngle = property(_get_UseCasterAngle, _set_UseCasterAngle)
	'''
	Use caster angle

	:type: bool
	'''
	UseDisplacementOfHub = property(_get_UseDisplacementOfHub, _set_UseDisplacementOfHub)
	'''
	Use displacement of hub

	:type: bool
	'''
	UseFrictionEllipseProperty = property(_get_UseFrictionEllipseProperty, _set_UseFrictionEllipseProperty)
	'''
	Use friction ellipse property

	:type: bool
	'''
	UseSAECoordinateSystem = property(_get_UseSAECoordinateSystem, _set_UseSAECoordinateSystem)
	'''
	Use SAE coordinate system

	:type: bool
	'''
	UseTireContactProperty = property(_get_UseTireContactProperty, _set_UseTireContactProperty)
	'''
	Use tire contact property

	:type: bool
	'''
	UseTireForceAtContactPatch = property(_get_UseTireForceAtContactPatch, _set_UseTireForceAtContactPatch)
	'''
	Use tire force at contact patch

	:type: bool
	'''
	UseTireKinematicProperty = property(_get_UseTireKinematicProperty, _set_UseTireKinematicProperty)
	'''
	Use tire kinematic property

	:type: bool
	'''
	UseToeAngle = property(_get_UseToeAngle, _set_UseToeAngle)
	'''
	Use toe angle

	:type: bool
	'''
	UseVelocityOfHub = property(_get_UseVelocityOfHub, _set_UseVelocityOfHub)
	'''
	Use velocity of hub

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_KingPinActionMarker": _set_KingPinActionMarker,
		"_set_KingPinBaseMarker": _set_KingPinBaseMarker,
		"_set_LongitudinalAxis": _set_LongitudinalAxis,
		"_set_LongitudinalMarker": _set_LongitudinalMarker,
		"_set_UseAccelerationOfHub": _set_UseAccelerationOfHub,
		"_set_UseCamberAngle": _set_UseCamberAngle,
		"_set_UseCasterAngle": _set_UseCasterAngle,
		"_set_UseDisplacementOfHub": _set_UseDisplacementOfHub,
		"_set_UseFrictionEllipseProperty": _set_UseFrictionEllipseProperty,
		"_set_UseSAECoordinateSystem": _set_UseSAECoordinateSystem,
		"_set_UseTireContactProperty": _set_UseTireContactProperty,
		"_set_UseTireForceAtContactPatch": _set_UseTireForceAtContactPatch,
		"_set_UseTireKinematicProperty": _set_UseTireKinematicProperty,
		"_set_UseToeAngle": _set_UseToeAngle,
		"_set_UseVelocityOfHub": _set_UseVelocityOfHub,
	}
	_prop_map_get_ = {
		"KingPinActionMarker": (64, 2, (9, 0), (), "KingPinActionMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"KingPinBaseMarker": (65, 2, (9, 0), (), "KingPinBaseMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"LongitudinalAxis": (62, 2, (8197, 0), (), "LongitudinalAxis", None),
		"LongitudinalMarker": (61, 2, (9, 0), (), "LongitudinalMarker", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'),
		"UseAccelerationOfHub": (51, 2, (11, 0), (), "UseAccelerationOfHub", None),
		"UseCamberAngle": (59, 2, (11, 0), (), "UseCamberAngle", None),
		"UseCasterAngle": (63, 2, (11, 0), (), "UseCasterAngle", None),
		"UseDisplacementOfHub": (52, 2, (11, 0), (), "UseDisplacementOfHub", None),
		"UseFrictionEllipseProperty": (56, 2, (11, 0), (), "UseFrictionEllipseProperty", None),
		"UseSAECoordinateSystem": (55, 2, (11, 0), (), "UseSAECoordinateSystem", None),
		"UseTireContactProperty": (54, 2, (11, 0), (), "UseTireContactProperty", None),
		"UseTireForceAtContactPatch": (58, 2, (11, 0), (), "UseTireForceAtContactPatch", None),
		"UseTireKinematicProperty": (57, 2, (11, 0), (), "UseTireKinematicProperty", None),
		"UseToeAngle": (60, 2, (11, 0), (), "UseToeAngle", None),
		"UseVelocityOfHub": (53, 2, (11, 0), (), "UseVelocityOfHub", None),
	}
	_prop_map_put_ = {
		"KingPinActionMarker": ((64, LCID, 4, 0),()),
		"KingPinBaseMarker": ((65, LCID, 4, 0),()),
		"LongitudinalAxis": ((62, LCID, 4, 0),()),
		"LongitudinalMarker": ((61, LCID, 4, 0),()),
		"UseAccelerationOfHub": ((51, LCID, 4, 0),()),
		"UseCamberAngle": ((59, LCID, 4, 0),()),
		"UseCasterAngle": ((63, LCID, 4, 0),()),
		"UseDisplacementOfHub": ((52, LCID, 4, 0),()),
		"UseFrictionEllipseProperty": ((56, LCID, 4, 0),()),
		"UseSAECoordinateSystem": ((55, LCID, 4, 0),()),
		"UseTireContactProperty": ((54, LCID, 4, 0),()),
		"UseTireForceAtContactPatch": ((58, LCID, 4, 0),()),
		"UseTireKinematicProperty": ((57, LCID, 4, 0),()),
		"UseToeAngle": ((60, LCID, 4, 0),()),
		"UseVelocityOfHub": ((53, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ITireProperty(DispatchBaseClass):
	'''Tire property'''
	CLSID = IID('{DB995C7E-C9C4-4C2E-87C7-E4A030ED91AA}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Export(self, strFile, OverWrite):
		'''
		Export method
		
		:param strFile: str
		:param OverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(62, LCID, 1, (24, 0), ((8, 1), (11, 1)),strFile
			, OverWrite)


	def Import(self, strFile):
		'''
		Import method
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(61, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def _get_CarcassRadius(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "CarcassRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FrictionCoefficientAtZeroSlip(self):
		return self._ApplyTypes_(*(59, 2, (9, 0), (), "FrictionCoefficientAtZeroSlip", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FrictionCoefficientForTheFullSlip(self):
		return self._ApplyTypes_(*(60, 2, (9, 0), (), "FrictionCoefficientForTheFullSlip", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_LateralTireStiffnessByCamberAngle(self):
		return self._ApplyTypes_(*(56, 2, (9, 0), (), "LateralTireStiffnessByCamberAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_LateralTireStiffnessBySlipAngle(self):
		return self._ApplyTypes_(*(55, 2, (9, 0), (), "LateralTireStiffnessBySlipAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_LongitudinalTireStiffness(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "LongitudinalTireStiffness", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_RollingResistanceMomentCoefficient(self):
		return self._ApplyTypes_(*(57, 2, (9, 0), (), "RollingResistanceMomentCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_TireRadialDampingRatio(self):
		return self._ApplyTypes_(*(58, 2, (9, 0), (), "TireRadialDampingRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UnloadedTireRadius(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "UnloadedTireRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_VerticalTireStiffness(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "VerticalTireStiffness", '{2B5166E3-4B31-4607-B157-BE237A670336}'))

	CarcassRadius = property(_get_CarcassRadius, None)
	'''
	Carcass radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	FrictionCoefficientAtZeroSlip = property(_get_FrictionCoefficientAtZeroSlip, None)
	'''
	Friction coefficient at zero slip

	:type: recurdyn.ProcessNet.IDouble
	'''
	FrictionCoefficientForTheFullSlip = property(_get_FrictionCoefficientForTheFullSlip, None)
	'''
	Friction coefficient for the full slip

	:type: recurdyn.ProcessNet.IDouble
	'''
	LateralTireStiffnessByCamberAngle = property(_get_LateralTireStiffnessByCamberAngle, None)
	'''
	Lateral tire stiffness by camber angle

	:type: recurdyn.ProcessNet.IDouble
	'''
	LateralTireStiffnessBySlipAngle = property(_get_LateralTireStiffnessBySlipAngle, None)
	'''
	Lateral tire stiffness by slip angle

	:type: recurdyn.ProcessNet.IDouble
	'''
	LongitudinalTireStiffness = property(_get_LongitudinalTireStiffness, None)
	'''
	Longitudinal tire stiffness

	:type: recurdyn.ProcessNet.IDouble
	'''
	RollingResistanceMomentCoefficient = property(_get_RollingResistanceMomentCoefficient, None)
	'''
	Rolling resistance moment coefficient

	:type: recurdyn.ProcessNet.IDouble
	'''
	TireRadialDampingRatio = property(_get_TireRadialDampingRatio, None)
	'''
	Tire radial damping ratio

	:type: recurdyn.ProcessNet.IDouble
	'''
	UnloadedTireRadius = property(_get_UnloadedTireRadius, None)
	'''
	Unloaded tire radius

	:type: recurdyn.ProcessNet.IDouble
	'''
	VerticalTireStiffness = property(_get_VerticalTireStiffness, None)
	'''
	Vertical tire stiffness

	:type: recurdyn.ProcessNet.IDouble
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"CarcassRadius": (52, 2, (9, 0), (), "CarcassRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FrictionCoefficientAtZeroSlip": (59, 2, (9, 0), (), "FrictionCoefficientAtZeroSlip", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FrictionCoefficientForTheFullSlip": (60, 2, (9, 0), (), "FrictionCoefficientForTheFullSlip", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"LateralTireStiffnessByCamberAngle": (56, 2, (9, 0), (), "LateralTireStiffnessByCamberAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"LateralTireStiffnessBySlipAngle": (55, 2, (9, 0), (), "LateralTireStiffnessBySlipAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"LongitudinalTireStiffness": (54, 2, (9, 0), (), "LongitudinalTireStiffness", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"RollingResistanceMomentCoefficient": (57, 2, (9, 0), (), "RollingResistanceMomentCoefficient", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"TireRadialDampingRatio": (58, 2, (9, 0), (), "TireRadialDampingRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UnloadedTireRadius": (51, 2, (9, 0), (), "UnloadedTireRadius", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"VerticalTireStiffness": (53, 2, (9, 0), (), "VerticalTireStiffness", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ITireSoilProperty(DispatchBaseClass):
	'''Soil Force Property'''
	CLSID = IID('{4BF59E07-A035-4C63-9753-8CA8D16C02B1}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Export(self, strFile, OverWrite):
		'''
		Export method
		
		:param strFile: str
		:param OverWrite: bool
		'''
		return self._oleobj_.InvokeTypes(71, LCID, 1, (24, 0), ((8, 1), (11, 1)),strFile
			, OverWrite)


	def Import(self, strFile):
		'''
		Import method
		
		:param strFile: str
		'''
		return self._oleobj_.InvokeTypes(70, LCID, 1, (24, 0), ((8, 1),),strFile
			)


	def _get_AA(self):
		return self._ApplyTypes_(*(68, 2, (9, 0), (), "AA", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_BB(self):
		return self._ApplyTypes_(*(69, 2, (9, 0), (), "BB", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Cohesion(self):
		return self._ApplyTypes_(*(58, 2, (9, 0), (), "Cohesion", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Epsilon(self):
		return self._ApplyTypes_(*(67, 2, (9, 0), (), "Epsilon", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ExponentialNumber(self):
		return self._ApplyTypes_(*(57, 2, (9, 0), (), "ExponentialNumber", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_FrontNumber(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "FrontNumber", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SavedPassLength(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "SavedPassLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ShearingDeformationModulus(self):
		return self._ApplyTypes_(*(60, 2, (9, 0), (), "ShearingDeformationModulus", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_ShearingResistanceAngle(self):
		return self._ApplyTypes_(*(59, 2, (9, 0), (), "ShearingResistanceAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SinkageRatio(self):
		return self._ApplyTypes_(*(61, 2, (9, 0), (), "SinkageRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SinkageVelocityExponent(self):
		return self._ApplyTypes_(*(66, 2, (9, 0), (), "SinkageVelocityExponent", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SoftSoilModel(self):
		return self._ApplyTypes_(*(51, 2, (3, 0), (), "SoftSoilModel", '{B2030218-F83F-451B-9FB1-A1C47616BED4}'))
	def _get_SoilDynamicStiffness(self):
		return self._ApplyTypes_(*(65, 2, (9, 0), (), "SoilDynamicStiffness", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SoilStaticStiffness(self):
		return self._ApplyTypes_(*(64, 2, (9, 0), (), "SoilStaticStiffness", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SoilStiffness_kc(self):
		return self._ApplyTypes_(*(62, 2, (9, 0), (), "SoilStiffness_kc", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_SoilStiffness_khpi(self):
		return self._ApplyTypes_(*(63, 2, (9, 0), (), "SoilStiffness_khpi", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_TireDiameter(self):
		return self._ApplyTypes_(*(56, 2, (9, 0), (), "TireDiameter", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_TireWidth(self):
		return self._ApplyTypes_(*(55, 2, (9, 0), (), "TireWidth", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_UseMultipass(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UseMultipass", None))

	def _set_SoftSoilModel(self, value):
		if "SoftSoilModel" in self.__dict__: self.__dict__["SoftSoilModel"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_UseMultipass(self, value):
		if "UseMultipass" in self.__dict__: self.__dict__["UseMultipass"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))

	AA = property(_get_AA, None)
	'''
	AA

	:type: recurdyn.ProcessNet.IDouble
	'''
	BB = property(_get_BB, None)
	'''
	BB

	:type: recurdyn.ProcessNet.IDouble
	'''
	Cohesion = property(_get_Cohesion, None)
	'''
	Cohesion

	:type: recurdyn.ProcessNet.IDouble
	'''
	Epsilon = property(_get_Epsilon, None)
	'''
	Epsilon

	:type: recurdyn.ProcessNet.IDouble
	'''
	ExponentialNumber = property(_get_ExponentialNumber, None)
	'''
	Exponential Number

	:type: recurdyn.ProcessNet.IDouble
	'''
	FrontNumber = property(_get_FrontNumber, None)
	'''
	Front Number

	:type: recurdyn.ProcessNet.IDouble
	'''
	SavedPassLength = property(_get_SavedPassLength, None)
	'''
	Saved Pass Length

	:type: recurdyn.ProcessNet.IDouble
	'''
	ShearingDeformationModulus = property(_get_ShearingDeformationModulus, None)
	'''
	Shearing Deformation Modulus

	:type: recurdyn.ProcessNet.IDouble
	'''
	ShearingResistanceAngle = property(_get_ShearingResistanceAngle, None)
	'''
	Shearing Resistance Angle

	:type: recurdyn.ProcessNet.IDouble
	'''
	SinkageRatio = property(_get_SinkageRatio, None)
	'''
	Sinkage Ratio

	:type: recurdyn.ProcessNet.IDouble
	'''
	SinkageVelocityExponent = property(_get_SinkageVelocityExponent, None)
	'''
	Sinkage Velocity Exponent

	:type: recurdyn.ProcessNet.IDouble
	'''
	SoftSoilModel = property(_get_SoftSoilModel, _set_SoftSoilModel)
	'''
	Soft Soil Model

	:type: recurdyn.ProcessNet.TireSoftSoilModel
	'''
	SoilDynamicStiffness = property(_get_SoilDynamicStiffness, None)
	'''
	Soil Dynamic Stiffness(kdyn)

	:type: recurdyn.ProcessNet.IDouble
	'''
	SoilStaticStiffness = property(_get_SoilStaticStiffness, None)
	'''
	Soil Static Stiffness(kstat)

	:type: recurdyn.ProcessNet.IDouble
	'''
	SoilStiffness_kc = property(_get_SoilStiffness_kc, None)
	'''
	Soil Stiffness(kc)

	:type: recurdyn.ProcessNet.IDouble
	'''
	SoilStiffness_khpi = property(_get_SoilStiffness_khpi, None)
	'''
	Soil Stiffness(kphi)

	:type: recurdyn.ProcessNet.IDouble
	'''
	TireDiameter = property(_get_TireDiameter, None)
	'''
	Tire Diameter

	:type: recurdyn.ProcessNet.IDouble
	'''
	TireWidth = property(_get_TireWidth, None)
	'''
	Tire Width

	:type: recurdyn.ProcessNet.IDouble
	'''
	UseMultipass = property(_get_UseMultipass, _set_UseMultipass)
	'''
	Use Multipass

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_SoftSoilModel": _set_SoftSoilModel,
		"_set_UseMultipass": _set_UseMultipass,
	}
	_prop_map_get_ = {
		"AA": (68, 2, (9, 0), (), "AA", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"BB": (69, 2, (9, 0), (), "BB", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Cohesion": (58, 2, (9, 0), (), "Cohesion", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Epsilon": (67, 2, (9, 0), (), "Epsilon", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ExponentialNumber": (57, 2, (9, 0), (), "ExponentialNumber", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"FrontNumber": (53, 2, (9, 0), (), "FrontNumber", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SavedPassLength": (54, 2, (9, 0), (), "SavedPassLength", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ShearingDeformationModulus": (60, 2, (9, 0), (), "ShearingDeformationModulus", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"ShearingResistanceAngle": (59, 2, (9, 0), (), "ShearingResistanceAngle", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SinkageRatio": (61, 2, (9, 0), (), "SinkageRatio", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SinkageVelocityExponent": (66, 2, (9, 0), (), "SinkageVelocityExponent", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SoftSoilModel": (51, 2, (3, 0), (), "SoftSoilModel", '{B2030218-F83F-451B-9FB1-A1C47616BED4}'),
		"SoilDynamicStiffness": (65, 2, (9, 0), (), "SoilDynamicStiffness", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SoilStaticStiffness": (64, 2, (9, 0), (), "SoilStaticStiffness", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SoilStiffness_kc": (62, 2, (9, 0), (), "SoilStiffness_kc", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"SoilStiffness_khpi": (63, 2, (9, 0), (), "SoilStiffness_khpi", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"TireDiameter": (56, 2, (9, 0), (), "TireDiameter", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"TireWidth": (55, 2, (9, 0), (), "TireWidth", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"UseMultipass": (52, 2, (11, 0), (), "UseMultipass", None),
	}
	_prop_map_put_ = {
		"SoftSoilModel": ((51, LCID, 4, 0),()),
		"UseMultipass": ((52, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IToolbar(DispatchBaseClass):
	'''Toolbar Control'''
	CLSID = IID('{E7C5258C-4AED-43E9-860F-877BF7B1F153}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddMenuControl(self, Type, nId):
		'''
		Create MenuControl and add to Toolbar
		
		:param Type: MenuControlType
		:param nId: int
		:rtype: recurdyn.ProcessNet.IMenuControl
		'''
		ret = self._oleobj_.InvokeTypes(53, LCID, 1, (9, 0), ((3, 1), (3, 1)),Type
			, nId)
		if ret is not None:
			ret = Dispatch(ret, 'AddMenuControl', '{B2F1CBE0-707D-4E0B-B080-546D4664CA2F}')
		return ret

	def GetMenuControl(self, Index):
		'''
		Get MenuControl using index starting at 0
		
		:param Index: int
		:rtype: recurdyn.ProcessNet.IMenuControl
		'''
		ret = self._oleobj_.InvokeTypes(54, LCID, 1, (9, 0), ((19, 1),),Index
			)
		if ret is not None:
			ret = Dispatch(ret, 'GetMenuControl', '{B2F1CBE0-707D-4E0B-B080-546D4664CA2F}')
		return ret

	def InsertMenuControl(self, pControl):
		'''
		Insert MenuControl to Toolbar
		
		:param pControl: IMenuControl
		'''
		return self._oleobj_.InvokeTypes(52, LCID, 1, (24, 0), ((9, 1),),pControl
			)


	def SetVisible(self, Val):
		'''
		Show/Hide
		
		:param Val: bool
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (24, 0), ((11, 1),),Val
			)


	def _get_Caption(self):
		return self._ApplyTypes_(*(56, 2, (8, 0), (), "Caption", None))
	def _get_ID(self):
		return self._ApplyTypes_(*(57, 2, (19, 0), (), "ID", None))
	def _get_MenuControlCount(self):
		return self._ApplyTypes_(*(55, 2, (19, 0), (), "MenuControlCount", None))
	def _get_Position(self):
		return self._ApplyTypes_(*(58, 2, (3, 0), (), "Position", '{2CEF22B0-D838-45E9-856F-D57AABCCDD20}'))

	def _set_Caption(self, value):
		if "Caption" in self.__dict__: self.__dict__["Caption"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_ID(self, value):
		if "ID" in self.__dict__: self.__dict__["ID"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_Position(self, value):
		if "Position" in self.__dict__: self.__dict__["Position"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))

	Caption = property(_get_Caption, _set_Caption)
	'''
	Caption of Current Toolbar

	:type: str
	'''
	ID = property(_get_ID, _set_ID)
	'''
	ID of Current Toolbar

	:type: int
	'''
	MenuControlCount = property(_get_MenuControlCount, None)
	'''
	Number of MenuControl in Current Toolbar

	:type: int
	'''
	Position = property(_get_Position, _set_Position)
	'''
	Position of Toolbar

	:type: recurdyn.ProcessNet.ToolbarPosition
	'''

	_prop_map_set_function_ = {
		"_set_Caption": _set_Caption,
		"_set_ID": _set_ID,
		"_set_Position": _set_Position,
	}
	_prop_map_get_ = {
		"Caption": (56, 2, (8, 0), (), "Caption", None),
		"ID": (57, 2, (19, 0), (), "ID", None),
		"MenuControlCount": (55, 2, (19, 0), (), "MenuControlCount", None),
		"Position": (58, 2, (3, 0), (), "Position", '{2CEF22B0-D838-45E9-856F-D57AABCCDD20}'),
	}
	_prop_map_put_ = {
		"Caption": ((56, LCID, 4, 0),()),
		"ID": ((57, LCID, 4, 0),()),
		"Position": ((58, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IToolbarManager(DispatchBaseClass):
	'''Toolbar Control Manager'''
	CLSID = IID('{E7C5258C-4AED-43E9-860F-877BF7B1F154}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AddToolbar(self, szCaption):
		'''
		Create Toolbar and Add to ToolbarManager
		
		:param szCaption: str
		:rtype: recurdyn.ProcessNet.IToolbar
		'''
		ret = self._oleobj_.InvokeTypes(51, LCID, 1, (9, 0), ((8, 1),),szCaption
			)
		if ret is not None:
			ret = Dispatch(ret, 'AddToolbar', '{E7C5258C-4AED-43E9-860F-877BF7B1F153}')
		return ret

	def FindToolbar(self, Caption):
		'''
		Find Toolbar using Caption
		
		:param Caption: str
		:rtype: recurdyn.ProcessNet.IToolbar
		'''
		ret = self._oleobj_.InvokeTypes(52, LCID, 1, (9, 0), ((8, 1),),Caption
			)
		if ret is not None:
			ret = Dispatch(ret, 'FindToolbar', '{E7C5258C-4AED-43E9-860F-877BF7B1F153}')
		return ret

	def FindToolbarByID(self, idToolbar):
		'''
		Find Toolbar using ID
		
		:param idToolbar: int
		:rtype: recurdyn.ProcessNet.IToolbar
		'''
		ret = self._oleobj_.InvokeTypes(53, LCID, 1, (9, 0), ((19, 1),),idToolbar
			)
		if ret is not None:
			ret = Dispatch(ret, 'FindToolbarByID', '{E7C5258C-4AED-43E9-860F-877BF7B1F153}')
		return ret

	def FindToolbarByIndex(self, Index):
		'''
		Find Toolbar using index starting at 0
		
		:param Index: int
		:rtype: recurdyn.ProcessNet.IToolbar
		'''
		ret = self._oleobj_.InvokeTypes(54, LCID, 1, (9, 0), ((19, 1),),Index
			)
		if ret is not None:
			ret = Dispatch(ret, 'FindToolbarByIndex', '{E7C5258C-4AED-43E9-860F-877BF7B1F153}')
		return ret

	def MoveToolbarRight(self, pToolbarOnLeft, pToolbarMove):
		'''
		Move pToolbarMove to the right side of pToolbarOnLeft
		
		:param pToolbarOnLeft: IToolbar
		:param pToolbarMove: IToolbar
		'''
		return self._oleobj_.InvokeTypes(56, LCID, 1, (24, 0), ((9, 1), (9, 1)),pToolbarOnLeft
			, pToolbarMove)


	def _get_ToolbarCount(self):
		return self._ApplyTypes_(*(55, 2, (19, 0), (), "ToolbarCount", None))

	ToolbarCount = property(_get_ToolbarCount, None)
	'''
	Number of Toolbar

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"ToolbarCount": (55, 2, (19, 0), (), "ToolbarCount", None),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IToolkit(DispatchBaseClass):
	'''Toolkit'''
	CLSID = IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))

	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))

	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Comment": _set_Comment,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
	}
	_prop_map_get_ = {
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
	}
	_prop_map_put_ = {
		"Comment": ((102, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ITranslatorExportOptions(DispatchBaseClass):
	'''Translator Export Options'''
	CLSID = IID('{BF6D6355-72CE-4B22-B038-CDEAA00F7CE8}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_UseDisableHybridBodyForCATIA(self):
		return self._ApplyTypes_(*(53, 2, (11, 0), (), "UseDisableHybridBodyForCATIA", None))
	def _get_UseTranslateFreeCurveForACIS(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseTranslateFreeCurveForACIS", None))
	def _get_UseTranslateFreeCurveForCATIA(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "UseTranslateFreeCurveForCATIA", None))
	def _get_UseTranslateFreeCurveForIGES(self):
		return self._ApplyTypes_(*(58, 2, (11, 0), (), "UseTranslateFreeCurveForIGES", None))
	def _get_UseTranslateFreeSurfacesForACIS(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "UseTranslateFreeSurfacesForACIS", None))
	def _get_UseTranslateFreeSurfacesForCATIA(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UseTranslateFreeSurfacesForCATIA", None))
	def _get_UseTranslateFreeSurfacesForIGES(self):
		return self._ApplyTypes_(*(59, 2, (11, 0), (), "UseTranslateFreeSurfacesForIGES", None))
	def _get_VersionForACIS(self):
		return self._ApplyTypes_(*(57, 2, (8, 0), (), "VersionForACIS", None))
	def _get_VersionForCATIA(self):
		return self._ApplyTypes_(*(54, 2, (8, 0), (), "VersionForCATIA", None))
	def _get_VersionForParasolid(self):
		return self._ApplyTypes_(*(60, 2, (8, 0), (), "VersionForParasolid", None))

	def _set_UseDisableHybridBodyForCATIA(self, value):
		if "UseDisableHybridBodyForCATIA" in self.__dict__: self.__dict__["UseDisableHybridBodyForCATIA"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslateFreeCurveForACIS(self, value):
		if "UseTranslateFreeCurveForACIS" in self.__dict__: self.__dict__["UseTranslateFreeCurveForACIS"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslateFreeCurveForCATIA(self, value):
		if "UseTranslateFreeCurveForCATIA" in self.__dict__: self.__dict__["UseTranslateFreeCurveForCATIA"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslateFreeCurveForIGES(self, value):
		if "UseTranslateFreeCurveForIGES" in self.__dict__: self.__dict__["UseTranslateFreeCurveForIGES"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslateFreeSurfacesForACIS(self, value):
		if "UseTranslateFreeSurfacesForACIS" in self.__dict__: self.__dict__["UseTranslateFreeSurfacesForACIS"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslateFreeSurfacesForCATIA(self, value):
		if "UseTranslateFreeSurfacesForCATIA" in self.__dict__: self.__dict__["UseTranslateFreeSurfacesForCATIA"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslateFreeSurfacesForIGES(self, value):
		if "UseTranslateFreeSurfacesForIGES" in self.__dict__: self.__dict__["UseTranslateFreeSurfacesForIGES"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))
	def _set_VersionForACIS(self, value):
		if "VersionForACIS" in self.__dict__: self.__dict__["VersionForACIS"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_VersionForCATIA(self, value):
		if "VersionForCATIA" in self.__dict__: self.__dict__["VersionForCATIA"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_VersionForParasolid(self, value):
		if "VersionForParasolid" in self.__dict__: self.__dict__["VersionForParasolid"] = value; return
		self._oleobj_.Invoke(*((60, LCID, 4, 0) + (value,) + ()))

	UseDisableHybridBodyForCATIA = property(_get_UseDisableHybridBodyForCATIA, _set_UseDisableHybridBodyForCATIA)
	'''
	Use disable hybrid body for CATIA

	:type: bool
	'''
	UseTranslateFreeCurveForACIS = property(_get_UseTranslateFreeCurveForACIS, _set_UseTranslateFreeCurveForACIS)
	'''
	Use translate free curve for ACIS

	:type: bool
	'''
	UseTranslateFreeCurveForCATIA = property(_get_UseTranslateFreeCurveForCATIA, _set_UseTranslateFreeCurveForCATIA)
	'''
	Use translate free curve for CATIA

	:type: bool
	'''
	UseTranslateFreeCurveForIGES = property(_get_UseTranslateFreeCurveForIGES, _set_UseTranslateFreeCurveForIGES)
	'''
	Use translate free curve for IGES

	:type: bool
	'''
	UseTranslateFreeSurfacesForACIS = property(_get_UseTranslateFreeSurfacesForACIS, _set_UseTranslateFreeSurfacesForACIS)
	'''
	Use translate surfaces for ACIS

	:type: bool
	'''
	UseTranslateFreeSurfacesForCATIA = property(_get_UseTranslateFreeSurfacesForCATIA, _set_UseTranslateFreeSurfacesForCATIA)
	'''
	Use translate surfaces for CATIA

	:type: bool
	'''
	UseTranslateFreeSurfacesForIGES = property(_get_UseTranslateFreeSurfacesForIGES, _set_UseTranslateFreeSurfacesForIGES)
	'''
	Use translate surfaces for IGES

	:type: bool
	'''
	VersionForACIS = property(_get_VersionForACIS, _set_VersionForACIS)
	'''
	Export version of ACIS

	:type: str
	'''
	VersionForCATIA = property(_get_VersionForCATIA, _set_VersionForCATIA)
	'''
	Export version of CATIA

	:type: str
	'''
	VersionForParasolid = property(_get_VersionForParasolid, _set_VersionForParasolid)
	'''
	Export version of Parasolid

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_UseDisableHybridBodyForCATIA": _set_UseDisableHybridBodyForCATIA,
		"_set_UseTranslateFreeCurveForACIS": _set_UseTranslateFreeCurveForACIS,
		"_set_UseTranslateFreeCurveForCATIA": _set_UseTranslateFreeCurveForCATIA,
		"_set_UseTranslateFreeCurveForIGES": _set_UseTranslateFreeCurveForIGES,
		"_set_UseTranslateFreeSurfacesForACIS": _set_UseTranslateFreeSurfacesForACIS,
		"_set_UseTranslateFreeSurfacesForCATIA": _set_UseTranslateFreeSurfacesForCATIA,
		"_set_UseTranslateFreeSurfacesForIGES": _set_UseTranslateFreeSurfacesForIGES,
		"_set_VersionForACIS": _set_VersionForACIS,
		"_set_VersionForCATIA": _set_VersionForCATIA,
		"_set_VersionForParasolid": _set_VersionForParasolid,
	}
	_prop_map_get_ = {
		"UseDisableHybridBodyForCATIA": (53, 2, (11, 0), (), "UseDisableHybridBodyForCATIA", None),
		"UseTranslateFreeCurveForACIS": (55, 2, (11, 0), (), "UseTranslateFreeCurveForACIS", None),
		"UseTranslateFreeCurveForCATIA": (51, 2, (11, 0), (), "UseTranslateFreeCurveForCATIA", None),
		"UseTranslateFreeCurveForIGES": (58, 2, (11, 0), (), "UseTranslateFreeCurveForIGES", None),
		"UseTranslateFreeSurfacesForACIS": (56, 2, (11, 0), (), "UseTranslateFreeSurfacesForACIS", None),
		"UseTranslateFreeSurfacesForCATIA": (52, 2, (11, 0), (), "UseTranslateFreeSurfacesForCATIA", None),
		"UseTranslateFreeSurfacesForIGES": (59, 2, (11, 0), (), "UseTranslateFreeSurfacesForIGES", None),
		"VersionForACIS": (57, 2, (8, 0), (), "VersionForACIS", None),
		"VersionForCATIA": (54, 2, (8, 0), (), "VersionForCATIA", None),
		"VersionForParasolid": (60, 2, (8, 0), (), "VersionForParasolid", None),
	}
	_prop_map_put_ = {
		"UseDisableHybridBodyForCATIA": ((53, LCID, 4, 0),()),
		"UseTranslateFreeCurveForACIS": ((55, LCID, 4, 0),()),
		"UseTranslateFreeCurveForCATIA": ((51, LCID, 4, 0),()),
		"UseTranslateFreeCurveForIGES": ((58, LCID, 4, 0),()),
		"UseTranslateFreeSurfacesForACIS": ((56, LCID, 4, 0),()),
		"UseTranslateFreeSurfacesForCATIA": ((52, LCID, 4, 0),()),
		"UseTranslateFreeSurfacesForIGES": ((59, LCID, 4, 0),()),
		"VersionForACIS": ((57, LCID, 4, 0),()),
		"VersionForCATIA": ((54, LCID, 4, 0),()),
		"VersionForParasolid": ((60, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class ITranslatorImportOptions(DispatchBaseClass):
	'''Translator Import Options'''
	CLSID = IID('{FE0C7461-8AFD-47CA-A284-C05BD15B68FC}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_AssemblyOptionForCATIA(self):
		return self._ApplyTypes_(*(53, 2, (3, 0), (), "AssemblyOptionForCATIA", '{3FCF662A-AABA-49AE-966E-99F07E9C1F9C}'))
	def _get_ConvertFreePointToMarkerForACIS(self):
		return self._ApplyTypes_(*(60, 2, (11, 0), (), "ConvertFreePointToMarkerForACIS", None))
	def _get_ConvertFreePointToMarkerForCATIA(self):
		return self._ApplyTypes_(*(56, 2, (11, 0), (), "ConvertFreePointToMarkerForCATIA", None))
	def _get_ConvertFreePointToMarkerForIGES(self):
		return self._ApplyTypes_(*(64, 2, (11, 0), (), "ConvertFreePointToMarkerForIGES", None))
	def _get_ConvertFreePointToMarkerForNX(self):
		return self._ApplyTypes_(*(69, 2, (11, 0), (), "ConvertFreePointToMarkerForNX", None))
	def _get_UseHealingBodyForSTEP(self):
		return self._ApplyTypes_(*(71, 2, (11, 0), (), "UseHealingBodyForSTEP", None))
	def _get_UseHealingOptionForACIS(self):
		return self._ApplyTypes_(*(57, 2, (11, 0), (), "UseHealingOptionForACIS", None))
	def _get_UseHealingOptionForCATIA(self):
		return self._ApplyTypes_(*(51, 2, (11, 0), (), "UseHealingOptionForCATIA", None))
	def _get_UseHealingOptionForIGES(self):
		return self._ApplyTypes_(*(61, 2, (11, 0), (), "UseHealingOptionForIGES", None))
	def _get_UseHealingOptionForNX(self):
		return self._ApplyTypes_(*(67, 2, (11, 0), (), "UseHealingOptionForNX", None))
	def _get_UseHealingOptionForProE(self):
		return self._ApplyTypes_(*(65, 2, (11, 0), (), "UseHealingOptionForProE", None))
	def _get_UseHealingOptionForSolidWorks(self):
		return self._ApplyTypes_(*(70, 2, (11, 0), (), "UseHealingOptionForSolidWorks", None))
	def _get_UseSolidAsSheetForCATIA(self):
		return self._ApplyTypes_(*(52, 2, (11, 0), (), "UseSolidAsSheetForCATIA", None))
	def _get_UseSolidTrimForSTEP(self):
		return self._ApplyTypes_(*(72, 2, (11, 0), (), "UseSolidTrimForSTEP", None))
	def _get_UseTranslateFreeCurveForACIS(self):
		return self._ApplyTypes_(*(58, 2, (11, 0), (), "UseTranslateFreeCurveForACIS", None))
	def _get_UseTranslateFreeCurveForCATIA(self):
		return self._ApplyTypes_(*(54, 2, (11, 0), (), "UseTranslateFreeCurveForCATIA", None))
	def _get_UseTranslateFreeCurveForIGES(self):
		return self._ApplyTypes_(*(62, 2, (11, 0), (), "UseTranslateFreeCurveForIGES", None))
	def _get_UseTranslateFreeCurveForNX(self):
		return self._ApplyTypes_(*(68, 2, (11, 0), (), "UseTranslateFreeCurveForNX", None))
	def _get_UseTranslateFreeCurveForProE(self):
		return self._ApplyTypes_(*(66, 2, (11, 0), (), "UseTranslateFreeCurveForProE", None))
	def _get_UseTranslateFreeSurfacesForACIS(self):
		return self._ApplyTypes_(*(59, 2, (11, 0), (), "UseTranslateFreeSurfacesForACIS", None))
	def _get_UseTranslateFreeSurfacesForCATIA(self):
		return self._ApplyTypes_(*(55, 2, (11, 0), (), "UseTranslateFreeSurfacesForCATIA", None))
	def _get_UseTranslateFreeSurfacesForIGES(self):
		return self._ApplyTypes_(*(63, 2, (11, 0), (), "UseTranslateFreeSurfacesForIGES", None))

	def _set_AssemblyOptionForCATIA(self, value):
		if "AssemblyOptionForCATIA" in self.__dict__: self.__dict__["AssemblyOptionForCATIA"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_ConvertFreePointToMarkerForACIS(self, value):
		if "ConvertFreePointToMarkerForACIS" in self.__dict__: self.__dict__["ConvertFreePointToMarkerForACIS"] = value; return
		self._oleobj_.Invoke(*((60, LCID, 4, 0) + (value,) + ()))
	def _set_ConvertFreePointToMarkerForCATIA(self, value):
		if "ConvertFreePointToMarkerForCATIA" in self.__dict__: self.__dict__["ConvertFreePointToMarkerForCATIA"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_ConvertFreePointToMarkerForIGES(self, value):
		if "ConvertFreePointToMarkerForIGES" in self.__dict__: self.__dict__["ConvertFreePointToMarkerForIGES"] = value; return
		self._oleobj_.Invoke(*((64, LCID, 4, 0) + (value,) + ()))
	def _set_ConvertFreePointToMarkerForNX(self, value):
		if "ConvertFreePointToMarkerForNX" in self.__dict__: self.__dict__["ConvertFreePointToMarkerForNX"] = value; return
		self._oleobj_.Invoke(*((69, LCID, 4, 0) + (value,) + ()))
	def _set_UseHealingBodyForSTEP(self, value):
		if "UseHealingBodyForSTEP" in self.__dict__: self.__dict__["UseHealingBodyForSTEP"] = value; return
		self._oleobj_.Invoke(*((71, LCID, 4, 0) + (value,) + ()))
	def _set_UseHealingOptionForACIS(self, value):
		if "UseHealingOptionForACIS" in self.__dict__: self.__dict__["UseHealingOptionForACIS"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_UseHealingOptionForCATIA(self, value):
		if "UseHealingOptionForCATIA" in self.__dict__: self.__dict__["UseHealingOptionForCATIA"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_UseHealingOptionForIGES(self, value):
		if "UseHealingOptionForIGES" in self.__dict__: self.__dict__["UseHealingOptionForIGES"] = value; return
		self._oleobj_.Invoke(*((61, LCID, 4, 0) + (value,) + ()))
	def _set_UseHealingOptionForNX(self, value):
		if "UseHealingOptionForNX" in self.__dict__: self.__dict__["UseHealingOptionForNX"] = value; return
		self._oleobj_.Invoke(*((67, LCID, 4, 0) + (value,) + ()))
	def _set_UseHealingOptionForProE(self, value):
		if "UseHealingOptionForProE" in self.__dict__: self.__dict__["UseHealingOptionForProE"] = value; return
		self._oleobj_.Invoke(*((65, LCID, 4, 0) + (value,) + ()))
	def _set_UseHealingOptionForSolidWorks(self, value):
		if "UseHealingOptionForSolidWorks" in self.__dict__: self.__dict__["UseHealingOptionForSolidWorks"] = value; return
		self._oleobj_.Invoke(*((70, LCID, 4, 0) + (value,) + ()))
	def _set_UseSolidAsSheetForCATIA(self, value):
		if "UseSolidAsSheetForCATIA" in self.__dict__: self.__dict__["UseSolidAsSheetForCATIA"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_UseSolidTrimForSTEP(self, value):
		if "UseSolidTrimForSTEP" in self.__dict__: self.__dict__["UseSolidTrimForSTEP"] = value; return
		self._oleobj_.Invoke(*((72, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslateFreeCurveForACIS(self, value):
		if "UseTranslateFreeCurveForACIS" in self.__dict__: self.__dict__["UseTranslateFreeCurveForACIS"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslateFreeCurveForCATIA(self, value):
		if "UseTranslateFreeCurveForCATIA" in self.__dict__: self.__dict__["UseTranslateFreeCurveForCATIA"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslateFreeCurveForIGES(self, value):
		if "UseTranslateFreeCurveForIGES" in self.__dict__: self.__dict__["UseTranslateFreeCurveForIGES"] = value; return
		self._oleobj_.Invoke(*((62, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslateFreeCurveForNX(self, value):
		if "UseTranslateFreeCurveForNX" in self.__dict__: self.__dict__["UseTranslateFreeCurveForNX"] = value; return
		self._oleobj_.Invoke(*((68, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslateFreeCurveForProE(self, value):
		if "UseTranslateFreeCurveForProE" in self.__dict__: self.__dict__["UseTranslateFreeCurveForProE"] = value; return
		self._oleobj_.Invoke(*((66, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslateFreeSurfacesForACIS(self, value):
		if "UseTranslateFreeSurfacesForACIS" in self.__dict__: self.__dict__["UseTranslateFreeSurfacesForACIS"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslateFreeSurfacesForCATIA(self, value):
		if "UseTranslateFreeSurfacesForCATIA" in self.__dict__: self.__dict__["UseTranslateFreeSurfacesForCATIA"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UseTranslateFreeSurfacesForIGES(self, value):
		if "UseTranslateFreeSurfacesForIGES" in self.__dict__: self.__dict__["UseTranslateFreeSurfacesForIGES"] = value; return
		self._oleobj_.Invoke(*((63, LCID, 4, 0) + (value,) + ()))

	AssemblyOptionForCATIA = property(_get_AssemblyOptionForCATIA, _set_AssemblyOptionForCATIA)
	'''
	Assembly option for CATIA

	:type: recurdyn.ProcessNet.ImportOptionCATIAAssemlyType
	'''
	ConvertFreePointToMarkerForACIS = property(_get_ConvertFreePointToMarkerForACIS, _set_ConvertFreePointToMarkerForACIS)
	'''
	Convert free point to marker for ACIS

	:type: bool
	'''
	ConvertFreePointToMarkerForCATIA = property(_get_ConvertFreePointToMarkerForCATIA, _set_ConvertFreePointToMarkerForCATIA)
	'''
	Convert free point to marker for CATIA

	:type: bool
	'''
	ConvertFreePointToMarkerForIGES = property(_get_ConvertFreePointToMarkerForIGES, _set_ConvertFreePointToMarkerForIGES)
	'''
	Convert free point to marker for IGES

	:type: bool
	'''
	ConvertFreePointToMarkerForNX = property(_get_ConvertFreePointToMarkerForNX, _set_ConvertFreePointToMarkerForNX)
	'''
	Convert free point to marker for NX

	:type: bool
	'''
	UseHealingBodyForSTEP = property(_get_UseHealingBodyForSTEP, _set_UseHealingBodyForSTEP)
	'''
	Use healing body option for STEP

	:type: bool
	'''
	UseHealingOptionForACIS = property(_get_UseHealingOptionForACIS, _set_UseHealingOptionForACIS)
	'''
	Use healing option for ACIS

	:type: bool
	'''
	UseHealingOptionForCATIA = property(_get_UseHealingOptionForCATIA, _set_UseHealingOptionForCATIA)
	'''
	Use healing option for CATIA

	:type: bool
	'''
	UseHealingOptionForIGES = property(_get_UseHealingOptionForIGES, _set_UseHealingOptionForIGES)
	'''
	Use healing option for IGES

	:type: bool
	'''
	UseHealingOptionForNX = property(_get_UseHealingOptionForNX, _set_UseHealingOptionForNX)
	'''
	Use healing option for NX

	:type: bool
	'''
	UseHealingOptionForProE = property(_get_UseHealingOptionForProE, _set_UseHealingOptionForProE)
	'''
	Use healing option for ProE

	:type: bool
	'''
	UseHealingOptionForSolidWorks = property(_get_UseHealingOptionForSolidWorks, _set_UseHealingOptionForSolidWorks)
	'''
	Use healing option for SolidWorks

	:type: bool
	'''
	UseSolidAsSheetForCATIA = property(_get_UseSolidAsSheetForCATIA, _set_UseSolidAsSheetForCATIA)
	'''
	Use solid as sheet for CATIA

	:type: bool
	'''
	UseSolidTrimForSTEP = property(_get_UseSolidTrimForSTEP, _set_UseSolidTrimForSTEP)
	'''
	Use solid trim for STEP

	:type: bool
	'''
	UseTranslateFreeCurveForACIS = property(_get_UseTranslateFreeCurveForACIS, _set_UseTranslateFreeCurveForACIS)
	'''
	Use translate free curve for ACIS

	:type: bool
	'''
	UseTranslateFreeCurveForCATIA = property(_get_UseTranslateFreeCurveForCATIA, _set_UseTranslateFreeCurveForCATIA)
	'''
	Use translate free curve for CATIA

	:type: bool
	'''
	UseTranslateFreeCurveForIGES = property(_get_UseTranslateFreeCurveForIGES, _set_UseTranslateFreeCurveForIGES)
	'''
	Use translate free curve for IGES

	:type: bool
	'''
	UseTranslateFreeCurveForNX = property(_get_UseTranslateFreeCurveForNX, _set_UseTranslateFreeCurveForNX)
	'''
	Use translate free curve for NX

	:type: bool
	'''
	UseTranslateFreeCurveForProE = property(_get_UseTranslateFreeCurveForProE, _set_UseTranslateFreeCurveForProE)
	'''
	Use translate free curve for ProE

	:type: bool
	'''
	UseTranslateFreeSurfacesForACIS = property(_get_UseTranslateFreeSurfacesForACIS, _set_UseTranslateFreeSurfacesForACIS)
	'''
	Use translate surfaces for ACIS

	:type: bool
	'''
	UseTranslateFreeSurfacesForCATIA = property(_get_UseTranslateFreeSurfacesForCATIA, _set_UseTranslateFreeSurfacesForCATIA)
	'''
	Use translate surfaces for CATIA

	:type: bool
	'''
	UseTranslateFreeSurfacesForIGES = property(_get_UseTranslateFreeSurfacesForIGES, _set_UseTranslateFreeSurfacesForIGES)
	'''
	Use translate surfaces for IGES

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_AssemblyOptionForCATIA": _set_AssemblyOptionForCATIA,
		"_set_ConvertFreePointToMarkerForACIS": _set_ConvertFreePointToMarkerForACIS,
		"_set_ConvertFreePointToMarkerForCATIA": _set_ConvertFreePointToMarkerForCATIA,
		"_set_ConvertFreePointToMarkerForIGES": _set_ConvertFreePointToMarkerForIGES,
		"_set_ConvertFreePointToMarkerForNX": _set_ConvertFreePointToMarkerForNX,
		"_set_UseHealingBodyForSTEP": _set_UseHealingBodyForSTEP,
		"_set_UseHealingOptionForACIS": _set_UseHealingOptionForACIS,
		"_set_UseHealingOptionForCATIA": _set_UseHealingOptionForCATIA,
		"_set_UseHealingOptionForIGES": _set_UseHealingOptionForIGES,
		"_set_UseHealingOptionForNX": _set_UseHealingOptionForNX,
		"_set_UseHealingOptionForProE": _set_UseHealingOptionForProE,
		"_set_UseHealingOptionForSolidWorks": _set_UseHealingOptionForSolidWorks,
		"_set_UseSolidAsSheetForCATIA": _set_UseSolidAsSheetForCATIA,
		"_set_UseSolidTrimForSTEP": _set_UseSolidTrimForSTEP,
		"_set_UseTranslateFreeCurveForACIS": _set_UseTranslateFreeCurveForACIS,
		"_set_UseTranslateFreeCurveForCATIA": _set_UseTranslateFreeCurveForCATIA,
		"_set_UseTranslateFreeCurveForIGES": _set_UseTranslateFreeCurveForIGES,
		"_set_UseTranslateFreeCurveForNX": _set_UseTranslateFreeCurveForNX,
		"_set_UseTranslateFreeCurveForProE": _set_UseTranslateFreeCurveForProE,
		"_set_UseTranslateFreeSurfacesForACIS": _set_UseTranslateFreeSurfacesForACIS,
		"_set_UseTranslateFreeSurfacesForCATIA": _set_UseTranslateFreeSurfacesForCATIA,
		"_set_UseTranslateFreeSurfacesForIGES": _set_UseTranslateFreeSurfacesForIGES,
	}
	_prop_map_get_ = {
		"AssemblyOptionForCATIA": (53, 2, (3, 0), (), "AssemblyOptionForCATIA", '{3FCF662A-AABA-49AE-966E-99F07E9C1F9C}'),
		"ConvertFreePointToMarkerForACIS": (60, 2, (11, 0), (), "ConvertFreePointToMarkerForACIS", None),
		"ConvertFreePointToMarkerForCATIA": (56, 2, (11, 0), (), "ConvertFreePointToMarkerForCATIA", None),
		"ConvertFreePointToMarkerForIGES": (64, 2, (11, 0), (), "ConvertFreePointToMarkerForIGES", None),
		"ConvertFreePointToMarkerForNX": (69, 2, (11, 0), (), "ConvertFreePointToMarkerForNX", None),
		"UseHealingBodyForSTEP": (71, 2, (11, 0), (), "UseHealingBodyForSTEP", None),
		"UseHealingOptionForACIS": (57, 2, (11, 0), (), "UseHealingOptionForACIS", None),
		"UseHealingOptionForCATIA": (51, 2, (11, 0), (), "UseHealingOptionForCATIA", None),
		"UseHealingOptionForIGES": (61, 2, (11, 0), (), "UseHealingOptionForIGES", None),
		"UseHealingOptionForNX": (67, 2, (11, 0), (), "UseHealingOptionForNX", None),
		"UseHealingOptionForProE": (65, 2, (11, 0), (), "UseHealingOptionForProE", None),
		"UseHealingOptionForSolidWorks": (70, 2, (11, 0), (), "UseHealingOptionForSolidWorks", None),
		"UseSolidAsSheetForCATIA": (52, 2, (11, 0), (), "UseSolidAsSheetForCATIA", None),
		"UseSolidTrimForSTEP": (72, 2, (11, 0), (), "UseSolidTrimForSTEP", None),
		"UseTranslateFreeCurveForACIS": (58, 2, (11, 0), (), "UseTranslateFreeCurveForACIS", None),
		"UseTranslateFreeCurveForCATIA": (54, 2, (11, 0), (), "UseTranslateFreeCurveForCATIA", None),
		"UseTranslateFreeCurveForIGES": (62, 2, (11, 0), (), "UseTranslateFreeCurveForIGES", None),
		"UseTranslateFreeCurveForNX": (68, 2, (11, 0), (), "UseTranslateFreeCurveForNX", None),
		"UseTranslateFreeCurveForProE": (66, 2, (11, 0), (), "UseTranslateFreeCurveForProE", None),
		"UseTranslateFreeSurfacesForACIS": (59, 2, (11, 0), (), "UseTranslateFreeSurfacesForACIS", None),
		"UseTranslateFreeSurfacesForCATIA": (55, 2, (11, 0), (), "UseTranslateFreeSurfacesForCATIA", None),
		"UseTranslateFreeSurfacesForIGES": (63, 2, (11, 0), (), "UseTranslateFreeSurfacesForIGES", None),
	}
	_prop_map_put_ = {
		"AssemblyOptionForCATIA": ((53, LCID, 4, 0),()),
		"ConvertFreePointToMarkerForACIS": ((60, LCID, 4, 0),()),
		"ConvertFreePointToMarkerForCATIA": ((56, LCID, 4, 0),()),
		"ConvertFreePointToMarkerForIGES": ((64, LCID, 4, 0),()),
		"ConvertFreePointToMarkerForNX": ((69, LCID, 4, 0),()),
		"UseHealingBodyForSTEP": ((71, LCID, 4, 0),()),
		"UseHealingOptionForACIS": ((57, LCID, 4, 0),()),
		"UseHealingOptionForCATIA": ((51, LCID, 4, 0),()),
		"UseHealingOptionForIGES": ((61, LCID, 4, 0),()),
		"UseHealingOptionForNX": ((67, LCID, 4, 0),()),
		"UseHealingOptionForProE": ((65, LCID, 4, 0),()),
		"UseHealingOptionForSolidWorks": ((70, LCID, 4, 0),()),
		"UseSolidAsSheetForCATIA": ((52, LCID, 4, 0),()),
		"UseSolidTrimForSTEP": ((72, LCID, 4, 0),()),
		"UseTranslateFreeCurveForACIS": ((58, LCID, 4, 0),()),
		"UseTranslateFreeCurveForCATIA": ((54, LCID, 4, 0),()),
		"UseTranslateFreeCurveForIGES": ((62, LCID, 4, 0),()),
		"UseTranslateFreeCurveForNX": ((68, LCID, 4, 0),()),
		"UseTranslateFreeCurveForProE": ((66, LCID, 4, 0),()),
		"UseTranslateFreeSurfacesForACIS": ((59, LCID, 4, 0),()),
		"UseTranslateFreeSurfacesForCATIA": ((55, LCID, 4, 0),()),
		"UseTranslateFreeSurfacesForIGES": ((63, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IUnit(DispatchBaseClass):
	'''Unit'''
	CLSID = IID('{09A65909-6FBB-488A-9726-D320F5666395}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_UnitAngle(self):
		return self._ApplyTypes_(*(55, 2, (3, 0), (), "UnitAngle", '{D2152896-DBCC-46C8-A2C0-3C62D5AACD76}'))
	def _get_UnitForce(self):
		return self._ApplyTypes_(*(51, 2, (3, 0), (), "UnitForce", '{8C66CBBE-8A50-4CE2-864E-91F55768E45B}'))
	def _get_UnitLength(self):
		return self._ApplyTypes_(*(53, 2, (3, 0), (), "UnitLength", '{1E0862C7-F075-4FD6-AF05-C630E38459C4}'))
	def _get_UnitMass(self):
		return self._ApplyTypes_(*(52, 2, (3, 0), (), "UnitMass", '{56D9C80E-54A0-4234-A64E-9F699B21E136}'))
	def _get_UnitTime(self):
		return self._ApplyTypes_(*(54, 2, (3, 0), (), "UnitTime", '{D2152896-DBCC-46C8-A2C0-3C62D5AACD75}'))

	def _set_UnitAngle(self, value):
		if "UnitAngle" in self.__dict__: self.__dict__["UnitAngle"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_UnitForce(self, value):
		if "UnitForce" in self.__dict__: self.__dict__["UnitForce"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_UnitLength(self, value):
		if "UnitLength" in self.__dict__: self.__dict__["UnitLength"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))
	def _set_UnitMass(self, value):
		if "UnitMass" in self.__dict__: self.__dict__["UnitMass"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_UnitSystem(self, value):
		if "UnitSystem" in self.__dict__: self.__dict__["UnitSystem"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_UnitTime(self, value):
		if "UnitTime" in self.__dict__: self.__dict__["UnitTime"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))

	UnitAngle = property(_get_UnitAngle, _set_UnitAngle)
	'''
	Angle unit

	:type: recurdyn.ProcessNet.UnitAngle
	'''
	UnitForce = property(_get_UnitForce, _set_UnitForce)
	'''
	Force unit

	:type: recurdyn.ProcessNet.UnitForce
	'''
	UnitLength = property(_get_UnitLength, _set_UnitLength)
	'''
	Length unit

	:type: recurdyn.ProcessNet.UnitLength
	'''
	UnitMass = property(_get_UnitMass, _set_UnitMass)
	'''
	Mass unit

	:type: recurdyn.ProcessNet.UnitMass
	'''
	UnitTime = property(_get_UnitTime, _set_UnitTime)
	'''
	Time unit

	:type: recurdyn.ProcessNet.UnitTime
	'''
	UnitSystem = property(None, _set_UnitSystem)
	'''
	System unit

	:type: recurdyn.ProcessNet.UnitSystem
	'''

	_prop_map_set_function_ = {
		"_set_UnitAngle": _set_UnitAngle,
		"_set_UnitForce": _set_UnitForce,
		"_set_UnitLength": _set_UnitLength,
		"_set_UnitMass": _set_UnitMass,
		"_set_UnitSystem": _set_UnitSystem,
		"_set_UnitTime": _set_UnitTime,
	}
	_prop_map_get_ = {
		"UnitAngle": (55, 2, (3, 0), (), "UnitAngle", '{D2152896-DBCC-46C8-A2C0-3C62D5AACD76}'),
		"UnitForce": (51, 2, (3, 0), (), "UnitForce", '{8C66CBBE-8A50-4CE2-864E-91F55768E45B}'),
		"UnitLength": (53, 2, (3, 0), (), "UnitLength", '{1E0862C7-F075-4FD6-AF05-C630E38459C4}'),
		"UnitMass": (52, 2, (3, 0), (), "UnitMass", '{56D9C80E-54A0-4234-A64E-9F699B21E136}'),
		"UnitTime": (54, 2, (3, 0), (), "UnitTime", '{D2152896-DBCC-46C8-A2C0-3C62D5AACD75}'),
	}
	_prop_map_put_ = {
		"UnitAngle": ((55, LCID, 4, 0),()),
		"UnitForce": ((51, LCID, 4, 0),()),
		"UnitLength": ((53, LCID, 4, 0),()),
		"UnitMass": ((52, LCID, 4, 0),()),
		"UnitSystem": ((56, LCID, 4, 0),()),
		"UnitTime": ((54, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IUserSubroutine(DispatchBaseClass):
	'''User subroutine'''
	CLSID = IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Arguments(self):
		return self._ApplyTypes_(*(153, 2, (8200, 0), (), "Arguments", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_DllFileName(self):
		return self._ApplyTypes_(*(152, 2, (8, 0), (), "DllFileName", None))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_UserParameter(self):
		return self._ApplyTypes_(*(151, 2, (8, 0), (), "UserParameter", None))

	def _set_Arguments(self, value):
		if "Arguments" in self.__dict__: self.__dict__["Arguments"] = value; return
		variantValue = win32com.client.VARIANT(8200, value)
		self._oleobj_.Invoke(*((153, LCID, 4, 0) + (variantValue,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_DllFileName(self, value):
		if "DllFileName" in self.__dict__: self.__dict__["DllFileName"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UserParameter(self, value):
		if "UserParameter" in self.__dict__: self.__dict__["UserParameter"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))

	Arguments = property(_get_Arguments, _set_Arguments)
	'''
	Arguments list

	:type: list[str]
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	DllFileName = property(_get_DllFileName, _set_DllFileName)
	'''
	The name of DLL file which contains the user subroutine

	:type: str
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	UserParameter = property(_get_UserParameter, _set_UserParameter)
	'''
	User defined parameters needed for the user written subroutine

	:type: str
	'''

	_prop_map_set_function_ = {
		"_set_Arguments": _set_Arguments,
		"_set_Comment": _set_Comment,
		"_set_DllFileName": _set_DllFileName,
		"_set_Name": _set_Name,
		"_set_UserData": _set_UserData,
		"_set_UserParameter": _set_UserParameter,
	}
	_prop_map_get_ = {
		"Arguments": (153, 2, (8200, 0), (), "Arguments", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"DllFileName": (152, 2, (8, 0), (), "DllFileName", None),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"UserParameter": (151, 2, (8, 0), (), "UserParameter", None),
	}
	_prop_map_put_ = {
		"Arguments": ((153, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"DllFileName": ((152, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"UserParameter": ((151, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IUserSubroutineCollection(DispatchBaseClass):
	'''IUserSubroutineCollection'''
	CLSID = IID('{65267578-7015-4BB5-BB65-F5F81CCEA247}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IUserSubroutine
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IUserSubroutine
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IUtility(DispatchBaseClass):
	'''Utility Function'''
	CLSID = IID('{512577A8-E193-4449-8C6B-A2D59EDBFCF0}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_CuttingPlane(self):
		return self._ApplyTypes_(*(53, 2, (9, 0), (), "CuttingPlane", '{47FC98DE-E7C5-46F0-B2C3-4FAB19AA38AB}'))
	def _get_Measure(self):
		return self._ApplyTypes_(*(52, 2, (9, 0), (), "Measure", '{50C894D7-EA63-455B-B693-E9AF8A66E7CB}'))
	def _get_ObjectControl(self):
		return self._ApplyTypes_(*(51, 2, (9, 0), (), "ObjectControl", '{21BE44B2-CA0C-4C78-8EB3-B3CA8BDE0726}'))
	def _get_Pattern(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "Pattern", '{23C82686-D1A0-4821-B9EE-F8D0CA03DF32}'))
	def _get_RelationMap(self):
		return self._ApplyTypes_(*(55, 2, (9, 0), (), "RelationMap", '{5A99CECC-EA9D-4687-8156-FF398A176E63}'))

	CuttingPlane = property(_get_CuttingPlane, None)
	'''
	Cutting plane

	:type: recurdyn.ProcessNet.ICuttingPlane
	'''
	Measure = property(_get_Measure, None)
	'''
	Measure

	:type: recurdyn.ProcessNet.IMeasure
	'''
	ObjectControl = property(_get_ObjectControl, None)
	'''
	Object Control

	:type: recurdyn.ProcessNet.IObjectControl
	'''
	Pattern = property(_get_Pattern, None)
	'''
	Pattern geometries and bodies

	:type: recurdyn.ProcessNet.IPattern
	'''
	RelationMap = property(_get_RelationMap, None)
	'''
	Relation Map

	:type: recurdyn.ProcessNet.IRelationMap
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"CuttingPlane": (53, 2, (9, 0), (), "CuttingPlane", '{47FC98DE-E7C5-46F0-B2C3-4FAB19AA38AB}'),
		"Measure": (52, 2, (9, 0), (), "Measure", '{50C894D7-EA63-455B-B693-E9AF8A66E7CB}'),
		"ObjectControl": (51, 2, (9, 0), (), "ObjectControl", '{21BE44B2-CA0C-4C78-8EB3-B3CA8BDE0726}'),
		"Pattern": (54, 2, (9, 0), (), "Pattern", '{23C82686-D1A0-4821-B9EE-F8D0CA03DF32}'),
		"RelationMap": (55, 2, (9, 0), (), "RelationMap", '{5A99CECC-EA9D-4687-8156-FF398A176E63}'),
	}
	_prop_map_put_ = {
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IVariableEquation(DispatchBaseClass):
	'''Variable equation'''
	CLSID = IID('{1ECE0007-85A7-4F9B-AD9E-FEE2684A398E}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def GetRDGeneric(self):
		'''
		FunctionBay Internal Use Only
		
		:rtype: int
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)


	def _get_Active(self):
		return self._ApplyTypes_(*(151, 2, (11, 0), (), "Active", None))
	def _get_Comment(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "Comment", None))
	def _get_Expression(self):
		return self._ApplyTypes_(*(156, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'))
	def _get_FullName(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "FullName", None))
	def _get_InitialCondition(self):
		return self._ApplyTypes_(*(153, 2, (9, 0), (), "InitialCondition", '{2B5166E3-4B31-4607-B157-BE237A670336}'))
	def _get_Name(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "Name", None))
	def _get_Owner(self):
		return self._ApplyTypes_(*(106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))
	def _get_OwnerBody(self):
		return self._ApplyTypes_(*(105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'))
	def _get_OwnerSubSystem(self):
		return self._ApplyTypes_(*(104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'))
	def _get_Type(self):
		return self._ApplyTypes_(*(154, 2, (3, 0), (), "Type", '{A79AFF6F-883F-4763-A44B-1879ECC74AFD}'))
	def _get_UseInitialCondition(self):
		return self._ApplyTypes_(*(152, 2, (11, 0), (), "UseInitialCondition", None))
	def _get_UserData(self):
		return self._ApplyTypes_(*(107, 2, (8, 0), (), "UserData", None))
	def _get_UserSubroutine(self):
		return self._ApplyTypes_(*(155, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'))

	def _set_Active(self, value):
		if "Active" in self.__dict__: self.__dict__["Active"] = value; return
		self._oleobj_.Invoke(*((151, LCID, 4, 0) + (value,) + ()))
	def _set_Comment(self, value):
		if "Comment" in self.__dict__: self.__dict__["Comment"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_Expression(self, value):
		if "Expression" in self.__dict__: self.__dict__["Expression"] = value; return
		self._oleobj_.Invoke(*((156, LCID, 4, 0) + (value,) + ()))
	def _set_Name(self, value):
		if "Name" in self.__dict__: self.__dict__["Name"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_Type(self, value):
		if "Type" in self.__dict__: self.__dict__["Type"] = value; return
		self._oleobj_.Invoke(*((154, LCID, 4, 0) + (value,) + ()))
	def _set_UseInitialCondition(self, value):
		if "UseInitialCondition" in self.__dict__: self.__dict__["UseInitialCondition"] = value; return
		self._oleobj_.Invoke(*((152, LCID, 4, 0) + (value,) + ()))
	def _set_UserData(self, value):
		if "UserData" in self.__dict__: self.__dict__["UserData"] = value; return
		self._oleobj_.Invoke(*((107, LCID, 4, 0) + (value,) + ()))
	def _set_UserSubroutine(self, value):
		if "UserSubroutine" in self.__dict__: self.__dict__["UserSubroutine"] = value; return
		self._oleobj_.Invoke(*((155, LCID, 4, 0) + (value,) + ()))

	Active = property(_get_Active, _set_Active)
	'''
	If true, this variable equation becomes active

	:type: bool
	'''
	Comment = property(_get_Comment, _set_Comment)
	'''
	Comment

	:type: str
	'''
	Expression = property(_get_Expression, _set_Expression)
	'''
	Expression (If equation type is standard variable equation, expression will be used.)

	:type: recurdyn.ProcessNet.IExpression
	'''
	FullName = property(_get_FullName, None)
	'''
	FullName such as Body1.Marker1@Model1

	:type: str
	'''
	InitialCondition = property(_get_InitialCondition, None)
	'''
	Initial condition

	:type: recurdyn.ProcessNet.IDouble
	'''
	Name = property(_get_Name, _set_Name)
	'''
	Name

	:type: str
	'''
	Owner = property(_get_Owner, None)
	'''
	Owner returns owning IGeneric interface, use Owner for IRFlexBody, IFFlexBody

	:type: recurdyn.ProcessNet.IGeneric
	'''
	OwnerBody = property(_get_OwnerBody, None)
	'''
	OwnerBody returns owning IBody interface

	:type: recurdyn.ProcessNet.IBody
	'''
	OwnerSubSystem = property(_get_OwnerSubSystem, None)
	'''
	OwnerSubSystem returns owning ISubSubSystem interface

	:type: recurdyn.ProcessNet.ISubSystem
	'''
	Type = property(_get_Type, _set_Type)
	'''
	Equation type

	:type: recurdyn.ProcessNet.VariableEquationType
	'''
	UseInitialCondition = property(_get_UseInitialCondition, _set_UseInitialCondition)
	'''
	Use initial condition

	:type: bool
	'''
	UserData = property(_get_UserData, _set_UserData)
	'''
	User supplied data

	:type: str
	'''
	UserSubroutine = property(_get_UserSubroutine, _set_UserSubroutine)
	'''
	User subroutine (If equation type is user subroutine equation, user subroutine will be used.)

	:type: recurdyn.ProcessNet.IUserSubroutine
	'''

	_prop_map_set_function_ = {
		"_set_Active": _set_Active,
		"_set_Comment": _set_Comment,
		"_set_Expression": _set_Expression,
		"_set_Name": _set_Name,
		"_set_Type": _set_Type,
		"_set_UseInitialCondition": _set_UseInitialCondition,
		"_set_UserData": _set_UserData,
		"_set_UserSubroutine": _set_UserSubroutine,
	}
	_prop_map_get_ = {
		"Active": (151, 2, (11, 0), (), "Active", None),
		"Comment": (102, 2, (8, 0), (), "Comment", None),
		"Expression": (156, 2, (9, 0), (), "Expression", '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}'),
		"FullName": (103, 2, (8, 0), (), "FullName", None),
		"InitialCondition": (153, 2, (9, 0), (), "InitialCondition", '{2B5166E3-4B31-4607-B157-BE237A670336}'),
		"Name": (101, 2, (8, 0), (), "Name", None),
		"Owner": (106, 2, (9, 0), (), "Owner", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'),
		"OwnerBody": (105, 2, (9, 0), (), "OwnerBody", '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}'),
		"OwnerSubSystem": (104, 2, (9, 0), (), "OwnerSubSystem", '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}'),
		"Type": (154, 2, (3, 0), (), "Type", '{A79AFF6F-883F-4763-A44B-1879ECC74AFD}'),
		"UseInitialCondition": (152, 2, (11, 0), (), "UseInitialCondition", None),
		"UserData": (107, 2, (8, 0), (), "UserData", None),
		"UserSubroutine": (155, 2, (9, 0), (), "UserSubroutine", '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}'),
	}
	_prop_map_put_ = {
		"Active": ((151, LCID, 4, 0),()),
		"Comment": ((102, LCID, 4, 0),()),
		"Expression": ((156, LCID, 4, 0),()),
		"Name": ((101, LCID, 4, 0),()),
		"Type": ((154, LCID, 4, 0),()),
		"UseInitialCondition": ((152, LCID, 4, 0),()),
		"UserData": ((107, LCID, 4, 0),()),
		"UserSubroutine": ((155, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IVariableEquationCollection(DispatchBaseClass):
	'''IVariableEquationCollection'''
	CLSID = IID('{65267578-7015-4BB5-BB65-F5F81CCEA248}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def Item(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IVariableEquation
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, 'Item', '{1ECE0007-85A7-4F9B-AD9E-FEE2684A398E}')
		return ret

	def _get_Count(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))

	Count = property(_get_Count, None)
	'''
	Returns the number of items in the collection.

	:type: int
	'''

	_prop_map_set_function_ = {
	}
	_prop_map_get_ = {
		"Count": (1, 2, (3, 0), (), "Count", None),
		"_NewEnum": (-4, 2, (13, 0), (), "_NewEnum", None),
	}
	_prop_map_put_ = {
	}
	def __call__(self, var):
		'''
		Returns a specific item.
		
		:param var: object
		:rtype: recurdyn.ProcessNet.IVariableEquation
		'''
		ret = self._oleobj_.InvokeTypes(0, LCID, 2, (9, 0), ((12, 1),),var
			)
		if ret is not None:
			ret = Dispatch(ret, '__call__', '{1ECE0007-85A7-4F9B-AD9E-FEE2684A398E}')
		return ret

	def __str__(self, *args):
		return str(self.__call__(*args))
	def __int__(self, *args):
		return int(self.__call__(*args))
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,2,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, '{1ECE0007-85A7-4F9B-AD9E-FEE2684A398E}')
	def __getitem__(self, key):
		return self._get_good_object_(self._oleobj_.Invoke(*(0, LCID, 2, 1, key)), "Item", '{1ECE0007-85A7-4F9B-AD9E-FEE2684A398E}')
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		return self._ApplyTypes_(*(1, 2, (3, 0), (), "Count", None))
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IVector(DispatchBaseClass):
	'''Vector'''
	CLSID = IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_ParametricPoint(self):
		return self._ApplyTypes_(*(54, 2, (9, 0), (), "ParametricPoint", '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}'))
	def _get_x(self):
		return self._ApplyTypes_(*(51, 2, (5, 0), (), "x", None))
	def _get_y(self):
		return self._ApplyTypes_(*(52, 2, (5, 0), (), "y", None))
	def _get_z(self):
		return self._ApplyTypes_(*(53, 2, (5, 0), (), "z", None))

	def _set_ParametricPoint(self, value):
		if "ParametricPoint" in self.__dict__: self.__dict__["ParametricPoint"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_x(self, value):
		if "x" in self.__dict__: self.__dict__["x"] = value; return
		self._oleobj_.Invoke(*((51, LCID, 4, 0) + (value,) + ()))
	def _set_y(self, value):
		if "y" in self.__dict__: self.__dict__["y"] = value; return
		self._oleobj_.Invoke(*((52, LCID, 4, 0) + (value,) + ()))
	def _set_z(self, value):
		if "z" in self.__dict__: self.__dict__["z"] = value; return
		self._oleobj_.Invoke(*((53, LCID, 4, 0) + (value,) + ()))

	ParametricPoint = property(_get_ParametricPoint, _set_ParametricPoint)
	'''
	Parametric point

	:type: recurdyn.ProcessNet.IParametricPoint
	'''
	x = property(_get_x, _set_x)
	'''
	x value

	:type: float
	'''
	y = property(_get_y, _set_y)
	'''
	y value

	:type: float
	'''
	z = property(_get_z, _set_z)
	'''
	z value

	:type: float
	'''

	_prop_map_set_function_ = {
		"_set_ParametricPoint": _set_ParametricPoint,
		"_set_x": _set_x,
		"_set_y": _set_y,
		"_set_z": _set_z,
	}
	_prop_map_get_ = {
		"ParametricPoint": (54, 2, (9, 0), (), "ParametricPoint", '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}'),
		"x": (51, 2, (5, 0), (), "x", None),
		"y": (52, 2, (5, 0), (), "y", None),
		"z": (53, 2, (5, 0), (), "z", None),
	}
	_prop_map_put_ = {
		"ParametricPoint": ((54, LCID, 4, 0),()),
		"x": ((51, LCID, 4, 0),()),
		"y": ((52, LCID, 4, 0),()),
		"z": ((53, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IWorkingPlane(DispatchBaseClass):
	'''Working plane'''
	CLSID = IID('{7EE8FD42-208D-4F80-B89A-297D54D686DA}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def AlignWithFace(self, pVal):
		'''
		Align working plane with a face
		
		:param pVal: IGeometryFace
		'''
		return self._oleobj_.InvokeTypes(51, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def AlignWithFace2(self, pVal):
		'''
		Set working plane settings with a face
		
		:param pVal: IGeometryFace
		'''
		return self._oleobj_.InvokeTypes(64, LCID, 1, (24, 0), ((9, 1),),pVal
			)


	def AlignWithPlane(self, pEntity, PlaneType):
		'''
		Align working plane with a plane
		
		:param pEntity: IGeneric
		:param PlaneType: PlaneType
		'''
		return self._oleobj_.InvokeTypes(52, LCID, 1, (24, 0), ((9, 1), (3, 1)),pEntity
			, PlaneType)


	def AlignWithPlane2(self, pEntity, PlaneType):
		'''
		Set working plane settings with a plane
		
		:param pEntity: IGeneric
		:param PlaneType: PlaneType
		'''
		return self._oleobj_.InvokeTypes(65, LCID, 1, (24, 0), ((9, 1), (3, 1)),pEntity
			, PlaneType)


	def Apply(self):
		'''
		Apply working plane settings
		'''
		return self._oleobj_.InvokeTypes(70, LCID, 1, (24, 0), (),)


	def GetEulerAngle(self, Type):
		'''
		Get working plane's euler angle
		
		:param Type: EulerAngle
		:rtype: list[float]
		'''
		return self._ApplyTypes_(71, 1, (8197, 0), ((3, 1),), 'GetEulerAngle', None,Type
			)


	def GetPosition(self):
		'''
		Get working plane's position vector
		
		:rtype: list[float]
		'''
		return self._ApplyTypes_(73, 1, (8197, 0), (), 'GetPosition', None,)


	def Offset(self, pVal):
		'''
		Offset working plane by increments
		
		:param pVal: float
		'''
		return self._oleobj_.InvokeTypes(53, LCID, 1, (24, 0), ((5, 1),),pVal
			)


	def SetEulerAngle(self, Type, pSafeArray):
		'''
		Set working plane's euler angle
		
		:param Type: EulerAngle
		:param pSafeArray: list[float]
		'''
		return self._oleobj_.InvokeTypes(72, LCID, 1, (24, 0), ((3, 1), (8197, 1)),Type
			, pSafeArray)


	def SetPosition(self, pSafeArray):
		'''
		Set working plane's position vector
		
		:param pSafeArray: list[float]
		'''
		return self._oleobj_.InvokeTypes(74, LCID, 1, (24, 0), ((8197, 1),),pSafeArray
			)


	def Update(self):
		'''
		This fuction is obsolete because it isn't necessary any more.
		'''
		return self._oleobj_.InvokeTypes(63, LCID, 1, (24, 0), (),)


	def _get_GridAngle(self):
		return self._ApplyTypes_(*(58, 2, (5, 0), (), "GridAngle", None))
	def _get_GridAngle2(self):
		return self._ApplyTypes_(*(69, 2, (5, 0), (), "GridAngle2", None))
	def _get_GridColor(self):
		return self._ApplyTypes_(*(62, 2, (19, 0), (), "GridColor", None))
	def _get_GridHeight(self):
		return self._ApplyTypes_(*(56, 2, (5, 0), (), "GridHeight", None))
	def _get_GridHeight2(self):
		return self._ApplyTypes_(*(67, 2, (5, 0), (), "GridHeight2", None))
	def _get_GridRadius(self):
		return self._ApplyTypes_(*(57, 2, (5, 0), (), "GridRadius", None))
	def _get_GridRadius2(self):
		return self._ApplyTypes_(*(68, 2, (5, 0), (), "GridRadius2", None))
	def _get_GridShape(self):
		return self._ApplyTypes_(*(61, 2, (3, 0), (), "GridShape", '{F0386531-8654-4FEA-A94B-EE8EC6ECAF75}'))
	def _get_GridThickness(self):
		return self._ApplyTypes_(*(60, 2, (5, 0), (), "GridThickness", None))
	def _get_GridType(self):
		return self._ApplyTypes_(*(54, 2, (3, 0), (), "GridType", '{27F9291D-CC9B-4F85-B76B-B7A48A9DE3FF}'))
	def _get_GridWidth(self):
		return self._ApplyTypes_(*(55, 2, (5, 0), (), "GridWidth", None))
	def _get_GridWidth2(self):
		return self._ApplyTypes_(*(66, 2, (5, 0), (), "GridWidth2", None))
	def _get_NumberOfGridSegments(self):
		return self._ApplyTypes_(*(59, 2, (3, 0), (), "NumberOfGridSegments", None))

	def _set_GridAngle(self, value):
		if "GridAngle" in self.__dict__: self.__dict__["GridAngle"] = value; return
		self._oleobj_.Invoke(*((58, LCID, 4, 0) + (value,) + ()))
	def _set_GridAngle2(self, value):
		if "GridAngle2" in self.__dict__: self.__dict__["GridAngle2"] = value; return
		self._oleobj_.Invoke(*((69, LCID, 4, 0) + (value,) + ()))
	def _set_GridColor(self, value):
		if "GridColor" in self.__dict__: self.__dict__["GridColor"] = value; return
		self._oleobj_.Invoke(*((62, LCID, 4, 0) + (value,) + ()))
	def _set_GridHeight(self, value):
		if "GridHeight" in self.__dict__: self.__dict__["GridHeight"] = value; return
		self._oleobj_.Invoke(*((56, LCID, 4, 0) + (value,) + ()))
	def _set_GridHeight2(self, value):
		if "GridHeight2" in self.__dict__: self.__dict__["GridHeight2"] = value; return
		self._oleobj_.Invoke(*((67, LCID, 4, 0) + (value,) + ()))
	def _set_GridRadius(self, value):
		if "GridRadius" in self.__dict__: self.__dict__["GridRadius"] = value; return
		self._oleobj_.Invoke(*((57, LCID, 4, 0) + (value,) + ()))
	def _set_GridRadius2(self, value):
		if "GridRadius2" in self.__dict__: self.__dict__["GridRadius2"] = value; return
		self._oleobj_.Invoke(*((68, LCID, 4, 0) + (value,) + ()))
	def _set_GridShape(self, value):
		if "GridShape" in self.__dict__: self.__dict__["GridShape"] = value; return
		self._oleobj_.Invoke(*((61, LCID, 4, 0) + (value,) + ()))
	def _set_GridThickness(self, value):
		if "GridThickness" in self.__dict__: self.__dict__["GridThickness"] = value; return
		self._oleobj_.Invoke(*((60, LCID, 4, 0) + (value,) + ()))
	def _set_GridType(self, value):
		if "GridType" in self.__dict__: self.__dict__["GridType"] = value; return
		self._oleobj_.Invoke(*((54, LCID, 4, 0) + (value,) + ()))
	def _set_GridWidth(self, value):
		if "GridWidth" in self.__dict__: self.__dict__["GridWidth"] = value; return
		self._oleobj_.Invoke(*((55, LCID, 4, 0) + (value,) + ()))
	def _set_GridWidth2(self, value):
		if "GridWidth2" in self.__dict__: self.__dict__["GridWidth2"] = value; return
		self._oleobj_.Invoke(*((66, LCID, 4, 0) + (value,) + ()))
	def _set_NumberOfGridSegments(self, value):
		if "NumberOfGridSegments" in self.__dict__: self.__dict__["NumberOfGridSegments"] = value; return
		self._oleobj_.Invoke(*((59, LCID, 4, 0) + (value,) + ()))

	GridAngle = property(_get_GridAngle, _set_GridAngle)
	'''
	Grid angle (for cylindrical coordinate system)

	:type: float
	'''
	GridAngle2 = property(_get_GridAngle2, _set_GridAngle2)
	'''
	Grid angle (for cylindrical coordinate system)

	:type: float
	'''
	GridColor = property(_get_GridColor, _set_GridColor)
	'''
	Grid color

	:type: int
	'''
	GridHeight = property(_get_GridHeight, _set_GridHeight)
	'''
	Grid height (for Cartesian coordinate system)

	:type: float
	'''
	GridHeight2 = property(_get_GridHeight2, _set_GridHeight2)
	'''
	Grid height (for Cartesian coordinate system)

	:type: float
	'''
	GridRadius = property(_get_GridRadius, _set_GridRadius)
	'''
	Grid radius (for cylindrical coordinate system)

	:type: float
	'''
	GridRadius2 = property(_get_GridRadius2, _set_GridRadius2)
	'''
	Grid radius (for cylindrical coordinate system)

	:type: float
	'''
	GridShape = property(_get_GridShape, _set_GridShape)
	'''
	Grid shape

	:type: recurdyn.ProcessNet.GridShape
	'''
	GridThickness = property(_get_GridThickness, _set_GridThickness)
	'''
	Grid thickness

	:type: float
	'''
	GridType = property(_get_GridType, _set_GridType)
	'''
	Grid coordinate type

	:type: recurdyn.ProcessNet.GridType
	'''
	GridWidth = property(_get_GridWidth, _set_GridWidth)
	'''
	Grid width (for Cartesian coordinate system)

	:type: float
	'''
	GridWidth2 = property(_get_GridWidth2, _set_GridWidth2)
	'''
	Grid width (for Cartesian coordinate system)

	:type: float
	'''
	NumberOfGridSegments = property(_get_NumberOfGridSegments, _set_NumberOfGridSegments)
	'''
	Number of half horizontal (or radial) grid segments

	:type: int
	'''

	_prop_map_set_function_ = {
		"_set_GridAngle": _set_GridAngle,
		"_set_GridAngle2": _set_GridAngle2,
		"_set_GridColor": _set_GridColor,
		"_set_GridHeight": _set_GridHeight,
		"_set_GridHeight2": _set_GridHeight2,
		"_set_GridRadius": _set_GridRadius,
		"_set_GridRadius2": _set_GridRadius2,
		"_set_GridShape": _set_GridShape,
		"_set_GridThickness": _set_GridThickness,
		"_set_GridType": _set_GridType,
		"_set_GridWidth": _set_GridWidth,
		"_set_GridWidth2": _set_GridWidth2,
		"_set_NumberOfGridSegments": _set_NumberOfGridSegments,
	}
	_prop_map_get_ = {
		"GridAngle": (58, 2, (5, 0), (), "GridAngle", None),
		"GridAngle2": (69, 2, (5, 0), (), "GridAngle2", None),
		"GridColor": (62, 2, (19, 0), (), "GridColor", None),
		"GridHeight": (56, 2, (5, 0), (), "GridHeight", None),
		"GridHeight2": (67, 2, (5, 0), (), "GridHeight2", None),
		"GridRadius": (57, 2, (5, 0), (), "GridRadius", None),
		"GridRadius2": (68, 2, (5, 0), (), "GridRadius2", None),
		"GridShape": (61, 2, (3, 0), (), "GridShape", '{F0386531-8654-4FEA-A94B-EE8EC6ECAF75}'),
		"GridThickness": (60, 2, (5, 0), (), "GridThickness", None),
		"GridType": (54, 2, (3, 0), (), "GridType", '{27F9291D-CC9B-4F85-B76B-B7A48A9DE3FF}'),
		"GridWidth": (55, 2, (5, 0), (), "GridWidth", None),
		"GridWidth2": (66, 2, (5, 0), (), "GridWidth2", None),
		"NumberOfGridSegments": (59, 2, (3, 0), (), "NumberOfGridSegments", None),
	}
	_prop_map_put_ = {
		"GridAngle": ((58, LCID, 4, 0),()),
		"GridAngle2": ((69, LCID, 4, 0),()),
		"GridColor": ((62, LCID, 4, 0),()),
		"GridHeight": ((56, LCID, 4, 0),()),
		"GridHeight2": ((67, LCID, 4, 0),()),
		"GridRadius": ((57, LCID, 4, 0),()),
		"GridRadius2": ((68, LCID, 4, 0),()),
		"GridShape": ((61, LCID, 4, 0),()),
		"GridThickness": ((60, LCID, 4, 0),()),
		"GridType": ((54, LCID, 4, 0),()),
		"GridWidth": ((55, LCID, 4, 0),()),
		"GridWidth2": ((66, LCID, 4, 0),()),
		"NumberOfGridSegments": ((59, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

class IeTemplate(DispatchBaseClass):
	'''eTemplate'''
	CLSID = IID('{D497353F-2D45-4F8E-A649-0D0FABA3849D}')
	coclass_clsid = None

	def __setattr__(self, attr, value):
		if '_set_'+attr in dir(self):
			try:
				self._prop_map_set_function_['_set_'+attr](self, value)
			except:
				super().__setattr__(attr, value)
		else:
			super().__setattr__(attr, value)
	def _get_LicenseType(self):
		return self._ApplyTypes_(*(107, 2, (3, 0), (), "LicenseType", '{5802A38C-F496-487E-A6BD-194D24CFC28F}'))
	def _get_StartupFilePathName(self):
		return self._ApplyTypes_(*(108, 2, (8, 0), (), "StartupFilePathName", None))
	def _get_TargetModelForModificationMode(self):
		return self._ApplyTypes_(*(106, 2, (8, 0), (), "TargetModelForModificationMode", None))
	def _get_TargetSubsystemName(self):
		return self._ApplyTypes_(*(102, 2, (8, 0), (), "TargetSubsystemName", None))
	def _get_TemplatePath(self):
		return self._ApplyTypes_(*(101, 2, (8, 0), (), "TemplatePath", None))
	def _get_TemplatePathForModificationMode(self):
		return self._ApplyTypes_(*(103, 2, (8, 0), (), "TemplatePathForModificationMode", None))
	def _get_UseKeepConnectionModificationTemplateFile(self):
		return self._ApplyTypes_(*(104, 2, (11, 0), (), "UseKeepConnectionModificationTemplateFile", None))
	def _get_UseShowModificationUIWhenTemplateFileIsClosed(self):
		return self._ApplyTypes_(*(105, 2, (11, 0), (), "UseShowModificationUIWhenTemplateFileIsClosed", None))

	def _set_TargetModelForModificationMode(self, value):
		if "TargetModelForModificationMode" in self.__dict__: self.__dict__["TargetModelForModificationMode"] = value; return
		self._oleobj_.Invoke(*((106, LCID, 4, 0) + (value,) + ()))
	def _set_TargetSubsystemName(self, value):
		if "TargetSubsystemName" in self.__dict__: self.__dict__["TargetSubsystemName"] = value; return
		self._oleobj_.Invoke(*((102, LCID, 4, 0) + (value,) + ()))
	def _set_TemplatePath(self, value):
		if "TemplatePath" in self.__dict__: self.__dict__["TemplatePath"] = value; return
		self._oleobj_.Invoke(*((101, LCID, 4, 0) + (value,) + ()))
	def _set_TemplatePathForModificationMode(self, value):
		if "TemplatePathForModificationMode" in self.__dict__: self.__dict__["TemplatePathForModificationMode"] = value; return
		self._oleobj_.Invoke(*((103, LCID, 4, 0) + (value,) + ()))
	def _set_UseKeepConnectionModificationTemplateFile(self, value):
		if "UseKeepConnectionModificationTemplateFile" in self.__dict__: self.__dict__["UseKeepConnectionModificationTemplateFile"] = value; return
		self._oleobj_.Invoke(*((104, LCID, 4, 0) + (value,) + ()))
	def _set_UseShowModificationUIWhenTemplateFileIsClosed(self, value):
		if "UseShowModificationUIWhenTemplateFileIsClosed" in self.__dict__: self.__dict__["UseShowModificationUIWhenTemplateFileIsClosed"] = value; return
		self._oleobj_.Invoke(*((105, LCID, 4, 0) + (value,) + ()))

	LicenseType = property(_get_LicenseType, None)
	'''
	License type

	:type: recurdyn.ProcessNet.eTemplateLicenseType
	'''
	StartupFilePathName = property(_get_StartupFilePathName, None)
	'''
	Startup File Path Name

	:type: str
	'''
	TargetModelForModificationMode = property(_get_TargetModelForModificationMode, _set_TargetModelForModificationMode)
	'''
	Target model for modification mode

	:type: str
	'''
	TargetSubsystemName = property(_get_TargetSubsystemName, _set_TargetSubsystemName)
	'''
	Target subsystem name of eTemplate

	:type: str
	'''
	TemplatePath = property(_get_TemplatePath, _set_TemplatePath)
	'''
	Template path of eTemplate

	:type: str
	'''
	TemplatePathForModificationMode = property(_get_TemplatePathForModificationMode, _set_TemplatePathForModificationMode)
	'''
	Template path for eTemplate ModificationMode

	:type: str
	'''
	UseKeepConnectionModificationTemplateFile = property(_get_UseKeepConnectionModificationTemplateFile, _set_UseKeepConnectionModificationTemplateFile)
	'''
	Use keep connection modification template file

	:type: bool
	'''
	UseShowModificationUIWhenTemplateFileIsClosed = property(_get_UseShowModificationUIWhenTemplateFileIsClosed, _set_UseShowModificationUIWhenTemplateFileIsClosed)
	'''
	Use show modification ui when template file is closed

	:type: bool
	'''

	_prop_map_set_function_ = {
		"_set_TargetModelForModificationMode": _set_TargetModelForModificationMode,
		"_set_TargetSubsystemName": _set_TargetSubsystemName,
		"_set_TemplatePath": _set_TemplatePath,
		"_set_TemplatePathForModificationMode": _set_TemplatePathForModificationMode,
		"_set_UseKeepConnectionModificationTemplateFile": _set_UseKeepConnectionModificationTemplateFile,
		"_set_UseShowModificationUIWhenTemplateFileIsClosed": _set_UseShowModificationUIWhenTemplateFileIsClosed,
	}
	_prop_map_get_ = {
		"LicenseType": (107, 2, (3, 0), (), "LicenseType", '{5802A38C-F496-487E-A6BD-194D24CFC28F}'),
		"StartupFilePathName": (108, 2, (8, 0), (), "StartupFilePathName", None),
		"TargetModelForModificationMode": (106, 2, (8, 0), (), "TargetModelForModificationMode", None),
		"TargetSubsystemName": (102, 2, (8, 0), (), "TargetSubsystemName", None),
		"TemplatePath": (101, 2, (8, 0), (), "TemplatePath", None),
		"TemplatePathForModificationMode": (103, 2, (8, 0), (), "TemplatePathForModificationMode", None),
		"UseKeepConnectionModificationTemplateFile": (104, 2, (11, 0), (), "UseKeepConnectionModificationTemplateFile", None),
		"UseShowModificationUIWhenTemplateFileIsClosed": (105, 2, (11, 0), (), "UseShowModificationUIWhenTemplateFileIsClosed", None),
	}
	_prop_map_put_ = {
		"TargetModelForModificationMode": ((106, LCID, 4, 0),()),
		"TargetSubsystemName": ((102, LCID, 4, 0),()),
		"TemplatePath": ((101, LCID, 4, 0),()),
		"TemplatePathForModificationMode": ((103, LCID, 4, 0),()),
		"UseKeepConnectionModificationTemplateFile": ((104, LCID, 4, 0),()),
		"UseShowModificationUIWhenTemplateFileIsClosed": ((105, LCID, 4, 0),()),
	}
	def __iter__(self):
		"Return a Python iterator for this object"
		try:
			ob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())
		except pythoncom.error:
			raise TypeError("This object does not support enumeration")
		return win32com.client.util.Iterator(ob, None)

IAddIns_vtables_dispatch_ = 1
IAddIns_vtables_ = [
	(( 'eTemplate' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{D497353F-2D45-4F8E-A649-0D0FABA3849D}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
]

IAnimation_vtables_dispatch_ = 1
IAnimation_vtables_ = [
	(( 'CurrentFrame' , 'pVal' , ), 51, (51, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'CurrentFrame' , 'pVal' , ), 51, (51, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfFrame' , 'pVal' , ), 52, (52, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'SaveOption' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{4DD0F877-22B8-433A-AE68-970E0F497F95}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'SaveOption' , 'ppVal' , ), 53, (53, (), [ (9, 1, None, "IID('{4DD0F877-22B8-433A-AE68-970E0F497F95}')") , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'Play' , ), 54, (54, (), [ ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'FastPlay' , ), 55, (55, (), [ ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'Pause' , ), 56, (56, (), [ ], 1 , 1 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'Stop' , ), 57, (57, (), [ ], 1 , 1 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'Save' , 'strName' , ), 58, (58, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'Save2' , 'strName' , 'bOverWrite' , ), 59, (59, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'ReloadLastAnimationFile' , ), 60, (60, (), [ ], 1 , 1 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'CurrentTime' , 'pVal' , ), 61, (61, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
]

IAnimationControl_vtables_dispatch_ = 1
IAnimationControl_vtables_ = [
	(( 'UseUserDefinedAnimation' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseUserDefinedAnimation' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'StartFrame' , 'pVal' , ), 52, (52, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'StartFrame' , 'pVal' , ), 52, (52, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'EndFrame' , 'pVal' , ), 53, (53, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'EndFrame' , 'pVal' , ), 53, (53, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'FrameStep' , 'pVal' , ), 54, (54, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'FrameStep' , 'pVal' , ), 54, (54, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'Repeat' , 'pVal' , ), 55, (55, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'Repeat' , 'pVal' , ), 55, (55, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'DisplayMarkers' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'DisplayMarkers' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Delay' , 'pVal' , ), 57, (57, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Delay' , 'pVal' , ), 57, (57, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'ModeShape' , 'pVal' , ), 58, (58, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'ModeShape' , 'pVal' , ), 58, (58, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'MaxModeShape' , 'pVal' , ), 59, (59, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'CurrentFrequency' , 'pVal' , ), 60, (60, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'CurrentFrequency' , 'pVal' , ), 60, (60, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'FrequencyList' , 'pVal' , ), 61, (61, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'EigenvalueFRAAnimationType' , 'pVal' , ), 62, (62, (), [ (16387, 10, None, "IID('{9BAFCEBD-252F-419D-8F50-189769A741A2}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'EigenvalueFRAAnimationType' , 'pVal' , ), 62, (62, (), [ (3, 1, None, "IID('{9BAFCEBD-252F-419D-8F50-189769A741A2}')") , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
]

IAnimationDataScaling_vtables_dispatch_ = 1
IAnimationDataScaling_vtables_ = [
	(( 'AnimationScalingRefMarker' , 'pMarker' , ), 101, (101, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'AnimationScalingRefMarker' , 'pMarker' , ), 101, (101, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
]

IAnimationDataScalingBase_vtables_dispatch_ = 1
IAnimationDataScalingBase_vtables_ = [
	(( 'UseAnimationScaling' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseAnimationScaling' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'SetAnimationScalingTranslationalFactor' , 'x' , 'y' , 'z' , ), 52, (52, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'GetAnimationScalingTranslationalFactor' , 'x' , 'y' , 'z' , ), 53, (53, (), [ 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'SetAnimationScalingRotationalFactor' , 'x' , 'y' , 'z' , ), 54, (54, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'GetAnimationScalingRotationalFactor' , 'x' , 'y' , 'z' , ), 55, (55, (), [ 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
]

IAnimationSaveOption_vtables_dispatch_ = 1
IAnimationSaveOption_vtables_ = [
	(( 'ShowGravity' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ShowGravity' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'ShowTime' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'ShowTime' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'ResolutionX' , 'pVal' , ), 53, (53, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'ResolutionX' , 'pVal' , ), 53, (53, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'ResolutionY' , 'pVal' , ), 54, (54, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'ResolutionY' , 'pVal' , ), 54, (54, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'FramePerSecond' , 'pVal' , ), 55, (55, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'FramePerSecond' , 'pVal' , ), 55, (55, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UseOffScreenRendering' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'UseOffScreenRendering' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'UseReduceFileSize' , 'pVal' , ), 57, (57, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'UseReduceFileSize' , 'pVal' , ), 57, (57, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'CompressionRatio' , 'pVal' , ), 58, (58, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'CompressionRatio' , 'pVal' , ), 58, (58, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'InstalledCodecList' , 'ppSafeArray' , ), 59, (59, (), [ (24584, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'Codec' , 'pVal' , ), 60, (60, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'Codec' , 'pVal' , ), 60, (60, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'CompressionQuality' , 'pVal' , ), 61, (61, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'CompressionQuality' , 'pVal' , ), 61, (61, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'LevelOfVideoQuality' , 'pVal' , ), 62, (62, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'LevelOfVideoQuality' , 'pVal' , ), 62, (62, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'ConvertToAVIFileWithMSMPEG4' , 'pVal' , ), 63, (63, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'ConvertToAVIFileWithMSMPEG4' , 'pVal' , ), 63, (63, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
]

IApplication_vtables_dispatch_ = 1
IApplication_vtables_ = [
	(( 'Name' , 'Name' , ), 51, (51, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ActiveModelDocument' , 'ppDocument' , ), 52, (52, (), [ (16393, 10, None, "IID('{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'ActivePlotDocument' , 'ppDocument' , ), 53, (53, (), [ (16393, 10, None, "IID('{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'PrintMessage' , 'strMessage' , ), 54, (54, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'ClearMessage' , ), 55, (55, (), [ ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'NewModelDocument' , 'strModelDocument' , 'ppDocument' , ), 56, (56, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')") , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'NewModelDocumentWithUnit' , 'strModelDocument' , 'Unit' , 'ppDocument' , ), 57, (57, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{09A65909-6FBB-488A-9726-D320F5666395}')") , (16393, 10, None, "IID('{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')") , ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'OpenModelDocument' , 'strFileName' , 'ppDocument' , ), 58, (58, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')") , ], 1 , 1 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'CloseModelDocument' , 'pDocument' , ), 59, (59, (), [ (9, 1, None, "IID('{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')") , ], 1 , 1 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'ClosePlotDocument' , 'pDocument' , ), 60, (60, (), [ (9, 1, None, "IID('{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}')") , ], 1 , 1 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'Version' , 'pVal' , ), 62, (62, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'GetModelDocument' , 'strModelDocument' , 'ppDocument' , ), 63, (63, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')") , ], 1 , 1 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'GetPlotDocument' , 'strPlotDocument' , 'ppDocument' , ), 64, (64, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}')") , ], 1 , 1 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'NewModelDocumentWithUnitSystem' , 'strModelDocument' , 'UnitSystem' , 'ppDocument' , ), 65, (65, (), [ 
			 (8, 1, None, None) , (3, 1, None, "IID('{1E42DFD6-BB2A-4607-AE20-0A88EA8EC9A0}')") , (16393, 10, None, "IID('{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')") , ], 1 , 1 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'DefaultUnit' , 'ppVal' , ), 66, (66, (), [ (16393, 10, None, "IID('{09A65909-6FBB-488A-9726-D320F5666395}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetVersion' , 'pVal' , ), 67, (67, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Settings' , 'ppVal' , ), 68, (68, (), [ (16393, 10, None, "IID('{1FD6C87D-DBED-4C06-9B79-81FC253BC0A1}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'ModelDocumentCollection' , 'ppVal' , ), 69, (69, (), [ (16393, 10, None, "IID('{E26DEB95-B8AC-4666-8673-A9D41A440E2C}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'PlotDocumentCollection' , 'ppVal' , ), 70, (70, (), [ (16393, 10, None, "IID('{AEE53265-74B8-4B8B-96B0-5EFB4F5AACB8}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'NewPlotDocument' , 'strPlotDocument' , 'ppDocument' , ), 71, (71, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}')") , ], 1 , 1 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'OpenPlotDocument' , 'strFileName' , 'ppDocument' , ), 72, (72, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}')") , ], 1 , 1 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'RibbonManager' , 'ppVal' , ), 73, (73, (), [ (16393, 10, None, "IID('{81691554-1F9A-435A-9730-5C995EEFBDBD}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'ToolbarManager' , 'ppVal' , ), 74, (74, (), [ (16393, 10, None, "IID('{E7C5258C-4AED-43E9-860F-877BF7B1F154}')") , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'AddIns' , 'ppVal' , ), 75, (75, (), [ (16393, 10, None, "IID('{47E89053-59DB-4697-AAC9-49817147248B}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'SetCampbellDiagramActive' , 'Val' , ), 76, (76, (), [ (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'GetInstallationPath' , 'pVal' , ), 77, (77, (), [ (16392, 10, None, None) , ], 1 , 1 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'GetOutputMessage' , 'Name' , ), 78, (78, (), [ (16392, 10, None, None) , ], 1 , 1 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'CloseAllDocument' , ), 79, (79, (), [ ], 1 , 1 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'CloseAllModelDocument' , ), 80, (80, (), [ ], 1 , 1 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'CloseAllPlotDocument' , ), 81, (81, (), [ ], 1 , 1 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNet' , 'pVal' , ), 82, (82, (), [ (16393, 10, None, "IID('{2B53283A-FA48-4CFB-87A7-93D2FC9F8A5F}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'Exit' , ), 83, (83, (), [ ], 1 , 1 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'RenderMode' , 'pVal' , ), 61, (61, (), [ (3, 1, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147EB}')") , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'RenderMode' , 'pVal' , ), 61, (61, (), [ (16387, 10, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147EB}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
]

IApplicationSettings_vtables_dispatch_ = 1
IApplicationSettings_vtables_ = [
	(( 'ShowWarningMessage' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ShowWarningMessage' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'CreateOutputFolder' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'CreateOutputFolder' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'SaveBeforSimulation' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'SaveBeforSimulation' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'SaveAfterSimulation' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'SaveAfterSimulation' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'StopRedundantConstraint' , 'pVal' , ), 57, (57, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'StopRedundantConstraint' , 'pVal' , ), 57, (57, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'AutoCoreNumber' , 'pVal' , ), 58, (58, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'AutoCoreNumber' , 'pVal' , ), 58, (58, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'CoreNumber' , 'pVal' , ), 59, (59, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'CoreNumber' , 'pVal' , ), 59, (59, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'InitialVelocity' , 'pVal' , ), 60, (60, (), [ (3, 1, None, "IID('{6CAA0EA8-BF96-47DE-A3A8-D959EB9EC03B}')") , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'InitialVelocity' , 'pVal' , ), 60, (60, (), [ (16387, 10, None, "IID('{6CAA0EA8-BF96-47DE-A3A8-D959EB9EC03B}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'CheckRedundantType' , 'pVal' , ), 61, (61, (), [ (3, 1, None, "IID('{AABB2503-7809-41B9-9320-0213E9E36D28}')") , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'CheckRedundantType' , 'pVal' , ), 61, (61, (), [ (16387, 10, None, "IID('{AABB2503-7809-41B9-9320-0213E9E36D28}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'UseRedundantConstraintCheckTolerance' , 'pVal' , ), 63, (63, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'UseRedundantConstraintCheckTolerance' , 'pVal' , ), 63, (63, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'RedundantConstraintCheckToleranceValue' , 'pVal' , ), 64, (64, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'RedundantConstraintCheckToleranceValue' , 'pVal' , ), 64, (64, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'SolverType' , 'pVal' , ), 65, (65, (), [ (3, 1, None, "IID('{79CB9EAD-019B-4CE9-BA56-BC1AB5D1216F}')") , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'SolverType' , 'pVal' , ), 65, (65, (), [ (16387, 10, None, "IID('{79CB9EAD-019B-4CE9-BA56-BC1AB5D1216F}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'UseJointPartition' , 'pVal' , ), 67, (67, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'UseJointPartition' , 'pVal' , ), 67, (67, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'JointPartition' , 'pVal' , ), 68, (68, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'JointPartition' , 'pVal' , ), 68, (68, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'CoreNumber2' , 'pVal' , ), 69, (69, (), [ (3, 1, None, "IID('{A2597840-D840-462B-B769-AB88AD567C47}')") , ], 1 , 4 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'CoreNumber2' , 'pVal' , ), 69, (69, (), [ (16387, 10, None, "IID('{A2597840-D840-462B-B769-AB88AD567C47}')") , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'UseRedundantViolationLengthTolerance' , 'pVal' , ), 70, (70, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'UseRedundantViolationLengthTolerance' , 'pVal' , ), 70, (70, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'RedundantViolationLengthToleranceValue' , 'pVal' , ), 71, (71, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'RedundantViolationLengthToleranceValue' , 'pVal' , ), 71, (71, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'UseRedundantViolationAngleTolerance' , 'pVal' , ), 72, (72, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'UseRedundantViolationAngleTolerance' , 'pVal' , ), 72, (72, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'RedundantViolationAngleToleranceValue' , 'pVal' , ), 73, (73, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'RedundantViolationAngleToleranceValue' , 'pVal' , ), 73, (73, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'AdvancedControlForIntgratorFailure' , 'pVal' , ), 74, (74, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'AdvancedControlForIntgratorFailure' , 'pVal' , ), 74, (74, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'UseAngleLimit' , 'pVal' , ), 76, (76, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'UseAngleLimit' , 'pVal' , ), 76, (76, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'AngleLimit' , 'pVal' , ), 77, (77, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'AngleLimit' , 'pVal' , ), 77, (77, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'MaximumConvergenceCount' , 'pVal' , ), 78, (78, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'MaximumConvergenceCount' , 'pVal' , ), 78, (78, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'UseJacobianEvaluationInterval' , 'pVal' , ), 79, (79, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'UseJacobianEvaluationInterval' , 'pVal' , ), 79, (79, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'JacobianEvaluationInterval' , 'pVal' , ), 80, (80, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'JacobianEvaluationInterval' , 'pVal' , ), 80, (80, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
	(( 'MessageOutputFactor' , 'pVal' , ), 81, (81, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 456 , (3, 0, None, None) , 0 , )),
	(( 'MessageOutputFactor' , 'pVal' , ), 81, (81, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 464 , (3, 0, None, None) , 0 , )),
	(( 'LinearSolverTypeForMBD' , 'pVal' , ), 82, (82, (), [ (3, 1, None, "IID('{A6B9C762-C38C-43AE-B452-3B29C63E402D}')") , ], 1 , 4 , 4 , 0 , 472 , (3, 0, None, None) , 0 , )),
	(( 'LinearSolverTypeForMBD' , 'pVal' , ), 82, (82, (), [ (16387, 10, None, "IID('{A6B9C762-C38C-43AE-B452-3B29C63E402D}')") , ], 1 , 2 , 4 , 0 , 480 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedAngleMeasureFor3DRotation' , 'pVal' , ), 83, (83, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 488 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedAngleMeasureFor3DRotation' , 'pVal' , ), 83, (83, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 496 , (3, 0, None, None) , 0 , )),
	(( 'UseImprovementPreAnalysisAccuracy' , 'pVal' , ), 84, (84, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 504 , (3, 0, None, None) , 0 , )),
	(( 'UseImprovementPreAnalysisAccuracy' , 'pVal' , ), 84, (84, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 512 , (3, 0, None, None) , 0 , )),
	(( 'SaveRADFileWhenPausingTime' , 'pVal' , ), 85, (85, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 520 , (3, 0, None, None) , 0 , )),
	(( 'SaveRADFileWhenPausingTime' , 'pVal' , ), 85, (85, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 528 , (3, 0, None, None) , 0 , )),
	(( 'FillZEROValuesInCONFile' , 'pVal' , ), 86, (86, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 536 , (3, 0, None, None) , 0 , )),
	(( 'FillZEROValuesInCONFile' , 'pVal' , ), 86, (86, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 544 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedMaximumStepsizeFactor' , 'pVal' , ), 87, (87, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 552 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedMaximumStepsizeFactor' , 'pVal' , ), 87, (87, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 560 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedGeoContactForShell' , 'pVal' , ), 88, (88, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 568 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedGeoContactForShell' , 'pVal' , ), 88, (88, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 576 , (3, 0, None, None) , 0 , )),
	(( 'ShiftWhenPasting' , 'pVal' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 584 , (3, 0, None, None) , 0 , )),
	(( 'ShiftWhenPasting' , 'pVal' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 592 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedContactSurfaceSearch' , 'pVal' , ), 62, (62, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 600 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedContactSurfaceSearch' , 'pVal' , ), 62, (62, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 608 , (3, 0, None, None) , 0 , )),
	(( 'UseSparseMBD' , 'pVal' , ), 66, (66, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 616 , (3, 0, None, None) , 0 , )),
	(( 'UseSparseMBD' , 'pVal' , ), 66, (66, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 624 , (3, 0, None, None) , 0 , )),
	(( 'CreateBackupFile' , 'pVal' , ), 53, (53, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 632 , (3, 0, None, None) , 0 , )),
	(( 'CreateBackupFile' , 'pVal' , ), 53, (53, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 640 , (3, 0, None, None) , 0 , )),
]

IBackgroundColor_vtables_dispatch_ = 1
IBackgroundColor_vtables_ = [
	(( 'UseGradation' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseGradation' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'TopColor' , 'pVal' , ), 52, (52, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'TopColor' , 'pVal' , ), 52, (52, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'BottomColor' , 'pVal' , ), 53, (53, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'BottomColor' , 'pVal' , ), 53, (53, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
]

IBeamCrossSection_vtables_dispatch_ = 1
IBeamCrossSection_vtables_ = [
	(( 'PoissonRatio' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UsePoissonRatio' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UsePoissonRatio' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
]

IBeamCrossSectionCircular_vtables_dispatch_ = 1
IBeamCrossSectionCircular_vtables_ = [
	(( 'Radius' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
]

IBeamCrossSectionElliptical_vtables_dispatch_ = 1
IBeamCrossSectionElliptical_vtables_ = [
	(( 'SemiMajorAxis' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'SemiMinorAxis' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
]

IBeamCrossSectionHollowRectangualr_vtables_dispatch_ = 1
IBeamCrossSectionHollowRectangualr_vtables_ = [
	(( 'Width' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Height' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'WidthThickness' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'HeightThickness' , 'ppVal' , ), 104, (104, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
]

IBeamCrossSectionIBeam_vtables_dispatch_ = 1
IBeamCrossSectionIBeam_vtables_ = [
	(( 'FlangeWidth' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Height' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'WebThickness' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'FlangeThickness' , 'ppVal' , ), 104, (104, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
]

IBeamCrossSectionRectangular_vtables_dispatch_ = 1
IBeamCrossSectionRectangular_vtables_ = [
	(( 'Width' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Height' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
]

IBeamCrossSectionTBeam_vtables_dispatch_ = 1
IBeamCrossSectionTBeam_vtables_ = [
	(( 'FlangeWidth' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Height' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'WebThickness' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'FlangeThickness' , 'ppVal' , ), 104, (104, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
]

IBeamCrossSectionThickWallTube_vtables_dispatch_ = 1
IBeamCrossSectionThickWallTube_vtables_ = [
	(( 'InnerRadius' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'OuterRadius' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
]

IBeamCrossSectionThinWallTube_vtables_dispatch_ = 1
IBeamCrossSectionThinWallTube_vtables_ = [
	(( 'Radius' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Thickness' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
]

IBody_vtables_dispatch_ = 1
IBody_vtables_ = [
	(( 'Graphic' , 'ppVal' , ), 151, (151, (), [ (16393, 10, None, "IID('{4C8B7C23-7D92-4D39-B530-5D93DC97F771}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'RefFrame' , 'ppVal' , ), 152, (152, (), [ (16393, 10, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Mass' , 'ppVal' , ), 153, (153, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Ixx' , 'ppVal' , ), 154, (154, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'Iyy' , 'ppVal' , ), 155, (155, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Izz' , 'ppVal' , ), 156, (156, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'Ixy' , 'ppVal' , ), 157, (157, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'Iyz' , 'ppVal' , ), 158, (158, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'Izx' , 'ppVal' , ), 159, (159, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'InitialTranslationalVelocityX' , 'ppVal' , ), 160, (160, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'InitialTranslationalVelocityY' , 'ppVal' , ), 161, (161, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'InitialTranslationalVelocityZ' , 'ppVal' , ), 162, (162, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialTranslationalVelocityX' , 'pVal' , ), 163, (163, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialTranslationalVelocityX' , 'pVal' , ), 163, (163, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialTranslationalVelocityY' , 'pVal' , ), 164, (164, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialTranslationalVelocityY' , 'pVal' , ), 164, (164, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialTranslationalVelocityZ' , 'pVal' , ), 165, (165, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialTranslationalVelocityZ' , 'pVal' , ), 165, (165, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'InitialRotationalVelocityX' , 'ppVal' , ), 166, (166, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'InitialRotationalVelocityY' , 'ppVal' , ), 167, (167, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'InitialRotationalVelocityZ' , 'ppVal' , ), 168, (168, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialRotationalVelocityX' , 'pVal' , ), 169, (169, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialRotationalVelocityX' , 'pVal' , ), 169, (169, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialRotationalVelocityY' , 'pVal' , ), 170, (170, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialRotationalVelocityY' , 'pVal' , ), 170, (170, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialRotationalVelocityZ' , 'pVal' , ), 171, (171, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialRotationalVelocityZ' , 'pVal' , ), 171, (171, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalVelocityRefMarker' , 'strMarker' , ), 172, (172, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalVelocityRefMarker' , 'strMarker' , ), 172, (172, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'RotationalVelocityRefMarker' , 'strMarker' , ), 173, (173, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'RotationalVelocityRefMarker' , 'strMarker' , ), 173, (173, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'MaterialInput' , 'pVal' , ), 174, (174, (), [ (3, 1, None, "IID('{4DD8B94B-8CB3-4C58-8171-E897A8BC94F4}')") , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'MaterialInput' , 'pVal' , ), 174, (174, (), [ (16387, 10, None, "IID('{4DD8B94B-8CB3-4C58-8171-E897A8BC94F4}')") , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'Material' , 'pVal' , ), 175, (175, (), [ (3, 1, None, "IID('{EF682F61-990D-40D7-9A4C-46391963D599}')") , ], 1 , 4 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'Material' , 'pVal' , ), 175, (175, (), [ (16387, 10, None, "IID('{EF682F61-990D-40D7-9A4C-46391963D599}')") , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'Density' , 'pVal' , ), 176, (176, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'Density' , 'pVal' , ), 176, (176, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'MaterialUser' , 'pVal' , ), 177, (177, (), [ (9, 1, None, "IID('{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}')") , ], 1 , 4 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'MaterialUser' , 'pVal' , ), 177, (177, (), [ (16393, 10, None, "IID('{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}')") , ], 1 , 2 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
	(( 'CreateCylinderGeometry' , 'strName' , 'pRefFrame' , 'dRadius' , 'dHeight' , 
			 'ppVal' , ), 180, (180, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (5, 1, None, None) , 
			 (5, 1, None, None) , (16393, 10, None, "IID('{5810C7E4-F627-4171-9D64-4BC97F14BB8E}')") , ], 1 , 1 , 4 , 0 , 456 , (3, 0, None, None) , 0 , )),
	(( 'CreateCylinderGeometryWithPointPointRadius' , 'strName' , 'pFirstPoint' , 'pSecondPoint' , 'dRadius' , 
			 'ppVal' , ), 181, (181, (), [ (8, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , 
			 (5, 1, None, None) , (16393, 10, None, "IID('{5810C7E4-F627-4171-9D64-4BC97F14BB8E}')") , ], 1 , 1 , 4 , 0 , 464 , (3, 0, None, None) , 0 , )),
	(( 'CreateBoxGeometry' , 'strName' , 'pRefFrame' , 'dWidth' , 'dHeight' , 
			 'dDepth' , 'ppVal' , ), 182, (182, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{7B6155CC-0035-4449-9748-DFCE0956F5D9}')") , ], 1 , 1 , 4 , 0 , 472 , (3, 0, None, None) , 0 , )),
	(( 'CreateSphereGeometry' , 'strName' , 'pRefFrame' , 'dRadius' , 'ppVal' , 
			 ), 183, (183, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (5, 1, None, None) , (16393, 10, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , ], 1 , 1 , 4 , 0 , 480 , (3, 0, None, None) , 0 , )),
	(( 'CreateEllipsoidGeometry' , 'strName' , 'pRefFrame' , 'dRadius' , 'dRadiusY' , 
			 'dRadiusZ' , 'ppVal' , ), 184, (184, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , ], 1 , 1 , 4 , 0 , 488 , (3, 0, None, None) , 0 , )),
	(( 'CreateTorusGeometry' , 'strName' , 'pRefFrame' , 'dMajorRadius' , 'dMinorRadius' , 
			 'ppVal' , ), 185, (185, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (5, 1, None, None) , 
			 (5, 1, None, None) , (16393, 10, None, "IID('{92A1D6C1-1B9F-4A5A-AA3E-164073FAA5FB}')") , ], 1 , 1 , 4 , 0 , 496 , (3, 0, None, None) , 0 , )),
	(( 'CreatePrismGeometry' , 'strName' , 'pRefFrame' , 'dRadius' , 'dHeight' , 
			 'NSides' , 'ppVal' , ), 186, (186, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , 
			 (5, 1, None, None) , (5, 1, None, None) , (3, 1, None, None) , (16393, 10, None, "IID('{CD73C8BF-C8F4-451C-BE3F-E7E06BA247FD}')") , ], 1 , 1 , 4 , 0 , 504 , (3, 0, None, None) , 0 , )),
	(( 'CreateConeGeometry' , 'strName' , 'pFirstPoint' , 'pSecondPoint' , 'dTopRadius' , 
			 'dBottomRadius' , 'ppVal' , ), 187, (187, (), [ (8, 1, None, None) , (8197, 1, None, None) , 
			 (8197, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{1A304704-02AE-4939-8CD1-0DBCDE3F526B}')") , ], 1 , 1 , 4 , 0 , 512 , (3, 0, None, None) , 0 , )),
	(( 'CreateLinkGeometry' , 'strName' , 'pFirstPoint' , 'pSecondPoint' , 'dDepth' , 
			 'ppVal' , ), 188, (188, (), [ (8, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , 
			 (5, 1, None, None) , (16393, 10, None, "IID('{AD48AFB0-D8CA-4168-B727-A352242BDFEE}')") , ], 1 , 1 , 4 , 0 , 520 , (3, 0, None, None) , 0 , )),
	(( 'CreateLinkGeometryWithRadius' , 'strName' , 'pFirstPoint' , 'pSecondPoint' , 'dFirstRadious' , 
			 'dSecondRadious' , 'dDepth' , 'ppVal' , ), 189, (189, (), [ (8, 1, None, None) , 
			 (8197, 1, None, None) , (8197, 1, None, None) , (5, 0, None, None) , (5, 1, None, None) , (5, 1, None, None) , 
			 (16393, 10, None, "IID('{AD48AFB0-D8CA-4168-B727-A352242BDFEE}')") , ], 1 , 1 , 4 , 0 , 528 , (3, 0, None, None) , 0 , )),
	(( 'CreateCircleGeometry' , 'strName' , 'pRefFrame' , 'dRadius' , 'ppVal' , 
			 ), 190, (190, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (5, 1, None, None) , (16393, 10, None, "IID('{4B132713-20F9-475D-B175-CED5735E2825}')") , ], 1 , 1 , 4 , 0 , 536 , (3, 0, None, None) , 0 , )),
	(( 'CreateSplineGeometry' , 'strName' , 'pMultiPoint' , 'ppVal' , ), 191, (191, (), [ 
			 (8, 1, None, None) , (8204, 1, None, None) , (16393, 10, None, "IID('{159B4280-8FD8-4847-884B-84EC26F963FA}')") , ], 1 , 1 , 4 , 0 , 544 , (3, 0, None, None) , 0 , )),
	(( 'CreateOutlineGeometry' , 'strName' , 'pMultiPoint' , 'ppVal' , ), 192, (192, (), [ 
			 (8, 1, None, None) , (8204, 1, None, None) , (16393, 10, None, "IID('{31C17D32-0501-4F95-96DC-5ED97F6994A6}')") , ], 1 , 1 , 4 , 0 , 552 , (3, 0, None, None) , 0 , )),
	(( 'CreateArcGeometry' , 'strName' , 'pCenterPoint' , 'pStartPoint' , 'pDirection' , 
			 'dAngle' , 'ppVal' , ), 193, (193, (), [ (8, 1, None, None) , (8197, 1, None, None) , 
			 (8197, 1, None, None) , (8197, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{6615A98C-4753-43E7-BFC6-D7E2EC7D1737}')") , ], 1 , 1 , 4 , 0 , 560 , (3, 0, None, None) , 0 , )),
	(( 'BooleanGeometry' , 'BooleanType' , 'strName' , 'pBaseGeometry' , 'pActionGeometry' , 
			 'ppVal' , ), 195, (195, (), [ (3, 1, None, "IID('{49712086-5E35-40C5-88D9-DD1FC89D8732}')") , (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 1 , 4 , 0 , 568 , (3, 0, None, None) , 0 , )),
	(( 'GetEntity' , 'strName' , 'ppVal' , ), 196, (196, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 1 , 4 , 0 , 576 , (3, 0, None, None) , 0 , )),
	(( 'CreateParametricPoint' , 'strName' , 'pPoint' , 'pRefMarker' , 'ppVal' , 
			 ), 198, (198, (), [ (8, 1, None, None) , (8197, 1, None, None) , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (16393, 10, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 1 , 4 , 0 , 584 , (3, 0, None, None) , 0 , )),
	(( 'CreateParametricValue' , 'strName' , 'dValue' , 'ppVal' , ), 199, (199, (), [ 
			 (8, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')") , ], 1 , 1 , 4 , 0 , 592 , (3, 0, None, None) , 0 , )),
	(( 'GetBoundingBox' , 'x1' , 'y1' , 'z1' , 'x2' , 
			 'y2' , 'z2' , ), 200, (200, (), [ (16389, 2, None, None) , (16389, 2, None, None) , 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 600 , (3, 0, None, None) , 0 , )),
	(( 'CreateMarker' , 'strName' , 'pRefFrame' , 'ppVal' , ), 201, (201, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 1 , 4 , 0 , 608 , (3, 0, None, None) , 0 , )),
	(( 'CreateMarkerWithPointPoint' , 'strName' , 'pFirstPoint' , 'pSecondPoint' , 'pVal' , 
			 ), 202, (202, (), [ (8, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 1 , 4 , 0 , 616 , (3, 0, None, None) , 0 , )),
	(( 'AnimationDataScaling' , 'ppVal' , ), 203, (203, (), [ (16393, 10, None, "IID('{7DD7CE3F-EAC8-4324-9107-C4EDFF055B1C}')") , ], 1 , 2 , 4 , 0 , 624 , (3, 0, None, None) , 0 , )),
	(( 'FileImport' , 'strFile' , ), 204, (204, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 632 , (3, 0, None, None) , 0 , )),
	(( 'ImportRoadData' , 'strFile' , ), 205, (205, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 640 , (3, 0, None, None) , 0 , )),
	(( 'CreateSplineSurfaceGeometry' , 'strName' , 'pMultiCurve' , 'ppVal' , ), 206, (206, (), [ 
			 (8, 1, None, None) , (8204, 1, None, None) , (16393, 10, None, "IID('{CC8BC813-F31C-4B25-A652-7B110AF60394}')") , ], 1 , 1 , 4 , 0 , 648 , (3, 0, None, None) , 0 , )),
	(( 'CreateOutlineSurfaceGeometry' , 'strName' , 'pMultiCurve' , 'ppVal' , ), 207, (207, (), [ 
			 (8, 1, None, None) , (8204, 1, None, None) , (16393, 10, None, "IID('{733031A0-28F6-4064-9C40-FDC74CFA015E}')") , ], 1 , 1 , 4 , 0 , 656 , (3, 0, None, None) , 0 , )),
	(( 'MarkerCollection' , 'ppVal' , ), 210, (210, (), [ (16393, 10, None, "IID('{6BEF9B6B-4708-445E-A3B5-0D65BA69F748}')") , ], 1 , 2 , 4 , 0 , 664 , (3, 0, None, None) , 0 , )),
	(( 'GeometryWireCollection' , 'ppVal' , ), 211, (211, (), [ (16393, 10, None, "IID('{2B270F9A-2704-448E-809B-7B2B30ACEA84}')") , ], 1 , 2 , 4 , 0 , 672 , (3, 0, None, None) , 0 , )),
	(( 'GeometrySheetCollection' , 'ppVal' , ), 212, (212, (), [ (16393, 10, None, "IID('{5E8000B9-06C7-46B2-A736-5D43904C8878}')") , ], 1 , 2 , 4 , 0 , 680 , (3, 0, None, None) , 0 , )),
	(( 'GeometrySolidCollection' , 'ppVal' , ), 213, (213, (), [ (16393, 10, None, "IID('{DB55951D-F238-46D3-9C25-7B4B87F34D36}')") , ], 1 , 2 , 4 , 0 , 688 , (3, 0, None, None) , 0 , )),
	(( 'LayerNumber' , 'pVal' , ), 214, (214, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 696 , (3, 0, None, None) , 0 , )),
	(( 'LayerNumber' , 'pVal' , ), 214, (214, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 704 , (3, 0, None, None) , 0 , )),
	(( 'CreateParametricPointWithText' , 'strName' , 'strText' , 'pRefMarker' , 'ppVal' , 
			 ), 215, (215, (), [ (8, 1, None, None) , (8, 1, None, None) , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (16393, 10, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 1 , 4 , 0 , 712 , (3, 0, None, None) , 0 , )),
	(( 'CreateSplineGeometryWithFile' , 'strName' , 'strFileName' , 'ppVal' , ), 216, (216, (), [ 
			 (8, 1, None, None) , (8, 1, None, None) , (16393, 10, None, "IID('{159B4280-8FD8-4847-884B-84EC26F963FA}')") , ], 1 , 1 , 4 , 0 , 720 , (3, 0, None, None) , 0 , )),
	(( 'ExtrudeGeometryWire' , 'strName' , 'pWireGeometry' , 'dDistance' , 'pExtrudeDirection' , 
			 'ppVal' , ), 217, (217, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , (5, 1, None, None) , 
			 (8197, 1, None, None) , (16393, 10, None, "IID('{F7EEC6D6-7358-4316-AFEC-3457934B08F8}')") , ], 1 , 1 , 4 , 0 , 728 , (3, 0, None, None) , 0 , )),
	(( 'ExtrudeGeometrySheet' , 'strName' , 'pSheetGeometry' , 'dDistance' , 'enExtrudeType' , 
			 'ppVal' , ), 218, (218, (), [ (8, 1, None, None) , (9, 1, None, "IID('{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}')") , (5, 1, None, None) , 
			 (3, 1, None, "IID('{8F05A754-9226-44BB-A8D6-CD3CF1B03623}')") , (16393, 10, None, "IID('{E14CE330-FB54-47C9-A917-4D1854365E86}')") , ], 1 , 1 , 4 , 0 , 736 , (3, 0, None, None) , 0 , )),
	(( 'CreateGeometrySheet' , 'strName' , 'pWireGeometry' , 'ppVal' , ), 219, (219, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , (16393, 10, None, "IID('{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}')") , ], 1 , 1 , 4 , 0 , 744 , (3, 0, None, None) , 0 , )),
	(( 'SpinGeometryWire' , 'strName' , 'pWireGeometry' , 'pAxisStart' , 'pAxisEnd' , 
			 'ppVal' , ), 220, (220, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , (8197, 1, None, None) , 
			 (8197, 1, None, None) , (16393, 10, None, "IID('{952BEF3F-0EA1-4F2B-9EA4-5214261533D2}')") , ], 1 , 1 , 4 , 0 , 752 , (3, 0, None, None) , 0 , )),
	(( 'SpinGeometrySheet' , 'strName' , 'pSheetGeometry' , 'pAxisStart' , 'pAxisEnd' , 
			 'ppVal' , ), 221, (221, (), [ (8, 1, None, None) , (9, 1, None, "IID('{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}')") , (8197, 1, None, None) , 
			 (8197, 1, None, None) , (16393, 10, None, "IID('{431767A5-5F84-411B-9BB4-E4B9EA14BBC4}')") , ], 1 , 1 , 4 , 0 , 760 , (3, 0, None, None) , 0 , )),
	(( 'SweepGeometryWireWithTranslationVector' , 'strName' , 'pWireGeometry' , 'pTranslationVector' , 'ppVal' , 
			 ), 222, (222, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , (8197, 1, None, None) , (16393, 10, None, "IID('{1820726B-54D0-4A1F-AEAB-284DEC6C1270}')") , ], 1 , 1 , 4 , 0 , 768 , (3, 0, None, None) , 0 , )),
	(( 'SweepGeometryWireWithWireGeometry' , 'strName' , 'pWireGeometry' , 'pPathWireGeometry' , 'ppVal' , 
			 ), 223, (223, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , (16393, 10, None, "IID('{1820726B-54D0-4A1F-AEAB-284DEC6C1270}')") , ], 1 , 1 , 4 , 0 , 776 , (3, 0, None, None) , 0 , )),
	(( 'SweepGeometrySheetWithTranslationVector' , 'strName' , 'pSheetGeometry' , 'pTranslationVector' , 'ppVal' , 
			 ), 224, (224, (), [ (8, 1, None, None) , (9, 1, None, "IID('{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}')") , (8197, 1, None, None) , (16393, 10, None, "IID('{FC825EA8-559A-4A73-9261-7EA500EC7CAB}')") , ], 1 , 1 , 4 , 0 , 784 , (3, 0, None, None) , 0 , )),
	(( 'SweepGeometrySheetWithWireGeometry' , 'strName' , 'pSheetGeometry' , 'pPathWireGeometry' , 'ppVal' , 
			 ), 225, (225, (), [ (8, 1, None, None) , (9, 1, None, "IID('{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , (16393, 10, None, "IID('{FC825EA8-559A-4A73-9261-7EA500EC7CAB}')") , ], 1 , 1 , 4 , 0 , 792 , (3, 0, None, None) , 0 , )),
	(( 'BooleanGeometryEx' , 'BooleanType' , 'strName' , 'pTargetGeometry' , 'pToolGeometry' , 
			 'ppVal' , ), 226, (226, (), [ (3, 1, None, "IID('{49712086-5E35-40C5-88D9-DD1FC89D8732}')") , (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 1 , 4 , 0 , 800 , (3, 0, None, None) , 0 , )),
	(( 'BooleanGeometryExWidthMulti' , 'BooleanType' , 'strName' , 'pTargetGeometry' , 'pMultiToolGeometry' , 
			 'ppVal' , ), 227, (227, (), [ (3, 1, None, "IID('{49712086-5E35-40C5-88D9-DD1FC89D8732}')") , (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (8204, 1, None, None) , (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 1 , 4 , 0 , 808 , (3, 0, None, None) , 0 , )),
	(( 'CreateRoadDataUsingSpline' , 'strName' , 'pMultiCurve' , 'dTolerance' , 'ppVal' , 
			 ), 228, (228, (), [ (8, 1, None, None) , (8204, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}')") , ], 1 , 1 , 4 , 0 , 816 , (3, 0, None, None) , 0 , )),
	(( 'CreateRoadDataUsingOutline' , 'strName' , 'pMultiCurve' , 'ppVal' , ), 229, (229, (), [ 
			 (8, 1, None, None) , (8204, 1, None, None) , (16393, 10, None, "IID('{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}')") , ], 1 , 1 , 4 , 0 , 824 , (3, 0, None, None) , 0 , )),
	(( 'ParametricPointCollection' , 'ppVal' , ), 230, (230, (), [ (16393, 10, None, "IID('{65267578-7015-4BB5-BB65-F5F81CCEA244}')") , ], 1 , 2 , 4 , 0 , 832 , (3, 0, None, None) , 0 , )),
	(( 'ParametricValueCollection' , 'ppVal' , ), 231, (231, (), [ (16393, 10, None, "IID('{65267578-7015-4BB5-BB65-F5F81CCEA245}')") , ], 1 , 2 , 4 , 0 , 840 , (3, 0, None, None) , 0 , )),
	(( 'ImportParametricPoint' , 'strFileName' , ), 232, (232, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 848 , (3, 0, None, None) , 0 , )),
	(( 'ExportParametricPoint' , 'strFileName' , ), 233, (233, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 856 , (3, 0, None, None) , 0 , )),
	(( 'ImportParametricValue' , 'strFileName' , ), 234, (234, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 864 , (3, 0, None, None) , 0 , )),
	(( 'ExportParametricValue' , 'strFileName' , ), 235, (235, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 872 , (3, 0, None, None) , 0 , )),
	(( 'CreateParametricValueWithText' , 'strName' , 'strText' , 'ppVal' , ), 236, (236, (), [ 
			 (8, 1, None, None) , (8, 1, None, None) , (16393, 10, None, "IID('{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')") , ], 1 , 1 , 4 , 0 , 880 , (3, 0, None, None) , 0 , )),
	(( 'CreateArcRevolutionGeometry' , 'bstrName' , 'pIRefFrame' , 'dArcRadius' , 'dArcStartAngle' , 
			 'dArcEndAngle' , 'dRevRadius' , 'dRevStartAngle' , 'dRevEndAngle' , 'ppVal' , 
			 ), 237, (237, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (5, 1, None, None) , (5, 1, None, None) , 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{CC63D830-4DFB-4DFC-920E-966E02DCCE51}')") , ], 1 , 1 , 4 , 0 , 888 , (3, 0, None, None) , 0 , )),
	(( 'CreateArcExtrusionGeometry' , 'bstrName' , 'pIRefFrame' , 'dArcRadius' , 'dArcStartAngle' , 
			 'dArcEndAngle' , 'dExtrusionLength' , 'ppVal' , ), 238, (238, (), [ (8, 1, None, None) , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , 
			 (16393, 10, None, "IID('{7338A8FC-4CD7-472D-B764-578B96254856}')") , ], 1 , 1 , 4 , 0 , 896 , (3, 0, None, None) , 0 , )),
	(( 'CombineCurveGeometry' , 'bstrName' , 'pMultiCurveGeometry' , 'ppVal' , ), 239, (239, (), [ 
			 (8, 1, None, None) , (8204, 1, None, None) , (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , ], 1 , 1 , 4 , 0 , 904 , (3, 0, None, None) , 0 , )),
	(( 'FileExport' , 'strFile' , 'OverWrite' , ), 240, (240, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 912 , (3, 0, None, None) , 0 , )),
	(( 'GetReferenceFrameInfoOfCenterMarker' , 'ppResult' , ), 241, (241, (), [ (16393, 10, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , ], 1 , 1 , 4 , 0 , 920 , (3, 0, None, None) , 0 , )),
	(( 'Redraw' , ), 244, (244, (), [ ], 1 , 1 , 4 , 0 , 928 , (3, 0, None, None) , 0 , )),
	(( 'GetNewEntityName' , 'namePrefix' , 'Name' , ), 245, (245, (), [ (8, 1, None, None) , 
			 (16392, 10, None, None) , ], 1 , 1 , 4 , 0 , 936 , (3, 0, None, None) , 0 , )),
	(( 'GetBoundingBoxWithRefFrame' , 'RefFrame' , 'box' , ), 246, (246, (), [ (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , 
			 (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 944 , (3, 0, None, None) , 0 , )),
	(( 'RoadDataCollection' , 'ppVal' , ), 247, (247, (), [ (16393, 10, None, "IID('{68A5A87D-7640-4F09-8D24-945200D2DB33}')") , ], 1 , 2 , 4 , 0 , 952 , (3, 0, None, None) , 0 , )),
	(( 'CreateTorusGeometryWithAngle' , 'strName' , 'pRefFrame' , 'dMajorRadius' , 'dMinorRadius' , 
			 'dAngle' , 'ppVal' , ), 248, (248, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{92A1D6C1-1B9F-4A5A-AA3E-164073FAA5FB}')") , ], 1 , 1 , 4 , 0 , 960 , (3, 0, None, None) , 0 , )),
	(( 'CreateArcRevolutionGeometryWithArcGeometry' , 'bstrName' , 'pWireGeometry' , 'pRevPoint' , 'pRevDirection' , 
			 'dRevAngle' , 'ppVal' , ), 249, (249, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , 
			 (8197, 1, None, None) , (8197, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{CC63D830-4DFB-4DFC-920E-966E02DCCE51}')") , ], 1 , 1 , 4 , 0 , 968 , (3, 0, None, None) , 0 , )),
	(( 'ImportGRoad' , 'bstrGRoadName' , 'bstrPath' , 'ppVal' , ), 250, (250, (), [ 
			 (8, 1, None, None) , (8, 1, None, None) , (16393, 10, None, "IID('{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}')") , ], 1 , 1 , 4 , 0 , 976 , (3, 0, None, None) , 0 , )),
	(( 'GRoadCreationOption' , 'ppResult' , ), 251, (251, (), [ (16393, 10, None, "IID('{295776CE-69C8-4B65-800F-F458E26F7BA1}')") , ], 1 , 2 , 4 , 0 , 984 , (3, 0, None, None) , 0 , )),
	(( 'GeometryShellCollection' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{C6162712-FA98-4EF1-8B94-E326943E0626}')") , ], 1 , 2 , 4 , 0 , 992 , (3, 0, None, None) , 0 , )),
	(( 'GRoadCollection' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{8AE3FA68-8066-412B-A1C9-9B360E8AFA35}')") , ], 1 , 2 , 4 , 0 , 1000 , (3, 0, None, None) , 0 , )),
	(( 'CreateGRoadWithFace' , 'bstrGRoadName' , 'pFaceList' , 'RefFrame' , 'bstrOutputFileRelativePathName' , 
			 'ppVal' , ), 254, (254, (), [ (8, 1, None, None) , (8204, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , 
			 (8, 1, None, None) , (16393, 10, None, "IID('{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}')") , ], 1 , 1 , 4 , 0 , 1008 , (3, 0, None, None) , 0 , )),
	(( 'LayerName' , 'Name' , ), 255, (255, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 1016 , (3, 0, None, None) , 0 , )),
	(( 'CreateFaceSurfaceGeometry' , 'strName' , 'pMultiFaces' , 'ppVal' , ), 256, (256, (), [ 
			 (8, 1, None, None) , (8204, 1, None, None) , (16393, 10, None, "IID('{A376DBCC-6EA1-4170-97B7-7208ECE52A76}')") , ], 1 , 1 , 4 , 0 , 1024 , (3, 0, None, None) , 0 , )),
	(( 'CreateEdgeCurveGeometry' , 'strName' , 'pMultiEdges' , 'ppVal' , ), 257, (257, (), [ 
			 (8, 1, None, None) , (8204, 1, None, None) , (16393, 10, None, "IID('{6FA36EFD-91A9-49CF-AC3F-595F8CDCD6AD}')") , ], 1 , 1 , 4 , 0 , 1032 , (3, 0, None, None) , 0 , )),
	(( 'CreateFaceSurfaceGeometryContinuous' , 'strName' , 'geo' , 'Val' , 'ppVal' , 
			 ), 258, (258, (), [ (8, 1, None, None) , (9, 1, None, "IID('{C5D7538F-B727-4D10-9D7D-D743D92ACAB4}')") , (5, 1, None, None) , (16393, 10, None, "IID('{A376DBCC-6EA1-4170-97B7-7208ECE52A76}')") , ], 1 , 1 , 4 , 0 , 1040 , (3, 0, None, None) , 0 , )),
	(( 'CreateEdgeCurveGeometryContinuous' , 'strName' , 'geo' , 'Val' , 'ppVal' , 
			 ), 259, (259, (), [ (8, 1, None, None) , (9, 1, None, "IID('{263D2898-9FED-4649-9CF5-8D043CC759A2}')") , (5, 1, None, None) , (16393, 10, None, "IID('{6FA36EFD-91A9-49CF-AC3F-595F8CDCD6AD}')") , ], 1 , 1 , 4 , 0 , 1048 , (3, 0, None, None) , 0 , )),
	(( 'ImprintEdge' , 'pTargetEntity' , 'pToolEntity' , ), 260, (260, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 1 , 4 , 0 , 1056 , (3, 0, None, None) , 0 , )),
	(( 'CreateCurveUsingImprint' , 'strName' , 'pTargetEntity' , 'pToolEntity' , 'ppVal' , 
			 ), 261, (261, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , ], 1 , 1 , 4 , 0 , 1064 , (3, 0, None, None) , 0 , )),
	(( 'CreateRoadDataUsingOutline2' , 'strName' , 'pMultiCurve' , 'Type' , 'ppVal' , 
			 ), 262, (262, (), [ (8, 1, None, None) , (8204, 1, None, None) , (3, 1, None, "IID('{709F4BB5-B608-423B-8F78-40615C3C8D1E}')") , (16393, 10, None, "IID('{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}')") , ], 1 , 1 , 4 , 0 , 1072 , (3, 0, None, None) , 0 , )),
	(( 'CreateOutlineGeometryWithFile' , 'strName' , 'strFileName' , 'ppVal' , ), 263, (263, (), [ 
			 (8, 1, None, None) , (8, 1, None, None) , (16393, 10, None, "IID('{31C17D32-0501-4F95-96DC-5ED97F6994A6}')") , ], 1 , 1 , 4 , 0 , 1080 , (3, 0, None, None) , 0 , )),
	(( 'DeleteFaces' , 'pGeometry' , 'pMultiFaces' , 'ppVal' , ), 264, (264, (), [ 
			 (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (8204, 1, None, None) , (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 1 , 4 , 0 , 1088 , (3, 0, None, None) , 0 , )),
	(( 'DeleteEdges' , 'pGeometry' , 'pMultiEdges' , 'ppVal' , ), 265, (265, (), [ 
			 (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (8204, 1, None, None) , (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 1 , 4 , 0 , 1096 , (3, 0, None, None) , 0 , )),
	(( 'SearchFacesWithType' , 'pGeometry' , 'Val' , 'valTol' , 'ppEntities' , 
			 ), 266, (266, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (3, 1, None, "IID('{3C783752-5530-4EA5-95BC-CFC7DFB5A2B0}')") , (5, 1, None, None) , (16393, 10, None, "IID('{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')") , ], 1 , 1 , 4 , 0 , 1104 , (3, 0, None, None) , 0 , )),
	(( 'SearchEdgesWithType' , 'pGeometry' , 'Val' , 'valTol' , 'ppEntities' , 
			 ), 267, (267, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (3, 1, None, "IID('{13C76DB6-4F9A-41B9-A586-0E814F999E3A}')") , (5, 1, None, None) , (16393, 10, None, "IID('{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')") , ], 1 , 1 , 4 , 0 , 1112 , (3, 0, None, None) , 0 , )),
	(( 'CreateRoadDataUsingOutline3' , 'strName' , 'pMultiCurve' , 'dPlaneTolerance' , 'ppVal' , 
			 ), 268, (268, (), [ (8, 1, None, None) , (8204, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}')") , ], 1 , 1 , 4 , 0 , 1120 , (3, 0, None, None) , 0 , )),
	(( 'Density2' , 'ppVal' , ), 269, (269, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 1128 , (3, 0, None, None) , 0 , )),
	(( 'UpdateMaterialLibrary' , ), 270, (270, (), [ ], 1 , 1 , 4 , 0 , 1136 , (3, 0, None, None) , 0 , )),
	(( 'CreateOffsetSurfaceGeometry' , 'strName' , 'pSurface' , 'dOffset' , 'ppGEo' , 
			 ), 272, (272, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (5, 1, None, None) , (16393, 10, None, "IID('{A376DBCC-6EA1-4170-97B7-7208ECE52A76}')") , ], 1 , 1 , 4 , 0 , 1144 , (3, 0, None, None) , 0 , )),
	(( 'CreateThickenSurfaceGeometry' , 'strName' , 'pSurface' , 'dThicknessFront' , 'dThicknessBack' , 
			 'ppGEo' , ), 273, (273, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (5, 1, None, None) , 
			 (5, 1, None, None) , (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , ], 1 , 1 , 4 , 0 , 1152 , (3, 0, None, None) , 0 , )),
	(( 'CreateGeometrySolidWithFilledSurface' , 'strName' , 'pSheetGeometry' , 'ppGEo' , ), 274, (274, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}')") , (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , ], 1 , 1 , 4 , 0 , 1160 , (3, 0, None, None) , 0 , )),
	(( 'CreateSewSurfaceGeometry' , 'strName' , 'pSurface' , 'dGap' , 'ppGEo' , 
			 ), 275, (275, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (5, 1, None, None) , (16393, 10, None, "IID('{A376DBCC-6EA1-4170-97B7-7208ECE52A76}')") , ], 1 , 1 , 4 , 0 , 1168 , (3, 0, None, None) , 0 , )),
	(( 'CreateCircleGeometryWithThreePoints' , 'strName' , 'pThreePoint' , 'ppVal' , ), 276, (276, (), [ 
			 (8, 1, None, None) , (8204, 1, None, None) , (16393, 10, None, "IID('{4B132713-20F9-475D-B175-CED5735E2825}')") , ], 1 , 1 , 4 , 0 , 1176 , (3, 0, None, None) , 0 , )),
	(( 'CreateArcGeometryWithThreePoints' , 'strName' , 'pThreePoint' , 'ppVal' , ), 277, (277, (), [ 
			 (8, 1, None, None) , (8204, 1, None, None) , (16393, 10, None, "IID('{6615A98C-4753-43E7-BFC6-D7E2EC7D1737}')") , ], 1 , 1 , 4 , 0 , 1184 , (3, 0, None, None) , 0 , )),
	(( 'CreateHelixCurveGeometry' , 'bstrName' , 'pIRefFrame' , 'dRadius' , 'dPitch' , 
			 'dTotalDepth' , 'Val' , 'ppVal' , ), 278, (278, (), [ (8, 1, None, None) , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (3, 1, None, "IID('{4AF9E853-0E68-42B6-8F9B-B3606E38FC28}')") , 
			 (16393, 10, None, "IID('{0FFFB2FB-E83D-431E-8769-1FCFDFBC6BD5}')") , ], 1 , 1 , 4 , 0 , 1192 , (3, 0, None, None) , 0 , )),
	(( 'ExtrudeGeometrySheetWithDirection' , 'strName' , 'pSheet' , 'dDistance' , 'pExtrudeDirection' , 
			 'ppVal' , ), 279, (279, (), [ (8, 1, None, None) , (9, 1, None, "IID('{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}')") , (5, 1, None, None) , 
			 (8197, 1, None, None) , (16393, 10, None, "IID('{E14CE330-FB54-47C9-A917-4D1854365E86}')") , ], 1 , 1 , 4 , 0 , 1200 , (3, 0, None, None) , 0 , )),
	(( 'CreateGeometrySheetWithFilledWire' , 'strName' , 'pWireGeometry' , 'ppVal' , ), 280, (280, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , (16393, 10, None, "IID('{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}')") , ], 1 , 1 , 4 , 0 , 1208 , (3, 0, None, None) , 0 , )),
	(( 'ImprintEdgeWithVirtualPlane' , 'pTargetEntity' , 'pOriginPoint' , 'pNormalDir' , ), 281, (281, (), [ 
			 (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (8197, 1, None, None) , (8197, 1, None, None) , ], 1 , 1 , 4 , 0 , 1216 , (3, 0, None, None) , 0 , )),
	(( 'ImprintEdgeInRadialPattern' , 'pTargetEntity' , 'pToolGeometry' , 'pOriginPoint' , 'pAxis' , 
			 'dAngle' , 'uiNoOfEdges' , ), 282, (282, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (8197, 1, None, None) , (8197, 1, None, None) , (5, 1, None, None) , (19, 1, None, None) , ], 1 , 1 , 4 , 0 , 1224 , (3, 0, None, None) , 0 , )),
	(( 'SweepOption' , 'ppResult' , ), 283, (283, (), [ (16393, 10, None, "IID('{5099BF4D-2B9E-405B-A041-3D4760AE1AA9}')") , ], 1 , 2 , 4 , 0 , 1232 , (3, 0, None, None) , 0 , )),
	(( 'SweepGeometrySheetWithOption' , 'bstrName' , 'pTargetEntity' , 'pCurve' , 'pIOption' , 
			 'ppVal' , ), 284, (284, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (9, 1, None, "IID('{5099BF4D-2B9E-405B-A041-3D4760AE1AA9}')") , (16393, 10, None, "IID('{FC825EA8-559A-4A73-9261-7EA500EC7CAB}')") , ], 1 , 1 , 4 , 0 , 1240 , (3, 0, None, None) , 0 , )),
	(( 'SweepGeometryWireWithOption' , 'bstrName' , 'pTargetEntity' , 'pCurve' , 'pIOption' , 
			 'ppVal' , ), 285, (285, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (9, 1, None, "IID('{5099BF4D-2B9E-405B-A041-3D4760AE1AA9}')") , (16393, 10, None, "IID('{1820726B-54D0-4A1F-AEAB-284DEC6C1270}')") , ], 1 , 1 , 4 , 0 , 1248 , (3, 0, None, None) , 0 , )),
	(( 'ChamferSolidGeometry' , 'strName' , 'pTarget' , 'pMultiEdges' , 'pFirst' , 
			 'pSecond' , 'ppVal' , ), 286, (286, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , 
			 (8204, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , ], 1 , 1 , 4 , 0 , 1256 , (3, 0, None, None) , 0 , )),
	(( 'FilletSolidGeometry' , 'strName' , 'pTarget' , 'pMultiEdges' , 'pRadius' , 
			 'ppVal' , ), 287, (287, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , (8204, 1, None, None) , 
			 (8197, 1, None, None) , (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , ], 1 , 1 , 4 , 0 , 1264 , (3, 0, None, None) , 0 , )),
	(( 'ShellSolidGeometry' , 'strName' , 'pTarget' , 'pRemoveFaces' , 'dOffset' , 
			 'pOffsetFaces' , 'pOffsetValues' , 'dir' , 'ppVal' , ), 288, (288, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , (8204, 1, None, None) , (5, 1, None, None) , (8204, 1, None, None) , 
			 (8197, 1, None, None) , (3, 1, None, "IID('{C3AABB83-D3B0-42FC-9A17-05C51C28FC8F}')") , (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , ], 1 , 1 , 4 , 0 , 1272 , (3, 0, None, None) , 0 , )),
	(( 'ImprintEdgeOnFaceWithVirtualPlane' , 'pTargetEntity' , 'pFaceList' , 'pOriginPoint' , 'pNormalDir' , 
			 ), 289, (289, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (8204, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , ], 1 , 1 , 4 , 0 , 1280 , (3, 0, None, None) , 0 , )),
	(( 'ImprintEdgeOnFaceInRadialPattern' , 'pTargetEntity' , 'pFaceList' , 'pToolGeometry' , 'pOriginPoint' , 
			 'pAxis' , 'dAngle' , 'uiNoOfEdges' , ), 290, (290, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (8204, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (8197, 1, None, None) , (8197, 1, None, None) , (5, 1, None, None) , 
			 (19, 1, None, None) , ], 1 , 1 , 4 , 0 , 1288 , (3, 0, None, None) , 0 , )),
	(( 'FileExportGeometry' , 'pGeometry' , 'strFile' , 'OverWrite' , ), 291, (291, (), [ 
			 (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (8, 1, None, None) , (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 1296 , (3, 0, None, None) , 0 , )),
	(( 'ImprintEdgeWithDirection' , 'pTargetEntity' , 'pCurve' , 'pVal' , ), 292, (292, (), [ 
			 (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (8197, 1, None, None) , ], 1 , 1 , 4 , 0 , 1304 , (3, 0, None, None) , 0 , )),
	(( 'ImprintEdgeOffset' , 'pTargetEntity' , 'pMultiEdges' , 'dDistance' , 'bDirection' , 
			 ), 293, (293, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (8204, 1, None, None) , (5, 1, None, None) , (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 1312 , (3, 0, None, None) , 0 , )),
	(( 'SplitSolidGeometry' , 'pSolid' , 'pSurface' , 'strNameFront' , 'strNameBack' , 
			 ), 294, (294, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (8, 1, None, None) , (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 1320 , (3, 0, None, None) , 0 , )),
	(( 'CreateSolidGeometyWithRegion' , 'pSolid' , ), 295, (295, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 1 , 4 , 0 , 1328 , (3, 0, None, None) , 0 , )),
	(( 'ImprintPointOnEdge' , 'pGeo' , 'pMultiPoint' , 'pPoints' , ), 296, (296, (), [ 
			 (9, 1, None, "IID('{263D2898-9FED-4649-9CF5-8D043CC759A2}')") , (8204, 1, None, None) , (24588, 10, None, None) , ], 1 , 1 , 4 , 0 , 1336 , (3, 0, None, None) , 0 , )),
	(( 'ImprintPointOnEdgeWithPoint' , 'pGeo' , 'pPointStart' , 'pPointEnd' , 'uiCount' , 
			 'pPoints' , ), 297, (297, (), [ (9, 1, None, "IID('{263D2898-9FED-4649-9CF5-8D043CC759A2}')") , (8197, 1, None, None) , (8197, 1, None, None) , 
			 (19, 1, None, None) , (24588, 10, None, None) , ], 1 , 1 , 4 , 0 , 1344 , (3, 0, None, None) , 0 , )),
	(( 'ImprintPointOnEdgeWithLength' , 'pGeo' , 'dLengthStart' , 'dLengthEnd' , 'uiCount' , 
			 'pPoints' , ), 298, (298, (), [ (9, 1, None, "IID('{263D2898-9FED-4649-9CF5-8D043CC759A2}')") , (5, 1, None, None) , (5, 1, None, None) , 
			 (19, 1, None, None) , (24588, 10, None, None) , ], 1 , 1 , 4 , 0 , 1352 , (3, 0, None, None) , 0 , )),
	(( 'ImprintPointOnEdgeWithRatio' , 'pGeo' , 'dRatioStart' , 'dLatioEnd' , 'uiCount' , 
			 'pPoints' , ), 299, (299, (), [ (9, 1, None, "IID('{263D2898-9FED-4649-9CF5-8D043CC759A2}')") , (5, 1, None, None) , (5, 1, None, None) , 
			 (19, 1, None, None) , (24588, 10, None, None) , ], 1 , 1 , 4 , 0 , 1360 , (3, 0, None, None) , 0 , )),
	(( 'CreateChamferSolidGeometry' , 'strName' , 'pTarget' , 'pMultiEdges' , 'dFirst' , 
			 'dSecond' , 'ppVal' , ), 300, (300, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , 
			 (8204, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{7E1C6724-070E-41D1-A9F7-B771847EB47D}')") , ], 1 , 1 , 4 , 0 , 1368 , (3, 0, None, None) , 0 , )),
	(( 'CreateFilletSolidGeometry' , 'strName' , 'pTarget' , 'pMultiEdges' , 'pRadius' , 
			 'ppVal' , ), 301, (301, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , (8204, 1, None, None) , 
			 (5, 1, None, None) , (16393, 10, None, "IID('{409CE2D0-68BC-48D0-A001-6606020E41A6}')") , ], 1 , 1 , 4 , 0 , 1376 , (3, 0, None, None) , 0 , )),
	(( 'CreateShellSolidGeometry' , 'strName' , 'pTarget' , 'pRemoveFaces' , 'dOffset' , 
			 'pOffsetFaces' , 'pOffsetValues' , 'dir' , 'ppVal' , ), 302, (302, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , (8204, 1, None, None) , (5, 1, None, None) , (8204, 1, None, None) , 
			 (8197, 1, None, None) , (3, 1, None, "IID('{C3AABB83-D3B0-42FC-9A17-05C51C28FC8F}')") , (16393, 10, None, "IID('{93D1E2EB-3542-44C8-8EC3-C0E1653B6788}')") , ], 1 , 1 , 4 , 0 , 1384 , (3, 0, None, None) , 0 , )),
	(( 'CreateBooleanSolidGeometry' , 'BooleanType' , 'strName' , 'pBaseGeometry' , 'pActionGeometry' , 
			 'ppVal' , ), 303, (303, (), [ (3, 1, None, "IID('{49712086-5E35-40C5-88D9-DD1FC89D8732}')") , (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{4F1C59D0-B6B4-43F8-8CBC-7253AB041F42}')") , ], 1 , 1 , 4 , 0 , 1392 , (3, 0, None, None) , 0 , )),
	(( 'ImprintEdgeOption' , 'ppResult' , ), 304, (304, (), [ (16393, 10, None, "IID('{48DE281A-8619-46F6-BAA5-3A429A0AF97E}')") , ], 1 , 2 , 4 , 0 , 1400 , (3, 0, None, None) , 0 , )),
	(( 'ImprintEdgeWithOption' , 'pTargetEntity' , 'pCurve' , 'pIOption' , 'ppVal' , 
			 ), 305, (305, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{48DE281A-8619-46F6-BAA5-3A429A0AF97E}')") , (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 1 , 4 , 0 , 1408 , (3, 0, None, None) , 0 , )),
	(( 'CreateOffsetFaces' , 'strName' , 'pFaces' , 'dOffset' , 'ppGEo' , 
			 ), 306, (306, (), [ (8, 1, None, None) , (8204, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{A376DBCC-6EA1-4170-97B7-7208ECE52A76}')") , ], 1 , 1 , 4 , 0 , 1416 , (3, 0, None, None) , 0 , )),
	(( 'ExtrudeEdges' , 'strName' , 'pMultiEdges' , 'dDistance' , 'pExtrudeDirection' , 
			 'ppVal' , ), 307, (307, (), [ (8, 1, None, None) , (8204, 1, None, None) , (5, 1, None, None) , 
			 (8197, 1, None, None) , (16393, 10, None, "IID('{F7EEC6D6-7358-4316-AFEC-3457934B08F8}')") , ], 1 , 1 , 4 , 0 , 1424 , (3, 0, None, None) , 0 , )),
	(( 'SpinEdges' , 'strName' , 'pMultiEdges' , 'pAxisStart' , 'pAxisEnd' , 
			 'ppVal' , ), 308, (308, (), [ (8, 1, None, None) , (8204, 1, None, None) , (8197, 1, None, None) , 
			 (8197, 1, None, None) , (16393, 10, None, "IID('{952BEF3F-0EA1-4F2B-9EA4-5214261533D2}')") , ], 1 , 1 , 4 , 0 , 1432 , (3, 0, None, None) , 0 , )),
	(( 'SweepEdges' , 'bstrName' , 'pMultiEdges' , 'pCurve' , 'pIOption' , 
			 'ppVal' , ), 309, (309, (), [ (8, 1, None, None) , (8204, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (9, 1, None, "IID('{5099BF4D-2B9E-405B-A041-3D4760AE1AA9}')") , (16393, 10, None, "IID('{1820726B-54D0-4A1F-AEAB-284DEC6C1270}')") , ], 1 , 1 , 4 , 0 , 1440 , (3, 0, None, None) , 0 , )),
	(( 'ExtrudeFaces' , 'strName' , 'pMultiFaces' , 'dDistance' , 'pExtrudeDirection' , 
			 'ppVal' , ), 310, (310, (), [ (8, 1, None, None) , (8204, 1, None, None) , (5, 1, None, None) , 
			 (8197, 1, None, None) , (16393, 10, None, "IID('{E14CE330-FB54-47C9-A917-4D1854365E86}')") , ], 1 , 1 , 4 , 0 , 1448 , (3, 0, None, None) , 0 , )),
	(( 'SpinFaces' , 'strName' , 'pMultiFaces' , 'pAxisStart' , 'pAxisEnd' , 
			 'ppVal' , ), 311, (311, (), [ (8, 1, None, None) , (8204, 1, None, None) , (8197, 1, None, None) , 
			 (8197, 1, None, None) , (16393, 10, None, "IID('{431767A5-5F84-411B-9BB4-E4B9EA14BBC4}')") , ], 1 , 1 , 4 , 0 , 1456 , (3, 0, None, None) , 0 , )),
	(( 'SweepFaces' , 'bstrName' , 'pMultiFaces' , 'pCurve' , 'pIOption' , 
			 'ppVal' , ), 312, (312, (), [ (8, 1, None, None) , (8204, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (9, 1, None, "IID('{5099BF4D-2B9E-405B-A041-3D4760AE1AA9}')") , (16393, 10, None, "IID('{FC825EA8-559A-4A73-9261-7EA500EC7CAB}')") , ], 1 , 1 , 4 , 0 , 1464 , (3, 0, None, None) , 0 , )),
	(( 'CreateThickenFaces' , 'strName' , 'pFaces' , 'dThicknessFront' , 'dThicknessBack' , 
			 'ppGEo' , ), 313, (313, (), [ (8, 1, None, None) , (8204, 1, None, None) , (5, 1, None, None) , 
			 (5, 1, None, None) , (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , ], 1 , 1 , 4 , 0 , 1472 , (3, 0, None, None) , 0 , )),
	(( 'CreateBooleanSolidGeometryMulti' , 'BooleanType' , 'strName' , 'pBaseGeometry' , 'pMultiToolGeometry' , 
			 'ppVal' , ), 314, (314, (), [ (3, 1, None, "IID('{49712086-5E35-40C5-88D9-DD1FC89D8732}')") , (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (8204, 1, None, None) , (16393, 10, None, "IID('{4F1C59D0-B6B4-43F8-8CBC-7253AB041F42}')") , ], 1 , 1 , 4 , 0 , 1480 , (3, 0, None, None) , 0 , )),
	(( 'FillHoleOption' , 'ppResult' , ), 315, (315, (), [ (16393, 10, None, "IID('{D8018357-9575-4F97-8419-1014B23B06C5}')") , ], 1 , 2 , 4 , 0 , 1488 , (3, 0, None, None) , 0 , )),
	(( 'FillHole' , 'pGeometry' , 'pFillOption' , 'ppVal' , ), 316, (316, (), [ 
			 (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{D8018357-9575-4F97-8419-1014B23B06C5}')") , (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 1 , 4 , 0 , 1496 , (3, 0, None, None) , 0 , )),
	(( 'Scale' , 'pGeometry' , 'pRefMarker' , 'dX' , 'dY' , 
			 'dZ' , 'ppVal' , ), 317, (317, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 1 , 4 , 0 , 1504 , (3, 0, None, None) , 0 , )),
	(( 'CreateUVSurfaceGeometry' , 'strName' , 'pSurface' , 'pFirstEdgeGroup' , 'pThirdEdgeGroup' , 
			 'bFillHoles' , 'ppUVSurface' , ), 318, (318, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (8200, 1, None, None) , (8200, 1, None, None) , (11, 1, None, None) , (16393, 10, None, "IID('{ED1BD483-9372-48BA-BBC2-AC349EB1C6F3}')") , ], 1 , 1 , 4 , 0 , 1512 , (3, 0, None, None) , 0 , )),
	(( 'CreateUVSurfaceGeometryWithFace' , 'strName' , 'pFace' , 'pFirstEdgeGroup' , 'pThirdEdgeGroup' , 
			 'bFillHoles' , 'ppUVSurface' , ), 319, (319, (), [ (8, 1, None, None) , (9, 1, None, "IID('{C5D7538F-B727-4D10-9D7D-D743D92ACAB4}')") , 
			 (8200, 1, None, None) , (8200, 1, None, None) , (11, 1, None, None) , (16393, 10, None, "IID('{ED1BD483-9372-48BA-BBC2-AC349EB1C6F3}')") , ], 1 , 1 , 4 , 0 , 1520 , (3, 0, None, None) , 0 , )),
	(( 'CreateBoxGeometryWithPointPoint' , 'strName' , 'pFirstPoint' , 'pSecondPoint' , 'ppVal' , 
			 ), 320, (320, (), [ (8, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , (16393, 10, None, "IID('{7B6155CC-0035-4449-9748-DFCE0956F5D9}')") , ], 1 , 1 , 4 , 0 , 1528 , (3, 0, None, None) , 0 , )),
	(( 'Active' , 'pVal' , ), 321, (321, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 1536 , (3, 0, None, None) , 0 , )),
	(( 'Active' , 'pVal' , ), 321, (321, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 1544 , (3, 0, None, None) , 0 , )),
	(( 'ImprintEdgeUVPatternPeriodicFaces' , 'pTargetEntity' , ), 322, (322, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 1 , 4 , 0 , 1552 , (3, 0, None, None) , 0 , )),
	(( 'MFTireImportOption' , 'ppResult' , ), 242, (242, (), [ (16393, 10, None, "IID('{E7F5FA95-8A22-45D7-AA32-2C4499D519A2}')") , ], 1 , 2 , 4 , 0 , 1560 , (3, 0, None, None) , 0 , )),
	(( 'ImportMFTireRoadShell' , 'bstrName' , 'bstrPath' , 'pIOption' , ), 243, (243, (), [ 
			 (8, 1, None, None) , (8, 1, None, None) , (9, 1, None, "IID('{E7F5FA95-8A22-45D7-AA32-2C4499D519A2}')") , ], 1 , 1 , 4 , 0 , 1568 , (3, 0, None, None) , 0 , )),
]

IBodyCollection_vtables_dispatch_ = 1
IBodyCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

ICam2DCurveSegmentOption_vtables_dispatch_ = 1
ICam2DCurveSegmentOption_vtables_ = [
	(( 'SetDepthDirectionVector' , 'x' , 'y' , 'z' , ), 101, (101, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'GetDepthDirectionVector' , 'pX' , 'pY' , 'pZ' , ), 102, (102, (), [ 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
]

ICamera_vtables_dispatch_ = 1
ICamera_vtables_ = [
]

ICameraCollection_vtables_dispatch_ = 1
ICameraCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{D8203265-F837-4B2B-BE98-881FB736D5DA}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

ICameraFollowing_vtables_dispatch_ = 1
ICameraFollowing_vtables_ = [
	(( 'ZoomEffect' , 'pVal' , ), 101, (101, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ZoomEffect' , 'pVal' , ), 101, (101, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'ReferenceMarker' , 'ppVal' , ), 102, (102, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'ReferenceMarker' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Offset' , 'pVal' , ), 103, (103, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'Offset' , 'pVal' , ), 103, (103, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'FollowingType' , 'pVal' , ), 104, (104, (), [ (3, 1, None, "IID('{2EDD0EC3-E7E0-42DF-8516-00E1D0FF7248}')") , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'FollowingType' , 'pVal' , ), 104, (104, (), [ (16387, 10, None, "IID('{2EDD0EC3-E7E0-42DF-8516-00E1D0FF7248}')") , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UpDirection' , 'pVal' , ), 105, (105, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UpDirection' , 'pVal' , ), 105, (105, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'NormalDirection' , 'pVal' , ), 106, (106, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'NormalDirection' , 'pVal' , ), 106, (106, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'GetFromView' , ), 107, (107, (), [ ], 1 , 1 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Use' , 'pVal' , ), 108, (108, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Use' , 'pVal' , ), 108, (108, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'StartFrame' , 'pVal' , ), 109, (109, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'StartFrame' , 'pVal' , ), 109, (109, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'EndFrame' , 'pVal' , ), 110, (110, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'EndFrame' , 'pVal' , ), 110, (110, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
]

ICameraMoving_vtables_dispatch_ = 1
ICameraMoving_vtables_ = [
	(( 'Use' , 'pVal' , ), 101, (101, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Use' , 'pVal' , ), 101, (101, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'StartFrame' , 'pVal' , ), 102, (102, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'StartFrame' , 'pVal' , ), 102, (102, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'EndFrame' , 'pVal' , ), 103, (103, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'EndFrame' , 'pVal' , ), 103, (103, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'CameraMarker' , 'ppVal' , ), 104, (104, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'CameraMarker' , 'ppVal' , ), 104, (104, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'TargetPostionbyMarker' , 'ppVal' , ), 105, (105, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'TargetPostionbyMarker' , 'ppVal' , ), 105, (105, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'TargetPostionbyPoint' , 'ppVal' , ), 106, (106, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'ZoomEffect' , 'pVal' , ), 107, (107, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'ZoomEffect' , 'pVal' , ), 107, (107, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
]

ICameraMovingCollection_vtables_dispatch_ = 1
ICameraMovingCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{9B56E0F6-2127-4DE3-BE75-D1F6979D8F5D}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

ICameraMulti_vtables_dispatch_ = 1
ICameraMulti_vtables_ = [
	(( 'CameraMovingCollection' , 'pVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{98902028-58CE-4E5F-9E74-D6AEB21B63C8}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'CreateMovingCamera' , 'pVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{9B56E0F6-2127-4DE3-BE75-D1F6979D8F5D}')") , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'DeleteMovingCamerabyInterface' , 'pVal' , ), 103, (103, (), [ (9, 1, None, "IID('{9B56E0F6-2127-4DE3-BE75-D1F6979D8F5D}')") , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'DeleteMovingCamerabyIndex' , 'Index' , ), 104, (104, (), [ (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'CameraCollection' , 'pVal' , ), 105, (105, (), [ (16393, 10, None, "IID('{E5B195C5-4D78-4441-884C-AF54C1E10F1B}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'Add' , 'pVal' , ), 106, (106, (), [ (9, 1, None, "IID('{D8203265-F837-4B2B-BE98-881FB736D5DA}')") , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'Delete' , 'pVal' , ), 107, (107, (), [ (9, 1, None, "IID('{D8203265-F837-4B2B-BE98-881FB736D5DA}')") , ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'ImportCameraInfo' , 'strFileName' , ), 108, (108, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'ExportCameraInfo' , 'strFileName' , ), 109, (109, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
]

ICameraRiding_vtables_dispatch_ = 1
ICameraRiding_vtables_ = [
	(( 'ZoomEffect' , 'pVal' , ), 101, (101, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ZoomEffect' , 'pVal' , ), 101, (101, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'ReferenceMarker' , 'ppVal' , ), 102, (102, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'ReferenceMarker' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'AxisType' , 'AxisType' , ), 103, (103, (), [ (3, 1, None, "IID('{30E13C29-97B5-4A36-99AF-09D3F2FAD89C}')") , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'AxisType' , 'AxisType' , ), 103, (103, (), [ (16387, 10, None, "IID('{30E13C29-97B5-4A36-99AF-09D3F2FAD89C}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'Offset' , 'pVal' , ), 104, (104, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'Offset' , 'pVal' , ), 104, (104, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'RidingType' , 'pVal' , ), 105, (105, (), [ (3, 1, None, "IID('{868B9AB5-B1DE-4017-B431-5667BA289507}')") , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'RidingType' , 'pVal' , ), 105, (105, (), [ (16387, 10, None, "IID('{868B9AB5-B1DE-4017-B431-5667BA289507}')") , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UpDirection' , 'pVal' , ), 106, (106, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'UpDirection' , 'pVal' , ), 106, (106, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'NormalDirection' , 'pVal' , ), 107, (107, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'NormalDirection' , 'pVal' , ), 107, (107, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'GetFromView' , ), 108, (108, (), [ ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'Use' , 'pVal' , ), 109, (109, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Use' , 'pVal' , ), 109, (109, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'StartFrame' , 'pVal' , ), 110, (110, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'StartFrame' , 'pVal' , ), 110, (110, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'EndFrame' , 'pVal' , ), 111, (111, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'EndFrame' , 'pVal' , ), 111, (111, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
]

ICameraSetting_vtables_dispatch_ = 1
ICameraSetting_vtables_ = [
	(( 'StandardCamera' , 'pVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{A9BF34D4-2D0F-42BA-8BD7-F434174F8122}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'FollowingCamera' , 'pVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{5F14103C-4413-473C-AA57-EE7E7CEB49F1}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'RidingCamera' , 'pVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{29D57E5C-B425-41A4-8091-39435FC986EB}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'MultiCamera' , 'pVal' , ), 54, (54, (), [ (16393, 10, None, "IID('{5D98AE76-1263-4692-A393-F11F2C6547E1}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'SelectCamera' , 'pVal' , 'cameraType' , ), 55, (55, (), [ (9, 1, None, "IID('{D8203265-F837-4B2B-BE98-881FB736D5DA}')") , 
			 (3, 1, None, "IID('{01A6AD25-1060-405E-882D-B90A69FC81D3}')") , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'MovingCamera' , 'pVal' , ), 56, (56, (), [ (16393, 10, None, "IID('{9B56E0F6-2127-4DE3-BE75-D1F6979D8F5D}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
]

ICameraStandard_vtables_dispatch_ = 1
ICameraStandard_vtables_ = [
	(( 'ZoomEffect' , 'pVal' , ), 101, (101, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ZoomEffect' , 'pVal' , ), 101, (101, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Use' , 'pVal' , ), 102, (102, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Use' , 'pVal' , ), 102, (102, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'StartFrame' , 'pVal' , ), 103, (103, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'StartFrame' , 'pVal' , ), 103, (103, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'EndFrame' , 'pVal' , ), 104, (104, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'EndFrame' , 'pVal' , ), 104, (104, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
]

ICampbellDiagram_vtables_dispatch_ = 1
ICampbellDiagram_vtables_ = [
	(( 'InputData' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{9AA65539-9E1F-4F0D-96BA-EA01E83BEDD8}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Signal' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{A9259987-929F-434E-97EA-0DEE7B57D88C}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Plot' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{22FB7957-FCFB-4FCE-8E40-81C1B7829C79}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseRecommendTimeZone' , 'pVal' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseRecommendTimeZone' , 'pVal' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'StartFrame' , 'pVal' , ), 55, (55, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'StartFrame' , 'pVal' , ), 55, (55, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'EndFrame' , 'pVal' , ), 56, (56, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'EndFrame' , 'pVal' , ), 56, (56, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseRecommendFrameSettings' , 'pVal' , ), 57, (57, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UseRecommendFrameSettings' , 'pVal' , ), 57, (57, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'FrameNumber' , 'pVal' , ), 58, (58, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'FrameNumber' , 'pVal' , ), 58, (58, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Overlap' , 'pVal' , ), 59, (59, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'FrameLength' , 'pVal' , ), 60, (60, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'ResidualNumber' , 'pVal' , ), 61, (61, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'FrameSizeType' , 'pVal' , ), 112, (112, (), [ (3, 1, None, "IID('{AFA05818-29EC-42F6-921A-01770C2332D5}')") , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'FrameSizeType' , 'pVal' , ), 112, (112, (), [ (16387, 10, None, "IID('{AFA05818-29EC-42F6-921A-01770C2332D5}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'RPMComputeType' , 'pVal' , ), 113, (113, (), [ (3, 1, None, "IID('{88E20AC7-D248-43B6-917C-DFD45F74C724}')") , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'RPMComputeType' , 'pVal' , ), 113, (113, (), [ (16387, 10, None, "IID('{88E20AC7-D248-43B6-917C-DFD45F74C724}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'FFTOffsetType' , 'pVal' , ), 114, (114, (), [ (3, 1, None, "IID('{AE23F562-3A06-4ECB-9612-EC7876F4BE1D}')") , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'FFTOffsetType' , 'pVal' , ), 114, (114, (), [ (16387, 10, None, "IID('{AE23F562-3A06-4ECB-9612-EC7876F4BE1D}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'WindowType' , 'pVal' , ), 115, (115, (), [ (3, 1, None, "IID('{36FE8E97-0EB8-4223-B25D-8600F4425BA6}')") , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'WindowType' , 'pVal' , ), 115, (115, (), [ (16387, 10, None, "IID('{36FE8E97-0EB8-4223-B25D-8600F4425BA6}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'MagnitudeType' , 'pVal' , ), 116, (116, (), [ (3, 1, None, "IID('{EADDDC08-9115-4C11-916C-4A4675FDDE92}')") , ], 1 , 4 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'MagnitudeType' , 'pVal' , ), 116, (116, (), [ (16387, 10, None, "IID('{EADDDC08-9115-4C11-916C-4A4675FDDE92}')") , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'UpdateSignalInformation' , ), 67, (67, (), [ ], 1 , 1 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'UpdateFrameSettings' , ), 68, (68, (), [ ], 1 , 1 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'Calculation' , ), 69, (69, (), [ ], 1 , 1 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'Clear' , ), 70, (70, (), [ ], 1 , 1 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'DeltaTime' , 'pVal' , ), 71, (71, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'DeltaTime' , 'pVal' , ), 71, (71, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'DeltaFrequency' , 'pVal' , ), 72, (72, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
]

ICampbellDiagramInput_vtables_dispatch_ = 1
ICampbellDiagramInput_vtables_ = [
	(( 'UseInputFile' , 'pVal' , ), 101, (101, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseInputFile' , 'pVal' , ), 101, (101, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'InputFile' , 'pVal' , ), 102, (102, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'InputFile' , 'pVal' , ), 102, (102, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'TimePlotIndex' , 'pVal' , ), 103, (103, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'TimePlotIndex' , 'pVal' , ), 103, (103, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'TachometerPlotIndex' , 'pVal' , ), 104, (104, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'TachometerPlotIndex' , 'pVal' , ), 104, (104, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'SignalPlotIndex' , 'pVal' , ), 105, (105, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'SignalPlotIndex' , 'pVal' , ), 105, (105, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'TimePlotData' , 'pVal' , ), 106, (106, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'TimePlotData' , 'pVal' , ), 106, (106, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'TachometerPlotData' , 'pVal' , ), 107, (107, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'TachometerPlotData' , 'pVal' , ), 107, (107, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'SignalPlotData' , 'pVal' , ), 108, (108, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'SignalPlotData' , 'pVal' , ), 108, (108, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'TachometerType' , 'pVal' , ), 109, (109, (), [ (3, 1, None, "IID('{61D6C043-7106-47A4-94EB-45D25146AD9D}')") , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'TachometerType' , 'pVal' , ), 109, (109, (), [ (16387, 10, None, "IID('{61D6C043-7106-47A4-94EB-45D25146AD9D}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'TachometerFactor' , 'pVal' , ), 110, (110, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'TachometerFactor' , 'pVal' , ), 110, (110, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'UseInterpolation' , 'pVal' , ), 111, (111, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'UseInterpolation' , 'pVal' , ), 111, (111, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'InterpolationType' , 'pVal' , ), 112, (112, (), [ (3, 1, None, "IID('{0568DDC2-4746-4EB5-A12B-91972DF52E55}')") , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'InterpolationType' , 'pVal' , ), 112, (112, (), [ (16387, 10, None, "IID('{0568DDC2-4746-4EB5-A12B-91972DF52E55}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'dT' , 'pVal' , ), 113, (113, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'dT' , 'pVal' , ), 113, (113, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
]

ICampbellDiagramPlot_vtables_dispatch_ = 1
ICampbellDiagramPlot_vtables_ = [
	(( 'PlotType' , 'pVal' , ), 101, (101, (), [ (3, 1, None, "IID('{8E14EB71-6FCF-4A62-B549-CE623F84927C}')") , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'PlotType' , 'pVal' , ), 101, (101, (), [ (16387, 10, None, "IID('{8E14EB71-6FCF-4A62-B549-CE623F84927C}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'GraphOptionType' , 'pVal' , ), 102, (102, (), [ (3, 1, None, "IID('{D6D17468-2B12-4B90-8B99-21687DD48ECB}')") , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'GraphOptionType' , 'pVal' , ), 102, (102, (), [ (16387, 10, None, "IID('{D6D17468-2B12-4B90-8B99-21687DD48ECB}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseSwapAxis' , 'pVal' , ), 103, (103, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UseSwapAxis' , 'pVal' , ), 103, (103, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'DrawOrderLine' , 'pVal' , ), 104, (104, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'DrawOrderLine' , 'pVal' , ), 104, (104, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'OrderLineColor' , 'pVal' , ), 105, (105, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'OrderLineColor' , 'pVal' , ), 105, (105, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'OrderLineBrightness' , 'pVal' , ), 106, (106, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'OrderLineBrightness' , 'pVal' , ), 106, (106, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'OrderLineStyleType' , 'pVal' , ), 107, (107, (), [ (3, 1, None, "IID('{F87507C9-472F-466C-AD59-4F1FA66E45D7}')") , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'OrderLineStyleType' , 'pVal' , ), 107, (107, (), [ (16387, 10, None, "IID('{F87507C9-472F-466C-AD59-4F1FA66E45D7}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'OrderLineWeightType' , 'pVal' , ), 108, (108, (), [ (3, 1, None, "IID('{66495385-F02E-466F-9B49-1F60E0E118C6}')") , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'OrderLineWeightType' , 'pVal' , ), 108, (108, (), [ (16387, 10, None, "IID('{66495385-F02E-466F-9B49-1F60E0E118C6}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'MinimumOrder' , 'pVal' , ), 109, (109, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'MinimumOrder' , 'pVal' , ), 109, (109, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'MaximumOrder' , 'pVal' , ), 110, (110, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'MaximumOrder' , 'pVal' , ), 110, (110, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'OrderLineGap' , 'pVal' , ), 111, (111, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'OrderLineGap' , 'pVal' , ), 111, (111, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'Resolution' , 'pVal' , ), 112, (112, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'Resolution' , 'pVal' , ), 112, (112, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'DrawPlot' , ), 113, (113, (), [ ], 1 , 1 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'ClosePlot' , ), 114, (114, (), [ ], 1 , 1 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
]

ICampbellDiagramSignal_vtables_dispatch_ = 1
ICampbellDiagramSignal_vtables_ = [
	(( 'StartTime' , 'pVal' , ), 101, (101, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'EndTime' , 'pVal' , ), 102, (102, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'MaxFrequency' , 'pVal' , ), 103, (103, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'StartRPM' , 'pVal' , ), 104, (104, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'EndRPM' , 'pVal' , ), 105, (105, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'MaxOrder' , 'pVal' , ), 106, (106, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'SamplingTime' , 'pVal' , ), 107, (107, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'GetSignalXData' , 'Type' , 'ppSafeArray' , ), 108, (108, (), [ (3, 1, None, "IID('{B133E2A6-2C00-48AF-B3C1-BA65B543208A}')") , 
			 (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'GetSignalYData' , 'Type' , 'ppSafeArray' , ), 109, (109, (), [ (3, 1, None, "IID('{B133E2A6-2C00-48AF-B3C1-BA65B543208A}')") , 
			 (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'DrawSignalPlot' , 'Type' , ), 110, (110, (), [ (3, 1, None, "IID('{B133E2A6-2C00-48AF-B3C1-BA65B543208A}')") , ], 1 , 1 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
]

IChamferEdgeInfo_vtables_dispatch_ = 1
IChamferEdgeInfo_vtables_ = [
	(( 'FirstRange' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'SecondRange' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'EdgeCollection' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{C760B0C7-18A0-463E-BC13-07F6B3931B32}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
]

IChamferEdgeInfoCollection_vtables_dispatch_ = 1
IChamferEdgeInfoCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{5503036B-EDA8-4408-B446-1931B03AA62E}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

ICoefficient_vtables_dispatch_ = 1
ICoefficient_vtables_ = [
	(( 'Coefficient' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseSpline' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseSpline' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Spline' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{E76144D2-715D-41B4-A432-7B6C7F713FC2}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Spline' , 'ppVal' , ), 53, (53, (), [ (9, 1, None, "IID('{E76144D2-715D-41B4-A432-7B6C7F713FC2}')") , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'ExponentValue' , 'ppVal' , ), 54, (54, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseExponentValue' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseExponentValue' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
]

ICommonAnalysisProperty_vtables_dispatch_ = 1
ICommonAnalysisProperty_vtables_ = [
	(( 'OutputStartTime' , 'pVal' , ), 51, (51, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'OutputStartTime' , 'pVal' , ), 51, (51, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseOutputStartTime' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseOutputStartTime' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'OutputEndTime' , 'pVal' , ), 53, (53, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'OutputEndTime' , 'pVal' , ), 53, (53, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseOutputEndTime' , 'pVal' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseOutputEndTime' , 'pVal' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforRMD' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforRMD' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforRAD' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforRAD' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforRPLT' , 'pVal' , ), 57, (57, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforRPLT' , 'pVal' , ), 57, (57, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforOutput' , 'pVal' , ), 58, (58, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforOutput' , 'pVal' , ), 58, (58, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforRequest' , 'pVal' , ), 59, (59, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforRequest' , 'pVal' , ), 59, (59, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforMessage' , 'pVal' , ), 60, (60, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforMessage' , 'pVal' , ), 60, (60, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforDesignParameter' , 'pVal' , ), 61, (61, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforDesignParameter' , 'pVal' , ), 61, (61, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforPerformanceIndex' , 'pVal' , ), 62, (62, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforPerformanceIndex' , 'pVal' , ), 62, (62, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforSolverGeneratedAnimation' , 'pVal' , ), 63, (63, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforSolverGeneratedAnimation' , 'pVal' , ), 63, (63, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'UsePrePNetFunction' , 'pVal' , ), 64, (64, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'UsePrePNetFunction' , 'pVal' , ), 64, (64, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'PrePNetProject' , 'strName' , ), 65, (65, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'PrePNetProject' , 'strName' , ), 65, (65, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'PrePNetFunction' , 'strName' , ), 66, (66, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'PrePNetFunction' , 'strName' , ), 66, (66, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'UsePostPNetFunction' , 'pVal' , ), 67, (67, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'UsePostPNetFunction' , 'pVal' , ), 67, (67, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'PostPNetProject' , 'strName' , ), 68, (68, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'PostPNetProject' , 'strName' , ), 68, (68, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'PostPNetFunction' , 'strName' , ), 69, (69, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'PostPNetFunction' , 'strName' , ), 69, (69, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'OutputStartTimeIDouble' , 'ppVal' , ), 70, (70, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'OutputEndTimeIDouble' , 'ppVal' , ), 71, (71, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'UsePrePNetFunctionGeneral' , 'pVal' , ), 72, (72, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'UsePrePNetFunctionGeneral' , 'pVal' , ), 72, (72, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'PrePNetProjectGeneral' , 'strName' , ), 73, (73, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'PrePNetProjectGeneral' , 'strName' , ), 73, (73, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'PrePNetFunctionGeneral' , 'strName' , ), 74, (74, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'PrePNetFunctionGeneral' , 'strName' , ), 74, (74, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'UsePostPNetFunctionGeneral' , 'pVal' , ), 75, (75, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'UsePostPNetFunctionGeneral' , 'pVal' , ), 75, (75, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'PostPNetProjectGeneral' , 'strName' , ), 76, (76, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'PostPNetProjectGeneral' , 'strName' , ), 76, (76, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
	(( 'PostPNetFunctionGeneral' , 'strName' , ), 77, (77, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 456 , (3, 0, None, None) , 0 , )),
	(( 'PostPNetFunctionGeneral' , 'strName' , ), 77, (77, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 464 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetMode' , 'mode' , ), 78, (78, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 472 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetMode' , 'mode' , ), 78, (78, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 480 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforMultiOutput' , 'pVal' , ), 79, (79, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 488 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforMultiOutput' , 'pVal' , ), 79, (79, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 496 , (3, 0, None, None) , 0 , )),
	(( 'AutomaticChangeofProcessNetProject' , 'pVal' , ), 80, (80, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 504 , (3, 0, None, None) , 0 , )),
	(( 'AutomaticChangeofProcessNetProject' , 'pVal' , ), 80, (80, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 512 , (3, 0, None, None) , 0 , )),
	(( 'UseGlobalReferenceFrameforRPLT' , 'pVal' , ), 81, (81, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 520 , (3, 0, None, None) , 0 , )),
	(( 'UseGlobalReferenceFrameforRPLT' , 'pVal' , ), 81, (81, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 528 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforMCK' , 'pVal' , ), 82, (82, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 536 , (3, 0, None, None) , 0 , )),
	(( 'SimulationResultFileforMCK' , 'pVal' , ), 82, (82, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 544 , (3, 0, None, None) , 0 , )),
	(( 'UsePrePNetScriptPython' , 'pVal' , ), 83, (83, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 552 , (3, 0, None, None) , 0 , )),
	(( 'UsePrePNetScriptPython' , 'pVal' , ), 83, (83, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 560 , (3, 0, None, None) , 0 , )),
	(( 'PrePNetScriptPython' , 'strName' , ), 84, (84, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 568 , (3, 0, None, None) , 0 , )),
	(( 'PrePNetScriptPython' , 'strName' , ), 84, (84, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 576 , (3, 0, None, None) , 0 , )),
	(( 'UsePostPNetScriptPython' , 'pVal' , ), 85, (85, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 584 , (3, 0, None, None) , 0 , )),
	(( 'UsePostPNetScriptPython' , 'pVal' , ), 85, (85, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 592 , (3, 0, None, None) , 0 , )),
	(( 'PostPNetScriptPython' , 'strName' , ), 86, (86, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 600 , (3, 0, None, None) , 0 , )),
	(( 'PostPNetScriptPython' , 'strName' , ), 86, (86, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 608 , (3, 0, None, None) , 0 , )),
	(( 'ExternalIDEPath' , 'strName' , ), 87, (87, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 616 , (3, 0, None, None) , 0 , )),
	(( 'ExternalIDEPath' , 'strName' , ), 87, (87, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 624 , (3, 0, None, None) , 0 , )),
	(( 'PythonPath' , 'strName' , ), 88, (88, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 632 , (3, 0, None, None) , 0 , )),
	(( 'PythonPath' , 'strName' , ), 88, (88, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 640 , (3, 0, None, None) , 0 , )),
]

IConnectorAttribute_vtables_dispatch_ = 1
IConnectorAttribute_vtables_ = [
	(( 'ForceDisplay' , 'pVal' , ), 201, (201, (), [ (3, 1, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}')") , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplay' , 'pVal' , ), 201, (201, (), [ (16387, 10, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'BaseMarker' , 'ppVal' , ), 202, (202, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'BaseMarker' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'ActionMarker' , 'ppVal' , ), 203, (203, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'ActionMarker' , 'ppVal' , ), 203, (203, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'LayerName' , 'Name' , ), 204, (204, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'CopyBaseToAction' , 'Type' , ), 205, (205, (), [ (3, 1, None, "IID('{2F145D21-8E9A-44D4-9BAC-1EFBCB32570B}')") , ], 1 , 1 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'CopyActionToBase' , 'Type' , ), 206, (206, (), [ (3, 1, None, "IID('{2F145D21-8E9A-44D4-9BAC-1EFBCB32570B}')") , ], 1 , 1 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayColor' , 'pVal' , ), 207, (207, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayColor' , 'pVal' , ), 207, (207, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'TorqueDisplayColor' , 'pVal' , ), 208, (208, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'TorqueDisplayColor' , 'pVal' , ), 208, (208, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayUse' , 'Val' , ), 209, (209, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayUse' , 'Val' , ), 209, (209, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
]

IConstraintCurveSegmentOption_vtables_dispatch_ = 1
IConstraintCurveSegmentOption_vtables_ = [
	(( 'Segment' , 'pVal' , ), 51, (51, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Segment' , 'pVal' , ), 51, (51, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Interpolation' , 'pVal' , ), 52, (52, (), [ (3, 1, None, "IID('{2AF09FDD-94B3-42A3-B3A7-69EEC4AAFB7F}')") , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Interpolation' , 'pVal' , ), 52, (52, (), [ (16387, 10, None, "IID('{2AF09FDD-94B3-42A3-B3A7-69EEC4AAFB7F}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseTotalSegment' , 'pVal' , ), 53, (53, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UseTotalSegment' , 'pVal' , ), 53, (53, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
]

IConstraintUVPatchOption_vtables_dispatch_ = 1
IConstraintUVPatchOption_vtables_ = [
	(( 'NumberOfUDirection' , 'pVal' , ), 51, (51, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfUDirection' , 'pVal' , ), 51, (51, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfVDirection' , 'pVal' , ), 52, (52, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfVDirection' , 'pVal' , ), 52, (52, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
]

IContact_vtables_dispatch_ = 1
IContact_vtables_ = [
]

IContactAttribute_vtables_dispatch_ = 1
IContactAttribute_vtables_ = [
	(( 'ForceDisplay' , 'pVal' , ), 201, (201, (), [ (3, 1, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}')") , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplay' , 'pVal' , ), 201, (201, (), [ (16387, 10, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'BaseEntity' , 'ppVal' , ), 202, (202, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'BaseEntity' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'ActionEntity' , 'ppVal' , ), 203, (203, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'ActionEntity' , 'ppVal' , ), 203, (203, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'BufferRadiusFactor' , 'ppVal' , ), 204, (204, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'MaxStepSizeFactor' , 'ppVal' , ), 205, (205, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'ContactProperty' , 'ppVal' , ), 206, (206, (), [ (16393, 10, None, "IID('{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'LayerName' , 'Name' , ), 207, (207, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayColor' , 'pVal' , ), 208, (208, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayColor' , 'pVal' , ), 208, (208, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'TorqueDisplayColor' , 'pVal' , ), 209, (209, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'TorqueDisplayColor' , 'pVal' , ), 209, (209, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'BaseEntityIGeneric' , 'ppVal' , ), 210, (210, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'BaseEntityIGeneric' , 'ppVal' , ), 210, (210, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'ActionEntityIGeneric' , 'ppVal' , ), 211, (211, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'ActionEntityIGeneric' , 'ppVal' , ), 211, (211, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayUse' , 'Val' , ), 212, (212, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayUse' , 'Val' , ), 212, (212, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
]

IContactCam2D_vtables_dispatch_ = 1
IContactCam2D_vtables_ = [
	(( 'BaseCurveDepth' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 253, (253, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 253, (253, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'BaseCurveSegmentOption' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{8C139E48-EC46-477D-9754-D1449E4AF801}')") , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
]

IContactCamLine2D_vtables_dispatch_ = 1
IContactCamLine2D_vtables_ = [
	(( 'BaseCurveDepth' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 253, (253, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 253, (253, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'BaseCurveSegmentOption' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{8C139E48-EC46-477D-9754-D1449E4AF801}')") , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
]

IContactCircleInCircle_vtables_dispatch_ = 1
IContactCircleInCircle_vtables_ = [
	(( 'BaseCircleDepth' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
]

IContactCircleToCircle_vtables_dispatch_ = 1
IContactCircleToCircle_vtables_ = [
	(( 'BaseCircleDepth' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
]

IContactCircleToCurve_vtables_dispatch_ = 1
IContactCircleToCurve_vtables_ = [
	(( 'BaseCurveDepth' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 253, (253, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 253, (253, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'BaseCurveSegmentOption' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{6CA887BC-2FC1-4E9C-AD2D-EEF830EA8FDF}')") , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
]

IContactCollection_vtables_dispatch_ = 1
IContactCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{91AB2D2E-7A8B-42CE-87AC-9C4EA40EDEB0}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IContactConeInCone_vtables_dispatch_ = 1
IContactConeInCone_vtables_ = [
	(( 'OpenStartFace' , 'pVal' , ), 251, (251, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'OpenStartFace' , 'pVal' , ), 251, (251, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'OpenEndFace' , 'pVal' , ), 252, (252, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'OpenEndFace' , 'pVal' , ), 252, (252, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
]

IContactConeToCone_vtables_dispatch_ = 1
IContactConeToCone_vtables_ = [
]

IContactConeToCylinder_vtables_dispatch_ = 1
IContactConeToCylinder_vtables_ = [
]

IContactCurveSegmentOption_vtables_dispatch_ = 1
IContactCurveSegmentOption_vtables_ = [
	(( 'Segment' , 'pVal' , ), 51, (51, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Segment' , 'pVal' , ), 51, (51, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 53, (53, (), [ (3, 1, None, "IID('{E6F67E73-6EDC-47B1-9B2D-4A03967F1900}')") , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 53, (53, (), [ (16387, 10, None, "IID('{E6F67E73-6EDC-47B1-9B2D-4A03967F1900}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'SetDepthDirectionVector' , 'x' , 'y' , 'z' , ), 54, (54, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'GetDepthDirectionVector' , 'pX' , 'pY' , 'pZ' , ), 55, (55, (), [ 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseTotalSegment' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseTotalSegment' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'MaxPenetration' , 'ppVal' , ), 57, (57, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
]

IContactCurveToCurve_vtables_dispatch_ = 1
IContactCurveToCurve_vtables_ = [
	(( 'AdvancedDetectionType' , 'pVal' , ), 252, (252, (), [ (3, 1, None, "IID('{6F09699B-4D33-4C27-9A81-B42D2C5676D9}')") , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'AdvancedDetectionType' , 'pVal' , ), 252, (252, (), [ (16387, 10, None, "IID('{6F09699B-4D33-4C27-9A81-B42D2C5676D9}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedDetection' , 'pVal' , ), 253, (253, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedDetection' , 'pVal' , ), 253, (253, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'Use2P5DContact' , 'pVal' , ), 254, (254, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'Use2P5DContact' , 'pVal' , ), 254, (254, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'ActionUpDirection' , 'pVal' , ), 255, (255, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'ActionUpDirection' , 'pVal' , ), 255, (255, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 256, (256, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 256, (256, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'BaseCurveDepth' , 'ppVal' , ), 257, (257, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'BaseCurveSegmentOption' , 'ppVal' , ), 258, (258, (), [ (16393, 10, None, "IID('{6CA887BC-2FC1-4E9C-AD2D-EEF830EA8FDF}')") , ], 1 , 2 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'ActionCurveSegmentOption' , 'ppVal' , ), 259, (259, (), [ (16393, 10, None, "IID('{6CA887BC-2FC1-4E9C-AD2D-EEF830EA8FDF}')") , ], 1 , 2 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
]

IContactCylinderInCylinder_vtables_dispatch_ = 1
IContactCylinderInCylinder_vtables_ = [
	(( 'OpenStartFace' , 'pVal' , ), 252, (252, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'OpenStartFace' , 'pVal' , ), 252, (252, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'OpenEndFace' , 'pVal' , ), 253, (253, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'OpenEndFace' , 'pVal' , ), 253, (253, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
]

IContactCylinderToBox_vtables_dispatch_ = 1
IContactCylinderToBox_vtables_ = [
]

IContactCylinderToCylinder_vtables_dispatch_ = 1
IContactCylinderToCylinder_vtables_ = [
]

IContactCylinderToSurface_vtables_dispatch_ = 1
IContactCylinderToSurface_vtables_ = [
	(( 'BaseUpDirection' , 'pVal' , ), 252, (252, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 252, (252, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'BasePatchOption' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{ED5F7902-56FD-482D-AEF2-D898A1EBFF1B}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
]

IContactExtendedSurfaceToSurface_vtables_dispatch_ = 1
IContactExtendedSurfaceToSurface_vtables_ = [
	(( 'AdvancedDetectionType' , 'pVal' , ), 252, (252, (), [ (3, 1, None, "IID('{6F09699B-4D33-4C27-9A81-B42D2C5676D9}')") , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'AdvancedDetectionType' , 'pVal' , ), 252, (252, (), [ (16387, 10, None, "IID('{6F09699B-4D33-4C27-9A81-B42D2C5676D9}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedDetection' , 'pVal' , ), 253, (253, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedDetection' , 'pVal' , ), 253, (253, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'Use2P5DContact' , 'pVal' , ), 254, (254, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'Use2P5DContact' , 'pVal' , ), 254, (254, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'BasePatchOption' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{ED5F7902-56FD-482D-AEF2-D898A1EBFF1B}')") , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'ActionPatchOption' , 'ppVal' , ), 256, (256, (), [ (16393, 10, None, "IID('{ED5F7902-56FD-482D-AEF2-D898A1EBFF1B}')") , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'ActionUpDirection' , 'pVal' , ), 257, (257, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'ActionUpDirection' , 'pVal' , ), 257, (257, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 258, (258, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 258, (258, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
]

IContactExtendedSurfaceToSurfacePatchOption_vtables_dispatch_ = 1
IContactExtendedSurfaceToSurfacePatchOption_vtables_ = [
	(( 'SurfaceType' , 'pVal' , ), 51, (51, (), [ (16387, 10, None, "IID('{B6A0996C-130F-4182-8DC9-37F0F693A4C2}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'SurfaceType' , 'pVal' , ), 51, (51, (), [ (3, 1, None, "IID('{B6A0996C-130F-4182-8DC9-37F0F693A4C2}')") , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'MaxPenetration' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UsePlaneToleranceFactor' , 'pVal' , ), 53, (53, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UsePlaneToleranceFactor' , 'pVal' , ), 53, (53, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'PlaneToleranceFactor' , 'ppVal' , ), 54, (54, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'MinimumPlaneTolerance' , 'pVal' , ), 55, (55, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'MinimumPlaneTolerance' , 'pVal' , ), 55, (55, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UseDividedCubicCellNumber' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseDividedCubicCellNumber' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'GetDividedCubicCellNumber' , 'x' , 'y' , 'z' , ), 57, (57, (), [ 
			 (16387, 2, None, None) , (16387, 2, None, None) , (16387, 2, None, None) , ], 1 , 1 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'SetDividedCubicCellNumber' , 'x' , 'y' , 'z' , ), 58, (58, (), [ 
			 (3, 1, None, None) , (3, 1, None, None) , (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
]

IContactFriction_vtables_dispatch_ = 1
IContactFriction_vtables_ = [
	(( 'ContactFrictionType' , 'ContactFrictionType' , ), 51, (51, (), [ (3, 1, None, "IID('{D0BC9C52-6D99-4CC5-9124-E1520C347D7A}')") , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ContactFrictionType' , 'ContactFrictionType' , ), 51, (51, (), [ (16387, 10, None, "IID('{D0BC9C52-6D99-4CC5-9124-E1520C347D7A}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Coefficient' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Spline' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{E76144D2-715D-41B4-A432-7B6C7F713FC2}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Spline' , 'ppVal' , ), 53, (53, (), [ (9, 1, None, "IID('{E76144D2-715D-41B4-A432-7B6C7F713FC2}')") , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'StaticThresholdVelocity' , 'ppVal' , ), 54, (54, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'DynamicThresholdVelocity' , 'ppVal' , ), 55, (55, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'StaticCoefficient' , 'ppVal' , ), 56, (56, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'MaximumForce' , 'ppVal' , ), 57, (57, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseMaximumForce' , 'pVal' , ), 58, (58, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UseMaximumForce' , 'pVal' , ), 58, (58, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxStictionDeformation' , 'pVal' , ), 59, (59, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxStictionDeformation' , 'pVal' , ), 59, (59, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'MaxStictionDeformation' , 'ppVal' , ), 60, (60, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
]

IContactGeo_vtables_dispatch_ = 1
IContactGeo_vtables_ = [
	(( 'ContactPropertyAdditional' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{C3560239-62ED-43FF-A94D-71801A2886E4}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'BasePatchOption' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'ActionPatchOption' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'ActionUpDirection' , 'pVal' , ), 254, (254, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'ActionUpDirection' , 'pVal' , ), 254, (254, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 255, (255, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 255, (255, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'ContactPoints' , 'pVal' , ), 256, (256, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'ContactPoints' , 'pVal' , ), 256, (256, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'UseContactOutputFile' , 'pVal' , ), 257, (257, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'UseContactOutputFile' , 'pVal' , ), 257, (257, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'OutputMarker' , 'ppVal' , ), 258, (258, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'OutputMarker' , 'ppVal' , ), 258, (258, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
]

IContactGeoCurve_vtables_dispatch_ = 1
IContactGeoCurve_vtables_ = [
	(( 'ContactPropertyAdditional' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{C3560239-62ED-43FF-A94D-71801A2886E4}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'BaseCurveSegmentOption' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2D0EBBBE-395D-465E-84F4-30290538BA38}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'ActionCurveSegmentOption' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2D0EBBBE-395D-465E-84F4-30290538BA38}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'ActionUpDirection' , 'pVal' , ), 254, (254, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'ActionUpDirection' , 'pVal' , ), 254, (254, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 255, (255, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 255, (255, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'ContactPoints' , 'pVal' , ), 256, (256, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'ContactPoints' , 'pVal' , ), 256, (256, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'UseContactOutputFile' , 'pVal' , ), 257, (257, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'UseContactOutputFile' , 'pVal' , ), 257, (257, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'OutputMarker' , 'ppVal' , ), 258, (258, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'OutputMarker' , 'ppVal' , ), 258, (258, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'BaseNodeContact' , 'pVal' , ), 259, (259, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'BaseNodeContact' , 'pVal' , ), 259, (259, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
	(( 'ActionNodeContact' , 'pVal' , ), 260, (260, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 456 , (3, 0, None, None) , 0 , )),
	(( 'ActionNodeContact' , 'pVal' , ), 260, (260, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 464 , (3, 0, None, None) , 0 , )),
	(( 'EdgeContact' , 'pVal' , ), 261, (261, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 472 , (3, 0, None, None) , 0 , )),
	(( 'EdgeContact' , 'pVal' , ), 261, (261, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 480 , (3, 0, None, None) , 0 , )),
	(( 'SmoothNodeContact' , 'pVal' , ), 262, (262, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 488 , (3, 0, None, None) , 0 , )),
	(( 'SmoothNodeContact' , 'pVal' , ), 262, (262, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 496 , (3, 0, None, None) , 0 , )),
	(( 'UseCPM' , 'pVal' , ), 263, (263, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 504 , (3, 0, None, None) , 0 , )),
	(( 'UseCPM' , 'pVal' , ), 263, (263, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 512 , (3, 0, None, None) , 0 , )),
	(( 'ActionGeometryType' , 'pVal' , ), 264, (264, (), [ (16387, 10, None, "IID('{E6CCD344-E8F4-46D8-8025-0740B7F22D8E}')") , ], 1 , 2 , 4 , 0 , 520 , (3, 0, None, None) , 0 , )),
	(( 'ActionGeometryType' , 'pVal' , ), 264, (264, (), [ (3, 1, None, "IID('{E6CCD344-E8F4-46D8-8025-0740B7F22D8E}')") , ], 1 , 4 , 4 , 0 , 528 , (3, 0, None, None) , 0 , )),
	(( 'SmoothEdgeContact' , 'pVal' , ), 265, (265, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 536 , (3, 0, None, None) , 0 , )),
	(( 'SmoothEdgeContact' , 'pVal' , ), 265, (265, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 544 , (3, 0, None, None) , 0 , )),
	(( 'BaseEntityLineSet' , 'ppVal' , ), 266, (266, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 552 , (3, 0, None, None) , 0 , )),
	(( 'BaseEntityLineSet' , 'ppVal' , ), 266, (266, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 560 , (3, 0, None, None) , 0 , )),
	(( 'ActionEntityLineSet' , 'ppVal' , ), 267, (267, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 568 , (3, 0, None, None) , 0 , )),
	(( 'ActionEntityLineSet' , 'ppVal' , ), 267, (267, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 576 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayComponent' , 'Component' , ), 268, (268, (), [ (3, 1, None, "IID('{1CDA68E5-BF74-44CC-AA65-1CB30BEE5134}')") , ], 1 , 4 , 4 , 0 , 584 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayComponent' , 'Component' , ), 268, (268, (), [ (16387, 10, None, "IID('{1CDA68E5-BF74-44CC-AA65-1CB30BEE5134}')") , ], 1 , 2 , 4 , 0 , 592 , (3, 0, None, None) , 0 , )),
]

IContactGeoCurveSegmentOption_vtables_dispatch_ = 1
IContactGeoCurveSegmentOption_vtables_ = [
	(( 'Segment' , 'pVal' , ), 51, (51, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Segment' , 'pVal' , ), 51, (51, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'BoundingBufferLength' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 53, (53, (), [ (3, 1, None, "IID('{E6F67E73-6EDC-47B1-9B2D-4A03967F1900}')") , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 53, (53, (), [ (16387, 10, None, "IID('{E6F67E73-6EDC-47B1-9B2D-4A03967F1900}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'SetDepthDirectionVector' , 'x' , 'y' , 'z' , ), 54, (54, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'GetDepthDirectionVector' , 'pX' , 'pY' , 'pZ' , ), 55, (55, (), [ 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseTotalSegment' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UseTotalSegment' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseCubicCell' , 'pVal' , ), 57, (57, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UseCubicCell' , 'pVal' , ), 57, (57, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'CubicCell' , 'pVal' , ), 58, (58, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'CubicCell' , 'pVal' , ), 58, (58, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Radius' , 'pVal' , ), 59, (59, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Thickness' , 'pVal' , ), 60, (60, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
]

IContactGeoCurveToSurface_vtables_dispatch_ = 1
IContactGeoCurveToSurface_vtables_ = [
	(( 'ContactPropertyAdditional' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{C3560239-62ED-43FF-A94D-71801A2886E4}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'BasePatchOption' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'ActionCurveSegmentOption' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2D0EBBBE-395D-465E-84F4-30290538BA38}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 254, (254, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 254, (254, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'ActionNodeContact' , 'pVal' , ), 255, (255, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'ActionNodeContact' , 'pVal' , ), 255, (255, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'EdgeContact' , 'pVal' , ), 256, (256, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'EdgeContact' , 'pVal' , ), 256, (256, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'ContactPoints' , 'pVal' , ), 257, (257, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'ContactPoints' , 'pVal' , ), 257, (257, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'UseContactOutputFile' , 'pVal' , ), 258, (258, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'UseContactOutputFile' , 'pVal' , ), 258, (258, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'OutputMarker' , 'ppVal' , ), 259, (259, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'OutputMarker' , 'ppVal' , ), 259, (259, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
	(( 'BaseEntityPatchSet' , 'ppVal' , ), 260, (260, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 456 , (3, 0, None, None) , 0 , )),
	(( 'BaseEntityPatchSet' , 'ppVal' , ), 260, (260, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 464 , (3, 0, None, None) , 0 , )),
	(( 'ActionEntityLineSet' , 'ppVal' , ), 261, (261, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 472 , (3, 0, None, None) , 0 , )),
	(( 'ActionEntityLineSet' , 'ppVal' , ), 261, (261, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 480 , (3, 0, None, None) , 0 , )),
	(( 'SmoothNodeContact' , 'pVal' , ), 262, (262, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 488 , (3, 0, None, None) , 0 , )),
	(( 'SmoothNodeContact' , 'pVal' , ), 262, (262, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 496 , (3, 0, None, None) , 0 , )),
	(( 'UseCPM' , 'pVal' , ), 263, (263, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 504 , (3, 0, None, None) , 0 , )),
	(( 'UseCPM' , 'pVal' , ), 263, (263, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 512 , (3, 0, None, None) , 0 , )),
	(( 'ActionRadius' , 'ppVal' , ), 264, (264, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 520 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayComponent' , 'Component' , ), 265, (265, (), [ (3, 1, None, "IID('{1CDA68E5-BF74-44CC-AA65-1CB30BEE5134}')") , ], 1 , 4 , 4 , 0 , 528 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayComponent' , 'Component' , ), 265, (265, (), [ (16387, 10, None, "IID('{1CDA68E5-BF74-44CC-AA65-1CB30BEE5134}')") , ], 1 , 2 , 4 , 0 , 536 , (3, 0, None, None) , 0 , )),
]

IContactGeoPatchOption_vtables_dispatch_ = 1
IContactGeoPatchOption_vtables_ = [
	(( 'BoundingBufferLength' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UsePlaneToleranceFactor' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UsePlaneToleranceFactor' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'PlaneToleranceFactor' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFacetSizeFactor' , 'pVal' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFacetSizeFactor' , 'pVal' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'MaxFacetSizeFactor' , 'ppVal' , ), 55, (55, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseSpecificThickness' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UseSpecificThickness' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'SpecificThickness' , 'ppVal' , ), 57, (57, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UseCubicCell' , 'pVal' , ), 58, (58, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'UseCubicCell' , 'pVal' , ), 58, (58, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'CubicCell' , 'pVal' , ), 59, (59, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'CubicCell' , 'pVal' , ), 59, (59, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'SurfaceType' , 'SurfaceType' , ), 60, (60, (), [ (3, 1, None, "IID('{92EE09AA-CA96-419F-9749-86082F395275}')") , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'SurfaceType' , 'SurfaceType' , ), 60, (60, (), [ (16387, 10, None, "IID('{92EE09AA-CA96-419F-9749-86082F395275}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
]

IContactGeoSurface_vtables_dispatch_ = 1
IContactGeoSurface_vtables_ = [
	(( 'ContactPropertyAdditional' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{C3560239-62ED-43FF-A94D-71801A2886E4}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'BasePatchOption' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'ActionPatchOption' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'ActionUpDirection' , 'pVal' , ), 254, (254, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'ActionUpDirection' , 'pVal' , ), 254, (254, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 255, (255, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 255, (255, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'ContactPoints' , 'pVal' , ), 256, (256, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'ContactPoints' , 'pVal' , ), 256, (256, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'UseContactOutputFile' , 'pVal' , ), 257, (257, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'UseContactOutputFile' , 'pVal' , ), 257, (257, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'OutputMarker' , 'ppVal' , ), 258, (258, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'OutputMarker' , 'ppVal' , ), 258, (258, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'BaseNodeContact' , 'pVal' , ), 259, (259, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'BaseNodeContact' , 'pVal' , ), 259, (259, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
	(( 'ActionNodeContact' , 'pVal' , ), 260, (260, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 456 , (3, 0, None, None) , 0 , )),
	(( 'ActionNodeContact' , 'pVal' , ), 260, (260, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 464 , (3, 0, None, None) , 0 , )),
	(( 'EdgeContact' , 'pVal' , ), 261, (261, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 472 , (3, 0, None, None) , 0 , )),
	(( 'EdgeContact' , 'pVal' , ), 261, (261, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 480 , (3, 0, None, None) , 0 , )),
	(( 'SmoothNodeContact' , 'pVal' , ), 262, (262, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 488 , (3, 0, None, None) , 0 , )),
	(( 'SmoothNodeContact' , 'pVal' , ), 262, (262, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 496 , (3, 0, None, None) , 0 , )),
	(( 'UseCPM' , 'pVal' , ), 263, (263, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 504 , (3, 0, None, None) , 0 , )),
	(( 'UseCPM' , 'pVal' , ), 263, (263, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 512 , (3, 0, None, None) , 0 , )),
	(( 'FaceContact' , 'pVal' , ), 264, (264, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 520 , (3, 0, None, None) , 0 , )),
	(( 'FaceContact' , 'pVal' , ), 264, (264, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 528 , (3, 0, None, None) , 0 , )),
	(( 'ActionGeometryType' , 'pVal' , ), 265, (265, (), [ (16387, 10, None, "IID('{1CE77D65-D316-44E0-A9A5-8D39C71D3ECF}')") , ], 1 , 2 , 4 , 0 , 536 , (3, 0, None, None) , 0 , )),
	(( 'ActionGeometryType' , 'pVal' , ), 265, (265, (), [ (3, 1, None, "IID('{1CE77D65-D316-44E0-A9A5-8D39C71D3ECF}')") , ], 1 , 4 , 4 , 0 , 544 , (3, 0, None, None) , 0 , )),
	(( 'BaseEntityPatchSet' , 'ppVal' , ), 266, (266, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 552 , (3, 0, None, None) , 0 , )),
	(( 'BaseEntityPatchSet' , 'ppVal' , ), 266, (266, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 560 , (3, 0, None, None) , 0 , )),
	(( 'ActionEntityPatchSet' , 'ppVal' , ), 267, (267, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 568 , (3, 0, None, None) , 0 , )),
	(( 'ActionEntityPatchSet' , 'ppVal' , ), 267, (267, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 576 , (3, 0, None, None) , 0 , )),
	(( 'SmoothFaceContact' , 'pVal' , ), 268, (268, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 584 , (3, 0, None, None) , 0 , )),
	(( 'SmoothFaceContact' , 'pVal' , ), 268, (268, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 592 , (3, 0, None, None) , 0 , )),
	(( 'ActionSyncGeometry' , 'pVal' , ), 269, (269, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 600 , (3, 0, None, None) , 0 , )),
	(( 'ActionSyncGeometry' , 'pVal' , ), 269, (269, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 608 , (3, 0, None, None) , 0 , )),
	(( 'ActionRadius' , 'ppVal' , ), 270, (270, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 616 , (3, 0, None, None) , 0 , )),
	(( 'BasePressure' , 'pVal' , ), 271, (271, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 624 , (3, 0, None, None) , 0 , )),
	(( 'BasePressure' , 'pVal' , ), 271, (271, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 632 , (3, 0, None, None) , 0 , )),
	(( 'ActionPressure' , 'pVal' , ), 272, (272, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 640 , (3, 0, None, None) , 0 , )),
	(( 'ActionPressure' , 'pVal' , ), 272, (272, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 648 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayComponent' , 'Component' , ), 273, (273, (), [ (3, 1, None, "IID('{1CDA68E5-BF74-44CC-AA65-1CB30BEE5134}')") , ], 1 , 4 , 4 , 0 , 656 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayComponent' , 'Component' , ), 273, (273, (), [ (16387, 10, None, "IID('{1CDA68E5-BF74-44CC-AA65-1CB30BEE5134}')") , ], 1 , 2 , 4 , 0 , 664 , (3, 0, None, None) , 0 , )),
]

IContactProperty_vtables_dispatch_ = 1
IContactProperty_vtables_ = [
	(( 'StiffnessCoefficient' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseStiffnessSpline' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseStiffnessSpline' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'StiffnessSpline' , 'ppVal' , ), 53, (53, (), [ (9, 1, None, "IID('{E76144D2-715D-41B4-A432-7B6C7F713FC2}')") , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'StiffnessSpline' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{E76144D2-715D-41B4-A432-7B6C7F713FC2}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'DampingCoefficient' , 'ppVal' , ), 54, (54, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseDampingSpline' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseDampingSpline' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'DampingSpline' , 'ppVal' , ), 56, (56, (), [ (9, 1, None, "IID('{E76144D2-715D-41B4-A432-7B6C7F713FC2}')") , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'DampingSpline' , 'ppVal' , ), 56, (56, (), [ (16393, 10, None, "IID('{E76144D2-715D-41B4-A432-7B6C7F713FC2}')") , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UseStiffnessExponent' , 'pVal' , ), 57, (57, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'UseStiffnessExponent' , 'pVal' , ), 57, (57, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'StiffnessExponent' , 'ppVal' , ), 58, (58, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'UseDampingExponent' , 'pVal' , ), 59, (59, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'UseDampingExponent' , 'pVal' , ), 59, (59, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'DampingExponent' , 'ppVal' , ), 60, (60, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UseIndentationExponent' , 'pVal' , ), 61, (61, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UseIndentationExponent' , 'pVal' , ), 61, (61, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'IndentationExponent' , 'ppVal' , ), 62, (62, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'Friction' , 'ppVal' , ), 63, (63, (), [ (16393, 10, None, "IID('{AEFD7238-F1DD-48C2-8329-E5571C291B25}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'UseUserSubroutine' , 'pVal' , ), 64, (64, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'UseUserSubroutine' , 'pVal' , ), 64, (64, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 65, (65, (), [ (9, 1, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 65, (65, (), [ (16393, 10, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
]

IContactPropertyAdditional_vtables_dispatch_ = 1
IContactPropertyAdditional_vtables_ = [
	(( 'ContactForceType' , 'ContactForceType' , ), 51, (51, (), [ (3, 1, None, "IID('{FB8BE34F-B6D9-4B57-8EE0-1D1C30E630D9}')") , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ContactForceType' , 'ContactForceType' , ), 51, (51, (), [ (16387, 10, None, "IID('{FB8BE34F-B6D9-4B57-8EE0-1D1C30E630D9}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'BoundaryPenetration' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseUserReboundDamping' , 'pVal' , ), 53, (53, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseUserReboundDamping' , 'pVal' , ), 53, (53, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'ReboundDampingFactor' , 'ppVal' , ), 54, (54, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseAutoGlobalMaxPenetration' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseAutoGlobalMaxPenetration' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'GlobalMaxPenetration' , 'ppVal' , ), 56, (56, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseAutoLocalMaxPenetration' , 'pVal' , ), 57, (57, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UseAutoLocalMaxPenetration' , 'pVal' , ), 57, (57, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'LocalMaxPenetration' , 'ppVal' , ), 58, (58, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
]

IContactSolidContact_vtables_dispatch_ = 1
IContactSolidContact_vtables_ = [
	(( 'ContactPropertyAdditional' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{C3560239-62ED-43FF-A94D-71801A2886E4}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'BasePatchOption' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{D479C190-172F-42AC-A4B9-5B3AFE1EB81B}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'ActionPatchOption' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{D479C190-172F-42AC-A4B9-5B3AFE1EB81B}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'ActionUpDirection' , 'pVal' , ), 255, (255, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'ActionUpDirection' , 'pVal' , ), 255, (255, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 256, (256, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 256, (256, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'ContactPoints' , 'pVal' , ), 258, (258, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'ContactPoints' , 'pVal' , ), 258, (258, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'UseContactOutputFile' , 'pVal' , ), 259, (259, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'UseContactOutputFile' , 'pVal' , ), 259, (259, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'OutputMarker' , 'ppVal' , ), 260, (260, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'OutputMarker' , 'ppVal' , ), 260, (260, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
]

IContactSolidPatchOption_vtables_dispatch_ = 1
IContactSolidPatchOption_vtables_ = [
	(( 'BoundingBufferLength' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UsePlaneToleranceFactor' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UsePlaneToleranceFactor' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'PlaneToleranceFactor' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFacetSizeFactor' , 'pVal' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFacetSizeFactor' , 'pVal' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'MaxFacetSizeFactor' , 'ppVal' , ), 55, (55, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
]

IContactSphereArcExtrude_vtables_dispatch_ = 1
IContactSphereArcExtrude_vtables_ = [
	(( 'BaseMarker' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'BaseMarker' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'BaseArcRadius' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'BaseArcStartAngleArc' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'BaseArcEndAngleArc' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'BaseArcExtrudeLength' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'BaseArcOpenStartFace' , 'pVal' , ), 256, (256, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'BaseArcOpenStartFace' , 'pVal' , ), 256, (256, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'BaseArcOpenEndFace' , 'pVal' , ), 257, (257, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'BaseArcOpenEndFace' , 'pVal' , ), 257, (257, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'BaseNormalDirection' , 'pVal' , ), 258, (258, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'BaseNormalDirection' , 'pVal' , ), 258, (258, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
]

IContactSphereArcRevolution_vtables_dispatch_ = 1
IContactSphereArcRevolution_vtables_ = [
	(( 'BaseMarker' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'BaseMarker' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'BaseArcRadius' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'BaseArcStartAngleArc' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'BaseArcEndAngleArc' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'BaseArcStartAngleRevolution' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'BaseArcEndAngleRevolution' , 'ppVal' , ), 256, (256, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'BaseArcVerticalOffset' , 'ppVal' , ), 257, (257, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'BaseArcHorizontalOffset' , 'ppVal' , ), 258, (258, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'BaseNormalDirection' , 'pVal' , ), 259, (259, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'BaseNormalDirection' , 'pVal' , ), 259, (259, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
]

IContactSphereInBox_vtables_dispatch_ = 1
IContactSphereInBox_vtables_ = [
	(( 'OpenFrontFace' , 'pVal' , ), 252, (252, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'OpenFrontFace' , 'pVal' , ), 252, (252, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'OpenBackFace' , 'pVal' , ), 253, (253, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'OpenBackFace' , 'pVal' , ), 253, (253, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'OpenTopFace' , 'pVal' , ), 254, (254, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'OpenTopFace' , 'pVal' , ), 254, (254, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'OpenBottomFace' , 'pVal' , ), 255, (255, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'OpenBottomFace' , 'pVal' , ), 255, (255, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'OpenLeftFace' , 'pVal' , ), 256, (256, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'OpenLeftFace' , 'pVal' , ), 256, (256, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'OpenRightFace' , 'pVal' , ), 257, (257, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'OpenRightFace' , 'pVal' , ), 257, (257, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
]

IContactSphereInCone_vtables_dispatch_ = 1
IContactSphereInCone_vtables_ = [
	(( 'OpenStartFace' , 'pVal' , ), 251, (251, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'OpenStartFace' , 'pVal' , ), 251, (251, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'OpenEndFace' , 'pVal' , ), 252, (252, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'OpenEndFace' , 'pVal' , ), 252, (252, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
]

IContactSphereInCylinder_vtables_dispatch_ = 1
IContactSphereInCylinder_vtables_ = [
	(( 'OpenStartFace' , 'pVal' , ), 252, (252, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'OpenStartFace' , 'pVal' , ), 252, (252, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'OpenEndFace' , 'pVal' , ), 253, (253, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'OpenEndFace' , 'pVal' , ), 253, (253, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
]

IContactSphereInSphere_vtables_dispatch_ = 1
IContactSphereInSphere_vtables_ = [
]

IContactSphereInTorus_vtables_dispatch_ = 1
IContactSphereInTorus_vtables_ = [
	(( 'OpenStartFace' , 'pVal' , ), 252, (252, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'OpenStartFace' , 'pVal' , ), 252, (252, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'OpenEndFace' , 'pVal' , ), 253, (253, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'OpenEndFace' , 'pVal' , ), 253, (253, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
]

IContactSphereToArcExtrusion_vtables_dispatch_ = 1
IContactSphereToArcExtrusion_vtables_ = [
	(( 'OpenStartFace' , 'pVal' , ), 251, (251, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'OpenStartFace' , 'pVal' , ), 251, (251, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'OpenEndFace' , 'pVal' , ), 252, (252, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'OpenEndFace' , 'pVal' , ), 252, (252, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'BaseNormalDirection' , 'pVal' , ), 253, (253, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'BaseNormalDirection' , 'pVal' , ), 253, (253, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
]

IContactSphereToArcRevolution_vtables_dispatch_ = 1
IContactSphereToArcRevolution_vtables_ = [
	(( 'OpenStartFace' , 'pVal' , ), 251, (251, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'OpenStartFace' , 'pVal' , ), 251, (251, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'OpenEndFace' , 'pVal' , ), 252, (252, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'OpenEndFace' , 'pVal' , ), 252, (252, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'BaseNormalDirection' , 'pVal' , ), 253, (253, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'BaseNormalDirection' , 'pVal' , ), 253, (253, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'UseHelixCurve' , 'Val' , ), 254, (254, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'UseHelixCurve' , 'Val' , ), 254, (254, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'RotationalDirection' , 'pVal' , ), 255, (255, (), [ (3, 1, None, "IID('{4AF9E853-0E68-42B6-8F9B-B3606E38FC28}')") , ], 1 , 4 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'RotationalDirection' , 'pVal' , ), 255, (255, (), [ (16387, 10, None, "IID('{4AF9E853-0E68-42B6-8F9B-B3606E38FC28}')") , ], 1 , 2 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'Pitch' , 'ppVal' , ), 256, (256, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'TotalDepth' , 'ppVal' , ), 257, (257, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'SyncGeometry' , 'bValue' , ), 258, (258, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'SyncGeometry' , 'bValue' , ), 258, (258, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
]

IContactSphereToBox_vtables_dispatch_ = 1
IContactSphereToBox_vtables_ = [
]

IContactSphereToCone_vtables_dispatch_ = 1
IContactSphereToCone_vtables_ = [
]

IContactSphereToCylinder_vtables_dispatch_ = 1
IContactSphereToCylinder_vtables_ = [
]

IContactSphereToSphere_vtables_dispatch_ = 1
IContactSphereToSphere_vtables_ = [
]

IContactSphereToSurface_vtables_dispatch_ = 1
IContactSphereToSurface_vtables_ = [
	(( 'BaseUpDirection' , 'pVal' , ), 252, (252, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 252, (252, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'UseNodeContactOnly' , 'pVal' , ), 253, (253, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'UseNodeContactOnly' , 'pVal' , ), 253, (253, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'BasePatchOption' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{66C811FA-3964-4522-8E0B-770FB18880F5}')") , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
]

IContactSphereToTorus_vtables_dispatch_ = 1
IContactSphereToTorus_vtables_ = [
]

IContactSurfacePatchOption_vtables_dispatch_ = 1
IContactSurfacePatchOption_vtables_ = [
	(( 'UsePlaneToleranceFactor' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UsePlaneToleranceFactor' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'PlaneToleranceFactor' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'MinimumPlaneTolerance' , 'pVal' , ), 53, (53, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'MinimumPlaneTolerance' , 'pVal' , ), 53, (53, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
]

IContactSurfaceToSurface_vtables_dispatch_ = 1
IContactSurfaceToSurface_vtables_ = [
	(( 'BaseUpDirection' , 'pVal' , ), 251, (251, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 251, (251, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'BasePatchOption' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{66C811FA-3964-4522-8E0B-770FB18880F5}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'ActionUpDirection' , 'pVal' , ), 253, (253, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'ActionUpDirection' , 'pVal' , ), 253, (253, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'ActionMaxPenetration' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'UseActionPlaneToleranceFactor' , 'pVal' , ), 255, (255, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'UseActionPlaneToleranceFactor' , 'pVal' , ), 255, (255, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'ActionPlaneToleranceFactor' , 'ppVal' , ), 256, (256, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'ActionMinimumPlaneTolerance' , 'pVal' , ), 257, (257, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'ActionMinimumPlaneTolerance' , 'pVal' , ), 257, (257, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
]

IContactUVPatchOption_vtables_dispatch_ = 1
IContactUVPatchOption_vtables_ = [
	(( 'BoundingBufferLength' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfUDirection' , 'pVal' , ), 52, (52, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfUDirection' , 'pVal' , ), 52, (52, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfVDirection' , 'pVal' , ), 53, (53, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfVDirection' , 'pVal' , ), 53, (53, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UseCubicCell' , 'pVal' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseCubicCell' , 'pVal' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'CubicCell' , 'pVal' , ), 55, (55, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'CubicCell' , 'pVal' , ), 55, (55, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
]

IContactUVSurface_vtables_dispatch_ = 1
IContactUVSurface_vtables_ = [
	(( 'ContactPropertyAdditional' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{C3560239-62ED-43FF-A94D-71801A2886E4}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'BasePatchOption' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{713E6396-E6D2-4DBF-8780-142AB7259685}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 253, (253, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'BaseUpDirection' , 'pVal' , ), 253, (253, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'ContactPoints' , 'pVal' , ), 254, (254, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'ContactPoints' , 'pVal' , ), 254, (254, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'EdgeContact' , 'pVal' , ), 255, (255, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'EdgeContact' , 'pVal' , ), 255, (255, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'UseCPM' , 'pVal' , ), 256, (256, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'UseCPM' , 'pVal' , ), 256, (256, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'ActionSyncGeometry' , 'pVal' , ), 257, (257, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'ActionSyncGeometry' , 'pVal' , ), 257, (257, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'ActionRadius' , 'ppVal' , ), 258, (258, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'BaseNodeContact' , 'pVal' , ), 259, (259, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'BaseNodeContact' , 'pVal' , ), 259, (259, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
	(( 'SmoothFaceContact' , 'pVal' , ), 260, (260, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 456 , (3, 0, None, None) , 0 , )),
	(( 'SmoothFaceContact' , 'pVal' , ), 260, (260, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 464 , (3, 0, None, None) , 0 , )),
	(( 'FaceContact' , 'pVal' , ), 261, (261, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 472 , (3, 0, None, None) , 0 , )),
	(( 'FaceContact' , 'pVal' , ), 261, (261, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 480 , (3, 0, None, None) , 0 , )),
	(( 'BasePressure' , 'pVal' , ), 262, (262, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 488 , (3, 0, None, None) , 0 , )),
	(( 'BasePressure' , 'pVal' , ), 262, (262, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 496 , (3, 0, None, None) , 0 , )),
]

IContourObject_vtables_dispatch_ = 1
IContourObject_vtables_ = [
	(( 'Object' , 'contourObject' , ), 51, (51, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Show' , 'fShow' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Show' , 'fShow' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'SourceData' , 'SourceData' , ), 53, (53, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
]

IContourObjectCollection_vtables_dispatch_ = 1
IContourObjectCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (3, 1, None, None) , 
			 (16393, 10, None, "IID('{F5AD2570-A7BF-4FEE-AC4E-68E977AE92EA}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IContourSetting_vtables_dispatch_ = 1
IContourSetting_vtables_ = [
	(( 'Enable' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Enable' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseFrameMinMax' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseFrameMinMax' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'ShowMinValue' , 'pVal' , ), 53, (53, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'ShowMinValue' , 'pVal' , ), 53, (53, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'ShowMaxValue' , 'pVal' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'ShowMaxValue' , 'pVal' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'MinValue' , 'pVal' , ), 55, (55, (), [ (4, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'MinValue' , 'pVal' , ), 55, (55, (), [ (16388, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'MaxValue' , 'pVal' , ), 56, (56, (), [ (4, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'MaxValue' , 'pVal' , ), 56, (56, (), [ (16388, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'CalculateMinMax' , ), 57, (57, (), [ ], 1 , 1 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'ShowLegend' , 'pVal' , ), 58, (58, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'ShowLegend' , 'pVal' , ), 58, (58, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'LegendLocation' , 'pVal' , ), 59, (59, (), [ (3, 1, None, "IID('{40B0D145-E318-48E0-8114-B3400BA8B271}')") , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'LegendLocation' , 'pVal' , ), 59, (59, (), [ (16387, 10, None, "IID('{40B0D145-E318-48E0-8114-B3400BA8B271}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'ColorType' , 'pVal' , ), 60, (60, (), [ (3, 1, None, "IID('{2E75ED6F-ECC0-4EDD-90F6-E5A3EDB5B6F6}')") , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'ColorType' , 'pVal' , ), 60, (60, (), [ (16387, 10, None, "IID('{2E75ED6F-ECC0-4EDD-90F6-E5A3EDB5B6F6}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'MinColor' , 'pVal' , ), 61, (61, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'MinColor' , 'pVal' , ), 61, (61, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'MaxColor' , 'pVal' , ), 62, (62, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'MaxColor' , 'pVal' , ), 62, (62, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'TextColor' , 'pVal' , ), 63, (63, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'TextColor' , 'pVal' , ), 63, (63, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'ObjectCollection' , 'ppVal' , ), 64, (64, (), [ (16393, 10, None, "IID('{F03BC9EC-27E6-4FA7-92F8-AAD66AC41633}')") , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
]

ICustomView_vtables_dispatch_ = 1
ICustomView_vtables_ = [
	(( 'SetViewCenterPoint' , 'x' , 'y' , 'z' , ), 51, (51, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'GetViewCenterPoint' , 'pX' , 'pY' , 'pZ' , ), 52, (52, (), [ 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'SetViewNormalVector' , 'x' , 'y' , 'z' , ), 53, (53, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'GetViewNormalVector' , 'pX' , 'pY' , 'pZ' , ), 54, (54, (), [ 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'SetViewUpVector' , 'x' , 'y' , 'z' , ), 55, (55, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'GetViewUpVector' , 'pX' , 'pY' , 'pZ' , ), 56, (56, (), [ 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'SetViewFromMarker' , 'pVal' , ), 57, (57, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'ZoomScale' , 'pVal' , ), 58, (58, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'ZoomScale' , 'pVal' , ), 58, (58, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'Import' , 'strFile' , ), 59, (59, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'Export' , 'strFile' , 'OverWrite' , ), 60, (60, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
]

ICuttingPlane_vtables_dispatch_ = 1
ICuttingPlane_vtables_ = [
	(( 'Origin' , 'pVal' , ), 51, (51, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Origin' , 'pVal' , ), 51, (51, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'NormalDirection' , 'pVal' , ), 52, (52, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'NormalDirection' , 'pVal' , ), 52, (52, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseCuttingPlane' , 'pVal' , ), 53, (53, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UseCuttingPlane' , 'pVal' , ), 53, (53, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseCrossSectionLineColor' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseCrossSectionLineColor' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'CrossSectionLineColor' , 'pVal' , ), 56, (56, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'CrossSectionLineColor' , 'pVal' , ), 56, (56, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'ApplyToAllBodies' , 'pVal' , ), 57, (57, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'ApplyToAllBodies' , 'pVal' , ), 57, (57, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
]

IDOE_vtables_dispatch_ = 1
IDOE_vtables_ = [
	(( 'DesignVariable' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{D0ADE6A0-6A94-4C03-B0F5-4B98D463252E}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'PerformanceIndex' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{8792A78A-E960-4DD6-B668-178EFAE4A565}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Simulation' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{71978C47-3750-43BF-8D42-6E9AA5F9CD84}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'ResultSheet' , 'ppVal' , ), 54, (54, (), [ (16393, 10, None, "IID('{7460DFBF-6A85-45E4-933E-F880997ABD9E}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
]

IDOEDesignVariable_vtables_dispatch_ = 1
IDOEDesignVariable_vtables_ = [
	(( 'DOEMethod' , 'pVal' , ), 51, (51, (), [ (3, 1, None, "IID('{871261E0-0D15-41DE-BCE5-9B8F2B6AE5C9}')") , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'DOEMethod' , 'pVal' , ), 51, (51, (), [ (16387, 10, None, "IID('{871261E0-0D15-41DE-BCE5-9B8F2B6AE5C9}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'RequiredRuns' , 'pVal' , ), 52, (52, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'RequiredRuns' , 'pVal' , ), 52, (52, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'DesignVariableValueCollection' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{302A8078-C3FF-413F-AF69-2648ECD8CD2A}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UpdateDOETableAllFlag' , 'flag' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'GetDOETableAllFlag' , 'ppVal' , ), 55, (55, (), [ (24587, 10, None, None) , ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UpdateDOETableFlag' , 'flag' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , 
			 (8211, 1, None, None) , ], 1 , 1 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'GetDOETableFlag' , 'flag' , 'ppVal' , ), 57, (57, (), [ (11, 1, None, None) , 
			 (24595, 10, None, None) , ], 1 , 1 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'GetDOETableAllData' , 'ppVal' , ), 58, (58, (), [ (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'GetDOETableData' , 'Index' , 'ppVal' , ), 59, (59, (), [ (19, 1, None, None) , 
			 (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'CreateDOETable' , 'Val' , ), 60, (60, (), [ (3, 1, None, "IID('{12C89D87-5250-419C-AF79-5503CAAC7483}')") , ], 1 , 1 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'ClearDOETable' , ), 61, (61, (), [ ], 1 , 1 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'ImportDOEData' , 'strFileName' , ), 62, (62, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'ExportDOEData' , 'strFileName' , 'OverWrite' , ), 63, (63, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'AddDOETableData' , 'flag' , 'pVal' , ), 64, (64, (), [ (11, 1, None, None) , 
			 (8197, 1, None, None) , ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'InitializeDVList' , ), 65, (65, (), [ ], 1 , 1 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
]

IDOEDesignVariableValue_vtables_dispatch_ = 1
IDOEDesignVariableValue_vtables_ = [
	(( 'Use' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Use' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'LB' , 'pVal' , ), 52, (52, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UB' , 'pVal' , ), 53, (53, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfPoints' , 'pVal' , ), 54, (54, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'Update' , 'LB' , 'UB' , 'numPoints' , ), 55, (55, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (19, 1, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'Data' , 'ppVal' , ), 56, (56, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'Data' , 'ppVal' , ), 56, (56, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'DesignVariable' , 'ppVal' , ), 57, (57, (), [ (16393, 10, None, "IID('{44DA6D75-D10A-48E2-8077-5D9B9293842D}')") , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
]

IDOEDesignVariableValueCollection_vtables_dispatch_ = 1
IDOEDesignVariableValueCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (3, 1, None, None) , 
			 (16393, 10, None, "IID('{08856E23-B2D6-4A74-99B5-9E53EE3392E2}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IDOEPerformanceIndex_vtables_dispatch_ = 1
IDOEPerformanceIndex_vtables_ = [
	(( 'PerformanceIndexValueCollection' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{6F40B1D9-17D6-40FA-BB27-A03900F7004F}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseTimePeriod' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseTimePeriod' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseSimulationEndtime' , 'pVal' , ), 53, (53, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseSimulationEndtime' , 'pVal' , ), 53, (53, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'StartTime' , 'pVal' , ), 54, (54, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'StartTime' , 'pVal' , ), 54, (54, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'EndTime' , 'pVal' , ), 55, (55, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'EndTime' , 'pVal' , ), 55, (55, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
]

IDOEPerformanceIndexValue_vtables_dispatch_ = 1
IDOEPerformanceIndexValue_vtables_ = [
	(( 'PerformanceIndex' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Data' , 'ppVal' , ), 52, (52, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
]

IDOEPerformanceIndexValueCollection_vtables_dispatch_ = 1
IDOEPerformanceIndexValueCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (3, 1, None, None) , 
			 (16393, 10, None, "IID('{5F8A9E07-44ED-44D4-944C-3775C142375E}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IDOEResultSheet_vtables_dispatch_ = 1
IDOEResultSheet_vtables_ = [
	(( 'SuccessFlag' , 'ppVal' , ), 51, (51, (), [ (24587, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'GetDVs' , 'indexDV' , 'ppVal' , ), 52, (52, (), [ (3, 1, None, None) , 
			 (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'GetPIs' , 'indexPI' , 'ppVal' , ), 53, (53, (), [ (3, 1, None, None) , 
			 (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Clear' , ), 54, (54, (), [ ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Import' , 'Name' , ), 55, (55, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'Export' , 'Name' , 'Type' , ), 56, (56, (), [ (8, 1, None, None) , 
			 (3, 1, None, "IID('{6033929B-AA46-4CD4-B4B7-D594BF40E86C}')") , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UpdateCurrentModel' , 'trialNo' , ), 57, (57, (), [ (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'CreateNewModel' , 'trialNo' , 'Name' , ), 58, (58, (), [ (3, 1, None, None) , 
			 (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'GetDVPIPlotData' , 'dv' , 'pi' , 'ppVal' , ), 59, (59, (), [ 
			 (3, 1, None, None) , (3, 1, None, None) , (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
]

IDOESimulation_vtables_dispatch_ = 1
IDOESimulation_vtables_ = [
	(( 'SimulationType' , 'mode' , ), 51, (51, (), [ (3, 1, None, "IID('{E482DDA9-D891-4949-BA2B-3AF8465C4CEC}')") , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'SimulationType' , 'mode' , ), 51, (51, (), [ (16387, 10, None, "IID('{E482DDA9-D891-4949-BA2B-3AF8465C4CEC}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseSaveResult' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseSaveResult' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'SaveResult' , 'Name' , ), 53, (53, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'SaveResult' , 'Name' , ), 53, (53, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseSaveModelInCase' , 'pVal' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseSaveModelInCase' , 'pVal' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UsePassToTheNextTrialOfDOE' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UsePassToTheNextTrialOfDOE' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'ReturnValue' , 'pVal' , ), 56, (56, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'ReturnValue' , 'pVal' , ), 56, (56, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'UseClearDataInResultSheet' , 'pVal' , ), 57, (57, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'UseClearDataInResultSheet' , 'pVal' , ), 57, (57, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'UseClearResultFileData' , 'pVal' , ), 58, (58, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'UseClearResultFileData' , 'pVal' , ), 58, (58, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UseCreateResultFile' , 'pVal' , ), 59, (59, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UseCreateResultFile' , 'pVal' , ), 59, (59, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'ResultFileName' , 'Name' , ), 60, (60, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'ResultFileName' , 'Name' , ), 60, (60, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'BaseDirectory' , 'Name' , ), 61, (61, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'BaseDirectory' , 'Name' , ), 61, (61, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'BaseName' , 'Name' , ), 62, (62, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'BaseName' , 'Name' , ), 62, (62, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfTrials' , 'pVal' , ), 63, (63, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'Simulation' , ), 64, (64, (), [ ], 1 , 1 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'ExportFiles' , ), 65, (65, (), [ ], 1 , 1 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'GenerateResultFile' , 'Name' , ), 66, (66, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'AutoCoreNumber' , 'pVal' , ), 67, (67, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'AutoCoreNumber' , 'pVal' , ), 67, (67, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'CoreNumber' , 'pVal' , ), 68, (68, (), [ (3, 1, None, "IID('{A2597840-D840-462B-B769-AB88AD567C47}')") , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'CoreNumber' , 'pVal' , ), 68, (68, (), [ (16387, 10, None, "IID('{A2597840-D840-462B-B769-AB88AD567C47}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
]

IDesignStudy_vtables_dispatch_ = 1
IDesignStudy_vtables_ = [
	(( 'AddDesignVariable' , 'pDesignVariable' , 'ppVal' , ), 51, (51, (), [ (9, 1, None, "IID('{44DA6D75-D10A-48E2-8077-5D9B9293842D}')") , 
			 (16393, 10, None, "IID('{818D411D-45CE-4542-8D89-4D96D21430C8}')") , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'AddPerformanceIndex' , 'pPerformanceIndex' , 'ppVal' , ), 52, (52, (), [ (9, 1, None, "IID('{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}')") , 
			 (16393, 10, None, "IID('{ED61CDBA-7239-48AD-B844-7A4DE43F7811}')") , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'DeleteDesignVariable' , 'pDesignVariable' , ), 53, (53, (), [ (9, 1, None, "IID('{818D411D-45CE-4542-8D89-4D96D21430C8}')") , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'DeletePerformanceIndex' , 'pPerformanceIndex' , ), 54, (54, (), [ (9, 1, None, "IID('{ED61CDBA-7239-48AD-B844-7A4DE43F7811}')") , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'ClearDesignVariable' , ), 55, (55, (), [ ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'ClearPerformanceIndex' , ), 56, (56, (), [ ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'DesignVariableCollection' , 'ppVal' , ), 57, (57, (), [ (16393, 10, None, "IID('{52942D12-4250-4501-9149-1840338D9948}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'PerformanceIndexCollection' , 'ppVal' , ), 58, (58, (), [ (16393, 10, None, "IID('{B93EF2CA-4779-42DC-9EFE-1B50F427E2E7}')") , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UseTimePeriod' , 'pVal' , ), 59, (59, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseTimePeriod' , 'pVal' , ), 59, (59, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UseSimulationEndtime' , 'pVal' , ), 60, (60, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'UseSimulationEndtime' , 'pVal' , ), 60, (60, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'StartTime' , 'pVal' , ), 61, (61, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'StartTime' , 'pVal' , ), 61, (61, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'EndTime' , 'pVal' , ), 62, (62, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'EndTime' , 'pVal' , ), 62, (62, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfLevels' , 'pVal' , ), 63, (63, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfLevels' , 'pVal' , ), 63, (63, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'ExperimentType' , 'pVal' , ), 64, (64, (), [ (3, 1, None, "IID('{DD204434-D2B3-4693-9A7A-EAC5970666A1}')") , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'ExperimentType' , 'pVal' , ), 64, (64, (), [ (16387, 10, None, "IID('{DD204434-D2B3-4693-9A7A-EAC5970666A1}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfTrials' , 'pVal' , ), 66, (66, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'SimulationType' , 'mode' , ), 67, (67, (), [ (3, 1, None, "IID('{E482DDA9-D891-4949-BA2B-3AF8465C4CEC}')") , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'SimulationType' , 'mode' , ), 67, (67, (), [ (16387, 10, None, "IID('{E482DDA9-D891-4949-BA2B-3AF8465C4CEC}')") , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'UseSaveResult' , 'pVal' , ), 68, (68, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'UseSaveResult' , 'pVal' , ), 68, (68, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'SaveResult' , 'Name' , ), 69, (69, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'SaveResult' , 'Name' , ), 69, (69, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'UseSaveModelInCase' , 'pVal' , ), 70, (70, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'UseSaveModelInCase' , 'pVal' , ), 70, (70, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'WhatIfStudyDesignIndex' , 'ppVal' , ), 71, (71, (), [ (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'WhatIfStudyMultiVariate' , 'pDesignVariable' , 'ppVal' , ), 72, (72, (), [ (9, 1, None, "IID('{818D411D-45CE-4542-8D89-4D96D21430C8}')") , 
			 (24588, 10, None, None) , ], 1 , 1 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'MultiVariate' , 'pDesignVariable' , 'pPerformanceIndex' , 'ppVal' , ), 73, (73, (), [ 
			 (9, 1, None, "IID('{818D411D-45CE-4542-8D89-4D96D21430C8}')") , (9, 1, None, "IID('{ED61CDBA-7239-48AD-B844-7A4DE43F7811}')") , (24588, 10, None, None) , ], 1 , 1 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'ImportDesignMatrix' , 'strFile' , ), 74, (74, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'ExportDesignMatrix' , 'strFile' , 'OverWrite' , ), 75, (75, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'CalculateNumberOfTrials' , ), 76, (76, (), [ ], 1 , 1 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'UpdateDV' , 'Index' , ), 77, (77, (), [ (19, 1, None, None) , ], 1 , 1 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'ExportResult' , 'strFile' , 'OverWrite' , ), 78, (78, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'CheckNumberOfLevels' , 'pVal' , ), 79, (79, (), [ (16395, 10, None, None) , ], 1 , 1 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'UsePassToTheNextTrialOfDOE' , 'pVal' , ), 80, (80, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'UsePassToTheNextTrialOfDOE' , 'pVal' , ), 80, (80, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'ReturnValue' , 'pVal' , ), 81, (81, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'ReturnValue' , 'pVal' , ), 81, (81, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'ModifyDesignVariable' , 'pDesignStudyDV' , 'pDesignVariable' , ), 82, (82, (), [ (9, 1, None, "IID('{818D411D-45CE-4542-8D89-4D96D21430C8}')") , 
			 (9, 1, None, "IID('{44DA6D75-D10A-48E2-8077-5D9B9293842D}')") , ], 1 , 1 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'ModifyPerformanceIndex' , 'pDesignStudyPI' , 'pPerformanceIndex' , ), 83, (83, (), [ (9, 1, None, "IID('{ED61CDBA-7239-48AD-B844-7A4DE43F7811}')") , 
			 (9, 1, None, "IID('{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}')") , ], 1 , 1 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
]

IDesignStudyDV_vtables_dispatch_ = 1
IDesignStudyDV_vtables_ = [
	(( 'Data' , 'ppVal' , ), 51, (51, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'DesignVariable' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{44DA6D75-D10A-48E2-8077-5D9B9293842D}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
]

IDesignStudyDVCollection_vtables_dispatch_ = 1
IDesignStudyDVCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (3, 1, None, None) , 
			 (16393, 10, None, "IID('{818D411D-45CE-4542-8D89-4D96D21430C8}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IDesignStudyPI_vtables_dispatch_ = 1
IDesignStudyPI_vtables_ = [
	(( 'Result' , 'ppVal' , ), 51, (51, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseObjectiveFunction' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseObjectiveFunction' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'MinMax' , 'pVal' , ), 53, (53, (), [ (3, 1, None, "IID('{0D482DBD-90B8-417E-92C8-AD3552A11CE0}')") , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'MinMax' , 'pVal' , ), 53, (53, (), [ (16387, 10, None, "IID('{0D482DBD-90B8-417E-92C8-AD3552A11CE0}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'WeightingFactor' , 'pVal' , ), 54, (54, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'WeightingFactor' , 'pVal' , ), 54, (54, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseConstraint' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UseConstraint' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'LogicalOperator' , 'pVal' , ), 56, (56, (), [ (3, 1, None, "IID('{C87DBD85-F612-42A4-AF41-D4C02E453626}')") , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'LogicalOperator' , 'pVal' , ), 56, (56, (), [ (16387, 10, None, "IID('{C87DBD85-F612-42A4-AF41-D4C02E453626}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'ConstraintValue' , 'pVal' , ), 57, (57, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'ConstraintValue' , 'pVal' , ), 57, (57, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'PerformanceIndex' , 'ppVal' , ), 58, (58, (), [ (16393, 10, None, "IID('{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
]

IDesignStudyPICollection_vtables_dispatch_ = 1
IDesignStudyPICollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (3, 1, None, None) , 
			 (16393, 10, None, "IID('{ED61CDBA-7239-48AD-B844-7A4DE43F7811}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IDesignVariable_vtables_dispatch_ = 1
IDesignVariable_vtables_ = [
	(( 'ParametricValue' , 'ppVal' , ), 151, (151, (), [ (9, 1, None, "IID('{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')") , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'ParametricValue' , 'ppVal' , ), 151, (151, (), [ (16393, 10, None, "IID('{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'ValueRange' , 'pVal' , ), 152, (152, (), [ (3, 1, None, "IID('{6904E296-3761-4186-A34C-5556CC69964A}')") , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'ValueRange' , 'pVal' , ), 152, (152, (), [ (16387, 10, None, "IID('{6904E296-3761-4186-A34C-5556CC69964A}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'AbsoluteMinValue' , 'pVal' , ), 153, (153, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'AbsoluteMinValue' , 'pVal' , ), 153, (153, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'AbsoluteMaxValue' , 'pVal' , ), 154, (154, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'AbsoluteMaxValue' , 'pVal' , ), 154, (154, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'DeltaMinValue' , 'pVal' , ), 155, (155, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'DeltaMinValue' , 'pVal' , ), 155, (155, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'DeltaMaxValue' , 'pVal' , ), 156, (156, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'DeltaMaxValue' , 'pVal' , ), 156, (156, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'PercentMinValue' , 'pVal' , ), 157, (157, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'PercentMinValue' , 'pVal' , ), 157, (157, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'PercentMaxValue' , 'pVal' , ), 158, (158, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'PercentMaxValue' , 'pVal' , ), 158, (158, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'UseEditValue' , 'pVal' , ), 159, (159, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'UseEditValue' , 'pVal' , ), 159, (159, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'EditValueList' , 'pVal' , ), 160, (160, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'EditValueList' , 'pVal' , ), 160, (160, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'Use' , 'pVal' , ), 161, (161, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'Use' , 'pVal' , ), 161, (161, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
]

IDesignVariableCollection_vtables_dispatch_ = 1
IDesignVariableCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{44DA6D75-D10A-48E2-8077-5D9B9293842D}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IDevelopement_vtables_dispatch_ = 1
IDevelopement_vtables_ = [
]

IDifferentialEquation_vtables_dispatch_ = 1
IDifferentialEquation_vtables_ = [
	(( 'Active' , 'pVal' , ), 151, (151, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Active' , 'pVal' , ), 151, (151, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'InitialConditionDIF' , 'Value' , ), 153, (153, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'InitialConditionDIF1' , 'Value' , ), 154, (154, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 155, (155, (), [ (3, 1, None, "IID('{A79AFF6F-883F-4763-A44B-1879ECC74AFE}')") , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 155, (155, (), [ (16387, 10, None, "IID('{A79AFF6F-883F-4763-A44B-1879ECC74AFE}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 156, (156, (), [ (9, 1, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 156, (156, (), [ (16393, 10, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'ppVal' , ), 157, (157, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'ppVal' , ), 157, (157, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'FunctionType' , 'pVal' , ), 158, (158, (), [ (3, 1, None, "IID('{A79AFF6F-883F-4763-A44B-1879ECC74AFF}')") , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'FunctionType' , 'pVal' , ), 158, (158, (), [ (16387, 10, None, "IID('{A79AFF6F-883F-4763-A44B-1879ECC74AFF}')") , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'HoldValueDuringStaticAnalysis' , 'pVal' , ), 159, (159, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'HoldValueDuringStaticAnalysis' , 'pVal' , ), 159, (159, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
]

IDifferentialEquationCollection_vtables_dispatch_ = 1
IDifferentialEquationCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{591F39F5-FBE0-49DF-83B6-6C0550D95A6A}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IDouble_vtables_dispatch_ = 1
IDouble_vtables_ = [
	(( 'Value' , 'pVal' , ), 51, (51, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Value' , 'pVal' , ), 51, (51, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'ParametricValue' , 'ppVal' , ), 52, (52, (), [ (9, 1, None, "IID('{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')") , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'ParametricValue' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
]

IEigenMovement_vtables_dispatch_ = 1
IEigenMovement_vtables_ = [
	(( 'ExportFile' , 'File' , ), 52, (52, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ExportFile' , 'File' , ), 52, (52, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'AddTargetMarker' , 'pVal' , ), 53, (53, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'GetTargetMarkerFullNameByIndex' , 'Index' , 'pVal' , ), 54, (54, (), [ (19, 1, None, None) , 
			 (16392, 10, None, None) , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'ClearTargetMarkerList' , ), 55, (55, (), [ ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfTargetMarkerList' , 'number' , ), 56, (56, (), [ (16403, 10, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'Export' , ), 57, (57, (), [ ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
]

IEigenValueProperty_vtables_dispatch_ = 1
IEigenValueProperty_vtables_ = [
	(( 'AmplitudeFactor' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'FramePerCycle' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'MaxModeNumber' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'IncludeStaticAnalysis' , 'pVal' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'IncludeStaticAnalysis' , 'pVal' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'StartTime' , 'ppVal' , ), 55, (55, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'EndTime' , 'ppVal' , ), 56, (56, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'NaturalFrequencyType' , 'pIntegratorType' , ), 57, (57, (), [ (16387, 10, None, "IID('{8408B76F-A14A-4087-B6B1-5D50464E37C5}')") , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'NaturalFrequencyType' , 'pIntegratorType' , ), 57, (57, (), [ (3, 1, None, "IID('{8408B76F-A14A-4087-B6B1-5D50464E37C5}')") , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseCutoffLowFrequency' , 'pVal' , ), 59, (59, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UseCutoffLowFrequency' , 'pVal' , ), 59, (59, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'CutoffLowFrequency' , 'ppVal' , ), 60, (60, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
]

IElement_vtables_dispatch_ = 1
IElement_vtables_ = [
	(( 'ID' , 'pVal' , ), 151, (151, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'ID' , 'pVal' , ), 151, (151, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'ElementType' , 'pVal' , ), 152, (152, (), [ (16387, 10, None, "IID('{59250D4D-5C1C-4CEE-80A4-42A64F61F138}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
]

IElementReadOnly_vtables_dispatch_ = 1
IElementReadOnly_vtables_ = [
	(( 'ID' , 'pVal' , ), 151, (151, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'ElementType' , 'pVal' , ), 152, (152, (), [ (16387, 10, None, "IID('{59250D4D-5C1C-4CEE-80A4-42A64F61F138}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
]

IEquilibriumProperty_vtables_dispatch_ = 1
IEquilibriumProperty_vtables_ = [
	(( 'ErrorTolerance' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'MaxIteration' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Step' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Time' , 'ppVal' , ), 54, (54, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'SolverType' , 'StaticSolverType' , ), 55, (55, (), [ (16387, 10, None, "IID('{0549836B-EED2-4482-BA80-897B362D3323}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'SolverType' , 'StaticSolverType' , ), 55, (55, (), [ (3, 1, None, "IID('{0549836B-EED2-4482-BA80-897B362D3323}')") , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'ConvergenceFactor' , 'pVal' , ), 56, (56, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'ConvergenceFactor' , 'pVal' , ), 56, (56, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'InitialStepSize' , 'ppVal' , ), 57, (57, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'MaximumStepSize' , 'ppVal' , ), 58, (58, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'StepSizeFactor' , 'ppVal' , ), 59, (59, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalMoveLimit' , 'ppVal' , ), 60, (60, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'RotationalMoveLimit' , 'ppVal' , ), 61, (61, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'IncludeStateMatrix' , 'pVal' , ), 62, (62, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'IncludeStateMatrix' , 'pVal' , ), 62, (62, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'IncludeStaticAnimation' , 'pVal' , ), 63, (63, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'IncludeStaticAnimation' , 'pVal' , ), 63, (63, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'AutoConvergenceFactor' , 'pVal' , ), 64, (64, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'AutoConvergenceFactor' , 'pVal' , ), 64, (64, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
]

IEulerAngle_vtables_dispatch_ = 1
IEulerAngle_vtables_ = [
	(( 'Alpha' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Beta' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Gamma' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'angleType' , ), 54, (54, (), [ (3, 1, None, "IID('{A952E8B8-4277-4459-8636-46BE3982535C}')") , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'angleType' , ), 54, (54, (), [ (16387, 10, None, "IID('{A952E8B8-4277-4459-8636-46BE3982535C}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
]

IExpression_vtables_dispatch_ = 1
IExpression_vtables_ = [
	(( 'Text' , 'Text' , ), 151, (151, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Text' , 'Text' , ), 151, (151, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'InitialValue' , 'pVal' , ), 153, (153, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Arguments' , 'ppSafeArray' , ), 154, (154, (), [ (8200, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'Arguments' , 'ppSafeArray' , ), 154, (154, (), [ (24584, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Output' , 'fOutput' , ), 155, (155, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'Output' , 'fOutput' , ), 155, (155, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
]

IExpressionCollection_vtables_dispatch_ = 1
IExpressionCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IFileExportOption_vtables_dispatch_ = 1
IFileExportOption_vtables_ = [
	(( 'ParasolidOption' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{DFE62769-2AF5-408A-88CF-2D448D994C5F}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ACISOption' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{4A2D1222-69BA-4242-AE5E-E41051CC3621}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'CATIAOption' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{49AFA7B6-FF16-4F40-8EA4-10867819AB71}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
]

IFileExportOptionACIS_vtables_dispatch_ = 1
IFileExportOptionACIS_vtables_ = [
	(( 'Version' , 'pVersion' , ), 51, (51, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Version' , 'pVersion' , ), 51, (51, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
]

IFileExportOptionCATIA_vtables_dispatch_ = 1
IFileExportOptionCATIA_vtables_ = [
	(( 'Version' , 'pVersion' , ), 51, (51, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Version' , 'pVersion' , ), 51, (51, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
]

IFileExportOptionParasolid_vtables_dispatch_ = 1
IFileExportOptionParasolid_vtables_ = [
	(( 'Version' , 'pVersion' , ), 51, (51, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Version' , 'pVersion' , ), 51, (51, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
]

IFileImportOption_vtables_dispatch_ = 1
IFileImportOption_vtables_ = [
	(( 'UseADMConvertMarkerID' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseADMConvertMarkerID' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'RDSBOption' , 'pVal' , ), 53, (53, (), [ (16387, 10, None, "IID('{D137EA44-A395-423D-8D4D-70F30A57FBC7}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'RDSBOption' , 'pVal' , ), 53, (53, (), [ (3, 1, None, "IID('{D137EA44-A395-423D-8D4D-70F30A57FBC7}')") , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseSTEPSolidTrim' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UseSTEPSolidTrim' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseCATIAHealing' , 'pVal' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseCATIAHealing' , 'pVal' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UseCATIASolidAsSheet' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseCATIASolidAsSheet' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UseCATIAMergeToSingleBody' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'UseCATIAMergeToSingleBody' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'CATIAOption' , 'ppVal' , ), 57, (57, (), [ (16393, 10, None, "IID('{93B51291-F47B-4BAA-80D3-91123DD4E277}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'STEPOption' , 'ppVal' , ), 58, (58, (), [ (16393, 10, None, "IID('{9631DE3F-C76B-4D7E-AACE-1E7135DACBEF}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'UseFileImportOptionForPNET' , 'pVal' , ), 59, (59, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'UseFileImportOptionForPNET' , 'pVal' , ), 59, (59, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
]

IFileImportOptionCATIA_vtables_dispatch_ = 1
IFileImportOptionCATIA_vtables_ = [
	(( 'UseCATIAHealing' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseCATIAHealing' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseCATIASolidAsSheet' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseCATIASolidAsSheet' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'CATIAAssemlyType' , 'pVal' , ), 53, (53, (), [ (16387, 10, None, "IID('{3FCF662A-AABA-49AE-966E-99F07E9C1F9C}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'CATIAAssemlyType' , 'pVal' , ), 53, (53, (), [ (3, 1, None, "IID('{3FCF662A-AABA-49AE-966E-99F07E9C1F9C}')") , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
]

IFileImportOptionSTEP_vtables_dispatch_ = 1
IFileImportOptionSTEP_vtables_ = [
	(( 'UseSTEPSolidTrim' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseSTEPSolidTrim' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
]

IFillHoleOption_vtables_dispatch_ = 1
IFillHoleOption_vtables_ = [
	(( 'HoleEdgeFace' , ), 201, (201, (), [ (8204, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Smoothness' , ), 202, (202, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Continuity' , ), 203, (203, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
]

IFilletEdgeInfo_vtables_dispatch_ = 1
IFilletEdgeInfo_vtables_ = [
	(( 'Radius' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'EdgeCollection' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{C760B0C7-18A0-463E-BC13-07F6B3931B32}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
]

IFilletEdgeInfoCollection_vtables_dispatch_ = 1
IFilletEdgeInfoCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{5B71FC46-F5BB-4F40-B7D6-2D4CC543C7CF}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IForce_vtables_dispatch_ = 1
IForce_vtables_ = [
]

IForceAxial_vtables_dispatch_ = 1
IForceAxial_vtables_ = [
	(( 'Expression' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 252, (252, (), [ (9, 1, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'UseActionOnly' , 'pVal' , ), 253, (253, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'UseActionOnly' , 'pVal' , ), 253, (253, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'UseUserSubroutine' , 'pVal' , ), 254, (254, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'UseUserSubroutine' , 'pVal' , ), 254, (254, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
]

IForceAxialRotational_vtables_dispatch_ = 1
IForceAxialRotational_vtables_ = [
	(( 'Expression' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 252, (252, (), [ (9, 1, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'UseActionOnly' , 'pVal' , ), 253, (253, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'UseActionOnly' , 'pVal' , ), 253, (253, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'UseUserSubroutine' , 'pVal' , ), 254, (254, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'UseUserSubroutine' , 'pVal' , ), 254, (254, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
]

IForceBeam_vtables_dispatch_ = 1
IForceBeam_vtables_ = [
	(( 'CrossSectionArea' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'DampingMatrix' , 'i' , 'j' , 'ppVal' , ), 252, (252, (), [ 
			 (3, 1, None, None) , (3, 1, None, None) , (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 1 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'ViscousDampingRatio' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'Ixx' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'Iyy' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'Izz' , 'ppVal' , ), 256, (256, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'ShearAreaRatioY' , 'ppVal' , ), 257, (257, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'ShearAreaRatioZ' , 'ppVal' , ), 258, (258, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'ShearModulus' , 'ppVal' , ), 259, (259, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'UndeformedLength' , 'ppVal' , ), 260, (260, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'YoungsModulus' , 'ppVal' , ), 261, (261, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'UseDampingMatrix' , 'pVal' , ), 262, (262, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'UseDampingMatrix' , 'pVal' , ), 262, (262, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'BeamCrossSectionType' , 'pVal' , ), 263, (263, (), [ (3, 1, None, "IID('{01406737-1007-468F-A0BC-A2F7C43239CF}')") , ], 1 , 4 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'BeamCrossSectionType' , 'pVal' , ), 263, (263, (), [ (16387, 10, None, "IID('{01406737-1007-468F-A0BC-A2F7C43239CF}')") , ], 1 , 2 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'BeamCrossSection' , 'ppVal' , ), 264, (264, (), [ (16393, 10, None, "IID('{557175E7-72DD-447A-8DB1-319593C34BDC}')") , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'UpdateCrossSectionProperty' , ), 265, (265, (), [ ], 1 , 1 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'UseUpdateCrossSectionPropertyAutomatically' , 'flag' , ), 266, (266, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'UseUpdateCrossSectionPropertyAutomatically' , 'flag' , ), 266, (266, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
]

IForceBushing_vtables_dispatch_ = 1
IForceBushing_vtables_ = [
	(( 'RotationalDampingX' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'RotationalDampingY' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'RotationalDampingZ' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'RotationalStiffnessX' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'RotationalStiffnessY' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'RotationalStiffnessZ' , 'ppVal' , ), 256, (256, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'RotationalPreloadX' , 'ppVal' , ), 257, (257, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'RotationalPreloadY' , 'ppVal' , ), 258, (258, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'RotationalPreloadZ' , 'ppVal' , ), 259, (259, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalDampingX' , 'ppVal' , ), 260, (260, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalDampingY' , 'ppVal' , ), 261, (261, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalDampingZ' , 'ppVal' , ), 262, (262, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalStiffnessX' , 'ppVal' , ), 263, (263, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalStiffnessY' , 'ppVal' , ), 264, (264, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalStiffnessZ' , 'ppVal' , ), 265, (265, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalPreloadX' , 'ppVal' , ), 266, (266, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalPreloadY' , 'ppVal' , ), 267, (267, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalPreloadZ' , 'ppVal' , ), 268, (268, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'UseRadial' , 'pVal' , ), 269, (269, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'UseRadial' , 'pVal' , ), 269, (269, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
	(( 'UseStaticBushing' , 'pVal' , ), 270, (270, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 456 , (3, 0, None, None) , 0 , )),
	(( 'UseStaticBushing' , 'pVal' , ), 270, (270, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 464 , (3, 0, None, None) , 0 , )),
	(( 'UseIncludeVirtualBodyConnection' , 'pVal' , ), 271, (271, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 472 , (3, 0, None, None) , 0 , )),
	(( 'UseIncludeVirtualBodyConnection' , 'pVal' , ), 271, (271, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 480 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedConnectionFlexibleBody' , 'pVal' , ), 279, (279, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 488 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedConnectionFlexibleBody' , 'pVal' , ), 279, (279, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 496 , (3, 0, None, None) , 0 , )),
]

IForceBushingProperty_vtables_dispatch_ = 1
IForceBushingProperty_vtables_ = [
	(( 'Stiffness' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Damping' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Preload' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
]

IForceCollection_vtables_dispatch_ = 1
IForceCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{EB73DE47-2BB8-46BD-A904-F61BCBC59D1F}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IForceGraphic_vtables_dispatch_ = 1
IForceGraphic_vtables_ = [
	(( 'EachRenderMode' , 'pVal' , ), 51, (51, (), [ (3, 1, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}')") , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'EachRenderMode' , 'pVal' , ), 51, (51, (), [ (16387, 10, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Color' , 'pVal' , ), 52, (52, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Color' , 'pVal' , ), 52, (52, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
]

IForceMatrix_vtables_dispatch_ = 1
IForceMatrix_vtables_ = [
	(( 'UseUserSubroutine' , 'pVal' , ), 251, (251, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'UseUserSubroutine' , 'pVal' , ), 251, (251, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 252, (252, (), [ (9, 1, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'ViscousDampingRatio' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'UseDampingMatrix' , 'pVal' , ), 254, (254, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'UseDampingMatrix' , 'pVal' , ), 254, (254, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'Preload' , 'Index' , 'ppVal' , ), 255, (255, (), [ (3, 1, None, None) , 
			 (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 1 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'ReferenceLength' , 'Index' , 'ppVal' , ), 256, (256, (), [ (3, 1, None, None) , 
			 (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 1 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'StiffnessMatrix' , 'i' , 'j' , 'ppVal' , ), 257, (257, (), [ 
			 (3, 1, None, None) , (3, 1, None, None) , (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 1 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'ViscousDampingMatrix' , 'i' , 'j' , 'ppVal' , ), 258, (258, (), [ 
			 (3, 1, None, None) , (3, 1, None, None) , (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 1 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedConnectionFlexibleBody' , 'pVal' , ), 259, (259, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedConnectionFlexibleBody' , 'pVal' , ), 259, (259, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
]

IForcePlate_vtables_dispatch_ = 1
IForcePlate_vtables_ = [
	(( 'PoissonRatio' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'ProportionalRatioDamping' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'Thickness' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'UndeformedPositionL01' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'UndeformedPositionL02' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'UndeformedPositionL03' , 'ppVal' , ), 256, (256, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'YoungsModulus' , 'ppVal' , ), 257, (257, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'ActionMarker2' , 'ppVal' , ), 258, (258, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'ActionMarker2' , 'ppVal' , ), 258, (258, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'ActionMarker3' , 'ppVal' , ), 259, (259, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'ActionMarker3' , 'ppVal' , ), 259, (259, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
]

IForceRotational_vtables_dispatch_ = 1
IForceRotational_vtables_ = [
	(( 'ExpressionTX' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionTX' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionTY' , 'ppVal' , ), 252, (252, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionTY' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionTZ' , 'ppVal' , ), 253, (253, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionTZ' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 254, (254, (), [ (9, 1, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 255, (255, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'UseUserSubroutine' , 'pVal' , ), 256, (256, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'UseUserSubroutine' , 'pVal' , ), 256, (256, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
]

IForceScrew_vtables_dispatch_ = 1
IForceScrew_vtables_ = [
	(( 'ExpressionFX' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionFX' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionFY' , 'ppVal' , ), 252, (252, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionFY' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionFZ' , 'ppVal' , ), 253, (253, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionFZ' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionTX' , 'ppVal' , ), 254, (254, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionTX' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionTY' , 'ppVal' , ), 255, (255, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionTY' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionTZ' , 'ppVal' , ), 256, (256, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionTZ' , 'ppVal' , ), 256, (256, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 257, (257, (), [ (9, 1, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 257, (257, (), [ (16393, 10, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 258, (258, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 258, (258, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'UseUserSubroutine' , 'pVal' , ), 259, (259, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'UseUserSubroutine' , 'pVal' , ), 259, (259, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
]

IForceSpring_vtables_dispatch_ = 1
IForceSpring_vtables_ = [
	(( 'SpringGraphic' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{61C55C33-4716-4D26-8030-F9D29ED8B413}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'FreeLength' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'Preload' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'Stiffness' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'Damping' , 'ppVal' , ), 256, (256, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
]

IForceSpringGraphic_vtables_dispatch_ = 1
IForceSpringGraphic_vtables_ = [
	(( 'SpringDiameter' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'OffsetFromActionMarker' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'OffsetFromBaseMarker' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'DamperLength' , 'ppVal' , ), 104, (104, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'CoilDiameter' , 'ppVal' , ), 105, (105, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'NCoil' , 'pVal' , ), 106, (106, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'NCoil' , 'pVal' , ), 106, (106, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'UseSimpleGraphic' , 'pVal' , ), 107, (107, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'UseSimpleGraphic' , 'pVal' , ), 107, (107, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'UseDamperLength' , 'pVal' , ), 108, (108, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'UseDamperLength' , 'pVal' , ), 108, (108, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'UseCoilDiameter' , 'pVal' , ), 109, (109, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UseCoilDiameter' , 'pVal' , ), 109, (109, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UseCoilRadius' , 'pVal' , ), 110, (110, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'UseCoilRadius' , 'pVal' , ), 110, (110, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'CoilRadius' , 'ppVal' , ), 111, (111, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
]

IForceSpringRotational_vtables_dispatch_ = 1
IForceSpringRotational_vtables_ = [
	(( 'FreeAngle' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'Stiffness' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'Damping' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{07D4A7FC-5B11-4E7D-B805-4B32646009AC}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'PreTorque' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
]

IForceTire_vtables_dispatch_ = 1
IForceTire_vtables_ = [
	(( 'ModelType' , 'TireModel' , ), 251, (251, (), [ (16387, 10, None, "IID('{9BDB8C71-DE78-4530-BC2B-B8C2B800F5F6}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'ModelType' , 'TireModel' , ), 251, (251, (), [ (3, 1, None, "IID('{9BDB8C71-DE78-4530-BC2B-B8C2B800F5F6}')") , ], 1 , 4 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'Property' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{DB995C7E-C9C4-4C2E-87C7-E4A030ED91AA}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'OutputChannel' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{AB5A2925-53BC-4D4C-8101-4C3774E2DDEC}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 254, (254, (), [ (9, 1, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'SolidContact' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{C2F210C5-9B2E-43C2-9C50-D57E01780041}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
]

IForceTireF_vtables_dispatch_ = 1
IForceTireF_vtables_ = [
	(( 'TireFile' , 'TireFile' , ), 251, (251, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'TireFile' , 'TireFile' , ), 251, (251, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'UseRoadFile' , 'pVal' , ), 252, (252, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'UseRoadFile' , 'pVal' , ), 252, (252, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'RoadFile' , 'RoadFile' , ), 253, (253, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'RoadFile' , 'RoadFile' , ), 253, (253, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
]

IForceTireMF_vtables_dispatch_ = 1
IForceTireMF_vtables_ = [
	(( 'ModelType' , 'TireModel' , ), 251, (251, (), [ (3, 1, None, "IID('{03F79047-C5D9-435A-86C8-50D44AE2E3C9}')") , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'ModelType' , 'TireModel' , ), 251, (251, (), [ (16387, 10, None, "IID('{03F79047-C5D9-435A-86C8-50D44AE2E3C9}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'TireFile' , 'TireFile' , ), 252, (252, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'TireFile' , 'TireFile' , ), 252, (252, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'RoadFile' , 'RoadFile' , ), 254, (254, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'RoadFile' , 'RoadFile' , ), 254, (254, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'WheelCarrierMarker' , 'ppVal' , ), 255, (255, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'WheelCarrierMarker' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'TireSide' , 'TireSide' , ), 256, (256, (), [ (3, 1, None, "IID('{F0B47155-E2C8-499D-B8A2-2B9BBC744C7C}')") , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'TireSide' , 'TireSide' , ), 256, (256, (), [ (16387, 10, None, "IID('{F0B47155-E2C8-499D-B8A2-2B9BBC744C7C}')") , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'ContactMethod' , 'ContactMethod' , ), 257, (257, (), [ (3, 1, None, "IID('{6626B787-3A4F-4E99-9400-D81B6652D086}')") , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'ContactMethod' , 'ContactMethod' , ), 257, (257, (), [ (16387, 10, None, "IID('{6626B787-3A4F-4E99-9400-D81B6652D086}')") , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'Dynamics' , 'Dynamics' , ), 258, (258, (), [ (3, 1, None, "IID('{34D32C34-6F51-4C78-9102-E7133D6E2923}')") , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'Dynamics' , 'Dynamics' , ), 258, (258, (), [ (16387, 10, None, "IID('{34D32C34-6F51-4C78-9102-E7133D6E2923}')") , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'SlipForces' , 'slipforce' , ), 259, (259, (), [ (3, 1, None, "IID('{9E3407B3-DD21-4775-8E4E-5BA56BA8691D}')") , ], 1 , 4 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'SlipForces' , 'slipforce' , ), 259, (259, (), [ (16387, 10, None, "IID('{9E3407B3-DD21-4775-8E4E-5BA56BA8691D}')") , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'RoadType' , 'RoadType' , ), 260, (260, (), [ (3, 1, None, "IID('{2F533E3C-D633-4EF8-9A2D-550C023DE7CC}')") , ], 1 , 4 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'RoadType' , 'RoadType' , ), 260, (260, (), [ (16387, 10, None, "IID('{2F533E3C-D633-4EF8-9A2D-550C023DE7CC}')") , ], 1 , 2 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'RoadShell' , 'RoadShell' , ), 261, (261, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'RoadShell' , 'RoadShell' , ), 261, (261, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
	(( 'GRoadType' , 'enumGRoadType' , ), 262, (262, (), [ (3, 1, None, "IID('{DF3430B6-23E8-41C4-B469-24FC7813A9E6}')") , ], 1 , 4 , 4 , 0 , 456 , (3, 0, None, None) , 0 , )),
	(( 'GRoadType' , 'enumGRoadType' , ), 262, (262, (), [ (16387, 10, None, "IID('{DF3430B6-23E8-41C4-B469-24FC7813A9E6}')") , ], 1 , 2 , 4 , 0 , 464 , (3, 0, None, None) , 0 , )),
	(( 'GRoad' , 'varGRoad' , ), 263, (263, (), [ (9, 1, None, "IID('{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}')") , ], 1 , 4 , 4 , 0 , 472 , (3, 0, None, None) , 0 , )),
	(( 'GRoad' , 'varGRoad' , ), 263, (263, (), [ (16393, 10, None, "IID('{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}')") , ], 1 , 2 , 4 , 0 , 480 , (3, 0, None, None) , 0 , )),
]

IForceTireSoil_vtables_dispatch_ = 1
IForceTireSoil_vtables_ = [
	(( 'SoilProperty' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{4BF59E07-A035-4C63-9753-8CA8D16C02B1}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
]

IForceTranslational_vtables_dispatch_ = 1
IForceTranslational_vtables_ = [
	(( 'ExpressionFX' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionFX' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionFY' , 'ppVal' , ), 252, (252, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionFY' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionFZ' , 'ppVal' , ), 253, (253, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionFZ' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 254, (254, (), [ (9, 1, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 255, (255, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'UseUserSubroutine' , 'pVal' , ), 256, (256, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'UseUserSubroutine' , 'pVal' , ), 256, (256, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
]

IFrequencyResponseProperty_vtables_dispatch_ = 1
IFrequencyResponseProperty_vtables_ = [
	(( 'StartFrequency' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'EndFrequency' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Step' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'LogarithmicStep' , 'pVal' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'LogarithmicStep' , 'pVal' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'AnimationFrame' , 'ppVal' , ), 55, (55, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'AmplitudeFactor' , 'ppVal' , ), 56, (56, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'MaxNumberofMode' , 'ppVal' , ), 57, (57, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'IncludeSystemDamping' , 'pVal' , ), 58, (58, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'IncludeSystemDamping' , 'pVal' , ), 58, (58, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'IncludeStateMatrix' , 'pVal' , ), 59, (59, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'IncludeStateMatrix' , 'pVal' , ), 59, (59, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
]

IGRoad_vtables_dispatch_ = 1
IGRoad_vtables_ = [
	(( 'Color' , 'pVal' , ), 151, (151, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Color' , 'pVal' , ), 151, (151, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'RefFrame' , 'ppVal' , ), 152, (152, (), [ (16393, 10, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'RoadPropertyFileName' , 'pVal' , ), 153, (153, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'RoadPropertyFileName' , 'pVal' , ), 153, (153, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
]

IGRoadCollection_vtables_dispatch_ = 1
IGRoadCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IGRoadCreationOption_vtables_dispatch_ = 1
IGRoadCreationOption_vtables_ = [
	(( 'Length' , 'Value' , ), 151, (151, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Length' , 'Value' , ), 151, (151, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Width' , 'Value' , ), 152, (152, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Width' , 'Value' , ), 152, (152, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'LeftLength' , 'Value' , ), 153, (153, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'LeftLength' , 'Value' , ), 153, (153, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'RightLength' , 'Value' , ), 154, (154, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'RightLength' , 'Value' , ), 154, (154, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'NumOfSegments' , 'Value' , ), 155, (155, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'NumOfSegments' , 'Value' , ), 155, (155, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UseZ_Left' , 'pVal' , ), 156, (156, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'UseZ_Left' , 'pVal' , ), 156, (156, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'UseZ_Rigth' , 'pVal' , ), 157, (157, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'UseZ_Rigth' , 'pVal' , ), 157, (157, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
]

IGeneralConstraint_vtables_dispatch_ = 1
IGeneralConstraint_vtables_ = [
	(( 'Active' , 'pVal' , ), 151, (151, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Active' , 'pVal' , ), 151, (151, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'ppVal' , ), 152, (152, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'ppVal' , ), 152, (152, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
]

IGeneralConstraintCollection_vtables_dispatch_ = 1
IGeneralConstraintCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{DF992967-ADE4-434E-B7BA-DDA5B595BD44}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IGeneric_vtables_dispatch_ = 1
IGeneric_vtables_ = [
	(( 'Name' , 'Name' , ), 101, (101, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Name' , 'Name' , ), 101, (101, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Comment' , 'Comment' , ), 102, (102, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Comment' , 'Comment' , ), 102, (102, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'FullName' , 'Name' , ), 103, (103, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'OwnerSubSystem' , 'ppVal' , ), 104, (104, (), [ (16393, 10, None, "IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'OwnerBody' , 'ppVal' , ), 105, (105, (), [ (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'Owner' , 'ppVal' , ), 106, (106, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UserData' , 'UserData' , ), 107, (107, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UserData' , 'UserData' , ), 107, (107, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
]

IGenericAttribute_vtables_dispatch_ = 1
IGenericAttribute_vtables_ = [
	(( 'LayerNumber' , 'pVal' , ), 151, (151, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'LayerNumber' , 'pVal' , ), 151, (151, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Active' , 'pVal' , ), 152, (152, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Active' , 'pVal' , ), 152, (152, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
]

IGenericBase_vtables_dispatch_ = 1
IGenericBase_vtables_ = [
	(( 'GetRDGeneric' , 'ppVal' , ), 51, (51, (), [ (16404, 10, None, None) , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
]

IGenericCollection_vtables_dispatch_ = 1
IGenericCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IGeometry_vtables_dispatch_ = 1
IGeometry_vtables_ = [
	(( 'RefFrame' , 'ppVal' , ), 151, (151, (), [ (16393, 10, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'GetBoundingBox' , 'x1' , 'y1' , 'z1' , 'x2' , 
			 'y2' , 'z2' , ), 152, (152, (), [ (16389, 2, None, None) , (16389, 2, None, None) , 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Graphic' , 'ppVal' , ), 153, (153, (), [ (16393, 10, None, "IID('{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'GetBoundingBoxWithRefFrame' , 'RefFrame' , 'box' , ), 154, (154, (), [ (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , 
			 (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
]

IGeometryArc_vtables_dispatch_ = 1
IGeometryArc_vtables_ = [
	(( 'Radius' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Angle' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
]

IGeometryArcExtrusion_vtables_dispatch_ = 1
IGeometryArcExtrusion_vtables_ = [
	(( 'ArcRadius' , 'ppVal' , ), 301, (301, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'ArcStartAngle' , 'ppVal' , ), 302, (302, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'ArcEndAngle' , 'ppVal' , ), 303, (303, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'ExtrusionLength' , 'ppVal' , ), 304, (304, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
]

IGeometryArcRevolution_vtables_dispatch_ = 1
IGeometryArcRevolution_vtables_ = [
	(( 'ArcRadius' , 'ppVal' , ), 301, (301, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'ArcStartAngle' , 'ppVal' , ), 302, (302, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'ArcEndAngle' , 'ppVal' , ), 303, (303, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'RevolutionRadius' , 'ppVal' , ), 304, (304, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'RevolutionStartAngle' , 'ppVal' , ), 305, (305, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'RevolutionEndAngle' , 'ppVal' , ), 306, (306, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'UseHelixCurve' , 'Val' , ), 307, (307, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'UseHelixCurve' , 'Val' , ), 307, (307, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'RotationalDirection' , 'pVal' , ), 308, (308, (), [ (3, 1, None, "IID('{4AF9E853-0E68-42B6-8F9B-B3606E38FC28}')") , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'RotationalDirection' , 'pVal' , ), 308, (308, (), [ (16387, 10, None, "IID('{4AF9E853-0E68-42B6-8F9B-B3606E38FC28}')") , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'Pitch' , 'ppVal' , ), 309, (309, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'TotalDepth' , 'ppVal' , ), 310, (310, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'UseArcCenterOffset' , 'Val' , ), 311, (311, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'UseArcCenterOffset' , 'Val' , ), 311, (311, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'ExpectedCPAngle' , 'ppVal' , ), 312, (312, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'OffsetDistance' , 'ppVal' , ), 313, (313, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'OpenStartFace' , 'pVal' , ), 314, (314, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'OpenStartFace' , 'pVal' , ), 314, (314, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'OpenEndFace' , 'pVal' , ), 315, (315, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'OpenEndFace' , 'pVal' , ), 315, (315, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
]

IGeometryBox_vtables_dispatch_ = 1
IGeometryBox_vtables_ = [
	(( 'Depth' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Height' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'Width' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
]

IGeometryCircle_vtables_dispatch_ = 1
IGeometryCircle_vtables_ = [
	(( 'Radius' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
]

IGeometryCone_vtables_dispatch_ = 1
IGeometryCone_vtables_ = [
	(( 'Height' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'FirstRadius' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'SecondRadius' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
]

IGeometryCylinder_vtables_dispatch_ = 1
IGeometryCylinder_vtables_ = [
	(( 'Radius' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'FirstParametricPoint' , 'ppVal' , ), 253, (253, (), [ (9, 1, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'FirstParametricPoint' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'SecondParametricPoint' , 'ppVal' , ), 254, (254, (), [ (9, 1, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'SecondParametricPoint' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'SetFirstPoint' , 'x' , 'y' , 'z' , ), 255, (255, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'GetFirstPoint' , 'x' , 'y' , 'z' , ), 256, (256, (), [ 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'SetSecondPoint' , 'x' , 'y' , 'z' , ), 257, (257, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'GetSecondPoint' , 'x' , 'y' , 'z' , ), 258, (258, (), [ 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
]

IGeometryEdge_vtables_dispatch_ = 1
IGeometryEdge_vtables_ = [
	(( 'Length' , 'pVal' , ), 251, (251, (), [ (16389, 10, None, None) , ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'StartPoint' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')") , ], 1 , 1 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'EndPoint' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')") , ], 1 , 1 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
]

IGeometryEdgeCollection_vtables_dispatch_ = 1
IGeometryEdgeCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (3, 1, None, None) , 
			 (16393, 10, None, "IID('{263D2898-9FED-4649-9CF5-8D043CC759A2}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
	(( 'Add' , 'pVal' , ), 51, (51, (), [ (9, 1, None, "IID('{263D2898-9FED-4649-9CF5-8D043CC759A2}')") , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Delete' , 'iIndex' , ), 52, (52, (), [ (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
]

IGeometryEdgeCurve_vtables_dispatch_ = 1
IGeometryEdgeCurve_vtables_ = [
]

IGeometryFace_vtables_dispatch_ = 1
IGeometryFace_vtables_ = [
]

IGeometryFaceCollection_vtables_dispatch_ = 1
IGeometryFaceCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (3, 1, None, None) , 
			 (16393, 10, None, "IID('{C5D7538F-B727-4D10-9D7D-D743D92ACAB4}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
	(( 'Add' , 'pVal' , ), 51, (51, (), [ (9, 1, None, "IID('{C5D7538F-B727-4D10-9D7D-D743D92ACAB4}')") , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Delete' , 'iIndex' , ), 52, (52, (), [ (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
]

IGeometryFaceSurface_vtables_dispatch_ = 1
IGeometryFaceSurface_vtables_ = [
]

IGeometryHelixCurve_vtables_dispatch_ = 1
IGeometryHelixCurve_vtables_ = [
	(( 'SpinRadius' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'RotationalDirection' , 'pVal' , ), 252, (252, (), [ (3, 1, None, "IID('{4AF9E853-0E68-42B6-8F9B-B3606E38FC28}')") , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'RotationalDirection' , 'pVal' , ), 252, (252, (), [ (16387, 10, None, "IID('{4AF9E853-0E68-42B6-8F9B-B3606E38FC28}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'Pitch' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'TotalDepth' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
]

IGeometryLink_vtables_dispatch_ = 1
IGeometryLink_vtables_ = [
	(( 'Depth' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'FirstRadius' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'SecondRadius' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'FirstParametricPoint' , 'ppVal' , ), 256, (256, (), [ (9, 1, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'FirstParametricPoint' , 'ppVal' , ), 256, (256, (), [ (16393, 10, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'SecondParametricPoint' , 'ppVal' , ), 257, (257, (), [ (9, 1, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'SecondParametricPoint' , 'ppVal' , ), 257, (257, (), [ (16393, 10, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'SetFirstPoint' , 'x' , 'y' , 'z' , ), 258, (258, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'GetFirstPoint' , 'x' , 'y' , 'z' , ), 259, (259, (), [ 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'SetSecondPoint' , 'x' , 'y' , 'z' , ), 260, (260, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'GetSecondPoint' , 'x' , 'y' , 'z' , ), 261, (261, (), [ 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'SetNormalDirection' , 'x' , 'y' , 'z' , ), 262, (262, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'GetNormalDirection' , 'x' , 'y' , 'z' , ), 263, (263, (), [ 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
]

IGeometryOutline_vtables_dispatch_ = 1
IGeometryOutline_vtables_ = [
	(( 'PointCollection' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{6BEF9B6B-4708-445E-A3B5-0D65BA69F749}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'ImportFile' , 'pVal' , ), 252, (252, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 253, (253, (), [ (16387, 10, None, "IID('{8D06B177-D68B-407B-8178-F00E4173ABCE}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'FileName' , 'pVal' , ), 254, (254, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'FileName' , 'pVal' , ), 254, (254, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
]

IGeometryOutlineSurface_vtables_dispatch_ = 1
IGeometryOutlineSurface_vtables_ = [
]

IGeometryPrism_vtables_dispatch_ = 1
IGeometryPrism_vtables_ = [
	(( 'Height' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Radius' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'NSides' , 'pVal' , ), 254, (254, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'NSides' , 'pVal' , ), 254, (254, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
]

IGeometrySheet_vtables_dispatch_ = 1
IGeometrySheet_vtables_ = [
]

IGeometrySheetCollection_vtables_dispatch_ = 1
IGeometrySheetCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IGeometrySheetExtrude_vtables_dispatch_ = 1
IGeometrySheetExtrude_vtables_ = [
	(( 'Depth' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'ExtrudeDirection' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
]

IGeometrySheetScale_vtables_dispatch_ = 1
IGeometrySheetScale_vtables_ = [
	(( 'ScaleX' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'ScaleY' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'ScaleZ' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'PreviousGeometry' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'UseGeometryReferenceFrame' , 'Val' , ), 256, (256, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'UseGeometryReferenceFrame' , 'Val' , ), 256, (256, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'GetScaleReferenceFrameMarker' , 'ppVal' , ), 257, (257, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 1 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'SetScaleReferenceFrameMarker' , 'ppVal' , ), 258, (258, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 1 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
]

IGeometrySheetSpin_vtables_dispatch_ = 1
IGeometrySheetSpin_vtables_ = [
	(( 'Angle' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'AxisStart' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'AxisEnd' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
]

IGeometrySheetSweep_vtables_dispatch_ = 1
IGeometrySheetSweep_vtables_ = [
	(( 'WirePath' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'WirePath' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'TranslationVector' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'PathType' , 'pVal' , ), 253, (253, (), [ (3, 1, None, "IID('{D8CE6E05-CFFB-491D-BE96-E8CB84F353B8}')") , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'PathType' , 'pVal' , ), 253, (253, (), [ (16387, 10, None, "IID('{D8CE6E05-CFFB-491D-BE96-E8CB84F353B8}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'AlignmentType' , 'pVal' , ), 254, (254, (), [ (3, 1, None, "IID('{38A75F5E-2E55-4F2C-9566-24B0305E3C12}')") , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'AlignmentType' , 'pVal' , ), 254, (254, (), [ (16387, 10, None, "IID('{38A75F5E-2E55-4F2C-9566-24B0305E3C12}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
]

IGeometrySheetUVSurface_vtables_dispatch_ = 1
IGeometrySheetUVSurface_vtables_ = [
	(( 'UValue' , 'pVal' , ), 251, (251, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UValue' , 'pVal' , ), 251, (251, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'VValue' , 'pVal' , ), 252, (252, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'VValue' , 'pVal' , ), 252, (252, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'FirstEdgeGroup' , 'pMultiEdges' , ), 253, (253, (), [ (8200, 1, None, None) , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'FirstEdgeGroup' , 'pMultiEdges' , ), 253, (253, (), [ (24584, 10, None, None) , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'ThirdEdgeGroup' , 'pMultiEdges' , ), 254, (254, (), [ (8200, 1, None, None) , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'ThirdEdgeGroup' , 'pMultiEdges' , ), 254, (254, (), [ (24584, 10, None, None) , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
]

IGeometryShell_vtables_dispatch_ = 1
IGeometryShell_vtables_ = [
	(( 'Color' , 'pVal' , ), 151, (151, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Color' , 'pVal' , ), 151, (151, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'RefFrame' , 'ppVal' , ), 152, (152, (), [ (16393, 10, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
]

IGeometryShellCollection_vtables_dispatch_ = 1
IGeometryShellCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{1E1952F0-7A7C-453F-BB98-38A23BAE1312}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IGeometrySolid_vtables_dispatch_ = 1
IGeometrySolid_vtables_ = [
]

IGeometrySolidBoolean_vtables_dispatch_ = 1
IGeometrySolidBoolean_vtables_ = [
	(( 'GeometryFirst' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'GeometrySecond' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'SwapGeometryFirst' , ), 253, (253, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'SwapGeometrySecond' , ), 254, (254, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'GeometrySecondCollection' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{DB55951D-F238-46D3-9C25-7B4B87F34D36}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'SwapGeometry' , 'ppTarget' , 'ppTool' , ), 256, (256, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , 
			 (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , ], 1 , 1 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
]

IGeometrySolidChamfer_vtables_dispatch_ = 1
IGeometrySolidChamfer_vtables_ = [
	(( 'ChamferEdgeInfoCollection' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{8FCE6A87-0E72-4BE8-89FB-3C074B7A50C5}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'AddChamferEdgeInfo' , 'pMultiEdges' , 'dFirst' , 'dSecond' , ), 252, (252, (), [ 
			 (8204, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'DeleteChamferEdgeInfo' , 'nIndex' , ), 253, (253, (), [ (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'ClearChamferEdgeInfo' , ), 254, (254, (), [ ], 1 , 1 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'UpdateGeometry' , ), 255, (255, (), [ ], 1 , 1 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'PreviousGeometry' , 'ppVal' , ), 256, (256, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
]

IGeometrySolidCollection_vtables_dispatch_ = 1
IGeometrySolidCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IGeometrySolidExtrude_vtables_dispatch_ = 1
IGeometrySolidExtrude_vtables_ = [
	(( 'Depth' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'ExtrudeDirection' , 'pVal' , ), 252, (252, (), [ (3, 1, None, "IID('{8F05A754-9226-44BB-A8D6-CD3CF1B03623}')") , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'ExtrudeDirection' , 'pVal' , ), 252, (252, (), [ (16387, 10, None, "IID('{8F05A754-9226-44BB-A8D6-CD3CF1B03623}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'GetExtrusionDirection' , 'x1' , 'y1' , 'z1' , ), 253, (253, (), [ 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'ExtrudeDirectionVector' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
]

IGeometrySolidFillet_vtables_dispatch_ = 1
IGeometrySolidFillet_vtables_ = [
	(( 'FilletEdgeInfoCollection' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{573236E5-A4B3-42F2-A7A6-78D9F953BFC8}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'AddFilletEdgeInfo' , 'pMultiEdges' , 'dRadius' , ), 252, (252, (), [ (8204, 1, None, None) , 
			 (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'DeleteFilletEdgeInfo' , 'nIndex' , ), 253, (253, (), [ (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'ClearFilletEdgeInfo' , ), 254, (254, (), [ ], 1 , 1 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'UpdateGeometry' , ), 255, (255, (), [ ], 1 , 1 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'PreviousGeometry' , 'ppVal' , ), 256, (256, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
]

IGeometrySolidScale_vtables_dispatch_ = 1
IGeometrySolidScale_vtables_ = [
	(( 'ScaleX' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'ScaleY' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'ScaleZ' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'PreviousGeometry' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'UseGeometryReferenceFrame' , 'Val' , ), 256, (256, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'UseGeometryReferenceFrame' , 'Val' , ), 256, (256, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'GetScaleReferenceFrameMarker' , 'ppVal' , ), 257, (257, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 1 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'SetScaleReferenceFrameMarker' , 'ppVal' , ), 258, (258, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 1 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
]

IGeometrySolidShell_vtables_dispatch_ = 1
IGeometrySolidShell_vtables_ = [
	(( 'Direction' , 'Type' , ), 251, (251, (), [ (3, 1, None, "IID('{C3AABB83-D3B0-42FC-9A17-05C51C28FC8F}')") , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Direction' , 'Type' , ), 251, (251, (), [ (16387, 10, None, "IID('{C3AABB83-D3B0-42FC-9A17-05C51C28FC8F}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'RemoveFaceCollection' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{B5FF572C-A887-464A-8C86-0E92F1ED744F}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'Offset' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'ShellOffsetFaceInfoCollection' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{4F28E7D4-55B5-4398-8AB5-B7586AE44EDE}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'AddOffsetFaceInfo' , 'pMultiFaces' , 'dOffset' , ), 255, (255, (), [ (8204, 1, None, None) , 
			 (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'DeleteOffsetFaceInfo' , 'nIndex' , ), 256, (256, (), [ (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'ClearOffsetFaceInfo' , ), 257, (257, (), [ ], 1 , 1 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'UpdateGeometry' , ), 258, (258, (), [ ], 1 , 1 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'PreviousGeometry' , 'ppVal' , ), 259, (259, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}')") , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
]

IGeometrySolidSpin_vtables_dispatch_ = 1
IGeometrySolidSpin_vtables_ = [
	(( 'Angle' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'AxisStart' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'AxisEnd' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
]

IGeometrySolidSweep_vtables_dispatch_ = 1
IGeometrySolidSweep_vtables_ = [
	(( 'WirePath' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'WirePath' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'TranslationVector' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'PathType' , 'pVal' , ), 253, (253, (), [ (3, 1, None, "IID('{D8CE6E05-CFFB-491D-BE96-E8CB84F353B8}')") , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'PathType' , 'pVal' , ), 253, (253, (), [ (16387, 10, None, "IID('{D8CE6E05-CFFB-491D-BE96-E8CB84F353B8}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'AlignmentType' , 'pVal' , ), 254, (254, (), [ (3, 1, None, "IID('{38A75F5E-2E55-4F2C-9566-24B0305E3C12}')") , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'AlignmentType' , 'pVal' , ), 254, (254, (), [ (16387, 10, None, "IID('{38A75F5E-2E55-4F2C-9566-24B0305E3C12}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
]

IGeometrySphere_vtables_dispatch_ = 1
IGeometrySphere_vtables_ = [
	(( 'Radius' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'RadiusY' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'RadiusZ' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'IsSphere' , 'pVal' , ), 255, (255, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'IsSphere' , 'pVal' , ), 255, (255, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
]

IGeometrySphereCollection_vtables_dispatch_ = 1
IGeometrySphereCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IGeometrySpline_vtables_dispatch_ = 1
IGeometrySpline_vtables_ = [
	(( 'Closed' , 'Val' , ), 252, (252, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Closed' , 'Val' , ), 252, (252, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 253, (253, (), [ (16387, 10, None, "IID('{2B2A8E20-833D-4F83-B40C-B4EF4F934234}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'PointCollection' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{6BEF9B6B-4708-445E-A3B5-0D65BA69F749}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'FileName' , 'pVal' , ), 255, (255, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'FileName' , 'pVal' , ), 255, (255, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
]

IGeometrySplineSurface_vtables_dispatch_ = 1
IGeometrySplineSurface_vtables_ = [
]

IGeometryTorus_vtables_dispatch_ = 1
IGeometryTorus_vtables_ = [
	(( 'MajorRadius' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'MinorRadius' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'Angle' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
]

IGeometryWire_vtables_dispatch_ = 1
IGeometryWire_vtables_ = [
]

IGeometryWireCollection_vtables_dispatch_ = 1
IGeometryWireCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IGraphicMaterial_vtables_dispatch_ = 1
IGraphicMaterial_vtables_ = [
	(( 'Color' , 'oleColor' , ), 51, (51, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Color' , 'oleColor' , ), 51, (51, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Ambient' , 'Ambient' , ), 52, (52, (), [ (4, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Ambient' , 'Ambient' , ), 52, (52, (), [ (16388, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Diffuse' , 'Diffuse' , ), 53, (53, (), [ (4, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'Diffuse' , 'Diffuse' , ), 53, (53, (), [ (16388, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'Specular' , 'Specular' , ), 54, (54, (), [ (4, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'Specular' , 'Specular' , ), 54, (54, (), [ (16388, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'Shininess' , 'Shininess' , ), 55, (55, (), [ (4, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'Shininess' , 'Shininess' , ), 55, (55, (), [ (16388, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'Transparency' , 'Transparency' , ), 56, (56, (), [ (4, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'Transparency' , 'Transparency' , ), 56, (56, (), [ (16388, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Reflectivity' , 'Reflectivity' , ), 57, (57, (), [ (4, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Reflectivity' , 'Reflectivity' , ), 57, (57, (), [ (16388, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
]

IGraphicProperty_vtables_dispatch_ = 1
IGraphicProperty_vtables_ = [
	(( 'EachRenderMode' , 'pVal' , ), 51, (51, (), [ (3, 1, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}')") , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'EachRenderMode' , 'pVal' , ), 51, (51, (), [ (16387, 10, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Color' , 'pVal' , ), 52, (52, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Color' , 'pVal' , ), 52, (52, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Transparency' , ), 53, (53, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'ApplyCuttingPlane' , 'flag' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'ApplyCuttingPlane' , 'flag' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseReflection' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UsePicture' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'Picture' , ), 57, (57, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
]

IGraphicPropertyBody_vtables_dispatch_ = 1
IGraphicPropertyBody_vtables_ = [
	(( 'EachRenderMode' , 'pVal' , ), 51, (51, (), [ (3, 1, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}')") , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'EachRenderMode' , 'pVal' , ), 51, (51, (), [ (16387, 10, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Color' , 'pVal' , ), 52, (52, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Color' , 'pVal' , ), 52, (52, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Transparency' , 'pVal' , ), 53, (53, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'Transparency' , 'pVal' , ), 53, (53, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseReflection' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UsePicture' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'Picture' , ), 56, (56, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
]

IGraphicPropertyGeometry_vtables_dispatch_ = 1
IGraphicPropertyGeometry_vtables_ = [
	(( 'EachRenderMode' , 'pVal' , ), 51, (51, (), [ (3, 1, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}')") , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'EachRenderMode' , 'pVal' , ), 51, (51, (), [ (16387, 10, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Color' , 'pVal' , ), 52, (52, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Color' , 'pVal' , ), 52, (52, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Transparency' , 'pVal' , ), 53, (53, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'Transparency' , 'pVal' , ), 53, (53, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseReflection' , 'flag' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseReflection' , 'flag' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UsePicture' , 'flag' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UsePicture' , 'flag' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'Picture' , 'pVal' , ), 56, (56, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'Picture' , 'pVal' , ), 56, (56, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
]

IGraphicPropertySubSystem_vtables_dispatch_ = 1
IGraphicPropertySubSystem_vtables_ = [
	(( 'EachRenderMode' , 'pVal' , ), 51, (51, (), [ (3, 1, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}')") , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'EachRenderMode' , 'pVal' , ), 51, (51, (), [ (16387, 10, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Color' , ), 52, (52, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Transparency' , ), 53, (53, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseReflection' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UsePicture' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'Picture' , ), 56, (56, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
]

IGroup_vtables_dispatch_ = 1
IGroup_vtables_ = [
	(( 'UpdateAllProperties' , ), 201, (201, (), [ ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'SetLayerNumber' , 'iVal' , ), 202, (202, (), [ (19, 1, None, None) , ], 1 , 1 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'EachRenderMode' , 'pVal' , ), 203, (203, (), [ (3, 1, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}')") , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'EachRenderMode' , 'pVal' , ), 203, (203, (), [ (16387, 10, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147EC}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'UpdateActiveFlagOfAllEntities' , 'Val' , ), 204, (204, (), [ (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
]

IGroupBeam_vtables_dispatch_ = 1
IGroupBeam_vtables_ = [
	(( 'YoungsModulus' , 'pVal' , ), 250, (250, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'ShearModulus' , 'pVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'InertiaPropertyInput' , 'pVal' , ), 252, (252, (), [ (3, 1, None, "IID('{B7ABA4A0-E416-4A90-B5AA-B2645B25A290}')") , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'InertiaPropertyInput' , 'pVal' , ), 252, (252, (), [ (16387, 10, None, "IID('{B7ABA4A0-E416-4A90-B5AA-B2645B25A290}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'Density' , 'pVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'TotalMass' , 'pVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'NodeThickness' , 'pVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'BeamCrossSectionType' , 'pVal' , ), 256, (256, (), [ (3, 1, None, "IID('{01406737-1007-468F-A0BC-A2F7C43239CF}')") , ], 1 , 4 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'BeamCrossSectionType' , 'pVal' , ), 256, (256, (), [ (16387, 10, None, "IID('{01406737-1007-468F-A0BC-A2F7C43239CF}')") , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'BeamCrossSection' , 'ppVal' , ), 257, (257, (), [ (16393, 10, None, "IID('{557175E7-72DD-447A-8DB1-319593C34BDC}')") , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'Ixx' , 'pVal' , ), 258, (258, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'Iyy' , 'pVal' , ), 259, (259, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'Izz' , 'pVal' , ), 260, (260, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'ShearAreaRatioY' , 'pVal' , ), 261, (261, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'ShearAreaRatioZ' , 'pVal' , ), 262, (262, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'CrossSectionArea' , 'pVal' , ), 263, (263, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'Color' , 'pVal' , ), 264, (264, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'Color' , 'pVal' , ), 264, (264, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'UseDampingMatrix' , 'pVal' , ), 266, (266, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'UseDampingMatrix' , 'pVal' , ), 266, (266, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'DampingMatrix' , 'i' , 'j' , 'pVal' , ), 267, (267, (), [ 
			 (3, 1, None, None) , (3, 1, None, None) , (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 1 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'ViscousDampingRatio' , 'pVal' , ), 268, (268, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'UseForceProperty' , 'pVal' , ), 269, (269, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'UseForceProperty' , 'pVal' , ), 269, (269, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'UseBodyProperty' , 'pVal' , ), 270, (270, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'UseBodyProperty' , 'pVal' , ), 270, (270, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'UpdateCrossSectionProperty' , ), 271, (271, (), [ ], 1 , 1 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'InitialVelocity' , 'ppVal' , ), 272, (272, (), [ (16393, 10, None, "IID('{15F99EF9-5DE4-423B-9F3B-86C8FA8D2A2A}')") , ], 1 , 2 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'AnimationDataScaling' , 'ppVal' , ), 273, (273, (), [ (16393, 10, None, "IID('{7DD7CE3F-EAC8-4324-9107-C4EDFF055B1C}')") , ], 1 , 2 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'CreateAnimationScalingFlag' , 'pVal' , ), 274, (274, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
	(( 'CreateAnimationScalingFlag' , 'pVal' , ), 274, (274, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 456 , (3, 0, None, None) , 0 , )),
	(( 'UseUpdateCrossSectionPropertyAutomatically' , 'flag' , ), 275, (275, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 464 , (3, 0, None, None) , 0 , )),
	(( 'UseUpdateCrossSectionPropertyAutomatically' , 'flag' , ), 275, (275, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 472 , (3, 0, None, None) , 0 , )),
]

IGroupGeneral_vtables_dispatch_ = 1
IGroupGeneral_vtables_ = [
	(( 'AddEntities' , 'arrayEntity' , ), 251, (251, (), [ (8204, 1, None, None) , ], 1 , 1 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'RemoveEntities' , 'arrayEntity' , ), 252, (252, (), [ (8204, 1, None, None) , ], 1 , 1 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'GroupEntities' , 'ppEntities' , ), 253, (253, (), [ (16393, 10, None, "IID('{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')") , ], 1 , 1 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
]

IGroupGeneralCollection_vtables_dispatch_ = 1
IGroupGeneralCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{3A5D8137-A29F-4A12-BADB-578397A6A582}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IGroupJointCMotion_vtables_dispatch_ = 1
IGroupJointCMotion_vtables_ = [
	(( 'RefMarker' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'GetJointTypeX' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{C8B1C218-2E2D-4A3C-8D54-1A876AFABF03}')") , ], 1 , 1 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'GetJointTypeY' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{C8B1C218-2E2D-4A3C-8D54-1A876AFABF03}')") , ], 1 , 1 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'GetJointTypeZ' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{C8B1C218-2E2D-4A3C-8D54-1A876AFABF03}')") , ], 1 , 1 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'GetJointTypeRX' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{C8B1C218-2E2D-4A3C-8D54-1A876AFABF03}')") , ], 1 , 1 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'GetJointTypeRY' , 'ppVal' , ), 256, (256, (), [ (16393, 10, None, "IID('{C8B1C218-2E2D-4A3C-8D54-1A876AFABF03}')") , ], 1 , 1 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'GetJointTypeRZ' , 'ppVal' , ), 257, (257, (), [ (16393, 10, None, "IID('{C8B1C218-2E2D-4A3C-8D54-1A876AFABF03}')") , ], 1 , 1 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplay' , 'pVal' , ), 258, (258, (), [ (3, 1, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}')") , ], 1 , 4 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplay' , 'pVal' , ), 258, (258, (), [ (16387, 10, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}')") , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'BaseMarker' , 'ppVal' , ), 259, (259, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'BaseMarker' , 'ppVal' , ), 259, (259, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'ActionMarker' , 'ppVal' , ), 260, (260, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'ActionMarker' , 'ppVal' , ), 260, (260, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'LayerName' , 'Name' , ), 261, (261, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'CopyBaseToAction' , 'Type' , ), 262, (262, (), [ (3, 1, None, "IID('{2F145D21-8E9A-44D4-9BAC-1EFBCB32570B}')") , ], 1 , 1 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'CopyActionToBase' , 'Type' , ), 263, (263, (), [ (3, 1, None, "IID('{2F145D21-8E9A-44D4-9BAC-1EFBCB32570B}')") , ], 1 , 1 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'GetPositionComponentBetweenTwoMarkers' , 'CartesianMotionType' , 'pVal' , ), 264, (264, (), [ (3, 1, None, "IID('{3045B1EE-0E1A-4818-870B-9953EA128E5F}')") , 
			 (16389, 10, None, None) , ], 1 , 1 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'UseOnCondition' , 'pVal' , ), 265, (265, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'UseOnCondition' , 'pVal' , ), 265, (265, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'OnCondition' , 'Text' , ), 266, (266, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'OnCondition' , 'Text' , ), 266, (266, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
]

IImprintEdgeOption_vtables_dispatch_ = 1
IImprintEdgeOption_vtables_ = [
	(( 'Direction' , 'pAxis' , ), 201, (201, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Direction' , 'pAxis' , ), 201, (201, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseBidirection' , 'pVal' , ), 202, (202, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseBidirection' , 'pVal' , ), 202, (202, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxDistance' , 'pVal' , ), 203, (203, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxDistance' , 'pVal' , ), 203, (203, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'MaxDistance' , 'pVal' , ), 204, (204, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'MaxDistance' , 'pVal' , ), 204, (204, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UseExtension' , 'pVal' , ), 205, (205, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseExtension' , 'pVal' , ), 205, (205, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
]

IInitialVelocity_vtables_dispatch_ = 1
IInitialVelocity_vtables_ = [
	(( 'TranslationalX' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalY' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalZ' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslationalX' , 'pVal' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslationalX' , 'pVal' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslationalY' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslationalY' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslationalZ' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslationalZ' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'RotationalX' , 'ppVal' , ), 57, (57, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'RotationalY' , 'ppVal' , ), 58, (58, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'RotationalZ' , 'ppVal' , ), 59, (59, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'UseRotationalX' , 'pVal' , ), 60, (60, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'UseRotationalX' , 'pVal' , ), 60, (60, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'UseRotationalY' , 'pVal' , ), 61, (61, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'UseRotationalY' , 'pVal' , ), 61, (61, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UseRotationalZ' , 'pVal' , ), 62, (62, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UseRotationalZ' , 'pVal' , ), 62, (62, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalRefMarker' , 'strMarker' , ), 63, (63, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalRefMarker' , 'strMarker' , ), 63, (63, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'RotationalRefMarker' , 'strMarker' , ), 64, (64, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'RotationalRefMarker' , 'strMarker' , ), 64, (64, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
]

IIntegratorProperty_vtables_dispatch_ = 1
IIntegratorProperty_vtables_ = [
	(( 'ErrorTolerance' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'InitialTimeStep' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'MaxTimeStep' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'SimulationStep' , 'ppVal' , ), 54, (54, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'SimulationTime' , 'ppVal' , ), 55, (55, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'MaxOrder' , 'ppVal' , ), 56, (56, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'IntegratorType' , 'IntegratorType' , ), 57, (57, (), [ (16387, 10, None, "IID('{2D0591FE-A04B-4B53-94E3-6A573BA83B02}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'IntegratorType' , 'IntegratorType' , ), 57, (57, (), [ (3, 1, None, "IID('{2D0591FE-A04B-4B53-94E3-6A573BA83B02}')") , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'NumericalDamping' , 'ppVal' , ), 58, (58, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseConstantStepSize' , 'pVal' , ), 59, (59, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UseConstantStepSize' , 'pVal' , ), 59, (59, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'ConstantStepSize' , 'ppVal' , ), 60, (60, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'JacobianEvaluation' , 'ppVal' , ), 61, (61, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'MatchSolvingStepSize' , 'pVal' , ), 62, (62, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'MatchSolvingStepSize' , 'pVal' , ), 62, (62, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'UseSaveEndTime' , 'pVal' , ), 63, (63, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UseSaveEndTime' , 'pVal' , ), 63, (63, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'SaveEndTime' , 'Name' , ), 64, (64, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'SaveEndTime' , 'Name' , ), 64, (64, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'UseImportEndTime' , 'pVal' , ), 65, (65, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'UseImportEndTime' , 'pVal' , ), 65, (65, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'ImportEndTime' , 'Name' , ), 66, (66, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'ImportEndTime' , 'Name' , ), 66, (66, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'MatchSimulationEndTime' , 'pVal' , ), 67, (67, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'MatchSimulationEndTime' , 'pVal' , ), 67, (67, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'PlotMultiplierStepFactor' , 'ppVal' , ), 68, (68, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'IncludeStaticAnalysis' , 'pVal' , ), 69, (69, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'IncludeStaticAnalysis' , 'pVal' , ), 69, (69, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'StaticAnalysis' , 'ppVal' , ), 70, (70, (), [ (16393, 10, None, "IID('{19BE442B-70CF-499D-9A4C-B6A3256CDD32}')") , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'IncludeEigenValueAnalysis' , 'pVal' , ), 71, (71, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'IncludeEigenValueAnalysis' , 'pVal' , ), 71, (71, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'EigenValueAnalysis' , 'ppVal' , ), 72, (72, (), [ (16393, 10, None, "IID('{54CB2134-5515-4D88-B997-71E72B9D7FFA}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'IncludeStateMatrix' , 'pVal' , ), 73, (73, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'IncludeStateMatrix' , 'pVal' , ), 73, (73, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'UseStopCondition' , 'pVal' , ), 74, (74, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'UseStopCondition' , 'pVal' , ), 74, (74, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'StopExpression' , 'ppVal' , ), 75, (75, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'StopExpression' , 'ppVal' , ), 75, (75, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionTimeOffset' , 'pVal' , ), 76, (76, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionTimeOffset' , 'pVal' , ), 76, (76, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'CreateInitialConditionEveryStep' , 'pVal' , ), 77, (77, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'CreateInitialConditionEveryStep' , 'pVal' , ), 77, (77, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'CreateInitialConditionPlotStep' , 'pVal' , ), 78, (78, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'CreateInitialConditionPlotStep' , 'pVal' , ), 78, (78, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'ICFCreationTypePlotStep' , 'pVal' , ), 79, (79, (), [ (16387, 10, None, "IID('{2853CDF8-0444-41AB-85F3-7FEF36A4CA2F}')") , ], 1 , 2 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'ICFCreationTypePlotStep' , 'pVal' , ), 79, (79, (), [ (3, 1, None, "IID('{2853CDF8-0444-41AB-85F3-7FEF36A4CA2F}')") , ], 1 , 4 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
]

IJoint_vtables_dispatch_ = 1
IJoint_vtables_ = [
]

IJointAtpoint_vtables_dispatch_ = 1
IJointAtpoint_vtables_ = [
]

IJointCartesianMotion_vtables_dispatch_ = 1
IJointCartesianMotion_vtables_ = [
	(( 'Condition' , 'pVal' , ), 301, (301, (), [ (3, 1, None, "IID('{B5BA635B-694D-449E-8D9F-B576507FF861}')") , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'Condition' , 'pVal' , ), 301, (301, (), [ (16387, 10, None, "IID('{B5BA635B-694D-449E-8D9F-B576507FF861}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'CartesianMotionType' , 'CartesianMotionType' , ), 302, (302, (), [ (3, 1, None, "IID('{3045B1EE-0E1A-4818-870B-9953EA128E5F}')") , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'CartesianMotionType' , 'CartesianMotionType' , ), 302, (302, (), [ (16387, 10, None, "IID('{3045B1EE-0E1A-4818-870B-9953EA128E5F}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'InitialPosition' , 'pVal' , ), 303, (303, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'InitialPosition' , 'pVal' , ), 303, (303, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'InitialVelocity' , 'pVal' , ), 304, (304, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'InitialVelocity' , 'pVal' , ), 304, (304, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'Text' , ), 305, (305, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'Text' , ), 305, (305, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 306, (306, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 306, (306, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'InitialPosition2' , 'ppVal' , ), 307, (307, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'InitialVelocity2' , 'ppVal' , ), 308, (308, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
]

IJointCollection_vtables_dispatch_ = 1
IJointCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{B9173DAD-05DD-4037-9367-726DDDEE988E}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IJointConstantVelocity_vtables_dispatch_ = 1
IJointConstantVelocity_vtables_ = [
]

IJointCurveOnCurve_vtables_dispatch_ = 1
IJointCurveOnCurve_vtables_ = [
	(( 'ActionCurve' , 'ppVal' , ), 301, (301, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'ActionCurve' , 'ppVal' , ), 301, (301, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'ActionInitialPosition' , 'ppVal' , ), 302, (302, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'ActionInitialVelocity' , 'ppVal' , ), 303, (303, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'BaseCurve' , 'ppVal' , ), 304, (304, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'BaseCurve' , 'ppVal' , ), 304, (304, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'BaseInitialPosition' , 'ppVal' , ), 305, (305, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'BaseInitialVelocity' , 'ppVal' , ), 306, (306, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'UseFriction' , 'pVal' , ), 307, (307, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'UseFriction' , 'pVal' , ), 307, (307, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'Friction' , 'ppVal' , ), 308, (308, (), [ (16393, 10, None, "IID('{8EFA806E-0CE1-406E-B3FA-E2CAFB1D3308}')") , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'ActionCurveSegmentOption' , 'ppVal' , ), 309, (309, (), [ (16393, 10, None, "IID('{C86088A5-C799-4E35-B0F6-78D60243C544}')") , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'BaseCurveSegmentOption' , 'ppVal' , ), 310, (310, (), [ (16393, 10, None, "IID('{C86088A5-C799-4E35-B0F6-78D60243C544}')") , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
]

IJointCylindrical_vtables_dispatch_ = 1
IJointCylindrical_vtables_ = [
	(( 'UseInitialCondition' , 'pVal' , ), 301, (301, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialCondition' , 'pVal' , ), 301, (301, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'InitialTranslationalPosition' , 'ppVal' , ), 302, (302, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'InitialTranslationalVelocity' , 'ppVal' , ), 303, (303, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'InitialRotationalPosition' , 'ppVal' , ), 304, (304, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'InitialRotationalVelocity' , 'ppVal' , ), 305, (305, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslationalMotion' , 'pVal' , ), 306, (306, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslationalMotion' , 'pVal' , ), 306, (306, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalMotion' , 'ppVal' , ), 307, (307, (), [ (16393, 10, None, "IID('{47F4E55C-4291-4251-866A-98A74112D266}')") , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'UseRotationalMotion' , 'pVal' , ), 308, (308, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'UseRotationalMotion' , 'pVal' , ), 308, (308, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'RotationalMotion' , 'ppVal' , ), 309, (309, (), [ (16393, 10, None, "IID('{47F4E55C-4291-4251-866A-98A74112D266}')") , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'UseFriction' , 'pVal' , ), 310, (310, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'UseFriction' , 'pVal' , ), 310, (310, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'Friction' , 'ppVal' , ), 312, (312, (), [ (16393, 10, None, "IID('{AB2E1933-9D6C-4FD7-BCA5-BA0D2EC0DD3D}')") , ], 1 , 2 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'UseStrictlyEnforceInitialConditions' , 'pVal' , ), 313, (313, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'UseStrictlyEnforceInitialConditions' , 'pVal' , ), 313, (313, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
]

IJointCylindricalFriction_vtables_dispatch_ = 1
IJointCylindricalFriction_vtables_ = [
	(( 'PreForce' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'PreTorque' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'PinRadius' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'MaxFrictionForce' , 'ppVal' , ), 104, (104, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionForce' , 'pVal' , ), 105, (105, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionForce' , 'pVal' , ), 105, (105, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'MaxFrictionTorque' , 'ppVal' , ), 106, (106, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionTorque' , 'pVal' , ), 107, (107, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionTorque' , 'pVal' , ), 107, (107, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'UseBendingMoment' , 'pVal' , ), 108, (108, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'UseBendingMoment' , 'pVal' , ), 108, (108, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'OverlapDelta' , 'ppVal' , ), 109, (109, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'OverlapMode' , 'pVal' , ), 110, (110, (), [ (3, 1, None, "IID('{6EE17961-4865-4EF4-B2F2-E28A05B2BD31}')") , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'OverlapMode' , 'pVal' , ), 110, (110, (), [ (16387, 10, None, "IID('{6EE17961-4865-4EF4-B2F2-E28A05B2BD31}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
]

IJointDistance_vtables_dispatch_ = 1
IJointDistance_vtables_ = [
]

IJointFixed_vtables_dispatch_ = 1
IJointFixed_vtables_ = [
	(( 'UseAdvancedConnectionFlexibleBody' , 'pVal' , ), 301, (301, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'UseAdvancedConnectionFlexibleBody' , 'pVal' , ), 301, (301, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
]

IJointFriction_vtables_dispatch_ = 1
IJointFriction_vtables_ = [
	(( 'AbsoluteVelocityThreshold' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'DynamicFrictionCoefficient' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'MaxStictionDeformation' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'StaticFrictionCoefficient' , 'ppVal' , ), 54, (54, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseReactionForce' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UseReactionForce' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseSliding' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseSliding' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UseStiction' , 'pVal' , ), 57, (57, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseStiction' , 'pVal' , ), 57, (57, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
]

IJointFrictionWithoutStiction_vtables_dispatch_ = 1
IJointFrictionWithoutStiction_vtables_ = [
	(( 'AbsoluteVelocityThreshold' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'DynamicFrictionCoefficient' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'MaxFrictionForce' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'StaticFrictionCoefficient' , 'ppVal' , ), 56, (56, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionForce' , 'pVal' , ), 57, (57, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionForce' , 'pVal' , ), 57, (57, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
]

IJointInCMotionGroup_vtables_dispatch_ = 1
IJointInCMotionGroup_vtables_ = [
	(( 'Condition' , 'pVal' , ), 151, (151, (), [ (3, 1, None, "IID('{B5BA635B-694D-449E-8D9F-B576507FF861}')") , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Condition' , 'pVal' , ), 151, (151, (), [ (16387, 10, None, "IID('{B5BA635B-694D-449E-8D9F-B576507FF861}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Use' , 'pVal' , ), 152, (152, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Use' , 'pVal' , ), 152, (152, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'InitialPosition' , 'pVal' , ), 153, (153, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'InitialPosition' , 'pVal' , ), 153, (153, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'InitialVelocity' , 'pVal' , ), 154, (154, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'InitialVelocity' , 'pVal' , ), 154, (154, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'Text' , ), 155, (155, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'Text' , ), 155, (155, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'InitialPosition2' , 'ppVal' , ), 156, (156, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'InitialVelocity2' , 'ppVal' , ), 157, (157, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'OnCondition' , 'Text' , ), 158, (158, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'OnCondition' , 'Text' , ), 158, (158, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
]

IJointInline_vtables_dispatch_ = 1
IJointInline_vtables_ = [
]

IJointInplane_vtables_dispatch_ = 1
IJointInplane_vtables_ = [
	(( 'UseFriction' , 'pVal' , ), 301, (301, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'UseFriction' , 'pVal' , ), 301, (301, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'Friction' , 'ppVal' , ), 302, (302, (), [ (16393, 10, None, "IID('{B47415D4-8717-42A3-9F74-965184E44C73}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
]

IJointInplaneFriction_vtables_dispatch_ = 1
IJointInplaneFriction_vtables_ = [
	(( 'PreForce' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'PreTorque' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'BallRadius' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionForce' , 'pVal' , ), 104, (104, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionForce' , 'pVal' , ), 104, (104, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'MaxFrictionForce' , 'ppVal' , ), 105, (105, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionTorque' , 'pVal' , ), 106, (106, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionTorque' , 'pVal' , ), 106, (106, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'MaxFrictionTorque' , 'ppVal' , ), 107, (107, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
]

IJointOnOff_vtables_dispatch_ = 1
IJointOnOff_vtables_ = [
	(( 'UseTranslationalX' , 'pVal' , ), 301, (301, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslationalX' , 'pVal' , ), 301, (301, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslationalY' , 'pVal' , ), 302, (302, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslationalY' , 'pVal' , ), 302, (302, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslationalZ' , 'pVal' , ), 303, (303, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslationalZ' , 'pVal' , ), 303, (303, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'UseRotationalX' , 'pVal' , ), 304, (304, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'UseRotationalX' , 'pVal' , ), 304, (304, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'UseRotationalY' , 'pVal' , ), 305, (305, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'UseRotationalY' , 'pVal' , ), 305, (305, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'UseRotationalZ' , 'pVal' , ), 306, (306, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'UseRotationalZ' , 'pVal' , ), 306, (306, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'UseIncludeOnCondition' , 'pVal' , ), 307, (307, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'UseIncludeOnCondition' , 'pVal' , ), 307, (307, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'Text' , ), 308, (308, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'Text' , ), 308, (308, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
]

IJointOrientation_vtables_dispatch_ = 1
IJointOrientation_vtables_ = [
]

IJointParallel_vtables_dispatch_ = 1
IJointParallel_vtables_ = [
]

IJointPerpendicular_vtables_dispatch_ = 1
IJointPerpendicular_vtables_ = [
]

IJointPlanar_vtables_dispatch_ = 1
IJointPlanar_vtables_ = [
	(( 'UseFriction' , 'pVal' , ), 301, (301, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'UseFriction' , 'pVal' , ), 301, (301, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'Friction' , 'ppVal' , ), 302, (302, (), [ (16393, 10, None, "IID('{95F6FC38-9D37-4059-8037-EFF038F04EA5}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
]

IJointPlanarFriction_vtables_dispatch_ = 1
IJointPlanarFriction_vtables_ = [
	(( 'PreForce' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'PreTorque' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'FrictionArm' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionForce' , 'pVal' , ), 104, (104, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionForce' , 'pVal' , ), 104, (104, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'MaxFrictionForce' , 'ppVal' , ), 105, (105, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionTorque' , 'pVal' , ), 106, (106, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionTorque' , 'pVal' , ), 106, (106, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'MaxFrictionTorque' , 'ppVal' , ), 107, (107, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
]

IJointPointOnCurve_vtables_dispatch_ = 1
IJointPointOnCurve_vtables_ = [
	(( 'Curve' , 'ppVal' , ), 301, (301, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'Curve' , 'ppVal' , ), 301, (301, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialCondition' , 'pVal' , ), 302, (302, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialCondition' , 'pVal' , ), 302, (302, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'InitialPosition' , 'ppVal' , ), 303, (303, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'InitialVelocity' , 'ppVal' , ), 304, (304, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'UseMotion' , 'pVal' , ), 305, (305, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'UseMotion' , 'pVal' , ), 305, (305, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'Motion' , 'ppVal' , ), 306, (306, (), [ (16393, 10, None, "IID('{7568D19B-7019-4ABF-A18C-D41C8C39E7CE}')") , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'UseFriction' , 'pVal' , ), 307, (307, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'UseFriction' , 'pVal' , ), 307, (307, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'Friction' , 'ppVal' , ), 308, (308, (), [ (16393, 10, None, "IID('{8EFA806E-0CE1-406E-B3FA-E2CAFB1D3308}')") , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'CurveSegmentOption' , 'ppVal' , ), 309, (309, (), [ (16393, 10, None, "IID('{C86088A5-C799-4E35-B0F6-78D60243C544}')") , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
]

IJointPointOnCurveFriction_vtables_dispatch_ = 1
IJointPointOnCurveFriction_vtables_ = [
	(( 'DynamicFrictionCoefficient' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'DynamicThresholdVelocity' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'StaticFrictionCoefficient' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'StaticThresholdVelocity' , 'ppVal' , ), 104, (104, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'MaxFrictionForce' , 'ppVal' , ), 105, (105, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionForce' , 'pVal' , ), 106, (106, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionForce' , 'pVal' , ), 106, (106, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
]

IJointPointOnSurface_vtables_dispatch_ = 1
IJointPointOnSurface_vtables_ = [
	(( 'Surface' , 'ppVal' , ), 301, (301, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'Surface' , 'ppVal' , ), 301, (301, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'UVSurfaceOption' , 'ppVal' , ), 303, (303, (), [ (16393, 10, None, "IID('{6822B8AE-A40F-474E-A2FA-39B3BBCBD54C}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
]

IJointRevolute_vtables_dispatch_ = 1
IJointRevolute_vtables_ = [
	(( 'UseInitialCondition' , 'pVal' , ), 301, (301, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialCondition' , 'pVal' , ), 301, (301, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'InitialPosition' , 'ppVal' , ), 302, (302, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'InitialVelocity' , 'ppVal' , ), 303, (303, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'UseMotion' , 'pVal' , ), 304, (304, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'UseMotion' , 'pVal' , ), 304, (304, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'Motion' , 'ppVal' , ), 305, (305, (), [ (16393, 10, None, "IID('{47F4E55C-4291-4251-866A-98A74112D266}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'FrictionType' , 'FrictionType' , ), 306, (306, (), [ (3, 1, None, "IID('{D341C102-3CD4-45ED-8686-165AEB3E3A30}')") , ], 1 , 4 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'FrictionType' , 'FrictionType' , ), 306, (306, (), [ (16387, 10, None, "IID('{D341C102-3CD4-45ED-8686-165AEB3E3A30}')") , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'FrictionWithoutStiction' , 'ppVal' , ), 308, (308, (), [ (16393, 10, None, "IID('{C654350F-C53C-474B-84B2-BC299BEA04F2}')") , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'Friction' , 'ppVal' , ), 310, (310, (), [ (16393, 10, None, "IID('{CDA07E89-2140-42DA-A007-75583AA575E5}')") , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'UseStrictlyEnforceInitialConditions' , 'pVal' , ), 311, (311, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'UseStrictlyEnforceInitialConditions' , 'pVal' , ), 311, (311, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
]

IJointRevoluteFriction_vtables_dispatch_ = 1
IJointRevoluteFriction_vtables_ = [
	(( 'BendingReactionArm' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'FrictionArm' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'MaxFrictionTorque' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'PinRadius' , 'ppVal' , ), 104, (104, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'PreTorque' , 'ppVal' , ), 105, (105, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'UseBendingMoment' , 'pVal' , ), 106, (106, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UseBendingMoment' , 'pVal' , ), 106, (106, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionTorque' , 'pVal' , ), 107, (107, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionTorque' , 'pVal' , ), 107, (107, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
]

IJointRevoluteFrictionWithoutStiction_vtables_dispatch_ = 1
IJointRevoluteFrictionWithoutStiction_vtables_ = [
	(( 'InnerRadiusFactor' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'OuterRadiusFactor' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'AxialPreloadForce' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'RadialPreloadForce' , 'ppVal' , ), 104, (104, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
]

IJointScrew_vtables_dispatch_ = 1
IJointScrew_vtables_ = [
	(( 'Pitch' , 'ppVal' , ), 301, (301, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'UseFriction' , 'pVal' , ), 302, (302, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'UseFriction' , 'pVal' , ), 302, (302, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'Friction' , 'ppVal' , ), 303, (303, (), [ (16393, 10, None, "IID('{990B9133-FDB7-45DB-8398-8297BC724D91}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
]

IJointScrewFriction_vtables_dispatch_ = 1
IJointScrewFriction_vtables_ = [
	(( 'PreForce' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'PreTorque' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'PinRadius' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'MaxFrictionForce' , 'ppVal' , ), 104, (104, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionForce' , 'pVal' , ), 105, (105, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionForce' , 'pVal' , ), 105, (105, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'MaxFrictionTorque' , 'ppVal' , ), 106, (106, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionTorque' , 'pVal' , ), 107, (107, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionTorque' , 'pVal' , ), 107, (107, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
]

IJointSpherical_vtables_dispatch_ = 1
IJointSpherical_vtables_ = [
	(( 'UseFriction' , 'pVal' , ), 301, (301, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'UseFriction' , 'pVal' , ), 301, (301, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'Friction' , 'ppVal' , ), 303, (303, (), [ (16393, 10, None, "IID('{199E4653-210A-455C-96DA-27DF86C5DA3E}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
]

IJointSphericalFriction_vtables_dispatch_ = 1
IJointSphericalFriction_vtables_ = [
	(( 'PreTorque' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'BallRadius' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'MaxFrictionTorque' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionTorque' , 'pVal' , ), 104, (104, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionTorque' , 'pVal' , ), 104, (104, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
]

IJointTranslational_vtables_dispatch_ = 1
IJointTranslational_vtables_ = [
	(( 'UseInitialCondition' , 'pVal' , ), 301, (301, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialCondition' , 'pVal' , ), 301, (301, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'InitialPosition' , 'ppVal' , ), 302, (302, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'InitialVelocity' , 'ppVal' , ), 303, (303, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'UseMotion' , 'pVal' , ), 304, (304, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'UseMotion' , 'pVal' , ), 304, (304, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'Motion' , 'ppVal' , ), 305, (305, (), [ (16393, 10, None, "IID('{47F4E55C-4291-4251-866A-98A74112D266}')") , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'FrictionType' , 'FrictionType' , ), 306, (306, (), [ (3, 1, None, "IID('{D341C102-3CD4-45ED-8686-165AEB3E3A30}')") , ], 1 , 4 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'FrictionType' , 'FrictionType' , ), 306, (306, (), [ (16387, 10, None, "IID('{D341C102-3CD4-45ED-8686-165AEB3E3A30}')") , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'FrictionWithoutStiction' , 'ppVal' , ), 308, (308, (), [ (16393, 10, None, "IID('{3292939F-35E3-469F-A8AE-7F9234326B1E}')") , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'Friction' , 'ppVal' , ), 310, (310, (), [ (16393, 10, None, "IID('{731EF6BF-6DC5-4959-84E0-1EE7C685A1CE}')") , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'UseStrictlyEnforceInitialConditions' , 'pVal' , ), 311, (311, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'UseStrictlyEnforceInitialConditions' , 'pVal' , ), 311, (311, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
]

IJointTranslationalFriction_vtables_dispatch_ = 1
IJointTranslationalFriction_vtables_ = [
	(( 'MaxFrictionForce' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'OverlapDelta' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'OverlapMode' , 'pVal' , ), 103, (103, (), [ (3, 1, None, "IID('{6EE17961-4865-4EF4-B2F2-E28A05B2BD31}')") , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'OverlapMode' , 'pVal' , ), 103, (103, (), [ (16387, 10, None, "IID('{6EE17961-4865-4EF4-B2F2-E28A05B2BD31}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'PreForce' , 'ppVal' , ), 104, (104, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'ReactionArm' , 'ppVal' , ), 105, (105, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UseBendingMoment' , 'pVal' , ), 106, (106, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UseBendingMoment' , 'pVal' , ), 106, (106, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionForce' , 'pVal' , ), 107, (107, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionForce' , 'pVal' , ), 107, (107, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'UseTorsionalMoment' , 'pVal' , ), 108, (108, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'UseTorsionalMoment' , 'pVal' , ), 108, (108, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
]

IJointTranslationalFrictionWithoutStiction_vtables_dispatch_ = 1
IJointTranslationalFrictionWithoutStiction_vtables_ = [
	(( 'CrossSectionType' , 'CrossSectionType' , ), 101, (101, (), [ (3, 1, None, "IID('{70C16F1F-3771-4B4C-8D3F-4AB432578E34}')") , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'CrossSectionType' , 'CrossSectionType' , ), 101, (101, (), [ (16387, 10, None, "IID('{70C16F1F-3771-4B4C-8D3F-4AB432578E34}')") , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'HeightFactor' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'WidthFactor' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'XAxisPreloadForce' , 'ppVal' , ), 104, (104, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'YAxisPreloadForce' , 'ppVal' , ), 105, (105, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'RadialFactor' , 'ppVal' , ), 106, (106, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'RadialPreload' , 'ppVal' , ), 107, (107, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
]

IJointUniversal_vtables_dispatch_ = 1
IJointUniversal_vtables_ = [
	(( 'UseActionFriction' , 'pVal' , ), 301, (301, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'UseActionFriction' , 'pVal' , ), 301, (301, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'ActionFriction' , 'ppVal' , ), 303, (303, (), [ (16393, 10, None, "IID('{CCE1F47D-59F6-428E-91D7-65F36D446B05}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'UseBaseFriction' , 'pVal' , ), 304, (304, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'UseBaseFriction' , 'pVal' , ), 304, (304, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'BaseFriction' , 'ppVal' , ), 306, (306, (), [ (16393, 10, None, "IID('{CCE1F47D-59F6-428E-91D7-65F36D446B05}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
]

IJointUniversalFriction_vtables_dispatch_ = 1
IJointUniversalFriction_vtables_ = [
	(( 'PreTorque' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'FrictionArm' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'PinRadius' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'BendingReactionArm' , 'ppVal' , ), 104, (104, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'MaxFrictionTorque' , 'ppVal' , ), 105, (105, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionTorque' , 'pVal' , ), 106, (106, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFrictionTorque' , 'pVal' , ), 106, (106, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UseBendingMoment' , 'pVal' , ), 107, (107, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'UseBendingMoment' , 'pVal' , ), 107, (107, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
]

ILayer_vtables_dispatch_ = 1
ILayer_vtables_ = [
	(( 'LayerNumber' , 'pVal' , ), 151, (151, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Name' , 'Name' , ), 152, (152, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Name' , 'Name' , ), 152, (152, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Visible' , 'pVal' , ), 153, (153, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Visible' , 'pVal' , ), 153, (153, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
]

ILayerCollection_vtables_dispatch_ = 1
ILayerCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{2A7142D5-69B9-47B0-9E94-6E657374E32E}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

ILayerSetting_vtables_dispatch_ = 1
ILayerSetting_vtables_ = [
	(( 'WorkingLayer' , 'pVal' , ), 101, (101, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'WorkingLayer' , 'pVal' , ), 101, (101, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'LayerFilter' , 'pVal' , ), 102, (102, (), [ (3, 1, None, "IID('{03B0D20A-818B-4164-9C9F-2DA6B7E950B3}')") , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'LayerFilter' , 'pVal' , ), 102, (102, (), [ (16387, 10, None, "IID('{03B0D20A-818B-4164-9C9F-2DA6B7E950B3}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'VisibleLayer' , 'pVal' , ), 103, (103, (), [ (24595, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'VisibleLayer' , 'pVal' , ), 103, (103, (), [ (8211, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'LayerCollection' , 'pVal' , ), 104, (104, (), [ (16393, 10, None, "IID('{3741CF5D-7BBB-4AE9-9FFB-EA01CBB4C991}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'VisibleLayerCollection' , 'pVal' , ), 105, (105, (), [ (16393, 10, None, "IID('{3741CF5D-7BBB-4AE9-9FFB-EA01CBB4C991}')") , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UseUserDefinedLayer' , 'pVal' , ), 106, (106, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseUserDefinedLayer' , 'pVal' , ), 106, (106, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'LayerCollectionWithEntities' , 'pVal' , ), 107, (107, (), [ (16393, 10, None, "IID('{3741CF5D-7BBB-4AE9-9FFB-EA01CBB4C991}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'SelectEntitiesInLayers' , 'pVal' , ), 108, (108, (), [ (8211, 1, None, None) , ], 1 , 1 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'GetEntitiesInLayers' , 'pVal' , 'ppResult' , ), 109, (109, (), [ (8211, 1, None, None) , 
			 (16393, 10, None, "IID('{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')") , ], 1 , 1 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'ShowAll' , 'pVal' , ), 110, (110, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'ShowAll' , 'pVal' , ), 110, (110, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
]

ILightControl_vtables_dispatch_ = 1
ILightControl_vtables_ = [
	(( 'Use' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Use' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Name' , 'strName' , ), 52, (52, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Name' , 'strName' , ), 52, (52, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'GetDirection' , 'ppSafeArray' , ), 53, (53, (), [ (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'SetDirection' , 'pSafeArray' , ), 54, (54, (), [ (8197, 1, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'Intensity' , 'pVal' , ), 55, (55, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'Intensity' , 'pVal' , ), 55, (55, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'Lock' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'Lock' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
]

ILightControlCollection_vtables_dispatch_ = 1
ILightControlCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{2D204501-DF2E-4EAA-90E7-02756A698739}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IMFTireImportOption_vtables_dispatch_ = 1
IMFTireImportOption_vtables_ = [
	(( 'Length' , 'Value' , ), 151, (151, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Length' , 'Value' , ), 151, (151, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Width' , 'Value' , ), 152, (152, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Width' , 'Value' , ), 152, (152, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'LeftLength' , 'Value' , ), 153, (153, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'LeftLength' , 'Value' , ), 153, (153, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'RightLength' , 'Value' , ), 154, (154, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'RightLength' , 'Value' , ), 154, (154, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'NumOfSegments' , 'Value' , ), 155, (155, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'NumOfSegments' , 'Value' , ), 155, (155, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UseZ_Left' , 'pVal' , ), 156, (156, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'UseZ_Left' , 'pVal' , ), 156, (156, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'UseZ_Rigth' , 'pVal' , ), 157, (157, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'UseZ_Rigth' , 'pVal' , ), 157, (157, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
]

IManager_vtables_dispatch_ = 1
IManager_vtables_ = [
]

IMarker_vtables_dispatch_ = 1
IMarker_vtables_ = [
	(( 'RefFrame' , 'ppVal' , ), 151, (151, (), [ (16393, 10, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'TraceLineColor' , 'pVal' , ), 152, (152, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'TraceLineColor' , 'pVal' , ), 152, (152, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'TraceLineWidth' , 'pVal' , ), 153, (153, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'TraceLineWidth' , 'pVal' , ), 153, (153, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'ShowTrace' , 'Val' , ), 154, (154, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'ShowTrace' , 'Val' , ), 154, (154, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'FFlexData' , 'ppVal' , ), 155, (155, (), [ (16393, 10, None, "IID('{A2FF24EE-9333-4BFF-9DC3-27E495B46ACD}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'LayerNumber' , 'pVal' , ), 156, (156, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'LayerNumber' , 'pVal' , ), 156, (156, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'LayerName' , 'Name' , ), 157, (157, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'RFlexData' , 'ppVal' , ), 158, (158, (), [ (16393, 10, None, "IID('{A2FF24EE-9333-4BFF-9DC3-17E496B46ACD}')") , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'MotherBody' , 'ppVal' , ), 159, (159, (), [ (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'MotherBody' , 'ppVal' , ), 159, (159, (), [ (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 4 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'TraceRefMarker' , 'ppVal' , ), 160, (160, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'TraceRefMarker' , 'ppVal' , ), 160, (160, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'TraceUse' , 'Val' , ), 161, (161, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'TraceUse' , 'Val' , ), 161, (161, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
]

IMarkerCollection_vtables_dispatch_ = 1
IMarkerCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IMarkerFFlexData_vtables_dispatch_ = 1
IMarkerFFlexData_vtables_ = [
	(( 'NodeID' , 'pVal' , ), 151, (151, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'NodeID' , 'pVal' , ), 151, (151, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'DisplacementX' , 'pVal' , ), 153, (153, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'DisplacementY' , 'pVal' , ), 154, (154, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'DisplacementZ' , 'pVal' , ), 155, (155, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'SetDisplacement' , 'x' , 'y' , 'z' , ), 156, (156, (), [ 
			 (5, 1, None, None) , (5, 0, None, None) , (5, 0, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'SetNearestNode' , ), 157, (157, (), [ ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
]

IMarkerRFlexData_vtables_dispatch_ = 1
IMarkerRFlexData_vtables_ = [
	(( 'NodeID' , 'pVal' , ), 151, (151, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'NodeID' , 'pVal' , ), 151, (151, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'DisplacementX' , 'pVal' , ), 153, (153, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'DisplacementY' , 'pVal' , ), 154, (154, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'DisplacementZ' , 'pVal' , ), 155, (155, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'SetDisplacement' , 'x' , 'y' , 'z' , ), 156, (156, (), [ 
			 (5, 1, None, None) , (5, 0, None, None) , (5, 0, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'SetNearestNode' , ), 157, (157, (), [ ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
]

IMassProperty_vtables_dispatch_ = 1
IMassProperty_vtables_ = [
	(( 'Mass' , 'pVal' , ), 51, (51, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Ixx' , 'pVal' , ), 52, (52, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Iyy' , 'pVal' , ), 53, (53, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Izz' , 'pVal' , ), 54, (54, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Ixy' , 'pVal' , ), 55, (55, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'Iyz' , 'pVal' , ), 56, (56, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'Izx' , 'pVal' , ), 57, (57, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'PositionOfMassCenter' , 'ppSafeArray' , ), 58, (58, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
]

IMaterialProperty_vtables_dispatch_ = 1
IMaterialProperty_vtables_ = [
	(( 'Density' , 'pVal' , ), 151, (151, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Density' , 'pVal' , ), 151, (151, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'YoungsModulus' , 'pVal' , ), 152, (152, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'YoungsModulus' , 'pVal' , ), 152, (152, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'PoissonRatio' , 'pVal' , ), 153, (153, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'PoissonRatio' , 'pVal' , ), 153, (153, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
]

IMaterialPropertyCollection_vtables_dispatch_ = 1
IMaterialPropertyCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IMeasure_vtables_dispatch_ = 1
IMeasure_vtables_ = [
	(( 'CalculateDistanceWithPoints' , 'pFirstPt' , 'pSecondPt' , 'pVal' , ), 51, (51, (), [ 
			 (8197, 1, None, None) , (8197, 1, None, None) , (16389, 10, None, None) , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'CalculateDiplacementWithPoints' , 'pFirstPt' , 'pSecondPt' , 'pRef' , 'ppSafeArray' , 
			 ), 52, (52, (), [ (8197, 1, None, None) , (8197, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'CalculateDistanceWithGeometries' , 'pGeoFirst' , 'pGeoSecond' , 'pVal' , ), 53, (53, (), [ 
			 (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16389, 10, None, None) , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'CalculateAngleWithThreePointsInDegrees' , 'pFirstPt' , 'pSecondPt' , 'pThirdPt' , 'pVal' , 
			 ), 55, (55, (), [ (8197, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , (16389, 10, None, None) , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'CalculateAngleWithThreePointsInRadians' , 'pFirstPt' , 'pSecondPt' , 'pThirdPt' , 'pVal' , 
			 ), 56, (56, (), [ (8197, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , (16389, 10, None, None) , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'CalculateRadiusWithGeometry' , 'pGeo' , 'pVal' , ), 57, (57, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (16389, 10, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'CalculateMass' , 'bodyArray' , 'Val' , ), 58, (58, (), [ (8204, 1, None, None) , 
			 (16393, 10, None, "IID('{931EE5BD-3011-4120-AC01-FC90D67BF3C0}')") , ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'CalculateMassWithMarker' , 'bodyArray' , 'pVal' , 'ppVal' , ), 59, (59, (), [ 
			 (8204, 1, None, None) , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (16393, 10, None, "IID('{931EE5BD-3011-4120-AC01-FC90D67BF3C0}')") , ], 1 , 1 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'CalculateDistanceWithGeometriesEx' , 'pGeoFirst' , 'pGeoSecond' , 'pRef' , 'ppVal' , 
			 ), 60, (60, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{BE0FEA7A-B50D-48D9-A803-A198B40539A5}')") , ], 1 , 1 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'CalculateInterference' , 'pGeoFirst' , 'pGeoSecond' , 'InterferenceType' , ), 61, (61, (), [ 
			 (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16387, 10, None, "IID('{3B99D737-B642-4487-BF7C-07D9F95AE150}')") , ], 1 , 1 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'CalculateCircularGeometry' , 'pGeo' , 'pVal' , ), 62, (62, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (16393, 10, None, "IID('{CE7C473B-D7DB-4232-A2F1-41C059C9E0AD}')") , ], 1 , 1 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'GetNDivisionPoints' , 'pGeo' , 'Val' , 'pPoints' , ), 63, (63, (), [ 
			 (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (19, 1, None, None) , (24588, 10, None, None) , ], 1 , 1 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'GetNDivisionTangents' , 'pGeo' , 'Val' , 'pTangent' , ), 64, (64, (), [ 
			 (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (19, 1, None, None) , (24588, 10, None, None) , ], 1 , 1 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'GetNDivisionNormals' , 'pGeo' , 'Val' , 'pNormal' , ), 65, (65, (), [ 
			 (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (19, 1, None, None) , (24588, 10, None, None) , ], 1 , 1 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'GetIntersectionPoints' , 'pGeoFirst' , 'pGeoSecond' , 'pPoints' , ), 66, (66, (), [ 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (24588, 10, None, None) , ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'CalculateDistanceWithPointsEx' , 'pFirstPt' , 'pSecondPt' , 'pRef' , 'ppVal' , 
			 ), 67, (67, (), [ (8197, 1, None, None) , (8197, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{BE0FEA7A-B50D-48D9-A803-A198B40539A5}')") , ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'CalculateMassWithBodyPrincipalAxis' , 'bodyArray' , 'ppVal' , ), 68, (68, (), [ (8204, 1, None, None) , 
			 (16393, 10, None, "IID('{931EE5BD-3011-4120-AC01-FC90D67BF3C0}')") , ], 1 , 1 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
]

IMeasureCircularGeometryResult_vtables_dispatch_ = 1
IMeasureCircularGeometryResult_vtables_ = [
	(( 'Radius' , 'ppVal' , ), 101, (101, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'CenterPoint' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'ArcLength' , 'ppVal' , ), 103, (103, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
]

IMeasureDistanceResult_vtables_dispatch_ = 1
IMeasureDistanceResult_vtables_ = [
	(( 'Displacement' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Distance' , 'ppVal' , ), 102, (102, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'FirstPoint' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'SecondPoint' , 'ppVal' , ), 104, (104, (), [ (16393, 10, None, "IID('{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'MidPoint' , 'ppVal' , ), 105, (105, (), [ (16393, 10, None, "IID('{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
]

IMenuControl_vtables_dispatch_ = 1
IMenuControl_vtables_ = [
	(( 'SetVisible' , 'Val' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'AddMenuControl' , 'Type' , 'nId' , 'ppVal' , ), 52, (52, (), [ 
			 (3, 1, None, "IID('{66FF20E6-6D20-41E0-A180-C51C955F4367}')") , (3, 1, None, None) , (16393, 10, None, "IID('{B2F1CBE0-707D-4E0B-B080-546D4664CA2F}')") , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Caption' , 'pVal' , ), 53, (53, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Caption' , 'pVal' , ), 53, (53, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'ID' , 'pVal' , ), 54, (54, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'ID' , 'pVal' , ), 54, (54, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseBigIcon' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseBigIcon' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'SetIcon' , 'hIcon' , ), 56, (56, (), [ (16408, 1, None, None) , ], 1 , 1 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseProcessNetFunction' , 'pVal' , ), 57, (57, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UseProcessNetFunction' , 'pVal' , ), 57, (57, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetDllPath' , 'pVal' , ), 58, (58, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetDllPath' , 'pVal' , ), 58, (58, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetFunctionName' , 'pVal' , ), 59, (59, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetFunctionName' , 'pVal' , ), 59, (59, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'Description' , 'pVal' , ), 60, (60, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Description' , 'pVal' , ), 60, (60, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'Tooltip' , 'pVal' , ), 61, (61, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'Tooltip' , 'pVal' , ), 61, (61, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetType' , 'Type' , ), 62, (62, (), [ (3, 1, None, "IID('{3FBEE825-C5E1-4629-B3E2-3548E2C0CE7D}')") , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetType' , 'Type' , ), 62, (62, (), [ (16387, 10, None, "IID('{3FBEE825-C5E1-4629-B3E2-3548E2C0CE7D}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetScriptPath' , 'pVal' , ), 63, (63, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetScriptPath' , 'pVal' , ), 63, (63, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'SetIconFromFile' , 'pVal' , 'nX' , 'nY' , ), 64, (64, (), [ 
			 (8, 1, None, None) , (3, 1, None, None) , (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
]

IMessageFileSettings_vtables_dispatch_ = 1
IMessageFileSettings_vtables_ = [
	(( 'ModelVerification' , 'pVal' , ), 151, (151, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ModelVerification' , 'pVal' , ), 151, (151, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'SolverInformation' , 'pVal' , ), 152, (152, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'SolverInformation' , 'pVal' , ), 152, (152, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'JointInformation' , 'pVal' , ), 153, (153, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'JointInformation' , 'pVal' , ), 153, (153, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'AnalysisInformation' , 'pVal' , ), 154, (154, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'AnalysisInformation' , 'pVal' , ), 154, (154, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'ConstraintInformation' , 'pVal' , ), 155, (155, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'ConstraintInformation' , 'pVal' , ), 155, (155, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'IntegratorInformation' , 'pVal' , ), 156, (156, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'IntegratorInformation' , 'pVal' , ), 156, (156, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'RedundantConstraint' , 'pVal' , ), 157, (157, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'RedundantConstraint' , 'pVal' , ), 157, (157, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'ConstraintViolation' , 'pVal' , ), 158, (158, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'ConstraintViolation' , 'pVal' , ), 158, (158, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'IndependentCoordinate' , 'pVal' , ), 159, (159, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'IndependentCoordinate' , 'pVal' , ), 159, (159, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'AnalysisProcess' , 'pVal' , ), 160, (160, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'AnalysisProcess' , 'pVal' , ), 160, (160, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
]

IModelDocument_vtables_dispatch_ = 1
IModelDocument_vtables_ = [
	(( 'Name' , 'Name' , ), 51, (51, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'GetEntity' , 'strName' , 'pDataStorage' , 'ppResult' , ), 52, (52, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'GetDataStorage' , 'ppEntity' , ), 53, (53, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Redraw' , ), 54, (54, (), [ ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Model' , 'ppEntity' , ), 55, (55, (), [ (16393, 10, None, "IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'Analysis' , 'AnalysisMode' , ), 56, (56, (), [ (3, 1, None, "IID('{56FA6D10-B0D9-45CA-A83A-E2876147B24D}')") , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'FileSave' , 'strFile' , 'OverWrite' , 'bSuccess' , ), 57, (57, (), [ 
			 (8, 1, None, None) , (11, 1, None, None) , (16395, 10, None, None) , ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'FileImport' , 'strFile' , ), 58, (58, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'ChangeWorkingPlane' , 'WorkingPlaneType' , ), 59, (59, (), [ (3, 1, None, "IID('{2E0627DF-A118-47B1-9893-151A5DD49D5C}')") , ], 1 , 1 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'SettingSolverPriority' , 'SolverPriority' , ), 61, (61, (), [ (3, 1, None, "IID('{A4B2A37F-3197-4848-A257-435197F999EB}')") , ], 1 , 1 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'FileExport' , 'strFile' , 'OverWrite' , ), 62, (62, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'WorkingPlane' , 'pWorkingPlane' , ), 63, (63, (), [ (16393, 10, None, "IID('{7EE8FD42-208D-4F80-B89A-297D54D686DA}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'CreatePlotDocument' , 'PlotDocType' , 'ppDocument' , ), 64, (64, (), [ (3, 1, None, "IID('{AE0B58E8-F596-4F7B-B250-101FF3F7DC41}')") , 
			 (16393, 10, None, "IID('{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}')") , ], 1 , 1 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Select' , 'SelectType' , 'pEntity' , ), 65, (65, (), [ (3, 1, None, "IID('{5433A441-A3BB-49A0-8AF0-63D0B50D5333}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 1 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Paste' , 'PasteType' , 'strNamePrefix' , ), 66, (66, (), [ (3, 1, None, "IID('{C2EDA18E-0581-4678-A74B-1D04B182606F}')") , 
			 (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'Copy' , ), 67, (67, (), [ ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Delete' , ), 68, (68, (), [ ], 1 , 1 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'DeselectAll' , ), 69, (69, (), [ ], 1 , 1 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'SetOutputFileName' , 'strOuput' , ), 70, (70, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'Cut' , ), 71, (71, (), [ ], 1 , 1 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'CreateReferenceFrame' , 'ppResult' , ), 72, (72, (), [ (16393, 10, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , ], 1 , 1 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'Activate' , ), 74, (74, (), [ ], 1 , 1 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'ModelSetting' , 'ppVal' , ), 75, (75, (), [ (16393, 10, None, "IID('{0B9DFF92-6648-4BB9-83BA-9C6443B2F2CD}')") , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'ModelProperty' , 'ppVal' , ), 76, (76, (), [ (16393, 10, None, "IID('{54B0F80C-BD55-4F49-8E1A-D1D840603430}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'GetPath' , 'PathType' , 'pVal' , ), 77, (77, (), [ (3, 1, None, "IID('{EFF796F5-453C-4DD6-B555-F38A125DF37F}')") , 
			 (16392, 10, None, None) , ], 1 , 1 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'GetPlotData' , 'pDisp' , 'strData' , 'ppSafeArray' , ), 78, (78, (), [ 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (8, 1, None, None) , (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'ChangeDataStorage' , 'ppResult' , ), 79, (79, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 1 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'ClearUndoHistory' , ), 80, (80, (), [ ], 1 , 1 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'OpenDialog' , 'ppResult' , ), 81, (81, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 1 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'CloseDialog' , 'ppResult' , 'closeType' , ), 82, (82, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (3, 1, None, "IID('{21EADD02-A398-4F15-BF6A-174A93EE6850}')") , ], 1 , 1 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'CloseAllDialog' , ), 83, (83, (), [ ], 1 , 1 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'Fit' , ), 84, (84, (), [ ], 1 , 1 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'Validate' , 'pVal' , ), 85, (85, (), [ (16395, 10, None, None) , ], 1 , 1 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'SetUndoHistory' , 'pVal' , ), 86, (86, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'PostProcess' , ), 87, (87, (), [ ], 1 , 1 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'UpdateDatabaseWindow' , ), 88, (88, (), [ ], 1 , 1 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'SetModified' , ), 89, (89, (), [ ], 1 , 1 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'GetEntityFromFullName' , 'strFullName' , 'ppResult' , ), 90, (90, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 1 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'OwnerApplication' , 'ppVal' , ), 91, (91, (), [ (16393, 10, None, "IID('{0E72DCBC-60DD-495E-B067-85BA9DDC18BB}')") , ], 1 , 2 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'DeleteEntity' , 'pVal' , ), 92, (92, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 1 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'Unit' , 'ppVal' , ), 93, (93, (), [ (16393, 10, None, "IID('{09A65909-6FBB-488A-9726-D320F5666395}')") , ], 1 , 2 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'MaterialPropertyCollection' , 'pVal' , ), 94, (94, (), [ (16393, 10, None, "IID('{FB97F4A3-BD4F-42B9-80B7-B755FDC154BD}')") , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'CreateMaterialProperty' , 'strName' , 'dDensity' , 'dYoungsModulus' , 'dPoissonRatio' , 
			 'ppVal' , ), 95, (95, (), [ (8, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , 
			 (5, 1, None, None) , (16393, 10, None, "IID('{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}')") , ], 1 , 1 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'Animation' , 'pVal' , ), 96, (96, (), [ (16393, 10, None, "IID('{5AEA7149-EE08-4B4E-B593-5AD90B54E3E6}')") , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'AnalysisPause' , ), 97, (97, (), [ ], 1 , 1 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'AnalysisResume' , ), 98, (98, (), [ ], 1 , 1 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'AnalysisStop' , ), 99, (99, (), [ ], 1 , 1 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'AnalysisStart' , 'AnalysisMode' , ), 100, (100, (), [ (3, 1, None, "IID('{56FA6D10-B0D9-45CA-A83A-E2876147B24D}')") , ], 1 , 1 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'SelectEntityUsingGUI' , 'Type' , 'ppResult' , ), 101, (101, (), [ (3, 1, None, "IID('{6B87FF3F-C57C-47AC-A275-B95AC5C21024}')") , 
			 (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 1 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'ScenarioAnalysis' , ), 102, (102, (), [ ], 1 , 1 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
	(( 'Utility' , 'pVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{512577A8-E193-4449-8C6B-A2D59EDBFCF0}')") , ], 1 , 2 , 4 , 0 , 456 , (3, 0, None, None) , 0 , )),
	(( 'LayerFilter' , 'pVal' , ), 104, (104, (), [ (3, 1, None, "IID('{47ACF541-B58A-4216-B57C-8F50BE894A55}')") , ], 1 , 4 , 4 , 0 , 464 , (3, 0, None, None) , 0 , )),
	(( 'LayerFilter' , 'pVal' , ), 104, (104, (), [ (16387, 10, None, "IID('{47ACF541-B58A-4216-B57C-8F50BE894A55}')") , ], 1 , 2 , 4 , 0 , 472 , (3, 0, None, None) , 0 , )),
	(( 'CurrentLayer' , 'pVal' , ), 105, (105, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 480 , (3, 0, None, None) , 0 , )),
	(( 'CurrentLayer' , 'pVal' , ), 105, (105, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 488 , (3, 0, None, None) , 0 , )),
	(( 'FileExtract' , 'strFile' , 'AnimationFrame' , ), 106, (106, (), [ (8, 1, None, None) , 
			 (19, 1, None, None) , ], 1 , 1 , 4 , 0 , 496 , (3, 0, None, None) , 0 , )),
	(( 'RDDevelopement' , 'ppVal' , ), 107, (107, (), [ (16393, 10, None, "IID('{C65A8D10-195A-4939-8359-D7DEC09DC500}')") , ], 1 , 2 , 4 , 0 , 504 , (3, 0, None, None) , 0 , )),
	(( 'DesignStudyAnalysis' , ), 108, (108, (), [ ], 1 , 1 , 4 , 0 , 512 , (3, 0, None, None) , 0 , )),
	(( 'SelectPointUsingGUI' , 'ppResult' , ), 109, (109, (), [ (16393, 10, None, "IID('{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')") , ], 1 , 1 , 4 , 0 , 520 , (3, 0, None, None) , 0 , )),
	(( 'FileImportOption' , 'ppResult' , ), 110, (110, (), [ (16393, 10, None, "IID('{6EA01552-F3C2-4CB5-B537-5F25196A168D}')") , ], 1 , 2 , 4 , 0 , 528 , (3, 0, None, None) , 0 , )),
	(( 'SelectSingleEntityUsingGUI' , 'Type' , 'ppResult' , ), 111, (111, (), [ (3, 1, None, "IID('{1C09424D-2469-4CEE-845A-510099A38249}')") , 
			 (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 1 , 4 , 0 , 536 , (3, 0, None, None) , 0 , )),
	(( 'SelectSingleGeometryUsingGUI' , 'Type' , 'ppResult' , ), 112, (112, (), [ (3, 1, None, "IID('{C6531157-452A-4D65-9822-A6537A627A1A}')") , 
			 (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 1 , 4 , 0 , 544 , (3, 0, None, None) , 0 , )),
	(( 'SelectSingleComponentUsingGUI' , 'Type' , 'pVal' , ), 113, (113, (), [ (3, 1, None, "IID('{3C9EB2D7-4CCA-4543-B169-AE2CE6267D5B}')") , 
			 (16387, 10, None, None) , ], 1 , 1 , 4 , 0 , 552 , (3, 0, None, None) , 0 , )),
	(( 'SetAnalysisResponseResult' , 'Val' , ), 114, (114, (), [ (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 560 , (3, 0, None, None) , 0 , )),
	(( 'LayerSetting' , 'pVal' , ), 115, (115, (), [ (16393, 10, None, "IID('{33584AC3-5F2D-4DD9-826E-1BA921B395D0}')") , ], 1 , 2 , 4 , 0 , 568 , (3, 0, None, None) , 0 , )),
	(( 'UpdateDatabaseWindowOneEntity' , 'pVal' , ), 116, (116, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 1 , 4 , 0 , 576 , (3, 0, None, None) , 0 , )),
	(( 'SelectMultiGeometriesUsingGUI' , 'Type' , 'ppResult' , ), 117, (117, (), [ (3, 1, None, "IID('{C6531157-452A-4D65-9822-A6537A627A1A}')") , 
			 (16393, 10, None, "IID('{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')") , ], 1 , 1 , 4 , 0 , 584 , (3, 0, None, None) , 0 , )),
	(( 'MessageFileSettings' , 'ppVal' , ), 118, (118, (), [ (16393, 10, None, "IID('{4E11EE8B-B596-40F8-8F43-1D1C22B3E1F1}')") , ], 1 , 2 , 4 , 0 , 592 , (3, 0, None, None) , 0 , )),
	(( 'SelectSinglePointUsingGUI' , 'ppSafeArray' , ), 119, (119, (), [ (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 600 , (3, 0, None, None) , 0 , )),
	(( 'SelectMultiPointsUsingGUI' , 'ppSafeArray' , ), 120, (120, (), [ (24588, 10, None, None) , ], 1 , 1 , 4 , 0 , 608 , (3, 0, None, None) , 0 , )),
	(( 'OutputFileName' , 'strOuput' , ), 121, (121, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 616 , (3, 0, None, None) , 0 , )),
	(( 'OutputFileName' , 'strOuput' , ), 121, (121, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 624 , (3, 0, None, None) , 0 , )),
	(( 'UseOutputFileName' , 'pVal' , ), 122, (122, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 632 , (3, 0, None, None) , 0 , )),
	(( 'UseOutputFileName' , 'pVal' , ), 122, (122, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 640 , (3, 0, None, None) , 0 , )),
	(( 'GetPlotDataTime' , 'ppSafeArray' , ), 123, (123, (), [ (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 648 , (3, 0, None, None) , 0 , )),
	(( 'GetSelectedEntities' , 'ppResult' , ), 124, (124, (), [ (16393, 10, None, "IID('{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')") , ], 1 , 1 , 4 , 0 , 656 , (3, 0, None, None) , 0 , )),
	(( 'SelectMultiEntitiesUsingGUI' , 'Type' , 'ppResult' , ), 125, (125, (), [ (3, 1, None, "IID('{1C09424D-2469-4CEE-845A-510099A38249}')") , 
			 (16393, 10, None, "IID('{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')") , ], 1 , 1 , 4 , 0 , 664 , (3, 0, None, None) , 0 , )),
	(( 'ChangeWorkingPlane2' , 'WorkingPlaneType' , ), 126, (126, (), [ (3, 1, None, "IID('{9DE1AA28-8A7D-4698-B5FB-459CDD3B0D6A}')") , ], 1 , 1 , 4 , 0 , 672 , (3, 0, None, None) , 0 , )),
	(( 'ImportPararameterTemplate' , 'strFile' , ), 130, (130, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 680 , (3, 0, None, None) , 0 , )),
	(( 'ExportPararameterTemplate' , 'strFile' , 'OverWrite' , ), 131, (131, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 688 , (3, 0, None, None) , 0 , )),
	(( 'SelectMultiComponentsUsingGUI' , 'Type' , 'arrID' , ), 132, (132, (), [ (3, 1, None, "IID('{3C9EB2D7-4CCA-4543-B169-AE2CE6267D5B}')") , 
			 (24579, 10, None, None) , ], 1 , 1 , 4 , 0 , 696 , (3, 0, None, None) , 0 , )),
	(( 'SelectAll' , ), 133, (133, (), [ ], 1 , 1 , 4 , 0 , 704 , (3, 0, None, None) , 0 , )),
	(( 'UseAutoUpdateMaterialProperty' , 'pVal' , ), 134, (134, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 712 , (3, 0, None, None) , 0 , )),
	(( 'UseAutoUpdateMaterialProperty' , 'pVal' , ), 134, (134, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 720 , (3, 0, None, None) , 0 , )),
	(( 'ScenarioAnalysis2' , ), 135, (135, (), [ ], 1 , 1 , 4 , 0 , 728 , (3, 0, None, None) , 0 , )),
	(( 'FileImportWithCADSetting' , 'strFile' , ), 136, (136, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 736 , (3, 0, None, None) , 0 , )),
	(( 'FileExportOption' , 'ppResult' , ), 137, (137, (), [ (16393, 10, None, "IID('{3D7C1E76-2C4C-480F-9D7B-5ECC6CB9FA2D}')") , ], 1 , 2 , 4 , 0 , 744 , (3, 0, None, None) , 0 , )),
	(( 'Contour' , 'ppVal' , ), 138, (138, (), [ (16393, 10, None, "IID('{E32E43FB-3356-4D36-8A51-C22DE7E397BF}')") , ], 1 , 2 , 4 , 0 , 752 , (3, 0, None, None) , 0 , )),
	(( 'RDDevelopementExternal' , 'ppVal' , ), 139, (139, (), [ (16393, 10, None, "IID('{C65A8D10-195A-4939-8359-D7DEC09DC500}')") , ], 1 , 2 , 4 , 0 , 760 , (3, 0, None, None) , 0 , )),
	(( 'PostAnalysis' , 'ppVal' , ), 140, (140, (), [ (16393, 10, None, "IID('{0FCAD09C-F67B-415A-BDB7-472A2AC90A59}')") , ], 1 , 2 , 4 , 0 , 768 , (3, 0, None, None) , 0 , )),
	(( 'ExportContourData' , 'path' , 'dataType' , 'exportType' , 'objectIndices' , 
			 ), 141, (141, (), [ (8, 1, None, None) , (3, 1, None, None) , (3, 1, None, None) , (8195, 1, None, None) , ], 1 , 1 , 4 , 0 , 776 , (3, 0, None, None) , 0 , )),
	(( 'UpdateView' , ), 142, (142, (), [ ], 1 , 1 , 4 , 0 , 784 , (3, 0, None, None) , 0 , )),
]

IModelDocumentCollection_vtables_dispatch_ = 1
IModelDocumentCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IModelProperty_vtables_dispatch_ = 1
IModelProperty_vtables_ = [
	(( 'GravityX' , 'pVal' , ), 104, (104, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'GravityX' , 'pVal' , ), 104, (104, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'GravityY' , 'pVal' , ), 105, (105, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'GravityY' , 'pVal' , ), 105, (105, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'GravityZ' , 'pVal' , ), 106, (106, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'GravityZ' , 'pVal' , ), 106, (106, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseGravity' , 'pVal' , ), 107, (107, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseGravity' , 'pVal' , ), 107, (107, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'TimeOffset' , 'pVal' , ), 108, (108, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'TimeOffset' , 'pVal' , ), 108, (108, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'Tolerance' , 'pVal' , ), 109, (109, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'Tolerance' , 'pVal' , ), 109, (109, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'DynamicAnalysisProperty' , 'ppVal' , ), 112, (112, (), [ (16393, 10, None, "IID('{B789D55C-FB99-4E33-A4C3-AFDD631598CE}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'StaticAnalysisProperty' , 'ppVal' , ), 113, (113, (), [ (16393, 10, None, "IID('{19BE442B-70CF-499D-9A4C-B6A3256CDD32}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'EigenValueAnalysisProperty' , 'ppVal' , ), 114, (114, (), [ (16393, 10, None, "IID('{54CB2134-5515-4D88-B997-71E72B9D7FFA}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'CommonAnalysisProperty' , 'ppVal' , ), 115, (115, (), [ (16393, 10, None, "IID('{82ADFBAE-2220-4034-A55A-45CA75777ACF}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'ScenarioAnalysisProperty' , 'ppVal' , ), 116, (116, (), [ (16393, 10, None, "IID('{F212FA3B-9005-4F21-8513-893B10A6D8C7}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'GravityXIDouble' , 'ppVal' , ), 117, (117, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'GravityYIDouble' , 'ppVal' , ), 118, (118, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'GravityZIDouble' , 'ppVal' , ), 119, (119, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'FrequencyResponseAnalysisProperty' , 'ppVal' , ), 120, (120, (), [ (16393, 10, None, "IID('{7C4DC70C-432E-4059-9983-3628D55F94BD}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
]

IModelSetting_vtables_dispatch_ = 1
IModelSetting_vtables_ = [
	(( 'IconSize' , 'pVal' , ), 58, (58, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'IconSize' , 'pVal' , ), 58, (58, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'MarkerSize' , 'pVal' , ), 59, (59, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'MarkerSize' , 'pVal' , ), 59, (59, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'ShowIconAll' , 'pVal' , ), 60, (60, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'ShowIconAll' , 'pVal' , ), 60, (60, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'ShowIconJoint' , 'pVal' , ), 61, (61, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'ShowIconJoint' , 'pVal' , ), 61, (61, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'ShowIconForce' , 'pVal' , ), 62, (62, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'ShowIconForce' , 'pVal' , ), 62, (62, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'ShowIconContact' , 'pVal' , ), 63, (63, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'ShowIconContact' , 'pVal' , ), 63, (63, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'ShowIconSensor' , 'pVal' , ), 64, (64, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'ShowIconSensor' , 'pVal' , ), 64, (64, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'ShowIconParametricPoint' , 'pVal' , ), 65, (65, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'ShowIconParametricPoint' , 'pVal' , ), 65, (65, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'ShowIconInitialVelocity' , 'pVal' , ), 66, (66, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'ShowIconInitialVelocity' , 'pVal' , ), 66, (66, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'ShowMarkerAll' , 'pVal' , ), 67, (67, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'ShowMarkerAll' , 'pVal' , ), 67, (67, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'ShowMarkerCenter' , 'pVal' , ), 68, (68, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'ShowMarkerCenter' , 'pVal' , ), 68, (68, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'ShowMarkerGeneral' , 'pVal' , ), 69, (69, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'ShowMarkerGeneral' , 'pVal' , ), 69, (69, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'ShowInertiaReferenceFrame' , 'pVal' , ), 70, (70, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'ShowInertiaReferenceFrame' , 'pVal' , ), 70, (70, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'ShowLight' , 'pVal' , ), 71, (71, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'ShowLight' , 'pVal' , ), 71, (71, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'AnimationControl' , 'ppVal' , ), 72, (72, (), [ (16393, 10, None, "IID('{918A0CB3-A5E0-4A9D-906E-D4DF3C194530}')") , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'CameraSetting' , 'pVal' , ), 73, (73, (), [ (16393, 10, None, "IID('{0FDF3022-5D98-4409-B16E-716A01915002}')") , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'CustomView' , 'ppVal' , ), 74, (74, (), [ (16393, 10, None, "IID('{0F88BBEF-C77F-472D-9936-E84B77F9756A}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'DisplayAnimationDuringSimulation' , 'pVal' , ), 75, (75, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'DisplayAnimationDuringSimulation' , 'pVal' , ), 75, (75, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'Grid' , 'pVal' , ), 76, (76, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'Grid' , 'pVal' , ), 76, (76, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'GridSnap' , 'pVal' , ), 77, (77, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'GridSnap' , 'pVal' , ), 77, (77, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'SetAsDefault' , ), 78, (78, (), [ ], 1 , 1 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'ResetAllSettings' , ), 79, (79, (), [ ], 1 , 1 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'Import' , 'strFile' , ), 80, (80, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'Export' , 'strFile' , 'bOverWrite' , ), 81, (81, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'Flexibility' , 'ppVal' , ), 82, (82, (), [ (16393, 10, None, "IID('{021CF62C-20FB-4D9B-8C0B-89E4C73CE14C}')") , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'NameOnOffType' , 'pVal' , ), 84, (84, (), [ (16387, 10, None, "IID('{6E1380FC-4B13-4333-B14B-856128DA895A}')") , ], 1 , 2 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'NameOnOffType' , 'pVal' , ), 84, (84, (), [ (3, 1, None, "IID('{6E1380FC-4B13-4333-B14B-856128DA895A}')") , ], 1 , 4 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'ShowNameAll' , 'pVal' , ), 85, (85, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'ShowNameAll' , 'pVal' , ), 85, (85, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'ShowNameGeneralBody' , 'pVal' , ), 86, (86, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'ShowNameGeneralBody' , 'pVal' , ), 86, (86, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'ShowNameGeneralMarker' , 'pVal' , ), 87, (87, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'ShowNameGeneralMarker' , 'pVal' , ), 87, (87, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
	(( 'ShowNameParametricPoint' , 'pVal' , ), 88, (88, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 456 , (3, 0, None, None) , 0 , )),
	(( 'ShowNameParametricPoint' , 'pVal' , ), 88, (88, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 464 , (3, 0, None, None) , 0 , )),
	(( 'SnapToGeometry' , 'flag' , ), 89, (89, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 472 , (3, 0, None, None) , 0 , )),
	(( 'SnapToGeometry' , 'flag' , ), 89, (89, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 480 , (3, 0, None, None) , 0 , )),
	(( 'SnapToNode' , 'flag' , ), 90, (90, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 488 , (3, 0, None, None) , 0 , )),
	(( 'SnapToNode' , 'flag' , ), 90, (90, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 496 , (3, 0, None, None) , 0 , )),
	(( 'ModelSettingPlot' , 'ppVal' , ), 91, (91, (), [ (16393, 10, None, "IID('{AB76BF02-4EA9-4EC3-AF0E-3B42300415CD}')") , ], 1 , 2 , 4 , 0 , 504 , (3, 0, None, None) , 0 , )),
	(( 'DatabaseSetting' , 'ppVal' , ), 92, (92, (), [ (16393, 10, None, "IID('{4DFAE9F4-7DC9-469C-9FEF-6DBB2575E0CA}')") , ], 1 , 2 , 4 , 0 , 512 , (3, 0, None, None) , 0 , )),
	(( 'ModelSettingLight' , 'ppVal' , ), 93, (93, (), [ (16393, 10, None, "IID('{B81B4D27-0B09-4FCD-B29B-55CCCF9E45DD}')") , ], 1 , 2 , 4 , 0 , 520 , (3, 0, None, None) , 0 , )),
	(( 'ModelSettingDefault' , 'ppVal' , ), 94, (94, (), [ (16393, 10, None, "IID('{75368D13-6E62-4893-A825-339547DA46C4}')") , ], 1 , 2 , 4 , 0 , 528 , (3, 0, None, None) , 0 , )),
	(( 'ShowNameRigidBody' , 'pVal' , ), 95, (95, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 536 , (3, 0, None, None) , 0 , )),
	(( 'ShowNameRigidBody' , 'pVal' , ), 95, (95, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 544 , (3, 0, None, None) , 0 , )),
	(( 'ShowNameFFlexBody' , 'pVal' , ), 96, (96, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 552 , (3, 0, None, None) , 0 , )),
	(( 'ShowNameFFlexBody' , 'pVal' , ), 96, (96, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 560 , (3, 0, None, None) , 0 , )),
	(( 'ShowNameRFlexBody' , 'pVal' , ), 97, (97, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 568 , (3, 0, None, None) , 0 , )),
	(( 'ShowNameRFlexBody' , 'pVal' , ), 97, (97, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 576 , (3, 0, None, None) , 0 , )),
	(( 'ShowNameGroup' , 'pVal' , ), 98, (98, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 584 , (3, 0, None, None) , 0 , )),
	(( 'ShowNameGroup' , 'pVal' , ), 98, (98, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 592 , (3, 0, None, None) , 0 , )),
	(( 'ModelSettingCAD' , 'ppVal' , ), 99, (99, (), [ (16393, 10, None, "IID('{EED70022-9601-4CFC-B6A1-BADDE4A5A4B1}')") , ], 1 , 2 , 4 , 0 , 600 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayCustomColorFlag' , 'flag' , ), 101, (101, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 608 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayCustomColorFlag' , 'flag' , ), 101, (101, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 616 , (3, 0, None, None) , 0 , )),
	(( 'ModelSettingGeneral' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{83A06AD8-8A05-4627-823B-E6C5C9716634}')") , ], 1 , 2 , 4 , 0 , 624 , (3, 0, None, None) , 0 , )),
	(( 'BackgroundColor' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{1972ACE7-FAA6-4C64-A067-C0B2EB23C93A}')") , ], 1 , 2 , 4 , 0 , 632 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayColor' , 'pVal' , ), 52, (52, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 640 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayColor' , 'pVal' , ), 52, (52, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 648 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayScale' , 'pVal' , ), 53, (53, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 656 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayScale' , 'pVal' , ), 53, (53, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 664 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayWidth' , 'pVal' , ), 54, (54, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 672 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayWidth' , 'pVal' , ), 54, (54, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 680 , (3, 0, None, None) , 0 , )),
	(( 'TorqueDisplayColor' , 'pVal' , ), 55, (55, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 688 , (3, 0, None, None) , 0 , )),
	(( 'TorqueDisplayColor' , 'pVal' , ), 55, (55, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 696 , (3, 0, None, None) , 0 , )),
	(( 'TorqueDisplayScale' , 'pVal' , ), 56, (56, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 704 , (3, 0, None, None) , 0 , )),
	(( 'TorqueDisplayScale' , 'pVal' , ), 56, (56, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 712 , (3, 0, None, None) , 0 , )),
	(( 'TorqueDisplayWidth' , 'pVal' , ), 57, (57, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 720 , (3, 0, None, None) , 0 , )),
	(( 'TorqueDisplayWidth' , 'pVal' , ), 57, (57, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 728 , (3, 0, None, None) , 0 , )),
	(( 'ModelSettingDisplay' , 'ppVal' , ), 83, (83, (), [ (16393, 10, None, "IID('{845806A7-7BB3-4643-878D-CE4247682409}')") , ], 1 , 2 , 4 , 0 , 736 , (3, 0, None, None) , 0 , )),
]

IModelSettingCAD_vtables_dispatch_ = 1
IModelSettingCAD_vtables_ = [
	(( 'UseImportedCADDataColor' , 'pVal' , ), 101, (101, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseImportedCADDataColor' , 'pVal' , ), 101, (101, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'ImportedCADDataColor' , 'pVal' , ), 102, (102, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'ImportedCADDataColor' , 'pVal' , ), 102, (102, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'ConvertPrimitiveGeometriesWhenImportingCADFiles' , 'pVal' , ), 103, (103, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'ConvertPrimitiveGeometriesWhenImportingCADFiles' , 'pVal' , ), 103, (103, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'KeepEdgesBooleanUnite' , 'pVal' , ), 104, (104, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'KeepEdgesBooleanUnite' , 'pVal' , ), 104, (104, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'ImportCADOptionsDialog' , 'pVal' , ), 105, (105, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'ImportCADOptionsDialog' , 'pVal' , ), 105, (105, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'CADAssemblyHierarchy' , 'pVal' , ), 106, (106, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'CADAssemblyHierarchy' , 'pVal' , ), 106, (106, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'HierarchyConversionLevel' , 'pVal' , ), 107, (107, (), [ (3, 1, None, "IID('{BBBFE795-B968-4308-A6A6-F1D08F52A5D2}')") , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'HierarchyConversionLevel' , 'pVal' , ), 107, (107, (), [ (16387, 10, None, "IID('{BBBFE795-B968-4308-A6A6-F1D08F52A5D2}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'CADHierarchyDialog' , 'pVal' , ), 108, (108, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'CADHierarchyDialog' , 'pVal' , ), 108, (108, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'CreateTranslatorLogFile' , 'pVal' , ), 113, (113, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'CreateTranslatorLogFile' , 'pVal' , ), 113, (113, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'TranslatorImportOptions' , 'ppVal' , ), 114, (114, (), [ (16393, 10, None, "IID('{FE0C7461-8AFD-47CA-A284-C05BD15B68FC}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'TranslatorExportOptions' , 'ppVal' , ), 115, (115, (), [ (16393, 10, None, "IID('{BF6D6355-72CE-4B22-B038-CDEAA00F7CE8}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'UseHealingOptionForCATIA' , 'pVal' , ), 109, (109, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'UseHealingOptionForCATIA' , 'pVal' , ), 109, (109, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'UseSolidAsSheetForCATIA' , 'pVal' , ), 110, (110, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'UseSolidAsSheetForCATIA' , 'pVal' , ), 110, (110, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'AssemblyOptionForCATIA' , 'pVal' , ), 111, (111, (), [ (3, 1, None, "IID('{3FCF662A-AABA-49AE-966E-99F07E9C1F9C}')") , ], 1 , 4 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'AssemblyOptionForCATIA' , 'pVal' , ), 111, (111, (), [ (16387, 10, None, "IID('{3FCF662A-AABA-49AE-966E-99F07E9C1F9C}')") , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'UseSolidTrimForSTEP' , 'pVal' , ), 112, (112, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'UseSolidTrimForSTEP' , 'pVal' , ), 112, (112, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
]

IModelSettingDatabase_vtables_dispatch_ = 1
IModelSettingDatabase_vtables_ = [
	(( 'ShowDatabaseAll' , 'pVal' , ), 101, (101, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseAll' , 'pVal' , ), 101, (101, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseBody' , 'pVal' , ), 102, (102, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseBody' , 'pVal' , ), 102, (102, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseJoint' , 'pVal' , ), 103, (103, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseJoint' , 'pVal' , ), 103, (103, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseForce' , 'pVal' , ), 104, (104, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseForce' , 'pVal' , ), 104, (104, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseContact' , 'pVal' , ), 105, (105, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseContact' , 'pVal' , ), 105, (105, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabasePV' , 'pVal' , ), 106, (106, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabasePV' , 'pVal' , ), 106, (106, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabasePP' , 'pVal' , ), 107, (107, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabasePP' , 'pVal' , ), 107, (107, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabasePIN' , 'pVal' , ), 108, (108, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabasePIN' , 'pVal' , ), 108, (108, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabasePOUT' , 'pVal' , ), 109, (109, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabasePOUT' , 'pVal' , ), 109, (109, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseGPIN' , 'pVal' , ), 110, (110, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseGPIN' , 'pVal' , ), 110, (110, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseGPOUT' , 'pVal' , ), 111, (111, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseGPOUT' , 'pVal' , ), 111, (111, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseRequest' , 'pVal' , ), 112, (112, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseRequest' , 'pVal' , ), 112, (112, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseSpline' , 'pVal' , ), 113, (113, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseSpline' , 'pVal' , ), 113, (113, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabasePPC' , 'pVal' , ), 114, (114, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabasePPC' , 'pVal' , ), 114, (114, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabasePVC' , 'pVal' , ), 115, (115, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabasePVC' , 'pVal' , ), 115, (115, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseString' , 'pVal' , ), 116, (116, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseString' , 'pVal' , ), 116, (116, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseEx' , 'pVal' , ), 117, (117, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseEx' , 'pVal' , ), 117, (117, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseUSUB' , 'pVal' , ), 118, (118, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseUSUB' , 'pVal' , ), 118, (118, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseDiffEq' , 'pVal' , ), 119, (119, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseDiffEq' , 'pVal' , ), 119, (119, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseVarEq' , 'pVal' , ), 120, (120, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseVarEq' , 'pVal' , ), 120, (120, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseScope' , 'pVal' , ), 121, (121, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseScope' , 'pVal' , ), 121, (121, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseSensor' , 'pVal' , ), 122, (122, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseSensor' , 'pVal' , ), 122, (122, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseBC' , 'pVal' , ), 123, (123, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseBC' , 'pVal' , ), 123, (123, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabasePI' , 'pVal' , ), 124, (124, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabasePI' , 'pVal' , ), 124, (124, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseConstraint' , 'pVal' , ), 125, (125, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseConstraint' , 'pVal' , ), 125, (125, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseCoupler' , 'pVal' , ), 126, (126, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 456 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseCoupler' , 'pVal' , ), 126, (126, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 464 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseDP' , 'pVal' , ), 127, (127, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 472 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseDP' , 'pVal' , ), 127, (127, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 480 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseAR' , 'pVal' , ), 128, (128, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 488 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseAR' , 'pVal' , ), 128, (128, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 496 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseGroup' , 'pVal' , ), 129, (129, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 504 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseGroup' , 'pVal' , ), 129, (129, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 512 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseSubsystem' , 'pVal' , ), 130, (130, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 520 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseSubsystem' , 'pVal' , ), 130, (130, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 528 , (3, 0, None, None) , 0 , )),
	(( 'Sort' , 'pVal' , ), 131, (131, (), [ (3, 1, None, "IID('{BB63AA1B-70C6-49EB-B3B4-2B651AA9EFF7}')") , ], 1 , 4 , 4 , 0 , 536 , (3, 0, None, None) , 0 , )),
	(( 'Sort' , 'pVal' , ), 131, (131, (), [ (16387, 10, None, "IID('{BB63AA1B-70C6-49EB-B3B4-2B651AA9EFF7}')") , ], 1 , 2 , 4 , 0 , 544 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseDV' , 'pVal' , ), 132, (132, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 552 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseDV' , 'pVal' , ), 132, (132, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 560 , (3, 0, None, None) , 0 , )),
	(( 'ShowDetailInformation' , 'pVal' , ), 133, (133, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 568 , (3, 0, None, None) , 0 , )),
	(( 'ShowDetailInformation' , 'pVal' , ), 133, (133, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 576 , (3, 0, None, None) , 0 , )),
	(( 'DisplayDigitNumber' , 'pVal' , ), 134, (134, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 584 , (3, 0, None, None) , 0 , )),
	(( 'DisplayDigitNumber' , 'pVal' , ), 134, (134, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 592 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseNodeConstraint' , 'pVal' , ), 135, (135, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 600 , (3, 0, None, None) , 0 , )),
	(( 'ShowDatabaseNodeConstraint' , 'pVal' , ), 135, (135, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 608 , (3, 0, None, None) , 0 , )),
]

IModelSettingDefault_vtables_dispatch_ = 1
IModelSettingDefault_vtables_ = [
	(( 'Gravity' , 'pVal' , ), 101, (101, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Gravity' , 'pVal' , ), 101, (101, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Display' , 'pVal' , ), 102, (102, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Display' , 'pVal' , ), 102, (102, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Database' , 'pVal' , ), 103, (103, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'Database' , 'pVal' , ), 103, (103, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'Light' , 'pVal' , ), 104, (104, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'Light' , 'pVal' , ), 104, (104, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'Simulation' , 'pVal' , ), 105, (105, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'Simulation' , 'pVal' , ), 105, (105, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'Flexibility' , 'pVal' , ), 106, (106, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'Flexibility' , 'pVal' , ), 106, (106, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNet' , 'pVal' , ), 107, (107, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNet' , 'pVal' , ), 107, (107, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'All' , 'pVal' , ), 108, (108, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'All' , 'pVal' , ), 108, (108, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'CAD' , 'pVal' , ), 109, (109, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'CAD' , 'pVal' , ), 109, (109, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
]

IModelSettingDisplay_vtables_dispatch_ = 1
IModelSettingDisplay_vtables_ = [
	(( 'BackgroundColor' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{1972ACE7-FAA6-4C64-A067-C0B2EB23C93A}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseBackgroundImage' , 'pVal' , ), 102, (102, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseBackgroundImage' , 'pVal' , ), 102, (102, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'BackgroundPicturePathName' , 'strPathName' , ), 103, (103, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'BackgroundPicturePathName' , 'strPathName' , ), 103, (103, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'GridType' , 'pVal' , ), 104, (104, (), [ (16387, 10, None, "IID('{27F9291D-CC9B-4F85-B76B-B7A48A9DE3FF}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'GridType' , 'pVal' , ), 104, (104, (), [ (3, 1, None, "IID('{27F9291D-CC9B-4F85-B76B-B7A48A9DE3FF}')") , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'GridWidth' , 'pVal' , ), 105, (105, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'GridWidth' , 'pVal' , ), 105, (105, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'GridHeight' , 'pVal' , ), 106, (106, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'GridHeight' , 'pVal' , ), 106, (106, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'GridRadius' , 'pVal' , ), 107, (107, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'GridRadius' , 'pVal' , ), 107, (107, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'GridAngle' , 'pVal' , ), 108, (108, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'GridAngle' , 'pVal' , ), 108, (108, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'GridThickness' , 'pVal' , ), 109, (109, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'GridThickness' , 'pVal' , ), 109, (109, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'GridShape' , 'pVal' , ), 110, (110, (), [ (16387, 10, None, "IID('{F0386531-8654-4FEA-A94B-EE8EC6ECAF75}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'GridShape' , 'pVal' , ), 110, (110, (), [ (3, 1, None, "IID('{F0386531-8654-4FEA-A94B-EE8EC6ECAF75}')") , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfGridSegments' , 'pVal' , ), 111, (111, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfGridSegments' , 'pVal' , ), 111, (111, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'GridColor' , 'pVal' , ), 112, (112, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'GridColor' , 'pVal' , ), 112, (112, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'UseShowGrid' , 'pVal' , ), 113, (113, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'UseShowGrid' , 'pVal' , ), 113, (113, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'UseInitializeGridwhenCreatingSubsystemToolkit' , 'pVal' , ), 114, (114, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'UseInitializeGridwhenCreatingSubsystemToolkit' , 'pVal' , ), 114, (114, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'UpdateGridSetting' , ), 115, (115, (), [ ], 1 , 1 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'UseClippingVolume' , 'pVal' , ), 116, (116, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'UseClippingVolume' , 'pVal' , ), 116, (116, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'ClippingVolumeNearFactor' , 'pVal' , ), 117, (117, (), [ (4, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'ClippingVolumeNearFactor' , 'pVal' , ), 117, (117, (), [ (16388, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'ClippingVolumeFarFactor' , 'pVal' , ), 118, (118, (), [ (4, 1, None, None) , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'ClippingVolumeFarFactor' , 'pVal' , ), 118, (118, (), [ (16388, 10, None, None) , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'FontSizeInWorkingWindow' , 'pVal' , ), 119, (119, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'FontSizeInWorkingWindow' , 'pVal' , ), 119, (119, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'RenderMode' , 'pVal' , ), 120, (120, (), [ (3, 1, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147EB}')") , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'RenderMode' , 'pVal' , ), 120, (120, (), [ (16387, 10, None, "IID('{DEB6BDB3-9D28-4F34-953B-9D96D9A147EB}')") , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'WireColorOfShadeWithWireRender' , 'pVal' , ), 121, (121, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'WireColorOfShadeWithWireRender' , 'pVal' , ), 121, (121, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'UseGraphicalQuality' , 'pVal' , ), 122, (122, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'UseGraphicalQuality' , 'pVal' , ), 122, (122, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'CurveDetailLevel' , 'pVal' , ), 123, (123, (), [ (3, 1, None, "IID('{BA789320-DC38-48E9-88AB-1178877903FD}')") , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'CurveDetailLevel' , 'pVal' , ), 123, (123, (), [ (16387, 10, None, "IID('{BA789320-DC38-48E9-88AB-1178877903FD}')") , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'GeometryDetailLevel' , 'pVal' , ), 124, (124, (), [ (3, 1, None, "IID('{709F4BB5-B608-423B-8F78-40615C3C8D1E}')") , ], 1 , 4 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'GeometryDetailLevel' , 'pVal' , ), 124, (124, (), [ (16387, 10, None, "IID('{709F4BB5-B608-423B-8F78-40615C3C8D1E}')") , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'CreatedBodyColorType' , 'pVal' , ), 125, (125, (), [ (3, 1, None, "IID('{80EEDCEF-0244-454F-8125-8078A319E63C}')") , ], 1 , 4 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'CreatedBodyColorType' , 'pVal' , ), 125, (125, (), [ (16387, 10, None, "IID('{80EEDCEF-0244-454F-8125-8078A319E63C}')") , ], 1 , 2 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'UseReflectionEffectAsDefault' , 'pVal' , ), 126, (126, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'UseReflectionEffectAsDefault' , 'pVal' , ), 126, (126, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
	(( 'IconColor' , 'pVal' , ), 127, (127, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 456 , (3, 0, None, None) , 0 , )),
	(( 'IconColor' , 'pVal' , ), 127, (127, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 464 , (3, 0, None, None) , 0 , )),
	(( 'ArrowColor' , 'pVal' , ), 128, (128, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 472 , (3, 0, None, None) , 0 , )),
	(( 'ArrowColor' , 'pVal' , ), 128, (128, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 480 , (3, 0, None, None) , 0 , )),
	(( 'ShowContactSurfaceNormalDirection' , 'pVal' , ), 129, (129, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 488 , (3, 0, None, None) , 0 , )),
	(( 'ShowContactSurfaceNormalDirection' , 'pVal' , ), 129, (129, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 496 , (3, 0, None, None) , 0 , )),
	(( 'ContractSurfaceNormalDirectionValue' , 'pVal' , ), 130, (130, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 504 , (3, 0, None, None) , 0 , )),
	(( 'ContractSurfaceNormalDirectionValue' , 'pVal' , ), 130, (130, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 512 , (3, 0, None, None) , 0 , )),
	(( 'SelectionColor' , 'pVal' , ), 131, (131, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 520 , (3, 0, None, None) , 0 , )),
	(( 'SelectionColor' , 'pVal' , ), 131, (131, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 528 , (3, 0, None, None) , 0 , )),
	(( 'HighlightColor' , 'pVal' , ), 132, (132, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 536 , (3, 0, None, None) , 0 , )),
	(( 'HighlightColor' , 'pVal' , ), 132, (132, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 544 , (3, 0, None, None) , 0 , )),
	(( 'TextColor' , 'pVal' , ), 133, (133, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 552 , (3, 0, None, None) , 0 , )),
	(( 'TextColor' , 'pVal' , ), 133, (133, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 560 , (3, 0, None, None) , 0 , )),
	(( 'UseTransparentBackgroundOfTooltipBox' , 'pVal' , ), 134, (134, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 568 , (3, 0, None, None) , 0 , )),
	(( 'UseTransparentBackgroundOfTooltipBox' , 'pVal' , ), 134, (134, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 576 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayColor' , 'pVal' , ), 135, (135, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 584 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayColor' , 'pVal' , ), 135, (135, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 592 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayScale' , 'pVal' , ), 136, (136, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 600 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayScale' , 'pVal' , ), 136, (136, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 608 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayWidth' , 'pVal' , ), 137, (137, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 616 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayWidth' , 'pVal' , ), 137, (137, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 624 , (3, 0, None, None) , 0 , )),
	(( 'TorqueDisplayColor' , 'pVal' , ), 138, (138, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 632 , (3, 0, None, None) , 0 , )),
	(( 'TorqueDisplayColor' , 'pVal' , ), 138, (138, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 640 , (3, 0, None, None) , 0 , )),
	(( 'TorqueDisplayScale' , 'pVal' , ), 139, (139, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 648 , (3, 0, None, None) , 0 , )),
	(( 'TorqueDisplayScale' , 'pVal' , ), 139, (139, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 656 , (3, 0, None, None) , 0 , )),
	(( 'TorqueDisplayWidth' , 'pVal' , ), 140, (140, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 664 , (3, 0, None, None) , 0 , )),
	(( 'TorqueDisplayWidth' , 'pVal' , ), 140, (140, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 672 , (3, 0, None, None) , 0 , )),
	(( 'UseCustomForceDisplayColor' , 'pVal' , ), 141, (141, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 680 , (3, 0, None, None) , 0 , )),
	(( 'UseCustomForceDisplayColor' , 'pVal' , ), 141, (141, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 688 , (3, 0, None, None) , 0 , )),
	(( 'ShowForceDisplayValue' , 'flag' , ), 142, (142, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 696 , (3, 0, None, None) , 0 , )),
	(( 'ShowForceDisplayValue' , 'flag' , ), 142, (142, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 704 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayValueDecimal' , 'decimal' , ), 143, (143, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 712 , (3, 0, None, None) , 0 , )),
	(( 'ForceDisplayValueDecimal' , 'decimal' , ), 143, (143, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 720 , (3, 0, None, None) , 0 , )),
	(( 'LineWidthLevel' , 'level' , ), 144, (144, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 728 , (3, 0, None, None) , 0 , )),
	(( 'LineWidthLevel' , 'level' , ), 144, (144, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 736 , (3, 0, None, None) , 0 , )),
	(( 'UseImportedCADDataColor' , 'pVal' , ), 145, (145, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 744 , (3, 0, None, None) , 0 , )),
	(( 'UseImportedCADDataColor' , 'pVal' , ), 145, (145, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 752 , (3, 0, None, None) , 0 , )),
	(( 'ImportedCADDataColor' , 'pVal' , ), 146, (146, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 760 , (3, 0, None, None) , 0 , )),
	(( 'ImportedCADDataColor' , 'pVal' , ), 146, (146, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 768 , (3, 0, None, None) , 0 , )),
	(( 'ErrorTolerance' , 'pVal' , ), 147, (147, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 776 , (3, 0, None, None) , 0 , )),
	(( 'ErrorTolerance' , 'pVal' , ), 147, (147, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 784 , (3, 0, None, None) , 0 , )),
	(( 'HideInactiveEntity' , 'pVal' , ), 148, (148, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 792 , (3, 0, None, None) , 0 , )),
	(( 'HideInactiveEntity' , 'pVal' , ), 148, (148, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 800 , (3, 0, None, None) , 0 , )),
	(( 'AlignCenterMarkerOrientationWithBodyPrincipalAxis' , 'pVal' , ), 149, (149, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 808 , (3, 0, None, None) , 0 , )),
	(( 'AlignCenterMarkerOrientationWithBodyPrincipalAxis' , 'pVal' , ), 149, (149, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 816 , (3, 0, None, None) , 0 , )),
	(( 'AccelerateRenderingInViewControl' , 'pVal' , ), 150, (150, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 824 , (3, 0, None, None) , 0 , )),
	(( 'AccelerateRenderingInViewControl' , 'pVal' , ), 150, (150, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 832 , (3, 0, None, None) , 0 , )),
	(( 'UseWindowsAero' , 'pVal' , ), 151, (151, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 840 , (3, 0, None, None) , 0 , )),
	(( 'UseWindowsAero' , 'pVal' , ), 151, (151, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 848 , (3, 0, None, None) , 0 , )),
	(( 'AutoFitWhenChangingWorkingPlane' , 'pVal' , ), 152, (152, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 856 , (3, 0, None, None) , 0 , )),
	(( 'AutoFitWhenChangingWorkingPlane' , 'pVal' , ), 152, (152, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 864 , (3, 0, None, None) , 0 , )),
	(( 'RecognizePrimitiveGeometriesWhenImportingCADFiles' , 'pVal' , ), 153, (153, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 872 , (3, 0, None, None) , 0 , )),
	(( 'RecognizePrimitiveGeometriesWhenImportingCADFiles' , 'pVal' , ), 153, (153, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 880 , (3, 0, None, None) , 0 , )),
	(( 'GuideColor' , 'pVal' , ), 154, (154, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 888 , (3, 0, None, None) , 0 , )),
	(( 'GuideColor' , 'pVal' , ), 154, (154, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 896 , (3, 0, None, None) , 0 , )),
	(( 'SelectedBodyColor' , 'pVal' , ), 155, (155, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 904 , (3, 0, None, None) , 0 , )),
	(( 'SelectedBodyColor' , 'pVal' , ), 155, (155, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 912 , (3, 0, None, None) , 0 , )),
	(( 'HightlightEntityColor' , 'pVal' , ), 156, (156, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 920 , (3, 0, None, None) , 0 , )),
	(( 'HightlightEntityColor' , 'pVal' , ), 156, (156, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 928 , (3, 0, None, None) , 0 , )),
	(( 'UseBackgroundPicture' , 'pVal' , ), 157, (157, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 936 , (3, 0, None, None) , 0 , )),
	(( 'UseBackgroundPicture' , 'pVal' , ), 157, (157, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 944 , (3, 0, None, None) , 0 , )),
	(( 'FontSize' , 'pVal' , ), 158, (158, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 952 , (3, 0, None, None) , 0 , )),
	(( 'FontSize' , 'pVal' , ), 158, (158, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 960 , (3, 0, None, None) , 0 , )),
	(( 'ShadeWireColor' , 'pVal' , ), 159, (159, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 968 , (3, 0, None, None) , 0 , )),
	(( 'ShadeWireColor' , 'pVal' , ), 159, (159, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 976 , (3, 0, None, None) , 0 , )),
	(( 'ResolutionX' , 'pVal' , ), 160, (160, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 984 , (3, 0, None, None) , 0 , )),
	(( 'ResolutionX' , 'pVal' , ), 160, (160, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 992 , (3, 0, None, None) , 0 , )),
	(( 'ResolutionY' , 'pVal' , ), 161, (161, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 1000 , (3, 0, None, None) , 0 , )),
	(( 'ResolutionY' , 'pVal' , ), 161, (161, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 1008 , (3, 0, None, None) , 0 , )),
	(( 'InactiveColorShade' , 'oleColor' , ), 162, (162, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 1016 , (3, 0, None, None) , 0 , )),
	(( 'InactiveColorShade' , 'oleColor' , ), 162, (162, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 1024 , (3, 0, None, None) , 0 , )),
	(( 'InactiveColorWire' , 'oleColor' , ), 163, (163, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 1032 , (3, 0, None, None) , 0 , )),
	(( 'InactiveColorWire' , 'oleColor' , ), 163, (163, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 1040 , (3, 0, None, None) , 0 , )),
	(( 'InactiveColorFactor' , 'factor' , ), 164, (164, (), [ (4, 1, None, None) , ], 1 , 4 , 4 , 0 , 1048 , (3, 0, None, None) , 0 , )),
	(( 'InactiveColorFactor' , 'factor' , ), 164, (164, (), [ (16388, 10, None, None) , ], 1 , 2 , 4 , 0 , 1056 , (3, 0, None, None) , 0 , )),
]

IModelSettingFlexibility_vtables_dispatch_ = 1
IModelSettingFlexibility_vtables_ = [
	(( 'FFlex' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{470BF1F3-2ADB-44D0-A820-C88165387DD1}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'RFlex' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{38DEE9F7-E829-461E-A2FA-7AB93E5AE392}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Flexible' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{D8DF157B-E900-4ED1-8A7A-36FD7611B889}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
]

IModelSettingFlexibilityFFlex_vtables_dispatch_ = 1
IModelSettingFlexibilityFFlex_vtables_ = [
	(( 'CoreOption' , 'pVal' , ), 152, (152, (), [ (3, 1, None, "IID('{975E72D8-BA15-4AB0-9B89-6968A54D2FE5}')") , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'CoreOption' , 'pVal' , ), 152, (152, (), [ (16387, 10, None, "IID('{975E72D8-BA15-4AB0-9B89-6968A54D2FE5}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'StressRecoveryType' , 'pVal' , ), 153, (153, (), [ (3, 1, None, "IID('{82CC641D-AB98-4571-A443-18EB0D52D7BC}')") , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'StressRecoveryType' , 'pVal' , ), 153, (153, (), [ (16387, 10, None, "IID('{82CC641D-AB98-4571-A443-18EB0D52D7BC}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'AutomaticOutputsforMarkers' , 'pVal' , ), 154, (154, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'AutomaticOutputsforMarkers' , 'pVal' , ), 154, (154, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'AdvancedWeightingFactorCalculation' , 'pVal' , ), 151, (151, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'AdvancedWeightingFactorCalculation' , 'pVal' , ), 151, (151, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
]

IModelSettingFlexibilityFlexible_vtables_dispatch_ = 1
IModelSettingFlexibilityFlexible_vtables_ = [
	(( 'SkipOutputGenerationwhenPausingSimulation' , 'pVal' , ), 151, (151, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'SkipOutputGenerationwhenPausingSimulation' , 'pVal' , ), 151, (151, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
]

IModelSettingFlexibilityRFlex_vtables_dispatch_ = 1
IModelSettingFlexibilityRFlex_vtables_ = [
	(( 'DisplacementData' , 'pVal' , ), 151, (151, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'DisplacementData' , 'pVal' , ), 151, (151, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'StrainData' , 'pVal' , ), 152, (152, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'StrainData' , 'pVal' , ), 152, (152, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'StressData' , 'pVal' , ), 153, (153, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'StressData' , 'pVal' , ), 153, (153, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'OutputFileSetting' , 'ppVal' , ), 154, (154, (), [ (16393, 10, None, "IID('{350C9018-D3B8-4D6B-B9EC-271CE461FDC0}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'AutomaticOutputsforMarkers' , 'pVal' , ), 155, (155, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'AutomaticOutputsforMarkers' , 'pVal' , ), 155, (155, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'MaxNoOfInterfaceNodeMarkers' , 'pVal' , ), 156, (156, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'MaxNoOfInterfaceNodeMarkers' , 'pVal' , ), 156, (156, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'MassInvariant' , 'pVal' , ), 157, (157, (), [ (3, 1, None, "IID('{F81396F2-35BB-497C-A05D-6E5A382BBABF}')") , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'MassInvariant' , 'pVal' , ), 157, (157, (), [ (16387, 10, None, "IID('{F81396F2-35BB-497C-A05D-6E5A382BBABF}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'RedundantCheck' , 'pVal' , ), 158, (158, (), [ (3, 1, None, "IID('{69EFDC99-225F-4137-8D0A-456204A65102}')") , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'RedundantCheck' , 'pVal' , ), 158, (158, (), [ (16387, 10, None, "IID('{69EFDC99-225F-4137-8D0A-456204A65102}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
]

IModelSettingGeneral_vtables_dispatch_ = 1
IModelSettingGeneral_vtables_ = [
	(( 'Name' , 'Name' , ), 101, (101, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Name' , 'Name' , ), 101, (101, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Comment' , 'Comment' , ), 102, (102, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Comment' , 'Comment' , ), 102, (102, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'ShiftWhenPasting' , 'pVal' , ), 103, (103, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'ShiftWhenPasting' , 'pVal' , ), 103, (103, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'HideInactiveEntity' , 'pVal' , ), 104, (104, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'HideInactiveEntity' , 'pVal' , ), 104, (104, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'AccelerateRenderingWhenControllingView' , 'pVal' , ), 105, (105, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'AccelerateRenderingWhenControllingView' , 'pVal' , ), 105, (105, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'AutofitAfterChangeOfWorkingWindow' , 'pVal' , ), 106, (106, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'AutofitAfterChangeOfWorkingWindow' , 'pVal' , ), 106, (106, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'AlignCenterMarkerOrientationWithBodyPrincipalAxis' , 'pVal' , ), 107, (107, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'AlignCenterMarkerOrientationWithBodyPrincipalAxis' , 'pVal' , ), 107, (107, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'CreateBackupFile' , 'pVal' , ), 108, (108, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'CreateBackupFile' , 'pVal' , ), 108, (108, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'ErrorTolerance' , 'pVal' , ), 109, (109, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'ErrorTolerance' , 'pVal' , ), 109, (109, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'ZoomFactor' , 'pVal' , ), 110, (110, (), [ (4, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'ZoomFactor' , 'pVal' , ), 110, (110, (), [ (16388, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'SaveDialogSizePosition' , 'pVal' , ), 111, (111, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'SaveDialogSizePosition' , 'pVal' , ), 111, (111, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
]

IModelSettingLight_vtables_dispatch_ = 1
IModelSettingLight_vtables_ = [
	(( 'LightControlCollection' , 'pVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{4C7152BE-060E-4299-865E-FDD285928BDC}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Add' , 'strName' , 'pVal' , ), 102, (102, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{2D204501-DF2E-4EAA-90E7-02756A698739}')") , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Delete' , 'pVal' , ), 103, (103, (), [ (9, 1, None, "IID('{2D204501-DF2E-4EAA-90E7-02756A698739}')") , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 104, (104, (), [ ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
]

IModelSettingPlot_vtables_dispatch_ = 1
IModelSettingPlot_vtables_ = [
	(( 'UseDefaultPlotTemplate' , 'flag' , ), 101, (101, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseDefaultPlotTemplate' , 'flag' , ), 101, (101, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'DefaultPlotTemplateType' , 'Type' , ), 102, (102, (), [ (3, 1, None, "IID('{AEE3451E-0C34-41CE-839A-529F36851DBB}')") , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'DefaultPlotTemplateType' , 'Type' , ), 102, (102, (), [ (16387, 10, None, "IID('{AEE3451E-0C34-41CE-839A-529F36851DBB}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'SpecifiedDefaultPlotTemplateFile' , 'FileName' , ), 103, (103, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'SpecifiedDefaultPlotTemplateFile' , 'FileName' , ), 103, (103, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
]

IMotion_vtables_dispatch_ = 1
IMotion_vtables_ = [
	(( 'Type' , 'MotionType' , ), 151, (151, (), [ (3, 1, None, "IID('{94BD2B18-1251-4CF2-8423-311BAD5E6A7C}')") , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'MotionType' , ), 151, (151, (), [ (16387, 10, None, "IID('{94BD2B18-1251-4CF2-8423-311BAD5E6A7C}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'Text' , ), 152, (152, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'Text' , ), 152, (152, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'InitialPosition' , 'pVal' , ), 153, (153, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'InitialPosition' , 'pVal' , ), 153, (153, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'InitialVelocity' , 'pVal' , ), 154, (154, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'InitialVelocity' , 'pVal' , ), 154, (154, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 155, (155, (), [ (9, 1, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 155, (155, (), [ (16393, 10, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'Condition' , 'pVal' , ), 156, (156, (), [ (3, 1, None, "IID('{70901B7E-3DCF-4FEB-942E-27D3626EE52D}')") , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'Condition' , 'pVal' , ), 156, (156, (), [ (16387, 10, None, "IID('{70901B7E-3DCF-4FEB-942E-27D3626EE52D}')") , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'InitialPositionIDouble' , 'ppVal' , ), 157, (157, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'InitialVelocityIDouble' , 'ppVal' , ), 158, (158, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
]

IMotionPointOnCurve_vtables_dispatch_ = 1
IMotionPointOnCurve_vtables_ = [
	(( 'Type' , 'MotionType' , ), 151, (151, (), [ (3, 1, None, "IID('{94BD2B18-1251-4CF2-8423-311BAD5E6A7C}')") , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'MotionType' , ), 151, (151, (), [ (16387, 10, None, "IID('{94BD2B18-1251-4CF2-8423-311BAD5E6A7C}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'Text' , ), 152, (152, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'Text' , ), 152, (152, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'InitialPosition' , 'pVal' , ), 153, (153, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'InitialPosition' , 'pVal' , ), 153, (153, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 154, (154, (), [ (9, 1, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 154, (154, (), [ (16393, 10, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'Condition' , 'pVal' , ), 155, (155, (), [ (3, 1, None, "IID('{AA0392CF-8DA3-4D16-8280-13D900515BF7}')") , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'Condition' , 'pVal' , ), 155, (155, (), [ (16387, 10, None, "IID('{AA0392CF-8DA3-4D16-8280-13D900515BF7}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'StartingFromtheAssemblyPosition' , 'pVal' , ), 156, (156, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'StartingFromtheAssemblyPosition' , 'pVal' , ), 156, (156, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'InitialPositionIDouble' , 'ppVal' , ), 157, (157, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
]

INode_vtables_dispatch_ = 1
INode_vtables_ = [
	(( 'ID' , 'pVal' , ), 151, (151, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'ID' , 'pVal' , ), 151, (151, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'x' , 'pVal' , ), 152, (152, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'x' , 'pVal' , ), 152, (152, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'y' , 'pVal' , ), 153, (153, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'y' , 'pVal' , ), 153, (153, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'z' , 'pVal' , ), 154, (154, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'z' , 'pVal' , ), 154, (154, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
]

INodeBC_vtables_dispatch_ = 1
INodeBC_vtables_ = [
	(( 'Select' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Select' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalDOFX' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalDOFX' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalDOFY' , 'pVal' , ), 53, (53, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalDOFY' , 'pVal' , ), 53, (53, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalDOFZ' , 'pVal' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'TranslationalDOFZ' , 'pVal' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'RotationalDOFX' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'RotationalDOFX' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'RotationalDOFY' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'RotationalDOFY' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'RotationalDOFZ' , 'pVal' , ), 57, (57, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'RotationalDOFZ' , 'pVal' , ), 57, (57, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
]

INodeBCCollection_vtables_dispatch_ = 1
INodeBCCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (3, 1, None, None) , 
			 (16393, 10, None, "IID('{28491D53-A2CA-45CC-80CC-CB1FB4E7A32C}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

INodeOutput_vtables_dispatch_ = 1
INodeOutput_vtables_ = [
	(( 'Select' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Select' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
]

INodeOutputCollection_vtables_dispatch_ = 1
INodeOutputCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (3, 1, None, None) , 
			 (16393, 10, None, "IID('{C3E2B430-98D5-4D24-BB8C-3B00F28373F3}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

INodeReadOnly_vtables_dispatch_ = 1
INodeReadOnly_vtables_ = [
	(( 'ID' , 'pVal' , ), 151, (151, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'x' , 'pVal' , ), 152, (152, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'y' , 'pVal' , ), 153, (153, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'z' , 'pVal' , ), 154, (154, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
]

IObjectControl_vtables_dispatch_ = 1
IObjectControl_vtables_ = [
	(( 'TranslateObjectWithVector' , 'pEntity' , 'pDirection' , 'dDistance' , ), 51, (51, (), [ 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (8197, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'TranslateObjectWithTwoPoints' , 'pEntity' , 'pFirstPt' , 'pSecondPt' , ), 52, (52, (), [ 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (8197, 1, None, None) , (8197, 1, None, None) , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'RotateObjectWithScalar' , 'pEntity' , 'pAxisOrigin' , 'pAxisDirection' , 'dDegree' , 
			 ), 53, (53, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (8197, 1, None, None) , (8197, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'RotateObjectWithVector' , 'pEntity' , 'pAxisOrigin' , 'pAxisDirection' , 'pFirstVector' , 
			 'pSecondVector' , ), 54, (54, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (8197, 1, None, None) , (8197, 1, None, None) , 
			 (8197, 1, None, None) , (8197, 1, None, None) , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'AlignObjectWithOrientation' , 'pEntity' , 'pReferenceObject' , ), 55, (55, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'AlignObjectWithFace' , 'pActionFace' , 'pBaseFace' , 'btype' , ), 56, (56, (), [ 
			 (9, 1, None, "IID('{C5D7538F-B727-4D10-9D7D-D743D92ACAB4}')") , (9, 1, None, "IID('{C5D7538F-B727-4D10-9D7D-D743D92ACAB4}')") , (3, 1, None, "IID('{409D0AA6-4D00-4892-B6AA-968F8314E955}')") , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
]

IPairConstraint_vtables_dispatch_ = 1
IPairConstraint_vtables_ = [
]

IPairConstraintCollection_vtables_dispatch_ = 1
IPairConstraintCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{E53E6E5E-C0B7-4F3F-9E32-30F47855CD70}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IPairConstraintCoupler_vtables_dispatch_ = 1
IPairConstraintCoupler_vtables_ = [
	(( 'Type' , 'pVal' , ), 301, (301, (), [ (3, 1, None, "IID('{74E41256-D5D8-4EC8-82EE-2061F1AEC87A}')") , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 301, (301, (), [ (16387, 10, None, "IID('{74E41256-D5D8-4EC8-82EE-2061F1AEC87A}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'Driver' , 'ppVal' , ), 302, (302, (), [ (9, 1, None, "IID('{B9173DAD-05DD-4037-9367-726DDDEE988E}')") , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'Driver' , 'ppVal' , ), 302, (302, (), [ (16393, 10, None, "IID('{B9173DAD-05DD-4037-9367-726DDDEE988E}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'DriverScale' , 'ppVal' , ), 303, (303, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'Coupler1' , 'ppVal' , ), 304, (304, (), [ (9, 1, None, "IID('{B9173DAD-05DD-4037-9367-726DDDEE988E}')") , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'Coupler1' , 'ppVal' , ), 304, (304, (), [ (16393, 10, None, "IID('{B9173DAD-05DD-4037-9367-726DDDEE988E}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'Coupler1Scale' , 'ppVal' , ), 305, (305, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'Coupler2' , 'ppVal' , ), 306, (306, (), [ (9, 1, None, "IID('{B9173DAD-05DD-4037-9367-726DDDEE988E}')") , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'Coupler2' , 'ppVal' , ), 306, (306, (), [ (16393, 10, None, "IID('{B9173DAD-05DD-4037-9367-726DDDEE988E}')") , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'Coupler2Scale' , 'ppVal' , ), 307, (307, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'DriverType' , 'CouplerJointType' , ), 308, (308, (), [ (3, 1, None, "IID('{03F35DB8-F120-47FC-82B7-BCDA7152AF3A}')") , ], 1 , 4 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'DriverType' , 'CouplerJointType' , ), 308, (308, (), [ (16387, 10, None, "IID('{03F35DB8-F120-47FC-82B7-BCDA7152AF3A}')") , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'Coupler1Type' , 'CouplerJointType' , ), 309, (309, (), [ (3, 1, None, "IID('{03F35DB8-F120-47FC-82B7-BCDA7152AF3A}')") , ], 1 , 4 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'Coupler1Type' , 'CouplerJointType' , ), 309, (309, (), [ (16387, 10, None, "IID('{03F35DB8-F120-47FC-82B7-BCDA7152AF3A}')") , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'Coupler2Type' , 'CouplerJointType' , ), 310, (310, (), [ (3, 1, None, "IID('{03F35DB8-F120-47FC-82B7-BCDA7152AF3A}')") , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'Coupler2Type' , 'CouplerJointType' , ), 310, (310, (), [ (16387, 10, None, "IID('{03F35DB8-F120-47FC-82B7-BCDA7152AF3A}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
]

IPairConstraintGear_vtables_dispatch_ = 1
IPairConstraintGear_vtables_ = [
	(( 'FirstJoint' , 'ppVal' , ), 301, (301, (), [ (9, 1, None, "IID('{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}')") , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'FirstJoint' , 'ppVal' , ), 301, (301, (), [ (16393, 10, None, "IID('{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'SecondJoint' , 'ppVal' , ), 302, (302, (), [ (9, 1, None, "IID('{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}')") , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'SecondJoint' , 'ppVal' , ), 302, (302, (), [ (16393, 10, None, "IID('{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'CommonVelocityMarker' , 'ppVal' , ), 303, (303, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'CommonVelocityMarker' , 'ppVal' , ), 303, (303, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
]

IParametricPoint_vtables_dispatch_ = 1
IParametricPoint_vtables_ = [
	(( 'PointX' , 'ppVal' , ), 151, (151, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'PointY' , 'ppVal' , ), 152, (152, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'PointZ' , 'ppVal' , ), 153, (153, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 154, (154, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 154, (154, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UseDesignParameter' , 'pVal' , ), 155, (155, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UseDesignParameter' , 'pVal' , ), 155, (155, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'GetGlobalPoint' , 'x' , 'y' , 'z' , ), 156, (156, (), [ 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'RefMarkerEx' , 'ppVal' , ), 157, (157, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 158, (158, (), [ ], 1 , 1 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'Text' , 'Text' , ), 159, (159, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'Text' , 'Text' , ), 159, (159, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
]

IParametricPointCollection_vtables_dispatch_ = 1
IParametricPointCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IParametricPointConnector_vtables_dispatch_ = 1
IParametricPointConnector_vtables_ = [
	(( 'Add' , 'pVal' , ), 151, (151, (), [ (9, 1, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 1 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Delete' , 'pVal' , ), 152, (152, (), [ (9, 1, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 1 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Point' , 'ppVal' , ), 153, (153, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 154, (154, (), [ ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'GetReferenceByIndex' , 'Index' , 'ppVal' , ), 155, (155, (), [ (19, 1, None, None) , 
			 (16393, 10, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'NumOfReferences' , 'pVal' , ), 156, (156, (), [ (16403, 10, None, None) , ], 1 , 1 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'DeleteAll' , ), 157, (157, (), [ ], 1 , 1 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
]

IParametricPointConnectorCollection_vtables_dispatch_ = 1
IParametricPointConnectorCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{5A26F623-DA73-4531-884A-946494037A2B}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IParametricValue_vtables_dispatch_ = 1
IParametricValue_vtables_ = [
	(( 'Value' , 'pVal' , ), 151, (151, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Value' , 'pVal' , ), 151, (151, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Text' , 'Text' , ), 152, (152, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Text' , 'Text' , ), 152, (152, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'UseDesignParameter' , 'pVal' , ), 153, (153, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UseDesignParameter' , 'pVal' , ), 153, (153, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
]

IParametricValueCollection_vtables_dispatch_ = 1
IParametricValueCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IParametricValueConnector_vtables_dispatch_ = 1
IParametricValueConnector_vtables_ = [
	(( 'Add' , 'pVal' , ), 151, (151, (), [ (9, 1, None, "IID('{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')") , ], 1 , 1 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Delete' , 'pVal' , ), 152, (152, (), [ (9, 1, None, "IID('{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')") , ], 1 , 1 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Value' , 'ppVal' , ), 153, (153, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 154, (154, (), [ ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'GetReferenceByIndex' , 'Index' , 'ppVal' , ), 155, (155, (), [ (19, 1, None, None) , 
			 (16393, 10, None, "IID('{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')") , ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'NumOfReferences' , 'pVal' , ), 156, (156, (), [ (16403, 10, None, None) , ], 1 , 1 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'DeleteAll' , ), 157, (157, (), [ ], 1 , 1 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
]

IParametricValueConnectorCollection_vtables_dispatch_ = 1
IParametricValueConnectorCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{3C8942E4-0A9C-48DB-AFF4-882202E3BA8A}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IPattern_vtables_dispatch_ = 1
IPattern_vtables_ = [
	(( 'Translation' , 'pMulti' , 'iCount' , 'pDirection' , 'dDistance' , 
			 'ppResult' , ), 51, (51, (), [ (8204, 1, None, None) , (19, 1, None, None) , (8197, 1, None, None) , 
			 (5, 1, None, None) , (24588, 10, None, None) , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Rotation' , 'pMulti' , 'iCount' , 'pPoint' , 'pAxis' , 
			 'dAngle' , 'ppResult' , ), 52, (52, (), [ (8204, 1, None, None) , (19, 1, None, None) , 
			 (8197, 1, None, None) , (8197, 1, None, None) , (5, 1, None, None) , (24588, 10, None, None) , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'RotationWithTranslation' , 'pMulti' , 'iCount' , 'pPoint' , 'pAxis' , 
			 'dAngle' , 'Type' , 'iCountT' , 'pDirection' , 'dDistance' , 
			 'ppResult' , ), 53, (53, (), [ (8204, 1, None, None) , (19, 1, None, None) , (8197, 1, None, None) , 
			 (8197, 1, None, None) , (5, 1, None, None) , (3, 1, None, "IID('{3588141E-A116-4B03-91C9-12A9B2A470AD}')") , (19, 1, None, None) , (8197, 1, None, None) , 
			 (5, 1, None, None) , (24588, 10, None, None) , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
]

IPerformanceIndex_vtables_dispatch_ = 1
IPerformanceIndex_vtables_ = [
	(( 'Type' , 'pVal' , ), 151, (151, (), [ (3, 1, None, "IID('{F647DDAA-8DDC-4516-8EC6-0C1099295F3A}')") , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 151, (151, (), [ (16387, 10, None, "IID('{F647DDAA-8DDC-4516-8EC6-0C1099295F3A}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'ppVal' , ), 152, (152, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'ppVal' , ), 152, (152, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'ResultType' , 'ppVal' , ), 153, (153, (), [ (3, 1, None, "IID('{48BC58C9-3315-4123-B837-9E6C373B6F0D}')") , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'ResultType' , 'ppVal' , ), 153, (153, (), [ (16387, 10, None, "IID('{48BC58C9-3315-4123-B837-9E6C373B6F0D}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'Use' , 'pVal' , ), 154, (154, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'Use' , 'pVal' , ), 154, (154, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'Scope' , 'ppVal' , ), 155, (155, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'Scope' , 'ppVal' , ), 155, (155, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetType' , 'Type' , ), 156, (156, (), [ (3, 1, None, "IID('{3FBEE825-C5E1-4629-B3E2-3548E2C0CE7D}')") , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetType' , 'Type' , ), 156, (156, (), [ (16387, 10, None, "IID('{3FBEE825-C5E1-4629-B3E2-3548E2C0CE7D}')") , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetDllPath' , 'pVal' , ), 157, (157, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetDllPath' , 'pVal' , ), 157, (157, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetFunctionName' , 'pVal' , ), 158, (158, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetFunctionName' , 'pVal' , ), 158, (158, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetScriptPath' , 'pVal' , ), 159, (159, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'ProcessNetScriptPath' , 'pVal' , ), 159, (159, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
]

IPerformanceIndexCollection_vtables_dispatch_ = 1
IPerformanceIndexCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IPlotDocument_vtables_dispatch_ = 1
IPlotDocument_vtables_ = [
	(( 'Name' , 'Name' , ), 51, (51, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'GetInternalChartControl' , 'iRow' , 'iCol' , 'ppChartControl' , ), 52, (52, (), [ 
			 (3, 1, None, None) , (3, 1, None, None) , (16393, 10, None, None) , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'GetPlotData' , 'dataFullName' , 'ppSafeArray' , ), 54, (54, (), [ (8, 1, None, None) , 
			 (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'ImportPlotDataFile' , 'strFile' , 'pIndex' , ), 55, (55, (), [ (8, 1, None, None) , 
			 (16387, 10, None, None) , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'DrawPlot' , 'legend' , 'dataX' , 'dataY' , ), 56, (56, (), [ 
			 (8, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'ActivateView' , 'iRow' , 'iCol' , ), 57, (57, (), [ (3, 1, None, None) , 
			 (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'GetPlotDataFromIndex' , 'fileIndex' , 'dataName' , 'ppSafeArray' , ), 58, (58, (), [ 
			 (3, 1, None, None) , (8, 1, None, None) , (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'Activate' , ), 59, (59, (), [ ], 1 , 1 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'AddPage' , ), 60, (60, (), [ ], 1 , 1 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'ClearActivePage' , ), 61, (61, (), [ ], 1 , 1 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'OwnerApplication' , 'ppVal' , ), 62, (62, (), [ (16393, 10, None, "IID('{0E72DCBC-60DD-495E-B067-85BA9DDC18BB}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'ActiveChartControl' , 'ppPlotControl' , ), 63, (63, (), [ (16393, 10, None, "IID('{6EFBEC37-9BE6-43D4-8F59-36391BF28395}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'GetChartControl' , 'iRow' , 'iCol' , 'ppPlotControl' , ), 64, (64, (), [ 
			 (3, 1, None, None) , (3, 1, None, None) , (16393, 10, None, "IID('{6EFBEC37-9BE6-43D4-8F59-36391BF28395}')") , ], 1 , 1 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'ExportData' , 'strFileName' , 'arrDataName' , 'vbExportWithName' , 'vbScientificNotation' , 
			 'iDigit' , ), 65, (65, (), [ (8, 1, None, None) , (8200, 1, None, None) , (11, 1, None, None) , 
			 (11, 1, None, None) , (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'SimpleMathSum' , 'uIndex1' , 'uIndex2' , 'vbPlotNewPage' , 'vbAddToDatabase' , 
			 ), 66, (66, (), [ (19, 1, None, None) , (19, 1, None, None) , (11, 1, None, None) , (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'SimpleMathSubtract' , 'uIndex1' , 'uIndex2' , 'vbPlotNewPage' , 'vbAddToDatabase' , 
			 ), 67, (67, (), [ (19, 1, None, None) , (19, 1, None, None) , (11, 1, None, None) , (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'SimpleMathMultiply' , 'uIndex1' , 'uIndex2' , 'vbPlotNewPage' , 'vbAddToDatabase' , 
			 ), 68, (68, (), [ (19, 1, None, None) , (19, 1, None, None) , (11, 1, None, None) , (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'SimpleMathDivide' , 'uIndex1' , 'uIndex2' , 'vbPlotNewPage' , 'vbAddToDatabase' , 
			 ), 69, (69, (), [ (19, 1, None, None) , (19, 1, None, None) , (11, 1, None, None) , (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'SimpleMathAbsolute' , 'uIndex' , 'vbPlotNewPage' , 'vbAddToDatabase' , ), 70, (70, (), [ 
			 (19, 1, None, None) , (11, 1, None, None) , (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'SimpleMathScale' , 'uIndex' , 'dScaleX' , 'dScaleY' , 'vbPlotNewPage' , 
			 'vbAddToDatabase' , ), 71, (71, (), [ (19, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , 
			 (11, 1, None, None) , (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'SimpleMathTranslate' , 'uIndex' , 'enOption' , 'dOffsetX' , 'dOffsetY' , 
			 'uIndexAlign' , 'vbPlotNewPage' , 'vbAddToDatabase' , ), 72, (72, (), [ (19, 1, None, None) , 
			 (3, 1, None, "IID('{143F24F8-0EFE-4459-9F40-2E383A8A6DB3}')") , (5, 1, None, None) , (5, 1, None, None) , (19, 1, None, None) , (11, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'InterpolationLinear' , 'uIndex' , 'uNPoints' , 'dMinX' , 'dMaxX' , 
			 'vbPlotNewPage' , 'vbAddToDatabase' , ), 73, (73, (), [ (19, 1, None, None) , (19, 1, None, None) , 
			 (5, 1, None, None) , (5, 1, None, None) , (11, 1, None, None) , (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'InterpolationPolynomial' , 'uIndex' , 'uNPoints' , 'enOrder' , 'dMinX' , 
			 'dMaxX' , 'vbPlotNewPage' , 'vbAddToDatabase' , ), 74, (74, (), [ (19, 1, None, None) , 
			 (19, 1, None, None) , (3, 1, None, "IID('{091581B0-7AE8-4864-B7A7-47DC7FD5E4E1}')") , (5, 1, None, None) , (5, 1, None, None) , (11, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'InterpolationAkimaSpline' , 'uIndex' , 'uNPoints' , 'dMinX' , 'dMaxX' , 
			 'vbPlotNewPage' , 'vbAddToDatabase' , ), 75, (75, (), [ (19, 1, None, None) , (19, 1, None, None) , 
			 (5, 1, None, None) , (5, 1, None, None) , (11, 1, None, None) , (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'InterpolationCubicSpline' , 'uIndex' , 'uNPoints' , 'dMinX' , 'dMaxX' , 
			 'vbPlotNewPage' , 'vbAddToDatabase' , ), 76, (76, (), [ (19, 1, None, None) , (19, 1, None, None) , 
			 (5, 1, None, None) , (5, 1, None, None) , (11, 1, None, None) , (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'CalculusDifferential' , 'uIndex' , 'enOption' , 'vbPlotNewPage' , 'vbAddToDatabase' , 
			 ), 77, (77, (), [ (19, 1, None, None) , (3, 1, None, "IID('{4B750D8C-3D87-41F0-AF9D-1A5AAAE6120C}')") , (11, 1, None, None) , (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'CalculusIntegral' , 'uIndex' , 'enOption' , 'vbPlotNewPage' , 'vbAddToDatabase' , 
			 ), 78, (78, (), [ (19, 1, None, None) , (3, 1, None, "IID('{4B750D8C-3D87-41F0-AF9D-1A5AAAE6120C}')") , (11, 1, None, None) , (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'FFTMagnitude' , 'uIndex' , 'enMethod' , 'nN' , 'dMinX' , 
			 'dMaxX' , 'vbPlotNewPage' , 'vbAddToDatabase' , ), 79, (79, (), [ (19, 1, None, None) , 
			 (3, 1, None, "IID('{59204C3D-BE22-474C-B5EA-2C73FA3172AE}')") , (3, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (11, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'FFTPhase' , 'uIndex' , 'enMethod' , 'nN' , 'dMinX' , 
			 'dMaxX' , 'vbPlotNewPage' , 'vbAddToDatabase' , ), 80, (80, (), [ (19, 1, None, None) , 
			 (3, 1, None, "IID('{59204C3D-BE22-474C-B5EA-2C73FA3172AE}')") , (3, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (11, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'FFTPowerSpectralDensity' , 'uIndex' , 'enMethod' , 'nN' , 'dMinX' , 
			 'dMaxX' , 'vbPlotNewPage' , 'vbAddToDatabase' , ), 81, (81, (), [ (19, 1, None, None) , 
			 (3, 1, None, "IID('{59204C3D-BE22-474C-B5EA-2C73FA3172AE}')") , (3, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (11, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'FilterButterWorth' , 'uIndex' , 'enMethod' , 'nOrder' , 'dCutoff1' , 
			 'dCutoff2' , 'vbPlotNewPage' , 'vbAddToDatabase' , ), 82, (82, (), [ (19, 1, None, None) , 
			 (3, 1, None, "IID('{B0DFC31D-74EB-451F-9169-2CD7EC99C86D}')") , (3, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (11, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'FilterTransferFunction' , 'uIndex' , 'arrNumerator' , 'arrDenominator' , 'vbPlotNewPage' , 
			 'vbAddToDatabase' , ), 83, (83, (), [ (19, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , 
			 (11, 1, None, None) , (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'SetRelatedModelDocument' , 'pDocument' , ), 84, (84, (), [ (9, 1, None, "IID('{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')") , ], 1 , 1 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'ExportImageFile' , 'strFile' , 'enImageFileFormat' , 'OverWrite' , ), 85, (85, (), [ 
			 (8, 1, None, None) , (3, 1, None, "IID('{67EAC20D-87D3-48F2-81FA-11F220C6E16F}')") , (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'UseDrawRange' , 'pVal' , ), 86, (86, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'UseDrawRange' , 'pVal' , ), 86, (86, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'DrawRangeMin' , 'pVal' , ), 87, (87, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'DrawRangeMin' , 'pVal' , ), 87, (87, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'DrawRangeMax' , 'pVal' , ), 88, (88, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'DrawRangeMax' , 'pVal' , ), 88, (88, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'DrawPlotBubble' , 'legend' , 'xData' , 'yData' , 'yRadius' , 
			 ), 89, (89, (), [ (8, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , ], 1 , 1 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'DrawPlotBubbleEx' , 'legend' , 'xData' , 'yData' , 'yRadius' , 
			 'vbTransparency' , 'vbMarkerColorSaturation' , 'vbMarkerBorderColorSaturation' , 'sPointBorderLineWidth' , ), 90, (90, (), [ 
			 (8, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , (11, 1, None, None) , 
			 (11, 1, None, None) , (11, 1, None, None) , (2, 1, None, None) , ], 1 , 1 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'GetPlottableNameList' , 'uIndex' , 'ppSafeArray' , ), 91, (91, (), [ (19, 1, None, None) , 
			 (24584, 10, None, None) , ], 1 , 1 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'AutoFit' , 'pVal' , ), 92, (92, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'AutoFit' , 'pVal' , ), 92, (92, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'ImportedFileCount' , 'pVal' , ), 93, (93, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'DrawPlotBubbleWithColor' , 'legend' , 'xData' , 'yData' , 'yRadius' , 
			 'valColor' , ), 94, (94, (), [ (8, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , 
			 (8197, 1, None, None) , (19, 1, None, None) , ], 1 , 1 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'ExportPlotTemplate' , 'strFile' , ), 95, (95, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'FileSave' , 'strFile' , 'OverWrite' , 'bSuccess' , ), 96, (96, (), [ 
			 (8, 1, None, None) , (11, 1, None, None) , (16395, 10, None, None) , ], 1 , 1 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'LoadAnimation' , 'PlotWindowPosition' , 'bSuccess' , ), 97, (97, (), [ (3, 1, None, "IID('{1E05B8F1-A589-4585-8F53-2B60E3FCC7A0}')") , 
			 (16395, 10, None, None) , ], 1 , 1 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
	(( 'LoadPlot' , 'PlotWindowPosition' , 'bSuccess' , ), 98, (98, (), [ (3, 1, None, "IID('{1E05B8F1-A589-4585-8F53-2B60E3FCC7A0}')") , 
			 (16395, 10, None, None) , ], 1 , 1 , 4 , 0 , 456 , (3, 0, None, None) , 0 , )),
	(( 'PlotShowWindowType' , 'ShowWindowOption' , ), 99, (99, (), [ (3, 1, None, "IID('{A5A7B899-40AD-4DE5-90A0-FDC6B980AAFF}')") , ], 1 , 1 , 4 , 0 , 464 , (3, 0, None, None) , 0 , )),
	(( 'ImportPlotTemplateFile' , 'strFile' , ), 100, (100, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 472 , (3, 0, None, None) , 0 , )),
	(( 'ExportPlotTemplateFile' , 'strFile' , ), 101, (101, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 480 , (3, 0, None, None) , 0 , )),
	(( 'ActivatePage' , 'iIndex' , ), 102, (102, (), [ (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 488 , (3, 0, None, None) , 0 , )),
	(( 'DeletePage' , 'iIndex' , ), 103, (103, (), [ (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 496 , (3, 0, None, None) , 0 , )),
	(( 'GetPageName' , 'iIndex' , 'strName' , ), 104, (104, (), [ (3, 1, None, None) , 
			 (16392, 10, None, None) , ], 1 , 1 , 4 , 0 , 504 , (3, 0, None, None) , 0 , )),
	(( 'SetPageName' , 'iIndex' , 'strName' , ), 105, (105, (), [ (3, 1, None, None) , 
			 (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 512 , (3, 0, None, None) , 0 , )),
	(( 'GetImportedFilePathList' , 'ppSafeArray' , ), 106, (106, (), [ (24584, 10, None, None) , ], 1 , 1 , 4 , 0 , 520 , (3, 0, None, None) , 0 , )),
	(( 'AddSeriesAxisType' , 'pVal' , ), 107, (107, (), [ (3, 1, None, "IID('{D260937C-03B2-41A4-B36F-37CC3C282146}')") , ], 1 , 4 , 4 , 0 , 528 , (3, 0, None, None) , 0 , )),
	(( 'AddSeriesAxisType' , 'pVal' , ), 107, (107, (), [ (16387, 10, None, "IID('{D260937C-03B2-41A4-B36F-37CC3C282146}')") , ], 1 , 2 , 4 , 0 , 536 , (3, 0, None, None) , 0 , )),
	(( 'SiginificantDigit' , 'SiginificantDigit' , ), 108, (108, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 544 , (3, 0, None, None) , 0 , )),
	(( 'SiginificantDigit' , 'SiginificantDigit' , ), 108, (108, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 552 , (3, 0, None, None) , 0 , )),
	(( 'DrawCurveWithIndex' , 'Index' , 'xName' , 'yName' , 'Result' , 
			 ), 109, (109, (), [ (3, 1, None, None) , (8, 1, None, None) , (8, 1, None, None) , (16393, 10, None, "IID('{6EFBEC37-9BE6-43D4-8F59-36391BF2839B}')") , ], 1 , 1 , 4 , 0 , 560 , (3, 0, None, None) , 0 , )),
	(( 'ExportDataWithIndex' , 'FileName' , 'indices' , 'arrDataName' , 'vbExportWithName' , 
			 'vbScientificNotation' , 'iDigit' , ), 110, (110, (), [ (8, 1, None, None) , (8195, 1, None, None) , 
			 (8200, 1, None, None) , (11, 1, None, None) , (11, 1, None, None) , (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 568 , (3, 0, None, None) , 0 , )),
	(( 'CampbellDiagram3D' , 'ppVal' , ), 111, (111, (), [ (16393, 10, None, "IID('{2BB11C40-A053-4367-9C20-DE894FB04B41}')") , ], 1 , 2 , 4 , 0 , 576 , (3, 0, None, None) , 0 , )),
	(( 'DeleteRPLT' , 'fileIndex' , ), 112, (112, (), [ (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 584 , (3, 0, None, None) , 0 , )),
	(( 'GetUserData' , 'dataID' , 'ppData' , ), 113, (113, (), [ (3, 1, None, None) , 
			 (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 592 , (3, 0, None, None) , 0 , )),
	(( 'GetUserDataNameList' , 'ppNames' , ), 114, (114, (), [ (24584, 10, None, None) , ], 1 , 1 , 4 , 0 , 600 , (3, 0, None, None) , 0 , )),
	(( 'GetPageCount' , 'pVal' , ), 115, (115, (), [ (16387, 10, None, None) , ], 1 , 1 , 4 , 0 , 608 , (3, 0, None, None) , 0 , )),
	(( 'RelativeModelDocument' , 'ppDocument' , ), 116, (116, (), [ (16393, 10, None, "IID('{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')") , ], 1 , 2 , 4 , 0 , 616 , (3, 0, None, None) , 0 , )),
	(( 'GetAnimationCustomView' , 'PlotWindowPosition' , 'ppVal' , ), 117, (117, (), [ (3, 1, None, "IID('{1E05B8F1-A589-4585-8F53-2B60E3FCC7A0}')") , 
			 (16393, 10, None, "IID('{0F88BBEF-C77F-472D-9936-E84B77F9756A}')") , ], 1 , 1 , 4 , 0 , 624 , (3, 0, None, None) , 0 , )),
	(( 'FFTPowerSpectralDensity2' , 'uIndex' , 'enMethod' , 'nN' , 'dMinX' , 
			 'dMaxX' , 'enPSDType' , 'vbPlotNewPage' , 'vbAddToDatabase' , ), 118, (118, (), [ 
			 (19, 1, None, None) , (3, 1, None, "IID('{59204C3D-BE22-474C-B5EA-2C73FA3172AE}')") , (3, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , 
			 (3, 1, None, "IID('{AB98E9F7-3F96-4D27-86E3-C7F2801ED08F}')") , (11, 1, None, None) , (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 632 , (3, 0, None, None) , 0 , )),
]

IPlotDocumentCollection_vtables_dispatch_ = 1
IPlotDocumentCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IPoint2D_vtables_dispatch_ = 1
IPoint2D_vtables_ = [
	(( 'x' , 'pVal' , ), 51, (51, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'x' , 'pVal' , ), 51, (51, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'y' , 'pVal' , ), 52, (52, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'y' , 'pVal' , ), 52, (52, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
]

IPoint2DCollection_vtables_dispatch_ = 1
IPoint2DCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (3, 1, None, None) , 
			 (16393, 10, None, "IID('{5C8577DA-B2F5-4C78-AF81-251818CE7223}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IPoint2DWithRadius_vtables_dispatch_ = 1
IPoint2DWithRadius_vtables_ = [
	(( 'x' , 'pVal' , ), 51, (51, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'x' , 'pVal' , ), 51, (51, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'y' , 'pVal' , ), 52, (52, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'y' , 'pVal' , ), 52, (52, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'r' , 'pVal' , ), 53, (53, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'r' , 'pVal' , ), 53, (53, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
]

IPoint2DWithRadiusCollection_vtables_dispatch_ = 1
IPoint2DWithRadiusCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (3, 1, None, None) , 
			 (16393, 10, None, "IID('{F7D1F12D-2871-468E-844A-AF31810CF78E}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IPoint3D_vtables_dispatch_ = 1
IPoint3D_vtables_ = [
	(( 'x' , 'pVal' , ), 51, (51, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'x' , 'pVal' , ), 51, (51, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'y' , 'pVal' , ), 52, (52, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'y' , 'pVal' , ), 52, (52, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'z' , 'pVal' , ), 53, (53, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'z' , 'pVal' , ), 53, (53, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
]

IPoint3DCollection_vtables_dispatch_ = 1
IPoint3DCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (3, 1, None, None) , 
			 (16393, 10, None, "IID('{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
	(( 'AppendPoint' , 'dX' , 'dY' , 'dZ' , ), 52, (52, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'DeletePoint' , 'iIndex' , ), 53, (53, (), [ (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'Export' , 'strFile' , 'bOverWrite' , ), 54, (54, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'Import' , 'strFile' , ), 55, (55, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'Clear' , ), 56, (56, (), [ ], 1 , 1 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
]

IPoint3DWithRadius_vtables_dispatch_ = 1
IPoint3DWithRadius_vtables_ = [
	(( 'x' , 'pVal' , ), 51, (51, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'x' , 'pVal' , ), 51, (51, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'y' , 'pVal' , ), 52, (52, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'y' , 'pVal' , ), 52, (52, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'z' , 'pVal' , ), 53, (53, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'z' , 'pVal' , ), 53, (53, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'r' , 'pVal' , ), 54, (54, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'r' , 'pVal' , ), 54, (54, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
]

IPoint3DWithRadiusCollection_vtables_dispatch_ = 1
IPoint3DWithRadiusCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{3656AD01-A48C-43E5-A87A-567128C5129E}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
	(( 'Add' , 'x' , 'y' , 'z' , 'Radius' , 
			 ), 52, (52, (), [ (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Insert' , 'Index' , 'x' , 'y' , 'z' , 
			 'Radius' , ), 53, (53, (), [ (3, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , 
			 (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'Delete' , 'Index' , ), 54, (54, (), [ (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'Clear' , ), 55, (55, (), [ ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
]

IPointCollection_vtables_dispatch_ = 1
IPointCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (3, 1, None, None) , 
			 (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
	(( 'AppendPoint' , 'dX' , 'dY' , 'dZ' , ), 52, (52, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'AppendParametricPoint' , 'pVal' , ), 53, (53, (), [ (9, 1, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'InsertPoint' , 'iIndex' , 'dX' , 'dY' , 'dZ' , 
			 ), 54, (54, (), [ (3, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'InsertParametricPoint' , 'iIndex' , 'pVal' , ), 55, (55, (), [ (3, 1, None, None) , 
			 (9, 1, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'DeletePoint' , 'iIndex' , ), 56, (56, (), [ (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
]

IPostAnalysis_vtables_dispatch_ = 1
IPostAnalysis_vtables_ = [
	(( 'EigenMovement' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{8F416D31-9366-4C4A-8395-3DFE99C21F1D}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
]

IProcessNet_vtables_dispatch_ = 1
IProcessNet_vtables_ = [
	(( 'Run' , 'functionName' , 'assemblyPath' , 'Type' , ), 51, (51, (), [ 
			 (8, 1, None, None) , (8, 0, None, None) , (3, 0, None, "IID('{3FBEE825-C5E1-4629-B3E2-3548E2C0CE7D}')") , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
]

IReferenceFrame_vtables_dispatch_ = 1
IReferenceFrame_vtables_ = [
	(( 'Origin' , 'ppVal' , ), 151, (151, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'MasterPoint' , 'ppVal' , ), 152, (152, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'SlavePoint' , 'ppVal' , ), 153, (153, (), [ (16393, 10, None, "IID('{918CAF9A-7A62-4EC4-B45D-C259C997B661}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'EulerAngle' , 'ppVal' , ), 154, (154, (), [ (16393, 10, None, "IID('{9D220527-04EE-4578-9457-4C2061D099E7}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'MasterPointType' , 'AxisType' , ), 155, (155, (), [ (3, 1, None, "IID('{30E13C29-97B5-4A36-99AF-09D3F2FAD89C}')") , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'MasterPointType' , 'AxisType' , ), 155, (155, (), [ (16387, 10, None, "IID('{30E13C29-97B5-4A36-99AF-09D3F2FAD89C}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'SlavePointType' , 'AxisType' , ), 156, (156, (), [ (3, 1, None, "IID('{30E13C29-97B5-4A36-99AF-09D3F2FAD89C}')") , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'SlavePointType' , 'AxisType' , ), 156, (156, (), [ (16387, 10, None, "IID('{30E13C29-97B5-4A36-99AF-09D3F2FAD89C}')") , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'OrientationType' , 'OrientationType' , ), 157, (157, (), [ (3, 1, None, "IID('{8FAAC199-EEC5-4638-9F70-10B5A4CBBB3E}')") , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'OrientationType' , 'OrientationType' , ), 157, (157, (), [ (16387, 10, None, "IID('{8FAAC199-EEC5-4638-9F70-10B5A4CBBB3E}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'SetOrigin' , 'x' , 'y' , 'z' , ), 158, (158, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'SetMasterPoint' , 'AxisType' , 'x' , 'y' , 'z' , 
			 ), 159, (159, (), [ (3, 1, None, "IID('{30E13C29-97B5-4A36-99AF-09D3F2FAD89C}')") , (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'SetSlavePoint' , 'AxisType' , 'x' , 'y' , 'z' , 
			 ), 160, (160, (), [ (3, 1, None, "IID('{30E13C29-97B5-4A36-99AF-09D3F2FAD89C}')") , (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'SetEulerAngle' , 'eulerType' , 'a' , 'b' , 'c' , 
			 ), 161, (161, (), [ (3, 1, None, "IID('{A952E8B8-4277-4459-8636-46BE3982535C}')") , (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'GetOrigin' , 'x' , 'y' , 'z' , ), 162, (162, (), [ 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'GetMasterPoint' , 'AxisType' , 'x' , 'y' , 'z' , 
			 ), 163, (163, (), [ (16387, 2, None, "IID('{30E13C29-97B5-4A36-99AF-09D3F2FAD89C}')") , (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'GetSlavePoint' , 'AxisType' , 'x' , 'y' , 'z' , 
			 ), 164, (164, (), [ (16387, 2, None, "IID('{30E13C29-97B5-4A36-99AF-09D3F2FAD89C}')") , (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'GetEulerAngle' , 'eulerType' , 'a' , 'b' , 'c' , 
			 ), 165, (165, (), [ (16387, 2, None, "IID('{A952E8B8-4277-4459-8636-46BE3982535C}')") , (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'SetReferenceFrame' , 'pRefFrame' , ), 166, (166, (), [ (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , ], 1 , 1 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'UpdateOrientation' , ), 167, (167, (), [ ], 1 , 1 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'ParentRefFrame' , 'ppVal' , ), 168, (168, (), [ (16393, 10, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'AtModel' , 'ppVal' , ), 169, (169, (), [ (16393, 10, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , ], 1 , 1 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'AtReferenceFrame' , 'pRefFrameGiven' , 'ppVal' , ), 170, (170, (), [ (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , 
			 (16393, 10, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , ], 1 , 1 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'SetEulerAngleDegree' , 'eulerType' , 'a' , 'b' , 'c' , 
			 ), 171, (171, (), [ (3, 1, None, "IID('{A952E8B8-4277-4459-8636-46BE3982535C}')") , (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'GetEulerAngleDegree' , 'eulerType' , 'a' , 'b' , 'c' , 
			 ), 172, (172, (), [ (16387, 2, None, "IID('{A952E8B8-4277-4459-8636-46BE3982535C}')") , (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'GetName' , 'pVal' , ), 173, (173, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'Name' , 'pVal' , ), 174, (174, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'FullName' , 'pVal' , ), 175, (175, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
]

IRelationMap_vtables_dispatch_ = 1
IRelationMap_vtables_ = [
	(( 'GetRelationMapEntities' , 'pSource' , 'ppEntities' , ), 51, (51, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (16393, 10, None, "IID('{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')") , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ShowBody' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'ShowBody' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'ShowJoint' , 'pVal' , ), 53, (53, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'ShowJoint' , 'pVal' , ), 53, (53, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'ShowForce' , 'pVal' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'ShowForce' , 'pVal' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'ShowContact' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'ShowContact' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'ShowSubentity' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'ShowSubentity' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'ShowInactive' , 'pVal' , ), 57, (57, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'ShowInactive' , 'pVal' , ), 57, (57, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
]

IRequestExpression_vtables_dispatch_ = 1
IRequestExpression_vtables_ = [
	(( 'Expression1' , 'ppVal' , ), 201, (201, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Expression1' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'Expression2' , 'ppVal' , ), 202, (202, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'Expression2' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'Expression3' , 'ppVal' , ), 203, (203, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'Expression3' , 'ppVal' , ), 203, (203, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'Expression4' , 'ppVal' , ), 204, (204, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'Expression4' , 'ppVal' , ), 204, (204, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'Expression5' , 'ppVal' , ), 205, (205, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'Expression5' , 'ppVal' , ), 205, (205, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'Expression6' , 'ppVal' , ), 206, (206, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'Expression6' , 'ppVal' , ), 206, (206, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'GetPlotNameList' , 'ppSafeArray' , ), 207, (207, (), [ (24584, 10, None, None) , ], 1 , 1 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
]

IRequestExpressionCollection_vtables_dispatch_ = 1
IRequestExpressionCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{70D93511-61EB-4AB6-80D8-B142DB3D7923}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IRequestStandard_vtables_dispatch_ = 1
IRequestStandard_vtables_ = [
	(( 'Type' , 'pVal' , ), 201, (201, (), [ (3, 1, None, "IID('{B30ED634-1939-40CE-B123-73818AAD745C}')") , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 201, (201, (), [ (16387, 10, None, "IID('{B30ED634-1939-40CE-B123-73818AAD745C}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'ActionMarker' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'ActionMarker' , 'ppVal' , ), 202, (202, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'BaseMarker' , 'ppVal' , ), 203, (203, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'BaseMarker' , 'ppVal' , ), 203, (203, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 204, (204, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 204, (204, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'EulerAngle' , 'pVal' , ), 205, (205, (), [ (3, 1, None, "IID('{A952E8B8-4277-4459-8636-46BE3982535C}')") , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'EulerAngle' , 'pVal' , ), 205, (205, (), [ (16387, 10, None, "IID('{A952E8B8-4277-4459-8636-46BE3982535C}')") , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'Use4thMarkerFlag' , 'flag' , ), 206, (206, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'Use4thMarkerFlag' , 'flag' , ), 206, (206, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'GetPlotNameList' , 'ppSafeArray' , ), 207, (207, (), [ (24584, 10, None, None) , ], 1 , 1 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
]

IRequestStandardCollection_vtables_dispatch_ = 1
IRequestStandardCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{BAD8E0C8-CE5C-4AFD-88DE-427445F73C75}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IRequestUserSubroutine_vtables_dispatch_ = 1
IRequestUserSubroutine_vtables_ = [
	(( 'UserSubroutine' , 'ppVal' , ), 201, (201, (), [ (9, 1, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'GetPlotNameList' , 'ppSafeArray' , ), 202, (202, (), [ (24584, 10, None, None) , ], 1 , 1 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
]

IRequestUserSubroutineCollection_vtables_dispatch_ = 1
IRequestUserSubroutineCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{F13A88C4-88A8-439B-B06A-A6827B3D4489}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IRibbonGroup_vtables_dispatch_ = 1
IRibbonGroup_vtables_ = [
	(( 'SetVisible' , 'Val' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'InsertMenuControl' , 'pVal' , ), 52, (52, (), [ (9, 1, None, "IID('{B2F1CBE0-707D-4E0B-B080-546D4664CA2F}')") , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'AddMenuControl' , 'Type' , 'nId' , 'ppVal' , ), 53, (53, (), [ 
			 (3, 1, None, "IID('{66FF20E6-6D20-41E0-A180-C51C955F4367}')") , (3, 1, None, None) , (16393, 10, None, "IID('{B2F1CBE0-707D-4E0B-B080-546D4664CA2F}')") , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'GetMenuControl' , 'Index' , 'ppVal' , ), 54, (54, (), [ (19, 1, None, None) , 
			 (16393, 10, None, "IID('{B2F1CBE0-707D-4E0B-B080-546D4664CA2F}')") , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'MenuControlCount' , 'pVal' , ), 55, (55, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'Caption' , 'pVal' , ), 56, (56, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'Caption' , 'pVal' , ), 56, (56, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'ID' , 'pVal' , ), 57, (57, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'ID' , 'pVal' , ), 57, (57, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'Index' , 'pVal' , ), 58, (58, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
]

IRibbonManager_vtables_dispatch_ = 1
IRibbonManager_vtables_ = [
	(( 'AddRibbonTab' , 'szCaption' , 'ppVal' , ), 51, (51, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{E4EE4AC4-95CE-4D3D-BBC6-1962F46A4CA2}')") , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'FindRibbonTab' , 'Caption' , 'ppVal' , ), 52, (52, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{E4EE4AC4-95CE-4D3D-BBC6-1962F46A4CA2}')") , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'FindRibbonTabByID' , 'idTab' , 'ppVal' , ), 53, (53, (), [ (19, 1, None, None) , 
			 (16393, 10, None, "IID('{E4EE4AC4-95CE-4D3D-BBC6-1962F46A4CA2}')") , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'FindRibbonTabByIndex' , 'Index' , 'ppVal' , ), 54, (54, (), [ (19, 1, None, None) , 
			 (16393, 10, None, "IID('{E4EE4AC4-95CE-4D3D-BBC6-1962F46A4CA2}')") , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'RibbonTabCount' , 'pVal' , ), 55, (55, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
]

IRibbonTab_vtables_dispatch_ = 1
IRibbonTab_vtables_ = [
	(( 'SetVisible' , 'Val' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'AddRibbonGroup' , 'szCaption' , 'ppControl' , ), 52, (52, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{CEFE050D-2992-4FDE-AD88-796B864516A0}')") , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'FindRibbonGroup' , 'szCaption' , 'ppControl' , ), 53, (53, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{CEFE050D-2992-4FDE-AD88-796B864516A0}')") , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'FindRibbonGroupByID' , 'idGroup' , 'ppControl' , ), 54, (54, (), [ (19, 1, None, None) , 
			 (16393, 10, None, "IID('{CEFE050D-2992-4FDE-AD88-796B864516A0}')") , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'FindRibbonGroupByIndex' , 'Index' , 'ppControl' , ), 55, (55, (), [ (19, 1, None, None) , 
			 (16393, 10, None, "IID('{CEFE050D-2992-4FDE-AD88-796B864516A0}')") , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'RibbonGroupCount' , 'pVal' , ), 56, (56, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'Caption' , 'pVal' , ), 57, (57, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'Caption' , 'pVal' , ), 57, (57, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'ID' , 'pVal' , ), 58, (58, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'ID' , 'pVal' , ), 58, (58, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'Index' , 'pVal' , ), 59, (59, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'Tooltip' , 'pVal' , ), 60, (60, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Tooltip' , 'pVal' , ), 60, (60, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
]

IRoadData_vtables_dispatch_ = 1
IRoadData_vtables_ = [
	(( 'Color' , 'pVal' , ), 151, (151, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Color' , 'pVal' , ), 151, (151, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'ExportRoadData' , 'strFile' , ), 152, (152, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
]

IRoadDataCollection_vtables_dispatch_ = 1
IRoadDataCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IScenario_vtables_dispatch_ = 1
IScenario_vtables_ = [
]

IScenario2_vtables_dispatch_ = 1
IScenario2_vtables_ = [
	(( 'GetScenarioType' , 'ScenarioType' , ), 151, (151, (), [ (16387, 10, None, "IID('{61162FC9-363D-4E85-A198-F41F454F3C11}')") , ], 1 , 1 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
]

IScenarioActivate_vtables_dispatch_ = 1
IScenarioActivate_vtables_ = [
	(( 'Entity' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 101, (101, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
]

IScenarioActivate2_vtables_dispatch_ = 1
IScenarioActivate2_vtables_ = [
	(( 'Entity' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 201, (201, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 202, (202, (), [ ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
]

IScenarioAnalysisProperty_vtables_dispatch_ = 1
IScenarioAnalysisProperty_vtables_ = [
	(( 'Import' , 'strFileName' , ), 51, (51, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Export' , 'strFileName' , 'OverWrite' , ), 52, (52, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseDisplayAnimation' , ), 53, (53, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseHideRecurDyn' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'ScenarioCollection' , 'ppScenarioCollection' , ), 55, (55, (), [ (16393, 10, None, "IID('{4F34AAB3-4060-4BF7-AEAC-6B348267BB3D}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'ScenarioAnalysisTool' , 'ppScenarioAnalysisTool' , ), 56, (56, (), [ (16393, 10, None, "IID('{955125C7-1D7D-4D86-8DC7-85B3A459DA55}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'ExportForStandaloneSolver' , 'strFileName' , 'OverWrite' , ), 57, (57, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
]

IScenarioAnalysisProperty2_vtables_dispatch_ = 1
IScenarioAnalysisProperty2_vtables_ = [
	(( 'Import' , 'strFileName' , ), 51, (51, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Export' , 'strFileName' , 'OverWrite' , ), 52, (52, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseDisplayAnimation' , ), 53, (53, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseHideRecurDyn' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'ScenarioCollection' , 'ppScenarioCollection' , ), 55, (55, (), [ (16393, 10, None, "IID('{1E5FBACB-348B-4483-9E16-F653F5A21CF7}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'ExportForStandaloneSolver' , 'strFileName' , 'OverWrite' , ), 56, (56, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'DeleteScenario' , 'pEntity' , ), 57, (57, (), [ (9, 1, None, "IID('{A25F296D-01DC-4AD2-BEC8-67B2EF4C99DD}')") , ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'AddSimulationDynamic' , 'dEndTime' , 'dStep' , 'ppScenario' , ), 58, (58, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{819BAA2D-0DFF-490C-A3C7-5FF91590FD1E}')") , ], 1 , 1 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'AddSimulationStatic' , 'dEndTime' , 'dStep' , 'ppScenario' , ), 59, (59, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{22898563-4CD6-4D2F-9862-05006C178494}')") , ], 1 , 1 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'AddSimulationEigenvalue' , 'dAmplitudeFactor' , 'dNoOfFrame' , 'ppScenario' , ), 60, (60, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{26550F0C-C58A-41CD-9A52-4EC1448C3E91}')") , ], 1 , 1 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'AddSimulationFrequencyResponse' , 'dFreqStart' , 'dFreqEnd' , 'dFreqStep' , 'ppScenario' , 
			 ), 61, (61, (), [ (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{1DFB8E58-D3D2-4D57-B10D-304E10FA9CCD}')") , ], 1 , 1 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'AddIntegrationDDA' , 'dMaximumstepSize' , 'dErrorTolerance' , 'ppScenario' , ), 62, (62, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{8CE8A4EC-13F2-437E-8834-FD48DB9D609A}')") , ], 1 , 1 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'AddIntegrationIMG' , 'dMaximumstepSize' , 'dErrorTolerance' , 'dNumericalDamping' , 'ppScenario' , 
			 ), 63, (63, (), [ (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{680EBB11-DF6A-4BB0-9F7D-24C76FB16BE1}')") , ], 1 , 1 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'AddIntegrationHYB' , 'dMaximumstepSize' , 'dErrorTolerance' , 'dNumericalDamping' , 'ppScenario' , 
			 ), 64, (64, (), [ (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{7C151D45-EF3F-4C46-9F72-77E78BC4F5C6}')") , ], 1 , 1 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'AddIntegrationTRK' , 'dMaximumstepSize' , 'dErrorTolerance' , 'dNumericalDamping' , 'ppScenario' , 
			 ), 65, (65, (), [ (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{E308F573-419A-4A53-8B0C-1351BACEBE4B}')") , ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'AddEquilibrium' , 'dErrorTolerance' , 'dMaximumIteration' , 'dConvergenceFactor' , 'ppScenario' , 
			 ), 66, (66, (), [ (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{3FADE3FB-0EC0-4467-B9C8-17548393F352}')") , ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'AddActivate' , 'pEntity' , 'ppScenario' , ), 67, (67, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (16393, 10, None, "IID('{C4C5B81A-3AF6-48A0-80BF-6E40789D1290}')") , ], 1 , 1 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'AddDeactivate' , 'pEntity' , 'ppScenario' , ), 68, (68, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (16393, 10, None, "IID('{F8AAF1F0-C97B-4387-9CC4-6AA41DECC60F}')") , ], 1 , 1 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'AddEigenParameter' , 'dMaxNoMode' , 'bIncludeDamping' , 'ppScenario' , ), 69, (69, (), [ 
			 (5, 1, None, None) , (11, 1, None, None) , (16393, 10, None, "IID('{71863406-3B7D-46D3-B9FA-2FA8E1AD8254}')") , ], 1 , 1 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'AddFRAParameter' , 'dMaxNoMode' , 'dAnimationFrame' , 'dAmplitudeFactor' , 'bIncludeDamping' , 
			 'bLogarithmicStep' , 'ppScenario' , ), 70, (70, (), [ (5, 1, None, None) , (5, 1, None, None) , 
			 (5, 1, None, None) , (11, 1, None, None) , (11, 1, None, None) , (16393, 10, None, "IID('{9365F2E3-E085-4C23-930F-DF99569638FF}')") , ], 1 , 1 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'AddIntegrationADV' , 'dMaximumstepSize' , 'dErrorTolerance' , 'dNumericalDamping' , 'ppScenario' , 
			 ), 71, (71, (), [ (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{B8E9A36E-121C-4225-9F0C-843F5216B394}')") , ], 1 , 1 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
]

IScenarioAnalysisTool_vtables_dispatch_ = 1
IScenarioAnalysisTool_vtables_ = [
	(( 'LoadSimulationDynamic' , 'dEndTime' , 'dStep' , 'ppScenario' , ), 51, (51, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{BB2EB111-0323-4B54-B0E9-B24757D1C5E3}')") , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'LoadSimulationStatic' , 'dEndTime' , 'dStep' , 'ppScenario' , ), 52, (52, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{703335D3-4FFB-4973-B3CC-F2150716A970}')") , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'LoadSimulationEigenvalue' , 'dAmplitudeFactor' , 'dNoOfFrame' , 'ppScenario' , ), 53, (53, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{9D73DB69-F99F-45F5-9A29-2F8661214C67}')") , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'LoadSimulationFrequencyResponse' , 'dFreqStart' , 'dFreqEnd' , 'dFreqStep' , 'ppScenario' , 
			 ), 54, (54, (), [ (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{0F8B6060-98A3-4734-968D-FE9919D96B20}')") , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'LoadIntegrationDDA' , 'dMaximumstepSize' , 'dErrorTolerance' , 'ppScenario' , ), 55, (55, (), [ 
			 (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{FD461A28-C99A-4BA7-B816-260FE7E0950E}')") , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'LoadIntegrationIMG' , 'dMaximumstepSize' , 'dErrorTolerance' , 'dNumericalDamping' , 'ppScenario' , 
			 ), 56, (56, (), [ (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{2B48E9C0-40F9-48D4-AA5C-BBB99D0DD8BD}')") , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'LoadIntegrationHYB' , 'dMaximumstepSize' , 'dErrorTolerance' , 'dNumericalDamping' , 'ppScenario' , 
			 ), 57, (57, (), [ (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{879C1DAE-86EC-47C7-81C0-B02F3628F46F}')") , ], 1 , 1 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'LoadIntegrationTRK' , 'dMaximumstepSize' , 'dErrorTolerance' , 'dNumericalDamping' , 'ppScenario' , 
			 ), 58, (58, (), [ (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{F013ED05-BDE6-493B-B4FC-7584C250C5FC}')") , ], 1 , 1 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'LoadEquilibrium' , 'dErrorTolerance' , 'dMaximumIteration' , 'dConvergenceFactor' , 'ppScenario' , 
			 ), 59, (59, (), [ (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{BF4C8308-7B3B-41AE-A799-3C51380A5931}')") , ], 1 , 1 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'LoadActivate' , 'pEntity' , 'ppScenario' , ), 60, (60, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (16393, 10, None, "IID('{4C3D72C7-FCA5-4C7A-8763-603E86EB359F}')") , ], 1 , 1 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'LoadDeactivate' , 'pEntity' , 'ppScenario' , ), 61, (61, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (16393, 10, None, "IID('{37FD2978-18F9-4D8C-9F36-B571FA460491}')") , ], 1 , 1 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'LoadEigenParameter' , 'dMaxNoMode' , 'bIncludeDamping' , 'ppScenario' , ), 62, (62, (), [ 
			 (5, 1, None, None) , (11, 1, None, None) , (16393, 10, None, "IID('{82AE0C9E-3F21-4838-965B-C87D06833B63}')") , ], 1 , 1 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'LoadFRAParameter' , 'dMaxNoMode' , 'dAnimationFrame' , 'dAmplitudeFactor' , 'bIncludeDamping' , 
			 'bLogarithmicStep' , 'ppScenario' , ), 63, (63, (), [ (5, 1, None, None) , (5, 1, None, None) , 
			 (5, 1, None, None) , (11, 1, None, None) , (11, 1, None, None) , (16393, 10, None, "IID('{F13554D8-3EBD-4AF2-AAFB-11FF4B4756D7}')") , ], 1 , 1 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
]

IScenarioCollection_vtables_dispatch_ = 1
IScenarioCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (3, 1, None, None) , 
			 (16393, 10, None, "IID('{F5E81BAC-818D-4484-8F07-73FC13F44C82}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
	(( 'Add' , 'scenario' , ), 51, (51, (), [ (9, 1, None, "IID('{F5E81BAC-818D-4484-8F07-73FC13F44C82}')") , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'Insert' , 'iIndex' , 'scenario' , ), 52, (52, (), [ (3, 1, None, None) , 
			 (9, 1, None, "IID('{F5E81BAC-818D-4484-8F07-73FC13F44C82}')") , ], 1 , 1 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'Delete' , 'iIndex' , ), 53, (53, (), [ (3, 1, None, None) , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
]

IScenarioCollection2_vtables_dispatch_ = 1
IScenarioCollection2_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{A25F296D-01DC-4AD2-BEC8-67B2EF4C99DD}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IScenarioDeactivate_vtables_dispatch_ = 1
IScenarioDeactivate_vtables_ = [
	(( 'Entity' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 101, (101, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
]

IScenarioDeactivate2_vtables_dispatch_ = 1
IScenarioDeactivate2_vtables_ = [
	(( 'Entity' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 201, (201, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 202, (202, (), [ ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
]

IScenarioEigenParameter_vtables_dispatch_ = 1
IScenarioEigenParameter_vtables_ = [
	(( 'MaxNoMode' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'IncludeDamping' , 'pVal' , ), 102, (102, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'IncludeDamping' , 'pVal' , ), 102, (102, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
]

IScenarioEigenParameter2_vtables_dispatch_ = 1
IScenarioEigenParameter2_vtables_ = [
	(( 'MaxNoMode' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'IncludeDamping' , 'pVal' , ), 202, (202, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'IncludeDamping' , 'pVal' , ), 202, (202, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 203, (203, (), [ ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
]

IScenarioEquilibrium_vtables_dispatch_ = 1
IScenarioEquilibrium_vtables_ = [
	(( 'ErrorTolerance' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'MaximumIteration' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'ConvergenceFactor' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
]

IScenarioEquilibrium2_vtables_dispatch_ = 1
IScenarioEquilibrium2_vtables_ = [
	(( 'ErrorTolerance' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'MaximumIteration' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'ConvergenceFactor' , 'ppVal' , ), 203, (203, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 204, (204, (), [ ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
]

IScenarioFRAParameter_vtables_dispatch_ = 1
IScenarioFRAParameter_vtables_ = [
	(( 'MaxNoMode' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'AnimationFrame' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'AmplitudeFactor' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'IncludeDamping' , 'pVal' , ), 104, (104, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'IncludeDamping' , 'pVal' , ), 104, (104, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'LogarithmicStep' , 'pVal' , ), 105, (105, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'LogarithmicStep' , 'pVal' , ), 105, (105, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
]

IScenarioFRAParameter2_vtables_dispatch_ = 1
IScenarioFRAParameter2_vtables_ = [
	(( 'MaxNoMode' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'AnimationFrame' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'AmplitudeFactor' , 'ppVal' , ), 203, (203, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'IncludeDamping' , 'pVal' , ), 204, (204, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'IncludeDamping' , 'pVal' , ), 204, (204, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'LogarithmicStep' , 'pVal' , ), 205, (205, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'LogarithmicStep' , 'pVal' , ), 205, (205, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 206, (206, (), [ ], 1 , 1 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
]

IScenarioIntegrationADV_vtables_dispatch_ = 1
IScenarioIntegrationADV_vtables_ = [
	(( 'MaximumStepSize' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'ErrorTolerance' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'NumericalDamping' , 'ppVal' , ), 203, (203, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 204, (204, (), [ ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
]

IScenarioIntegrationDDA_vtables_dispatch_ = 1
IScenarioIntegrationDDA_vtables_ = [
	(( 'MaximumStepSize' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ErrorTolerance' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
]

IScenarioIntegrationDDA2_vtables_dispatch_ = 1
IScenarioIntegrationDDA2_vtables_ = [
	(( 'MaximumStepSize' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'ErrorTolerance' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 203, (203, (), [ ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
]

IScenarioIntegrationHYB_vtables_dispatch_ = 1
IScenarioIntegrationHYB_vtables_ = [
	(( 'MaximumStepSize' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ErrorTolerance' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'NumericalDamping' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
]

IScenarioIntegrationHYB2_vtables_dispatch_ = 1
IScenarioIntegrationHYB2_vtables_ = [
	(( 'MaximumStepSize' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'ErrorTolerance' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'NumericalDamping' , 'ppVal' , ), 203, (203, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 204, (204, (), [ ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
]

IScenarioIntegrationIMG_vtables_dispatch_ = 1
IScenarioIntegrationIMG_vtables_ = [
	(( 'MaximumStepSize' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ErrorTolerance' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'NumericalDamping' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
]

IScenarioIntegrationIMG2_vtables_dispatch_ = 1
IScenarioIntegrationIMG2_vtables_ = [
	(( 'MaximumStepSize' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'ErrorTolerance' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'NumericalDamping' , 'ppVal' , ), 203, (203, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 204, (204, (), [ ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
]

IScenarioIntegrationTRK_vtables_dispatch_ = 1
IScenarioIntegrationTRK_vtables_ = [
	(( 'MaximumStepSize' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'ErrorTolerance' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'NumericalDamping' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
]

IScenarioIntegrationTRK2_vtables_dispatch_ = 1
IScenarioIntegrationTRK2_vtables_ = [
	(( 'MaximumStepSize' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'ErrorTolerance' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'NumericalDamping' , 'ppVal' , ), 203, (203, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 204, (204, (), [ ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
]

IScenarioSimulationDynamic_vtables_dispatch_ = 1
IScenarioSimulationDynamic_vtables_ = [
	(( 'EndTime' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Step' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
]

IScenarioSimulationDynamic2_vtables_dispatch_ = 1
IScenarioSimulationDynamic2_vtables_ = [
	(( 'EndTime' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Step' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 203, (203, (), [ ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
]

IScenarioSimulationEigenvalue_vtables_dispatch_ = 1
IScenarioSimulationEigenvalue_vtables_ = [
	(( 'AmplitudeFactor' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'NoOfFrame' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
]

IScenarioSimulationEigenvalue2_vtables_dispatch_ = 1
IScenarioSimulationEigenvalue2_vtables_ = [
	(( 'AmplitudeFactor' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'NoOfFrame' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 203, (203, (), [ ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
]

IScenarioSimulationFrequencyResponse_vtables_dispatch_ = 1
IScenarioSimulationFrequencyResponse_vtables_ = [
	(( 'FreqStart' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'FreqEnd' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'FreqStep' , 'ppVal' , ), 103, (103, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
]

IScenarioSimulationFrequencyResponse2_vtables_dispatch_ = 1
IScenarioSimulationFrequencyResponse2_vtables_ = [
	(( 'FreqStart' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'FreqEnd' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'FreqStep' , 'ppVal' , ), 203, (203, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 204, (204, (), [ ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
]

IScenarioSimulationStatic_vtables_dispatch_ = 1
IScenarioSimulationStatic_vtables_ = [
	(( 'EndTime' , 'ppVal' , ), 101, (101, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Step' , 'ppVal' , ), 102, (102, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
]

IScenarioSimulationStatic2_vtables_dispatch_ = 1
IScenarioSimulationStatic2_vtables_ = [
	(( 'EndTime' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Step' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 203, (203, (), [ ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
]

IScope_vtables_dispatch_ = 1
IScope_vtables_ = [
	(( 'Visible' , 'pVal' , ), 151, (151, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Visible' , 'pVal' , ), 151, (151, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'AddDataToPlot' , ), 152, (152, (), [ ], 1 , 1 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'GetPlotData' , 'ppSafeArray' , ), 153, (153, (), [ (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'AddDataToPlot2' , 'ppIDs' , ), 154, (154, (), [ (24579, 10, None, None) , ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
]

IScopeAngle_vtables_dispatch_ = 1
IScopeAngle_vtables_ = [
	(( 'StartMarker' , 'ppVal' , ), 201, (201, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'StartMarker' , 'ppVal' , ), 201, (201, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'CenterMarker' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'CenterMarker' , 'ppVal' , ), 202, (202, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'EndMarker' , 'ppVal' , ), 203, (203, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'EndMarker' , 'ppVal' , ), 203, (203, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
]

IScopeCollection_vtables_dispatch_ = 1
IScopeCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{586914A9-8C8A-42ED-8202-DF1CC8BFE47B}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IScopeEntity_vtables_dispatch_ = 1
IScopeEntity_vtables_ = [
	(( 'Type' , 'pVal' , ), 201, (201, (), [ (16387, 10, None, "IID('{6239B5E4-2791-4C62-B9F4-F6333EEDDC3F}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 201, (201, (), [ (3, 1, None, "IID('{6239B5E4-2791-4C62-B9F4-F6333EEDDC3F}')") , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 202, (202, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 202, (202, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 203, (203, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 203, (203, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'NodeID' , 'pVal' , ), 204, (204, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'ComponentList' , 'pVal' , ), 205, (205, (), [ (24584, 10, None, None) , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'Component' , 'pVal' , ), 206, (206, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'Component' , 'pVal' , ), 206, (206, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
]

IScopeExpression_vtables_dispatch_ = 1
IScopeExpression_vtables_ = [
	(( 'Expression' , 'Text' , ), 201, (201, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'Text' , ), 201, (201, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
]

IScopeGapInterference_vtables_dispatch_ = 1
IScopeGapInterference_vtables_ = [
	(( 'BaseGeometry' , 'geometry' , ), 201, (201, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'BaseGeometry' , 'geometry' , ), 201, (201, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'ActionGeometry' , 'geometry' , ), 202, (202, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'ActionGeometry' , 'geometry' , ), 202, (202, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'Type' , ), 203, (203, (), [ (3, 1, None, "IID('{E419FAFA-B044-4EC0-86A2-C7854943AA55}')") , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'Type' , ), 203, (203, (), [ (16387, 10, None, "IID('{E419FAFA-B044-4EC0-86A2-C7854943AA55}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
]

IScopePointToPoint_vtables_dispatch_ = 1
IScopePointToPoint_vtables_ = [
	(( 'Type' , 'pVal' , ), 201, (201, (), [ (16387, 10, None, "IID('{106FA94C-210E-47A8-911D-6D204E299B26}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 201, (201, (), [ (3, 1, None, "IID('{106FA94C-210E-47A8-911D-6D204E299B26}')") , ], 1 , 4 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'ComponentType' , 'pVal' , ), 202, (202, (), [ (16387, 10, None, "IID('{9B9C7C25-9C1B-4043-94A3-E195D1D5895E}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'ComponentType' , 'pVal' , ), 202, (202, (), [ (3, 1, None, "IID('{9B9C7C25-9C1B-4043-94A3-E195D1D5895E}')") , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'ActionMarker' , 'ppVal' , ), 203, (203, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'ActionMarker' , 'ppVal' , ), 203, (203, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'BaseMarker' , 'ppVal' , ), 204, (204, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'BaseMarker' , 'ppVal' , ), 204, (204, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 205, (205, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'RefMarker' , 'ppVal' , ), 205, (205, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
]

ISensor_vtables_dispatch_ = 1
ISensor_vtables_ = [
	(( 'Color' , 'pVal' , ), 201, (201, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Color' , 'pVal' , ), 201, (201, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UseDepthInformation' , 'pVal' , ), 207, (207, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'UseDepthInformation' , 'pVal' , ), 207, (207, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'NormalDirection' , 'pVal' , ), 208, (208, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'NormalDirection' , 'pVal' , ), 208, (208, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'Depth' , 'ppVal' , ), 209, (209, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
]

ISensorCollection_vtables_dispatch_ = 1
ISensorCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{6D4E47C0-B7BC-4559-9CA0-25B0C957AFAC}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

ISensorDisplacement_vtables_dispatch_ = 1
ISensorDisplacement_vtables_ = [
	(( 'Entity' , 'ppVal' , ), 250, (250, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 250, (250, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'SensorMarker' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'SensorMarker' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'UseReferenceMarker' , 'pVal' , ), 252, (252, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'ReferenceMarker' , 'ppVal' , ), 253, (253, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'ReferenceMarker' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'Range' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
]

ISensorDistance_vtables_dispatch_ = 1
ISensorDistance_vtables_ = [
	(( 'MotherBody' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'MotherBody' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 252, (252, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'Position' , 'pVal' , ), 253, (253, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'Position' , 'pVal' , ), 253, (253, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'Range' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'Direction' , 'pVal' , ), 255, (255, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'Direction' , 'pVal' , ), 255, (255, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
]

ISensorEvent_vtables_dispatch_ = 1
ISensorEvent_vtables_ = [
	(( 'MotherBody' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'MotherBody' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 252, (252, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'Position' , 'pVal' , ), 253, (253, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'Position' , 'pVal' , ), 253, (253, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'Range' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 255, (255, (), [ (16387, 10, None, "IID('{3D748E59-2352-4DAF-BB28-523AFB1C9F67}')") , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 255, (255, (), [ (3, 1, None, "IID('{3D748E59-2352-4DAF-BB28-523AFB1C9F67}')") , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'UseMarker' , 'pVal' , ), 256, (256, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'UseMarker' , 'pVal' , ), 256, (256, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'Marker' , 'ppVal' , ), 257, (257, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'Marker' , 'ppVal' , ), 257, (257, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'AddMarker' , 'pVal' , ), 258, (258, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 1 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'DeleteMarker' , 'pVal' , ), 259, (259, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 1 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'Markers' , 'ppResult' , ), 260, (260, (), [ (16393, 10, None, "IID('{6BEF9B6B-4708-445E-A3B5-0D65BA69F748}')") , ], 1 , 1 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
]

ISensorLaser_vtables_dispatch_ = 1
ISensorLaser_vtables_ = [
	(( 'SensorMarker' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'SensorMarker' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'TargetGeometry' , 'pVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'TargetGeometry' , 'pVal' , ), 253, (253, (), [ (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'TargetPatchOption' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{D479C190-172F-42AC-A4B9-5B3AFE1EB81B}')") , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'Range' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
]

ISensorLaserEx_vtables_dispatch_ = 1
ISensorLaserEx_vtables_ = [
	(( 'SensorMarker' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'SensorMarker' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'Range' , 'ppVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'AddEntity' , 'pVal' , ), 255, (255, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 1 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'DeleteEntity' , 'pVal' , ), 256, (256, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 1 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'DeleteAllEntities' , ), 257, (257, (), [ ], 1 , 1 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'TargetEntities' , 'ppResult' , ), 258, (258, (), [ (16393, 10, None, "IID('{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}')") , ], 1 , 1 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'TargetPatchOption' , 'pVal' , 'ppVal' , ), 259, (259, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (16393, 10, None, "IID('{09917A88-72B3-47A8-98CD-679E220D7F78}')") , ], 1 , 1 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
]

ISensorPatchOption_vtables_dispatch_ = 1
ISensorPatchOption_vtables_ = [
	(( 'UsePlaneToleranceFactor' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UsePlaneToleranceFactor' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'PlaneToleranceFactor' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFacetSizeFactor' , 'pVal' , ), 53, (53, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseMaxFacetSizeFactor' , 'pVal' , ), 53, (53, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'MaxFacetSizeFactor' , 'ppVal' , ), 54, (54, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
]

ISensorPointInBox_vtables_dispatch_ = 1
ISensorPointInBox_vtables_ = [
	(( 'SensorMarker' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'SensorMarker' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'UseTargetGeometry' , 'pVal' , ), 252, (252, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'UseTargetGeometry' , 'pVal' , ), 252, (252, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'TargetGeometry' , 'pVal' , ), 253, (253, (), [ (16393, 10, None, "IID('{7B6155CC-0035-4449-9748-DFCE0956F5D9}')") , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'TargetGeometry' , 'pVal' , ), 253, (253, (), [ (9, 1, None, "IID('{7B6155CC-0035-4449-9748-DFCE0956F5D9}')") , ], 1 , 4 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'BoxCenter' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'BoxCenter' , 'ppVal' , ), 254, (254, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'BoxWidth' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'BoxHeight' , 'ppVal' , ), 256, (256, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'BoxDepth' , 'ppVal' , ), 257, (257, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
]

ISensorSlip_vtables_dispatch_ = 1
ISensorSlip_vtables_ = [
	(( 'MotherBody' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'MotherBody' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 252, (252, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'Position' , 'ppVal' , ), 253, (253, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'Position' , 'ppVal' , ), 253, (253, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'Range' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'RollerBody' , 'ppVal' , ), 255, (255, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'RollerBody' , 'ppVal' , ), 255, (255, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
]

ISensorSpeed_vtables_dispatch_ = 1
ISensorSpeed_vtables_ = [
	(( 'MotherBody' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'MotherBody' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 252, (252, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'Position' , 'pVal' , ), 253, (253, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'Position' , 'pVal' , ), 253, (253, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'Range' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'Direction' , 'pVal' , ), 255, (255, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'Direction' , 'pVal' , ), 255, (255, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
]

ISensorTension_vtables_dispatch_ = 1
ISensorTension_vtables_ = [
	(( 'MotherBody' , 'ppVal' , ), 251, (251, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'MotherBody' , 'ppVal' , ), 251, (251, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 252, (252, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 4 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'Entity' , 'ppVal' , ), 252, (252, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'Position' , 'ppVal' , ), 253, (253, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'Position' , 'ppVal' , ), 253, (253, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'Range' , 'ppVal' , ), 254, (254, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
]

ISensorTensionEx_vtables_dispatch_ = 1
ISensorTensionEx_vtables_ = [
	(( 'Type' , 'pVal' , ), 301, (301, (), [ (3, 1, None, "IID('{CCC4494C-8137-4397-A09C-D4B654861CED}')") , ], 1 , 4 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 301, (301, (), [ (16387, 10, None, "IID('{CCC4494C-8137-4397-A09C-D4B654861CED}')") , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
]

IShellOffsetFaceInfo_vtables_dispatch_ = 1
IShellOffsetFaceInfo_vtables_ = [
	(( 'Offset' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'OffsetFaceCollection' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{B5FF572C-A887-464A-8C86-0E92F1ED744F}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
]

IShellOffsetFaceInfoCollection_vtables_dispatch_ = 1
IShellOffsetFaceInfoCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{43AE7027-38BD-4D92-B4BC-5567F9078524}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

ISpecialParametricMarker_vtables_dispatch_ = 1
ISpecialParametricMarker_vtables_ = [
	(( 'RefFrame' , 'ppVal' , ), 151, (151, (), [ (16393, 10, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
]

ISpecialParametricValue_vtables_dispatch_ = 1
ISpecialParametricValue_vtables_ = [
	(( 'Value' , 'pVal' , ), 151, (151, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Value' , 'pVal' , ), 151, (151, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
]

ISpline_vtables_dispatch_ = 1
ISpline_vtables_ = [
	(( 'Type' , 'pVal' , ), 151, (151, (), [ (3, 1, None, "IID('{2B2A8E20-833D-4F83-B40C-B4EF4F934233}')") , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 151, (151, (), [ (16387, 10, None, "IID('{2B2A8E20-833D-4F83-B40C-B4EF4F934233}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'Value' , 'pVal' , ), 152, (152, (), [ (8204, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'Value' , 'pVal' , ), 152, (152, (), [ (24588, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'FileName' , 'pVal' , ), 153, (153, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'FileName' , 'pVal' , ), 153, (153, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'ScaleFactorX' , 'ppVal' , ), 154, (154, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'ScaleFactorY' , 'ppVal' , ), 155, (155, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'Extrapolation' , 'pVal' , ), 157, (157, (), [ (3, 1, None, "IID('{51913AE0-BDE0-4D9C-8552-A75EBEF4A402}')") , ], 1 , 4 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'Extrapolation' , 'pVal' , ), 157, (157, (), [ (16387, 10, None, "IID('{51913AE0-BDE0-4D9C-8552-A75EBEF4A402}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'UseEndPointSlopeStart' , 'pVal' , ), 158, (158, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'UseEndPointSlopeStart' , 'pVal' , ), 158, (158, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'UseEndPointSlopeEnd' , 'pVal' , ), 159, (159, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'UseEndPointSlopeEnd' , 'pVal' , ), 159, (159, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'EndPointSlopeStart' , 'ppVal' , ), 160, (160, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'EndPointSlopeEnd' , 'ppVal' , ), 161, (161, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'OffsetX' , 'ppVal' , ), 162, (162, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'OffsetY' , 'ppVal' , ), 163, (163, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'ValueZ' , 'pVal' , ), 164, (164, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'ValueZ' , 'pVal' , ), 164, (164, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'Value3D' , 'pVal' , ), 165, (165, (), [ (8204, 1, None, None) , ], 1 , 4 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'Value3D' , 'pVal' , ), 165, (165, (), [ (24588, 10, None, None) , ], 1 , 2 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'Validate' , ), 166, (166, (), [ ], 1 , 1 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'Interpolation' , 'pVal' , ), 167, (167, (), [ (3, 1, None, "IID('{6AA9C9F2-BE64-4AFD-B4F1-493AEBDF5F10}')") , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'Interpolation' , 'pVal' , ), 167, (167, (), [ (16387, 10, None, "IID('{6AA9C9F2-BE64-4AFD-B4F1-493AEBDF5F10}')") , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
]

ISplineCollection_vtables_dispatch_ = 1
ISplineCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{E76144D2-715D-41B4-A432-7B6C7F713FC2}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IStrainStressOutputFileSetting_vtables_dispatch_ = 1
IStrainStressOutputFileSetting_vtables_ = [
	(( 'EX' , 'pVal' , ), 151, (151, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'EX' , 'pVal' , ), 151, (151, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'EY' , 'pVal' , ), 152, (152, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'EY' , 'pVal' , ), 152, (152, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'EZ' , 'pVal' , ), 153, (153, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'EZ' , 'pVal' , ), 153, (153, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'EXY' , 'pVal' , ), 154, (154, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'EXY' , 'pVal' , ), 154, (154, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'EYZ' , 'pVal' , ), 155, (155, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'EYZ' , 'pVal' , ), 155, (155, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'EZX' , 'pVal' , ), 156, (156, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'EZX' , 'pVal' , ), 156, (156, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'E1' , 'pVal' , ), 157, (157, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'E1' , 'pVal' , ), 157, (157, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'E2' , 'pVal' , ), 158, (158, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'E2' , 'pVal' , ), 158, (158, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'E3' , 'pVal' , ), 159, (159, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'E3' , 'pVal' , ), 159, (159, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'EINT' , 'pVal' , ), 160, (160, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'EINT' , 'pVal' , ), 160, (160, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'EMISES' , 'pVal' , ), 161, (161, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'EMISES' , 'pVal' , ), 161, (161, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'SX' , 'pVal' , ), 162, (162, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'SX' , 'pVal' , ), 162, (162, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'SY' , 'pVal' , ), 163, (163, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'SY' , 'pVal' , ), 163, (163, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'SZ' , 'pVal' , ), 164, (164, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'SZ' , 'pVal' , ), 164, (164, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'SXY' , 'pVal' , ), 165, (165, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'SXY' , 'pVal' , ), 165, (165, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'SYZ' , 'pVal' , ), 166, (166, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'SYZ' , 'pVal' , ), 166, (166, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'SZX' , 'pVal' , ), 167, (167, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'SZX' , 'pVal' , ), 167, (167, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'S1' , 'pVal' , ), 168, (168, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'S1' , 'pVal' , ), 168, (168, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'S2' , 'pVal' , ), 169, (169, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'S2' , 'pVal' , ), 169, (169, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'S3' , 'pVal' , ), 170, (170, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'S3' , 'pVal' , ), 170, (170, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'SINT' , 'pVal' , ), 171, (171, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'SINT' , 'pVal' , ), 171, (171, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'SMISES' , 'pVal' , ), 172, (172, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'SMISES' , 'pVal' , ), 172, (172, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'ClearCheckStrain' , ), 173, (173, (), [ ], 1 , 1 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'CheckAllStrain' , ), 174, (174, (), [ ], 1 , 1 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'ClearCheckStress' , ), 175, (175, (), [ ], 1 , 1 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'CheckAllStress' , ), 176, (176, (), [ ], 1 , 1 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'DataPrecision' , 'pVal' , ), 177, (177, (), [ (3, 1, None, "IID('{8C37DF1E-4736-41A4-B4D7-41B06C8C39B4}')") , ], 1 , 4 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'DataPrecision' , 'pVal' , ), 177, (177, (), [ (16387, 10, None, "IID('{8C37DF1E-4736-41A4-B4D7-41B06C8C39B4}')") , ], 1 , 2 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
]

IString_vtables_dispatch_ = 1
IString_vtables_ = [
	(( 'Text' , 'Text' , ), 151, (151, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Text' , 'Text' , ), 151, (151, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
]

IStringCollection_vtables_dispatch_ = 1
IStringCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{16DE1264-A4F7-4A8E-8F3C-E8B5210CB2D9}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

ISubSystem_vtables_dispatch_ = 1
ISubSystem_vtables_ = [
	(( 'RefFrame' , 'ppVal' , ), 151, (151, (), [ (16393, 10, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'CreateBodyCylinder' , 'strName' , 'pRefFrame' , 'dRadius' , 'dHeight' , 
			 'ppVal' , ), 152, (152, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (5, 1, None, None) , 
			 (5, 1, None, None) , (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 1 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'CreateBodyCylinderWithPointPointRadius' , 'strName' , 'pFirstPoint' , 'pSecondPoint' , 'dRadius' , 
			 'ppVal' , ), 153, (153, (), [ (8, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , 
			 (5, 1, None, None) , (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 1 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'CreateBodyBox' , 'strName' , 'pRefFrame' , 'dWidth' , 'dHeight' , 
			 'dDepth' , 'ppVal' , ), 154, (154, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 1 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'CreateBodySphere' , 'strName' , 'pRefFrame' , 'dRadius' , 'ppVal' , 
			 ), 155, (155, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (5, 1, None, None) , (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 1 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'CreateBodyEllipsoid' , 'strName' , 'pRefFrame' , 'dRadius' , 'dRadiusY' , 
			 'dRadiusZ' , 'ppVal' , ), 156, (156, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 1 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'CreateBodyTorus' , 'strName' , 'pRefFrame' , 'dMajorRadius' , 'dMinorRadius' , 
			 'ppVal' , ), 157, (157, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (5, 1, None, None) , 
			 (5, 1, None, None) , (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 1 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'CreateBodyPrism' , 'strName' , 'pRefFrame' , 'dRadius' , 'dHeight' , 
			 'NSides' , 'ppVal' , ), 158, (158, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , 
			 (5, 1, None, None) , (5, 1, None, None) , (3, 1, None, None) , (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 1 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'CreateBodyCone' , 'strName' , 'pFirstPoint' , 'pSecondPoint' , 'dTopRadius' , 
			 'dBottomRadius' , 'ppVal' , ), 159, (159, (), [ (8, 1, None, None) , (8197, 1, None, None) , 
			 (8197, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 1 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'CreateBodyLink' , 'strName' , 'pFirstPoint' , 'pSecondPoint' , 'dDepth' , 
			 'ppVal' , ), 160, (160, (), [ (8, 1, None, None) , (8197, 1, None, None) , (8197, 1, None, None) , 
			 (5, 1, None, None) , (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 1 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'CreateBodyLinkWithRadius' , 'strName' , 'pFirstPoint' , 'pSecondPoint' , 'dFirstRadious' , 
			 'dSecondRadious' , 'dDepth' , 'ppVal' , ), 161, (161, (), [ (8, 1, None, None) , 
			 (8197, 1, None, None) , (8197, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , 
			 (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 1 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'CreateBodyGeneral' , 'strName' , 'ppVal' , ), 162, (162, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 1 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'CreateMarker' , 'strName' , 'pBody' , 'pRefFrame' , 'ppVal' , 
			 ), 163, (163, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 1 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'Ground' , 'ppVal' , ), 164, (164, (), [ (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'MotherBody' , 'ppVal' , ), 165, (165, (), [ (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'MotherBody' , 'ppVal' , ), 165, (165, (), [ (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 4 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'Graphic' , 'ppVal' , ), 166, (166, (), [ (16393, 10, None, "IID('{262F564D-8707-4A0E-806C-D9FB21F59324}')") , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'OwnerModelDocument' , 'ppVal' , ), 167, (167, (), [ (16393, 10, None, "IID('{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}')") , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'FileImport' , 'strFile' , ), 168, (168, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'CreateMarkerWithPointPoint' , 'strName' , 'pBody' , 'pFirstPoint' , 'pSecondPoint' , 
			 'ppVal' , ), 170, (170, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (8197, 1, None, None) , 
			 (8197, 1, None, None) , (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 1 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointRevolute' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 181, (181, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}')") , ], 1 , 1 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointTranslational' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 182, (182, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{07101FE1-4B6A-41CA-9FC7-3C48C9E96785}')") , ], 1 , 1 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointSpherical' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 183, (183, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{206C4CC5-E70A-4F3C-A4FD-2D6B2EEE1F5C}')") , ], 1 , 1 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointCylindrical' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 184, (184, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{D89EE062-1A3F-4FE7-915C-8A7D7F4792F0}')") , ], 1 , 1 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointUniversal' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 185, (185, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{04E99CDC-64B1-42F2-B981-EC91848B39F6}')") , ], 1 , 1 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointPlanar' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 186, (186, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{773D31B3-5540-4497-BDCA-D37CCC40E156}')") , ], 1 , 1 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointScrew' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'dPitch' , 'ppVal' , ), 188, (188, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (5, 1, None, None) , (16393, 10, None, "IID('{B6C04DD4-89BA-4A08-9071-9AACD3E4C0F9}')") , ], 1 , 1 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointFixed' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 189, (189, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{2EA33375-B6DB-4F9D-A3B3-B86A2C91BEDA}')") , ], 1 , 1 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointDistance' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 190, (190, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{2ED808B6-A890-4694-A37C-E8E2E44BCD41}')") , ], 1 , 1 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointAtpoint' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 191, (191, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{ADED6BDA-80A4-4D1E-824C-A999B0402A7B}')") , ], 1 , 1 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointInline' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 192, (192, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{002ECEBC-0D7D-40DE-9F2C-D6F88E5511C6}')") , ], 1 , 1 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointInplane' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 193, (193, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{C3E0D80D-8C4D-4DA8-9206-5A7A83435267}')") , ], 1 , 1 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointOrientation' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 194, (194, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{92F68679-E702-4BF4-B969-546E11BECC63}')") , ], 1 , 1 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointParallel' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 195, (195, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{54101676-0190-44F2-837F-2CFAFB8A11D2}')") , ], 1 , 1 , 4 , 0 , 408 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointPerpendicular' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 196, (196, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{40F4819B-5A72-4CFE-9F7E-1695A1B677C7}')") , ], 1 , 1 , 4 , 0 , 416 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointPointOnCurve' , 'strName' , 'pBaseCurve' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 197, (197, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{0D91A8ED-1B56-40C7-8FFB-26542A0F4269}')") , ], 1 , 1 , 4 , 0 , 424 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointCurveOnCurve' , 'strName' , 'pBaseCurve' , 'pActionCurve' , 'pRefFrame' , 
			 'ppVal' , ), 198, (198, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{6BFD6484-AB37-4091-B840-C453D24051CC}')") , ], 1 , 1 , 4 , 0 , 432 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointConstantVelocity' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 199, (199, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{F6D08556-99B4-4761-89E0-D33956DF5776}')") , ], 1 , 1 , 4 , 0 , 440 , (3, 0, None, None) , 0 , )),
	(( 'CreatePairConstraintCoupler' , 'strName' , 'pDriverJoint' , 'pCouplerJoint' , 'ppVal' , 
			 ), 200, (200, (), [ (8, 1, None, None) , (9, 1, None, "IID('{B9173DAD-05DD-4037-9367-726DDDEE988E}')") , (9, 1, None, "IID('{B9173DAD-05DD-4037-9367-726DDDEE988E}')") , (16393, 10, None, "IID('{842283CC-9684-472C-B061-E5659014C471}')") , ], 1 , 1 , 4 , 0 , 448 , (3, 0, None, None) , 0 , )),
	(( 'CreatePairConstraintCouplerWithTwoCoupledJoint' , 'strName' , 'pDriverJoint' , 'pCouplerJoint1' , 'pCouplerJoint2' , 
			 'ppVal' , ), 201, (201, (), [ (8, 1, None, None) , (9, 1, None, "IID('{B9173DAD-05DD-4037-9367-726DDDEE988E}')") , (9, 1, None, "IID('{B9173DAD-05DD-4037-9367-726DDDEE988E}')") , 
			 (9, 1, None, "IID('{B9173DAD-05DD-4037-9367-726DDDEE988E}')") , (16393, 10, None, "IID('{842283CC-9684-472C-B061-E5659014C471}')") , ], 1 , 1 , 4 , 0 , 456 , (3, 0, None, None) , 0 , )),
	(( 'CreatePairConstraintGear' , 'strName' , 'pBaseJoint' , 'pActionJoint' , 'pBaseRefFrame' , 
			 'ppVal' , ), 202, (202, (), [ (8, 1, None, None) , (9, 1, None, "IID('{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}')") , (9, 1, None, "IID('{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{D56837DF-B61D-4938-A25D-02A0B67193C8}')") , ], 1 , 1 , 4 , 0 , 464 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointCartesianMotion' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 203, (203, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{57A77C2D-5956-4DBE-9893-820E0EA5D034}')") , ], 1 , 1 , 4 , 0 , 472 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointOnOff' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 204, (204, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 0, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{3509B78D-BB70-4F88-8A48-BA852F3658BE}')") , ], 1 , 1 , 4 , 0 , 480 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceSpring' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 211, (211, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{164BA461-0C9B-4F07-A027-C82298891823}')") , ], 1 , 1 , 4 , 0 , 488 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceAxial' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 212, (212, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{960E870B-7C56-4FF5-95DE-E735C751F8E7}')") , ], 1 , 1 , 4 , 0 , 496 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceTranslational' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 213, (213, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{F82CE83C-C5A5-42AC-867F-079BCF051FEA}')") , ], 1 , 1 , 4 , 0 , 504 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceRotational' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 214, (214, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{52BFD3CF-4CC9-4ECE-9B8C-E7A28EF9D4A2}')") , ], 1 , 1 , 4 , 0 , 512 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceScrew' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 215, (215, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{D996544C-0967-4920-83A6-A3C9FB97E153}')") , ], 1 , 1 , 4 , 0 , 520 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceBushing' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pRefFrame' , 
			 'ppVal' , ), 216, (216, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{54235E69-8E20-4D33-8A62-623CCD9C87AA}')") , ], 1 , 1 , 4 , 0 , 528 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceMatrix' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 217, (217, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{5A0426A9-C465-48F7-9456-7F6008CB0A7E}')") , ], 1 , 1 , 4 , 0 , 536 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceRotationalSpringWithJoint' , 'strName' , 'pRevJoint' , 'ppVal' , ), 218, (218, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{B9173DAD-05DD-4037-9367-726DDDEE988E}')") , (16393, 10, None, "IID('{C5BE32C6-5CCE-4BAF-B0BF-4B304BFEC2C5}')") , ], 1 , 1 , 4 , 0 , 544 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceRotationalSpringWithBody' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pRefFrame' , 
			 'ppVal' , ), 219, (219, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{C5BE32C6-5CCE-4BAF-B0BF-4B304BFEC2C5}')") , ], 1 , 1 , 4 , 0 , 552 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceRotationalAxialWithJoint' , 'strName' , 'pExtendedJoint' , 'ppVal' , ), 220, (220, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{B9173DAD-05DD-4037-9367-726DDDEE988E}')") , (16393, 10, None, "IID('{65024A22-5502-4F83-83D1-8C0EE0CE1712}')") , ], 1 , 1 , 4 , 0 , 560 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceRotationalAxialWithBody' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pRefFrame' , 
			 'ppVal' , ), 221, (221, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{65024A22-5502-4F83-83D1-8C0EE0CE1712}')") , ], 1 , 1 , 4 , 0 , 568 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceBeam' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 222, (222, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{53C512F8-E418-4F65-9755-271B9A6F59E0}')") , ], 1 , 1 , 4 , 0 , 576 , (3, 0, None, None) , 0 , )),
	(( 'CreateForcePlate' , 'strName' , 'pEntity1' , 'pEntity2' , 'pEntity3' , 
			 'pEntity4' , 'pRefFrame1' , 'pRefFrame2' , 'pRefFrame3' , 'pRefFrame4' , 
			 'ppVal' , ), 223, (223, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{64E1EBEB-71A0-4986-90F3-8C0B77A3F88B}')") , ], 1 , 1 , 4 , 0 , 584 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceTireGround' , 'strName' , 'pActionEntity' , 'pRefFrame' , 'ppVal' , 
			 ), 224, (224, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{57CC4E39-380C-40B8-AE7F-0908ADC0DB18}')") , ], 1 , 1 , 4 , 0 , 592 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceTireSolidContact' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pRefFrame' , 
			 'ppVal' , ), 225, (225, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{57CC4E39-380C-40B8-AE7F-0908ADC0DB18}')") , ], 1 , 1 , 4 , 0 , 600 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactCircleToCurve' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 241, (241, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{6A2CED63-4688-4E31-8407-68455039C297}')") , ], 1 , 1 , 4 , 0 , 608 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereToSphere' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 242, (242, (), [ (8, 1, None, None) , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , (16393, 10, None, "IID('{5333486D-3939-4899-8357-62D694707155}')") , ], 1 , 1 , 4 , 0 , 616 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereInSphere' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 243, (243, (), [ (8, 1, None, None) , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , (16393, 10, None, "IID('{B60FAA98-F5DA-4096-B282-4C015E99D9A8}')") , ], 1 , 1 , 4 , 0 , 624 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereToSurface' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 244, (244, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , (16393, 10, None, "IID('{8928F336-9095-49D0-9AAC-1D599E3F26A7}')") , ], 1 , 1 , 4 , 0 , 632 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactExtendedSurfaceToSurface' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 246, (246, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{6495A425-79AC-40E6-8BF6-A95AA1A2D578}')") , ], 1 , 1 , 4 , 0 , 640 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactCurveToCurve' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 247, (247, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{3710687E-E5C7-436E-8127-3ECAC2851397}')") , ], 1 , 1 , 4 , 0 , 648 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereToCylinder' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 248, (248, (), [ (8, 1, None, None) , (9, 1, None, "IID('{5810C7E4-F627-4171-9D64-4BC97F14BB8E}')") , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , (16393, 10, None, "IID('{17DA0A15-1706-4346-8982-C0E9243F866E}')") , ], 1 , 1 , 4 , 0 , 656 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereToBox' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 249, (249, (), [ (8, 1, None, None) , (9, 1, None, "IID('{7B6155CC-0035-4449-9748-DFCE0956F5D9}')") , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , (16393, 10, None, "IID('{32D72143-2B38-4E05-921B-1A1F3282FEB1}')") , ], 1 , 1 , 4 , 0 , 664 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereToTorus' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 250, (250, (), [ (8, 1, None, None) , (9, 1, None, "IID('{92A1D6C1-1B9F-4A5A-AA3E-164073FAA5FB}')") , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , (16393, 10, None, "IID('{15C4A86F-4FC5-4305-87EF-918AEB6C9B8D}')") , ], 1 , 1 , 4 , 0 , 672 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereInCylinder' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 251, (251, (), [ (8, 1, None, None) , (9, 1, None, "IID('{5810C7E4-F627-4171-9D64-4BC97F14BB8E}')") , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , (16393, 10, None, "IID('{7A5148F6-528B-4BCD-A271-47F8842D6E6C}')") , ], 1 , 1 , 4 , 0 , 680 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereInBox' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 252, (252, (), [ (8, 1, None, None) , (9, 1, None, "IID('{7B6155CC-0035-4449-9748-DFCE0956F5D9}')") , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , (16393, 10, None, "IID('{EF263E7B-85A1-4B43-97F6-3BD08C9334DB}')") , ], 1 , 1 , 4 , 0 , 688 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereInTorus' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 253, (253, (), [ (8, 1, None, None) , (9, 1, None, "IID('{92A1D6C1-1B9F-4A5A-AA3E-164073FAA5FB}')") , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , (16393, 10, None, "IID('{6D130ECF-C4B3-4E13-ABDC-7C6023E11A3B}')") , ], 1 , 1 , 4 , 0 , 696 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactCircleToCircle' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 254, (254, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{EC57C6FE-34A6-456F-AE24-7A8AACD2E723}')") , ], 1 , 1 , 4 , 0 , 704 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactCircleInCircle' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 255, (255, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{56C95894-62F4-4D51-B976-862FC3E711AB}')") , ], 1 , 1 , 4 , 0 , 712 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactCam2D' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 256, (256, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{690A46F3-D9C2-4AFF-8493-1667E2AB01C8}')") , ], 1 , 1 , 4 , 0 , 720 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactCamLine2D' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 257, (257, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{59D79E1B-8BF5-4AA3-93F4-971C64745639}')") , ], 1 , 1 , 4 , 0 , 728 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactCylinderToSurface' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 258, (258, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{5810C7E4-F627-4171-9D64-4BC97F14BB8E}')") , (16393, 10, None, "IID('{2B0D7BEC-4344-49F3-BF7A-CFEB25A06BFC}')") , ], 1 , 1 , 4 , 0 , 736 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactCylinderToCylinder' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 259, (259, (), [ (8, 1, None, None) , (9, 1, None, "IID('{5810C7E4-F627-4171-9D64-4BC97F14BB8E}')") , (9, 1, None, "IID('{5810C7E4-F627-4171-9D64-4BC97F14BB8E}')") , (16393, 10, None, "IID('{CA52FC45-8B33-4AB7-BE25-8454F1C1CB57}')") , ], 1 , 1 , 4 , 0 , 744 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactCylinderInCylinder' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 260, (260, (), [ (8, 1, None, None) , (9, 1, None, "IID('{5810C7E4-F627-4171-9D64-4BC97F14BB8E}')") , (9, 1, None, "IID('{5810C7E4-F627-4171-9D64-4BC97F14BB8E}')") , (16393, 10, None, "IID('{D4E093C4-C608-4D7E-A620-25FA02B21B83}')") , ], 1 , 1 , 4 , 0 , 752 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactConeInCone' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 261, (261, (), [ (8, 1, None, None) , (9, 1, None, "IID('{1A304704-02AE-4939-8CD1-0DBCDE3F526B}')") , (9, 1, None, "IID('{1A304704-02AE-4939-8CD1-0DBCDE3F526B}')") , (16393, 10, None, "IID('{58994473-EE23-4CC2-9F1B-EC20B9398A03}')") , ], 1 , 1 , 4 , 0 , 760 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactConeToCone' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 262, (262, (), [ (8, 1, None, None) , (9, 1, None, "IID('{1A304704-02AE-4939-8CD1-0DBCDE3F526B}')") , (9, 1, None, "IID('{1A304704-02AE-4939-8CD1-0DBCDE3F526B}')") , (16393, 10, None, "IID('{60BF370A-91E7-47B9-8BBC-584843818988}')") , ], 1 , 1 , 4 , 0 , 768 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSolidContact' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 263, (263, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{C2F210C5-9B2E-43C2-9C50-D57E01780041}')") , ], 1 , 1 , 4 , 0 , 776 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereToCone' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 264, (264, (), [ (8, 1, None, None) , (9, 1, None, "IID('{1A304704-02AE-4939-8CD1-0DBCDE3F526B}')") , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , (16393, 10, None, "IID('{028811A2-89B0-4A54-B105-7682DC7D07DB}')") , ], 1 , 1 , 4 , 0 , 784 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactConeToCylinder' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 265, (265, (), [ (8, 1, None, None) , (9, 1, None, "IID('{5810C7E4-F627-4171-9D64-4BC97F14BB8E}')") , (9, 1, None, "IID('{1A304704-02AE-4939-8CD1-0DBCDE3F526B}')") , (16393, 10, None, "IID('{DA496635-4F2C-44AB-B59D-B2F1A6946C62}')") , ], 1 , 1 , 4 , 0 , 792 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSurfaceToSurface' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 266, (266, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{1D599359-EBA8-4D8D-A611-6EEBABBF5BB0}')") , ], 1 , 1 , 4 , 0 , 800 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereArcRevolution' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'ppVal' , ), 267, (267, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{8B3A469C-6172-4F76-91BC-34C074A7754A}')") , ], 1 , 1 , 4 , 0 , 808 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereArcExtrude' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'ppVal' , ), 268, (268, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{950986EE-CD2C-4719-A2C1-329FB478FA05}')") , ], 1 , 1 , 4 , 0 , 816 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereToArcRevolution' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 269, (269, (), [ (8, 1, None, None) , (9, 1, None, "IID('{CC63D830-4DFB-4DFC-920E-966E02DCCE51}')") , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , (16393, 10, None, "IID('{2FACF09B-48C8-4A94-92D7-BF9F43647CB3}')") , ], 1 , 1 , 4 , 0 , 824 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereToArcExtrusion' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 270, (270, (), [ (8, 1, None, None) , (9, 1, None, "IID('{7338A8FC-4CD7-472D-B764-578B96254856}')") , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , (16393, 10, None, "IID('{F535B5BD-3EC1-4774-AB37-BF8A82D076C1}')") , ], 1 , 1 , 4 , 0 , 832 , (3, 0, None, None) , 0 , )),
	(( 'CreateParametricPoint' , 'strName' , 'pPoint' , 'pRefMarker' , 'ppVal' , 
			 ), 271, (271, (), [ (8, 1, None, None) , (8197, 1, None, None) , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (16393, 10, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 1 , 4 , 0 , 840 , (3, 0, None, None) , 0 , )),
	(( 'CreateParametricValue' , 'strName' , 'dValue' , 'ppVal' , ), 272, (272, (), [ 
			 (8, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')") , ], 1 , 1 , 4 , 0 , 848 , (3, 0, None, None) , 0 , )),
	(( 'CreateDesignVariable' , 'strName' , 'ParametricValue' , 'ppVal' , ), 273, (273, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')") , (16393, 10, None, "IID('{44DA6D75-D10A-48E2-8077-5D9B9293842D}')") , ], 1 , 1 , 4 , 0 , 856 , (3, 0, None, None) , 0 , )),
	(( 'CreateParametricPointConnector' , 'strName' , 'ppVal' , ), 274, (274, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{5A26F623-DA73-4531-884A-946494037A2B}')") , ], 1 , 1 , 4 , 0 , 864 , (3, 0, None, None) , 0 , )),
	(( 'CreateParametricValueConnector' , 'strName' , 'ppVal' , ), 275, (275, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{3C8942E4-0A9C-48DB-AFF4-882202E3BA8A}')") , ], 1 , 1 , 4 , 0 , 872 , (3, 0, None, None) , 0 , )),
	(( 'CreateVariableEquation' , 'strName' , 'pExpression' , 'ppVal' , ), 276, (276, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , (16393, 10, None, "IID('{1ECE0007-85A7-4F9B-AD9E-FEE2684A398E}')") , ], 1 , 1 , 4 , 0 , 880 , (3, 0, None, None) , 0 , )),
	(( 'CreateVariableEquationWithUserSubroutine' , 'strName' , 'pUserSubroutine' , 'ppVal' , ), 277, (277, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , (16393, 10, None, "IID('{1ECE0007-85A7-4F9B-AD9E-FEE2684A398E}')") , ], 1 , 1 , 4 , 0 , 888 , (3, 0, None, None) , 0 , )),
	(( 'CreateDifferentialEquation' , 'strName' , 'enType' , 'pExpression' , 'ppVal' , 
			 ), 278, (278, (), [ (8, 1, None, None) , (3, 1, None, "IID('{A79AFF6F-883F-4763-A44B-1879ECC74AFF}')") , (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , (16393, 10, None, "IID('{591F39F5-FBE0-49DF-83B6-6C0550D95A6A}')") , ], 1 , 1 , 4 , 0 , 896 , (3, 0, None, None) , 0 , )),
	(( 'CreateDifferentialEquationWithUserSubroutine' , 'strName' , 'enType' , 'pUserSubroutine' , 'ppVal' , 
			 ), 279, (279, (), [ (8, 1, None, None) , (3, 1, None, "IID('{A79AFF6F-883F-4763-A44B-1879ECC74AFF}')") , (9, 1, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , (16393, 10, None, "IID('{591F39F5-FBE0-49DF-83B6-6C0550D95A6A}')") , ], 1 , 1 , 4 , 0 , 904 , (3, 0, None, None) , 0 , )),
	(( 'CreateExpression' , 'strName' , 'strExpression' , 'ppVal' , ), 280, (280, (), [ 
			 (8, 1, None, None) , (8, 1, None, None) , (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 1 , 4 , 0 , 912 , (3, 0, None, None) , 0 , )),
	(( 'CreateRequestStandard' , 'strName' , 'enType' , 'pActionMarker' , 'pBaseMarker' , 
			 'pRefMarker' , 'ppVal' , ), 282, (282, (), [ (8, 1, None, None) , (3, 1, None, "IID('{B30ED634-1939-40CE-B123-73818AAD745C}')") , 
			 (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (16393, 10, None, "IID('{BAD8E0C8-CE5C-4AFD-88DE-427445F73C75}')") , ], 1 , 1 , 4 , 0 , 920 , (3, 0, None, None) , 0 , )),
	(( 'CreateRequestExpression' , 'strName' , 'pEx1' , 'pEx2' , 'pEx3' , 
			 'pEx4' , 'pEx5' , 'pEx6' , 'ppVal' , ), 283, (283, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , 
			 (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , (16393, 10, None, "IID('{70D93511-61EB-4AB6-80D8-B142DB3D7923}')") , ], 1 , 1 , 4 , 0 , 928 , (3, 0, None, None) , 0 , )),
	(( 'CreateRequestUserSubroutine' , 'strName' , 'pUserSubroutine' , 'ppVal' , ), 284, (284, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , (16393, 10, None, "IID('{F13A88C4-88A8-439B-B06A-A6827B3D4489}')") , ], 1 , 1 , 4 , 0 , 936 , (3, 0, None, None) , 0 , )),
	(( 'CreateUserSubroutine' , 'strName' , 'strUserParameter' , 'strDllName' , 'ppVal' , 
			 ), 285, (285, (), [ (8, 1, None, None) , (8, 1, None, None) , (8, 1, None, None) , (16393, 10, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 1 , 4 , 0 , 944 , (3, 0, None, None) , 0 , )),
	(( 'CreatePerformanceIndex' , 'strName' , 'Type' , 'Expression' , 'ppVal' , 
			 ), 286, (286, (), [ (8, 1, None, None) , (3, 1, None, "IID('{F647DDAA-8DDC-4516-8EC6-0C1099295F3A}')") , (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , (16393, 10, None, "IID('{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}')") , ], 1 , 1 , 4 , 0 , 952 , (3, 0, None, None) , 0 , )),
	(( 'CreateMaterialProperty' , 'strName' , 'dDensity' , 'dYoungsModulus' , 'dPoissonRatio' , 
			 'ppVal' , ), 287, (287, (), [ (8, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , 
			 (5, 1, None, None) , (16393, 10, None, "IID('{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}')") , ], 1 , 1 , 4 , 0 , 960 , (3, 0, None, None) , 0 , )),
	(( 'CreateSplineWithValue' , 'strName' , 'pMultiPoint' , 'ppVal' , ), 288, (288, (), [ 
			 (8, 1, None, None) , (8204, 1, None, None) , (16393, 10, None, "IID('{E76144D2-715D-41B4-A432-7B6C7F713FC2}')") , ], 1 , 1 , 4 , 0 , 968 , (3, 0, None, None) , 0 , )),
	(( 'CreateSplineWithFile' , 'strName' , 'strFileName' , 'ppVal' , ), 289, (289, (), [ 
			 (8, 1, None, None) , (8, 1, None, None) , (16393, 10, None, "IID('{E76144D2-715D-41B4-A432-7B6C7F713FC2}')") , ], 1 , 1 , 4 , 0 , 976 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereInCone' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 290, (290, (), [ (8, 1, None, None) , (9, 1, None, "IID('{1A304704-02AE-4939-8CD1-0DBCDE3F526B}')") , (9, 1, None, "IID('{2122DEE7-EE07-4A20-9B49-5A9AF4599906}')") , (16393, 10, None, "IID('{4D515A5F-EE68-43AD-8C60-6AD2B9DF8D09}')") , ], 1 , 1 , 4 , 0 , 984 , (3, 0, None, None) , 0 , )),
	(( 'CreatePerformanceIndex2' , 'strName' , 'enumType' , 'varPI' , ), 295, (295, (), [ 
			 (8, 1, None, None) , (3, 1, None, "IID('{48BC58C9-3315-4123-B837-9E6C373B6F0D}')") , (16393, 10, None, "IID('{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}')") , ], 1 , 1 , 4 , 0 , 992 , (3, 0, None, None) , 0 , )),
	(( 'CreateScopeAngle' , 'strName' , 'pStartMarker' , 'pCenterMarker' , 'pEndMarker' , 
			 'ppVal' , ), 301, (301, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , 
			 (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (16393, 10, None, "IID('{1448FE04-1A3C-495A-8944-98789C61326C}')") , ], 1 , 1 , 4 , 0 , 1000 , (3, 0, None, None) , 0 , )),
	(( 'CreateScopePointToPoint' , 'strName' , 'enType' , 'enComponentType' , 'pActionMarker' , 
			 'pBaseMarker' , 'pRefMarker' , 'ppVal' , ), 302, (302, (), [ (8, 1, None, None) , 
			 (3, 1, None, "IID('{106FA94C-210E-47A8-911D-6D204E299B26}')") , (3, 1, None, "IID('{9B9C7C25-9C1B-4043-94A3-E195D1D5895E}')") , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , 
			 (16393, 10, None, "IID('{1814A992-158F-4A63-A3E6-1E69A1587342}')") , ], 1 , 1 , 4 , 0 , 1008 , (3, 0, None, None) , 0 , )),
	(( 'CreateScopeExpression' , 'strName' , 'pExpression' , 'ppVal' , ), 303, (303, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , (16393, 10, None, "IID('{7B3C335F-849F-4A18-BE0E-BDE3BACFA0EE}')") , ], 1 , 1 , 4 , 0 , 1016 , (3, 0, None, None) , 0 , )),
	(( 'CreateScopeEntity' , 'strName' , 'pEntity' , 'ppVal' , ), 304, (304, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (16393, 10, None, "IID('{45D6BAEA-6C9A-4878-9F5D-F0AE79A1EE31}')") , ], 1 , 1 , 4 , 0 , 1024 , (3, 0, None, None) , 0 , )),
	(( 'CreateScopeGapInterference' , 'Name' , 'Base' , 'Action' , 'Type' , 
			 'Scope' , ), 305, (305, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (3, 1, None, "IID('{E419FAFA-B044-4EC0-86A2-C7854943AA55}')") , (16393, 10, None, "IID('{1DD425A8-DC9F-4E7C-94CF-A3D1F90D8A75}')") , ], 1 , 1 , 4 , 0 , 1032 , (3, 0, None, None) , 0 , )),
	(( 'CreateScopeEntityComponent' , 'strName' , 'pEntity' , 'Component' , 'ppVal' , 
			 ), 306, (306, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (8, 1, None, None) , (16393, 10, None, "IID('{45D6BAEA-6C9A-4878-9F5D-F0AE79A1EE31}')") , ], 1 , 1 , 4 , 0 , 1040 , (3, 0, None, None) , 0 , )),
	(( 'GetBoundingBox' , 'x1' , 'y1' , 'z1' , 'x2' , 
			 'y2' , 'z2' , ), 310, (310, (), [ (16389, 2, None, None) , (16389, 2, None, None) , 
			 (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , (16389, 2, None, None) , ], 1 , 1 , 4 , 0 , 1048 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointFixedEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 311, (311, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{2EA33375-B6DB-4F9D-A3B3-B86A2C91BEDA}')") , ], 1 , 1 , 4 , 0 , 1056 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointDistanceEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 312, (312, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{2ED808B6-A890-4694-A37C-E8E2E44BCD41}')") , ], 1 , 1 , 4 , 0 , 1064 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointAtpointEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 313, (313, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{ADED6BDA-80A4-4D1E-824C-A999B0402A7B}')") , ], 1 , 1 , 4 , 0 , 1072 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointInlineEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 314, (314, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{002ECEBC-0D7D-40DE-9F2C-D6F88E5511C6}')") , ], 1 , 1 , 4 , 0 , 1080 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointInplaneEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 315, (315, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{C3E0D80D-8C4D-4DA8-9206-5A7A83435267}')") , ], 1 , 1 , 4 , 0 , 1088 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointOrientationEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 316, (316, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{92F68679-E702-4BF4-B969-546E11BECC63}')") , ], 1 , 1 , 4 , 0 , 1096 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointParallelEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 317, (317, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{54101676-0190-44F2-837F-2CFAFB8A11D2}')") , ], 1 , 1 , 4 , 0 , 1104 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointPerpendicularEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 318, (318, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{40F4819B-5A72-4CFE-9F7E-1695A1B677C7}')") , ], 1 , 1 , 4 , 0 , 1112 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointConstantVelocityEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 319, (319, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{F6D08556-99B4-4761-89E0-D33956DF5776}')") , ], 1 , 1 , 4 , 0 , 1120 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointCartesianMotionEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 320, (320, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{57A77C2D-5956-4DBE-9893-820E0EA5D034}')") , ], 1 , 1 , 4 , 0 , 1128 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointRevoluteEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 321, (321, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}')") , ], 1 , 1 , 4 , 0 , 1136 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointTranslationalEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 322, (322, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{07101FE1-4B6A-41CA-9FC7-3C48C9E96785}')") , ], 1 , 1 , 4 , 0 , 1144 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointSphericalEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 323, (323, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{206C4CC5-E70A-4F3C-A4FD-2D6B2EEE1F5C}')") , ], 1 , 1 , 4 , 0 , 1152 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointCylindricalEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 324, (324, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{D89EE062-1A3F-4FE7-915C-8A7D7F4792F0}')") , ], 1 , 1 , 4 , 0 , 1160 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointUniversalEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 325, (325, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{04E99CDC-64B1-42F2-B981-EC91848B39F6}')") , ], 1 , 1 , 4 , 0 , 1168 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointPlanarEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 326, (326, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{773D31B3-5540-4497-BDCA-D37CCC40E156}')") , ], 1 , 1 , 4 , 0 , 1176 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointScrewEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pRefFrame' , 
			 'dPitch' , 'ppVal' , ), 327, (327, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (5, 1, None, None) , (16393, 10, None, "IID('{B6C04DD4-89BA-4A08-9071-9AACD3E4C0F9}')") , ], 1 , 1 , 4 , 0 , 1184 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceSpringEx' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 330, (330, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{164BA461-0C9B-4F07-A027-C82298891823}')") , ], 1 , 1 , 4 , 0 , 1192 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceAxialEx' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 331, (331, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{960E870B-7C56-4FF5-95DE-E735C751F8E7}')") , ], 1 , 1 , 4 , 0 , 1200 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceTranslationalEx' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 332, (332, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{F82CE83C-C5A5-42AC-867F-079BCF051FEA}')") , ], 1 , 1 , 4 , 0 , 1208 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceRotationalEx' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 333, (333, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{52BFD3CF-4CC9-4ECE-9B8C-E7A28EF9D4A2}')") , ], 1 , 1 , 4 , 0 , 1216 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceScrewEx' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 334, (334, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{D996544C-0967-4920-83A6-A3C9FB97E153}')") , ], 1 , 1 , 4 , 0 , 1224 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceBushingEx' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pRefFrame' , 
			 'ppVal' , ), 335, (335, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{54235E69-8E20-4D33-8A62-623CCD9C87AA}')") , ], 1 , 1 , 4 , 0 , 1232 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceMatrixEx' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 336, (336, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{5A0426A9-C465-48F7-9456-7F6008CB0A7E}')") , ], 1 , 1 , 4 , 0 , 1240 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceRotationalSpringWithBodyEx' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pRefFrame' , 
			 'ppVal' , ), 337, (337, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{C5BE32C6-5CCE-4BAF-B0BF-4B304BFEC2C5}')") , ], 1 , 1 , 4 , 0 , 1248 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceRotationalAxialWithBodyEx' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pRefFrame' , 
			 'ppVal' , ), 338, (338, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{65024A22-5502-4F83-83D1-8C0EE0CE1712}')") , ], 1 , 1 , 4 , 0 , 1256 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceBeamEx' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 339, (339, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{53C512F8-E418-4F65-9755-271B9A6F59E0}')") , ], 1 , 1 , 4 , 0 , 1264 , (3, 0, None, None) , 0 , )),
	(( 'CreateForcePlateEx' , 'strName' , 'pEntity1' , 'pEntity2' , 'pEntity3' , 
			 'pEntity4' , 'pRefFrame1' , 'pRefFrame2' , 'pRefFrame3' , 'pRefFrame4' , 
			 'ppVal' , ), 340, (340, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{64E1EBEB-71A0-4986-90F3-8C0B77A3F88B}')") , ], 1 , 1 , 4 , 0 , 1272 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceTireGroundEx' , 'strName' , 'pActionEntity' , 'pRefFrame' , 'ppVal' , 
			 ), 341, (341, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{57CC4E39-380C-40B8-AE7F-0908ADC0DB18}')") , ], 1 , 1 , 4 , 0 , 1280 , (3, 0, None, None) , 0 , )),
	(( 'GetEntity' , 'strName' , 'ppVal' , ), 351, (351, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 1 , 4 , 0 , 1288 , (3, 0, None, None) , 0 , )),
	(( 'CreateSubSystem' , 'SubSystemType' , 'strName' , 'pRefFrame' , 'ppVal' , 
			 ), 352, (352, (), [ (3, 1, None, "IID('{D1C26945-5643-4907-AFBB-060D2B7B3E25}')") , (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}')") , ], 1 , 1 , 4 , 0 , 1296 , (3, 0, None, None) , 0 , )),
	(( 'RFlexToolkit' , 'ppVal' , ), 354, (354, (), [ (16393, 10, None, "IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}')") , ], 1 , 2 , 4 , 0 , 1304 , (3, 0, None, None) , 0 , )),
	(( 'FFlexToolkit' , 'ppVal' , ), 355, (355, (), [ (16393, 10, None, "IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}')") , ], 1 , 2 , 4 , 0 , 1312 , (3, 0, None, None) , 0 , )),
	(( 'MTT2DSubSystem' , 'ppVal' , ), 356, (356, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 1320 , (3, 0, None, None) , 0 , )),
	(( 'TireToolkit' , 'pVal' , ), 357, (357, (), [ (16393, 10, None, "IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}')") , ], 1 , 2 , 4 , 0 , 1328 , (3, 0, None, None) , 0 , )),
	(( 'MTT3DSubSystem' , 'ppVal' , ), 358, (358, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 1336 , (3, 0, None, None) , 0 , )),
	(( 'TrackLMSubSystem' , 'ppVal' , ), 359, (359, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 1344 , (3, 0, None, None) , 0 , )),
	(( 'LayerNumber' , 'pVal' , ), 360, (360, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 1352 , (3, 0, None, None) , 0 , )),
	(( 'LayerNumber' , 'pVal' , ), 360, (360, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 1360 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceMatrixWithNodeOrBody' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 361, (361, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{5A0426A9-C465-48F7-9456-7F6008CB0A7E}')") , ], 1 , 1 , 4 , 0 , 1368 , (3, 0, None, None) , 0 , )),
	(( 'CreateSensorPointInBox' , 'strName' , 'pSensorMarker' , 'pGeometryBox' , 'ppVal' , 
			 ), 370, (370, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (9, 1, None, "IID('{7B6155CC-0035-4449-9748-DFCE0956F5D9}')") , (16393, 10, None, "IID('{EDFD7500-666A-4F69-AA26-194A60C955E3}')") , ], 1 , 1 , 4 , 0 , 1376 , (3, 0, None, None) , 0 , )),
	(( 'CreateSensorPointInBoxWithMarker' , 'strName' , 'pSensorMarker' , 'pBoxCenter' , 'dBoxWidth' , 
			 'dBoxHeight' , 'dBoxDepth' , 'ppVal' , ), 371, (371, (), [ (8, 1, None, None) , 
			 (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , 
			 (16393, 10, None, "IID('{EDFD7500-666A-4F69-AA26-194A60C955E3}')") , ], 1 , 1 , 4 , 0 , 1384 , (3, 0, None, None) , 0 , )),
	(( 'CreateSensorLaser' , 'strName' , 'pSensorMarker' , 'pGeometry' , 'dRange' , 
			 'ppVal' , ), 372, (372, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , 
			 (5, 1, None, None) , (16393, 10, None, "IID('{BFB1489A-2BE8-4AE0-833F-21B119D4260C}')") , ], 1 , 1 , 4 , 0 , 1392 , (3, 0, None, None) , 0 , )),
	(( 'CreateSensorLaserEx' , 'Name' , 'markerSensor' , 'markerRef' , 'Range' , 
			 'Entity' , 'ppVal' , ), 373, (373, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , 
			 (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (5, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (16393, 10, None, "IID('{BD5CA94C-B210-4D55-BB8C-438744A1E3EB}')") , ], 1 , 1 , 4 , 0 , 1400 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereToSphere2' , 'Name' , 'baseSphere' , 'actionSphere' , 'contact' , 
			 ), 374, (374, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{5333486D-3939-4899-8357-62D694707155}')") , ], 1 , 1 , 4 , 0 , 1408 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereInSphere2' , 'Name' , 'baseSphere' , 'actionSphere' , 'contact' , 
			 ), 375, (375, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{B60FAA98-F5DA-4096-B282-4C015E99D9A8}')") , ], 1 , 1 , 4 , 0 , 1416 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereToCylinder2' , 'Name' , 'baseCylinder' , 'actionSphere' , 'contact' , 
			 ), 376, (376, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{17DA0A15-1706-4346-8982-C0E9243F866E}')") , ], 1 , 1 , 4 , 0 , 1424 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereInCylinder2' , 'Name' , 'baseCylinder' , 'actionSphere' , 'contact' , 
			 ), 377, (377, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{7A5148F6-528B-4BCD-A271-47F8842D6E6C}')") , ], 1 , 1 , 4 , 0 , 1432 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereToBox2' , 'Name' , 'baseBox' , 'actionSphere' , 'contact' , 
			 ), 378, (378, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{32D72143-2B38-4E05-921B-1A1F3282FEB1}')") , ], 1 , 1 , 4 , 0 , 1440 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereInBox2' , 'Name' , 'baseBox' , 'actionSphere' , 'contact' , 
			 ), 379, (379, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{EF263E7B-85A1-4B43-97F6-3BD08C9334DB}')") , ], 1 , 1 , 4 , 0 , 1448 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereToTorus2' , 'Name' , 'baseTorus' , 'actionSphere' , 'contact' , 
			 ), 380, (380, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{15C4A86F-4FC5-4305-87EF-918AEB6C9B8D}')") , ], 1 , 1 , 4 , 0 , 1456 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereInTorus2' , 'Name' , 'baseTorus' , 'actionSphere' , 'contact' , 
			 ), 381, (381, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{6D130ECF-C4B3-4E13-ABDC-7C6023E11A3B}')") , ], 1 , 1 , 4 , 0 , 1464 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereToCone2' , 'Name' , 'baseCone' , 'actionSphere' , 'contact' , 
			 ), 382, (382, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{028811A2-89B0-4A54-B105-7682DC7D07DB}')") , ], 1 , 1 , 4 , 0 , 1472 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereInCone2' , 'Name' , 'baseCone' , 'actionSphere' , 'contact' , 
			 ), 383, (383, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{4D515A5F-EE68-43AD-8C60-6AD2B9DF8D09}')") , ], 1 , 1 , 4 , 0 , 1480 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereToArcRevolution2' , 'Name' , 'baseArcRevolution' , 'actionSphere' , 'contact' , 
			 ), 384, (384, (), [ (8, 1, None, None) , (9, 1, None, "IID('{CC63D830-4DFB-4DFC-920E-966E02DCCE51}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{2FACF09B-48C8-4A94-92D7-BF9F43647CB3}')") , ], 1 , 1 , 4 , 0 , 1488 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereToArcExtrusion2' , 'Name' , 'baseArcExtrusion' , 'actionSphere' , 'contact' , 
			 ), 385, (385, (), [ (8, 1, None, None) , (9, 1, None, "IID('{7338A8FC-4CD7-472D-B764-578B96254856}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{F535B5BD-3EC1-4774-AB37-BF8A82D076C1}')") , ], 1 , 1 , 4 , 0 , 1496 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactSphereToSurface2' , 'Name' , 'baseSurface' , 'actionSphere' , 'contact' , 
			 ), 386, (386, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{8928F336-9095-49D0-9AAC-1D599E3F26A7}')") , ], 1 , 1 , 4 , 0 , 1504 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactCylinderToCylinder2' , 'Name' , 'baseCylinder' , 'actionCylinder' , 'contact' , 
			 ), 387, (387, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{CA52FC45-8B33-4AB7-BE25-8454F1C1CB57}')") , ], 1 , 1 , 4 , 0 , 1512 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactCylinderInCylinder2' , 'Name' , 'baseCylinder' , 'actionCylinder' , 'contact' , 
			 ), 388, (388, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{D4E093C4-C608-4D7E-A620-25FA02B21B83}')") , ], 1 , 1 , 4 , 0 , 1520 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactCylinderToSurface2' , 'Name' , 'baseSurface' , 'actionCylinder' , 'contact' , 
			 ), 389, (389, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{2B0D7BEC-4344-49F3-BF7A-CFEB25A06BFC}')") , ], 1 , 1 , 4 , 0 , 1528 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactConeToCone2' , 'Name' , 'baseCone' , 'actionCone' , 'contact' , 
			 ), 390, (390, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{60BF370A-91E7-47B9-8BBC-584843818988}')") , ], 1 , 1 , 4 , 0 , 1536 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactConeInCone2' , 'Name' , 'baseCone' , 'actionCone' , 'contact' , 
			 ), 391, (391, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{58994473-EE23-4CC2-9F1B-EC20B9398A03}')") , ], 1 , 1 , 4 , 0 , 1544 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactConeToCylinder2' , 'Name' , 'baseCylinder' , 'actionCone' , 'contact' , 
			 ), 392, (392, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{DA496635-4F2C-44AB-B59D-B2F1A6946C62}')") , ], 1 , 1 , 4 , 0 , 1552 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactCylinderToBox2' , 'strName' , 'baseBox' , 'actionCylinder' , 'ppVal' , 
			 ), 393, (393, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{B006015D-09FE-4F3A-9922-B74E7C4036A0}')") , ], 1 , 1 , 4 , 0 , 1560 , (3, 0, None, None) , 0 , )),
	(( 'SubSystemCollection' , 'ppVal' , ), 450, (450, (), [ (16393, 10, None, "IID('{D1451F25-D6A2-42B7-8DDF-D0F221D5FBFE}')") , ], 1 , 2 , 4 , 0 , 1568 , (3, 0, None, None) , 0 , )),
	(( 'BodyCollection' , 'ppVal' , ), 451, (451, (), [ (16393, 10, None, "IID('{E26794CD-5D37-4617-BB5A-1AD85F3ED410}')") , ], 1 , 2 , 4 , 0 , 1576 , (3, 0, None, None) , 0 , )),
	(( 'JointCollection' , 'ppVal' , ), 452, (452, (), [ (16393, 10, None, "IID('{58A5314F-24D0-4D53-AE77-23B42CB9FAC7}')") , ], 1 , 2 , 4 , 0 , 1584 , (3, 0, None, None) , 0 , )),
	(( 'PairConstraintCollection' , 'ppVal' , ), 453, (453, (), [ (16393, 10, None, "IID('{B21BD336-10F0-43BF-9EA3-E2258E754366}')") , ], 1 , 2 , 4 , 0 , 1592 , (3, 0, None, None) , 0 , )),
	(( 'ForceCollection' , 'ppVal' , ), 454, (454, (), [ (16393, 10, None, "IID('{B1359BD3-DD1C-4A0C-A16D-466CC9B0B4F5}')") , ], 1 , 2 , 4 , 0 , 1600 , (3, 0, None, None) , 0 , )),
	(( 'ContactCollection' , 'ppVal' , ), 455, (455, (), [ (16393, 10, None, "IID('{1B5A2AF8-F3DB-49CC-A112-21B0CD80C8EE}')") , ], 1 , 2 , 4 , 0 , 1608 , (3, 0, None, None) , 0 , )),
	(( 'RequestStandardCollection' , 'ppVal' , ), 456, (456, (), [ (16393, 10, None, "IID('{65267578-7015-4BB5-BB65-F5F81CCEA240}')") , ], 1 , 2 , 4 , 0 , 1616 , (3, 0, None, None) , 0 , )),
	(( 'RequestUserSubroutineCollection' , 'ppVal' , ), 457, (457, (), [ (16393, 10, None, "IID('{65267578-7015-4BB5-BB65-F5F81CCEA241}')") , ], 1 , 2 , 4 , 0 , 1624 , (3, 0, None, None) , 0 , )),
	(( 'RequestExpressionCollection' , 'ppVal' , ), 458, (458, (), [ (16393, 10, None, "IID('{65267578-7015-4BB5-BB65-F5F81CCEA242}')") , ], 1 , 2 , 4 , 0 , 1632 , (3, 0, None, None) , 0 , )),
	(( 'SplineCollection' , 'ppVal' , ), 459, (459, (), [ (16393, 10, None, "IID('{65267578-7015-4BB5-BB65-F5F81CCEA243}')") , ], 1 , 2 , 4 , 0 , 1640 , (3, 0, None, None) , 0 , )),
	(( 'ParametricPointCollection' , 'ppVal' , ), 460, (460, (), [ (16393, 10, None, "IID('{65267578-7015-4BB5-BB65-F5F81CCEA244}')") , ], 1 , 2 , 4 , 0 , 1648 , (3, 0, None, None) , 0 , )),
	(( 'ParametricValueCollection' , 'ppVal' , ), 461, (461, (), [ (16393, 10, None, "IID('{65267578-7015-4BB5-BB65-F5F81CCEA245}')") , ], 1 , 2 , 4 , 0 , 1656 , (3, 0, None, None) , 0 , )),
	(( 'ExpressionCollection' , 'ppVal' , ), 462, (462, (), [ (16393, 10, None, "IID('{65267578-7015-4BB5-BB65-F5F81CCEA246}')") , ], 1 , 2 , 4 , 0 , 1664 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutineCollection' , 'ppVal' , ), 463, (463, (), [ (16393, 10, None, "IID('{65267578-7015-4BB5-BB65-F5F81CCEA247}')") , ], 1 , 2 , 4 , 0 , 1672 , (3, 0, None, None) , 0 , )),
	(( 'VariableEquationCollection' , 'ppVal' , ), 464, (464, (), [ (16393, 10, None, "IID('{65267578-7015-4BB5-BB65-F5F81CCEA248}')") , ], 1 , 2 , 4 , 0 , 1680 , (3, 0, None, None) , 0 , )),
	(( 'DifferentialEquationCollection' , 'ppVal' , ), 465, (465, (), [ (16393, 10, None, "IID('{65267578-7015-4BB5-BB65-F5F81CCEA249}')") , ], 1 , 2 , 4 , 0 , 1688 , (3, 0, None, None) , 0 , )),
	(( 'ScopeCollection' , 'ppVal' , ), 466, (466, (), [ (16393, 10, None, "IID('{65267578-7015-4BB5-BB65-F5F81CCEA24A}')") , ], 1 , 2 , 4 , 0 , 1696 , (3, 0, None, None) , 0 , )),
	(( 'PerformanceIndexCollection' , 'ppVal' , ), 467, (467, (), [ (16393, 10, None, "IID('{CC76CCE9-4D71-4DE9-8A4C-490E57C838C2}')") , ], 1 , 2 , 4 , 0 , 1704 , (3, 0, None, None) , 0 , )),
	(( 'DesignVariableCollection' , 'ppVal' , ), 468, (468, (), [ (16393, 10, None, "IID('{EA742AA0-0675-4ABA-8145-C00A73F97747}')") , ], 1 , 2 , 4 , 0 , 1712 , (3, 0, None, None) , 0 , )),
	(( 'CreateParametricPointWithText' , 'strName' , 'strText' , 'pRefMarker' , 'ppVal' , 
			 ), 480, (480, (), [ (8, 1, None, None) , (8, 1, None, None) , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (16393, 10, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 1 , 4 , 0 , 1720 , (3, 0, None, None) , 0 , )),
	(( 'Merge' , 'pTarget' , 'arrSource' , ), 481, (481, (), [ (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (8204, 1, None, None) , ], 1 , 1 , 4 , 0 , 1728 , (3, 0, None, None) , 0 , )),
	(( 'ImportParametricPoint' , 'strFileName' , ), 482, (482, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 1736 , (3, 0, None, None) , 0 , )),
	(( 'ExportParametricPoint' , 'strFileName' , ), 483, (483, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 1744 , (3, 0, None, None) , 0 , )),
	(( 'ImportParametricValue' , 'strFileName' , ), 484, (484, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 1752 , (3, 0, None, None) , 0 , )),
	(( 'ExportParametricValue' , 'strFileName' , ), 485, (485, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 1760 , (3, 0, None, None) , 0 , )),
	(( 'CreateParametricValueWithText' , 'strName' , 'strText' , 'ppVal' , ), 486, (486, (), [ 
			 (8, 1, None, None) , (8, 1, None, None) , (16393, 10, None, "IID('{3EEED3CE-62E8-4882-AAE6-4812B49927B5}')") , ], 1 , 1 , 4 , 0 , 1768 , (3, 0, None, None) , 0 , )),
	(( 'FileExport' , 'strFile' , 'OverWrite' , ), 487, (487, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 1776 , (3, 0, None, None) , 0 , )),
	(( 'ControlToolkit' , 'ppVal' , ), 488, (488, (), [ (16393, 10, None, "IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}')") , ], 1 , 2 , 4 , 0 , 1784 , (3, 0, None, None) , 0 , )),
	(( 'DummyBody' , 'ppVal' , ), 489, (489, (), [ (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 2 , 4 , 0 , 1792 , (3, 0, None, None) , 0 , )),
	(( 'Redraw' , ), 490, (490, (), [ ], 1 , 1 , 4 , 0 , 1800 , (3, 0, None, None) , 0 , )),
	(( 'CreateString' , 'strName' , 'strString' , 'ppVal' , ), 491, (491, (), [ 
			 (8, 1, None, None) , (8, 1, None, None) , (16393, 10, None, "IID('{16DE1264-A4F7-4A8E-8F3C-E8B5210CB2D9}')") , ], 1 , 1 , 4 , 0 , 1808 , (3, 0, None, None) , 0 , )),
	(( 'StringCollection' , 'ppVal' , ), 492, (492, (), [ (16393, 10, None, "IID('{C9116090-BCBB-453C-A283-49E55A3344CA}')") , ], 1 , 2 , 4 , 0 , 1816 , (3, 0, None, None) , 0 , )),
	(( 'CreateExpressionWithArguments' , 'strName' , 'strExpression' , 'strArgument' , 'ppVal' , 
			 ), 493, (493, (), [ (8, 1, None, None) , (8, 1, None, None) , (8200, 1, None, None) , (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 1 , 4 , 0 , 1824 , (3, 0, None, None) , 0 , )),
	(( 'GetNewEntityName' , 'namePrefix' , 'Name' , ), 494, (494, (), [ (8, 1, None, None) , 
			 (16392, 10, None, None) , ], 1 , 1 , 4 , 0 , 1832 , (3, 0, None, None) , 0 , )),
	(( 'TrackHMSubSystem' , 'ppVal' , ), 495, (495, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 1840 , (3, 0, None, None) , 0 , )),
	(( 'DesignStudy' , 'ppVal' , ), 496, (496, (), [ (16393, 10, None, "IID('{A02C4C84-917B-448D-9137-1019967E7138}')") , ], 1 , 2 , 4 , 0 , 1848 , (3, 0, None, None) , 0 , )),
	(( 'BNPSubSystem' , 'ppVal' , ), 497, (497, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 1856 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactGeo' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 498, (498, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{6CAFE73E-3494-41D3-AB87-13A59CB8CF2A}')") , ], 1 , 1 , 4 , 0 , 1864 , (3, 0, None, None) , 0 , )),
	(( 'UpdateBoundingBox' , ), 499, (499, (), [ ], 1 , 1 , 4 , 0 , 1872 , (3, 0, None, None) , 0 , )),
	(( 'CreateBodyTorusWithAngle' , 'strName' , 'pRefFrame' , 'dMajorRadius' , 'dMinorRadius' , 
			 'dAngle' , 'ppVal' , ), 500, (500, (), [ (8, 1, None, None) , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , 
			 (5, 1, None, None) , (5, 1, None, None) , (5, 1, None, None) , (16393, 10, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , ], 1 , 1 , 4 , 0 , 1880 , (3, 0, None, None) , 0 , )),
	(( 'DurabilityToolkit' , 'ppVal' , ), 501, (501, (), [ (16393, 10, None, "IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}')") , ], 1 , 2 , 4 , 0 , 1888 , (3, 0, None, None) , 0 , )),
	(( 'CreateSpline3DWithValue' , 'strName' , 'pMultiPoint' , 'pPointZ' , 'ppVal' , 
			 ), 502, (502, (), [ (8, 1, None, None) , (8204, 1, None, None) , (8197, 1, None, None) , (16393, 10, None, "IID('{E76144D2-715D-41B4-A432-7B6C7F713FC2}')") , ], 1 , 1 , 4 , 0 , 1896 , (3, 0, None, None) , 0 , )),
	(( 'MirrorWithGeometry' , 'arrayEntity' , 'geoPlne' , 'MirrorType' , ), 503, (503, (), [ 
			 (8204, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (3, 1, None, "IID('{83510A20-2552-4D1D-BDD8-9D2765E3F86C}')") , ], 1 , 1 , 4 , 0 , 1904 , (3, 0, None, None) , 0 , )),
	(( 'MirrorWithMarker' , 'arrayEntity' , 'pMarker' , 'PlaneType' , 'MirrorType' , 
			 ), 504, (504, (), [ (8204, 1, None, None) , (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , (3, 1, None, "IID('{49CE6939-E9AC-4DA4-AEB0-1778F7CD0E53}')") , (3, 1, None, "IID('{83510A20-2552-4D1D-BDD8-9D2765E3F86C}')") , ], 1 , 1 , 4 , 0 , 1912 , (3, 0, None, None) , 0 , )),
	(( 'DeleteUnusedMarkers' , ), 505, (505, (), [ ], 1 , 1 , 4 , 0 , 1920 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactGeoSurface' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 506, (506, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (16393, 10, None, "IID('{8B44BA63-1871-4074-863D-1434F7D479B7}')") , ], 1 , 1 , 4 , 0 , 1928 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactGeoCurve' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 507, (507, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (16393, 10, None, "IID('{0BD26902-38C3-4C3F-B2B5-6038996BC174}')") , ], 1 , 1 , 4 , 0 , 1936 , (3, 0, None, None) , 0 , )),
	(( 'FlexInterface' , 'ppVal' , ), 508, (508, (), [ (16393, 10, None, "IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}')") , ], 1 , 2 , 4 , 0 , 1944 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceBeamWithRefAdjustment' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 509, (509, (), [ (8, 1, None, None) , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{53C512F8-E418-4F65-9755-271B9A6F59E0}')") , ], 1 , 1 , 4 , 0 , 1952 , (3, 0, None, None) , 0 , )),
	(( 'CreateForceBeamExWithRefAdjustment' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 510, (510, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{53C512F8-E418-4F65-9755-271B9A6F59E0}')") , ], 1 , 1 , 4 , 0 , 1960 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactCylinderToBox' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 511, (511, (), [ (8, 1, None, None) , (9, 1, None, "IID('{7B6155CC-0035-4449-9748-DFCE0956F5D9}')") , (9, 1, None, "IID('{5810C7E4-F627-4171-9D64-4BC97F14BB8E}')") , (16393, 10, None, "IID('{B006015D-09FE-4F3A-9922-B74E7C4036A0}')") , ], 1 , 1 , 4 , 0 , 1968 , (3, 0, None, None) , 0 , )),
	(( 'CreateGeneralConstraint' , 'strName' , 'pExpression' , 'ppVal' , ), 512, (512, (), [ 
			 (8, 1, None, None) , (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , (16393, 10, None, "IID('{DF992967-ADE4-434E-B7BA-DDA5B595BD44}')") , ], 1 , 1 , 4 , 0 , 1976 , (3, 0, None, None) , 0 , )),
	(( 'GeneralConstraintCollection' , 'ppVal' , ), 513, (513, (), [ (16393, 10, None, "IID('{F63C5479-BE87-431C-963C-DD79C9F33259}')") , ], 1 , 2 , 4 , 0 , 1984 , (3, 0, None, None) , 0 , )),
	(( 'CameraSetting' , 'pVal' , ), 514, (514, (), [ (16393, 10, None, "IID('{0FDF3022-5D98-4409-B16E-716A01915002}')") , ], 1 , 2 , 4 , 0 , 1992 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactGeoSphere' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 515, (515, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (16393, 10, None, "IID('{8B44BA63-1871-4074-863D-1434F7D479B7}')") , ], 1 , 1 , 4 , 0 , 2000 , (3, 0, None, None) , 0 , )),
	(( 'ParametricPointConnectorCollection' , 'ppVal' , ), 516, (516, (), [ (16393, 10, None, "IID('{2BA7F21D-5583-410B-8ABB-6AAE09261D4F}')") , ], 1 , 2 , 4 , 0 , 2008 , (3, 0, None, None) , 0 , )),
	(( 'ParametricValueConnectorCollection' , 'ppVal' , ), 517, (517, (), [ (16393, 10, None, "IID('{25597944-74D4-4F24-8145-CD11FE87BCC8}')") , ], 1 , 2 , 4 , 0 , 2016 , (3, 0, None, None) , 0 , )),
	(( 'DeleteStandAloneNodes' , ), 518, (518, (), [ ], 1 , 1 , 4 , 0 , 2024 , (3, 0, None, None) , 0 , )),
	(( 'ParticleInterface' , 'ppVal' , ), 519, (519, (), [ (16393, 10, None, "IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}')") , ], 1 , 2 , 4 , 0 , 2032 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactGeoCylinder' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 520, (520, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (16393, 10, None, "IID('{8B44BA63-1871-4074-863D-1434F7D479B7}')") , ], 1 , 1 , 4 , 0 , 2040 , (3, 0, None, None) , 0 , )),
	(( 'GManager' , 'ppVal' , ), 521, (521, (), [ (16393, 10, None, "IID('{4E50DC20-53E0-4B65-86B2-E6C6FF8C1A52}')") , ], 1 , 2 , 4 , 0 , 2048 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointCartesianMotionGroup' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 522, (522, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{3B70037A-B51F-46A7-AB2B-971989A06803}')") , ], 1 , 1 , 4 , 0 , 2056 , (3, 0, None, None) , 0 , )),
	(( 'SensorCollection' , 'ppVal' , ), 523, (523, (), [ (16393, 10, None, "IID('{507862D8-28C1-423F-9D91-7BE66F10A6DF}')") , ], 1 , 2 , 4 , 0 , 2064 , (3, 0, None, None) , 0 , )),
	(( 'ImportSubEntity' , 'strFileName' , ), 524, (524, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 2072 , (3, 0, None, None) , 0 , )),
	(( 'ExportSubEntity' , 'strFileName' , ), 525, (525, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 2080 , (3, 0, None, None) , 0 , )),
	(( 'CreateGroupBeamWithPoints' , 'strName' , 'pMultiPoints' , 'bSpline' , 'UseTotalSegment' , 
			 'uiMeshSegment' , 'ppResult' , ), 526, (526, (), [ (8, 1, None, None) , (8204, 1, None, None) , 
			 (11, 1, None, None) , (11, 1, None, None) , (19, 1, None, None) , (16393, 10, None, "IID('{E30FCF4E-CD27-4F1D-B463-B7CD3E2AEF12}')") , ], 1 , 1 , 4 , 0 , 2088 , (3, 0, None, None) , 0 , )),
	(( 'CreateGroupBeamWithCurve' , 'strName' , 'pGeo' , 'UseTotalSegment' , 'uiMeshSegment' , 
			 'ppResult' , ), 528, (528, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}')") , (11, 1, None, None) , 
			 (19, 1, None, None) , (16393, 10, None, "IID('{E30FCF4E-CD27-4F1D-B463-B7CD3E2AEF12}')") , ], 1 , 1 , 4 , 0 , 2096 , (3, 0, None, None) , 0 , )),
	(( 'R2R2DSubSystem' , 'ppVal' , ), 529, (529, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 2104 , (3, 0, None, None) , 0 , )),
	(( 'MergeWithUserInputMass' , 'pTarget' , 'arrSource' , ), 530, (530, (), [ (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (8204, 1, None, None) , ], 1 , 1 , 4 , 0 , 2112 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactGeoCircle' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 531, (531, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (16393, 10, None, "IID('{0BD26902-38C3-4C3F-B2B5-6038996BC174}')") , ], 1 , 1 , 4 , 0 , 2120 , (3, 0, None, None) , 0 , )),
	(( 'ScenarioAnalysisProperty2' , 'ppVal' , ), 532, (532, (), [ (16393, 10, None, "IID('{5FC5751E-20BB-455D-B127-751487DB0768}')") , ], 1 , 2 , 4 , 0 , 2128 , (3, 0, None, None) , 0 , )),
	(( 'ChainSubSystem' , 'ppVal' , ), 533, (533, (), [ (16393, 10, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , ], 1 , 2 , 4 , 0 , 2136 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactGeoCurveToSurface' , 'strName' , 'pBaseSurface' , 'pActionCurve' , 'ppVal' , 
			 ), 534, (534, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (16393, 10, None, "IID('{53B9175B-11B0-4E63-B525-8062109E72D5}')") , ], 1 , 1 , 4 , 0 , 2144 , (3, 0, None, None) , 0 , )),
	(( 'CreateGroupGeneral' , 'strName' , 'arrayEntity' , 'ppVal' , ), 535, (535, (), [ 
			 (8, 1, None, None) , (8204, 1, None, None) , (16393, 10, None, "IID('{3A5D8137-A29F-4A12-BADB-578397A6A582}')") , ], 1 , 1 , 4 , 0 , 2152 , (3, 0, None, None) , 0 , )),
	(( 'UnGroup' , 'pVal' , ), 536, (536, (), [ (9, 1, None, "IID('{3A5D8137-A29F-4A12-BADB-578397A6A582}')") , ], 1 , 1 , 4 , 0 , 2160 , (3, 0, None, None) , 0 , )),
	(( 'MMSToolkit' , 'pVal' , ), 537, (537, (), [ (16393, 10, None, "IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}')") , ], 1 , 2 , 4 , 0 , 2168 , (3, 0, None, None) , 0 , )),
	(( 'FileImportWithCADSetting' , 'strFile' , ), 538, (538, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 2176 , (3, 0, None, None) , 0 , )),
	(( 'ControlGeneralToolkit' , 'ppVal' , ), 539, (539, (), [ (16393, 10, None, "IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}')") , ], 1 , 2 , 4 , 0 , 2184 , (3, 0, None, None) , 0 , )),
	(( 'CreateContactUVSurfaceToSphere' , 'strName' , 'pBaseEntity' , 'pActionEntity' , 'ppVal' , 
			 ), 540, (540, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (16393, 10, None, "IID('{50DC0F54-508C-4B1A-825F-EEF9288B6828}')") , ], 1 , 1 , 4 , 0 , 2192 , (3, 0, None, None) , 0 , )),
	(( 'DeleteUnusedFlexibleMaterialsProperties' , ), 541, (541, (), [ ], 1 , 1 , 4 , 0 , 2200 , (3, 0, None, None) , 0 , )),
	(( 'GroupGeneralCollection' , 'ppVal' , ), 542, (542, (), [ (16393, 10, None, "IID('{20D998FD-D089-43D4-B682-F84D247B6FB2}')") , ], 1 , 2 , 4 , 0 , 2208 , (3, 0, None, None) , 0 , )),
	(( 'AutoDesignToolkit' , 'ppVal' , ), 543, (543, (), [ (16393, 10, None, "IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}')") , ], 1 , 2 , 4 , 0 , 2216 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointPointOnSurface' , 'strName' , 'pBaseSurface' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 544, (544, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{C50A037D-F57E-4236-9597-ED57084B0581}')") , ], 1 , 1 , 4 , 0 , 2224 , (3, 0, None, None) , 0 , )),
	(( 'ExternalSPIToolkit' , 'ppVal' , ), 545, (545, (), [ (16393, 10, None, "IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}')") , ], 1 , 2 , 4 , 0 , 2232 , (3, 0, None, None) , 0 , )),
	(( 'ChangeLayerNumber' , 'uiLayerNo' , ), 546, (546, (), [ (19, 1, None, None) , ], 1 , 1 , 4 , 0 , 2240 , (3, 0, None, None) , 0 , )),
	(( 'DeleteUnusedSubEntities' , ), 547, (547, (), [ ], 1 , 1 , 4 , 0 , 2248 , (3, 0, None, None) , 0 , )),
	(( 'DOE' , 'ppVal' , ), 548, (548, (), [ (16393, 10, None, "IID('{0EECEDE2-6ADD-4945-9061-B3B8D138FC12}')") , ], 1 , 2 , 4 , 0 , 2256 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointOnOffEx' , 'strName' , 'pBaseBody' , 'pActionBody' , 'pBaseRefFrame' , 
			 'pActionRefFrame' , 'ppVal' , ), 549, (549, (), [ (8, 1, None, None) , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (9, 0, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{3509B78D-BB70-4F88-8A48-BA852F3658BE}')") , ], 1 , 1 , 4 , 0 , 2264 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointPointOnCurveEx' , 'strName' , 'pBaseCurve' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 550, (550, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{0D91A8ED-1B56-40C7-8FFB-26542A0F4269}')") , ], 1 , 1 , 4 , 0 , 2272 , (3, 0, None, None) , 0 , )),
	(( 'CreateJointPointOnSurfaceEx' , 'strName' , 'pBaseSurface' , 'pActionBody' , 'pRefFrame' , 
			 'ppVal' , ), 551, (551, (), [ (8, 1, None, None) , (9, 1, None, "IID('{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}')") , (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (9, 1, None, "IID('{6A3295D9-E76B-473C-9655-23B7B1CBD671}')") , (16393, 10, None, "IID('{C50A037D-F57E-4236-9597-ED57084B0581}')") , ], 1 , 1 , 4 , 0 , 2280 , (3, 0, None, None) , 0 , )),
]

ISubSystemCollection_vtables_dispatch_ = 1
ISubSystemCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

ISweepOption_vtables_dispatch_ = 1
ISweepOption_vtables_ = [
	(( 'UseTangent' , 'pVal' , ), 251, (251, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseTangent' , 'pVal' , ), 251, (251, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseFixedAxis' , 'pVal' , ), 252, (252, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseFixedAxis' , 'pVal' , ), 252, (252, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'FixedAxis' , 'pAxis' , ), 253, (253, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'FixedAxis' , 'pAxis' , ), 253, (253, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
]

ITireOutputChannel_vtables_dispatch_ = 1
ITireOutputChannel_vtables_ = [
	(( 'UseAccelerationOfHub' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseAccelerationOfHub' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseDisplacementOfHub' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseDisplacementOfHub' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseVelocityOfHub' , 'pVal' , ), 53, (53, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UseVelocityOfHub' , 'pVal' , ), 53, (53, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseTireContactProperty' , 'pVal' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseTireContactProperty' , 'pVal' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UseSAECoordinateSystem' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseSAECoordinateSystem' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UseFrictionEllipseProperty' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'UseFrictionEllipseProperty' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'UseTireKinematicProperty' , 'pVal' , ), 57, (57, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'UseTireKinematicProperty' , 'pVal' , ), 57, (57, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'UseTireForceAtContactPatch' , 'pVal' , ), 58, (58, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'UseTireForceAtContactPatch' , 'pVal' , ), 58, (58, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UseCamberAngle' , 'pVal' , ), 59, (59, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UseCamberAngle' , 'pVal' , ), 59, (59, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'UseToeAngle' , 'pVal' , ), 60, (60, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'UseToeAngle' , 'pVal' , ), 60, (60, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'LongitudinalMarker' , 'ppVal' , ), 61, (61, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'LongitudinalMarker' , 'ppVal' , ), 61, (61, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'LongitudinalAxis' , 'pVal' , ), 62, (62, (), [ (24581, 10, None, None) , ], 1 , 2 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'LongitudinalAxis' , 'pVal' , ), 62, (62, (), [ (8197, 1, None, None) , ], 1 , 4 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'UseCasterAngle' , 'pVal' , ), 63, (63, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'UseCasterAngle' , 'pVal' , ), 63, (63, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'KingPinActionMarker' , 'ppVal' , ), 64, (64, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'KingPinActionMarker' , 'ppVal' , ), 64, (64, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'KingPinBaseMarker' , 'ppVal' , ), 65, (65, (), [ (9, 1, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 4 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'KingPinBaseMarker' , 'ppVal' , ), 65, (65, (), [ (16393, 10, None, "IID('{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}')") , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
]

ITireProperty_vtables_dispatch_ = 1
ITireProperty_vtables_ = [
	(( 'UnloadedTireRadius' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'CarcassRadius' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'VerticalTireStiffness' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'LongitudinalTireStiffness' , 'ppVal' , ), 54, (54, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'LateralTireStiffnessBySlipAngle' , 'ppVal' , ), 55, (55, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'LateralTireStiffnessByCamberAngle' , 'ppVal' , ), 56, (56, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'RollingResistanceMomentCoefficient' , 'ppVal' , ), 57, (57, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'TireRadialDampingRatio' , 'ppVal' , ), 58, (58, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'FrictionCoefficientAtZeroSlip' , 'ppVal' , ), 59, (59, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'FrictionCoefficientForTheFullSlip' , 'ppVal' , ), 60, (60, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'Import' , 'strFile' , ), 61, (61, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'Export' , 'strFile' , 'OverWrite' , ), 62, (62, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
]

ITireSoilProperty_vtables_dispatch_ = 1
ITireSoilProperty_vtables_ = [
	(( 'SoftSoilModel' , 'slipforce' , ), 51, (51, (), [ (3, 1, None, "IID('{B2030218-F83F-451B-9FB1-A1C47616BED4}')") , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'SoftSoilModel' , 'slipforce' , ), 51, (51, (), [ (16387, 10, None, "IID('{B2030218-F83F-451B-9FB1-A1C47616BED4}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseMultipass' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseMultipass' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'FrontNumber' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'SavedPassLength' , 'ppVal' , ), 54, (54, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'TireWidth' , 'ppVal' , ), 55, (55, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'TireDiameter' , 'ppVal' , ), 56, (56, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'ExponentialNumber' , 'ppVal' , ), 57, (57, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'Cohesion' , 'ppVal' , ), 58, (58, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'ShearingResistanceAngle' , 'ppVal' , ), 59, (59, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'ShearingDeformationModulus' , 'ppVal' , ), 60, (60, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'SinkageRatio' , 'ppVal' , ), 61, (61, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'SoilStiffness_kc' , 'ppVal' , ), 62, (62, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'SoilStiffness_khpi' , 'ppVal' , ), 63, (63, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'SoilStaticStiffness' , 'ppVal' , ), 64, (64, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'SoilDynamicStiffness' , 'ppVal' , ), 65, (65, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'SinkageVelocityExponent' , 'ppVal' , ), 66, (66, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'Epsilon' , 'ppVal' , ), 67, (67, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'AA' , 'ppVal' , ), 68, (68, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'BB' , 'ppVal' , ), 69, (69, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'Import' , 'strFile' , ), 70, (70, (), [ (8, 1, None, None) , ], 1 , 1 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'Export' , 'strFile' , 'OverWrite' , ), 71, (71, (), [ (8, 1, None, None) , 
			 (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
]

IToolbar_vtables_dispatch_ = 1
IToolbar_vtables_ = [
	(( 'SetVisible' , 'Val' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'InsertMenuControl' , 'pControl' , ), 52, (52, (), [ (9, 1, None, "IID('{B2F1CBE0-707D-4E0B-B080-546D4664CA2F}')") , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'AddMenuControl' , 'Type' , 'nId' , 'ppVal' , ), 53, (53, (), [ 
			 (3, 1, None, "IID('{66FF20E6-6D20-41E0-A180-C51C955F4367}')") , (3, 1, None, None) , (16393, 10, None, "IID('{B2F1CBE0-707D-4E0B-B080-546D4664CA2F}')") , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'GetMenuControl' , 'Index' , 'ppControl' , ), 54, (54, (), [ (19, 1, None, None) , 
			 (16393, 10, None, "IID('{B2F1CBE0-707D-4E0B-B080-546D4664CA2F}')") , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'MenuControlCount' , 'pVal' , ), 55, (55, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'Caption' , 'pVal' , ), 56, (56, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'Caption' , 'pVal' , ), 56, (56, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'ID' , 'pVal' , ), 57, (57, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'ID' , 'pVal' , ), 57, (57, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'Position' , 'pVal' , ), 58, (58, (), [ (16387, 10, None, "IID('{2CEF22B0-D838-45E9-856F-D57AABCCDD20}')") , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'Position' , 'pVal' , ), 58, (58, (), [ (3, 1, None, "IID('{2CEF22B0-D838-45E9-856F-D57AABCCDD20}')") , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
]

IToolbarManager_vtables_dispatch_ = 1
IToolbarManager_vtables_ = [
	(( 'AddToolbar' , 'szCaption' , 'ppVal' , ), 51, (51, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{E7C5258C-4AED-43E9-860F-877BF7B1F153}')") , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'FindToolbar' , 'Caption' , 'ppVal' , ), 52, (52, (), [ (8, 1, None, None) , 
			 (16393, 10, None, "IID('{E7C5258C-4AED-43E9-860F-877BF7B1F153}')") , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'FindToolbarByID' , 'idToolbar' , 'ppVal' , ), 53, (53, (), [ (19, 1, None, None) , 
			 (16393, 10, None, "IID('{E7C5258C-4AED-43E9-860F-877BF7B1F153}')") , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'FindToolbarByIndex' , 'Index' , 'ppVal' , ), 54, (54, (), [ (19, 1, None, None) , 
			 (16393, 10, None, "IID('{E7C5258C-4AED-43E9-860F-877BF7B1F153}')") , ], 1 , 1 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'ToolbarCount' , 'pVal' , ), 55, (55, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'MoveToolbarRight' , 'pToolbarOnLeft' , 'pToolbarMove' , ), 56, (56, (), [ (9, 1, None, "IID('{E7C5258C-4AED-43E9-860F-877BF7B1F153}')") , 
			 (9, 1, None, "IID('{E7C5258C-4AED-43E9-860F-877BF7B1F153}')") , ], 1 , 1 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
]

IToolkit_vtables_dispatch_ = 1
IToolkit_vtables_ = [
]

ITranslatorExportOptions_vtables_dispatch_ = 1
ITranslatorExportOptions_vtables_ = [
	(( 'UseTranslateFreeCurveForCATIA' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeCurveForCATIA' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeSurfacesForCATIA' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeSurfacesForCATIA' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UseDisableHybridBodyForCATIA' , 'pVal' , ), 53, (53, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UseDisableHybridBodyForCATIA' , 'pVal' , ), 53, (53, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'VersionForCATIA' , 'pVal' , ), 54, (54, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'VersionForCATIA' , 'pVal' , ), 54, (54, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeCurveForACIS' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeCurveForACIS' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeSurfacesForACIS' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeSurfacesForACIS' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'VersionForACIS' , 'pVal' , ), 57, (57, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'VersionForACIS' , 'pVal' , ), 57, (57, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeCurveForIGES' , 'pVal' , ), 58, (58, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeCurveForIGES' , 'pVal' , ), 58, (58, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeSurfacesForIGES' , 'pVal' , ), 59, (59, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeSurfacesForIGES' , 'pVal' , ), 59, (59, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'VersionForParasolid' , 'pVal' , ), 60, (60, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'VersionForParasolid' , 'pVal' , ), 60, (60, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
]

ITranslatorImportOptions_vtables_dispatch_ = 1
ITranslatorImportOptions_vtables_ = [
	(( 'UseHealingOptionForCATIA' , 'pVal' , ), 51, (51, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UseHealingOptionForCATIA' , 'pVal' , ), 51, (51, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UseSolidAsSheetForCATIA' , 'pVal' , ), 52, (52, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UseSolidAsSheetForCATIA' , 'pVal' , ), 52, (52, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'AssemblyOptionForCATIA' , 'pVal' , ), 53, (53, (), [ (3, 1, None, "IID('{3FCF662A-AABA-49AE-966E-99F07E9C1F9C}')") , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'AssemblyOptionForCATIA' , 'pVal' , ), 53, (53, (), [ (16387, 10, None, "IID('{3FCF662A-AABA-49AE-966E-99F07E9C1F9C}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeCurveForCATIA' , 'pVal' , ), 54, (54, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeCurveForCATIA' , 'pVal' , ), 54, (54, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeSurfacesForCATIA' , 'pVal' , ), 55, (55, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeSurfacesForCATIA' , 'pVal' , ), 55, (55, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'ConvertFreePointToMarkerForCATIA' , 'pVal' , ), 56, (56, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'ConvertFreePointToMarkerForCATIA' , 'pVal' , ), 56, (56, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'UseHealingOptionForACIS' , 'pVal' , ), 57, (57, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'UseHealingOptionForACIS' , 'pVal' , ), 57, (57, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeCurveForACIS' , 'pVal' , ), 58, (58, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeCurveForACIS' , 'pVal' , ), 58, (58, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeSurfacesForACIS' , 'pVal' , ), 59, (59, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeSurfacesForACIS' , 'pVal' , ), 59, (59, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'ConvertFreePointToMarkerForACIS' , 'pVal' , ), 60, (60, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'ConvertFreePointToMarkerForACIS' , 'pVal' , ), 60, (60, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'UseHealingOptionForIGES' , 'pVal' , ), 61, (61, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'UseHealingOptionForIGES' , 'pVal' , ), 61, (61, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeCurveForIGES' , 'pVal' , ), 62, (62, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeCurveForIGES' , 'pVal' , ), 62, (62, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeSurfacesForIGES' , 'pVal' , ), 63, (63, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeSurfacesForIGES' , 'pVal' , ), 63, (63, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'ConvertFreePointToMarkerForIGES' , 'pVal' , ), 64, (64, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'ConvertFreePointToMarkerForIGES' , 'pVal' , ), 64, (64, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'UseHealingOptionForProE' , 'pVal' , ), 65, (65, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'UseHealingOptionForProE' , 'pVal' , ), 65, (65, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeCurveForProE' , 'pVal' , ), 66, (66, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeCurveForProE' , 'pVal' , ), 66, (66, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'UseHealingOptionForNX' , 'pVal' , ), 67, (67, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'UseHealingOptionForNX' , 'pVal' , ), 67, (67, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeCurveForNX' , 'pVal' , ), 68, (68, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'UseTranslateFreeCurveForNX' , 'pVal' , ), 68, (68, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'ConvertFreePointToMarkerForNX' , 'pVal' , ), 69, (69, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
	(( 'ConvertFreePointToMarkerForNX' , 'pVal' , ), 69, (69, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 352 , (3, 0, None, None) , 0 , )),
	(( 'UseHealingOptionForSolidWorks' , 'pVal' , ), 70, (70, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 360 , (3, 0, None, None) , 0 , )),
	(( 'UseHealingOptionForSolidWorks' , 'pVal' , ), 70, (70, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 368 , (3, 0, None, None) , 0 , )),
	(( 'UseHealingBodyForSTEP' , 'pVal' , ), 71, (71, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 376 , (3, 0, None, None) , 0 , )),
	(( 'UseHealingBodyForSTEP' , 'pVal' , ), 71, (71, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 384 , (3, 0, None, None) , 0 , )),
	(( 'UseSolidTrimForSTEP' , 'pVal' , ), 72, (72, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 392 , (3, 0, None, None) , 0 , )),
	(( 'UseSolidTrimForSTEP' , 'pVal' , ), 72, (72, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 400 , (3, 0, None, None) , 0 , )),
]

IUnit_vtables_dispatch_ = 1
IUnit_vtables_ = [
	(( 'UnitForce' , 'pVal' , ), 51, (51, (), [ (3, 1, None, "IID('{8C66CBBE-8A50-4CE2-864E-91F55768E45B}')") , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'UnitForce' , 'pVal' , ), 51, (51, (), [ (16387, 10, None, "IID('{8C66CBBE-8A50-4CE2-864E-91F55768E45B}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'UnitMass' , 'pVal' , ), 52, (52, (), [ (3, 1, None, "IID('{56D9C80E-54A0-4234-A64E-9F699B21E136}')") , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'UnitMass' , 'pVal' , ), 52, (52, (), [ (16387, 10, None, "IID('{56D9C80E-54A0-4234-A64E-9F699B21E136}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'UnitLength' , 'pVal' , ), 53, (53, (), [ (3, 1, None, "IID('{1E0862C7-F075-4FD6-AF05-C630E38459C4}')") , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'UnitLength' , 'pVal' , ), 53, (53, (), [ (16387, 10, None, "IID('{1E0862C7-F075-4FD6-AF05-C630E38459C4}')") , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UnitTime' , 'pVal' , ), 54, (54, (), [ (3, 1, None, "IID('{D2152896-DBCC-46C8-A2C0-3C62D5AACD75}')") , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UnitTime' , 'pVal' , ), 54, (54, (), [ (16387, 10, None, "IID('{D2152896-DBCC-46C8-A2C0-3C62D5AACD75}')") , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UnitAngle' , 'pVal' , ), 55, (55, (), [ (3, 1, None, "IID('{D2152896-DBCC-46C8-A2C0-3C62D5AACD76}')") , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UnitAngle' , 'pVal' , ), 55, (55, (), [ (16387, 10, None, "IID('{D2152896-DBCC-46C8-A2C0-3C62D5AACD76}')") , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'UnitSystem' , ), 56, (56, (), [ (3, 1, None, "IID('{1E42DFD6-BB2A-4607-AE20-0A88EA8EC9A0}')") , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
]

IUserSubroutine_vtables_dispatch_ = 1
IUserSubroutine_vtables_ = [
	(( 'UserParameter' , 'pVal' , ), 151, (151, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'UserParameter' , 'pVal' , ), 151, (151, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'DllFileName' , 'pVal' , ), 152, (152, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'DllFileName' , 'pVal' , ), 152, (152, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'Arguments' , 'ppSafeArray' , ), 153, (153, (), [ (8200, 1, None, None) , ], 1 , 4 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Arguments' , 'ppSafeArray' , ), 153, (153, (), [ (24584, 10, None, None) , ], 1 , 2 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
]

IUserSubroutineCollection_vtables_dispatch_ = 1
IUserSubroutineCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IUtility_vtables_dispatch_ = 1
IUtility_vtables_ = [
	(( 'ObjectControl' , 'ppVal' , ), 51, (51, (), [ (16393, 10, None, "IID('{21BE44B2-CA0C-4C78-8EB3-B3CA8BDE0726}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Measure' , 'ppVal' , ), 52, (52, (), [ (16393, 10, None, "IID('{50C894D7-EA63-455B-B693-E9AF8A66E7CB}')") , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'CuttingPlane' , 'ppVal' , ), 53, (53, (), [ (16393, 10, None, "IID('{47FC98DE-E7C5-46F0-B2C3-4FAB19AA38AB}')") , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'Pattern' , 'ppVal' , ), 54, (54, (), [ (16393, 10, None, "IID('{23C82686-D1A0-4821-B9EE-F8D0CA03DF32}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'RelationMap' , 'ppVal' , ), 55, (55, (), [ (16393, 10, None, "IID('{5A99CECC-EA9D-4687-8156-FF398A176E63}')") , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
]

IVariableEquation_vtables_dispatch_ = 1
IVariableEquation_vtables_ = [
	(( 'Active' , 'pVal' , ), 151, (151, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'Active' , 'pVal' , ), 151, (151, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialCondition' , 'pVal' , ), 152, (152, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'UseInitialCondition' , 'pVal' , ), 152, (152, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'InitialCondition' , 'Value' , ), 153, (153, (), [ (16393, 10, None, "IID('{2B5166E3-4B31-4607-B157-BE237A670336}')") , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 154, (154, (), [ (3, 1, None, "IID('{A79AFF6F-883F-4763-A44B-1879ECC74AFD}')") , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'Type' , 'pVal' , ), 154, (154, (), [ (16387, 10, None, "IID('{A79AFF6F-883F-4763-A44B-1879ECC74AFD}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 155, (155, (), [ (9, 1, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'UserSubroutine' , 'ppVal' , ), 155, (155, (), [ (16393, 10, None, "IID('{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}')") , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'ppVal' , ), 156, (156, (), [ (9, 1, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'Expression' , 'ppVal' , ), 156, (156, (), [ (16393, 10, None, "IID('{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}')") , ], 1 , 2 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
]

IVariableEquationCollection_vtables_dispatch_ = 1
IVariableEquationCollection_vtables_ = [
	(( 'Item' , 'var' , 'ppVal' , ), 0, (0, (), [ (12, 1, None, None) , 
			 (16393, 10, None, "IID('{1ECE0007-85A7-4F9B-AD9E-FEE2684A398E}')") , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'Count' , 'pVal' , ), 1, (1, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( '_NewEnum' , 'ppEnum' , ), -4, (-4, (), [ (16397, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 1 , )),
]

IVector_vtables_dispatch_ = 1
IVector_vtables_ = [
	(( 'x' , 'pVal' , ), 51, (51, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'x' , 'pVal' , ), 51, (51, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'y' , 'pVal' , ), 52, (52, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'y' , 'pVal' , ), 52, (52, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'z' , 'pVal' , ), 53, (53, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'z' , 'pVal' , ), 53, (53, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'ParametricPoint' , 'ppVal' , ), 54, (54, (), [ (9, 1, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'ParametricPoint' , 'ppVal' , ), 54, (54, (), [ (16393, 10, None, "IID('{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}')") , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
]

IWorkingPlane_vtables_dispatch_ = 1
IWorkingPlane_vtables_ = [
	(( 'AlignWithFace' , 'pVal' , ), 51, (51, (), [ (9, 1, None, "IID('{C5D7538F-B727-4D10-9D7D-D743D92ACAB4}')") , ], 1 , 1 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'AlignWithPlane' , 'pEntity' , 'PlaneType' , ), 52, (52, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (3, 1, None, "IID('{49CE6939-E9AC-4DA4-AEB0-1778F7CD0E53}')") , ], 1 , 1 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'Offset' , 'pVal' , ), 53, (53, (), [ (5, 1, None, None) , ], 1 , 1 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'GridType' , 'pVal' , ), 54, (54, (), [ (16387, 10, None, "IID('{27F9291D-CC9B-4F85-B76B-B7A48A9DE3FF}')") , ], 1 , 2 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'GridType' , 'pVal' , ), 54, (54, (), [ (3, 1, None, "IID('{27F9291D-CC9B-4F85-B76B-B7A48A9DE3FF}')") , ], 1 , 4 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'GridWidth' , 'pVal' , ), 55, (55, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'GridWidth' , 'pVal' , ), 55, (55, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'GridHeight' , 'pVal' , ), 56, (56, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'GridHeight' , 'pVal' , ), 56, (56, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'GridRadius' , 'pVal' , ), 57, (57, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'GridRadius' , 'pVal' , ), 57, (57, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'GridAngle' , 'pVal' , ), 58, (58, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'GridAngle' , 'pVal' , ), 58, (58, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfGridSegments' , 'pVal' , ), 59, (59, (), [ (16387, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
	(( 'NumberOfGridSegments' , 'pVal' , ), 59, (59, (), [ (3, 1, None, None) , ], 1 , 4 , 4 , 0 , 168 , (3, 0, None, None) , 0 , )),
	(( 'GridThickness' , 'pVal' , ), 60, (60, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 176 , (3, 0, None, None) , 0 , )),
	(( 'GridThickness' , 'pVal' , ), 60, (60, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 184 , (3, 0, None, None) , 0 , )),
	(( 'GridShape' , 'pVal' , ), 61, (61, (), [ (16387, 10, None, "IID('{F0386531-8654-4FEA-A94B-EE8EC6ECAF75}')") , ], 1 , 2 , 4 , 0 , 192 , (3, 0, None, None) , 0 , )),
	(( 'GridShape' , 'pVal' , ), 61, (61, (), [ (3, 1, None, "IID('{F0386531-8654-4FEA-A94B-EE8EC6ECAF75}')") , ], 1 , 4 , 4 , 0 , 200 , (3, 0, None, None) , 0 , )),
	(( 'GridColor' , 'pVal' , ), 62, (62, (), [ (16403, 10, None, None) , ], 1 , 2 , 4 , 0 , 208 , (3, 0, None, None) , 0 , )),
	(( 'GridColor' , 'pVal' , ), 62, (62, (), [ (19, 1, None, None) , ], 1 , 4 , 4 , 0 , 216 , (3, 0, None, None) , 0 , )),
	(( 'Update' , ), 63, (63, (), [ ], 1 , 1 , 4 , 0 , 224 , (3, 0, None, None) , 0 , )),
	(( 'AlignWithFace2' , 'pVal' , ), 64, (64, (), [ (9, 1, None, "IID('{C5D7538F-B727-4D10-9D7D-D743D92ACAB4}')") , ], 1 , 1 , 4 , 0 , 232 , (3, 0, None, None) , 0 , )),
	(( 'AlignWithPlane2' , 'pEntity' , 'PlaneType' , ), 65, (65, (), [ (9, 1, None, "IID('{27A86788-8B85-40CF-BE7F-BA915103A7DB}')") , 
			 (3, 1, None, "IID('{49CE6939-E9AC-4DA4-AEB0-1778F7CD0E53}')") , ], 1 , 1 , 4 , 0 , 240 , (3, 0, None, None) , 0 , )),
	(( 'GridWidth2' , 'pVal' , ), 66, (66, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 248 , (3, 0, None, None) , 0 , )),
	(( 'GridWidth2' , 'pVal' , ), 66, (66, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 256 , (3, 0, None, None) , 0 , )),
	(( 'GridHeight2' , 'pVal' , ), 67, (67, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 264 , (3, 0, None, None) , 0 , )),
	(( 'GridHeight2' , 'pVal' , ), 67, (67, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 272 , (3, 0, None, None) , 0 , )),
	(( 'GridRadius2' , 'pVal' , ), 68, (68, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 280 , (3, 0, None, None) , 0 , )),
	(( 'GridRadius2' , 'pVal' , ), 68, (68, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 288 , (3, 0, None, None) , 0 , )),
	(( 'GridAngle2' , 'pVal' , ), 69, (69, (), [ (16389, 10, None, None) , ], 1 , 2 , 4 , 0 , 296 , (3, 0, None, None) , 0 , )),
	(( 'GridAngle2' , 'pVal' , ), 69, (69, (), [ (5, 1, None, None) , ], 1 , 4 , 4 , 0 , 304 , (3, 0, None, None) , 0 , )),
	(( 'Apply' , ), 70, (70, (), [ ], 1 , 1 , 4 , 0 , 312 , (3, 0, None, None) , 0 , )),
	(( 'GetEulerAngle' , 'Type' , 'ppSafeArray' , ), 71, (71, (), [ (3, 1, None, "IID('{A952E8B8-4277-4459-8636-46BE3982535C}')") , 
			 (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 320 , (3, 0, None, None) , 0 , )),
	(( 'SetEulerAngle' , 'Type' , 'pSafeArray' , ), 72, (72, (), [ (3, 1, None, "IID('{A952E8B8-4277-4459-8636-46BE3982535C}')") , 
			 (8197, 1, None, None) , ], 1 , 1 , 4 , 0 , 328 , (3, 0, None, None) , 0 , )),
	(( 'GetPosition' , 'ppSafeArray' , ), 73, (73, (), [ (24581, 10, None, None) , ], 1 , 1 , 4 , 0 , 336 , (3, 0, None, None) , 0 , )),
	(( 'SetPosition' , 'pSafeArray' , ), 74, (74, (), [ (8197, 1, None, None) , ], 1 , 1 , 4 , 0 , 344 , (3, 0, None, None) , 0 , )),
]

IeTemplate_vtables_dispatch_ = 1
IeTemplate_vtables_ = [
	(( 'TemplatePath' , 'pVal' , ), 101, (101, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 56 , (3, 0, None, None) , 0 , )),
	(( 'TemplatePath' , 'pVal' , ), 101, (101, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 64 , (3, 0, None, None) , 0 , )),
	(( 'TargetSubsystemName' , 'pVal' , ), 102, (102, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 72 , (3, 0, None, None) , 0 , )),
	(( 'TargetSubsystemName' , 'pVal' , ), 102, (102, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 80 , (3, 0, None, None) , 0 , )),
	(( 'TemplatePathForModificationMode' , 'ppVal' , ), 103, (103, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 88 , (3, 0, None, None) , 0 , )),
	(( 'TemplatePathForModificationMode' , 'ppVal' , ), 103, (103, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 96 , (3, 0, None, None) , 0 , )),
	(( 'UseKeepConnectionModificationTemplateFile' , 'pVal' , ), 104, (104, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 104 , (3, 0, None, None) , 0 , )),
	(( 'UseKeepConnectionModificationTemplateFile' , 'pVal' , ), 104, (104, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 112 , (3, 0, None, None) , 0 , )),
	(( 'UseShowModificationUIWhenTemplateFileIsClosed' , 'pVal' , ), 105, (105, (), [ (16395, 10, None, None) , ], 1 , 2 , 4 , 0 , 120 , (3, 0, None, None) , 0 , )),
	(( 'UseShowModificationUIWhenTemplateFileIsClosed' , 'pVal' , ), 105, (105, (), [ (11, 1, None, None) , ], 1 , 4 , 4 , 0 , 128 , (3, 0, None, None) , 0 , )),
	(( 'TargetModelForModificationMode' , 'pVal' , ), 106, (106, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 136 , (3, 0, None, None) , 0 , )),
	(( 'TargetModelForModificationMode' , 'pVal' , ), 106, (106, (), [ (8, 1, None, None) , ], 1 , 4 , 4 , 0 , 144 , (3, 0, None, None) , 0 , )),
	(( 'LicenseType' , 'pVal' , ), 107, (107, (), [ (16387, 10, None, "IID('{5802A38C-F496-487E-A6BD-194D24CFC28F}')") , ], 1 , 2 , 4 , 0 , 152 , (3, 0, None, None) , 0 , )),
	(( 'StartupFilePathName' , 'pVal' , ), 108, (108, (), [ (16392, 10, None, None) , ], 1 , 2 , 4 , 0 , 160 , (3, 0, None, None) , 0 , )),
]

RecordMap = {
}

CLSIDToClassMap = {
	'{0E72DCBC-60DD-495E-B067-85BA9DDC18BB}' : IApplication,
	'{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}' : IModelDocument,
	'{27A86788-8B85-40CF-BE7F-BA915103A7DB}' : IGeneric,
	'{E4EEC972-0593-48B2-A1C7-551AD072EFD8}' : IGenericBase,
	'{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}' : ISubSystem,
	'{6A3295D9-E76B-473C-9655-23B7B1CBD671}' : IReferenceFrame,
	'{918CAF9A-7A62-4EC4-B45D-C259C997B661}' : IVector,
	'{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}' : IParametricPoint,
	'{2B5166E3-4B31-4607-B157-BE237A670336}' : IDouble,
	'{3EEED3CE-62E8-4882-AAE6-4812B49927B5}' : IParametricValue,
	'{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}' : IMarker,
	'{A2FF24EE-9333-4BFF-9DC3-27E495B46ACD}' : IMarkerFFlexData,
	'{A2FF24EE-9333-4BFF-9DC3-17E496B46ACD}' : IMarkerRFlexData,
	'{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}' : IBody,
	'{4C8B7C23-7D92-4D39-B530-5D93DC97F771}' : IGraphicProperty,
	'{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}' : IMaterialProperty,
	'{5810C7E4-F627-4171-9D64-4BC97F14BB8E}' : IGeometryCylinder,
	'{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}' : IGeometrySolid,
	'{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}' : IGeometry,
	'{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}' : IGraphicPropertyGeometry,
	'{7B6155CC-0035-4449-9748-DFCE0956F5D9}' : IGeometryBox,
	'{2122DEE7-EE07-4A20-9B49-5A9AF4599906}' : IGeometrySphere,
	'{92A1D6C1-1B9F-4A5A-AA3E-164073FAA5FB}' : IGeometryTorus,
	'{CD73C8BF-C8F4-451C-BE3F-E7E06BA247FD}' : IGeometryPrism,
	'{1A304704-02AE-4939-8CD1-0DBCDE3F526B}' : IGeometryCone,
	'{AD48AFB0-D8CA-4168-B727-A352242BDFEE}' : IGeometryLink,
	'{4B132713-20F9-475D-B175-CED5735E2825}' : IGeometryCircle,
	'{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}' : IGeometryWire,
	'{159B4280-8FD8-4847-884B-84EC26F963FA}' : IGeometrySpline,
	'{6BEF9B6B-4708-445E-A3B5-0D65BA69F749}' : IPointCollection,
	'{31C17D32-0501-4F95-96DC-5ED97F6994A6}' : IGeometryOutline,
	'{6615A98C-4753-43E7-BFC6-D7E2EC7D1737}' : IGeometryArc,
	'{7DD7CE3F-EAC8-4324-9107-C4EDFF055B1C}' : IAnimationDataScaling,
	'{E1DCC3EC-B388-4C1D-855E-7286FDDB492D}' : IAnimationDataScalingBase,
	'{CC8BC813-F31C-4B25-A652-7B110AF60394}' : IGeometrySplineSurface,
	'{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}' : IGeometrySheet,
	'{733031A0-28F6-4064-9C40-FDC74CFA015E}' : IGeometryOutlineSurface,
	'{6BEF9B6B-4708-445E-A3B5-0D65BA69F748}' : IMarkerCollection,
	'{2B270F9A-2704-448E-809B-7B2B30ACEA84}' : IGeometryWireCollection,
	'{5E8000B9-06C7-46B2-A736-5D43904C8878}' : IGeometrySheetCollection,
	'{DB55951D-F238-46D3-9C25-7B4B87F34D36}' : IGeometrySolidCollection,
	'{F7EEC6D6-7358-4316-AFEC-3457934B08F8}' : IGeometrySheetExtrude,
	'{E14CE330-FB54-47C9-A917-4D1854365E86}' : IGeometrySolidExtrude,
	'{952BEF3F-0EA1-4F2B-9EA4-5214261533D2}' : IGeometrySheetSpin,
	'{431767A5-5F84-411B-9BB4-E4B9EA14BBC4}' : IGeometrySolidSpin,
	'{1820726B-54D0-4A1F-AEAB-284DEC6C1270}' : IGeometrySheetSweep,
	'{FC825EA8-559A-4A73-9261-7EA500EC7CAB}' : IGeometrySolidSweep,
	'{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}' : IRoadData,
	'{65267578-7015-4BB5-BB65-F5F81CCEA244}' : IParametricPointCollection,
	'{65267578-7015-4BB5-BB65-F5F81CCEA245}' : IParametricValueCollection,
	'{CC63D830-4DFB-4DFC-920E-966E02DCCE51}' : IGeometryArcRevolution,
	'{7338A8FC-4CD7-472D-B764-578B96254856}' : IGeometryArcExtrusion,
	'{68A5A87D-7640-4F09-8D24-945200D2DB33}' : IRoadDataCollection,
	'{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}' : IGRoad,
	'{295776CE-69C8-4B65-800F-F458E26F7BA1}' : IGRoadCreationOption,
	'{C6162712-FA98-4EF1-8B94-E326943E0626}' : IGeometryShellCollection,
	'{1E1952F0-7A7C-453F-BB98-38A23BAE1312}' : IGeometryShell,
	'{8AE3FA68-8066-412B-A1C9-9B360E8AFA35}' : IGRoadCollection,
	'{A376DBCC-6EA1-4170-97B7-7208ECE52A76}' : IGeometryFaceSurface,
	'{6FA36EFD-91A9-49CF-AC3F-595F8CDCD6AD}' : IGeometryEdgeCurve,
	'{C5D7538F-B727-4D10-9D7D-D743D92ACAB4}' : IGeometryFace,
	'{263D2898-9FED-4649-9CF5-8D043CC759A2}' : IGeometryEdge,
	'{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}' : IPoint3D,
	'{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}' : IGenericCollection,
	'{0FFFB2FB-E83D-431E-8769-1FCFDFBC6BD5}' : IGeometryHelixCurve,
	'{5099BF4D-2B9E-405B-A041-3D4760AE1AA9}' : ISweepOption,
	'{7E1C6724-070E-41D1-A9F7-B771847EB47D}' : IGeometrySolidChamfer,
	'{8FCE6A87-0E72-4BE8-89FB-3C074B7A50C5}' : IChamferEdgeInfoCollection,
	'{5503036B-EDA8-4408-B446-1931B03AA62E}' : IChamferEdgeInfo,
	'{C760B0C7-18A0-463E-BC13-07F6B3931B32}' : IGeometryEdgeCollection,
	'{409CE2D0-68BC-48D0-A001-6606020E41A6}' : IGeometrySolidFillet,
	'{573236E5-A4B3-42F2-A7A6-78D9F953BFC8}' : IFilletEdgeInfoCollection,
	'{5B71FC46-F5BB-4F40-B7D6-2D4CC543C7CF}' : IFilletEdgeInfo,
	'{93D1E2EB-3542-44C8-8EC3-C0E1653B6788}' : IGeometrySolidShell,
	'{B5FF572C-A887-464A-8C86-0E92F1ED744F}' : IGeometryFaceCollection,
	'{4F28E7D4-55B5-4398-8AB5-B7586AE44EDE}' : IShellOffsetFaceInfoCollection,
	'{43AE7027-38BD-4D92-B4BC-5567F9078524}' : IShellOffsetFaceInfo,
	'{4F1C59D0-B6B4-43F8-8CBC-7253AB041F42}' : IGeometrySolidBoolean,
	'{48DE281A-8619-46F6-BAA5-3A429A0AF97E}' : IImprintEdgeOption,
	'{D8018357-9575-4F97-8419-1014B23B06C5}' : IFillHoleOption,
	'{ED1BD483-9372-48BA-BBC2-AC349EB1C6F3}' : IGeometrySheetUVSurface,
	'{E7F5FA95-8A22-45D7-AA32-2C4499D519A2}' : IMFTireImportOption,
	'{9D220527-04EE-4578-9457-4C2061D099E7}' : IEulerAngle,
	'{262F564D-8707-4A0E-806C-D9FB21F59324}' : IGraphicPropertySubSystem,
	'{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}' : IJointRevolute,
	'{B9173DAD-05DD-4037-9367-726DDDEE988E}' : IJoint,
	'{27A86788-8B85-40CF-BE7F-BA915103A7DD}' : IConnectorAttribute,
	'{27A86788-8B85-40CF-BE7F-BA915103A7DC}' : IGenericAttribute,
	'{47F4E55C-4291-4251-866A-98A74112D266}' : IMotion,
	'{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}' : IExpression,
	'{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}' : IUserSubroutine,
	'{C654350F-C53C-474B-84B2-BC299BEA04F2}' : IJointRevoluteFrictionWithoutStiction,
	'{405F5B7F-682D-40AB-B9CC-5E09AAC8BF83}' : IJointFrictionWithoutStiction,
	'{CDA07E89-2140-42DA-A007-75583AA575E5}' : IJointRevoluteFriction,
	'{BE02BB82-F407-44ED-B185-CA270C5842A0}' : IJointFriction,
	'{07101FE1-4B6A-41CA-9FC7-3C48C9E96785}' : IJointTranslational,
	'{3292939F-35E3-469F-A8AE-7F9234326B1E}' : IJointTranslationalFrictionWithoutStiction,
	'{731EF6BF-6DC5-4959-84E0-1EE7C685A1CE}' : IJointTranslationalFriction,
	'{206C4CC5-E70A-4F3C-A4FD-2D6B2EEE1F5C}' : IJointSpherical,
	'{199E4653-210A-455C-96DA-27DF86C5DA3E}' : IJointSphericalFriction,
	'{D89EE062-1A3F-4FE7-915C-8A7D7F4792F0}' : IJointCylindrical,
	'{AB2E1933-9D6C-4FD7-BCA5-BA0D2EC0DD3D}' : IJointCylindricalFriction,
	'{04E99CDC-64B1-42F2-B981-EC91848B39F6}' : IJointUniversal,
	'{CCE1F47D-59F6-428E-91D7-65F36D446B05}' : IJointUniversalFriction,
	'{773D31B3-5540-4497-BDCA-D37CCC40E156}' : IJointPlanar,
	'{95F6FC38-9D37-4059-8037-EFF038F04EA5}' : IJointPlanarFriction,
	'{B6C04DD4-89BA-4A08-9071-9AACD3E4C0F9}' : IJointScrew,
	'{990B9133-FDB7-45DB-8398-8297BC724D91}' : IJointScrewFriction,
	'{2EA33375-B6DB-4F9D-A3B3-B86A2C91BEDA}' : IJointFixed,
	'{2ED808B6-A890-4694-A37C-E8E2E44BCD41}' : IJointDistance,
	'{ADED6BDA-80A4-4D1E-824C-A999B0402A7B}' : IJointAtpoint,
	'{002ECEBC-0D7D-40DE-9F2C-D6F88E5511C6}' : IJointInline,
	'{C3E0D80D-8C4D-4DA8-9206-5A7A83435267}' : IJointInplane,
	'{B47415D4-8717-42A3-9F74-965184E44C73}' : IJointInplaneFriction,
	'{92F68679-E702-4BF4-B969-546E11BECC63}' : IJointOrientation,
	'{54101676-0190-44F2-837F-2CFAFB8A11D2}' : IJointParallel,
	'{40F4819B-5A72-4CFE-9F7E-1695A1B677C7}' : IJointPerpendicular,
	'{0D91A8ED-1B56-40C7-8FFB-26542A0F4269}' : IJointPointOnCurve,
	'{7568D19B-7019-4ABF-A18C-D41C8C39E7CE}' : IMotionPointOnCurve,
	'{8EFA806E-0CE1-406E-B3FA-E2CAFB1D3308}' : IJointPointOnCurveFriction,
	'{C86088A5-C799-4E35-B0F6-78D60243C544}' : IConstraintCurveSegmentOption,
	'{6BFD6484-AB37-4091-B840-C453D24051CC}' : IJointCurveOnCurve,
	'{F6D08556-99B4-4761-89E0-D33956DF5776}' : IJointConstantVelocity,
	'{842283CC-9684-472C-B061-E5659014C471}' : IPairConstraintCoupler,
	'{E53E6E5E-C0B7-4F3F-9E32-30F47855CD70}' : IPairConstraint,
	'{D56837DF-B61D-4938-A25D-02A0B67193C8}' : IPairConstraintGear,
	'{57A77C2D-5956-4DBE-9893-820E0EA5D034}' : IJointCartesianMotion,
	'{3509B78D-BB70-4F88-8A48-BA852F3658BE}' : IJointOnOff,
	'{164BA461-0C9B-4F07-A027-C82298891823}' : IForceSpring,
	'{EB73DE47-2BB8-46BD-A904-F61BCBC59D1F}' : IForce,
	'{61C55C33-4716-4D26-8030-F9D29ED8B413}' : IForceSpringGraphic,
	'{50844B7B-2D6F-4A4B-AF50-AA5AEF747EC7}' : IForceGraphic,
	'{07D4A7FC-5B11-4E7D-B805-4B32646009AC}' : ICoefficient,
	'{E76144D2-715D-41B4-A432-7B6C7F713FC2}' : ISpline,
	'{960E870B-7C56-4FF5-95DE-E735C751F8E7}' : IForceAxial,
	'{F82CE83C-C5A5-42AC-867F-079BCF051FEA}' : IForceTranslational,
	'{52BFD3CF-4CC9-4ECE-9B8C-E7A28EF9D4A2}' : IForceRotational,
	'{D996544C-0967-4920-83A6-A3C9FB97E153}' : IForceScrew,
	'{54235E69-8E20-4D33-8A62-623CCD9C87AA}' : IForceBushing,
	'{5A0426A9-C465-48F7-9456-7F6008CB0A7E}' : IForceMatrix,
	'{C5BE32C6-5CCE-4BAF-B0BF-4B304BFEC2C5}' : IForceSpringRotational,
	'{65024A22-5502-4F83-83D1-8C0EE0CE1712}' : IForceAxialRotational,
	'{53C512F8-E418-4F65-9755-271B9A6F59E0}' : IForceBeam,
	'{557175E7-72DD-447A-8DB1-319593C34BDC}' : IBeamCrossSection,
	'{64E1EBEB-71A0-4986-90F3-8C0B77A3F88B}' : IForcePlate,
	'{57CC4E39-380C-40B8-AE7F-0908ADC0DB18}' : IForceTire,
	'{DB995C7E-C9C4-4C2E-87C7-E4A030ED91AA}' : ITireProperty,
	'{AB5A2925-53BC-4D4C-8101-4C3774E2DDEC}' : ITireOutputChannel,
	'{C2F210C5-9B2E-43C2-9C50-D57E01780041}' : IContactSolidContact,
	'{91AB2D2E-7A8B-42CE-87AC-9C4EA40EDEB0}' : IContact,
	'{27A86788-8B85-40CF-BE7F-BA915103A7DE}' : IContactAttribute,
	'{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}' : IContactProperty,
	'{AEFD7238-F1DD-48C2-8329-E5571C291B25}' : IContactFriction,
	'{C3560239-62ED-43FF-A94D-71801A2886E4}' : IContactPropertyAdditional,
	'{D479C190-172F-42AC-A4B9-5B3AFE1EB81B}' : IContactSolidPatchOption,
	'{6A2CED63-4688-4E31-8407-68455039C297}' : IContactCircleToCurve,
	'{6CA887BC-2FC1-4E9C-AD2D-EEF830EA8FDF}' : IContactCurveSegmentOption,
	'{5333486D-3939-4899-8357-62D694707155}' : IContactSphereToSphere,
	'{B60FAA98-F5DA-4096-B282-4C015E99D9A8}' : IContactSphereInSphere,
	'{8928F336-9095-49D0-9AAC-1D599E3F26A7}' : IContactSphereToSurface,
	'{66C811FA-3964-4522-8E0B-770FB18880F5}' : IContactSurfacePatchOption,
	'{6495A425-79AC-40E6-8BF6-A95AA1A2D578}' : IContactExtendedSurfaceToSurface,
	'{ED5F7902-56FD-482D-AEF2-D898A1EBFF1B}' : IContactExtendedSurfaceToSurfacePatchOption,
	'{3710687E-E5C7-436E-8127-3ECAC2851397}' : IContactCurveToCurve,
	'{17DA0A15-1706-4346-8982-C0E9243F866E}' : IContactSphereToCylinder,
	'{32D72143-2B38-4E05-921B-1A1F3282FEB1}' : IContactSphereToBox,
	'{15C4A86F-4FC5-4305-87EF-918AEB6C9B8D}' : IContactSphereToTorus,
	'{7A5148F6-528B-4BCD-A271-47F8842D6E6C}' : IContactSphereInCylinder,
	'{EF263E7B-85A1-4B43-97F6-3BD08C9334DB}' : IContactSphereInBox,
	'{6D130ECF-C4B3-4E13-ABDC-7C6023E11A3B}' : IContactSphereInTorus,
	'{EC57C6FE-34A6-456F-AE24-7A8AACD2E723}' : IContactCircleToCircle,
	'{56C95894-62F4-4D51-B976-862FC3E711AB}' : IContactCircleInCircle,
	'{690A46F3-D9C2-4AFF-8493-1667E2AB01C8}' : IContactCam2D,
	'{8C139E48-EC46-477D-9754-D1449E4AF801}' : ICam2DCurveSegmentOption,
	'{59D79E1B-8BF5-4AA3-93F4-971C64745639}' : IContactCamLine2D,
	'{2B0D7BEC-4344-49F3-BF7A-CFEB25A06BFC}' : IContactCylinderToSurface,
	'{CA52FC45-8B33-4AB7-BE25-8454F1C1CB57}' : IContactCylinderToCylinder,
	'{D4E093C4-C608-4D7E-A620-25FA02B21B83}' : IContactCylinderInCylinder,
	'{58994473-EE23-4CC2-9F1B-EC20B9398A03}' : IContactConeInCone,
	'{60BF370A-91E7-47B9-8BBC-584843818988}' : IContactConeToCone,
	'{028811A2-89B0-4A54-B105-7682DC7D07DB}' : IContactSphereToCone,
	'{DA496635-4F2C-44AB-B59D-B2F1A6946C62}' : IContactConeToCylinder,
	'{1D599359-EBA8-4D8D-A611-6EEBABBF5BB0}' : IContactSurfaceToSurface,
	'{8B3A469C-6172-4F76-91BC-34C074A7754A}' : IContactSphereArcRevolution,
	'{950986EE-CD2C-4719-A2C1-329FB478FA05}' : IContactSphereArcExtrude,
	'{2FACF09B-48C8-4A94-92D7-BF9F43647CB3}' : IContactSphereToArcRevolution,
	'{F535B5BD-3EC1-4774-AB37-BF8A82D076C1}' : IContactSphereToArcExtrusion,
	'{44DA6D75-D10A-48E2-8077-5D9B9293842D}' : IDesignVariable,
	'{5A26F623-DA73-4531-884A-946494037A2B}' : IParametricPointConnector,
	'{3C8942E4-0A9C-48DB-AFF4-882202E3BA8A}' : IParametricValueConnector,
	'{1ECE0007-85A7-4F9B-AD9E-FEE2684A398E}' : IVariableEquation,
	'{591F39F5-FBE0-49DF-83B6-6C0550D95A6A}' : IDifferentialEquation,
	'{BAD8E0C8-CE5C-4AFD-88DE-427445F73C75}' : IRequestStandard,
	'{70D93511-61EB-4AB6-80D8-B142DB3D7923}' : IRequestExpression,
	'{F13A88C4-88A8-439B-B06A-A6827B3D4489}' : IRequestUserSubroutine,
	'{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}' : IPerformanceIndex,
	'{4D515A5F-EE68-43AD-8C60-6AD2B9DF8D09}' : IContactSphereInCone,
	'{1448FE04-1A3C-495A-8944-98789C61326C}' : IScopeAngle,
	'{586914A9-8C8A-42ED-8202-DF1CC8BFE47B}' : IScope,
	'{1814A992-158F-4A63-A3E6-1E69A1587342}' : IScopePointToPoint,
	'{7B3C335F-849F-4A18-BE0E-BDE3BACFA0EE}' : IScopeExpression,
	'{45D6BAEA-6C9A-4878-9F5D-F0AE79A1EE31}' : IScopeEntity,
	'{1DD425A8-DC9F-4E7C-94CF-A3D1F90D8A75}' : IScopeGapInterference,
	'{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}' : IToolkit,
	'{EDFD7500-666A-4F69-AA26-194A60C955E3}' : ISensorPointInBox,
	'{6D4E47C0-B7BC-4559-9CA0-25B0C957AFAC}' : ISensor,
	'{BFB1489A-2BE8-4AE0-833F-21B119D4260C}' : ISensorLaser,
	'{BD5CA94C-B210-4D55-BB8C-438744A1E3EB}' : ISensorLaserEx,
	'{09917A88-72B3-47A8-98CD-679E220D7F78}' : ISensorPatchOption,
	'{B006015D-09FE-4F3A-9922-B74E7C4036A0}' : IContactCylinderToBox,
	'{D1451F25-D6A2-42B7-8DDF-D0F221D5FBFE}' : ISubSystemCollection,
	'{E26794CD-5D37-4617-BB5A-1AD85F3ED410}' : IBodyCollection,
	'{58A5314F-24D0-4D53-AE77-23B42CB9FAC7}' : IJointCollection,
	'{B21BD336-10F0-43BF-9EA3-E2258E754366}' : IPairConstraintCollection,
	'{B1359BD3-DD1C-4A0C-A16D-466CC9B0B4F5}' : IForceCollection,
	'{1B5A2AF8-F3DB-49CC-A112-21B0CD80C8EE}' : IContactCollection,
	'{65267578-7015-4BB5-BB65-F5F81CCEA240}' : IRequestStandardCollection,
	'{65267578-7015-4BB5-BB65-F5F81CCEA241}' : IRequestUserSubroutineCollection,
	'{65267578-7015-4BB5-BB65-F5F81CCEA242}' : IRequestExpressionCollection,
	'{65267578-7015-4BB5-BB65-F5F81CCEA243}' : ISplineCollection,
	'{65267578-7015-4BB5-BB65-F5F81CCEA246}' : IExpressionCollection,
	'{65267578-7015-4BB5-BB65-F5F81CCEA247}' : IUserSubroutineCollection,
	'{65267578-7015-4BB5-BB65-F5F81CCEA248}' : IVariableEquationCollection,
	'{65267578-7015-4BB5-BB65-F5F81CCEA249}' : IDifferentialEquationCollection,
	'{65267578-7015-4BB5-BB65-F5F81CCEA24A}' : IScopeCollection,
	'{CC76CCE9-4D71-4DE9-8A4C-490E57C838C2}' : IPerformanceIndexCollection,
	'{EA742AA0-0675-4ABA-8145-C00A73F97747}' : IDesignVariableCollection,
	'{16DE1264-A4F7-4A8E-8F3C-E8B5210CB2D9}' : IString,
	'{C9116090-BCBB-453C-A283-49E55A3344CA}' : IStringCollection,
	'{A02C4C84-917B-448D-9137-1019967E7138}' : IDesignStudy,
	'{818D411D-45CE-4542-8D89-4D96D21430C8}' : IDesignStudyDV,
	'{ED61CDBA-7239-48AD-B844-7A4DE43F7811}' : IDesignStudyPI,
	'{52942D12-4250-4501-9149-1840338D9948}' : IDesignStudyDVCollection,
	'{B93EF2CA-4779-42DC-9EFE-1B50F427E2E7}' : IDesignStudyPICollection,
	'{6CAFE73E-3494-41D3-AB87-13A59CB8CF2A}' : IContactGeo,
	'{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}' : IContactGeoPatchOption,
	'{8B44BA63-1871-4074-863D-1434F7D479B7}' : IContactGeoSurface,
	'{0BD26902-38C3-4C3F-B2B5-6038996BC174}' : IContactGeoCurve,
	'{2D0EBBBE-395D-465E-84F4-30290538BA38}' : IContactGeoCurveSegmentOption,
	'{DF992967-ADE4-434E-B7BA-DDA5B595BD44}' : IGeneralConstraint,
	'{F63C5479-BE87-431C-963C-DD79C9F33259}' : IGeneralConstraintCollection,
	'{0FDF3022-5D98-4409-B16E-716A01915002}' : ICameraSetting,
	'{A9BF34D4-2D0F-42BA-8BD7-F434174F8122}' : ICameraStandard,
	'{D8203265-F837-4B2B-BE98-881FB736D5DA}' : ICamera,
	'{5F14103C-4413-473C-AA57-EE7E7CEB49F1}' : ICameraFollowing,
	'{29D57E5C-B425-41A4-8091-39435FC986EB}' : ICameraRiding,
	'{5D98AE76-1263-4692-A393-F11F2C6547E1}' : ICameraMulti,
	'{98902028-58CE-4E5F-9E74-D6AEB21B63C8}' : ICameraMovingCollection,
	'{9B56E0F6-2127-4DE3-BE75-D1F6979D8F5D}' : ICameraMoving,
	'{E5B195C5-4D78-4441-884C-AF54C1E10F1B}' : ICameraCollection,
	'{2BA7F21D-5583-410B-8ABB-6AAE09261D4F}' : IParametricPointConnectorCollection,
	'{25597944-74D4-4F24-8145-CD11FE87BCC8}' : IParametricValueConnectorCollection,
	'{4E50DC20-53E0-4B65-86B2-E6C6FF8C1A52}' : IManager,
	'{3B70037A-B51F-46A7-AB2B-971989A06803}' : IGroupJointCMotion,
	'{979CB058-D7B2-4D8B-9EA5-26C16B8C5547}' : IGroup,
	'{C8B1C218-2E2D-4A3C-8D54-1A876AFABF03}' : IJointInCMotionGroup,
	'{507862D8-28C1-423F-9D91-7BE66F10A6DF}' : ISensorCollection,
	'{E30FCF4E-CD27-4F1D-B463-B7CD3E2AEF12}' : IGroupBeam,
	'{15F99EF9-5DE4-423B-9F3B-86C8FA8D2A2A}' : IInitialVelocity,
	'{5FC5751E-20BB-455D-B127-751487DB0768}' : IScenarioAnalysisProperty2,
	'{1E5FBACB-348B-4483-9E16-F653F5A21CF7}' : IScenarioCollection2,
	'{A25F296D-01DC-4AD2-BEC8-67B2EF4C99DD}' : IScenario2,
	'{819BAA2D-0DFF-490C-A3C7-5FF91590FD1E}' : IScenarioSimulationDynamic2,
	'{22898563-4CD6-4D2F-9862-05006C178494}' : IScenarioSimulationStatic2,
	'{26550F0C-C58A-41CD-9A52-4EC1448C3E91}' : IScenarioSimulationEigenvalue2,
	'{1DFB8E58-D3D2-4D57-B10D-304E10FA9CCD}' : IScenarioSimulationFrequencyResponse2,
	'{8CE8A4EC-13F2-437E-8834-FD48DB9D609A}' : IScenarioIntegrationDDA2,
	'{680EBB11-DF6A-4BB0-9F7D-24C76FB16BE1}' : IScenarioIntegrationIMG2,
	'{7C151D45-EF3F-4C46-9F72-77E78BC4F5C6}' : IScenarioIntegrationHYB2,
	'{E308F573-419A-4A53-8B0C-1351BACEBE4B}' : IScenarioIntegrationTRK2,
	'{3FADE3FB-0EC0-4467-B9C8-17548393F352}' : IScenarioEquilibrium2,
	'{C4C5B81A-3AF6-48A0-80BF-6E40789D1290}' : IScenarioActivate2,
	'{F8AAF1F0-C97B-4387-9CC4-6AA41DECC60F}' : IScenarioDeactivate2,
	'{71863406-3B7D-46D3-B9FA-2FA8E1AD8254}' : IScenarioEigenParameter2,
	'{9365F2E3-E085-4C23-930F-DF99569638FF}' : IScenarioFRAParameter2,
	'{B8E9A36E-121C-4225-9F0C-843F5216B394}' : IScenarioIntegrationADV,
	'{53B9175B-11B0-4E63-B525-8062109E72D5}' : IContactGeoCurveToSurface,
	'{3A5D8137-A29F-4A12-BADB-578397A6A582}' : IGroupGeneral,
	'{50DC0F54-508C-4B1A-825F-EEF9288B6828}' : IContactUVSurface,
	'{713E6396-E6D2-4DBF-8780-142AB7259685}' : IContactUVPatchOption,
	'{20D998FD-D089-43D4-B682-F84D247B6FB2}' : IGroupGeneralCollection,
	'{C50A037D-F57E-4236-9597-ED57084B0581}' : IJointPointOnSurface,
	'{6822B8AE-A40F-474E-A2FA-39B3BBCBD54C}' : IConstraintUVPatchOption,
	'{0EECEDE2-6ADD-4945-9061-B3B8D138FC12}' : IDOE,
	'{D0ADE6A0-6A94-4C03-B0F5-4B98D463252E}' : IDOEDesignVariable,
	'{302A8078-C3FF-413F-AF69-2648ECD8CD2A}' : IDOEDesignVariableValueCollection,
	'{08856E23-B2D6-4A74-99B5-9E53EE3392E2}' : IDOEDesignVariableValue,
	'{8792A78A-E960-4DD6-B668-178EFAE4A565}' : IDOEPerformanceIndex,
	'{6F40B1D9-17D6-40FA-BB27-A03900F7004F}' : IDOEPerformanceIndexValueCollection,
	'{5F8A9E07-44ED-44D4-944C-3775C142375E}' : IDOEPerformanceIndexValue,
	'{71978C47-3750-43BF-8D42-6E9AA5F9CD84}' : IDOESimulation,
	'{7460DFBF-6A85-45E4-933E-F880997ABD9E}' : IDOEResultSheet,
	'{7EE8FD42-208D-4F80-B89A-297D54D686DA}' : IWorkingPlane,
	'{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}' : IPlotDocument,
	'{2BB11C40-A053-4367-9C20-DE894FB04B41}' : ICampbellDiagram,
	'{9AA65539-9E1F-4F0D-96BA-EA01E83BEDD8}' : ICampbellDiagramInput,
	'{A9259987-929F-434E-97EA-0DEE7B57D88C}' : ICampbellDiagramSignal,
	'{22FB7957-FCFB-4FCE-8E40-81C1B7829C79}' : ICampbellDiagramPlot,
	'{0F88BBEF-C77F-472D-9936-E84B77F9756A}' : ICustomView,
	'{0B9DFF92-6648-4BB9-83BA-9C6443B2F2CD}' : IModelSetting,
	'{918A0CB3-A5E0-4A9D-906E-D4DF3C194530}' : IAnimationControl,
	'{021CF62C-20FB-4D9B-8C0B-89E4C73CE14C}' : IModelSettingFlexibility,
	'{470BF1F3-2ADB-44D0-A820-C88165387DD1}' : IModelSettingFlexibilityFFlex,
	'{38DEE9F7-E829-461E-A2FA-7AB93E5AE392}' : IModelSettingFlexibilityRFlex,
	'{350C9018-D3B8-4D6B-B9EC-271CE461FDC0}' : IStrainStressOutputFileSetting,
	'{D8DF157B-E900-4ED1-8A7A-36FD7611B889}' : IModelSettingFlexibilityFlexible,
	'{AB76BF02-4EA9-4EC3-AF0E-3B42300415CD}' : IModelSettingPlot,
	'{4DFAE9F4-7DC9-469C-9FEF-6DBB2575E0CA}' : IModelSettingDatabase,
	'{B81B4D27-0B09-4FCD-B29B-55CCCF9E45DD}' : IModelSettingLight,
	'{4C7152BE-060E-4299-865E-FDD285928BDC}' : ILightControlCollection,
	'{2D204501-DF2E-4EAA-90E7-02756A698739}' : ILightControl,
	'{75368D13-6E62-4893-A825-339547DA46C4}' : IModelSettingDefault,
	'{EED70022-9601-4CFC-B6A1-BADDE4A5A4B1}' : IModelSettingCAD,
	'{FE0C7461-8AFD-47CA-A284-C05BD15B68FC}' : ITranslatorImportOptions,
	'{BF6D6355-72CE-4B22-B038-CDEAA00F7CE8}' : ITranslatorExportOptions,
	'{83A06AD8-8A05-4627-823B-E6C5C9716634}' : IModelSettingGeneral,
	'{1972ACE7-FAA6-4C64-A067-C0B2EB23C93A}' : IBackgroundColor,
	'{845806A7-7BB3-4643-878D-CE4247682409}' : IModelSettingDisplay,
	'{54B0F80C-BD55-4F49-8E1A-D1D840603430}' : IModelProperty,
	'{B789D55C-FB99-4E33-A4C3-AFDD631598CE}' : IIntegratorProperty,
	'{19BE442B-70CF-499D-9A4C-B6A3256CDD32}' : IEquilibriumProperty,
	'{54CB2134-5515-4D88-B997-71E72B9D7FFA}' : IEigenValueProperty,
	'{82ADFBAE-2220-4034-A55A-45CA75777ACF}' : ICommonAnalysisProperty,
	'{F212FA3B-9005-4F21-8513-893B10A6D8C7}' : IScenarioAnalysisProperty,
	'{4F34AAB3-4060-4BF7-AEAC-6B348267BB3D}' : IScenarioCollection,
	'{F5E81BAC-818D-4484-8F07-73FC13F44C82}' : IScenario,
	'{955125C7-1D7D-4D86-8DC7-85B3A459DA55}' : IScenarioAnalysisTool,
	'{BB2EB111-0323-4B54-B0E9-B24757D1C5E3}' : IScenarioSimulationDynamic,
	'{703335D3-4FFB-4973-B3CC-F2150716A970}' : IScenarioSimulationStatic,
	'{9D73DB69-F99F-45F5-9A29-2F8661214C67}' : IScenarioSimulationEigenvalue,
	'{0F8B6060-98A3-4734-968D-FE9919D96B20}' : IScenarioSimulationFrequencyResponse,
	'{FD461A28-C99A-4BA7-B816-260FE7E0950E}' : IScenarioIntegrationDDA,
	'{2B48E9C0-40F9-48D4-AA5C-BBB99D0DD8BD}' : IScenarioIntegrationIMG,
	'{879C1DAE-86EC-47C7-81C0-B02F3628F46F}' : IScenarioIntegrationHYB,
	'{F013ED05-BDE6-493B-B4FC-7584C250C5FC}' : IScenarioIntegrationTRK,
	'{BF4C8308-7B3B-41AE-A799-3C51380A5931}' : IScenarioEquilibrium,
	'{4C3D72C7-FCA5-4C7A-8763-603E86EB359F}' : IScenarioActivate,
	'{37FD2978-18F9-4D8C-9F36-B571FA460491}' : IScenarioDeactivate,
	'{82AE0C9E-3F21-4838-965B-C87D06833B63}' : IScenarioEigenParameter,
	'{F13554D8-3EBD-4AF2-AAFB-11FF4B4756D7}' : IScenarioFRAParameter,
	'{7C4DC70C-432E-4059-9983-3628D55F94BD}' : IFrequencyResponseProperty,
	'{09A65909-6FBB-488A-9726-D320F5666395}' : IUnit,
	'{FB97F4A3-BD4F-42B9-80B7-B755FDC154BD}' : IMaterialPropertyCollection,
	'{5AEA7149-EE08-4B4E-B593-5AD90B54E3E6}' : IAnimation,
	'{4DD0F877-22B8-433A-AE68-970E0F497F95}' : IAnimationSaveOption,
	'{512577A8-E193-4449-8C6B-A2D59EDBFCF0}' : IUtility,
	'{21BE44B2-CA0C-4C78-8EB3-B3CA8BDE0726}' : IObjectControl,
	'{50C894D7-EA63-455B-B693-E9AF8A66E7CB}' : IMeasure,
	'{931EE5BD-3011-4120-AC01-FC90D67BF3C0}' : IMassProperty,
	'{BE0FEA7A-B50D-48D9-A803-A198B40539A5}' : IMeasureDistanceResult,
	'{CE7C473B-D7DB-4232-A2F1-41C059C9E0AD}' : IMeasureCircularGeometryResult,
	'{47FC98DE-E7C5-46F0-B2C3-4FAB19AA38AB}' : ICuttingPlane,
	'{23C82686-D1A0-4821-B9EE-F8D0CA03DF32}' : IPattern,
	'{5A99CECC-EA9D-4687-8156-FF398A176E63}' : IRelationMap,
	'{C65A8D10-195A-4939-8359-D7DEC09DC500}' : IDevelopement,
	'{6EA01552-F3C2-4CB5-B537-5F25196A168D}' : IFileImportOption,
	'{93B51291-F47B-4BAA-80D3-91123DD4E277}' : IFileImportOptionCATIA,
	'{9631DE3F-C76B-4D7E-AACE-1E7135DACBEF}' : IFileImportOptionSTEP,
	'{33584AC3-5F2D-4DD9-826E-1BA921B395D0}' : ILayerSetting,
	'{3741CF5D-7BBB-4AE9-9FFB-EA01CBB4C991}' : ILayerCollection,
	'{2A7142D5-69B9-47B0-9E94-6E657374E32E}' : ILayer,
	'{4E11EE8B-B596-40F8-8F43-1D1C22B3E1F1}' : IMessageFileSettings,
	'{3D7C1E76-2C4C-480F-9D7B-5ECC6CB9FA2D}' : IFileExportOption,
	'{DFE62769-2AF5-408A-88CF-2D448D994C5F}' : IFileExportOptionParasolid,
	'{4A2D1222-69BA-4242-AE5E-E41051CC3621}' : IFileExportOptionACIS,
	'{49AFA7B6-FF16-4F40-8EA4-10867819AB71}' : IFileExportOptionCATIA,
	'{E32E43FB-3356-4D36-8A51-C22DE7E397BF}' : IContourSetting,
	'{F03BC9EC-27E6-4FA7-92F8-AAD66AC41633}' : IContourObjectCollection,
	'{F5AD2570-A7BF-4FEE-AC4E-68E977AE92EA}' : IContourObject,
	'{0FCAD09C-F67B-415A-BDB7-472A2AC90A59}' : IPostAnalysis,
	'{8F416D31-9366-4C4A-8395-3DFE99C21F1D}' : IEigenMovement,
	'{1FD6C87D-DBED-4C06-9B79-81FC253BC0A1}' : IApplicationSettings,
	'{E26DEB95-B8AC-4666-8673-A9D41A440E2C}' : IModelDocumentCollection,
	'{AEE53265-74B8-4B8B-96B0-5EFB4F5AACB8}' : IPlotDocumentCollection,
	'{81691554-1F9A-435A-9730-5C995EEFBDBD}' : IRibbonManager,
	'{E4EE4AC4-95CE-4D3D-BBC6-1962F46A4CA2}' : IRibbonTab,
	'{CEFE050D-2992-4FDE-AD88-796B864516A0}' : IRibbonGroup,
	'{B2F1CBE0-707D-4E0B-B080-546D4664CA2F}' : IMenuControl,
	'{E7C5258C-4AED-43E9-860F-877BF7B1F154}' : IToolbarManager,
	'{E7C5258C-4AED-43E9-860F-877BF7B1F153}' : IToolbar,
	'{47E89053-59DB-4697-AAC9-49817147248B}' : IAddIns,
	'{D497353F-2D45-4F8E-A649-0D0FABA3849D}' : IeTemplate,
	'{2B53283A-FA48-4CFB-87A7-93D2FC9F8A5F}' : IProcessNet,
	'{0B006D28-70E2-4FBA-8A03-EC9EFC17C4E1}' : IGeometrySphereCollection,
	'{5C8577DA-B2F5-4C78-AF81-251818CE7223}' : IPoint2D,
	'{F7D1F12D-2871-468E-844A-AF31810CF78E}' : IPoint2DWithRadius,
	'{3656AD01-A48C-43E5-A87A-567128C5129E}' : IPoint3DWithRadius,
	'{B58006F8-C5AC-4B97-8096-AF292F9DBE55}' : ISpecialParametricValue,
	'{01CC4DB0-561C-43AD-8D89-9485F040B0E5}' : ISpecialParametricMarker,
	'{50D4EBE3-721F-4673-BEDE-56BC2583A64F}' : IGraphicMaterial,
	'{CB9C645A-A4F6-4F6A-855A-6CBAC8B59BCB}' : IGraphicPropertyBody,
	'{A99EE858-C306-4027-A4FA-D86D0BCB6ADF}' : IGeometrySolidScale,
	'{AF74F925-2234-4D16-ACFA-4206843C8854}' : IGeometrySheetScale,
	'{AB18E75F-DCAF-47DB-AD77-35CEDFB12273}' : IForceBushingProperty,
	'{557175E7-72DD-447A-8DB1-319593C34BDD}' : IBeamCrossSectionCircular,
	'{557175E7-72DD-447A-8DB1-319593C34BDE}' : IBeamCrossSectionElliptical,
	'{557175E7-72DD-447A-8DB1-319593C34BDF}' : IBeamCrossSectionRectangular,
	'{557175E7-72DD-447A-8DB1-319593C34BE0}' : IBeamCrossSectionThinWallTube,
	'{557175E7-72DD-447A-8DB1-319593C34BE1}' : IBeamCrossSectionThickWallTube,
	'{557175E7-72DD-447A-8DB1-319593C34BE2}' : IBeamCrossSectionHollowRectangualr,
	'{557175E7-72DD-447A-8DB1-319593C34BE3}' : IBeamCrossSectionIBeam,
	'{557175E7-72DD-447A-8DB1-319593C34BE4}' : IBeamCrossSectionTBeam,
	'{F99074AA-1B0D-4BBB-BFDD-8C490375373F}' : IForceTireMF,
	'{0B8D6129-F228-4D87-9952-19E776DFE598}' : IForceTireF,
	'{4BF59E07-A035-4C63-9753-8CA8D16C02B1}' : ITireSoilProperty,
	'{023C2BF6-0000-41CA-8E0E-C3C047C16C73}' : IForceTireSoil,
	'{FB0F1AE7-3A1E-4326-B1BF-8225DA2BF11E}' : ISensorEvent,
	'{CCB7E742-F0DF-4F22-A377-04AA675FD281}' : ISensorSpeed,
	'{0CC3861B-CC2A-4402-9135-C8BC804EABBD}' : ISensorDistance,
	'{55C49622-A503-4651-BF1E-2A84CD9E27AB}' : ISensorTension,
	'{FD6480C3-36F4-4627-9725-6B484795DC39}' : ISensorTensionEx,
	'{08675B12-6A90-4082-BAED-E54382FDF107}' : ISensorSlip,
	'{08F5AF0B-ADB1-4AB4-8FAB-54ADCB9B5F36}' : ISensorDisplacement,
	'{CDBA1369-C276-42F4-8C85-562A82C32E54}' : IPoint2DCollection,
	'{2C0D70A3-D197-4781-940A-1672F3B420B9}' : IPoint2DWithRadiusCollection,
	'{7AAA986F-35DD-4DCF-843A-CEBA8E09D33A}' : IPoint3DCollection,
	'{0476BFAD-0FF1-4CA4-8B59-AE9E00842CCB}' : IPoint3DWithRadiusCollection,
	'{7D9BF8A1-6222-49D0-A13D-E07499CE4ADA}' : INode,
	'{FAB91948-4286-4309-BAB1-225770C71E9E}' : INodeReadOnly,
	'{54A07879-AC7A-4B8D-BE87-914AD441CB69}' : IElement,
	'{A86C1699-A5C3-4169-9085-A10C0818A8A3}' : IElementReadOnly,
	'{28491D53-A2CA-45CC-80CC-CB1FB4E7A32C}' : INodeBC,
	'{7F035946-EE7C-4557-BAFC-000BDD366EDF}' : INodeBCCollection,
	'{C3E2B430-98D5-4D24-BB8C-3B00F28373F3}' : INodeOutput,
	'{4549131A-72B6-45B1-9ABE-C2A32F250FED}' : INodeOutputCollection,
}
CLSIDToPackageMap = {}
win32com.client.CLSIDToClass.RegisterCLSIDsFromDict( CLSIDToClassMap )
VTablesToPackageMap = {}
VTablesToClassMap = {
	'{0E72DCBC-60DD-495E-B067-85BA9DDC18BB}' : 'IApplication',
	'{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}' : 'IModelDocument',
	'{27A86788-8B85-40CF-BE7F-BA915103A7DB}' : 'IGeneric',
	'{E4EEC972-0593-48B2-A1C7-551AD072EFD8}' : 'IGenericBase',
	'{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}' : 'ISubSystem',
	'{6A3295D9-E76B-473C-9655-23B7B1CBD671}' : 'IReferenceFrame',
	'{918CAF9A-7A62-4EC4-B45D-C259C997B661}' : 'IVector',
	'{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}' : 'IParametricPoint',
	'{2B5166E3-4B31-4607-B157-BE237A670336}' : 'IDouble',
	'{3EEED3CE-62E8-4882-AAE6-4812B49927B5}' : 'IParametricValue',
	'{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}' : 'IMarker',
	'{A2FF24EE-9333-4BFF-9DC3-27E495B46ACD}' : 'IMarkerFFlexData',
	'{A2FF24EE-9333-4BFF-9DC3-17E496B46ACD}' : 'IMarkerRFlexData',
	'{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}' : 'IBody',
	'{4C8B7C23-7D92-4D39-B530-5D93DC97F771}' : 'IGraphicProperty',
	'{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}' : 'IMaterialProperty',
	'{5810C7E4-F627-4171-9D64-4BC97F14BB8E}' : 'IGeometryCylinder',
	'{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}' : 'IGeometrySolid',
	'{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}' : 'IGeometry',
	'{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}' : 'IGraphicPropertyGeometry',
	'{7B6155CC-0035-4449-9748-DFCE0956F5D9}' : 'IGeometryBox',
	'{2122DEE7-EE07-4A20-9B49-5A9AF4599906}' : 'IGeometrySphere',
	'{92A1D6C1-1B9F-4A5A-AA3E-164073FAA5FB}' : 'IGeometryTorus',
	'{CD73C8BF-C8F4-451C-BE3F-E7E06BA247FD}' : 'IGeometryPrism',
	'{1A304704-02AE-4939-8CD1-0DBCDE3F526B}' : 'IGeometryCone',
	'{AD48AFB0-D8CA-4168-B727-A352242BDFEE}' : 'IGeometryLink',
	'{4B132713-20F9-475D-B175-CED5735E2825}' : 'IGeometryCircle',
	'{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}' : 'IGeometryWire',
	'{159B4280-8FD8-4847-884B-84EC26F963FA}' : 'IGeometrySpline',
	'{6BEF9B6B-4708-445E-A3B5-0D65BA69F749}' : 'IPointCollection',
	'{31C17D32-0501-4F95-96DC-5ED97F6994A6}' : 'IGeometryOutline',
	'{6615A98C-4753-43E7-BFC6-D7E2EC7D1737}' : 'IGeometryArc',
	'{7DD7CE3F-EAC8-4324-9107-C4EDFF055B1C}' : 'IAnimationDataScaling',
	'{E1DCC3EC-B388-4C1D-855E-7286FDDB492D}' : 'IAnimationDataScalingBase',
	'{CC8BC813-F31C-4B25-A652-7B110AF60394}' : 'IGeometrySplineSurface',
	'{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}' : 'IGeometrySheet',
	'{733031A0-28F6-4064-9C40-FDC74CFA015E}' : 'IGeometryOutlineSurface',
	'{6BEF9B6B-4708-445E-A3B5-0D65BA69F748}' : 'IMarkerCollection',
	'{2B270F9A-2704-448E-809B-7B2B30ACEA84}' : 'IGeometryWireCollection',
	'{5E8000B9-06C7-46B2-A736-5D43904C8878}' : 'IGeometrySheetCollection',
	'{DB55951D-F238-46D3-9C25-7B4B87F34D36}' : 'IGeometrySolidCollection',
	'{F7EEC6D6-7358-4316-AFEC-3457934B08F8}' : 'IGeometrySheetExtrude',
	'{E14CE330-FB54-47C9-A917-4D1854365E86}' : 'IGeometrySolidExtrude',
	'{952BEF3F-0EA1-4F2B-9EA4-5214261533D2}' : 'IGeometrySheetSpin',
	'{431767A5-5F84-411B-9BB4-E4B9EA14BBC4}' : 'IGeometrySolidSpin',
	'{1820726B-54D0-4A1F-AEAB-284DEC6C1270}' : 'IGeometrySheetSweep',
	'{FC825EA8-559A-4A73-9261-7EA500EC7CAB}' : 'IGeometrySolidSweep',
	'{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}' : 'IRoadData',
	'{65267578-7015-4BB5-BB65-F5F81CCEA244}' : 'IParametricPointCollection',
	'{65267578-7015-4BB5-BB65-F5F81CCEA245}' : 'IParametricValueCollection',
	'{CC63D830-4DFB-4DFC-920E-966E02DCCE51}' : 'IGeometryArcRevolution',
	'{7338A8FC-4CD7-472D-B764-578B96254856}' : 'IGeometryArcExtrusion',
	'{68A5A87D-7640-4F09-8D24-945200D2DB33}' : 'IRoadDataCollection',
	'{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}' : 'IGRoad',
	'{295776CE-69C8-4B65-800F-F458E26F7BA1}' : 'IGRoadCreationOption',
	'{C6162712-FA98-4EF1-8B94-E326943E0626}' : 'IGeometryShellCollection',
	'{1E1952F0-7A7C-453F-BB98-38A23BAE1312}' : 'IGeometryShell',
	'{8AE3FA68-8066-412B-A1C9-9B360E8AFA35}' : 'IGRoadCollection',
	'{A376DBCC-6EA1-4170-97B7-7208ECE52A76}' : 'IGeometryFaceSurface',
	'{6FA36EFD-91A9-49CF-AC3F-595F8CDCD6AD}' : 'IGeometryEdgeCurve',
	'{C5D7538F-B727-4D10-9D7D-D743D92ACAB4}' : 'IGeometryFace',
	'{263D2898-9FED-4649-9CF5-8D043CC759A2}' : 'IGeometryEdge',
	'{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}' : 'IPoint3D',
	'{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}' : 'IGenericCollection',
	'{0FFFB2FB-E83D-431E-8769-1FCFDFBC6BD5}' : 'IGeometryHelixCurve',
	'{5099BF4D-2B9E-405B-A041-3D4760AE1AA9}' : 'ISweepOption',
	'{7E1C6724-070E-41D1-A9F7-B771847EB47D}' : 'IGeometrySolidChamfer',
	'{8FCE6A87-0E72-4BE8-89FB-3C074B7A50C5}' : 'IChamferEdgeInfoCollection',
	'{5503036B-EDA8-4408-B446-1931B03AA62E}' : 'IChamferEdgeInfo',
	'{C760B0C7-18A0-463E-BC13-07F6B3931B32}' : 'IGeometryEdgeCollection',
	'{409CE2D0-68BC-48D0-A001-6606020E41A6}' : 'IGeometrySolidFillet',
	'{573236E5-A4B3-42F2-A7A6-78D9F953BFC8}' : 'IFilletEdgeInfoCollection',
	'{5B71FC46-F5BB-4F40-B7D6-2D4CC543C7CF}' : 'IFilletEdgeInfo',
	'{93D1E2EB-3542-44C8-8EC3-C0E1653B6788}' : 'IGeometrySolidShell',
	'{B5FF572C-A887-464A-8C86-0E92F1ED744F}' : 'IGeometryFaceCollection',
	'{4F28E7D4-55B5-4398-8AB5-B7586AE44EDE}' : 'IShellOffsetFaceInfoCollection',
	'{43AE7027-38BD-4D92-B4BC-5567F9078524}' : 'IShellOffsetFaceInfo',
	'{4F1C59D0-B6B4-43F8-8CBC-7253AB041F42}' : 'IGeometrySolidBoolean',
	'{48DE281A-8619-46F6-BAA5-3A429A0AF97E}' : 'IImprintEdgeOption',
	'{D8018357-9575-4F97-8419-1014B23B06C5}' : 'IFillHoleOption',
	'{ED1BD483-9372-48BA-BBC2-AC349EB1C6F3}' : 'IGeometrySheetUVSurface',
	'{E7F5FA95-8A22-45D7-AA32-2C4499D519A2}' : 'IMFTireImportOption',
	'{9D220527-04EE-4578-9457-4C2061D099E7}' : 'IEulerAngle',
	'{262F564D-8707-4A0E-806C-D9FB21F59324}' : 'IGraphicPropertySubSystem',
	'{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}' : 'IJointRevolute',
	'{B9173DAD-05DD-4037-9367-726DDDEE988E}' : 'IJoint',
	'{27A86788-8B85-40CF-BE7F-BA915103A7DD}' : 'IConnectorAttribute',
	'{27A86788-8B85-40CF-BE7F-BA915103A7DC}' : 'IGenericAttribute',
	'{47F4E55C-4291-4251-866A-98A74112D266}' : 'IMotion',
	'{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}' : 'IExpression',
	'{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}' : 'IUserSubroutine',
	'{C654350F-C53C-474B-84B2-BC299BEA04F2}' : 'IJointRevoluteFrictionWithoutStiction',
	'{405F5B7F-682D-40AB-B9CC-5E09AAC8BF83}' : 'IJointFrictionWithoutStiction',
	'{CDA07E89-2140-42DA-A007-75583AA575E5}' : 'IJointRevoluteFriction',
	'{BE02BB82-F407-44ED-B185-CA270C5842A0}' : 'IJointFriction',
	'{07101FE1-4B6A-41CA-9FC7-3C48C9E96785}' : 'IJointTranslational',
	'{3292939F-35E3-469F-A8AE-7F9234326B1E}' : 'IJointTranslationalFrictionWithoutStiction',
	'{731EF6BF-6DC5-4959-84E0-1EE7C685A1CE}' : 'IJointTranslationalFriction',
	'{206C4CC5-E70A-4F3C-A4FD-2D6B2EEE1F5C}' : 'IJointSpherical',
	'{199E4653-210A-455C-96DA-27DF86C5DA3E}' : 'IJointSphericalFriction',
	'{D89EE062-1A3F-4FE7-915C-8A7D7F4792F0}' : 'IJointCylindrical',
	'{AB2E1933-9D6C-4FD7-BCA5-BA0D2EC0DD3D}' : 'IJointCylindricalFriction',
	'{04E99CDC-64B1-42F2-B981-EC91848B39F6}' : 'IJointUniversal',
	'{CCE1F47D-59F6-428E-91D7-65F36D446B05}' : 'IJointUniversalFriction',
	'{773D31B3-5540-4497-BDCA-D37CCC40E156}' : 'IJointPlanar',
	'{95F6FC38-9D37-4059-8037-EFF038F04EA5}' : 'IJointPlanarFriction',
	'{B6C04DD4-89BA-4A08-9071-9AACD3E4C0F9}' : 'IJointScrew',
	'{990B9133-FDB7-45DB-8398-8297BC724D91}' : 'IJointScrewFriction',
	'{2EA33375-B6DB-4F9D-A3B3-B86A2C91BEDA}' : 'IJointFixed',
	'{2ED808B6-A890-4694-A37C-E8E2E44BCD41}' : 'IJointDistance',
	'{ADED6BDA-80A4-4D1E-824C-A999B0402A7B}' : 'IJointAtpoint',
	'{002ECEBC-0D7D-40DE-9F2C-D6F88E5511C6}' : 'IJointInline',
	'{C3E0D80D-8C4D-4DA8-9206-5A7A83435267}' : 'IJointInplane',
	'{B47415D4-8717-42A3-9F74-965184E44C73}' : 'IJointInplaneFriction',
	'{92F68679-E702-4BF4-B969-546E11BECC63}' : 'IJointOrientation',
	'{54101676-0190-44F2-837F-2CFAFB8A11D2}' : 'IJointParallel',
	'{40F4819B-5A72-4CFE-9F7E-1695A1B677C7}' : 'IJointPerpendicular',
	'{0D91A8ED-1B56-40C7-8FFB-26542A0F4269}' : 'IJointPointOnCurve',
	'{7568D19B-7019-4ABF-A18C-D41C8C39E7CE}' : 'IMotionPointOnCurve',
	'{8EFA806E-0CE1-406E-B3FA-E2CAFB1D3308}' : 'IJointPointOnCurveFriction',
	'{C86088A5-C799-4E35-B0F6-78D60243C544}' : 'IConstraintCurveSegmentOption',
	'{6BFD6484-AB37-4091-B840-C453D24051CC}' : 'IJointCurveOnCurve',
	'{F6D08556-99B4-4761-89E0-D33956DF5776}' : 'IJointConstantVelocity',
	'{842283CC-9684-472C-B061-E5659014C471}' : 'IPairConstraintCoupler',
	'{E53E6E5E-C0B7-4F3F-9E32-30F47855CD70}' : 'IPairConstraint',
	'{D56837DF-B61D-4938-A25D-02A0B67193C8}' : 'IPairConstraintGear',
	'{57A77C2D-5956-4DBE-9893-820E0EA5D034}' : 'IJointCartesianMotion',
	'{3509B78D-BB70-4F88-8A48-BA852F3658BE}' : 'IJointOnOff',
	'{164BA461-0C9B-4F07-A027-C82298891823}' : 'IForceSpring',
	'{EB73DE47-2BB8-46BD-A904-F61BCBC59D1F}' : 'IForce',
	'{61C55C33-4716-4D26-8030-F9D29ED8B413}' : 'IForceSpringGraphic',
	'{50844B7B-2D6F-4A4B-AF50-AA5AEF747EC7}' : 'IForceGraphic',
	'{07D4A7FC-5B11-4E7D-B805-4B32646009AC}' : 'ICoefficient',
	'{E76144D2-715D-41B4-A432-7B6C7F713FC2}' : 'ISpline',
	'{960E870B-7C56-4FF5-95DE-E735C751F8E7}' : 'IForceAxial',
	'{F82CE83C-C5A5-42AC-867F-079BCF051FEA}' : 'IForceTranslational',
	'{52BFD3CF-4CC9-4ECE-9B8C-E7A28EF9D4A2}' : 'IForceRotational',
	'{D996544C-0967-4920-83A6-A3C9FB97E153}' : 'IForceScrew',
	'{54235E69-8E20-4D33-8A62-623CCD9C87AA}' : 'IForceBushing',
	'{5A0426A9-C465-48F7-9456-7F6008CB0A7E}' : 'IForceMatrix',
	'{C5BE32C6-5CCE-4BAF-B0BF-4B304BFEC2C5}' : 'IForceSpringRotational',
	'{65024A22-5502-4F83-83D1-8C0EE0CE1712}' : 'IForceAxialRotational',
	'{53C512F8-E418-4F65-9755-271B9A6F59E0}' : 'IForceBeam',
	'{557175E7-72DD-447A-8DB1-319593C34BDC}' : 'IBeamCrossSection',
	'{64E1EBEB-71A0-4986-90F3-8C0B77A3F88B}' : 'IForcePlate',
	'{57CC4E39-380C-40B8-AE7F-0908ADC0DB18}' : 'IForceTire',
	'{DB995C7E-C9C4-4C2E-87C7-E4A030ED91AA}' : 'ITireProperty',
	'{AB5A2925-53BC-4D4C-8101-4C3774E2DDEC}' : 'ITireOutputChannel',
	'{C2F210C5-9B2E-43C2-9C50-D57E01780041}' : 'IContactSolidContact',
	'{91AB2D2E-7A8B-42CE-87AC-9C4EA40EDEB0}' : 'IContact',
	'{27A86788-8B85-40CF-BE7F-BA915103A7DE}' : 'IContactAttribute',
	'{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}' : 'IContactProperty',
	'{AEFD7238-F1DD-48C2-8329-E5571C291B25}' : 'IContactFriction',
	'{C3560239-62ED-43FF-A94D-71801A2886E4}' : 'IContactPropertyAdditional',
	'{D479C190-172F-42AC-A4B9-5B3AFE1EB81B}' : 'IContactSolidPatchOption',
	'{6A2CED63-4688-4E31-8407-68455039C297}' : 'IContactCircleToCurve',
	'{6CA887BC-2FC1-4E9C-AD2D-EEF830EA8FDF}' : 'IContactCurveSegmentOption',
	'{5333486D-3939-4899-8357-62D694707155}' : 'IContactSphereToSphere',
	'{B60FAA98-F5DA-4096-B282-4C015E99D9A8}' : 'IContactSphereInSphere',
	'{8928F336-9095-49D0-9AAC-1D599E3F26A7}' : 'IContactSphereToSurface',
	'{66C811FA-3964-4522-8E0B-770FB18880F5}' : 'IContactSurfacePatchOption',
	'{6495A425-79AC-40E6-8BF6-A95AA1A2D578}' : 'IContactExtendedSurfaceToSurface',
	'{ED5F7902-56FD-482D-AEF2-D898A1EBFF1B}' : 'IContactExtendedSurfaceToSurfacePatchOption',
	'{3710687E-E5C7-436E-8127-3ECAC2851397}' : 'IContactCurveToCurve',
	'{17DA0A15-1706-4346-8982-C0E9243F866E}' : 'IContactSphereToCylinder',
	'{32D72143-2B38-4E05-921B-1A1F3282FEB1}' : 'IContactSphereToBox',
	'{15C4A86F-4FC5-4305-87EF-918AEB6C9B8D}' : 'IContactSphereToTorus',
	'{7A5148F6-528B-4BCD-A271-47F8842D6E6C}' : 'IContactSphereInCylinder',
	'{EF263E7B-85A1-4B43-97F6-3BD08C9334DB}' : 'IContactSphereInBox',
	'{6D130ECF-C4B3-4E13-ABDC-7C6023E11A3B}' : 'IContactSphereInTorus',
	'{EC57C6FE-34A6-456F-AE24-7A8AACD2E723}' : 'IContactCircleToCircle',
	'{56C95894-62F4-4D51-B976-862FC3E711AB}' : 'IContactCircleInCircle',
	'{690A46F3-D9C2-4AFF-8493-1667E2AB01C8}' : 'IContactCam2D',
	'{8C139E48-EC46-477D-9754-D1449E4AF801}' : 'ICam2DCurveSegmentOption',
	'{59D79E1B-8BF5-4AA3-93F4-971C64745639}' : 'IContactCamLine2D',
	'{2B0D7BEC-4344-49F3-BF7A-CFEB25A06BFC}' : 'IContactCylinderToSurface',
	'{CA52FC45-8B33-4AB7-BE25-8454F1C1CB57}' : 'IContactCylinderToCylinder',
	'{D4E093C4-C608-4D7E-A620-25FA02B21B83}' : 'IContactCylinderInCylinder',
	'{58994473-EE23-4CC2-9F1B-EC20B9398A03}' : 'IContactConeInCone',
	'{60BF370A-91E7-47B9-8BBC-584843818988}' : 'IContactConeToCone',
	'{028811A2-89B0-4A54-B105-7682DC7D07DB}' : 'IContactSphereToCone',
	'{DA496635-4F2C-44AB-B59D-B2F1A6946C62}' : 'IContactConeToCylinder',
	'{1D599359-EBA8-4D8D-A611-6EEBABBF5BB0}' : 'IContactSurfaceToSurface',
	'{8B3A469C-6172-4F76-91BC-34C074A7754A}' : 'IContactSphereArcRevolution',
	'{950986EE-CD2C-4719-A2C1-329FB478FA05}' : 'IContactSphereArcExtrude',
	'{2FACF09B-48C8-4A94-92D7-BF9F43647CB3}' : 'IContactSphereToArcRevolution',
	'{F535B5BD-3EC1-4774-AB37-BF8A82D076C1}' : 'IContactSphereToArcExtrusion',
	'{44DA6D75-D10A-48E2-8077-5D9B9293842D}' : 'IDesignVariable',
	'{5A26F623-DA73-4531-884A-946494037A2B}' : 'IParametricPointConnector',
	'{3C8942E4-0A9C-48DB-AFF4-882202E3BA8A}' : 'IParametricValueConnector',
	'{1ECE0007-85A7-4F9B-AD9E-FEE2684A398E}' : 'IVariableEquation',
	'{591F39F5-FBE0-49DF-83B6-6C0550D95A6A}' : 'IDifferentialEquation',
	'{BAD8E0C8-CE5C-4AFD-88DE-427445F73C75}' : 'IRequestStandard',
	'{70D93511-61EB-4AB6-80D8-B142DB3D7923}' : 'IRequestExpression',
	'{F13A88C4-88A8-439B-B06A-A6827B3D4489}' : 'IRequestUserSubroutine',
	'{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}' : 'IPerformanceIndex',
	'{4D515A5F-EE68-43AD-8C60-6AD2B9DF8D09}' : 'IContactSphereInCone',
	'{1448FE04-1A3C-495A-8944-98789C61326C}' : 'IScopeAngle',
	'{586914A9-8C8A-42ED-8202-DF1CC8BFE47B}' : 'IScope',
	'{1814A992-158F-4A63-A3E6-1E69A1587342}' : 'IScopePointToPoint',
	'{7B3C335F-849F-4A18-BE0E-BDE3BACFA0EE}' : 'IScopeExpression',
	'{45D6BAEA-6C9A-4878-9F5D-F0AE79A1EE31}' : 'IScopeEntity',
	'{1DD425A8-DC9F-4E7C-94CF-A3D1F90D8A75}' : 'IScopeGapInterference',
	'{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}' : 'IToolkit',
	'{EDFD7500-666A-4F69-AA26-194A60C955E3}' : 'ISensorPointInBox',
	'{6D4E47C0-B7BC-4559-9CA0-25B0C957AFAC}' : 'ISensor',
	'{BFB1489A-2BE8-4AE0-833F-21B119D4260C}' : 'ISensorLaser',
	'{BD5CA94C-B210-4D55-BB8C-438744A1E3EB}' : 'ISensorLaserEx',
	'{09917A88-72B3-47A8-98CD-679E220D7F78}' : 'ISensorPatchOption',
	'{B006015D-09FE-4F3A-9922-B74E7C4036A0}' : 'IContactCylinderToBox',
	'{D1451F25-D6A2-42B7-8DDF-D0F221D5FBFE}' : 'ISubSystemCollection',
	'{E26794CD-5D37-4617-BB5A-1AD85F3ED410}' : 'IBodyCollection',
	'{58A5314F-24D0-4D53-AE77-23B42CB9FAC7}' : 'IJointCollection',
	'{B21BD336-10F0-43BF-9EA3-E2258E754366}' : 'IPairConstraintCollection',
	'{B1359BD3-DD1C-4A0C-A16D-466CC9B0B4F5}' : 'IForceCollection',
	'{1B5A2AF8-F3DB-49CC-A112-21B0CD80C8EE}' : 'IContactCollection',
	'{65267578-7015-4BB5-BB65-F5F81CCEA240}' : 'IRequestStandardCollection',
	'{65267578-7015-4BB5-BB65-F5F81CCEA241}' : 'IRequestUserSubroutineCollection',
	'{65267578-7015-4BB5-BB65-F5F81CCEA242}' : 'IRequestExpressionCollection',
	'{65267578-7015-4BB5-BB65-F5F81CCEA243}' : 'ISplineCollection',
	'{65267578-7015-4BB5-BB65-F5F81CCEA246}' : 'IExpressionCollection',
	'{65267578-7015-4BB5-BB65-F5F81CCEA247}' : 'IUserSubroutineCollection',
	'{65267578-7015-4BB5-BB65-F5F81CCEA248}' : 'IVariableEquationCollection',
	'{65267578-7015-4BB5-BB65-F5F81CCEA249}' : 'IDifferentialEquationCollection',
	'{65267578-7015-4BB5-BB65-F5F81CCEA24A}' : 'IScopeCollection',
	'{CC76CCE9-4D71-4DE9-8A4C-490E57C838C2}' : 'IPerformanceIndexCollection',
	'{EA742AA0-0675-4ABA-8145-C00A73F97747}' : 'IDesignVariableCollection',
	'{16DE1264-A4F7-4A8E-8F3C-E8B5210CB2D9}' : 'IString',
	'{C9116090-BCBB-453C-A283-49E55A3344CA}' : 'IStringCollection',
	'{A02C4C84-917B-448D-9137-1019967E7138}' : 'IDesignStudy',
	'{818D411D-45CE-4542-8D89-4D96D21430C8}' : 'IDesignStudyDV',
	'{ED61CDBA-7239-48AD-B844-7A4DE43F7811}' : 'IDesignStudyPI',
	'{52942D12-4250-4501-9149-1840338D9948}' : 'IDesignStudyDVCollection',
	'{B93EF2CA-4779-42DC-9EFE-1B50F427E2E7}' : 'IDesignStudyPICollection',
	'{6CAFE73E-3494-41D3-AB87-13A59CB8CF2A}' : 'IContactGeo',
	'{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}' : 'IContactGeoPatchOption',
	'{8B44BA63-1871-4074-863D-1434F7D479B7}' : 'IContactGeoSurface',
	'{0BD26902-38C3-4C3F-B2B5-6038996BC174}' : 'IContactGeoCurve',
	'{2D0EBBBE-395D-465E-84F4-30290538BA38}' : 'IContactGeoCurveSegmentOption',
	'{DF992967-ADE4-434E-B7BA-DDA5B595BD44}' : 'IGeneralConstraint',
	'{F63C5479-BE87-431C-963C-DD79C9F33259}' : 'IGeneralConstraintCollection',
	'{0FDF3022-5D98-4409-B16E-716A01915002}' : 'ICameraSetting',
	'{A9BF34D4-2D0F-42BA-8BD7-F434174F8122}' : 'ICameraStandard',
	'{D8203265-F837-4B2B-BE98-881FB736D5DA}' : 'ICamera',
	'{5F14103C-4413-473C-AA57-EE7E7CEB49F1}' : 'ICameraFollowing',
	'{29D57E5C-B425-41A4-8091-39435FC986EB}' : 'ICameraRiding',
	'{5D98AE76-1263-4692-A393-F11F2C6547E1}' : 'ICameraMulti',
	'{98902028-58CE-4E5F-9E74-D6AEB21B63C8}' : 'ICameraMovingCollection',
	'{9B56E0F6-2127-4DE3-BE75-D1F6979D8F5D}' : 'ICameraMoving',
	'{E5B195C5-4D78-4441-884C-AF54C1E10F1B}' : 'ICameraCollection',
	'{2BA7F21D-5583-410B-8ABB-6AAE09261D4F}' : 'IParametricPointConnectorCollection',
	'{25597944-74D4-4F24-8145-CD11FE87BCC8}' : 'IParametricValueConnectorCollection',
	'{4E50DC20-53E0-4B65-86B2-E6C6FF8C1A52}' : 'IManager',
	'{3B70037A-B51F-46A7-AB2B-971989A06803}' : 'IGroupJointCMotion',
	'{979CB058-D7B2-4D8B-9EA5-26C16B8C5547}' : 'IGroup',
	'{C8B1C218-2E2D-4A3C-8D54-1A876AFABF03}' : 'IJointInCMotionGroup',
	'{507862D8-28C1-423F-9D91-7BE66F10A6DF}' : 'ISensorCollection',
	'{E30FCF4E-CD27-4F1D-B463-B7CD3E2AEF12}' : 'IGroupBeam',
	'{15F99EF9-5DE4-423B-9F3B-86C8FA8D2A2A}' : 'IInitialVelocity',
	'{5FC5751E-20BB-455D-B127-751487DB0768}' : 'IScenarioAnalysisProperty2',
	'{1E5FBACB-348B-4483-9E16-F653F5A21CF7}' : 'IScenarioCollection2',
	'{A25F296D-01DC-4AD2-BEC8-67B2EF4C99DD}' : 'IScenario2',
	'{819BAA2D-0DFF-490C-A3C7-5FF91590FD1E}' : 'IScenarioSimulationDynamic2',
	'{22898563-4CD6-4D2F-9862-05006C178494}' : 'IScenarioSimulationStatic2',
	'{26550F0C-C58A-41CD-9A52-4EC1448C3E91}' : 'IScenarioSimulationEigenvalue2',
	'{1DFB8E58-D3D2-4D57-B10D-304E10FA9CCD}' : 'IScenarioSimulationFrequencyResponse2',
	'{8CE8A4EC-13F2-437E-8834-FD48DB9D609A}' : 'IScenarioIntegrationDDA2',
	'{680EBB11-DF6A-4BB0-9F7D-24C76FB16BE1}' : 'IScenarioIntegrationIMG2',
	'{7C151D45-EF3F-4C46-9F72-77E78BC4F5C6}' : 'IScenarioIntegrationHYB2',
	'{E308F573-419A-4A53-8B0C-1351BACEBE4B}' : 'IScenarioIntegrationTRK2',
	'{3FADE3FB-0EC0-4467-B9C8-17548393F352}' : 'IScenarioEquilibrium2',
	'{C4C5B81A-3AF6-48A0-80BF-6E40789D1290}' : 'IScenarioActivate2',
	'{F8AAF1F0-C97B-4387-9CC4-6AA41DECC60F}' : 'IScenarioDeactivate2',
	'{71863406-3B7D-46D3-B9FA-2FA8E1AD8254}' : 'IScenarioEigenParameter2',
	'{9365F2E3-E085-4C23-930F-DF99569638FF}' : 'IScenarioFRAParameter2',
	'{B8E9A36E-121C-4225-9F0C-843F5216B394}' : 'IScenarioIntegrationADV',
	'{53B9175B-11B0-4E63-B525-8062109E72D5}' : 'IContactGeoCurveToSurface',
	'{3A5D8137-A29F-4A12-BADB-578397A6A582}' : 'IGroupGeneral',
	'{50DC0F54-508C-4B1A-825F-EEF9288B6828}' : 'IContactUVSurface',
	'{713E6396-E6D2-4DBF-8780-142AB7259685}' : 'IContactUVPatchOption',
	'{20D998FD-D089-43D4-B682-F84D247B6FB2}' : 'IGroupGeneralCollection',
	'{C50A037D-F57E-4236-9597-ED57084B0581}' : 'IJointPointOnSurface',
	'{6822B8AE-A40F-474E-A2FA-39B3BBCBD54C}' : 'IConstraintUVPatchOption',
	'{0EECEDE2-6ADD-4945-9061-B3B8D138FC12}' : 'IDOE',
	'{D0ADE6A0-6A94-4C03-B0F5-4B98D463252E}' : 'IDOEDesignVariable',
	'{302A8078-C3FF-413F-AF69-2648ECD8CD2A}' : 'IDOEDesignVariableValueCollection',
	'{08856E23-B2D6-4A74-99B5-9E53EE3392E2}' : 'IDOEDesignVariableValue',
	'{8792A78A-E960-4DD6-B668-178EFAE4A565}' : 'IDOEPerformanceIndex',
	'{6F40B1D9-17D6-40FA-BB27-A03900F7004F}' : 'IDOEPerformanceIndexValueCollection',
	'{5F8A9E07-44ED-44D4-944C-3775C142375E}' : 'IDOEPerformanceIndexValue',
	'{71978C47-3750-43BF-8D42-6E9AA5F9CD84}' : 'IDOESimulation',
	'{7460DFBF-6A85-45E4-933E-F880997ABD9E}' : 'IDOEResultSheet',
	'{7EE8FD42-208D-4F80-B89A-297D54D686DA}' : 'IWorkingPlane',
	'{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}' : 'IPlotDocument',
	'{2BB11C40-A053-4367-9C20-DE894FB04B41}' : 'ICampbellDiagram',
	'{9AA65539-9E1F-4F0D-96BA-EA01E83BEDD8}' : 'ICampbellDiagramInput',
	'{A9259987-929F-434E-97EA-0DEE7B57D88C}' : 'ICampbellDiagramSignal',
	'{22FB7957-FCFB-4FCE-8E40-81C1B7829C79}' : 'ICampbellDiagramPlot',
	'{0F88BBEF-C77F-472D-9936-E84B77F9756A}' : 'ICustomView',
	'{0B9DFF92-6648-4BB9-83BA-9C6443B2F2CD}' : 'IModelSetting',
	'{918A0CB3-A5E0-4A9D-906E-D4DF3C194530}' : 'IAnimationControl',
	'{021CF62C-20FB-4D9B-8C0B-89E4C73CE14C}' : 'IModelSettingFlexibility',
	'{470BF1F3-2ADB-44D0-A820-C88165387DD1}' : 'IModelSettingFlexibilityFFlex',
	'{38DEE9F7-E829-461E-A2FA-7AB93E5AE392}' : 'IModelSettingFlexibilityRFlex',
	'{350C9018-D3B8-4D6B-B9EC-271CE461FDC0}' : 'IStrainStressOutputFileSetting',
	'{D8DF157B-E900-4ED1-8A7A-36FD7611B889}' : 'IModelSettingFlexibilityFlexible',
	'{AB76BF02-4EA9-4EC3-AF0E-3B42300415CD}' : 'IModelSettingPlot',
	'{4DFAE9F4-7DC9-469C-9FEF-6DBB2575E0CA}' : 'IModelSettingDatabase',
	'{B81B4D27-0B09-4FCD-B29B-55CCCF9E45DD}' : 'IModelSettingLight',
	'{4C7152BE-060E-4299-865E-FDD285928BDC}' : 'ILightControlCollection',
	'{2D204501-DF2E-4EAA-90E7-02756A698739}' : 'ILightControl',
	'{75368D13-6E62-4893-A825-339547DA46C4}' : 'IModelSettingDefault',
	'{EED70022-9601-4CFC-B6A1-BADDE4A5A4B1}' : 'IModelSettingCAD',
	'{FE0C7461-8AFD-47CA-A284-C05BD15B68FC}' : 'ITranslatorImportOptions',
	'{BF6D6355-72CE-4B22-B038-CDEAA00F7CE8}' : 'ITranslatorExportOptions',
	'{83A06AD8-8A05-4627-823B-E6C5C9716634}' : 'IModelSettingGeneral',
	'{1972ACE7-FAA6-4C64-A067-C0B2EB23C93A}' : 'IBackgroundColor',
	'{845806A7-7BB3-4643-878D-CE4247682409}' : 'IModelSettingDisplay',
	'{54B0F80C-BD55-4F49-8E1A-D1D840603430}' : 'IModelProperty',
	'{B789D55C-FB99-4E33-A4C3-AFDD631598CE}' : 'IIntegratorProperty',
	'{19BE442B-70CF-499D-9A4C-B6A3256CDD32}' : 'IEquilibriumProperty',
	'{54CB2134-5515-4D88-B997-71E72B9D7FFA}' : 'IEigenValueProperty',
	'{82ADFBAE-2220-4034-A55A-45CA75777ACF}' : 'ICommonAnalysisProperty',
	'{F212FA3B-9005-4F21-8513-893B10A6D8C7}' : 'IScenarioAnalysisProperty',
	'{4F34AAB3-4060-4BF7-AEAC-6B348267BB3D}' : 'IScenarioCollection',
	'{F5E81BAC-818D-4484-8F07-73FC13F44C82}' : 'IScenario',
	'{955125C7-1D7D-4D86-8DC7-85B3A459DA55}' : 'IScenarioAnalysisTool',
	'{BB2EB111-0323-4B54-B0E9-B24757D1C5E3}' : 'IScenarioSimulationDynamic',
	'{703335D3-4FFB-4973-B3CC-F2150716A970}' : 'IScenarioSimulationStatic',
	'{9D73DB69-F99F-45F5-9A29-2F8661214C67}' : 'IScenarioSimulationEigenvalue',
	'{0F8B6060-98A3-4734-968D-FE9919D96B20}' : 'IScenarioSimulationFrequencyResponse',
	'{FD461A28-C99A-4BA7-B816-260FE7E0950E}' : 'IScenarioIntegrationDDA',
	'{2B48E9C0-40F9-48D4-AA5C-BBB99D0DD8BD}' : 'IScenarioIntegrationIMG',
	'{879C1DAE-86EC-47C7-81C0-B02F3628F46F}' : 'IScenarioIntegrationHYB',
	'{F013ED05-BDE6-493B-B4FC-7584C250C5FC}' : 'IScenarioIntegrationTRK',
	'{BF4C8308-7B3B-41AE-A799-3C51380A5931}' : 'IScenarioEquilibrium',
	'{4C3D72C7-FCA5-4C7A-8763-603E86EB359F}' : 'IScenarioActivate',
	'{37FD2978-18F9-4D8C-9F36-B571FA460491}' : 'IScenarioDeactivate',
	'{82AE0C9E-3F21-4838-965B-C87D06833B63}' : 'IScenarioEigenParameter',
	'{F13554D8-3EBD-4AF2-AAFB-11FF4B4756D7}' : 'IScenarioFRAParameter',
	'{7C4DC70C-432E-4059-9983-3628D55F94BD}' : 'IFrequencyResponseProperty',
	'{09A65909-6FBB-488A-9726-D320F5666395}' : 'IUnit',
	'{FB97F4A3-BD4F-42B9-80B7-B755FDC154BD}' : 'IMaterialPropertyCollection',
	'{5AEA7149-EE08-4B4E-B593-5AD90B54E3E6}' : 'IAnimation',
	'{4DD0F877-22B8-433A-AE68-970E0F497F95}' : 'IAnimationSaveOption',
	'{512577A8-E193-4449-8C6B-A2D59EDBFCF0}' : 'IUtility',
	'{21BE44B2-CA0C-4C78-8EB3-B3CA8BDE0726}' : 'IObjectControl',
	'{50C894D7-EA63-455B-B693-E9AF8A66E7CB}' : 'IMeasure',
	'{931EE5BD-3011-4120-AC01-FC90D67BF3C0}' : 'IMassProperty',
	'{BE0FEA7A-B50D-48D9-A803-A198B40539A5}' : 'IMeasureDistanceResult',
	'{CE7C473B-D7DB-4232-A2F1-41C059C9E0AD}' : 'IMeasureCircularGeometryResult',
	'{47FC98DE-E7C5-46F0-B2C3-4FAB19AA38AB}' : 'ICuttingPlane',
	'{23C82686-D1A0-4821-B9EE-F8D0CA03DF32}' : 'IPattern',
	'{5A99CECC-EA9D-4687-8156-FF398A176E63}' : 'IRelationMap',
	'{C65A8D10-195A-4939-8359-D7DEC09DC500}' : 'IDevelopement',
	'{6EA01552-F3C2-4CB5-B537-5F25196A168D}' : 'IFileImportOption',
	'{93B51291-F47B-4BAA-80D3-91123DD4E277}' : 'IFileImportOptionCATIA',
	'{9631DE3F-C76B-4D7E-AACE-1E7135DACBEF}' : 'IFileImportOptionSTEP',
	'{33584AC3-5F2D-4DD9-826E-1BA921B395D0}' : 'ILayerSetting',
	'{3741CF5D-7BBB-4AE9-9FFB-EA01CBB4C991}' : 'ILayerCollection',
	'{2A7142D5-69B9-47B0-9E94-6E657374E32E}' : 'ILayer',
	'{4E11EE8B-B596-40F8-8F43-1D1C22B3E1F1}' : 'IMessageFileSettings',
	'{3D7C1E76-2C4C-480F-9D7B-5ECC6CB9FA2D}' : 'IFileExportOption',
	'{DFE62769-2AF5-408A-88CF-2D448D994C5F}' : 'IFileExportOptionParasolid',
	'{4A2D1222-69BA-4242-AE5E-E41051CC3621}' : 'IFileExportOptionACIS',
	'{49AFA7B6-FF16-4F40-8EA4-10867819AB71}' : 'IFileExportOptionCATIA',
	'{E32E43FB-3356-4D36-8A51-C22DE7E397BF}' : 'IContourSetting',
	'{F03BC9EC-27E6-4FA7-92F8-AAD66AC41633}' : 'IContourObjectCollection',
	'{F5AD2570-A7BF-4FEE-AC4E-68E977AE92EA}' : 'IContourObject',
	'{0FCAD09C-F67B-415A-BDB7-472A2AC90A59}' : 'IPostAnalysis',
	'{8F416D31-9366-4C4A-8395-3DFE99C21F1D}' : 'IEigenMovement',
	'{1FD6C87D-DBED-4C06-9B79-81FC253BC0A1}' : 'IApplicationSettings',
	'{E26DEB95-B8AC-4666-8673-A9D41A440E2C}' : 'IModelDocumentCollection',
	'{AEE53265-74B8-4B8B-96B0-5EFB4F5AACB8}' : 'IPlotDocumentCollection',
	'{81691554-1F9A-435A-9730-5C995EEFBDBD}' : 'IRibbonManager',
	'{E4EE4AC4-95CE-4D3D-BBC6-1962F46A4CA2}' : 'IRibbonTab',
	'{CEFE050D-2992-4FDE-AD88-796B864516A0}' : 'IRibbonGroup',
	'{B2F1CBE0-707D-4E0B-B080-546D4664CA2F}' : 'IMenuControl',
	'{E7C5258C-4AED-43E9-860F-877BF7B1F154}' : 'IToolbarManager',
	'{E7C5258C-4AED-43E9-860F-877BF7B1F153}' : 'IToolbar',
	'{47E89053-59DB-4697-AAC9-49817147248B}' : 'IAddIns',
	'{D497353F-2D45-4F8E-A649-0D0FABA3849D}' : 'IeTemplate',
	'{2B53283A-FA48-4CFB-87A7-93D2FC9F8A5F}' : 'IProcessNet',
	'{0B006D28-70E2-4FBA-8A03-EC9EFC17C4E1}' : 'IGeometrySphereCollection',
	'{5C8577DA-B2F5-4C78-AF81-251818CE7223}' : 'IPoint2D',
	'{F7D1F12D-2871-468E-844A-AF31810CF78E}' : 'IPoint2DWithRadius',
	'{3656AD01-A48C-43E5-A87A-567128C5129E}' : 'IPoint3DWithRadius',
	'{B58006F8-C5AC-4B97-8096-AF292F9DBE55}' : 'ISpecialParametricValue',
	'{01CC4DB0-561C-43AD-8D89-9485F040B0E5}' : 'ISpecialParametricMarker',
	'{50D4EBE3-721F-4673-BEDE-56BC2583A64F}' : 'IGraphicMaterial',
	'{CB9C645A-A4F6-4F6A-855A-6CBAC8B59BCB}' : 'IGraphicPropertyBody',
	'{A99EE858-C306-4027-A4FA-D86D0BCB6ADF}' : 'IGeometrySolidScale',
	'{AF74F925-2234-4D16-ACFA-4206843C8854}' : 'IGeometrySheetScale',
	'{AB18E75F-DCAF-47DB-AD77-35CEDFB12273}' : 'IForceBushingProperty',
	'{557175E7-72DD-447A-8DB1-319593C34BDD}' : 'IBeamCrossSectionCircular',
	'{557175E7-72DD-447A-8DB1-319593C34BDE}' : 'IBeamCrossSectionElliptical',
	'{557175E7-72DD-447A-8DB1-319593C34BDF}' : 'IBeamCrossSectionRectangular',
	'{557175E7-72DD-447A-8DB1-319593C34BE0}' : 'IBeamCrossSectionThinWallTube',
	'{557175E7-72DD-447A-8DB1-319593C34BE1}' : 'IBeamCrossSectionThickWallTube',
	'{557175E7-72DD-447A-8DB1-319593C34BE2}' : 'IBeamCrossSectionHollowRectangualr',
	'{557175E7-72DD-447A-8DB1-319593C34BE3}' : 'IBeamCrossSectionIBeam',
	'{557175E7-72DD-447A-8DB1-319593C34BE4}' : 'IBeamCrossSectionTBeam',
	'{F99074AA-1B0D-4BBB-BFDD-8C490375373F}' : 'IForceTireMF',
	'{0B8D6129-F228-4D87-9952-19E776DFE598}' : 'IForceTireF',
	'{4BF59E07-A035-4C63-9753-8CA8D16C02B1}' : 'ITireSoilProperty',
	'{023C2BF6-0000-41CA-8E0E-C3C047C16C73}' : 'IForceTireSoil',
	'{FB0F1AE7-3A1E-4326-B1BF-8225DA2BF11E}' : 'ISensorEvent',
	'{CCB7E742-F0DF-4F22-A377-04AA675FD281}' : 'ISensorSpeed',
	'{0CC3861B-CC2A-4402-9135-C8BC804EABBD}' : 'ISensorDistance',
	'{55C49622-A503-4651-BF1E-2A84CD9E27AB}' : 'ISensorTension',
	'{FD6480C3-36F4-4627-9725-6B484795DC39}' : 'ISensorTensionEx',
	'{08675B12-6A90-4082-BAED-E54382FDF107}' : 'ISensorSlip',
	'{08F5AF0B-ADB1-4AB4-8FAB-54ADCB9B5F36}' : 'ISensorDisplacement',
	'{CDBA1369-C276-42F4-8C85-562A82C32E54}' : 'IPoint2DCollection',
	'{2C0D70A3-D197-4781-940A-1672F3B420B9}' : 'IPoint2DWithRadiusCollection',
	'{7AAA986F-35DD-4DCF-843A-CEBA8E09D33A}' : 'IPoint3DCollection',
	'{0476BFAD-0FF1-4CA4-8B59-AE9E00842CCB}' : 'IPoint3DWithRadiusCollection',
	'{7D9BF8A1-6222-49D0-A13D-E07499CE4ADA}' : 'INode',
	'{FAB91948-4286-4309-BAB1-225770C71E9E}' : 'INodeReadOnly',
	'{54A07879-AC7A-4B8D-BE87-914AD441CB69}' : 'IElement',
	'{A86C1699-A5C3-4169-9085-A10C0818A8A3}' : 'IElementReadOnly',
	'{28491D53-A2CA-45CC-80CC-CB1FB4E7A32C}' : 'INodeBC',
	'{7F035946-EE7C-4557-BAFC-000BDD366EDF}' : 'INodeBCCollection',
	'{C3E2B430-98D5-4D24-BB8C-3B00F28373F3}' : 'INodeOutput',
	'{4549131A-72B6-45B1-9ABE-C2A32F250FED}' : 'INodeOutputCollection',
}


NamesToIIDMap = {
	'IApplication' : '{0E72DCBC-60DD-495E-B067-85BA9DDC18BB}',
	'IModelDocument' : '{A0BF3AB9-2B24-426E-897D-E15ED02FA0C1}',
	'IGeneric' : '{27A86788-8B85-40CF-BE7F-BA915103A7DB}',
	'IGenericBase' : '{E4EEC972-0593-48B2-A1C7-551AD072EFD8}',
	'ISubSystem' : '{15C1E9DF-9C1A-404F-8E27-92B26D8F03AA}',
	'IReferenceFrame' : '{6A3295D9-E76B-473C-9655-23B7B1CBD671}',
	'IVector' : '{918CAF9A-7A62-4EC4-B45D-C259C997B661}',
	'IParametricPoint' : '{64B0B5B9-7662-40E8-B27C-9E42C3A158BF}',
	'IDouble' : '{2B5166E3-4B31-4607-B157-BE237A670336}',
	'IParametricValue' : '{3EEED3CE-62E8-4882-AAE6-4812B49927B5}',
	'IMarker' : '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}',
	'IMarkerFFlexData' : '{A2FF24EE-9333-4BFF-9DC3-27E495B46ACD}',
	'IMarkerRFlexData' : '{A2FF24EE-9333-4BFF-9DC3-17E496B46ACD}',
	'IBody' : '{26ED5B8E-FF6B-45C8-B6A9-0AA52F6A27B8}',
	'IGraphicProperty' : '{4C8B7C23-7D92-4D39-B530-5D93DC97F771}',
	'IMaterialProperty' : '{AE7DE34C-11E0-48FD-B8E5-423996FF7DF2}',
	'IGeometryCylinder' : '{5810C7E4-F627-4171-9D64-4BC97F14BB8E}',
	'IGeometrySolid' : '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EE}',
	'IGeometry' : '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EB}',
	'IGraphicPropertyGeometry' : '{E4CA4A74-65F0-4528-B4C4-420B7C3ECB25}',
	'IGeometryBox' : '{7B6155CC-0035-4449-9748-DFCE0956F5D9}',
	'IGeometrySphere' : '{2122DEE7-EE07-4A20-9B49-5A9AF4599906}',
	'IGeometryTorus' : '{92A1D6C1-1B9F-4A5A-AA3E-164073FAA5FB}',
	'IGeometryPrism' : '{CD73C8BF-C8F4-451C-BE3F-E7E06BA247FD}',
	'IGeometryCone' : '{1A304704-02AE-4939-8CD1-0DBCDE3F526B}',
	'IGeometryLink' : '{AD48AFB0-D8CA-4168-B727-A352242BDFEE}',
	'IGeometryCircle' : '{4B132713-20F9-475D-B175-CED5735E2825}',
	'IGeometryWire' : '{07DEC20D-9506-49E3-BF94-8CD7C78FA1EC}',
	'IGeometrySpline' : '{159B4280-8FD8-4847-884B-84EC26F963FA}',
	'IPointCollection' : '{6BEF9B6B-4708-445E-A3B5-0D65BA69F749}',
	'IGeometryOutline' : '{31C17D32-0501-4F95-96DC-5ED97F6994A6}',
	'IGeometryArc' : '{6615A98C-4753-43E7-BFC6-D7E2EC7D1737}',
	'IAnimationDataScaling' : '{7DD7CE3F-EAC8-4324-9107-C4EDFF055B1C}',
	'IAnimationDataScalingBase' : '{E1DCC3EC-B388-4C1D-855E-7286FDDB492D}',
	'IGeometrySplineSurface' : '{CC8BC813-F31C-4B25-A652-7B110AF60394}',
	'IGeometrySheet' : '{4C9FED71-423B-4E9F-90CA-20C6D5623EA3}',
	'IGeometryOutlineSurface' : '{733031A0-28F6-4064-9C40-FDC74CFA015E}',
	'IMarkerCollection' : '{6BEF9B6B-4708-445E-A3B5-0D65BA69F748}',
	'IGeometryWireCollection' : '{2B270F9A-2704-448E-809B-7B2B30ACEA84}',
	'IGeometrySheetCollection' : '{5E8000B9-06C7-46B2-A736-5D43904C8878}',
	'IGeometrySolidCollection' : '{DB55951D-F238-46D3-9C25-7B4B87F34D36}',
	'IGeometrySheetExtrude' : '{F7EEC6D6-7358-4316-AFEC-3457934B08F8}',
	'IGeometrySolidExtrude' : '{E14CE330-FB54-47C9-A917-4D1854365E86}',
	'IGeometrySheetSpin' : '{952BEF3F-0EA1-4F2B-9EA4-5214261533D2}',
	'IGeometrySolidSpin' : '{431767A5-5F84-411B-9BB4-E4B9EA14BBC4}',
	'IGeometrySheetSweep' : '{1820726B-54D0-4A1F-AEAB-284DEC6C1270}',
	'IGeometrySolidSweep' : '{FC825EA8-559A-4A73-9261-7EA500EC7CAB}',
	'IRoadData' : '{E5609BA3-3DA7-4A2D-8733-9F7FE13FC1F8}',
	'IParametricPointCollection' : '{65267578-7015-4BB5-BB65-F5F81CCEA244}',
	'IParametricValueCollection' : '{65267578-7015-4BB5-BB65-F5F81CCEA245}',
	'IGeometryArcRevolution' : '{CC63D830-4DFB-4DFC-920E-966E02DCCE51}',
	'IGeometryArcExtrusion' : '{7338A8FC-4CD7-472D-B764-578B96254856}',
	'IRoadDataCollection' : '{68A5A87D-7640-4F09-8D24-945200D2DB33}',
	'IGRoad' : '{C086655E-4B33-49E6-95F1-B1D1CA44E4B7}',
	'IGRoadCreationOption' : '{295776CE-69C8-4B65-800F-F458E26F7BA1}',
	'IGeometryShellCollection' : '{C6162712-FA98-4EF1-8B94-E326943E0626}',
	'IGeometryShell' : '{1E1952F0-7A7C-453F-BB98-38A23BAE1312}',
	'IGRoadCollection' : '{8AE3FA68-8066-412B-A1C9-9B360E8AFA35}',
	'IGeometryFaceSurface' : '{A376DBCC-6EA1-4170-97B7-7208ECE52A76}',
	'IGeometryEdgeCurve' : '{6FA36EFD-91A9-49CF-AC3F-595F8CDCD6AD}',
	'IGeometryFace' : '{C5D7538F-B727-4D10-9D7D-D743D92ACAB4}',
	'IGeometryEdge' : '{263D2898-9FED-4649-9CF5-8D043CC759A2}',
	'IPoint3D' : '{F67F5E56-F3F7-4249-BCBE-02B8D43716B0}',
	'IGenericCollection' : '{B6DDC3E3-6E9E-4E66-AE44-DB3EF6C216A7}',
	'IGeometryHelixCurve' : '{0FFFB2FB-E83D-431E-8769-1FCFDFBC6BD5}',
	'ISweepOption' : '{5099BF4D-2B9E-405B-A041-3D4760AE1AA9}',
	'IGeometrySolidChamfer' : '{7E1C6724-070E-41D1-A9F7-B771847EB47D}',
	'IChamferEdgeInfoCollection' : '{8FCE6A87-0E72-4BE8-89FB-3C074B7A50C5}',
	'IChamferEdgeInfo' : '{5503036B-EDA8-4408-B446-1931B03AA62E}',
	'IGeometryEdgeCollection' : '{C760B0C7-18A0-463E-BC13-07F6B3931B32}',
	'IGeometrySolidFillet' : '{409CE2D0-68BC-48D0-A001-6606020E41A6}',
	'IFilletEdgeInfoCollection' : '{573236E5-A4B3-42F2-A7A6-78D9F953BFC8}',
	'IFilletEdgeInfo' : '{5B71FC46-F5BB-4F40-B7D6-2D4CC543C7CF}',
	'IGeometrySolidShell' : '{93D1E2EB-3542-44C8-8EC3-C0E1653B6788}',
	'IGeometryFaceCollection' : '{B5FF572C-A887-464A-8C86-0E92F1ED744F}',
	'IShellOffsetFaceInfoCollection' : '{4F28E7D4-55B5-4398-8AB5-B7586AE44EDE}',
	'IShellOffsetFaceInfo' : '{43AE7027-38BD-4D92-B4BC-5567F9078524}',
	'IGeometrySolidBoolean' : '{4F1C59D0-B6B4-43F8-8CBC-7253AB041F42}',
	'IImprintEdgeOption' : '{48DE281A-8619-46F6-BAA5-3A429A0AF97E}',
	'IFillHoleOption' : '{D8018357-9575-4F97-8419-1014B23B06C5}',
	'IGeometrySheetUVSurface' : '{ED1BD483-9372-48BA-BBC2-AC349EB1C6F3}',
	'IMFTireImportOption' : '{E7F5FA95-8A22-45D7-AA32-2C4499D519A2}',
	'IEulerAngle' : '{9D220527-04EE-4578-9457-4C2061D099E7}',
	'IGraphicPropertySubSystem' : '{262F564D-8707-4A0E-806C-D9FB21F59324}',
	'IJointRevolute' : '{C7C30CF1-9E5C-426B-AE1F-C5637BC8D5FB}',
	'IJoint' : '{B9173DAD-05DD-4037-9367-726DDDEE988E}',
	'IConnectorAttribute' : '{27A86788-8B85-40CF-BE7F-BA915103A7DD}',
	'IGenericAttribute' : '{27A86788-8B85-40CF-BE7F-BA915103A7DC}',
	'IMotion' : '{47F4E55C-4291-4251-866A-98A74112D266}',
	'IExpression' : '{81E4B241-3167-4FAE-B0FE-3ED5AB7F4040}',
	'IUserSubroutine' : '{9573C3F4-958E-4EC2-B9E6-C4660433CFA3}',
	'IJointRevoluteFrictionWithoutStiction' : '{C654350F-C53C-474B-84B2-BC299BEA04F2}',
	'IJointFrictionWithoutStiction' : '{405F5B7F-682D-40AB-B9CC-5E09AAC8BF83}',
	'IJointRevoluteFriction' : '{CDA07E89-2140-42DA-A007-75583AA575E5}',
	'IJointFriction' : '{BE02BB82-F407-44ED-B185-CA270C5842A0}',
	'IJointTranslational' : '{07101FE1-4B6A-41CA-9FC7-3C48C9E96785}',
	'IJointTranslationalFrictionWithoutStiction' : '{3292939F-35E3-469F-A8AE-7F9234326B1E}',
	'IJointTranslationalFriction' : '{731EF6BF-6DC5-4959-84E0-1EE7C685A1CE}',
	'IJointSpherical' : '{206C4CC5-E70A-4F3C-A4FD-2D6B2EEE1F5C}',
	'IJointSphericalFriction' : '{199E4653-210A-455C-96DA-27DF86C5DA3E}',
	'IJointCylindrical' : '{D89EE062-1A3F-4FE7-915C-8A7D7F4792F0}',
	'IJointCylindricalFriction' : '{AB2E1933-9D6C-4FD7-BCA5-BA0D2EC0DD3D}',
	'IJointUniversal' : '{04E99CDC-64B1-42F2-B981-EC91848B39F6}',
	'IJointUniversalFriction' : '{CCE1F47D-59F6-428E-91D7-65F36D446B05}',
	'IJointPlanar' : '{773D31B3-5540-4497-BDCA-D37CCC40E156}',
	'IJointPlanarFriction' : '{95F6FC38-9D37-4059-8037-EFF038F04EA5}',
	'IJointScrew' : '{B6C04DD4-89BA-4A08-9071-9AACD3E4C0F9}',
	'IJointScrewFriction' : '{990B9133-FDB7-45DB-8398-8297BC724D91}',
	'IJointFixed' : '{2EA33375-B6DB-4F9D-A3B3-B86A2C91BEDA}',
	'IJointDistance' : '{2ED808B6-A890-4694-A37C-E8E2E44BCD41}',
	'IJointAtpoint' : '{ADED6BDA-80A4-4D1E-824C-A999B0402A7B}',
	'IJointInline' : '{002ECEBC-0D7D-40DE-9F2C-D6F88E5511C6}',
	'IJointInplane' : '{C3E0D80D-8C4D-4DA8-9206-5A7A83435267}',
	'IJointInplaneFriction' : '{B47415D4-8717-42A3-9F74-965184E44C73}',
	'IJointOrientation' : '{92F68679-E702-4BF4-B969-546E11BECC63}',
	'IJointParallel' : '{54101676-0190-44F2-837F-2CFAFB8A11D2}',
	'IJointPerpendicular' : '{40F4819B-5A72-4CFE-9F7E-1695A1B677C7}',
	'IJointPointOnCurve' : '{0D91A8ED-1B56-40C7-8FFB-26542A0F4269}',
	'IMotionPointOnCurve' : '{7568D19B-7019-4ABF-A18C-D41C8C39E7CE}',
	'IJointPointOnCurveFriction' : '{8EFA806E-0CE1-406E-B3FA-E2CAFB1D3308}',
	'IConstraintCurveSegmentOption' : '{C86088A5-C799-4E35-B0F6-78D60243C544}',
	'IJointCurveOnCurve' : '{6BFD6484-AB37-4091-B840-C453D24051CC}',
	'IJointConstantVelocity' : '{F6D08556-99B4-4761-89E0-D33956DF5776}',
	'IPairConstraintCoupler' : '{842283CC-9684-472C-B061-E5659014C471}',
	'IPairConstraint' : '{E53E6E5E-C0B7-4F3F-9E32-30F47855CD70}',
	'IPairConstraintGear' : '{D56837DF-B61D-4938-A25D-02A0B67193C8}',
	'IJointCartesianMotion' : '{57A77C2D-5956-4DBE-9893-820E0EA5D034}',
	'IJointOnOff' : '{3509B78D-BB70-4F88-8A48-BA852F3658BE}',
	'IForceSpring' : '{164BA461-0C9B-4F07-A027-C82298891823}',
	'IForce' : '{EB73DE47-2BB8-46BD-A904-F61BCBC59D1F}',
	'IForceSpringGraphic' : '{61C55C33-4716-4D26-8030-F9D29ED8B413}',
	'IForceGraphic' : '{50844B7B-2D6F-4A4B-AF50-AA5AEF747EC7}',
	'ICoefficient' : '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}',
	'ISpline' : '{E76144D2-715D-41B4-A432-7B6C7F713FC2}',
	'IForceAxial' : '{960E870B-7C56-4FF5-95DE-E735C751F8E7}',
	'IForceTranslational' : '{F82CE83C-C5A5-42AC-867F-079BCF051FEA}',
	'IForceRotational' : '{52BFD3CF-4CC9-4ECE-9B8C-E7A28EF9D4A2}',
	'IForceScrew' : '{D996544C-0967-4920-83A6-A3C9FB97E153}',
	'IForceBushing' : '{54235E69-8E20-4D33-8A62-623CCD9C87AA}',
	'IForceMatrix' : '{5A0426A9-C465-48F7-9456-7F6008CB0A7E}',
	'IForceSpringRotational' : '{C5BE32C6-5CCE-4BAF-B0BF-4B304BFEC2C5}',
	'IForceAxialRotational' : '{65024A22-5502-4F83-83D1-8C0EE0CE1712}',
	'IForceBeam' : '{53C512F8-E418-4F65-9755-271B9A6F59E0}',
	'IBeamCrossSection' : '{557175E7-72DD-447A-8DB1-319593C34BDC}',
	'IForcePlate' : '{64E1EBEB-71A0-4986-90F3-8C0B77A3F88B}',
	'IForceTire' : '{57CC4E39-380C-40B8-AE7F-0908ADC0DB18}',
	'ITireProperty' : '{DB995C7E-C9C4-4C2E-87C7-E4A030ED91AA}',
	'ITireOutputChannel' : '{AB5A2925-53BC-4D4C-8101-4C3774E2DDEC}',
	'IContactSolidContact' : '{C2F210C5-9B2E-43C2-9C50-D57E01780041}',
	'IContact' : '{91AB2D2E-7A8B-42CE-87AC-9C4EA40EDEB0}',
	'IContactAttribute' : '{27A86788-8B85-40CF-BE7F-BA915103A7DE}',
	'IContactProperty' : '{E1DBBE0C-5542-4AB1-A7EB-C8E1FAE51DC1}',
	'IContactFriction' : '{AEFD7238-F1DD-48C2-8329-E5571C291B25}',
	'IContactPropertyAdditional' : '{C3560239-62ED-43FF-A94D-71801A2886E4}',
	'IContactSolidPatchOption' : '{D479C190-172F-42AC-A4B9-5B3AFE1EB81B}',
	'IContactCircleToCurve' : '{6A2CED63-4688-4E31-8407-68455039C297}',
	'IContactCurveSegmentOption' : '{6CA887BC-2FC1-4E9C-AD2D-EEF830EA8FDF}',
	'IContactSphereToSphere' : '{5333486D-3939-4899-8357-62D694707155}',
	'IContactSphereInSphere' : '{B60FAA98-F5DA-4096-B282-4C015E99D9A8}',
	'IContactSphereToSurface' : '{8928F336-9095-49D0-9AAC-1D599E3F26A7}',
	'IContactSurfacePatchOption' : '{66C811FA-3964-4522-8E0B-770FB18880F5}',
	'IContactExtendedSurfaceToSurface' : '{6495A425-79AC-40E6-8BF6-A95AA1A2D578}',
	'IContactExtendedSurfaceToSurfacePatchOption' : '{ED5F7902-56FD-482D-AEF2-D898A1EBFF1B}',
	'IContactCurveToCurve' : '{3710687E-E5C7-436E-8127-3ECAC2851397}',
	'IContactSphereToCylinder' : '{17DA0A15-1706-4346-8982-C0E9243F866E}',
	'IContactSphereToBox' : '{32D72143-2B38-4E05-921B-1A1F3282FEB1}',
	'IContactSphereToTorus' : '{15C4A86F-4FC5-4305-87EF-918AEB6C9B8D}',
	'IContactSphereInCylinder' : '{7A5148F6-528B-4BCD-A271-47F8842D6E6C}',
	'IContactSphereInBox' : '{EF263E7B-85A1-4B43-97F6-3BD08C9334DB}',
	'IContactSphereInTorus' : '{6D130ECF-C4B3-4E13-ABDC-7C6023E11A3B}',
	'IContactCircleToCircle' : '{EC57C6FE-34A6-456F-AE24-7A8AACD2E723}',
	'IContactCircleInCircle' : '{56C95894-62F4-4D51-B976-862FC3E711AB}',
	'IContactCam2D' : '{690A46F3-D9C2-4AFF-8493-1667E2AB01C8}',
	'ICam2DCurveSegmentOption' : '{8C139E48-EC46-477D-9754-D1449E4AF801}',
	'IContactCamLine2D' : '{59D79E1B-8BF5-4AA3-93F4-971C64745639}',
	'IContactCylinderToSurface' : '{2B0D7BEC-4344-49F3-BF7A-CFEB25A06BFC}',
	'IContactCylinderToCylinder' : '{CA52FC45-8B33-4AB7-BE25-8454F1C1CB57}',
	'IContactCylinderInCylinder' : '{D4E093C4-C608-4D7E-A620-25FA02B21B83}',
	'IContactConeInCone' : '{58994473-EE23-4CC2-9F1B-EC20B9398A03}',
	'IContactConeToCone' : '{60BF370A-91E7-47B9-8BBC-584843818988}',
	'IContactSphereToCone' : '{028811A2-89B0-4A54-B105-7682DC7D07DB}',
	'IContactConeToCylinder' : '{DA496635-4F2C-44AB-B59D-B2F1A6946C62}',
	'IContactSurfaceToSurface' : '{1D599359-EBA8-4D8D-A611-6EEBABBF5BB0}',
	'IContactSphereArcRevolution' : '{8B3A469C-6172-4F76-91BC-34C074A7754A}',
	'IContactSphereArcExtrude' : '{950986EE-CD2C-4719-A2C1-329FB478FA05}',
	'IContactSphereToArcRevolution' : '{2FACF09B-48C8-4A94-92D7-BF9F43647CB3}',
	'IContactSphereToArcExtrusion' : '{F535B5BD-3EC1-4774-AB37-BF8A82D076C1}',
	'IDesignVariable' : '{44DA6D75-D10A-48E2-8077-5D9B9293842D}',
	'IParametricPointConnector' : '{5A26F623-DA73-4531-884A-946494037A2B}',
	'IParametricValueConnector' : '{3C8942E4-0A9C-48DB-AFF4-882202E3BA8A}',
	'IVariableEquation' : '{1ECE0007-85A7-4F9B-AD9E-FEE2684A398E}',
	'IDifferentialEquation' : '{591F39F5-FBE0-49DF-83B6-6C0550D95A6A}',
	'IRequestStandard' : '{BAD8E0C8-CE5C-4AFD-88DE-427445F73C75}',
	'IRequestExpression' : '{70D93511-61EB-4AB6-80D8-B142DB3D7923}',
	'IRequestUserSubroutine' : '{F13A88C4-88A8-439B-B06A-A6827B3D4489}',
	'IPerformanceIndex' : '{EE9E8CFD-0A3D-4FC6-9575-95469B60A138}',
	'IContactSphereInCone' : '{4D515A5F-EE68-43AD-8C60-6AD2B9DF8D09}',
	'IScopeAngle' : '{1448FE04-1A3C-495A-8944-98789C61326C}',
	'IScope' : '{586914A9-8C8A-42ED-8202-DF1CC8BFE47B}',
	'IScopePointToPoint' : '{1814A992-158F-4A63-A3E6-1E69A1587342}',
	'IScopeExpression' : '{7B3C335F-849F-4A18-BE0E-BDE3BACFA0EE}',
	'IScopeEntity' : '{45D6BAEA-6C9A-4878-9F5D-F0AE79A1EE31}',
	'IScopeGapInterference' : '{1DD425A8-DC9F-4E7C-94CF-A3D1F90D8A75}',
	'IToolkit' : '{15C1E9DF-9C1A-404F-8E27-92B26D8F03A0}',
	'ISensorPointInBox' : '{EDFD7500-666A-4F69-AA26-194A60C955E3}',
	'ISensor' : '{6D4E47C0-B7BC-4559-9CA0-25B0C957AFAC}',
	'ISensorLaser' : '{BFB1489A-2BE8-4AE0-833F-21B119D4260C}',
	'ISensorLaserEx' : '{BD5CA94C-B210-4D55-BB8C-438744A1E3EB}',
	'ISensorPatchOption' : '{09917A88-72B3-47A8-98CD-679E220D7F78}',
	'IContactCylinderToBox' : '{B006015D-09FE-4F3A-9922-B74E7C4036A0}',
	'ISubSystemCollection' : '{D1451F25-D6A2-42B7-8DDF-D0F221D5FBFE}',
	'IBodyCollection' : '{E26794CD-5D37-4617-BB5A-1AD85F3ED410}',
	'IJointCollection' : '{58A5314F-24D0-4D53-AE77-23B42CB9FAC7}',
	'IPairConstraintCollection' : '{B21BD336-10F0-43BF-9EA3-E2258E754366}',
	'IForceCollection' : '{B1359BD3-DD1C-4A0C-A16D-466CC9B0B4F5}',
	'IContactCollection' : '{1B5A2AF8-F3DB-49CC-A112-21B0CD80C8EE}',
	'IRequestStandardCollection' : '{65267578-7015-4BB5-BB65-F5F81CCEA240}',
	'IRequestUserSubroutineCollection' : '{65267578-7015-4BB5-BB65-F5F81CCEA241}',
	'IRequestExpressionCollection' : '{65267578-7015-4BB5-BB65-F5F81CCEA242}',
	'ISplineCollection' : '{65267578-7015-4BB5-BB65-F5F81CCEA243}',
	'IExpressionCollection' : '{65267578-7015-4BB5-BB65-F5F81CCEA246}',
	'IUserSubroutineCollection' : '{65267578-7015-4BB5-BB65-F5F81CCEA247}',
	'IVariableEquationCollection' : '{65267578-7015-4BB5-BB65-F5F81CCEA248}',
	'IDifferentialEquationCollection' : '{65267578-7015-4BB5-BB65-F5F81CCEA249}',
	'IScopeCollection' : '{65267578-7015-4BB5-BB65-F5F81CCEA24A}',
	'IPerformanceIndexCollection' : '{CC76CCE9-4D71-4DE9-8A4C-490E57C838C2}',
	'IDesignVariableCollection' : '{EA742AA0-0675-4ABA-8145-C00A73F97747}',
	'IString' : '{16DE1264-A4F7-4A8E-8F3C-E8B5210CB2D9}',
	'IStringCollection' : '{C9116090-BCBB-453C-A283-49E55A3344CA}',
	'IDesignStudy' : '{A02C4C84-917B-448D-9137-1019967E7138}',
	'IDesignStudyDV' : '{818D411D-45CE-4542-8D89-4D96D21430C8}',
	'IDesignStudyPI' : '{ED61CDBA-7239-48AD-B844-7A4DE43F7811}',
	'IDesignStudyDVCollection' : '{52942D12-4250-4501-9149-1840338D9948}',
	'IDesignStudyPICollection' : '{B93EF2CA-4779-42DC-9EFE-1B50F427E2E7}',
	'IContactGeo' : '{6CAFE73E-3494-41D3-AB87-13A59CB8CF2A}',
	'IContactGeoPatchOption' : '{DB6C5A9A-F2A7-408D-A4FD-05AC659F5C89}',
	'IContactGeoSurface' : '{8B44BA63-1871-4074-863D-1434F7D479B7}',
	'IContactGeoCurve' : '{0BD26902-38C3-4C3F-B2B5-6038996BC174}',
	'IContactGeoCurveSegmentOption' : '{2D0EBBBE-395D-465E-84F4-30290538BA38}',
	'IGeneralConstraint' : '{DF992967-ADE4-434E-B7BA-DDA5B595BD44}',
	'IGeneralConstraintCollection' : '{F63C5479-BE87-431C-963C-DD79C9F33259}',
	'ICameraSetting' : '{0FDF3022-5D98-4409-B16E-716A01915002}',
	'ICameraStandard' : '{A9BF34D4-2D0F-42BA-8BD7-F434174F8122}',
	'ICamera' : '{D8203265-F837-4B2B-BE98-881FB736D5DA}',
	'ICameraFollowing' : '{5F14103C-4413-473C-AA57-EE7E7CEB49F1}',
	'ICameraRiding' : '{29D57E5C-B425-41A4-8091-39435FC986EB}',
	'ICameraMulti' : '{5D98AE76-1263-4692-A393-F11F2C6547E1}',
	'ICameraMovingCollection' : '{98902028-58CE-4E5F-9E74-D6AEB21B63C8}',
	'ICameraMoving' : '{9B56E0F6-2127-4DE3-BE75-D1F6979D8F5D}',
	'ICameraCollection' : '{E5B195C5-4D78-4441-884C-AF54C1E10F1B}',
	'IParametricPointConnectorCollection' : '{2BA7F21D-5583-410B-8ABB-6AAE09261D4F}',
	'IParametricValueConnectorCollection' : '{25597944-74D4-4F24-8145-CD11FE87BCC8}',
	'IManager' : '{4E50DC20-53E0-4B65-86B2-E6C6FF8C1A52}',
	'IGroupJointCMotion' : '{3B70037A-B51F-46A7-AB2B-971989A06803}',
	'IGroup' : '{979CB058-D7B2-4D8B-9EA5-26C16B8C5547}',
	'IJointInCMotionGroup' : '{C8B1C218-2E2D-4A3C-8D54-1A876AFABF03}',
	'ISensorCollection' : '{507862D8-28C1-423F-9D91-7BE66F10A6DF}',
	'IGroupBeam' : '{E30FCF4E-CD27-4F1D-B463-B7CD3E2AEF12}',
	'IInitialVelocity' : '{15F99EF9-5DE4-423B-9F3B-86C8FA8D2A2A}',
	'IScenarioAnalysisProperty2' : '{5FC5751E-20BB-455D-B127-751487DB0768}',
	'IScenarioCollection2' : '{1E5FBACB-348B-4483-9E16-F653F5A21CF7}',
	'IScenario2' : '{A25F296D-01DC-4AD2-BEC8-67B2EF4C99DD}',
	'IScenarioSimulationDynamic2' : '{819BAA2D-0DFF-490C-A3C7-5FF91590FD1E}',
	'IScenarioSimulationStatic2' : '{22898563-4CD6-4D2F-9862-05006C178494}',
	'IScenarioSimulationEigenvalue2' : '{26550F0C-C58A-41CD-9A52-4EC1448C3E91}',
	'IScenarioSimulationFrequencyResponse2' : '{1DFB8E58-D3D2-4D57-B10D-304E10FA9CCD}',
	'IScenarioIntegrationDDA2' : '{8CE8A4EC-13F2-437E-8834-FD48DB9D609A}',
	'IScenarioIntegrationIMG2' : '{680EBB11-DF6A-4BB0-9F7D-24C76FB16BE1}',
	'IScenarioIntegrationHYB2' : '{7C151D45-EF3F-4C46-9F72-77E78BC4F5C6}',
	'IScenarioIntegrationTRK2' : '{E308F573-419A-4A53-8B0C-1351BACEBE4B}',
	'IScenarioEquilibrium2' : '{3FADE3FB-0EC0-4467-B9C8-17548393F352}',
	'IScenarioActivate2' : '{C4C5B81A-3AF6-48A0-80BF-6E40789D1290}',
	'IScenarioDeactivate2' : '{F8AAF1F0-C97B-4387-9CC4-6AA41DECC60F}',
	'IScenarioEigenParameter2' : '{71863406-3B7D-46D3-B9FA-2FA8E1AD8254}',
	'IScenarioFRAParameter2' : '{9365F2E3-E085-4C23-930F-DF99569638FF}',
	'IScenarioIntegrationADV' : '{B8E9A36E-121C-4225-9F0C-843F5216B394}',
	'IContactGeoCurveToSurface' : '{53B9175B-11B0-4E63-B525-8062109E72D5}',
	'IGroupGeneral' : '{3A5D8137-A29F-4A12-BADB-578397A6A582}',
	'IContactUVSurface' : '{50DC0F54-508C-4B1A-825F-EEF9288B6828}',
	'IContactUVPatchOption' : '{713E6396-E6D2-4DBF-8780-142AB7259685}',
	'IGroupGeneralCollection' : '{20D998FD-D089-43D4-B682-F84D247B6FB2}',
	'IJointPointOnSurface' : '{C50A037D-F57E-4236-9597-ED57084B0581}',
	'IConstraintUVPatchOption' : '{6822B8AE-A40F-474E-A2FA-39B3BBCBD54C}',
	'IDOE' : '{0EECEDE2-6ADD-4945-9061-B3B8D138FC12}',
	'IDOEDesignVariable' : '{D0ADE6A0-6A94-4C03-B0F5-4B98D463252E}',
	'IDOEDesignVariableValueCollection' : '{302A8078-C3FF-413F-AF69-2648ECD8CD2A}',
	'IDOEDesignVariableValue' : '{08856E23-B2D6-4A74-99B5-9E53EE3392E2}',
	'IDOEPerformanceIndex' : '{8792A78A-E960-4DD6-B668-178EFAE4A565}',
	'IDOEPerformanceIndexValueCollection' : '{6F40B1D9-17D6-40FA-BB27-A03900F7004F}',
	'IDOEPerformanceIndexValue' : '{5F8A9E07-44ED-44D4-944C-3775C142375E}',
	'IDOESimulation' : '{71978C47-3750-43BF-8D42-6E9AA5F9CD84}',
	'IDOEResultSheet' : '{7460DFBF-6A85-45E4-933E-F880997ABD9E}',
	'IWorkingPlane' : '{7EE8FD42-208D-4F80-B89A-297D54D686DA}',
	'IPlotDocument' : '{6D5C247F-C9B3-4E75-9FAC-B6847EFFB254}',
	'ICampbellDiagram' : '{2BB11C40-A053-4367-9C20-DE894FB04B41}',
	'ICampbellDiagramInput' : '{9AA65539-9E1F-4F0D-96BA-EA01E83BEDD8}',
	'ICampbellDiagramSignal' : '{A9259987-929F-434E-97EA-0DEE7B57D88C}',
	'ICampbellDiagramPlot' : '{22FB7957-FCFB-4FCE-8E40-81C1B7829C79}',
	'ICustomView' : '{0F88BBEF-C77F-472D-9936-E84B77F9756A}',
	'IModelSetting' : '{0B9DFF92-6648-4BB9-83BA-9C6443B2F2CD}',
	'IAnimationControl' : '{918A0CB3-A5E0-4A9D-906E-D4DF3C194530}',
	'IModelSettingFlexibility' : '{021CF62C-20FB-4D9B-8C0B-89E4C73CE14C}',
	'IModelSettingFlexibilityFFlex' : '{470BF1F3-2ADB-44D0-A820-C88165387DD1}',
	'IModelSettingFlexibilityRFlex' : '{38DEE9F7-E829-461E-A2FA-7AB93E5AE392}',
	'IStrainStressOutputFileSetting' : '{350C9018-D3B8-4D6B-B9EC-271CE461FDC0}',
	'IModelSettingFlexibilityFlexible' : '{D8DF157B-E900-4ED1-8A7A-36FD7611B889}',
	'IModelSettingPlot' : '{AB76BF02-4EA9-4EC3-AF0E-3B42300415CD}',
	'IModelSettingDatabase' : '{4DFAE9F4-7DC9-469C-9FEF-6DBB2575E0CA}',
	'IModelSettingLight' : '{B81B4D27-0B09-4FCD-B29B-55CCCF9E45DD}',
	'ILightControlCollection' : '{4C7152BE-060E-4299-865E-FDD285928BDC}',
	'ILightControl' : '{2D204501-DF2E-4EAA-90E7-02756A698739}',
	'IModelSettingDefault' : '{75368D13-6E62-4893-A825-339547DA46C4}',
	'IModelSettingCAD' : '{EED70022-9601-4CFC-B6A1-BADDE4A5A4B1}',
	'ITranslatorImportOptions' : '{FE0C7461-8AFD-47CA-A284-C05BD15B68FC}',
	'ITranslatorExportOptions' : '{BF6D6355-72CE-4B22-B038-CDEAA00F7CE8}',
	'IModelSettingGeneral' : '{83A06AD8-8A05-4627-823B-E6C5C9716634}',
	'IBackgroundColor' : '{1972ACE7-FAA6-4C64-A067-C0B2EB23C93A}',
	'IModelSettingDisplay' : '{845806A7-7BB3-4643-878D-CE4247682409}',
	'IModelProperty' : '{54B0F80C-BD55-4F49-8E1A-D1D840603430}',
	'IIntegratorProperty' : '{B789D55C-FB99-4E33-A4C3-AFDD631598CE}',
	'IEquilibriumProperty' : '{19BE442B-70CF-499D-9A4C-B6A3256CDD32}',
	'IEigenValueProperty' : '{54CB2134-5515-4D88-B997-71E72B9D7FFA}',
	'ICommonAnalysisProperty' : '{82ADFBAE-2220-4034-A55A-45CA75777ACF}',
	'IScenarioAnalysisProperty' : '{F212FA3B-9005-4F21-8513-893B10A6D8C7}',
	'IScenarioCollection' : '{4F34AAB3-4060-4BF7-AEAC-6B348267BB3D}',
	'IScenario' : '{F5E81BAC-818D-4484-8F07-73FC13F44C82}',
	'IScenarioAnalysisTool' : '{955125C7-1D7D-4D86-8DC7-85B3A459DA55}',
	'IScenarioSimulationDynamic' : '{BB2EB111-0323-4B54-B0E9-B24757D1C5E3}',
	'IScenarioSimulationStatic' : '{703335D3-4FFB-4973-B3CC-F2150716A970}',
	'IScenarioSimulationEigenvalue' : '{9D73DB69-F99F-45F5-9A29-2F8661214C67}',
	'IScenarioSimulationFrequencyResponse' : '{0F8B6060-98A3-4734-968D-FE9919D96B20}',
	'IScenarioIntegrationDDA' : '{FD461A28-C99A-4BA7-B816-260FE7E0950E}',
	'IScenarioIntegrationIMG' : '{2B48E9C0-40F9-48D4-AA5C-BBB99D0DD8BD}',
	'IScenarioIntegrationHYB' : '{879C1DAE-86EC-47C7-81C0-B02F3628F46F}',
	'IScenarioIntegrationTRK' : '{F013ED05-BDE6-493B-B4FC-7584C250C5FC}',
	'IScenarioEquilibrium' : '{BF4C8308-7B3B-41AE-A799-3C51380A5931}',
	'IScenarioActivate' : '{4C3D72C7-FCA5-4C7A-8763-603E86EB359F}',
	'IScenarioDeactivate' : '{37FD2978-18F9-4D8C-9F36-B571FA460491}',
	'IScenarioEigenParameter' : '{82AE0C9E-3F21-4838-965B-C87D06833B63}',
	'IScenarioFRAParameter' : '{F13554D8-3EBD-4AF2-AAFB-11FF4B4756D7}',
	'IFrequencyResponseProperty' : '{7C4DC70C-432E-4059-9983-3628D55F94BD}',
	'IUnit' : '{09A65909-6FBB-488A-9726-D320F5666395}',
	'IMaterialPropertyCollection' : '{FB97F4A3-BD4F-42B9-80B7-B755FDC154BD}',
	'IAnimation' : '{5AEA7149-EE08-4B4E-B593-5AD90B54E3E6}',
	'IAnimationSaveOption' : '{4DD0F877-22B8-433A-AE68-970E0F497F95}',
	'IUtility' : '{512577A8-E193-4449-8C6B-A2D59EDBFCF0}',
	'IObjectControl' : '{21BE44B2-CA0C-4C78-8EB3-B3CA8BDE0726}',
	'IMeasure' : '{50C894D7-EA63-455B-B693-E9AF8A66E7CB}',
	'IMassProperty' : '{931EE5BD-3011-4120-AC01-FC90D67BF3C0}',
	'IMeasureDistanceResult' : '{BE0FEA7A-B50D-48D9-A803-A198B40539A5}',
	'IMeasureCircularGeometryResult' : '{CE7C473B-D7DB-4232-A2F1-41C059C9E0AD}',
	'ICuttingPlane' : '{47FC98DE-E7C5-46F0-B2C3-4FAB19AA38AB}',
	'IPattern' : '{23C82686-D1A0-4821-B9EE-F8D0CA03DF32}',
	'IRelationMap' : '{5A99CECC-EA9D-4687-8156-FF398A176E63}',
	'IDevelopement' : '{C65A8D10-195A-4939-8359-D7DEC09DC500}',
	'IFileImportOption' : '{6EA01552-F3C2-4CB5-B537-5F25196A168D}',
	'IFileImportOptionCATIA' : '{93B51291-F47B-4BAA-80D3-91123DD4E277}',
	'IFileImportOptionSTEP' : '{9631DE3F-C76B-4D7E-AACE-1E7135DACBEF}',
	'ILayerSetting' : '{33584AC3-5F2D-4DD9-826E-1BA921B395D0}',
	'ILayerCollection' : '{3741CF5D-7BBB-4AE9-9FFB-EA01CBB4C991}',
	'ILayer' : '{2A7142D5-69B9-47B0-9E94-6E657374E32E}',
	'IMessageFileSettings' : '{4E11EE8B-B596-40F8-8F43-1D1C22B3E1F1}',
	'IFileExportOption' : '{3D7C1E76-2C4C-480F-9D7B-5ECC6CB9FA2D}',
	'IFileExportOptionParasolid' : '{DFE62769-2AF5-408A-88CF-2D448D994C5F}',
	'IFileExportOptionACIS' : '{4A2D1222-69BA-4242-AE5E-E41051CC3621}',
	'IFileExportOptionCATIA' : '{49AFA7B6-FF16-4F40-8EA4-10867819AB71}',
	'IContourSetting' : '{E32E43FB-3356-4D36-8A51-C22DE7E397BF}',
	'IContourObjectCollection' : '{F03BC9EC-27E6-4FA7-92F8-AAD66AC41633}',
	'IContourObject' : '{F5AD2570-A7BF-4FEE-AC4E-68E977AE92EA}',
	'IPostAnalysis' : '{0FCAD09C-F67B-415A-BDB7-472A2AC90A59}',
	'IEigenMovement' : '{8F416D31-9366-4C4A-8395-3DFE99C21F1D}',
	'IApplicationSettings' : '{1FD6C87D-DBED-4C06-9B79-81FC253BC0A1}',
	'IModelDocumentCollection' : '{E26DEB95-B8AC-4666-8673-A9D41A440E2C}',
	'IPlotDocumentCollection' : '{AEE53265-74B8-4B8B-96B0-5EFB4F5AACB8}',
	'IRibbonManager' : '{81691554-1F9A-435A-9730-5C995EEFBDBD}',
	'IRibbonTab' : '{E4EE4AC4-95CE-4D3D-BBC6-1962F46A4CA2}',
	'IRibbonGroup' : '{CEFE050D-2992-4FDE-AD88-796B864516A0}',
	'IMenuControl' : '{B2F1CBE0-707D-4E0B-B080-546D4664CA2F}',
	'IToolbarManager' : '{E7C5258C-4AED-43E9-860F-877BF7B1F154}',
	'IToolbar' : '{E7C5258C-4AED-43E9-860F-877BF7B1F153}',
	'IAddIns' : '{47E89053-59DB-4697-AAC9-49817147248B}',
	'IeTemplate' : '{D497353F-2D45-4F8E-A649-0D0FABA3849D}',
	'IProcessNet' : '{2B53283A-FA48-4CFB-87A7-93D2FC9F8A5F}',
	'IGeometrySphereCollection' : '{0B006D28-70E2-4FBA-8A03-EC9EFC17C4E1}',
	'IPoint2D' : '{5C8577DA-B2F5-4C78-AF81-251818CE7223}',
	'IPoint2DWithRadius' : '{F7D1F12D-2871-468E-844A-AF31810CF78E}',
	'IPoint3DWithRadius' : '{3656AD01-A48C-43E5-A87A-567128C5129E}',
	'ISpecialParametricValue' : '{B58006F8-C5AC-4B97-8096-AF292F9DBE55}',
	'ISpecialParametricMarker' : '{01CC4DB0-561C-43AD-8D89-9485F040B0E5}',
	'IGraphicMaterial' : '{50D4EBE3-721F-4673-BEDE-56BC2583A64F}',
	'IGraphicPropertyBody' : '{CB9C645A-A4F6-4F6A-855A-6CBAC8B59BCB}',
	'IGeometrySolidScale' : '{A99EE858-C306-4027-A4FA-D86D0BCB6ADF}',
	'IGeometrySheetScale' : '{AF74F925-2234-4D16-ACFA-4206843C8854}',
	'IForceBushingProperty' : '{AB18E75F-DCAF-47DB-AD77-35CEDFB12273}',
	'IBeamCrossSectionCircular' : '{557175E7-72DD-447A-8DB1-319593C34BDD}',
	'IBeamCrossSectionElliptical' : '{557175E7-72DD-447A-8DB1-319593C34BDE}',
	'IBeamCrossSectionRectangular' : '{557175E7-72DD-447A-8DB1-319593C34BDF}',
	'IBeamCrossSectionThinWallTube' : '{557175E7-72DD-447A-8DB1-319593C34BE0}',
	'IBeamCrossSectionThickWallTube' : '{557175E7-72DD-447A-8DB1-319593C34BE1}',
	'IBeamCrossSectionHollowRectangualr' : '{557175E7-72DD-447A-8DB1-319593C34BE2}',
	'IBeamCrossSectionIBeam' : '{557175E7-72DD-447A-8DB1-319593C34BE3}',
	'IBeamCrossSectionTBeam' : '{557175E7-72DD-447A-8DB1-319593C34BE4}',
	'IForceTireMF' : '{F99074AA-1B0D-4BBB-BFDD-8C490375373F}',
	'IForceTireF' : '{0B8D6129-F228-4D87-9952-19E776DFE598}',
	'ITireSoilProperty' : '{4BF59E07-A035-4C63-9753-8CA8D16C02B1}',
	'IForceTireSoil' : '{023C2BF6-0000-41CA-8E0E-C3C047C16C73}',
	'ISensorEvent' : '{FB0F1AE7-3A1E-4326-B1BF-8225DA2BF11E}',
	'ISensorSpeed' : '{CCB7E742-F0DF-4F22-A377-04AA675FD281}',
	'ISensorDistance' : '{0CC3861B-CC2A-4402-9135-C8BC804EABBD}',
	'ISensorTension' : '{55C49622-A503-4651-BF1E-2A84CD9E27AB}',
	'ISensorTensionEx' : '{FD6480C3-36F4-4627-9725-6B484795DC39}',
	'ISensorSlip' : '{08675B12-6A90-4082-BAED-E54382FDF107}',
	'ISensorDisplacement' : '{08F5AF0B-ADB1-4AB4-8FAB-54ADCB9B5F36}',
	'IPoint2DCollection' : '{CDBA1369-C276-42F4-8C85-562A82C32E54}',
	'IPoint2DWithRadiusCollection' : '{2C0D70A3-D197-4781-940A-1672F3B420B9}',
	'IPoint3DCollection' : '{7AAA986F-35DD-4DCF-843A-CEBA8E09D33A}',
	'IPoint3DWithRadiusCollection' : '{0476BFAD-0FF1-4CA4-8B59-AE9E00842CCB}',
	'INode' : '{7D9BF8A1-6222-49D0-A13D-E07499CE4ADA}',
	'INodeReadOnly' : '{FAB91948-4286-4309-BAB1-225770C71E9E}',
	'IElement' : '{54A07879-AC7A-4B8D-BE87-914AD441CB69}',
	'IElementReadOnly' : '{A86C1699-A5C3-4169-9085-A10C0818A8A3}',
	'INodeBC' : '{28491D53-A2CA-45CC-80CC-CB1FB4E7A32C}',
	'INodeBCCollection' : '{7F035946-EE7C-4557-BAFC-000BDD366EDF}',
	'INodeOutput' : '{C3E2B430-98D5-4D24-BB8C-3B00F28373F3}',
	'INodeOutputCollection' : '{4549131A-72B6-45B1-9ABE-C2A32F250FED}',
}


