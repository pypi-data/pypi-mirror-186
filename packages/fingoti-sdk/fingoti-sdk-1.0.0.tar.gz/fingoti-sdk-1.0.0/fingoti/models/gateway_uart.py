# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class GatewayUart(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data': 'list[int]',
        'timestamp': 'datetime',
        'mode': 'int',
        'setup': 'UartSetup',
        'trigger': 'UartTrigger',
        'session': 'bool'
    }

    attribute_map = {
        'data': 'data',
        'timestamp': 'timestamp',
        'mode': 'mode',
        'setup': 'setup',
        'trigger': 'trigger',
        'session': 'session'
    }

    def __init__(self, data=None, timestamp=None, mode=None, setup=None, trigger=None, session=None, local_vars_configuration=None):  # noqa: E501
        """GatewayUart - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._data = None
        self._timestamp = None
        self._mode = None
        self._setup = None
        self._trigger = None
        self._session = None
        self.discriminator = None

        self.data = data
        if timestamp is not None:
            self.timestamp = timestamp
        if mode is not None:
            self.mode = mode
        if setup is not None:
            self.setup = setup
        if trigger is not None:
            self.trigger = trigger
        if session is not None:
            self.session = session

    @property
    def data(self):
        """Gets the data of this GatewayUart.  # noqa: E501


        :return: The data of this GatewayUart.  # noqa: E501
        :rtype: list[int]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this GatewayUart.


        :param data: The data of this GatewayUart.  # noqa: E501
        :type data: list[int]
        """

        self._data = data

    @property
    def timestamp(self):
        """Gets the timestamp of this GatewayUart.  # noqa: E501


        :return: The timestamp of this GatewayUart.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this GatewayUart.


        :param timestamp: The timestamp of this GatewayUart.  # noqa: E501
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def mode(self):
        """Gets the mode of this GatewayUart.  # noqa: E501


        :return: The mode of this GatewayUart.  # noqa: E501
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this GatewayUart.


        :param mode: The mode of this GatewayUart.  # noqa: E501
        :type mode: int
        """

        self._mode = mode

    @property
    def setup(self):
        """Gets the setup of this GatewayUart.  # noqa: E501


        :return: The setup of this GatewayUart.  # noqa: E501
        :rtype: UartSetup
        """
        return self._setup

    @setup.setter
    def setup(self, setup):
        """Sets the setup of this GatewayUart.


        :param setup: The setup of this GatewayUart.  # noqa: E501
        :type setup: UartSetup
        """

        self._setup = setup

    @property
    def trigger(self):
        """Gets the trigger of this GatewayUart.  # noqa: E501


        :return: The trigger of this GatewayUart.  # noqa: E501
        :rtype: UartTrigger
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this GatewayUart.


        :param trigger: The trigger of this GatewayUart.  # noqa: E501
        :type trigger: UartTrigger
        """

        self._trigger = trigger

    @property
    def session(self):
        """Gets the session of this GatewayUart.  # noqa: E501


        :return: The session of this GatewayUart.  # noqa: E501
        :rtype: bool
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this GatewayUart.


        :param session: The session of this GatewayUart.  # noqa: E501
        :type session: bool
        """

        self._session = session

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GatewayUart):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GatewayUart):
            return True

        return self.to_dict() != other.to_dict()
