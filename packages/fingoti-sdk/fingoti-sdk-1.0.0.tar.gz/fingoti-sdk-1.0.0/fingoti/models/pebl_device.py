# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class PeblDevice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'key': 'str',
        'support': 'DeviceSupport',
        'cloud': 'DeviceCloud',
        'uptime': 'DeviceUptime',
        'activity': 'bool',
        'colour': 'list[int]',
        'blink': 'DeviceBlink',
        'bus': 'DeviceBus',
        'power': 'DevicePower',
        'session': 'DeviceSession',
        'version': 'DeviceVersion',
        'location': 'DeviceLocation'
    }

    attribute_map = {
        'name': 'name',
        'key': 'key',
        'support': 'support',
        'cloud': 'cloud',
        'uptime': 'uptime',
        'activity': 'activity',
        'colour': 'colour',
        'blink': 'blink',
        'bus': 'bus',
        'power': 'power',
        'session': 'session',
        'version': 'version',
        'location': 'location'
    }

    def __init__(self, name=None, key=None, support=None, cloud=None, uptime=None, activity=None, colour=None, blink=None, bus=None, power=None, session=None, version=None, location=None, local_vars_configuration=None):  # noqa: E501
        """PeblDevice - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._key = None
        self._support = None
        self._cloud = None
        self._uptime = None
        self._activity = None
        self._colour = None
        self._blink = None
        self._bus = None
        self._power = None
        self._session = None
        self._version = None
        self._location = None
        self.discriminator = None

        self.name = name
        self.key = key
        if support is not None:
            self.support = support
        if cloud is not None:
            self.cloud = cloud
        if uptime is not None:
            self.uptime = uptime
        if activity is not None:
            self.activity = activity
        self.colour = colour
        if blink is not None:
            self.blink = blink
        if bus is not None:
            self.bus = bus
        if power is not None:
            self.power = power
        if session is not None:
            self.session = session
        if version is not None:
            self.version = version
        if location is not None:
            self.location = location

    @property
    def name(self):
        """Gets the name of this PeblDevice.  # noqa: E501


        :return: The name of this PeblDevice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PeblDevice.


        :param name: The name of this PeblDevice.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def key(self):
        """Gets the key of this PeblDevice.  # noqa: E501


        :return: The key of this PeblDevice.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this PeblDevice.


        :param key: The key of this PeblDevice.  # noqa: E501
        :type key: str
        """

        self._key = key

    @property
    def support(self):
        """Gets the support of this PeblDevice.  # noqa: E501


        :return: The support of this PeblDevice.  # noqa: E501
        :rtype: DeviceSupport
        """
        return self._support

    @support.setter
    def support(self, support):
        """Sets the support of this PeblDevice.


        :param support: The support of this PeblDevice.  # noqa: E501
        :type support: DeviceSupport
        """

        self._support = support

    @property
    def cloud(self):
        """Gets the cloud of this PeblDevice.  # noqa: E501


        :return: The cloud of this PeblDevice.  # noqa: E501
        :rtype: DeviceCloud
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this PeblDevice.


        :param cloud: The cloud of this PeblDevice.  # noqa: E501
        :type cloud: DeviceCloud
        """

        self._cloud = cloud

    @property
    def uptime(self):
        """Gets the uptime of this PeblDevice.  # noqa: E501


        :return: The uptime of this PeblDevice.  # noqa: E501
        :rtype: DeviceUptime
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this PeblDevice.


        :param uptime: The uptime of this PeblDevice.  # noqa: E501
        :type uptime: DeviceUptime
        """

        self._uptime = uptime

    @property
    def activity(self):
        """Gets the activity of this PeblDevice.  # noqa: E501


        :return: The activity of this PeblDevice.  # noqa: E501
        :rtype: bool
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this PeblDevice.


        :param activity: The activity of this PeblDevice.  # noqa: E501
        :type activity: bool
        """

        self._activity = activity

    @property
    def colour(self):
        """Gets the colour of this PeblDevice.  # noqa: E501


        :return: The colour of this PeblDevice.  # noqa: E501
        :rtype: list[int]
        """
        return self._colour

    @colour.setter
    def colour(self, colour):
        """Sets the colour of this PeblDevice.


        :param colour: The colour of this PeblDevice.  # noqa: E501
        :type colour: list[int]
        """

        self._colour = colour

    @property
    def blink(self):
        """Gets the blink of this PeblDevice.  # noqa: E501


        :return: The blink of this PeblDevice.  # noqa: E501
        :rtype: DeviceBlink
        """
        return self._blink

    @blink.setter
    def blink(self, blink):
        """Sets the blink of this PeblDevice.


        :param blink: The blink of this PeblDevice.  # noqa: E501
        :type blink: DeviceBlink
        """

        self._blink = blink

    @property
    def bus(self):
        """Gets the bus of this PeblDevice.  # noqa: E501


        :return: The bus of this PeblDevice.  # noqa: E501
        :rtype: DeviceBus
        """
        return self._bus

    @bus.setter
    def bus(self, bus):
        """Sets the bus of this PeblDevice.


        :param bus: The bus of this PeblDevice.  # noqa: E501
        :type bus: DeviceBus
        """

        self._bus = bus

    @property
    def power(self):
        """Gets the power of this PeblDevice.  # noqa: E501


        :return: The power of this PeblDevice.  # noqa: E501
        :rtype: DevicePower
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this PeblDevice.


        :param power: The power of this PeblDevice.  # noqa: E501
        :type power: DevicePower
        """

        self._power = power

    @property
    def session(self):
        """Gets the session of this PeblDevice.  # noqa: E501


        :return: The session of this PeblDevice.  # noqa: E501
        :rtype: DeviceSession
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this PeblDevice.


        :param session: The session of this PeblDevice.  # noqa: E501
        :type session: DeviceSession
        """

        self._session = session

    @property
    def version(self):
        """Gets the version of this PeblDevice.  # noqa: E501


        :return: The version of this PeblDevice.  # noqa: E501
        :rtype: DeviceVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PeblDevice.


        :param version: The version of this PeblDevice.  # noqa: E501
        :type version: DeviceVersion
        """

        self._version = version

    @property
    def location(self):
        """Gets the location of this PeblDevice.  # noqa: E501


        :return: The location of this PeblDevice.  # noqa: E501
        :rtype: DeviceLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PeblDevice.


        :param location: The location of this PeblDevice.  # noqa: E501
        :type location: DeviceLocation
        """

        self._location = location

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeblDevice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PeblDevice):
            return True

        return self.to_dict() != other.to_dict()
