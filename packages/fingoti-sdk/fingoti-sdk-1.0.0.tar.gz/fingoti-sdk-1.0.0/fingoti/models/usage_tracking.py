# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class UsageTracking(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'usage_id': 'str',
        'organisation_id': 'str',
        'day': 'datetime',
        'device_id': 'str',
        'total': 'int',
        'unknown': 'int',
        'device_activity': 'int',
        'device_balance': 'int',
        'device_blink': 'int',
        'device_brightness': 'int',
        'device_bus': 'int',
        'device_claim': 'int',
        'device_cloud': 'int',
        'device_colour': 'int',
        'device_factory': 'int',
        'device_information': 'int',
        'device_key': 'int',
        'device_poke': 'int',
        'device_power': 'int',
        'device_serial': 'int',
        'device_setup': 'int',
        'device_sleep': 'int',
        'device_temperature': 'int',
        'device_time': 'int',
        'device_update': 'int',
        'device_uptime': 'int',
        'device_version': 'int',
        'network_traffic': 'int',
        'network_internet': 'int',
        'network_ip': 'int',
        'network_mac': 'int',
        'i2c_data': 'int',
        'i2c_detect': 'int',
        'i2c_setup': 'int',
        'gpio_direction': 'int',
        'gpio_pulse': 'int',
        'gpio_state': 'int',
        'gpio_toggle': 'int',
        'timer_interval': 'int',
        'timer_request': 'int',
        'timer_status': 'int',
        'wifi_credentials': 'int',
        'wifi_detect': 'int',
        'wifi_status': 'int',
        'uart_data': 'int',
        'uart_mode': 'int',
        'uart_session': 'int',
        'uart_setup': 'int',
        'uart_trigger': 'int',
        'schedule_cron': 'int',
        'schedule_request': 'int',
        'schedule_setup': 'int',
        'schedule_status': 'int',
        'mqtt_certificate': 'int',
        'mqtt_session': 'int',
        'mqtt_setup': 'int',
        'mqtt_status': 'int',
        'node_address': 'int',
        'node_data': 'int',
        'node_detect': 'int',
        'node_enable': 'int',
        'node_identify': 'int',
        'node_information': 'int',
        'node_latch': 'int',
        'node_power': 'int',
        'node_setup': 'int'
    }

    attribute_map = {
        'usage_id': 'usageId',
        'organisation_id': 'organisationId',
        'day': 'day',
        'device_id': 'deviceId',
        'total': 'total',
        'unknown': 'unknown',
        'device_activity': 'deviceActivity',
        'device_balance': 'deviceBalance',
        'device_blink': 'deviceBlink',
        'device_brightness': 'deviceBrightness',
        'device_bus': 'deviceBus',
        'device_claim': 'deviceClaim',
        'device_cloud': 'deviceCloud',
        'device_colour': 'deviceColour',
        'device_factory': 'deviceFactory',
        'device_information': 'deviceInformation',
        'device_key': 'deviceKey',
        'device_poke': 'devicePoke',
        'device_power': 'devicePower',
        'device_serial': 'deviceSerial',
        'device_setup': 'deviceSetup',
        'device_sleep': 'deviceSleep',
        'device_temperature': 'deviceTemperature',
        'device_time': 'deviceTime',
        'device_update': 'deviceUpdate',
        'device_uptime': 'deviceUptime',
        'device_version': 'deviceVersion',
        'network_traffic': 'networkTraffic',
        'network_internet': 'networkInternet',
        'network_ip': 'networkIp',
        'network_mac': 'networkMac',
        'i2c_data': 'i2cData',
        'i2c_detect': 'i2cDetect',
        'i2c_setup': 'i2cSetup',
        'gpio_direction': 'gpioDirection',
        'gpio_pulse': 'gpioPulse',
        'gpio_state': 'gpioState',
        'gpio_toggle': 'gpioToggle',
        'timer_interval': 'timerInterval',
        'timer_request': 'timerRequest',
        'timer_status': 'timerStatus',
        'wifi_credentials': 'wifiCredentials',
        'wifi_detect': 'wifiDetect',
        'wifi_status': 'wifiStatus',
        'uart_data': 'uartData',
        'uart_mode': 'uartMode',
        'uart_session': 'uartSession',
        'uart_setup': 'uartSetup',
        'uart_trigger': 'uartTrigger',
        'schedule_cron': 'scheduleCron',
        'schedule_request': 'scheduleRequest',
        'schedule_setup': 'scheduleSetup',
        'schedule_status': 'scheduleStatus',
        'mqtt_certificate': 'mqttCertificate',
        'mqtt_session': 'mqttSession',
        'mqtt_setup': 'mqttSetup',
        'mqtt_status': 'mqttStatus',
        'node_address': 'nodeAddress',
        'node_data': 'nodeData',
        'node_detect': 'nodeDetect',
        'node_enable': 'nodeEnable',
        'node_identify': 'nodeIdentify',
        'node_information': 'nodeInformation',
        'node_latch': 'nodeLatch',
        'node_power': 'nodePower',
        'node_setup': 'nodeSetup'
    }

    def __init__(self, usage_id=None, organisation_id=None, day=None, device_id=None, total=None, unknown=None, device_activity=None, device_balance=None, device_blink=None, device_brightness=None, device_bus=None, device_claim=None, device_cloud=None, device_colour=None, device_factory=None, device_information=None, device_key=None, device_poke=None, device_power=None, device_serial=None, device_setup=None, device_sleep=None, device_temperature=None, device_time=None, device_update=None, device_uptime=None, device_version=None, network_traffic=None, network_internet=None, network_ip=None, network_mac=None, i2c_data=None, i2c_detect=None, i2c_setup=None, gpio_direction=None, gpio_pulse=None, gpio_state=None, gpio_toggle=None, timer_interval=None, timer_request=None, timer_status=None, wifi_credentials=None, wifi_detect=None, wifi_status=None, uart_data=None, uart_mode=None, uart_session=None, uart_setup=None, uart_trigger=None, schedule_cron=None, schedule_request=None, schedule_setup=None, schedule_status=None, mqtt_certificate=None, mqtt_session=None, mqtt_setup=None, mqtt_status=None, node_address=None, node_data=None, node_detect=None, node_enable=None, node_identify=None, node_information=None, node_latch=None, node_power=None, node_setup=None, local_vars_configuration=None):  # noqa: E501
        """UsageTracking - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._usage_id = None
        self._organisation_id = None
        self._day = None
        self._device_id = None
        self._total = None
        self._unknown = None
        self._device_activity = None
        self._device_balance = None
        self._device_blink = None
        self._device_brightness = None
        self._device_bus = None
        self._device_claim = None
        self._device_cloud = None
        self._device_colour = None
        self._device_factory = None
        self._device_information = None
        self._device_key = None
        self._device_poke = None
        self._device_power = None
        self._device_serial = None
        self._device_setup = None
        self._device_sleep = None
        self._device_temperature = None
        self._device_time = None
        self._device_update = None
        self._device_uptime = None
        self._device_version = None
        self._network_traffic = None
        self._network_internet = None
        self._network_ip = None
        self._network_mac = None
        self._i2c_data = None
        self._i2c_detect = None
        self._i2c_setup = None
        self._gpio_direction = None
        self._gpio_pulse = None
        self._gpio_state = None
        self._gpio_toggle = None
        self._timer_interval = None
        self._timer_request = None
        self._timer_status = None
        self._wifi_credentials = None
        self._wifi_detect = None
        self._wifi_status = None
        self._uart_data = None
        self._uart_mode = None
        self._uart_session = None
        self._uart_setup = None
        self._uart_trigger = None
        self._schedule_cron = None
        self._schedule_request = None
        self._schedule_setup = None
        self._schedule_status = None
        self._mqtt_certificate = None
        self._mqtt_session = None
        self._mqtt_setup = None
        self._mqtt_status = None
        self._node_address = None
        self._node_data = None
        self._node_detect = None
        self._node_enable = None
        self._node_identify = None
        self._node_information = None
        self._node_latch = None
        self._node_power = None
        self._node_setup = None
        self.discriminator = None

        if usage_id is not None:
            self.usage_id = usage_id
        if organisation_id is not None:
            self.organisation_id = organisation_id
        if day is not None:
            self.day = day
        self.device_id = device_id
        if total is not None:
            self.total = total
        if unknown is not None:
            self.unknown = unknown
        if device_activity is not None:
            self.device_activity = device_activity
        if device_balance is not None:
            self.device_balance = device_balance
        if device_blink is not None:
            self.device_blink = device_blink
        if device_brightness is not None:
            self.device_brightness = device_brightness
        if device_bus is not None:
            self.device_bus = device_bus
        if device_claim is not None:
            self.device_claim = device_claim
        if device_cloud is not None:
            self.device_cloud = device_cloud
        if device_colour is not None:
            self.device_colour = device_colour
        if device_factory is not None:
            self.device_factory = device_factory
        if device_information is not None:
            self.device_information = device_information
        if device_key is not None:
            self.device_key = device_key
        if device_poke is not None:
            self.device_poke = device_poke
        if device_power is not None:
            self.device_power = device_power
        if device_serial is not None:
            self.device_serial = device_serial
        if device_setup is not None:
            self.device_setup = device_setup
        if device_sleep is not None:
            self.device_sleep = device_sleep
        if device_temperature is not None:
            self.device_temperature = device_temperature
        if device_time is not None:
            self.device_time = device_time
        if device_update is not None:
            self.device_update = device_update
        if device_uptime is not None:
            self.device_uptime = device_uptime
        if device_version is not None:
            self.device_version = device_version
        if network_traffic is not None:
            self.network_traffic = network_traffic
        if network_internet is not None:
            self.network_internet = network_internet
        if network_ip is not None:
            self.network_ip = network_ip
        if network_mac is not None:
            self.network_mac = network_mac
        if i2c_data is not None:
            self.i2c_data = i2c_data
        if i2c_detect is not None:
            self.i2c_detect = i2c_detect
        if i2c_setup is not None:
            self.i2c_setup = i2c_setup
        if gpio_direction is not None:
            self.gpio_direction = gpio_direction
        if gpio_pulse is not None:
            self.gpio_pulse = gpio_pulse
        if gpio_state is not None:
            self.gpio_state = gpio_state
        if gpio_toggle is not None:
            self.gpio_toggle = gpio_toggle
        if timer_interval is not None:
            self.timer_interval = timer_interval
        if timer_request is not None:
            self.timer_request = timer_request
        if timer_status is not None:
            self.timer_status = timer_status
        if wifi_credentials is not None:
            self.wifi_credentials = wifi_credentials
        if wifi_detect is not None:
            self.wifi_detect = wifi_detect
        if wifi_status is not None:
            self.wifi_status = wifi_status
        if uart_data is not None:
            self.uart_data = uart_data
        if uart_mode is not None:
            self.uart_mode = uart_mode
        if uart_session is not None:
            self.uart_session = uart_session
        if uart_setup is not None:
            self.uart_setup = uart_setup
        if uart_trigger is not None:
            self.uart_trigger = uart_trigger
        if schedule_cron is not None:
            self.schedule_cron = schedule_cron
        if schedule_request is not None:
            self.schedule_request = schedule_request
        if schedule_setup is not None:
            self.schedule_setup = schedule_setup
        if schedule_status is not None:
            self.schedule_status = schedule_status
        if mqtt_certificate is not None:
            self.mqtt_certificate = mqtt_certificate
        if mqtt_session is not None:
            self.mqtt_session = mqtt_session
        if mqtt_setup is not None:
            self.mqtt_setup = mqtt_setup
        if mqtt_status is not None:
            self.mqtt_status = mqtt_status
        if node_address is not None:
            self.node_address = node_address
        if node_data is not None:
            self.node_data = node_data
        if node_detect is not None:
            self.node_detect = node_detect
        if node_enable is not None:
            self.node_enable = node_enable
        if node_identify is not None:
            self.node_identify = node_identify
        if node_information is not None:
            self.node_information = node_information
        if node_latch is not None:
            self.node_latch = node_latch
        if node_power is not None:
            self.node_power = node_power
        if node_setup is not None:
            self.node_setup = node_setup

    @property
    def usage_id(self):
        """Gets the usage_id of this UsageTracking.  # noqa: E501


        :return: The usage_id of this UsageTracking.  # noqa: E501
        :rtype: str
        """
        return self._usage_id

    @usage_id.setter
    def usage_id(self, usage_id):
        """Sets the usage_id of this UsageTracking.


        :param usage_id: The usage_id of this UsageTracking.  # noqa: E501
        :type usage_id: str
        """

        self._usage_id = usage_id

    @property
    def organisation_id(self):
        """Gets the organisation_id of this UsageTracking.  # noqa: E501


        :return: The organisation_id of this UsageTracking.  # noqa: E501
        :rtype: str
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this UsageTracking.


        :param organisation_id: The organisation_id of this UsageTracking.  # noqa: E501
        :type organisation_id: str
        """

        self._organisation_id = organisation_id

    @property
    def day(self):
        """Gets the day of this UsageTracking.  # noqa: E501


        :return: The day of this UsageTracking.  # noqa: E501
        :rtype: datetime
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this UsageTracking.


        :param day: The day of this UsageTracking.  # noqa: E501
        :type day: datetime
        """

        self._day = day

    @property
    def device_id(self):
        """Gets the device_id of this UsageTracking.  # noqa: E501


        :return: The device_id of this UsageTracking.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this UsageTracking.


        :param device_id: The device_id of this UsageTracking.  # noqa: E501
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def total(self):
        """Gets the total of this UsageTracking.  # noqa: E501


        :return: The total of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this UsageTracking.


        :param total: The total of this UsageTracking.  # noqa: E501
        :type total: int
        """

        self._total = total

    @property
    def unknown(self):
        """Gets the unknown of this UsageTracking.  # noqa: E501


        :return: The unknown of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._unknown

    @unknown.setter
    def unknown(self, unknown):
        """Sets the unknown of this UsageTracking.


        :param unknown: The unknown of this UsageTracking.  # noqa: E501
        :type unknown: int
        """

        self._unknown = unknown

    @property
    def device_activity(self):
        """Gets the device_activity of this UsageTracking.  # noqa: E501


        :return: The device_activity of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_activity

    @device_activity.setter
    def device_activity(self, device_activity):
        """Sets the device_activity of this UsageTracking.


        :param device_activity: The device_activity of this UsageTracking.  # noqa: E501
        :type device_activity: int
        """

        self._device_activity = device_activity

    @property
    def device_balance(self):
        """Gets the device_balance of this UsageTracking.  # noqa: E501


        :return: The device_balance of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_balance

    @device_balance.setter
    def device_balance(self, device_balance):
        """Sets the device_balance of this UsageTracking.


        :param device_balance: The device_balance of this UsageTracking.  # noqa: E501
        :type device_balance: int
        """

        self._device_balance = device_balance

    @property
    def device_blink(self):
        """Gets the device_blink of this UsageTracking.  # noqa: E501


        :return: The device_blink of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_blink

    @device_blink.setter
    def device_blink(self, device_blink):
        """Sets the device_blink of this UsageTracking.


        :param device_blink: The device_blink of this UsageTracking.  # noqa: E501
        :type device_blink: int
        """

        self._device_blink = device_blink

    @property
    def device_brightness(self):
        """Gets the device_brightness of this UsageTracking.  # noqa: E501


        :return: The device_brightness of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_brightness

    @device_brightness.setter
    def device_brightness(self, device_brightness):
        """Sets the device_brightness of this UsageTracking.


        :param device_brightness: The device_brightness of this UsageTracking.  # noqa: E501
        :type device_brightness: int
        """

        self._device_brightness = device_brightness

    @property
    def device_bus(self):
        """Gets the device_bus of this UsageTracking.  # noqa: E501


        :return: The device_bus of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_bus

    @device_bus.setter
    def device_bus(self, device_bus):
        """Sets the device_bus of this UsageTracking.


        :param device_bus: The device_bus of this UsageTracking.  # noqa: E501
        :type device_bus: int
        """

        self._device_bus = device_bus

    @property
    def device_claim(self):
        """Gets the device_claim of this UsageTracking.  # noqa: E501


        :return: The device_claim of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_claim

    @device_claim.setter
    def device_claim(self, device_claim):
        """Sets the device_claim of this UsageTracking.


        :param device_claim: The device_claim of this UsageTracking.  # noqa: E501
        :type device_claim: int
        """

        self._device_claim = device_claim

    @property
    def device_cloud(self):
        """Gets the device_cloud of this UsageTracking.  # noqa: E501


        :return: The device_cloud of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_cloud

    @device_cloud.setter
    def device_cloud(self, device_cloud):
        """Sets the device_cloud of this UsageTracking.


        :param device_cloud: The device_cloud of this UsageTracking.  # noqa: E501
        :type device_cloud: int
        """

        self._device_cloud = device_cloud

    @property
    def device_colour(self):
        """Gets the device_colour of this UsageTracking.  # noqa: E501


        :return: The device_colour of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_colour

    @device_colour.setter
    def device_colour(self, device_colour):
        """Sets the device_colour of this UsageTracking.


        :param device_colour: The device_colour of this UsageTracking.  # noqa: E501
        :type device_colour: int
        """

        self._device_colour = device_colour

    @property
    def device_factory(self):
        """Gets the device_factory of this UsageTracking.  # noqa: E501


        :return: The device_factory of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_factory

    @device_factory.setter
    def device_factory(self, device_factory):
        """Sets the device_factory of this UsageTracking.


        :param device_factory: The device_factory of this UsageTracking.  # noqa: E501
        :type device_factory: int
        """

        self._device_factory = device_factory

    @property
    def device_information(self):
        """Gets the device_information of this UsageTracking.  # noqa: E501


        :return: The device_information of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_information

    @device_information.setter
    def device_information(self, device_information):
        """Sets the device_information of this UsageTracking.


        :param device_information: The device_information of this UsageTracking.  # noqa: E501
        :type device_information: int
        """

        self._device_information = device_information

    @property
    def device_key(self):
        """Gets the device_key of this UsageTracking.  # noqa: E501


        :return: The device_key of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_key

    @device_key.setter
    def device_key(self, device_key):
        """Sets the device_key of this UsageTracking.


        :param device_key: The device_key of this UsageTracking.  # noqa: E501
        :type device_key: int
        """

        self._device_key = device_key

    @property
    def device_poke(self):
        """Gets the device_poke of this UsageTracking.  # noqa: E501


        :return: The device_poke of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_poke

    @device_poke.setter
    def device_poke(self, device_poke):
        """Sets the device_poke of this UsageTracking.


        :param device_poke: The device_poke of this UsageTracking.  # noqa: E501
        :type device_poke: int
        """

        self._device_poke = device_poke

    @property
    def device_power(self):
        """Gets the device_power of this UsageTracking.  # noqa: E501


        :return: The device_power of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_power

    @device_power.setter
    def device_power(self, device_power):
        """Sets the device_power of this UsageTracking.


        :param device_power: The device_power of this UsageTracking.  # noqa: E501
        :type device_power: int
        """

        self._device_power = device_power

    @property
    def device_serial(self):
        """Gets the device_serial of this UsageTracking.  # noqa: E501


        :return: The device_serial of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_serial

    @device_serial.setter
    def device_serial(self, device_serial):
        """Sets the device_serial of this UsageTracking.


        :param device_serial: The device_serial of this UsageTracking.  # noqa: E501
        :type device_serial: int
        """

        self._device_serial = device_serial

    @property
    def device_setup(self):
        """Gets the device_setup of this UsageTracking.  # noqa: E501


        :return: The device_setup of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_setup

    @device_setup.setter
    def device_setup(self, device_setup):
        """Sets the device_setup of this UsageTracking.


        :param device_setup: The device_setup of this UsageTracking.  # noqa: E501
        :type device_setup: int
        """

        self._device_setup = device_setup

    @property
    def device_sleep(self):
        """Gets the device_sleep of this UsageTracking.  # noqa: E501


        :return: The device_sleep of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_sleep

    @device_sleep.setter
    def device_sleep(self, device_sleep):
        """Sets the device_sleep of this UsageTracking.


        :param device_sleep: The device_sleep of this UsageTracking.  # noqa: E501
        :type device_sleep: int
        """

        self._device_sleep = device_sleep

    @property
    def device_temperature(self):
        """Gets the device_temperature of this UsageTracking.  # noqa: E501


        :return: The device_temperature of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_temperature

    @device_temperature.setter
    def device_temperature(self, device_temperature):
        """Sets the device_temperature of this UsageTracking.


        :param device_temperature: The device_temperature of this UsageTracking.  # noqa: E501
        :type device_temperature: int
        """

        self._device_temperature = device_temperature

    @property
    def device_time(self):
        """Gets the device_time of this UsageTracking.  # noqa: E501


        :return: The device_time of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_time

    @device_time.setter
    def device_time(self, device_time):
        """Sets the device_time of this UsageTracking.


        :param device_time: The device_time of this UsageTracking.  # noqa: E501
        :type device_time: int
        """

        self._device_time = device_time

    @property
    def device_update(self):
        """Gets the device_update of this UsageTracking.  # noqa: E501


        :return: The device_update of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_update

    @device_update.setter
    def device_update(self, device_update):
        """Sets the device_update of this UsageTracking.


        :param device_update: The device_update of this UsageTracking.  # noqa: E501
        :type device_update: int
        """

        self._device_update = device_update

    @property
    def device_uptime(self):
        """Gets the device_uptime of this UsageTracking.  # noqa: E501


        :return: The device_uptime of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_uptime

    @device_uptime.setter
    def device_uptime(self, device_uptime):
        """Sets the device_uptime of this UsageTracking.


        :param device_uptime: The device_uptime of this UsageTracking.  # noqa: E501
        :type device_uptime: int
        """

        self._device_uptime = device_uptime

    @property
    def device_version(self):
        """Gets the device_version of this UsageTracking.  # noqa: E501


        :return: The device_version of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._device_version

    @device_version.setter
    def device_version(self, device_version):
        """Sets the device_version of this UsageTracking.


        :param device_version: The device_version of this UsageTracking.  # noqa: E501
        :type device_version: int
        """

        self._device_version = device_version

    @property
    def network_traffic(self):
        """Gets the network_traffic of this UsageTracking.  # noqa: E501


        :return: The network_traffic of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._network_traffic

    @network_traffic.setter
    def network_traffic(self, network_traffic):
        """Sets the network_traffic of this UsageTracking.


        :param network_traffic: The network_traffic of this UsageTracking.  # noqa: E501
        :type network_traffic: int
        """

        self._network_traffic = network_traffic

    @property
    def network_internet(self):
        """Gets the network_internet of this UsageTracking.  # noqa: E501


        :return: The network_internet of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._network_internet

    @network_internet.setter
    def network_internet(self, network_internet):
        """Sets the network_internet of this UsageTracking.


        :param network_internet: The network_internet of this UsageTracking.  # noqa: E501
        :type network_internet: int
        """

        self._network_internet = network_internet

    @property
    def network_ip(self):
        """Gets the network_ip of this UsageTracking.  # noqa: E501


        :return: The network_ip of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._network_ip

    @network_ip.setter
    def network_ip(self, network_ip):
        """Sets the network_ip of this UsageTracking.


        :param network_ip: The network_ip of this UsageTracking.  # noqa: E501
        :type network_ip: int
        """

        self._network_ip = network_ip

    @property
    def network_mac(self):
        """Gets the network_mac of this UsageTracking.  # noqa: E501


        :return: The network_mac of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._network_mac

    @network_mac.setter
    def network_mac(self, network_mac):
        """Sets the network_mac of this UsageTracking.


        :param network_mac: The network_mac of this UsageTracking.  # noqa: E501
        :type network_mac: int
        """

        self._network_mac = network_mac

    @property
    def i2c_data(self):
        """Gets the i2c_data of this UsageTracking.  # noqa: E501


        :return: The i2c_data of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._i2c_data

    @i2c_data.setter
    def i2c_data(self, i2c_data):
        """Sets the i2c_data of this UsageTracking.


        :param i2c_data: The i2c_data of this UsageTracking.  # noqa: E501
        :type i2c_data: int
        """

        self._i2c_data = i2c_data

    @property
    def i2c_detect(self):
        """Gets the i2c_detect of this UsageTracking.  # noqa: E501


        :return: The i2c_detect of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._i2c_detect

    @i2c_detect.setter
    def i2c_detect(self, i2c_detect):
        """Sets the i2c_detect of this UsageTracking.


        :param i2c_detect: The i2c_detect of this UsageTracking.  # noqa: E501
        :type i2c_detect: int
        """

        self._i2c_detect = i2c_detect

    @property
    def i2c_setup(self):
        """Gets the i2c_setup of this UsageTracking.  # noqa: E501


        :return: The i2c_setup of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._i2c_setup

    @i2c_setup.setter
    def i2c_setup(self, i2c_setup):
        """Sets the i2c_setup of this UsageTracking.


        :param i2c_setup: The i2c_setup of this UsageTracking.  # noqa: E501
        :type i2c_setup: int
        """

        self._i2c_setup = i2c_setup

    @property
    def gpio_direction(self):
        """Gets the gpio_direction of this UsageTracking.  # noqa: E501


        :return: The gpio_direction of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._gpio_direction

    @gpio_direction.setter
    def gpio_direction(self, gpio_direction):
        """Sets the gpio_direction of this UsageTracking.


        :param gpio_direction: The gpio_direction of this UsageTracking.  # noqa: E501
        :type gpio_direction: int
        """

        self._gpio_direction = gpio_direction

    @property
    def gpio_pulse(self):
        """Gets the gpio_pulse of this UsageTracking.  # noqa: E501


        :return: The gpio_pulse of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._gpio_pulse

    @gpio_pulse.setter
    def gpio_pulse(self, gpio_pulse):
        """Sets the gpio_pulse of this UsageTracking.


        :param gpio_pulse: The gpio_pulse of this UsageTracking.  # noqa: E501
        :type gpio_pulse: int
        """

        self._gpio_pulse = gpio_pulse

    @property
    def gpio_state(self):
        """Gets the gpio_state of this UsageTracking.  # noqa: E501


        :return: The gpio_state of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._gpio_state

    @gpio_state.setter
    def gpio_state(self, gpio_state):
        """Sets the gpio_state of this UsageTracking.


        :param gpio_state: The gpio_state of this UsageTracking.  # noqa: E501
        :type gpio_state: int
        """

        self._gpio_state = gpio_state

    @property
    def gpio_toggle(self):
        """Gets the gpio_toggle of this UsageTracking.  # noqa: E501


        :return: The gpio_toggle of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._gpio_toggle

    @gpio_toggle.setter
    def gpio_toggle(self, gpio_toggle):
        """Sets the gpio_toggle of this UsageTracking.


        :param gpio_toggle: The gpio_toggle of this UsageTracking.  # noqa: E501
        :type gpio_toggle: int
        """

        self._gpio_toggle = gpio_toggle

    @property
    def timer_interval(self):
        """Gets the timer_interval of this UsageTracking.  # noqa: E501


        :return: The timer_interval of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._timer_interval

    @timer_interval.setter
    def timer_interval(self, timer_interval):
        """Sets the timer_interval of this UsageTracking.


        :param timer_interval: The timer_interval of this UsageTracking.  # noqa: E501
        :type timer_interval: int
        """

        self._timer_interval = timer_interval

    @property
    def timer_request(self):
        """Gets the timer_request of this UsageTracking.  # noqa: E501


        :return: The timer_request of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._timer_request

    @timer_request.setter
    def timer_request(self, timer_request):
        """Sets the timer_request of this UsageTracking.


        :param timer_request: The timer_request of this UsageTracking.  # noqa: E501
        :type timer_request: int
        """

        self._timer_request = timer_request

    @property
    def timer_status(self):
        """Gets the timer_status of this UsageTracking.  # noqa: E501


        :return: The timer_status of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._timer_status

    @timer_status.setter
    def timer_status(self, timer_status):
        """Sets the timer_status of this UsageTracking.


        :param timer_status: The timer_status of this UsageTracking.  # noqa: E501
        :type timer_status: int
        """

        self._timer_status = timer_status

    @property
    def wifi_credentials(self):
        """Gets the wifi_credentials of this UsageTracking.  # noqa: E501


        :return: The wifi_credentials of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._wifi_credentials

    @wifi_credentials.setter
    def wifi_credentials(self, wifi_credentials):
        """Sets the wifi_credentials of this UsageTracking.


        :param wifi_credentials: The wifi_credentials of this UsageTracking.  # noqa: E501
        :type wifi_credentials: int
        """

        self._wifi_credentials = wifi_credentials

    @property
    def wifi_detect(self):
        """Gets the wifi_detect of this UsageTracking.  # noqa: E501


        :return: The wifi_detect of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._wifi_detect

    @wifi_detect.setter
    def wifi_detect(self, wifi_detect):
        """Sets the wifi_detect of this UsageTracking.


        :param wifi_detect: The wifi_detect of this UsageTracking.  # noqa: E501
        :type wifi_detect: int
        """

        self._wifi_detect = wifi_detect

    @property
    def wifi_status(self):
        """Gets the wifi_status of this UsageTracking.  # noqa: E501


        :return: The wifi_status of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._wifi_status

    @wifi_status.setter
    def wifi_status(self, wifi_status):
        """Sets the wifi_status of this UsageTracking.


        :param wifi_status: The wifi_status of this UsageTracking.  # noqa: E501
        :type wifi_status: int
        """

        self._wifi_status = wifi_status

    @property
    def uart_data(self):
        """Gets the uart_data of this UsageTracking.  # noqa: E501


        :return: The uart_data of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._uart_data

    @uart_data.setter
    def uart_data(self, uart_data):
        """Sets the uart_data of this UsageTracking.


        :param uart_data: The uart_data of this UsageTracking.  # noqa: E501
        :type uart_data: int
        """

        self._uart_data = uart_data

    @property
    def uart_mode(self):
        """Gets the uart_mode of this UsageTracking.  # noqa: E501


        :return: The uart_mode of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._uart_mode

    @uart_mode.setter
    def uart_mode(self, uart_mode):
        """Sets the uart_mode of this UsageTracking.


        :param uart_mode: The uart_mode of this UsageTracking.  # noqa: E501
        :type uart_mode: int
        """

        self._uart_mode = uart_mode

    @property
    def uart_session(self):
        """Gets the uart_session of this UsageTracking.  # noqa: E501


        :return: The uart_session of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._uart_session

    @uart_session.setter
    def uart_session(self, uart_session):
        """Sets the uart_session of this UsageTracking.


        :param uart_session: The uart_session of this UsageTracking.  # noqa: E501
        :type uart_session: int
        """

        self._uart_session = uart_session

    @property
    def uart_setup(self):
        """Gets the uart_setup of this UsageTracking.  # noqa: E501


        :return: The uart_setup of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._uart_setup

    @uart_setup.setter
    def uart_setup(self, uart_setup):
        """Sets the uart_setup of this UsageTracking.


        :param uart_setup: The uart_setup of this UsageTracking.  # noqa: E501
        :type uart_setup: int
        """

        self._uart_setup = uart_setup

    @property
    def uart_trigger(self):
        """Gets the uart_trigger of this UsageTracking.  # noqa: E501


        :return: The uart_trigger of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._uart_trigger

    @uart_trigger.setter
    def uart_trigger(self, uart_trigger):
        """Sets the uart_trigger of this UsageTracking.


        :param uart_trigger: The uart_trigger of this UsageTracking.  # noqa: E501
        :type uart_trigger: int
        """

        self._uart_trigger = uart_trigger

    @property
    def schedule_cron(self):
        """Gets the schedule_cron of this UsageTracking.  # noqa: E501


        :return: The schedule_cron of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._schedule_cron

    @schedule_cron.setter
    def schedule_cron(self, schedule_cron):
        """Sets the schedule_cron of this UsageTracking.


        :param schedule_cron: The schedule_cron of this UsageTracking.  # noqa: E501
        :type schedule_cron: int
        """

        self._schedule_cron = schedule_cron

    @property
    def schedule_request(self):
        """Gets the schedule_request of this UsageTracking.  # noqa: E501


        :return: The schedule_request of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._schedule_request

    @schedule_request.setter
    def schedule_request(self, schedule_request):
        """Sets the schedule_request of this UsageTracking.


        :param schedule_request: The schedule_request of this UsageTracking.  # noqa: E501
        :type schedule_request: int
        """

        self._schedule_request = schedule_request

    @property
    def schedule_setup(self):
        """Gets the schedule_setup of this UsageTracking.  # noqa: E501


        :return: The schedule_setup of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._schedule_setup

    @schedule_setup.setter
    def schedule_setup(self, schedule_setup):
        """Sets the schedule_setup of this UsageTracking.


        :param schedule_setup: The schedule_setup of this UsageTracking.  # noqa: E501
        :type schedule_setup: int
        """

        self._schedule_setup = schedule_setup

    @property
    def schedule_status(self):
        """Gets the schedule_status of this UsageTracking.  # noqa: E501


        :return: The schedule_status of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._schedule_status

    @schedule_status.setter
    def schedule_status(self, schedule_status):
        """Sets the schedule_status of this UsageTracking.


        :param schedule_status: The schedule_status of this UsageTracking.  # noqa: E501
        :type schedule_status: int
        """

        self._schedule_status = schedule_status

    @property
    def mqtt_certificate(self):
        """Gets the mqtt_certificate of this UsageTracking.  # noqa: E501


        :return: The mqtt_certificate of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._mqtt_certificate

    @mqtt_certificate.setter
    def mqtt_certificate(self, mqtt_certificate):
        """Sets the mqtt_certificate of this UsageTracking.


        :param mqtt_certificate: The mqtt_certificate of this UsageTracking.  # noqa: E501
        :type mqtt_certificate: int
        """

        self._mqtt_certificate = mqtt_certificate

    @property
    def mqtt_session(self):
        """Gets the mqtt_session of this UsageTracking.  # noqa: E501


        :return: The mqtt_session of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._mqtt_session

    @mqtt_session.setter
    def mqtt_session(self, mqtt_session):
        """Sets the mqtt_session of this UsageTracking.


        :param mqtt_session: The mqtt_session of this UsageTracking.  # noqa: E501
        :type mqtt_session: int
        """

        self._mqtt_session = mqtt_session

    @property
    def mqtt_setup(self):
        """Gets the mqtt_setup of this UsageTracking.  # noqa: E501


        :return: The mqtt_setup of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._mqtt_setup

    @mqtt_setup.setter
    def mqtt_setup(self, mqtt_setup):
        """Sets the mqtt_setup of this UsageTracking.


        :param mqtt_setup: The mqtt_setup of this UsageTracking.  # noqa: E501
        :type mqtt_setup: int
        """

        self._mqtt_setup = mqtt_setup

    @property
    def mqtt_status(self):
        """Gets the mqtt_status of this UsageTracking.  # noqa: E501


        :return: The mqtt_status of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._mqtt_status

    @mqtt_status.setter
    def mqtt_status(self, mqtt_status):
        """Sets the mqtt_status of this UsageTracking.


        :param mqtt_status: The mqtt_status of this UsageTracking.  # noqa: E501
        :type mqtt_status: int
        """

        self._mqtt_status = mqtt_status

    @property
    def node_address(self):
        """Gets the node_address of this UsageTracking.  # noqa: E501


        :return: The node_address of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._node_address

    @node_address.setter
    def node_address(self, node_address):
        """Sets the node_address of this UsageTracking.


        :param node_address: The node_address of this UsageTracking.  # noqa: E501
        :type node_address: int
        """

        self._node_address = node_address

    @property
    def node_data(self):
        """Gets the node_data of this UsageTracking.  # noqa: E501


        :return: The node_data of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._node_data

    @node_data.setter
    def node_data(self, node_data):
        """Sets the node_data of this UsageTracking.


        :param node_data: The node_data of this UsageTracking.  # noqa: E501
        :type node_data: int
        """

        self._node_data = node_data

    @property
    def node_detect(self):
        """Gets the node_detect of this UsageTracking.  # noqa: E501


        :return: The node_detect of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._node_detect

    @node_detect.setter
    def node_detect(self, node_detect):
        """Sets the node_detect of this UsageTracking.


        :param node_detect: The node_detect of this UsageTracking.  # noqa: E501
        :type node_detect: int
        """

        self._node_detect = node_detect

    @property
    def node_enable(self):
        """Gets the node_enable of this UsageTracking.  # noqa: E501


        :return: The node_enable of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._node_enable

    @node_enable.setter
    def node_enable(self, node_enable):
        """Sets the node_enable of this UsageTracking.


        :param node_enable: The node_enable of this UsageTracking.  # noqa: E501
        :type node_enable: int
        """

        self._node_enable = node_enable

    @property
    def node_identify(self):
        """Gets the node_identify of this UsageTracking.  # noqa: E501


        :return: The node_identify of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._node_identify

    @node_identify.setter
    def node_identify(self, node_identify):
        """Sets the node_identify of this UsageTracking.


        :param node_identify: The node_identify of this UsageTracking.  # noqa: E501
        :type node_identify: int
        """

        self._node_identify = node_identify

    @property
    def node_information(self):
        """Gets the node_information of this UsageTracking.  # noqa: E501


        :return: The node_information of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._node_information

    @node_information.setter
    def node_information(self, node_information):
        """Sets the node_information of this UsageTracking.


        :param node_information: The node_information of this UsageTracking.  # noqa: E501
        :type node_information: int
        """

        self._node_information = node_information

    @property
    def node_latch(self):
        """Gets the node_latch of this UsageTracking.  # noqa: E501


        :return: The node_latch of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._node_latch

    @node_latch.setter
    def node_latch(self, node_latch):
        """Sets the node_latch of this UsageTracking.


        :param node_latch: The node_latch of this UsageTracking.  # noqa: E501
        :type node_latch: int
        """

        self._node_latch = node_latch

    @property
    def node_power(self):
        """Gets the node_power of this UsageTracking.  # noqa: E501


        :return: The node_power of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._node_power

    @node_power.setter
    def node_power(self, node_power):
        """Sets the node_power of this UsageTracking.


        :param node_power: The node_power of this UsageTracking.  # noqa: E501
        :type node_power: int
        """

        self._node_power = node_power

    @property
    def node_setup(self):
        """Gets the node_setup of this UsageTracking.  # noqa: E501


        :return: The node_setup of this UsageTracking.  # noqa: E501
        :rtype: int
        """
        return self._node_setup

    @node_setup.setter
    def node_setup(self, node_setup):
        """Sets the node_setup of this UsageTracking.


        :param node_setup: The node_setup of this UsageTracking.  # noqa: E501
        :type node_setup: int
        """

        self._node_setup = node_setup

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsageTracking):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UsageTracking):
            return True

        return self.to_dict() != other.to_dict()
