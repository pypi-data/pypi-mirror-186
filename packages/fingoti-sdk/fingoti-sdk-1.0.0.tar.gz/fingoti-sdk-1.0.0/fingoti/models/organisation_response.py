# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class OrganisationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'success': 'bool',
        'id': 'str',
        'disabled': 'bool',
        'organisation_number': 'str',
        'organisation_name': 'str',
        'organisation_handle': 'str',
        'is_business': 'bool',
        'is_partner': 'bool',
        'partner_id': 'str',
        'main_contact': 'str',
        'main_address': 'str',
        'billing_contact': 'str',
        'billing_address': 'str',
        'delivery_contact': 'str',
        'delivery_address': 'str',
        'vat_number': 'str',
        'credit': 'float',
        'registered_on': 'datetime',
        'admin_role': 'str',
        'read_role': 'str'
    }

    attribute_map = {
        'success': 'success',
        'id': 'id',
        'disabled': 'disabled',
        'organisation_number': 'organisationNumber',
        'organisation_name': 'organisationName',
        'organisation_handle': 'organisationHandle',
        'is_business': 'isBusiness',
        'is_partner': 'isPartner',
        'partner_id': 'partnerId',
        'main_contact': 'mainContact',
        'main_address': 'mainAddress',
        'billing_contact': 'billingContact',
        'billing_address': 'billingAddress',
        'delivery_contact': 'deliveryContact',
        'delivery_address': 'deliveryAddress',
        'vat_number': 'vatNumber',
        'credit': 'credit',
        'registered_on': 'registeredOn',
        'admin_role': 'adminRole',
        'read_role': 'readRole'
    }

    def __init__(self, success=None, id=None, disabled=None, organisation_number=None, organisation_name=None, organisation_handle=None, is_business=None, is_partner=None, partner_id=None, main_contact=None, main_address=None, billing_contact=None, billing_address=None, delivery_contact=None, delivery_address=None, vat_number=None, credit=None, registered_on=None, admin_role=None, read_role=None, local_vars_configuration=None):  # noqa: E501
        """OrganisationResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._success = None
        self._id = None
        self._disabled = None
        self._organisation_number = None
        self._organisation_name = None
        self._organisation_handle = None
        self._is_business = None
        self._is_partner = None
        self._partner_id = None
        self._main_contact = None
        self._main_address = None
        self._billing_contact = None
        self._billing_address = None
        self._delivery_contact = None
        self._delivery_address = None
        self._vat_number = None
        self._credit = None
        self._registered_on = None
        self._admin_role = None
        self._read_role = None
        self.discriminator = None

        if success is not None:
            self.success = success
        if id is not None:
            self.id = id
        if disabled is not None:
            self.disabled = disabled
        self.organisation_number = organisation_number
        self.organisation_name = organisation_name
        self.organisation_handle = organisation_handle
        if is_business is not None:
            self.is_business = is_business
        if is_partner is not None:
            self.is_partner = is_partner
        self.partner_id = partner_id
        if main_contact is not None:
            self.main_contact = main_contact
        if main_address is not None:
            self.main_address = main_address
        if billing_contact is not None:
            self.billing_contact = billing_contact
        if billing_address is not None:
            self.billing_address = billing_address
        if delivery_contact is not None:
            self.delivery_contact = delivery_contact
        if delivery_address is not None:
            self.delivery_address = delivery_address
        self.vat_number = vat_number
        if credit is not None:
            self.credit = credit
        self.registered_on = registered_on
        if admin_role is not None:
            self.admin_role = admin_role
        if read_role is not None:
            self.read_role = read_role

    @property
    def success(self):
        """Gets the success of this OrganisationResponse.  # noqa: E501


        :return: The success of this OrganisationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this OrganisationResponse.


        :param success: The success of this OrganisationResponse.  # noqa: E501
        :type success: bool
        """

        self._success = success

    @property
    def id(self):
        """Gets the id of this OrganisationResponse.  # noqa: E501


        :return: The id of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganisationResponse.


        :param id: The id of this OrganisationResponse.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def disabled(self):
        """Gets the disabled of this OrganisationResponse.  # noqa: E501


        :return: The disabled of this OrganisationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this OrganisationResponse.


        :param disabled: The disabled of this OrganisationResponse.  # noqa: E501
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def organisation_number(self):
        """Gets the organisation_number of this OrganisationResponse.  # noqa: E501


        :return: The organisation_number of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._organisation_number

    @organisation_number.setter
    def organisation_number(self, organisation_number):
        """Sets the organisation_number of this OrganisationResponse.


        :param organisation_number: The organisation_number of this OrganisationResponse.  # noqa: E501
        :type organisation_number: str
        """

        self._organisation_number = organisation_number

    @property
    def organisation_name(self):
        """Gets the organisation_name of this OrganisationResponse.  # noqa: E501


        :return: The organisation_name of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._organisation_name

    @organisation_name.setter
    def organisation_name(self, organisation_name):
        """Sets the organisation_name of this OrganisationResponse.


        :param organisation_name: The organisation_name of this OrganisationResponse.  # noqa: E501
        :type organisation_name: str
        """

        self._organisation_name = organisation_name

    @property
    def organisation_handle(self):
        """Gets the organisation_handle of this OrganisationResponse.  # noqa: E501


        :return: The organisation_handle of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._organisation_handle

    @organisation_handle.setter
    def organisation_handle(self, organisation_handle):
        """Sets the organisation_handle of this OrganisationResponse.


        :param organisation_handle: The organisation_handle of this OrganisationResponse.  # noqa: E501
        :type organisation_handle: str
        """

        self._organisation_handle = organisation_handle

    @property
    def is_business(self):
        """Gets the is_business of this OrganisationResponse.  # noqa: E501


        :return: The is_business of this OrganisationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_business

    @is_business.setter
    def is_business(self, is_business):
        """Sets the is_business of this OrganisationResponse.


        :param is_business: The is_business of this OrganisationResponse.  # noqa: E501
        :type is_business: bool
        """

        self._is_business = is_business

    @property
    def is_partner(self):
        """Gets the is_partner of this OrganisationResponse.  # noqa: E501


        :return: The is_partner of this OrganisationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_partner

    @is_partner.setter
    def is_partner(self, is_partner):
        """Sets the is_partner of this OrganisationResponse.


        :param is_partner: The is_partner of this OrganisationResponse.  # noqa: E501
        :type is_partner: bool
        """

        self._is_partner = is_partner

    @property
    def partner_id(self):
        """Gets the partner_id of this OrganisationResponse.  # noqa: E501


        :return: The partner_id of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this OrganisationResponse.


        :param partner_id: The partner_id of this OrganisationResponse.  # noqa: E501
        :type partner_id: str
        """

        self._partner_id = partner_id

    @property
    def main_contact(self):
        """Gets the main_contact of this OrganisationResponse.  # noqa: E501


        :return: The main_contact of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._main_contact

    @main_contact.setter
    def main_contact(self, main_contact):
        """Sets the main_contact of this OrganisationResponse.


        :param main_contact: The main_contact of this OrganisationResponse.  # noqa: E501
        :type main_contact: str
        """

        self._main_contact = main_contact

    @property
    def main_address(self):
        """Gets the main_address of this OrganisationResponse.  # noqa: E501


        :return: The main_address of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._main_address

    @main_address.setter
    def main_address(self, main_address):
        """Sets the main_address of this OrganisationResponse.


        :param main_address: The main_address of this OrganisationResponse.  # noqa: E501
        :type main_address: str
        """

        self._main_address = main_address

    @property
    def billing_contact(self):
        """Gets the billing_contact of this OrganisationResponse.  # noqa: E501


        :return: The billing_contact of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._billing_contact

    @billing_contact.setter
    def billing_contact(self, billing_contact):
        """Sets the billing_contact of this OrganisationResponse.


        :param billing_contact: The billing_contact of this OrganisationResponse.  # noqa: E501
        :type billing_contact: str
        """

        self._billing_contact = billing_contact

    @property
    def billing_address(self):
        """Gets the billing_address of this OrganisationResponse.  # noqa: E501


        :return: The billing_address of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this OrganisationResponse.


        :param billing_address: The billing_address of this OrganisationResponse.  # noqa: E501
        :type billing_address: str
        """

        self._billing_address = billing_address

    @property
    def delivery_contact(self):
        """Gets the delivery_contact of this OrganisationResponse.  # noqa: E501


        :return: The delivery_contact of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._delivery_contact

    @delivery_contact.setter
    def delivery_contact(self, delivery_contact):
        """Sets the delivery_contact of this OrganisationResponse.


        :param delivery_contact: The delivery_contact of this OrganisationResponse.  # noqa: E501
        :type delivery_contact: str
        """

        self._delivery_contact = delivery_contact

    @property
    def delivery_address(self):
        """Gets the delivery_address of this OrganisationResponse.  # noqa: E501


        :return: The delivery_address of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this OrganisationResponse.


        :param delivery_address: The delivery_address of this OrganisationResponse.  # noqa: E501
        :type delivery_address: str
        """

        self._delivery_address = delivery_address

    @property
    def vat_number(self):
        """Gets the vat_number of this OrganisationResponse.  # noqa: E501


        :return: The vat_number of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """Sets the vat_number of this OrganisationResponse.


        :param vat_number: The vat_number of this OrganisationResponse.  # noqa: E501
        :type vat_number: str
        """

        self._vat_number = vat_number

    @property
    def credit(self):
        """Gets the credit of this OrganisationResponse.  # noqa: E501


        :return: The credit of this OrganisationResponse.  # noqa: E501
        :rtype: float
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """Sets the credit of this OrganisationResponse.


        :param credit: The credit of this OrganisationResponse.  # noqa: E501
        :type credit: float
        """

        self._credit = credit

    @property
    def registered_on(self):
        """Gets the registered_on of this OrganisationResponse.  # noqa: E501


        :return: The registered_on of this OrganisationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._registered_on

    @registered_on.setter
    def registered_on(self, registered_on):
        """Sets the registered_on of this OrganisationResponse.


        :param registered_on: The registered_on of this OrganisationResponse.  # noqa: E501
        :type registered_on: datetime
        """

        self._registered_on = registered_on

    @property
    def admin_role(self):
        """Gets the admin_role of this OrganisationResponse.  # noqa: E501


        :return: The admin_role of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._admin_role

    @admin_role.setter
    def admin_role(self, admin_role):
        """Sets the admin_role of this OrganisationResponse.


        :param admin_role: The admin_role of this OrganisationResponse.  # noqa: E501
        :type admin_role: str
        """

        self._admin_role = admin_role

    @property
    def read_role(self):
        """Gets the read_role of this OrganisationResponse.  # noqa: E501


        :return: The read_role of this OrganisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._read_role

    @read_role.setter
    def read_role(self, read_role):
        """Sets the read_role of this OrganisationResponse.


        :param read_role: The read_role of this OrganisationResponse.  # noqa: E501
        :type read_role: str
        """

        self._read_role = read_role

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganisationResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganisationResponse):
            return True

        return self.to_dict() != other.to_dict()
