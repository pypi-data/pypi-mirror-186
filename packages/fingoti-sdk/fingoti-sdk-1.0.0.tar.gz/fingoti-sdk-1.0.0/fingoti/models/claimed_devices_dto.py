# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class ClaimedDevicesDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'success': 'bool',
        'organisation_id': 'str',
        'last_updated': 'datetime',
        'count': 'int',
        'claim_pending_count': 'int',
        'owned_device_count': 'int',
        'online_gateways': 'list[str]',
        'pebl': 'DevicePeblDto',
        'vyne': 'DeviceVyneDto'
    }

    attribute_map = {
        'success': 'success',
        'organisation_id': 'organisationId',
        'last_updated': 'lastUpdated',
        'count': 'count',
        'claim_pending_count': 'claimPendingCount',
        'owned_device_count': 'ownedDeviceCount',
        'online_gateways': 'onlineGateways',
        'pebl': 'pebl',
        'vyne': 'vyne'
    }

    def __init__(self, success=None, organisation_id=None, last_updated=None, count=None, claim_pending_count=None, owned_device_count=None, online_gateways=None, pebl=None, vyne=None, local_vars_configuration=None):  # noqa: E501
        """ClaimedDevicesDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._success = None
        self._organisation_id = None
        self._last_updated = None
        self._count = None
        self._claim_pending_count = None
        self._owned_device_count = None
        self._online_gateways = None
        self._pebl = None
        self._vyne = None
        self.discriminator = None

        if success is not None:
            self.success = success
        if organisation_id is not None:
            self.organisation_id = organisation_id
        self.last_updated = last_updated
        if count is not None:
            self.count = count
        if claim_pending_count is not None:
            self.claim_pending_count = claim_pending_count
        if owned_device_count is not None:
            self.owned_device_count = owned_device_count
        self.online_gateways = online_gateways
        if pebl is not None:
            self.pebl = pebl
        if vyne is not None:
            self.vyne = vyne

    @property
    def success(self):
        """Gets the success of this ClaimedDevicesDto.  # noqa: E501


        :return: The success of this ClaimedDevicesDto.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ClaimedDevicesDto.


        :param success: The success of this ClaimedDevicesDto.  # noqa: E501
        :type success: bool
        """

        self._success = success

    @property
    def organisation_id(self):
        """Gets the organisation_id of this ClaimedDevicesDto.  # noqa: E501


        :return: The organisation_id of this ClaimedDevicesDto.  # noqa: E501
        :rtype: str
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this ClaimedDevicesDto.


        :param organisation_id: The organisation_id of this ClaimedDevicesDto.  # noqa: E501
        :type organisation_id: str
        """

        self._organisation_id = organisation_id

    @property
    def last_updated(self):
        """Gets the last_updated of this ClaimedDevicesDto.  # noqa: E501


        :return: The last_updated of this ClaimedDevicesDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ClaimedDevicesDto.


        :param last_updated: The last_updated of this ClaimedDevicesDto.  # noqa: E501
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def count(self):
        """Gets the count of this ClaimedDevicesDto.  # noqa: E501


        :return: The count of this ClaimedDevicesDto.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ClaimedDevicesDto.


        :param count: The count of this ClaimedDevicesDto.  # noqa: E501
        :type count: int
        """

        self._count = count

    @property
    def claim_pending_count(self):
        """Gets the claim_pending_count of this ClaimedDevicesDto.  # noqa: E501


        :return: The claim_pending_count of this ClaimedDevicesDto.  # noqa: E501
        :rtype: int
        """
        return self._claim_pending_count

    @claim_pending_count.setter
    def claim_pending_count(self, claim_pending_count):
        """Sets the claim_pending_count of this ClaimedDevicesDto.


        :param claim_pending_count: The claim_pending_count of this ClaimedDevicesDto.  # noqa: E501
        :type claim_pending_count: int
        """

        self._claim_pending_count = claim_pending_count

    @property
    def owned_device_count(self):
        """Gets the owned_device_count of this ClaimedDevicesDto.  # noqa: E501


        :return: The owned_device_count of this ClaimedDevicesDto.  # noqa: E501
        :rtype: int
        """
        return self._owned_device_count

    @owned_device_count.setter
    def owned_device_count(self, owned_device_count):
        """Sets the owned_device_count of this ClaimedDevicesDto.


        :param owned_device_count: The owned_device_count of this ClaimedDevicesDto.  # noqa: E501
        :type owned_device_count: int
        """

        self._owned_device_count = owned_device_count

    @property
    def online_gateways(self):
        """Gets the online_gateways of this ClaimedDevicesDto.  # noqa: E501


        :return: The online_gateways of this ClaimedDevicesDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._online_gateways

    @online_gateways.setter
    def online_gateways(self, online_gateways):
        """Sets the online_gateways of this ClaimedDevicesDto.


        :param online_gateways: The online_gateways of this ClaimedDevicesDto.  # noqa: E501
        :type online_gateways: list[str]
        """

        self._online_gateways = online_gateways

    @property
    def pebl(self):
        """Gets the pebl of this ClaimedDevicesDto.  # noqa: E501


        :return: The pebl of this ClaimedDevicesDto.  # noqa: E501
        :rtype: DevicePeblDto
        """
        return self._pebl

    @pebl.setter
    def pebl(self, pebl):
        """Sets the pebl of this ClaimedDevicesDto.


        :param pebl: The pebl of this ClaimedDevicesDto.  # noqa: E501
        :type pebl: DevicePeblDto
        """

        self._pebl = pebl

    @property
    def vyne(self):
        """Gets the vyne of this ClaimedDevicesDto.  # noqa: E501


        :return: The vyne of this ClaimedDevicesDto.  # noqa: E501
        :rtype: DeviceVyneDto
        """
        return self._vyne

    @vyne.setter
    def vyne(self, vyne):
        """Sets the vyne of this ClaimedDevicesDto.


        :param vyne: The vyne of this ClaimedDevicesDto.  # noqa: E501
        :type vyne: DeviceVyneDto
        """

        self._vyne = vyne

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClaimedDevicesDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClaimedDevicesDto):
            return True

        return self.to_dict() != other.to_dict()
