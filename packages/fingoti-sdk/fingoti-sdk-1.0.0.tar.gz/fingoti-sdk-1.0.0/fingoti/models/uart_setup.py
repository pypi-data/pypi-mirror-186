# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class UartSetup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'baudrate': 'int',
        'databits': 'int',
        'parity': 'int',
        'stopbits': 'int'
    }

    attribute_map = {
        'baudrate': 'baudrate',
        'databits': 'databits',
        'parity': 'parity',
        'stopbits': 'stopbits'
    }

    def __init__(self, baudrate=None, databits=None, parity=None, stopbits=None, local_vars_configuration=None):  # noqa: E501
        """UartSetup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._baudrate = None
        self._databits = None
        self._parity = None
        self._stopbits = None
        self.discriminator = None

        if baudrate is not None:
            self.baudrate = baudrate
        if databits is not None:
            self.databits = databits
        if parity is not None:
            self.parity = parity
        if stopbits is not None:
            self.stopbits = stopbits

    @property
    def baudrate(self):
        """Gets the baudrate of this UartSetup.  # noqa: E501


        :return: The baudrate of this UartSetup.  # noqa: E501
        :rtype: int
        """
        return self._baudrate

    @baudrate.setter
    def baudrate(self, baudrate):
        """Sets the baudrate of this UartSetup.


        :param baudrate: The baudrate of this UartSetup.  # noqa: E501
        :type baudrate: int
        """

        self._baudrate = baudrate

    @property
    def databits(self):
        """Gets the databits of this UartSetup.  # noqa: E501


        :return: The databits of this UartSetup.  # noqa: E501
        :rtype: int
        """
        return self._databits

    @databits.setter
    def databits(self, databits):
        """Sets the databits of this UartSetup.


        :param databits: The databits of this UartSetup.  # noqa: E501
        :type databits: int
        """

        self._databits = databits

    @property
    def parity(self):
        """Gets the parity of this UartSetup.  # noqa: E501


        :return: The parity of this UartSetup.  # noqa: E501
        :rtype: int
        """
        return self._parity

    @parity.setter
    def parity(self, parity):
        """Sets the parity of this UartSetup.


        :param parity: The parity of this UartSetup.  # noqa: E501
        :type parity: int
        """

        self._parity = parity

    @property
    def stopbits(self):
        """Gets the stopbits of this UartSetup.  # noqa: E501


        :return: The stopbits of this UartSetup.  # noqa: E501
        :rtype: int
        """
        return self._stopbits

    @stopbits.setter
    def stopbits(self, stopbits):
        """Sets the stopbits of this UartSetup.


        :param stopbits: The stopbits of this UartSetup.  # noqa: E501
        :type stopbits: int
        """

        self._stopbits = stopbits

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UartSetup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UartSetup):
            return True

        return self.to_dict() != other.to_dict()
