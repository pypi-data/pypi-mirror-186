# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class RegiserOrganisationDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'organisation_name': 'str',
        'organisation_handle': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'city': 'str',
        'county': 'str',
        'postcode': 'str',
        'country': 'str',
        'vat_number': 'str',
        'is_business': 'bool'
    }

    attribute_map = {
        'organisation_name': 'organisationName',
        'organisation_handle': 'organisationHandle',
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'city': 'city',
        'county': 'county',
        'postcode': 'postcode',
        'country': 'country',
        'vat_number': 'vatNumber',
        'is_business': 'isBusiness'
    }

    def __init__(self, organisation_name=None, organisation_handle=None, address_line1=None, address_line2=None, city=None, county=None, postcode=None, country=None, vat_number=None, is_business=None, local_vars_configuration=None):  # noqa: E501
        """RegiserOrganisationDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._organisation_name = None
        self._organisation_handle = None
        self._address_line1 = None
        self._address_line2 = None
        self._city = None
        self._county = None
        self._postcode = None
        self._country = None
        self._vat_number = None
        self._is_business = None
        self.discriminator = None

        self.organisation_name = organisation_name
        self.organisation_handle = organisation_handle
        self.address_line1 = address_line1
        self.address_line2 = address_line2
        self.city = city
        self.county = county
        self.postcode = postcode
        self.country = country
        self.vat_number = vat_number
        if is_business is not None:
            self.is_business = is_business

    @property
    def organisation_name(self):
        """Gets the organisation_name of this RegiserOrganisationDto.  # noqa: E501


        :return: The organisation_name of this RegiserOrganisationDto.  # noqa: E501
        :rtype: str
        """
        return self._organisation_name

    @organisation_name.setter
    def organisation_name(self, organisation_name):
        """Sets the organisation_name of this RegiserOrganisationDto.


        :param organisation_name: The organisation_name of this RegiserOrganisationDto.  # noqa: E501
        :type organisation_name: str
        """
        if self.local_vars_configuration.client_side_validation and organisation_name is None:  # noqa: E501
            raise ValueError("Invalid value for `organisation_name`, must not be `None`")  # noqa: E501

        self._organisation_name = organisation_name

    @property
    def organisation_handle(self):
        """Gets the organisation_handle of this RegiserOrganisationDto.  # noqa: E501


        :return: The organisation_handle of this RegiserOrganisationDto.  # noqa: E501
        :rtype: str
        """
        return self._organisation_handle

    @organisation_handle.setter
    def organisation_handle(self, organisation_handle):
        """Sets the organisation_handle of this RegiserOrganisationDto.


        :param organisation_handle: The organisation_handle of this RegiserOrganisationDto.  # noqa: E501
        :type organisation_handle: str
        """
        if self.local_vars_configuration.client_side_validation and organisation_handle is None:  # noqa: E501
            raise ValueError("Invalid value for `organisation_handle`, must not be `None`")  # noqa: E501

        self._organisation_handle = organisation_handle

    @property
    def address_line1(self):
        """Gets the address_line1 of this RegiserOrganisationDto.  # noqa: E501


        :return: The address_line1 of this RegiserOrganisationDto.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this RegiserOrganisationDto.


        :param address_line1: The address_line1 of this RegiserOrganisationDto.  # noqa: E501
        :type address_line1: str
        """
        if self.local_vars_configuration.client_side_validation and address_line1 is None:  # noqa: E501
            raise ValueError("Invalid value for `address_line1`, must not be `None`")  # noqa: E501

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this RegiserOrganisationDto.  # noqa: E501


        :return: The address_line2 of this RegiserOrganisationDto.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this RegiserOrganisationDto.


        :param address_line2: The address_line2 of this RegiserOrganisationDto.  # noqa: E501
        :type address_line2: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this RegiserOrganisationDto.  # noqa: E501


        :return: The city of this RegiserOrganisationDto.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this RegiserOrganisationDto.


        :param city: The city of this RegiserOrganisationDto.  # noqa: E501
        :type city: str
        """

        self._city = city

    @property
    def county(self):
        """Gets the county of this RegiserOrganisationDto.  # noqa: E501


        :return: The county of this RegiserOrganisationDto.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this RegiserOrganisationDto.


        :param county: The county of this RegiserOrganisationDto.  # noqa: E501
        :type county: str
        """

        self._county = county

    @property
    def postcode(self):
        """Gets the postcode of this RegiserOrganisationDto.  # noqa: E501


        :return: The postcode of this RegiserOrganisationDto.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this RegiserOrganisationDto.


        :param postcode: The postcode of this RegiserOrganisationDto.  # noqa: E501
        :type postcode: str
        """
        if self.local_vars_configuration.client_side_validation and postcode is None:  # noqa: E501
            raise ValueError("Invalid value for `postcode`, must not be `None`")  # noqa: E501

        self._postcode = postcode

    @property
    def country(self):
        """Gets the country of this RegiserOrganisationDto.  # noqa: E501


        :return: The country of this RegiserOrganisationDto.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this RegiserOrganisationDto.


        :param country: The country of this RegiserOrganisationDto.  # noqa: E501
        :type country: str
        """

        self._country = country

    @property
    def vat_number(self):
        """Gets the vat_number of this RegiserOrganisationDto.  # noqa: E501


        :return: The vat_number of this RegiserOrganisationDto.  # noqa: E501
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """Sets the vat_number of this RegiserOrganisationDto.


        :param vat_number: The vat_number of this RegiserOrganisationDto.  # noqa: E501
        :type vat_number: str
        """

        self._vat_number = vat_number

    @property
    def is_business(self):
        """Gets the is_business of this RegiserOrganisationDto.  # noqa: E501


        :return: The is_business of this RegiserOrganisationDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_business

    @is_business.setter
    def is_business(self, is_business):
        """Sets the is_business of this RegiserOrganisationDto.


        :param is_business: The is_business of this RegiserOrganisationDto.  # noqa: E501
        :type is_business: bool
        """

        self._is_business = is_business

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegiserOrganisationDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegiserOrganisationDto):
            return True

        return self.to_dict() != other.to_dict()
