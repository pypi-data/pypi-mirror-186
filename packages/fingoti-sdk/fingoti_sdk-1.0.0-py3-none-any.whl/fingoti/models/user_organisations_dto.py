# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class UserOrganisationsDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'organisation_number': 'str',
        'organisation_name': 'str',
        'role_id': 'str',
        'role_name': 'str',
        'disabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'organisation_number': 'organisationNumber',
        'organisation_name': 'organisationName',
        'role_id': 'roleId',
        'role_name': 'roleName',
        'disabled': 'disabled'
    }

    def __init__(self, id=None, organisation_number=None, organisation_name=None, role_id=None, role_name=None, disabled=None, local_vars_configuration=None):  # noqa: E501
        """UserOrganisationsDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._organisation_number = None
        self._organisation_name = None
        self._role_id = None
        self._role_name = None
        self._disabled = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.organisation_number = organisation_number
        self.organisation_name = organisation_name
        self.role_id = role_id
        self.role_name = role_name
        if disabled is not None:
            self.disabled = disabled

    @property
    def id(self):
        """Gets the id of this UserOrganisationsDto.  # noqa: E501


        :return: The id of this UserOrganisationsDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserOrganisationsDto.


        :param id: The id of this UserOrganisationsDto.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def organisation_number(self):
        """Gets the organisation_number of this UserOrganisationsDto.  # noqa: E501


        :return: The organisation_number of this UserOrganisationsDto.  # noqa: E501
        :rtype: str
        """
        return self._organisation_number

    @organisation_number.setter
    def organisation_number(self, organisation_number):
        """Sets the organisation_number of this UserOrganisationsDto.


        :param organisation_number: The organisation_number of this UserOrganisationsDto.  # noqa: E501
        :type organisation_number: str
        """

        self._organisation_number = organisation_number

    @property
    def organisation_name(self):
        """Gets the organisation_name of this UserOrganisationsDto.  # noqa: E501


        :return: The organisation_name of this UserOrganisationsDto.  # noqa: E501
        :rtype: str
        """
        return self._organisation_name

    @organisation_name.setter
    def organisation_name(self, organisation_name):
        """Sets the organisation_name of this UserOrganisationsDto.


        :param organisation_name: The organisation_name of this UserOrganisationsDto.  # noqa: E501
        :type organisation_name: str
        """

        self._organisation_name = organisation_name

    @property
    def role_id(self):
        """Gets the role_id of this UserOrganisationsDto.  # noqa: E501


        :return: The role_id of this UserOrganisationsDto.  # noqa: E501
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this UserOrganisationsDto.


        :param role_id: The role_id of this UserOrganisationsDto.  # noqa: E501
        :type role_id: str
        """

        self._role_id = role_id

    @property
    def role_name(self):
        """Gets the role_name of this UserOrganisationsDto.  # noqa: E501


        :return: The role_name of this UserOrganisationsDto.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this UserOrganisationsDto.


        :param role_name: The role_name of this UserOrganisationsDto.  # noqa: E501
        :type role_name: str
        """

        self._role_name = role_name

    @property
    def disabled(self):
        """Gets the disabled of this UserOrganisationsDto.  # noqa: E501


        :return: The disabled of this UserOrganisationsDto.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this UserOrganisationsDto.


        :param disabled: The disabled of this UserOrganisationsDto.  # noqa: E501
        :type disabled: bool
        """

        self._disabled = disabled

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserOrganisationsDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserOrganisationsDto):
            return True

        return self.to_dict() != other.to_dict()
