# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class VyneNode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'part_number': 'str',
        'gateway_id': 'str',
        'first_seen': 'datetime',
        'last_updated': 'datetime',
        'enable': 'bool',
        'name': 'str',
        'location': 'NodeLocation',
        'version': 'DeviceVersion',
        'setup': 'int',
        'address': 'NodeAddress',
        'data': 'NodeData',
        'power': 'DevicePower',
        'identify': 'bool',
        'pin': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'part_number': 'partNumber',
        'gateway_id': 'gatewayId',
        'first_seen': 'firstSeen',
        'last_updated': 'lastUpdated',
        'enable': 'enable',
        'name': 'name',
        'location': 'location',
        'version': 'version',
        'setup': 'setup',
        'address': 'address',
        'data': 'data',
        'power': 'power',
        'identify': 'identify',
        'pin': 'pin'
    }

    def __init__(self, id=None, part_number=None, gateway_id=None, first_seen=None, last_updated=None, enable=None, name=None, location=None, version=None, setup=None, address=None, data=None, power=None, identify=None, pin=None, local_vars_configuration=None):  # noqa: E501
        """VyneNode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._part_number = None
        self._gateway_id = None
        self._first_seen = None
        self._last_updated = None
        self._enable = None
        self._name = None
        self._location = None
        self._version = None
        self._setup = None
        self._address = None
        self._data = None
        self._power = None
        self._identify = None
        self._pin = None
        self.discriminator = None

        self.id = id
        self.part_number = part_number
        self.gateway_id = gateway_id
        self.first_seen = first_seen
        self.last_updated = last_updated
        self.enable = enable
        self.name = name
        if location is not None:
            self.location = location
        if version is not None:
            self.version = version
        if setup is not None:
            self.setup = setup
        if address is not None:
            self.address = address
        if data is not None:
            self.data = data
        if power is not None:
            self.power = power
        if identify is not None:
            self.identify = identify
        self.pin = pin

    @property
    def id(self):
        """Gets the id of this VyneNode.  # noqa: E501


        :return: The id of this VyneNode.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VyneNode.


        :param id: The id of this VyneNode.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def part_number(self):
        """Gets the part_number of this VyneNode.  # noqa: E501


        :return: The part_number of this VyneNode.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this VyneNode.


        :param part_number: The part_number of this VyneNode.  # noqa: E501
        :type part_number: str
        """

        self._part_number = part_number

    @property
    def gateway_id(self):
        """Gets the gateway_id of this VyneNode.  # noqa: E501


        :return: The gateway_id of this VyneNode.  # noqa: E501
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this VyneNode.


        :param gateway_id: The gateway_id of this VyneNode.  # noqa: E501
        :type gateway_id: str
        """

        self._gateway_id = gateway_id

    @property
    def first_seen(self):
        """Gets the first_seen of this VyneNode.  # noqa: E501


        :return: The first_seen of this VyneNode.  # noqa: E501
        :rtype: datetime
        """
        return self._first_seen

    @first_seen.setter
    def first_seen(self, first_seen):
        """Sets the first_seen of this VyneNode.


        :param first_seen: The first_seen of this VyneNode.  # noqa: E501
        :type first_seen: datetime
        """

        self._first_seen = first_seen

    @property
    def last_updated(self):
        """Gets the last_updated of this VyneNode.  # noqa: E501


        :return: The last_updated of this VyneNode.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this VyneNode.


        :param last_updated: The last_updated of this VyneNode.  # noqa: E501
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def enable(self):
        """Gets the enable of this VyneNode.  # noqa: E501


        :return: The enable of this VyneNode.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this VyneNode.


        :param enable: The enable of this VyneNode.  # noqa: E501
        :type enable: bool
        """

        self._enable = enable

    @property
    def name(self):
        """Gets the name of this VyneNode.  # noqa: E501


        :return: The name of this VyneNode.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VyneNode.


        :param name: The name of this VyneNode.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def location(self):
        """Gets the location of this VyneNode.  # noqa: E501


        :return: The location of this VyneNode.  # noqa: E501
        :rtype: NodeLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this VyneNode.


        :param location: The location of this VyneNode.  # noqa: E501
        :type location: NodeLocation
        """

        self._location = location

    @property
    def version(self):
        """Gets the version of this VyneNode.  # noqa: E501


        :return: The version of this VyneNode.  # noqa: E501
        :rtype: DeviceVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VyneNode.


        :param version: The version of this VyneNode.  # noqa: E501
        :type version: DeviceVersion
        """

        self._version = version

    @property
    def setup(self):
        """Gets the setup of this VyneNode.  # noqa: E501


        :return: The setup of this VyneNode.  # noqa: E501
        :rtype: int
        """
        return self._setup

    @setup.setter
    def setup(self, setup):
        """Sets the setup of this VyneNode.


        :param setup: The setup of this VyneNode.  # noqa: E501
        :type setup: int
        """

        self._setup = setup

    @property
    def address(self):
        """Gets the address of this VyneNode.  # noqa: E501


        :return: The address of this VyneNode.  # noqa: E501
        :rtype: NodeAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this VyneNode.


        :param address: The address of this VyneNode.  # noqa: E501
        :type address: NodeAddress
        """

        self._address = address

    @property
    def data(self):
        """Gets the data of this VyneNode.  # noqa: E501


        :return: The data of this VyneNode.  # noqa: E501
        :rtype: NodeData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this VyneNode.


        :param data: The data of this VyneNode.  # noqa: E501
        :type data: NodeData
        """

        self._data = data

    @property
    def power(self):
        """Gets the power of this VyneNode.  # noqa: E501


        :return: The power of this VyneNode.  # noqa: E501
        :rtype: DevicePower
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this VyneNode.


        :param power: The power of this VyneNode.  # noqa: E501
        :type power: DevicePower
        """

        self._power = power

    @property
    def identify(self):
        """Gets the identify of this VyneNode.  # noqa: E501


        :return: The identify of this VyneNode.  # noqa: E501
        :rtype: bool
        """
        return self._identify

    @identify.setter
    def identify(self, identify):
        """Sets the identify of this VyneNode.


        :param identify: The identify of this VyneNode.  # noqa: E501
        :type identify: bool
        """

        self._identify = identify

    @property
    def pin(self):
        """Gets the pin of this VyneNode.  # noqa: E501


        :return: The pin of this VyneNode.  # noqa: E501
        :rtype: list[int]
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this VyneNode.


        :param pin: The pin of this VyneNode.  # noqa: E501
        :type pin: list[int]
        """

        self._pin = pin

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VyneNode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VyneNode):
            return True

        return self.to_dict() != other.to_dict()
