# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class OrganisationFollowing(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'disabled': 'bool',
        'follow_name': 'str',
        'source_device': 'str',
        'source_pin': 'int',
        'destination_device': 'str',
        'destination_pin': 'int',
        'mirror': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'disabled': 'disabled',
        'follow_name': 'followName',
        'source_device': 'sourceDevice',
        'source_pin': 'sourcePin',
        'destination_device': 'destinationDevice',
        'destination_pin': 'destinationPin',
        'mirror': 'mirror'
    }

    def __init__(self, id=None, disabled=None, follow_name=None, source_device=None, source_pin=None, destination_device=None, destination_pin=None, mirror=None, local_vars_configuration=None):  # noqa: E501
        """OrganisationFollowing - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._disabled = None
        self._follow_name = None
        self._source_device = None
        self._source_pin = None
        self._destination_device = None
        self._destination_pin = None
        self._mirror = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if disabled is not None:
            self.disabled = disabled
        self.follow_name = follow_name
        self.source_device = source_device
        if source_pin is not None:
            self.source_pin = source_pin
        self.destination_device = destination_device
        if destination_pin is not None:
            self.destination_pin = destination_pin
        if mirror is not None:
            self.mirror = mirror

    @property
    def id(self):
        """Gets the id of this OrganisationFollowing.  # noqa: E501


        :return: The id of this OrganisationFollowing.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganisationFollowing.


        :param id: The id of this OrganisationFollowing.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def disabled(self):
        """Gets the disabled of this OrganisationFollowing.  # noqa: E501


        :return: The disabled of this OrganisationFollowing.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this OrganisationFollowing.


        :param disabled: The disabled of this OrganisationFollowing.  # noqa: E501
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def follow_name(self):
        """Gets the follow_name of this OrganisationFollowing.  # noqa: E501


        :return: The follow_name of this OrganisationFollowing.  # noqa: E501
        :rtype: str
        """
        return self._follow_name

    @follow_name.setter
    def follow_name(self, follow_name):
        """Sets the follow_name of this OrganisationFollowing.


        :param follow_name: The follow_name of this OrganisationFollowing.  # noqa: E501
        :type follow_name: str
        """

        self._follow_name = follow_name

    @property
    def source_device(self):
        """Gets the source_device of this OrganisationFollowing.  # noqa: E501


        :return: The source_device of this OrganisationFollowing.  # noqa: E501
        :rtype: str
        """
        return self._source_device

    @source_device.setter
    def source_device(self, source_device):
        """Sets the source_device of this OrganisationFollowing.


        :param source_device: The source_device of this OrganisationFollowing.  # noqa: E501
        :type source_device: str
        """

        self._source_device = source_device

    @property
    def source_pin(self):
        """Gets the source_pin of this OrganisationFollowing.  # noqa: E501


        :return: The source_pin of this OrganisationFollowing.  # noqa: E501
        :rtype: int
        """
        return self._source_pin

    @source_pin.setter
    def source_pin(self, source_pin):
        """Sets the source_pin of this OrganisationFollowing.


        :param source_pin: The source_pin of this OrganisationFollowing.  # noqa: E501
        :type source_pin: int
        """

        self._source_pin = source_pin

    @property
    def destination_device(self):
        """Gets the destination_device of this OrganisationFollowing.  # noqa: E501


        :return: The destination_device of this OrganisationFollowing.  # noqa: E501
        :rtype: str
        """
        return self._destination_device

    @destination_device.setter
    def destination_device(self, destination_device):
        """Sets the destination_device of this OrganisationFollowing.


        :param destination_device: The destination_device of this OrganisationFollowing.  # noqa: E501
        :type destination_device: str
        """

        self._destination_device = destination_device

    @property
    def destination_pin(self):
        """Gets the destination_pin of this OrganisationFollowing.  # noqa: E501


        :return: The destination_pin of this OrganisationFollowing.  # noqa: E501
        :rtype: int
        """
        return self._destination_pin

    @destination_pin.setter
    def destination_pin(self, destination_pin):
        """Sets the destination_pin of this OrganisationFollowing.


        :param destination_pin: The destination_pin of this OrganisationFollowing.  # noqa: E501
        :type destination_pin: int
        """

        self._destination_pin = destination_pin

    @property
    def mirror(self):
        """Gets the mirror of this OrganisationFollowing.  # noqa: E501


        :return: The mirror of this OrganisationFollowing.  # noqa: E501
        :rtype: bool
        """
        return self._mirror

    @mirror.setter
    def mirror(self, mirror):
        """Sets the mirror of this OrganisationFollowing.


        :param mirror: The mirror of this OrganisationFollowing.  # noqa: E501
        :type mirror: bool
        """

        self._mirror = mirror

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganisationFollowing):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganisationFollowing):
            return True

        return self.to_dict() != other.to_dict()
