# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class EngineWebhookDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'organisation_id': 'str',
        'disabled': 'bool',
        'webhook_number': 'str',
        'created_by': 'str',
        'created_on': 'datetime',
        'triggers': 'int',
        'properties': 'list[str]',
        'webhook_url': 'str',
        'webhook_headers': 'list[WebhookHeaders]',
        'devices': 'list[str]',
        'count': 'int',
        'page_number': 'int',
        'last_call': 'datetime',
        'calls': 'list[WebhookCallDto]'
    }

    attribute_map = {
        'id': 'id',
        'organisation_id': 'organisationId',
        'disabled': 'disabled',
        'webhook_number': 'webhookNumber',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'triggers': 'triggers',
        'properties': 'properties',
        'webhook_url': 'webhookUrl',
        'webhook_headers': 'webhookHeaders',
        'devices': 'devices',
        'count': 'count',
        'page_number': 'pageNumber',
        'last_call': 'lastCall',
        'calls': 'calls'
    }

    def __init__(self, id=None, organisation_id=None, disabled=None, webhook_number=None, created_by=None, created_on=None, triggers=None, properties=None, webhook_url=None, webhook_headers=None, devices=None, count=None, page_number=None, last_call=None, calls=None, local_vars_configuration=None):  # noqa: E501
        """EngineWebhookDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._organisation_id = None
        self._disabled = None
        self._webhook_number = None
        self._created_by = None
        self._created_on = None
        self._triggers = None
        self._properties = None
        self._webhook_url = None
        self._webhook_headers = None
        self._devices = None
        self._count = None
        self._page_number = None
        self._last_call = None
        self._calls = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if organisation_id is not None:
            self.organisation_id = organisation_id
        if disabled is not None:
            self.disabled = disabled
        self.webhook_number = webhook_number
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if triggers is not None:
            self.triggers = triggers
        self.properties = properties
        self.webhook_url = webhook_url
        self.webhook_headers = webhook_headers
        self.devices = devices
        if count is not None:
            self.count = count
        if page_number is not None:
            self.page_number = page_number
        self.last_call = last_call
        self.calls = calls

    @property
    def id(self):
        """Gets the id of this EngineWebhookDto.  # noqa: E501


        :return: The id of this EngineWebhookDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EngineWebhookDto.


        :param id: The id of this EngineWebhookDto.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def organisation_id(self):
        """Gets the organisation_id of this EngineWebhookDto.  # noqa: E501


        :return: The organisation_id of this EngineWebhookDto.  # noqa: E501
        :rtype: str
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this EngineWebhookDto.


        :param organisation_id: The organisation_id of this EngineWebhookDto.  # noqa: E501
        :type organisation_id: str
        """

        self._organisation_id = organisation_id

    @property
    def disabled(self):
        """Gets the disabled of this EngineWebhookDto.  # noqa: E501


        :return: The disabled of this EngineWebhookDto.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this EngineWebhookDto.


        :param disabled: The disabled of this EngineWebhookDto.  # noqa: E501
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def webhook_number(self):
        """Gets the webhook_number of this EngineWebhookDto.  # noqa: E501


        :return: The webhook_number of this EngineWebhookDto.  # noqa: E501
        :rtype: str
        """
        return self._webhook_number

    @webhook_number.setter
    def webhook_number(self, webhook_number):
        """Sets the webhook_number of this EngineWebhookDto.


        :param webhook_number: The webhook_number of this EngineWebhookDto.  # noqa: E501
        :type webhook_number: str
        """

        self._webhook_number = webhook_number

    @property
    def created_by(self):
        """Gets the created_by of this EngineWebhookDto.  # noqa: E501


        :return: The created_by of this EngineWebhookDto.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this EngineWebhookDto.


        :param created_by: The created_by of this EngineWebhookDto.  # noqa: E501
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this EngineWebhookDto.  # noqa: E501


        :return: The created_on of this EngineWebhookDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this EngineWebhookDto.


        :param created_on: The created_on of this EngineWebhookDto.  # noqa: E501
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def triggers(self):
        """Gets the triggers of this EngineWebhookDto.  # noqa: E501


        :return: The triggers of this EngineWebhookDto.  # noqa: E501
        :rtype: int
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this EngineWebhookDto.


        :param triggers: The triggers of this EngineWebhookDto.  # noqa: E501
        :type triggers: int
        """

        self._triggers = triggers

    @property
    def properties(self):
        """Gets the properties of this EngineWebhookDto.  # noqa: E501


        :return: The properties of this EngineWebhookDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this EngineWebhookDto.


        :param properties: The properties of this EngineWebhookDto.  # noqa: E501
        :type properties: list[str]
        """

        self._properties = properties

    @property
    def webhook_url(self):
        """Gets the webhook_url of this EngineWebhookDto.  # noqa: E501


        :return: The webhook_url of this EngineWebhookDto.  # noqa: E501
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this EngineWebhookDto.


        :param webhook_url: The webhook_url of this EngineWebhookDto.  # noqa: E501
        :type webhook_url: str
        """

        self._webhook_url = webhook_url

    @property
    def webhook_headers(self):
        """Gets the webhook_headers of this EngineWebhookDto.  # noqa: E501


        :return: The webhook_headers of this EngineWebhookDto.  # noqa: E501
        :rtype: list[WebhookHeaders]
        """
        return self._webhook_headers

    @webhook_headers.setter
    def webhook_headers(self, webhook_headers):
        """Sets the webhook_headers of this EngineWebhookDto.


        :param webhook_headers: The webhook_headers of this EngineWebhookDto.  # noqa: E501
        :type webhook_headers: list[WebhookHeaders]
        """

        self._webhook_headers = webhook_headers

    @property
    def devices(self):
        """Gets the devices of this EngineWebhookDto.  # noqa: E501


        :return: The devices of this EngineWebhookDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this EngineWebhookDto.


        :param devices: The devices of this EngineWebhookDto.  # noqa: E501
        :type devices: list[str]
        """

        self._devices = devices

    @property
    def count(self):
        """Gets the count of this EngineWebhookDto.  # noqa: E501


        :return: The count of this EngineWebhookDto.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this EngineWebhookDto.


        :param count: The count of this EngineWebhookDto.  # noqa: E501
        :type count: int
        """

        self._count = count

    @property
    def page_number(self):
        """Gets the page_number of this EngineWebhookDto.  # noqa: E501


        :return: The page_number of this EngineWebhookDto.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this EngineWebhookDto.


        :param page_number: The page_number of this EngineWebhookDto.  # noqa: E501
        :type page_number: int
        """

        self._page_number = page_number

    @property
    def last_call(self):
        """Gets the last_call of this EngineWebhookDto.  # noqa: E501


        :return: The last_call of this EngineWebhookDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_call

    @last_call.setter
    def last_call(self, last_call):
        """Sets the last_call of this EngineWebhookDto.


        :param last_call: The last_call of this EngineWebhookDto.  # noqa: E501
        :type last_call: datetime
        """

        self._last_call = last_call

    @property
    def calls(self):
        """Gets the calls of this EngineWebhookDto.  # noqa: E501


        :return: The calls of this EngineWebhookDto.  # noqa: E501
        :rtype: list[WebhookCallDto]
        """
        return self._calls

    @calls.setter
    def calls(self, calls):
        """Sets the calls of this EngineWebhookDto.


        :param calls: The calls of this EngineWebhookDto.  # noqa: E501
        :type calls: list[WebhookCallDto]
        """

        self._calls = calls

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EngineWebhookDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EngineWebhookDto):
            return True

        return self.to_dict() != other.to_dict()
