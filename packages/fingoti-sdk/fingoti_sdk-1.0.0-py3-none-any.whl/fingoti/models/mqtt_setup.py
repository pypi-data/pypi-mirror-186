# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class MqttSetup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'host': 'str',
        'qos': 'int',
        'retain': 'bool',
        'port': 'int',
        'secure': 'bool',
        'username': 'str'
    }

    attribute_map = {
        'host': 'host',
        'qos': 'qos',
        'retain': 'retain',
        'port': 'port',
        'secure': 'secure',
        'username': 'username'
    }

    def __init__(self, host=None, qos=None, retain=None, port=None, secure=None, username=None, local_vars_configuration=None):  # noqa: E501
        """MqttSetup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._host = None
        self._qos = None
        self._retain = None
        self._port = None
        self._secure = None
        self._username = None
        self.discriminator = None

        self.host = host
        if qos is not None:
            self.qos = qos
        if retain is not None:
            self.retain = retain
        if port is not None:
            self.port = port
        if secure is not None:
            self.secure = secure
        self.username = username

    @property
    def host(self):
        """Gets the host of this MqttSetup.  # noqa: E501


        :return: The host of this MqttSetup.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this MqttSetup.


        :param host: The host of this MqttSetup.  # noqa: E501
        :type host: str
        """

        self._host = host

    @property
    def qos(self):
        """Gets the qos of this MqttSetup.  # noqa: E501


        :return: The qos of this MqttSetup.  # noqa: E501
        :rtype: int
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """Sets the qos of this MqttSetup.


        :param qos: The qos of this MqttSetup.  # noqa: E501
        :type qos: int
        """

        self._qos = qos

    @property
    def retain(self):
        """Gets the retain of this MqttSetup.  # noqa: E501


        :return: The retain of this MqttSetup.  # noqa: E501
        :rtype: bool
        """
        return self._retain

    @retain.setter
    def retain(self, retain):
        """Sets the retain of this MqttSetup.


        :param retain: The retain of this MqttSetup.  # noqa: E501
        :type retain: bool
        """

        self._retain = retain

    @property
    def port(self):
        """Gets the port of this MqttSetup.  # noqa: E501


        :return: The port of this MqttSetup.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this MqttSetup.


        :param port: The port of this MqttSetup.  # noqa: E501
        :type port: int
        """

        self._port = port

    @property
    def secure(self):
        """Gets the secure of this MqttSetup.  # noqa: E501


        :return: The secure of this MqttSetup.  # noqa: E501
        :rtype: bool
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this MqttSetup.


        :param secure: The secure of this MqttSetup.  # noqa: E501
        :type secure: bool
        """

        self._secure = secure

    @property
    def username(self):
        """Gets the username of this MqttSetup.  # noqa: E501


        :return: The username of this MqttSetup.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this MqttSetup.


        :param username: The username of this MqttSetup.  # noqa: E501
        :type username: str
        """

        self._username = username

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MqttSetup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MqttSetup):
            return True

        return self.to_dict() != other.to_dict()
