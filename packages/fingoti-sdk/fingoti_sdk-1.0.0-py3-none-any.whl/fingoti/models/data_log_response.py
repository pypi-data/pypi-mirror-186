# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class DataLogResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'organisation_id': 'str',
        'user_id': 'str',
        'direction': 'int',
        'device_id': 'str',
        'type': 'str',
        'success': 'bool',
        '_property': 'str',
        'payload': 'object',
        'result': 'object',
        'error': 'object',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'organisation_id': 'organisationId',
        'user_id': 'userId',
        'direction': 'direction',
        'device_id': 'deviceId',
        'type': 'type',
        'success': 'success',
        '_property': 'property',
        'payload': 'payload',
        'result': 'result',
        'error': 'error',
        'timestamp': 'timestamp'
    }

    def __init__(self, id=None, organisation_id=None, user_id=None, direction=None, device_id=None, type=None, success=None, _property=None, payload=None, result=None, error=None, timestamp=None, local_vars_configuration=None):  # noqa: E501
        """DataLogResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._organisation_id = None
        self._user_id = None
        self._direction = None
        self._device_id = None
        self._type = None
        self._success = None
        self.__property = None
        self._payload = None
        self._result = None
        self._error = None
        self._timestamp = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if organisation_id is not None:
            self.organisation_id = organisation_id
        self.user_id = user_id
        if direction is not None:
            self.direction = direction
        self.device_id = device_id
        self.type = type
        if success is not None:
            self.success = success
        self._property = _property
        self.payload = payload
        self.result = result
        self.error = error
        self.timestamp = timestamp

    @property
    def id(self):
        """Gets the id of this DataLogResponse.  # noqa: E501


        :return: The id of this DataLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataLogResponse.


        :param id: The id of this DataLogResponse.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def organisation_id(self):
        """Gets the organisation_id of this DataLogResponse.  # noqa: E501


        :return: The organisation_id of this DataLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this DataLogResponse.


        :param organisation_id: The organisation_id of this DataLogResponse.  # noqa: E501
        :type organisation_id: str
        """

        self._organisation_id = organisation_id

    @property
    def user_id(self):
        """Gets the user_id of this DataLogResponse.  # noqa: E501


        :return: The user_id of this DataLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DataLogResponse.


        :param user_id: The user_id of this DataLogResponse.  # noqa: E501
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def direction(self):
        """Gets the direction of this DataLogResponse.  # noqa: E501


        :return: The direction of this DataLogResponse.  # noqa: E501
        :rtype: int
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this DataLogResponse.


        :param direction: The direction of this DataLogResponse.  # noqa: E501
        :type direction: int
        """

        self._direction = direction

    @property
    def device_id(self):
        """Gets the device_id of this DataLogResponse.  # noqa: E501


        :return: The device_id of this DataLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DataLogResponse.


        :param device_id: The device_id of this DataLogResponse.  # noqa: E501
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def type(self):
        """Gets the type of this DataLogResponse.  # noqa: E501


        :return: The type of this DataLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataLogResponse.


        :param type: The type of this DataLogResponse.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def success(self):
        """Gets the success of this DataLogResponse.  # noqa: E501


        :return: The success of this DataLogResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this DataLogResponse.


        :param success: The success of this DataLogResponse.  # noqa: E501
        :type success: bool
        """

        self._success = success

    @property
    def _property(self):
        """Gets the _property of this DataLogResponse.  # noqa: E501


        :return: The _property of this DataLogResponse.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this DataLogResponse.


        :param _property: The _property of this DataLogResponse.  # noqa: E501
        :type _property: str
        """

        self.__property = _property

    @property
    def payload(self):
        """Gets the payload of this DataLogResponse.  # noqa: E501


        :return: The payload of this DataLogResponse.  # noqa: E501
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this DataLogResponse.


        :param payload: The payload of this DataLogResponse.  # noqa: E501
        :type payload: object
        """

        self._payload = payload

    @property
    def result(self):
        """Gets the result of this DataLogResponse.  # noqa: E501


        :return: The result of this DataLogResponse.  # noqa: E501
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this DataLogResponse.


        :param result: The result of this DataLogResponse.  # noqa: E501
        :type result: object
        """

        self._result = result

    @property
    def error(self):
        """Gets the error of this DataLogResponse.  # noqa: E501


        :return: The error of this DataLogResponse.  # noqa: E501
        :rtype: object
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this DataLogResponse.


        :param error: The error of this DataLogResponse.  # noqa: E501
        :type error: object
        """

        self._error = error

    @property
    def timestamp(self):
        """Gets the timestamp of this DataLogResponse.  # noqa: E501


        :return: The timestamp of this DataLogResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DataLogResponse.


        :param timestamp: The timestamp of this DataLogResponse.  # noqa: E501
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataLogResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataLogResponse):
            return True

        return self.to_dict() != other.to_dict()
