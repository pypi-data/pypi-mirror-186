# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class WebhookCallDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'status': 'WebhookStatus',
        'timestamp': 'datetime',
        'request_url': 'str',
        'request_headers': 'list[WebhookHeaders]',
        'request_body': 'object',
        'count': 'int',
        'attempts': 'list[WebhookAttempts]'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'timestamp': 'timestamp',
        'request_url': 'requestUrl',
        'request_headers': 'requestHeaders',
        'request_body': 'requestBody',
        'count': 'count',
        'attempts': 'attempts'
    }

    def __init__(self, id=None, status=None, timestamp=None, request_url=None, request_headers=None, request_body=None, count=None, attempts=None, local_vars_configuration=None):  # noqa: E501
        """WebhookCallDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._status = None
        self._timestamp = None
        self._request_url = None
        self._request_headers = None
        self._request_body = None
        self._count = None
        self._attempts = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        self.timestamp = timestamp
        self.request_url = request_url
        self.request_headers = request_headers
        self.request_body = request_body
        if count is not None:
            self.count = count
        self.attempts = attempts

    @property
    def id(self):
        """Gets the id of this WebhookCallDto.  # noqa: E501


        :return: The id of this WebhookCallDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebhookCallDto.


        :param id: The id of this WebhookCallDto.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this WebhookCallDto.  # noqa: E501


        :return: The status of this WebhookCallDto.  # noqa: E501
        :rtype: WebhookStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WebhookCallDto.


        :param status: The status of this WebhookCallDto.  # noqa: E501
        :type status: WebhookStatus
        """

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this WebhookCallDto.  # noqa: E501


        :return: The timestamp of this WebhookCallDto.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this WebhookCallDto.


        :param timestamp: The timestamp of this WebhookCallDto.  # noqa: E501
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def request_url(self):
        """Gets the request_url of this WebhookCallDto.  # noqa: E501


        :return: The request_url of this WebhookCallDto.  # noqa: E501
        :rtype: str
        """
        return self._request_url

    @request_url.setter
    def request_url(self, request_url):
        """Sets the request_url of this WebhookCallDto.


        :param request_url: The request_url of this WebhookCallDto.  # noqa: E501
        :type request_url: str
        """

        self._request_url = request_url

    @property
    def request_headers(self):
        """Gets the request_headers of this WebhookCallDto.  # noqa: E501


        :return: The request_headers of this WebhookCallDto.  # noqa: E501
        :rtype: list[WebhookHeaders]
        """
        return self._request_headers

    @request_headers.setter
    def request_headers(self, request_headers):
        """Sets the request_headers of this WebhookCallDto.


        :param request_headers: The request_headers of this WebhookCallDto.  # noqa: E501
        :type request_headers: list[WebhookHeaders]
        """

        self._request_headers = request_headers

    @property
    def request_body(self):
        """Gets the request_body of this WebhookCallDto.  # noqa: E501


        :return: The request_body of this WebhookCallDto.  # noqa: E501
        :rtype: object
        """
        return self._request_body

    @request_body.setter
    def request_body(self, request_body):
        """Sets the request_body of this WebhookCallDto.


        :param request_body: The request_body of this WebhookCallDto.  # noqa: E501
        :type request_body: object
        """

        self._request_body = request_body

    @property
    def count(self):
        """Gets the count of this WebhookCallDto.  # noqa: E501


        :return: The count of this WebhookCallDto.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this WebhookCallDto.


        :param count: The count of this WebhookCallDto.  # noqa: E501
        :type count: int
        """

        self._count = count

    @property
    def attempts(self):
        """Gets the attempts of this WebhookCallDto.  # noqa: E501


        :return: The attempts of this WebhookCallDto.  # noqa: E501
        :rtype: list[WebhookAttempts]
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """Sets the attempts of this WebhookCallDto.


        :param attempts: The attempts of this WebhookCallDto.  # noqa: E501
        :type attempts: list[WebhookAttempts]
        """

        self._attempts = attempts

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookCallDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WebhookCallDto):
            return True

        return self.to_dict() != other.to_dict()
