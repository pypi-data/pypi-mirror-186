# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class UserTokenDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'organisation_name': 'str',
        'id': 'str',
        'disabled': 'bool',
        'token_name': 'str',
        'token_key': 'str',
        'organisation_id': 'str',
        'expiry': 'datetime',
        'date_created': 'datetime'
    }

    attribute_map = {
        'organisation_name': 'organisationName',
        'id': 'id',
        'disabled': 'disabled',
        'token_name': 'tokenName',
        'token_key': 'tokenKey',
        'organisation_id': 'organisationId',
        'expiry': 'expiry',
        'date_created': 'dateCreated'
    }

    def __init__(self, organisation_name=None, id=None, disabled=None, token_name=None, token_key=None, organisation_id=None, expiry=None, date_created=None, local_vars_configuration=None):  # noqa: E501
        """UserTokenDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._organisation_name = None
        self._id = None
        self._disabled = None
        self._token_name = None
        self._token_key = None
        self._organisation_id = None
        self._expiry = None
        self._date_created = None
        self.discriminator = None

        self.organisation_name = organisation_name
        if id is not None:
            self.id = id
        if disabled is not None:
            self.disabled = disabled
        self.token_name = token_name
        self.token_key = token_key
        self.organisation_id = organisation_id
        self.expiry = expiry
        self.date_created = date_created

    @property
    def organisation_name(self):
        """Gets the organisation_name of this UserTokenDto.  # noqa: E501


        :return: The organisation_name of this UserTokenDto.  # noqa: E501
        :rtype: str
        """
        return self._organisation_name

    @organisation_name.setter
    def organisation_name(self, organisation_name):
        """Sets the organisation_name of this UserTokenDto.


        :param organisation_name: The organisation_name of this UserTokenDto.  # noqa: E501
        :type organisation_name: str
        """

        self._organisation_name = organisation_name

    @property
    def id(self):
        """Gets the id of this UserTokenDto.  # noqa: E501


        :return: The id of this UserTokenDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserTokenDto.


        :param id: The id of this UserTokenDto.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def disabled(self):
        """Gets the disabled of this UserTokenDto.  # noqa: E501


        :return: The disabled of this UserTokenDto.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this UserTokenDto.


        :param disabled: The disabled of this UserTokenDto.  # noqa: E501
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def token_name(self):
        """Gets the token_name of this UserTokenDto.  # noqa: E501


        :return: The token_name of this UserTokenDto.  # noqa: E501
        :rtype: str
        """
        return self._token_name

    @token_name.setter
    def token_name(self, token_name):
        """Sets the token_name of this UserTokenDto.


        :param token_name: The token_name of this UserTokenDto.  # noqa: E501
        :type token_name: str
        """

        self._token_name = token_name

    @property
    def token_key(self):
        """Gets the token_key of this UserTokenDto.  # noqa: E501


        :return: The token_key of this UserTokenDto.  # noqa: E501
        :rtype: str
        """
        return self._token_key

    @token_key.setter
    def token_key(self, token_key):
        """Sets the token_key of this UserTokenDto.


        :param token_key: The token_key of this UserTokenDto.  # noqa: E501
        :type token_key: str
        """

        self._token_key = token_key

    @property
    def organisation_id(self):
        """Gets the organisation_id of this UserTokenDto.  # noqa: E501


        :return: The organisation_id of this UserTokenDto.  # noqa: E501
        :rtype: str
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this UserTokenDto.


        :param organisation_id: The organisation_id of this UserTokenDto.  # noqa: E501
        :type organisation_id: str
        """

        self._organisation_id = organisation_id

    @property
    def expiry(self):
        """Gets the expiry of this UserTokenDto.  # noqa: E501


        :return: The expiry of this UserTokenDto.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this UserTokenDto.


        :param expiry: The expiry of this UserTokenDto.  # noqa: E501
        :type expiry: datetime
        """

        self._expiry = expiry

    @property
    def date_created(self):
        """Gets the date_created of this UserTokenDto.  # noqa: E501


        :return: The date_created of this UserTokenDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this UserTokenDto.


        :param date_created: The date_created of this UserTokenDto.  # noqa: E501
        :type date_created: datetime
        """

        self._date_created = date_created

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserTokenDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserTokenDto):
            return True

        return self.to_dict() != other.to_dict()
