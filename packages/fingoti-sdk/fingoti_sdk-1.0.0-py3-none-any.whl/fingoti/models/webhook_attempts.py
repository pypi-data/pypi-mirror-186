# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class WebhookAttempts(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attempt': 'int',
        'timestamp': 'datetime',
        'response_code': 'int',
        'response_description': 'str',
        'response_headers': 'list[WebhookHeaders]',
        'response_body': 'str'
    }

    attribute_map = {
        'attempt': 'attempt',
        'timestamp': 'timestamp',
        'response_code': 'responseCode',
        'response_description': 'responseDescription',
        'response_headers': 'responseHeaders',
        'response_body': 'responseBody'
    }

    def __init__(self, attempt=None, timestamp=None, response_code=None, response_description=None, response_headers=None, response_body=None, local_vars_configuration=None):  # noqa: E501
        """WebhookAttempts - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._attempt = None
        self._timestamp = None
        self._response_code = None
        self._response_description = None
        self._response_headers = None
        self._response_body = None
        self.discriminator = None

        if attempt is not None:
            self.attempt = attempt
        self.timestamp = timestamp
        if response_code is not None:
            self.response_code = response_code
        self.response_description = response_description
        self.response_headers = response_headers
        self.response_body = response_body

    @property
    def attempt(self):
        """Gets the attempt of this WebhookAttempts.  # noqa: E501


        :return: The attempt of this WebhookAttempts.  # noqa: E501
        :rtype: int
        """
        return self._attempt

    @attempt.setter
    def attempt(self, attempt):
        """Sets the attempt of this WebhookAttempts.


        :param attempt: The attempt of this WebhookAttempts.  # noqa: E501
        :type attempt: int
        """

        self._attempt = attempt

    @property
    def timestamp(self):
        """Gets the timestamp of this WebhookAttempts.  # noqa: E501


        :return: The timestamp of this WebhookAttempts.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this WebhookAttempts.


        :param timestamp: The timestamp of this WebhookAttempts.  # noqa: E501
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def response_code(self):
        """Gets the response_code of this WebhookAttempts.  # noqa: E501


        :return: The response_code of this WebhookAttempts.  # noqa: E501
        :rtype: int
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this WebhookAttempts.


        :param response_code: The response_code of this WebhookAttempts.  # noqa: E501
        :type response_code: int
        """

        self._response_code = response_code

    @property
    def response_description(self):
        """Gets the response_description of this WebhookAttempts.  # noqa: E501


        :return: The response_description of this WebhookAttempts.  # noqa: E501
        :rtype: str
        """
        return self._response_description

    @response_description.setter
    def response_description(self, response_description):
        """Sets the response_description of this WebhookAttempts.


        :param response_description: The response_description of this WebhookAttempts.  # noqa: E501
        :type response_description: str
        """

        self._response_description = response_description

    @property
    def response_headers(self):
        """Gets the response_headers of this WebhookAttempts.  # noqa: E501


        :return: The response_headers of this WebhookAttempts.  # noqa: E501
        :rtype: list[WebhookHeaders]
        """
        return self._response_headers

    @response_headers.setter
    def response_headers(self, response_headers):
        """Sets the response_headers of this WebhookAttempts.


        :param response_headers: The response_headers of this WebhookAttempts.  # noqa: E501
        :type response_headers: list[WebhookHeaders]
        """

        self._response_headers = response_headers

    @property
    def response_body(self):
        """Gets the response_body of this WebhookAttempts.  # noqa: E501


        :return: The response_body of this WebhookAttempts.  # noqa: E501
        :rtype: str
        """
        return self._response_body

    @response_body.setter
    def response_body(self, response_body):
        """Sets the response_body of this WebhookAttempts.


        :param response_body: The response_body of this WebhookAttempts.  # noqa: E501
        :type response_body: str
        """

        self._response_body = response_body

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookAttempts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WebhookAttempts):
            return True

        return self.to_dict() != other.to_dict()
