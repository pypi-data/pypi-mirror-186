# coding: utf-8

"""
    Fingoti API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fingoti.configuration import Configuration


class PeblGateway(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'part_number': 'str',
        'system_os': 'str',
        'system_version': 'str',
        'last_updated': 'datetime',
        'last_message': 'AzureMessage',
        'claim': 'GatewayClaim',
        'gpio': 'GatewayGpio',
        'timer': 'GatewayTimer',
        'wifi': 'GatewayWifi',
        'mqtt': 'GatewayMqtt',
        'network': 'GatewayNetwork',
        'schedule': 'GatewaySchedule',
        'device': 'PeblDevice',
        'uart': 'GatewayUart',
        'i2c': 'GatewayI2c'
    }

    attribute_map = {
        'id': 'id',
        'part_number': 'partNumber',
        'system_os': 'systemOs',
        'system_version': 'systemVersion',
        'last_updated': 'lastUpdated',
        'last_message': 'lastMessage',
        'claim': 'claim',
        'gpio': 'gpio',
        'timer': 'timer',
        'wifi': 'wifi',
        'mqtt': 'mqtt',
        'network': 'network',
        'schedule': 'schedule',
        'device': 'device',
        'uart': 'uart',
        'i2c': 'i2c'
    }

    def __init__(self, id=None, part_number=None, system_os=None, system_version=None, last_updated=None, last_message=None, claim=None, gpio=None, timer=None, wifi=None, mqtt=None, network=None, schedule=None, device=None, uart=None, i2c=None, local_vars_configuration=None):  # noqa: E501
        """PeblGateway - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._part_number = None
        self._system_os = None
        self._system_version = None
        self._last_updated = None
        self._last_message = None
        self._claim = None
        self._gpio = None
        self._timer = None
        self._wifi = None
        self._mqtt = None
        self._network = None
        self._schedule = None
        self._device = None
        self._uart = None
        self._i2c = None
        self.discriminator = None

        self.id = id
        self.part_number = part_number
        self.system_os = system_os
        self.system_version = system_version
        self.last_updated = last_updated
        if last_message is not None:
            self.last_message = last_message
        if claim is not None:
            self.claim = claim
        if gpio is not None:
            self.gpio = gpio
        if timer is not None:
            self.timer = timer
        if wifi is not None:
            self.wifi = wifi
        if mqtt is not None:
            self.mqtt = mqtt
        if network is not None:
            self.network = network
        if schedule is not None:
            self.schedule = schedule
        if device is not None:
            self.device = device
        if uart is not None:
            self.uart = uart
        if i2c is not None:
            self.i2c = i2c

    @property
    def id(self):
        """Gets the id of this PeblGateway.  # noqa: E501


        :return: The id of this PeblGateway.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PeblGateway.


        :param id: The id of this PeblGateway.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def part_number(self):
        """Gets the part_number of this PeblGateway.  # noqa: E501


        :return: The part_number of this PeblGateway.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this PeblGateway.


        :param part_number: The part_number of this PeblGateway.  # noqa: E501
        :type part_number: str
        """

        self._part_number = part_number

    @property
    def system_os(self):
        """Gets the system_os of this PeblGateway.  # noqa: E501


        :return: The system_os of this PeblGateway.  # noqa: E501
        :rtype: str
        """
        return self._system_os

    @system_os.setter
    def system_os(self, system_os):
        """Sets the system_os of this PeblGateway.


        :param system_os: The system_os of this PeblGateway.  # noqa: E501
        :type system_os: str
        """

        self._system_os = system_os

    @property
    def system_version(self):
        """Gets the system_version of this PeblGateway.  # noqa: E501


        :return: The system_version of this PeblGateway.  # noqa: E501
        :rtype: str
        """
        return self._system_version

    @system_version.setter
    def system_version(self, system_version):
        """Sets the system_version of this PeblGateway.


        :param system_version: The system_version of this PeblGateway.  # noqa: E501
        :type system_version: str
        """

        self._system_version = system_version

    @property
    def last_updated(self):
        """Gets the last_updated of this PeblGateway.  # noqa: E501


        :return: The last_updated of this PeblGateway.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this PeblGateway.


        :param last_updated: The last_updated of this PeblGateway.  # noqa: E501
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def last_message(self):
        """Gets the last_message of this PeblGateway.  # noqa: E501


        :return: The last_message of this PeblGateway.  # noqa: E501
        :rtype: AzureMessage
        """
        return self._last_message

    @last_message.setter
    def last_message(self, last_message):
        """Sets the last_message of this PeblGateway.


        :param last_message: The last_message of this PeblGateway.  # noqa: E501
        :type last_message: AzureMessage
        """

        self._last_message = last_message

    @property
    def claim(self):
        """Gets the claim of this PeblGateway.  # noqa: E501


        :return: The claim of this PeblGateway.  # noqa: E501
        :rtype: GatewayClaim
        """
        return self._claim

    @claim.setter
    def claim(self, claim):
        """Sets the claim of this PeblGateway.


        :param claim: The claim of this PeblGateway.  # noqa: E501
        :type claim: GatewayClaim
        """

        self._claim = claim

    @property
    def gpio(self):
        """Gets the gpio of this PeblGateway.  # noqa: E501


        :return: The gpio of this PeblGateway.  # noqa: E501
        :rtype: GatewayGpio
        """
        return self._gpio

    @gpio.setter
    def gpio(self, gpio):
        """Sets the gpio of this PeblGateway.


        :param gpio: The gpio of this PeblGateway.  # noqa: E501
        :type gpio: GatewayGpio
        """

        self._gpio = gpio

    @property
    def timer(self):
        """Gets the timer of this PeblGateway.  # noqa: E501


        :return: The timer of this PeblGateway.  # noqa: E501
        :rtype: GatewayTimer
        """
        return self._timer

    @timer.setter
    def timer(self, timer):
        """Sets the timer of this PeblGateway.


        :param timer: The timer of this PeblGateway.  # noqa: E501
        :type timer: GatewayTimer
        """

        self._timer = timer

    @property
    def wifi(self):
        """Gets the wifi of this PeblGateway.  # noqa: E501


        :return: The wifi of this PeblGateway.  # noqa: E501
        :rtype: GatewayWifi
        """
        return self._wifi

    @wifi.setter
    def wifi(self, wifi):
        """Sets the wifi of this PeblGateway.


        :param wifi: The wifi of this PeblGateway.  # noqa: E501
        :type wifi: GatewayWifi
        """

        self._wifi = wifi

    @property
    def mqtt(self):
        """Gets the mqtt of this PeblGateway.  # noqa: E501


        :return: The mqtt of this PeblGateway.  # noqa: E501
        :rtype: GatewayMqtt
        """
        return self._mqtt

    @mqtt.setter
    def mqtt(self, mqtt):
        """Sets the mqtt of this PeblGateway.


        :param mqtt: The mqtt of this PeblGateway.  # noqa: E501
        :type mqtt: GatewayMqtt
        """

        self._mqtt = mqtt

    @property
    def network(self):
        """Gets the network of this PeblGateway.  # noqa: E501


        :return: The network of this PeblGateway.  # noqa: E501
        :rtype: GatewayNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this PeblGateway.


        :param network: The network of this PeblGateway.  # noqa: E501
        :type network: GatewayNetwork
        """

        self._network = network

    @property
    def schedule(self):
        """Gets the schedule of this PeblGateway.  # noqa: E501


        :return: The schedule of this PeblGateway.  # noqa: E501
        :rtype: GatewaySchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this PeblGateway.


        :param schedule: The schedule of this PeblGateway.  # noqa: E501
        :type schedule: GatewaySchedule
        """

        self._schedule = schedule

    @property
    def device(self):
        """Gets the device of this PeblGateway.  # noqa: E501


        :return: The device of this PeblGateway.  # noqa: E501
        :rtype: PeblDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this PeblGateway.


        :param device: The device of this PeblGateway.  # noqa: E501
        :type device: PeblDevice
        """

        self._device = device

    @property
    def uart(self):
        """Gets the uart of this PeblGateway.  # noqa: E501


        :return: The uart of this PeblGateway.  # noqa: E501
        :rtype: GatewayUart
        """
        return self._uart

    @uart.setter
    def uart(self, uart):
        """Sets the uart of this PeblGateway.


        :param uart: The uart of this PeblGateway.  # noqa: E501
        :type uart: GatewayUart
        """

        self._uart = uart

    @property
    def i2c(self):
        """Gets the i2c of this PeblGateway.  # noqa: E501


        :return: The i2c of this PeblGateway.  # noqa: E501
        :rtype: GatewayI2c
        """
        return self._i2c

    @i2c.setter
    def i2c(self, i2c):
        """Sets the i2c of this PeblGateway.


        :param i2c: The i2c of this PeblGateway.  # noqa: E501
        :type i2c: GatewayI2c
        """

        self._i2c = i2c

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeblGateway):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PeblGateway):
            return True

        return self.to_dict() != other.to_dict()
