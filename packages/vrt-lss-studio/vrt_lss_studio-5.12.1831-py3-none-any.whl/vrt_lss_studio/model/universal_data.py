# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class UniversalData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    VRt.Universal JSON format. A general list of data and settings that combines all data for planning, replaning and actualization.

    """


    class MetaOapg:
        
        class properties:
            
            
            class locations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['Location']:
                        return Location
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Location'], typing.List['Location']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'locations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Location':
                    return super().__getitem__(i)
            
            
            class orders(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['Order']:
                        return Order
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Order'], typing.List['Order']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'orders':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Order':
                    return super().__getitem__(i)
            
            
            class performers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['Performer']:
                        return Performer
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Performer'], typing.List['Performer']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'performers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Performer':
                    return super().__getitem__(i)
            
            
            class transports(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['Transport']:
                        return Transport
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Transport'], typing.List['Transport']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transports':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Transport':
                    return super().__getitem__(i)
            
            
            class hardlinks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['Hardlink']:
                        return Hardlink
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Hardlink'], typing.List['Hardlink']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hardlinks':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Hardlink':
                    return super().__getitem__(i)
            
            
            class trips(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['Trip']:
                        return Trip
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Trip'], typing.List['Trip']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'trips':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Trip':
                    return super().__getitem__(i)
        
            @staticmethod
            def facts() -> typing.Type['Facts']:
                return Facts
        
            @staticmethod
            def statistics() -> typing.Type['PlanStatistics']:
                return PlanStatistics
        
            @staticmethod
            def plan_settings() -> typing.Type['PlanSettings']:
                return PlanSettings
        
            @staticmethod
            def replan_settings() -> typing.Type['ReplanSettings']:
                return ReplanSettings
        
            @staticmethod
            def actualize_settings() -> typing.Type['ActualizeSettings']:
                return ActualizeSettings
            __annotations__ = {
                "locations": locations,
                "orders": orders,
                "performers": performers,
                "transports": transports,
                "hardlinks": hardlinks,
                "trips": trips,
                "facts": facts,
                "statistics": statistics,
                "plan_settings": plan_settings,
                "replan_settings": replan_settings,
                "actualize_settings": actualize_settings,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locations"]) -> MetaOapg.properties.locations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orders"]) -> MetaOapg.properties.orders: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performers"]) -> MetaOapg.properties.performers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transports"]) -> MetaOapg.properties.transports: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hardlinks"]) -> MetaOapg.properties.hardlinks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trips"]) -> MetaOapg.properties.trips: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["facts"]) -> 'Facts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statistics"]) -> 'PlanStatistics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plan_settings"]) -> 'PlanSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replan_settings"]) -> 'ReplanSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actualize_settings"]) -> 'ActualizeSettings': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["locations"], typing_extensions.Literal["orders"], typing_extensions.Literal["performers"], typing_extensions.Literal["transports"], typing_extensions.Literal["hardlinks"], typing_extensions.Literal["trips"], typing_extensions.Literal["facts"], typing_extensions.Literal["statistics"], typing_extensions.Literal["plan_settings"], typing_extensions.Literal["replan_settings"], typing_extensions.Literal["actualize_settings"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locations"]) -> typing.Union[MetaOapg.properties.locations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orders"]) -> typing.Union[MetaOapg.properties.orders, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performers"]) -> typing.Union[MetaOapg.properties.performers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transports"]) -> typing.Union[MetaOapg.properties.transports, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hardlinks"]) -> typing.Union[MetaOapg.properties.hardlinks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trips"]) -> typing.Union[MetaOapg.properties.trips, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["facts"]) -> typing.Union['Facts', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statistics"]) -> typing.Union['PlanStatistics', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plan_settings"]) -> typing.Union['PlanSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replan_settings"]) -> typing.Union['ReplanSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actualize_settings"]) -> typing.Union['ActualizeSettings', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["locations"], typing_extensions.Literal["orders"], typing_extensions.Literal["performers"], typing_extensions.Literal["transports"], typing_extensions.Literal["hardlinks"], typing_extensions.Literal["trips"], typing_extensions.Literal["facts"], typing_extensions.Literal["statistics"], typing_extensions.Literal["plan_settings"], typing_extensions.Literal["replan_settings"], typing_extensions.Literal["actualize_settings"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        locations: typing.Union[MetaOapg.properties.locations, list, tuple, schemas.Unset] = schemas.unset,
        orders: typing.Union[MetaOapg.properties.orders, list, tuple, schemas.Unset] = schemas.unset,
        performers: typing.Union[MetaOapg.properties.performers, list, tuple, schemas.Unset] = schemas.unset,
        transports: typing.Union[MetaOapg.properties.transports, list, tuple, schemas.Unset] = schemas.unset,
        hardlinks: typing.Union[MetaOapg.properties.hardlinks, list, tuple, schemas.Unset] = schemas.unset,
        trips: typing.Union[MetaOapg.properties.trips, list, tuple, schemas.Unset] = schemas.unset,
        facts: typing.Union['Facts', schemas.Unset] = schemas.unset,
        statistics: typing.Union['PlanStatistics', schemas.Unset] = schemas.unset,
        plan_settings: typing.Union['PlanSettings', schemas.Unset] = schemas.unset,
        replan_settings: typing.Union['ReplanSettings', schemas.Unset] = schemas.unset,
        actualize_settings: typing.Union['ActualizeSettings', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'UniversalData':
        return super().__new__(
            cls,
            *args,
            locations=locations,
            orders=orders,
            performers=performers,
            transports=transports,
            hardlinks=hardlinks,
            trips=trips,
            facts=facts,
            statistics=statistics,
            plan_settings=plan_settings,
            replan_settings=replan_settings,
            actualize_settings=actualize_settings,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.actualize_settings import ActualizeSettings
from vrt_lss_studio.model.facts import Facts
from vrt_lss_studio.model.hardlink import Hardlink
from vrt_lss_studio.model.location import Location
from vrt_lss_studio.model.order import Order
from vrt_lss_studio.model.performer import Performer
from vrt_lss_studio.model.plan_settings import PlanSettings
from vrt_lss_studio.model.plan_statistics import PlanStatistics
from vrt_lss_studio.model.replan_settings import ReplanSettings
from vrt_lss_studio.model.transport import Transport
from vrt_lss_studio.model.trip import Trip
