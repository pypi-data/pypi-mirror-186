# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class TransportFactor(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Speed change coefficient for the specified transport type.
    """


    class MetaOapg:
        required = {
            "transport_type",
            "speed",
        }
        
        class properties:
        
            @staticmethod
            def transport_type() -> typing.Type['TransportType']:
                return TransportType
            
            
            class speed(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000
                    inclusive_minimum = 0.1
            __annotations__ = {
                "transport_type": transport_type,
                "speed": speed,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    transport_type: 'TransportType'
    speed: MetaOapg.properties.speed
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transport_type"]) -> 'TransportType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speed"]) -> MetaOapg.properties.speed: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transport_type"], typing_extensions.Literal["speed"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transport_type"]) -> 'TransportType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speed"]) -> MetaOapg.properties.speed: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transport_type"], typing_extensions.Literal["speed"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        transport_type: 'TransportType',
        speed: typing.Union[MetaOapg.properties.speed, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TransportFactor':
        return super().__new__(
            cls,
            *args,
            transport_type=transport_type,
            speed=speed,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.transport_type import TransportType
