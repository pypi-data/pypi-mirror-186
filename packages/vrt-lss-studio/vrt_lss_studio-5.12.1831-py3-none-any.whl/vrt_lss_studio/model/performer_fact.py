# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class PerformerFact(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Fact.
    """


    class MetaOapg:
        required = {
            "performer_key",
            "position",
            "time",
            "key",
        }
        
        class properties:
            
            
            class key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            time = schemas.DateTimeSchema
            
            
            class performer_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
        
            @staticmethod
            def position() -> typing.Type['TrackPoint']:
                return TrackPoint
            __annotations__ = {
                "key": key,
                "time": time,
                "performer_key": performer_key,
                "position": position,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    performer_key: MetaOapg.properties.performer_key
    position: 'TrackPoint'
    time: MetaOapg.properties.time
    key: MetaOapg.properties.key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performer_key"]) -> MetaOapg.properties.performer_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position"]) -> 'TrackPoint': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["performer_key"], typing_extensions.Literal["position"], typing_extensions.Literal["time"], typing_extensions.Literal["key"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performer_key"]) -> MetaOapg.properties.performer_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> 'TrackPoint': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["performer_key"], typing_extensions.Literal["position"], typing_extensions.Literal["time"], typing_extensions.Literal["key"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        performer_key: typing.Union[MetaOapg.properties.performer_key, str, ],
        position: 'TrackPoint',
        time: typing.Union[MetaOapg.properties.time, str, datetime, ],
        key: typing.Union[MetaOapg.properties.key, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PerformerFact':
        return super().__new__(
            cls,
            *args,
            performer_key=performer_key,
            position=position,
            time=time,
            key=key,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.track_point import TrackPoint
