# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class Experiment(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Experiment.
    """


    class MetaOapg:
        required = {
            "settings",
            "pristine",
            "specification",
            "creation_date",
            "edit_date",
            "key",
            "statistics",
        }
        
        class properties:
        
            @staticmethod
            def key() -> typing.Type['UniqueKey']:
                return UniqueKey
        
            @staticmethod
            def specification() -> typing.Type['ExperimentSpecification']:
                return ExperimentSpecification
        
            @staticmethod
            def settings() -> typing.Type['ExperimentSettings']:
                return ExperimentSettings
        
            @staticmethod
            def statistics() -> typing.Type['ExperimentStatistics']:
                return ExperimentStatistics
            pristine = schemas.BoolSchema
            edit_date = schemas.DateTimeSchema
            creation_date = schemas.DateTimeSchema
        
            @staticmethod
            def progress() -> typing.Type['CalculationProgress']:
                return CalculationProgress
        
            @staticmethod
            def calculation() -> typing.Type['ExperimentCalculation']:
                return ExperimentCalculation
        
            @staticmethod
            def check() -> typing.Type['ExperimentCheck']:
                return ExperimentCheck
            sharing = schemas.BoolSchema
            __annotations__ = {
                "key": key,
                "specification": specification,
                "settings": settings,
                "statistics": statistics,
                "pristine": pristine,
                "edit_date": edit_date,
                "creation_date": creation_date,
                "progress": progress,
                "calculation": calculation,
                "check": check,
                "sharing": sharing,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    settings: 'ExperimentSettings'
    pristine: MetaOapg.properties.pristine
    specification: 'ExperimentSpecification'
    creation_date: MetaOapg.properties.creation_date
    edit_date: MetaOapg.properties.edit_date
    key: 'UniqueKey'
    statistics: 'ExperimentStatistics'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> 'ExperimentSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pristine"]) -> MetaOapg.properties.pristine: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["specification"]) -> 'ExperimentSpecification': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_date"]) -> MetaOapg.properties.creation_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edit_date"]) -> MetaOapg.properties.edit_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> 'UniqueKey': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statistics"]) -> 'ExperimentStatistics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["progress"]) -> 'CalculationProgress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calculation"]) -> 'ExperimentCalculation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["check"]) -> 'ExperimentCheck': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sharing"]) -> MetaOapg.properties.sharing: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["settings"], typing_extensions.Literal["pristine"], typing_extensions.Literal["specification"], typing_extensions.Literal["creation_date"], typing_extensions.Literal["edit_date"], typing_extensions.Literal["key"], typing_extensions.Literal["statistics"], typing_extensions.Literal["progress"], typing_extensions.Literal["calculation"], typing_extensions.Literal["check"], typing_extensions.Literal["sharing"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> 'ExperimentSettings': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pristine"]) -> MetaOapg.properties.pristine: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["specification"]) -> 'ExperimentSpecification': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_date"]) -> MetaOapg.properties.creation_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edit_date"]) -> MetaOapg.properties.edit_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> 'UniqueKey': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statistics"]) -> 'ExperimentStatistics': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["progress"]) -> typing.Union['CalculationProgress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calculation"]) -> typing.Union['ExperimentCalculation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["check"]) -> typing.Union['ExperimentCheck', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sharing"]) -> typing.Union[MetaOapg.properties.sharing, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["settings"], typing_extensions.Literal["pristine"], typing_extensions.Literal["specification"], typing_extensions.Literal["creation_date"], typing_extensions.Literal["edit_date"], typing_extensions.Literal["key"], typing_extensions.Literal["statistics"], typing_extensions.Literal["progress"], typing_extensions.Literal["calculation"], typing_extensions.Literal["check"], typing_extensions.Literal["sharing"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        settings: 'ExperimentSettings',
        pristine: typing.Union[MetaOapg.properties.pristine, bool, ],
        specification: 'ExperimentSpecification',
        creation_date: typing.Union[MetaOapg.properties.creation_date, str, datetime, ],
        edit_date: typing.Union[MetaOapg.properties.edit_date, str, datetime, ],
        key: 'UniqueKey',
        statistics: 'ExperimentStatistics',
        progress: typing.Union['CalculationProgress', schemas.Unset] = schemas.unset,
        calculation: typing.Union['ExperimentCalculation', schemas.Unset] = schemas.unset,
        check: typing.Union['ExperimentCheck', schemas.Unset] = schemas.unset,
        sharing: typing.Union[MetaOapg.properties.sharing, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Experiment':
        return super().__new__(
            cls,
            *args,
            settings=settings,
            pristine=pristine,
            specification=specification,
            creation_date=creation_date,
            edit_date=edit_date,
            key=key,
            statistics=statistics,
            progress=progress,
            calculation=calculation,
            check=check,
            sharing=sharing,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.calculation_progress import CalculationProgress
from vrt_lss_studio.model.experiment_calculation import ExperimentCalculation
from vrt_lss_studio.model.experiment_check import ExperimentCheck
from vrt_lss_studio.model.experiment_settings import ExperimentSettings
from vrt_lss_studio.model.experiment_specification import ExperimentSpecification
from vrt_lss_studio.model.experiment_statistics import ExperimentStatistics
from vrt_lss_studio.model.unique_key import UniqueKey
