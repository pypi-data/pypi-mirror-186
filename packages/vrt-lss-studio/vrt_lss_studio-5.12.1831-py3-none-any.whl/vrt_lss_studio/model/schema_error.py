# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class SchemaError(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Data error by schema.
    """


    class MetaOapg:
        required = {
            "message",
            "entity",
        }
        
        class properties:
            entity = schemas.StrSchema
            message = schemas.StrSchema
            __annotations__ = {
                "entity": entity,
                "message": message,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    message: MetaOapg.properties.message
    entity: MetaOapg.properties.entity
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["message"], typing_extensions.Literal["entity"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["message"], typing_extensions.Literal["entity"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        message: typing.Union[MetaOapg.properties.message, str, ],
        entity: typing.Union[MetaOapg.properties.entity, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaError':
        return super().__new__(
            cls,
            *args,
            message=message,
            entity=entity,
            _configuration=_configuration,
        )
