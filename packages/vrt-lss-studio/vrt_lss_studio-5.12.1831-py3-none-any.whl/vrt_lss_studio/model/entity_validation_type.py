# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class EntityValidationType(
    schemas.EnumBase,
    schemas.StrSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Validation type:
  * `NO_AVAILABLE_TRANSPORT` - the order cannot be fulfilled, since there is no available (by shift limitations) transport
  * `NO_AVAILABLE_PERFORMER` - the order cannot be fulfilled, since there is not a single available (by shift limitations) performer
  * `NO_COMPATIBLE_TRANSPORT` - the order cannot be completed, since there is not a single compatible (in terms of capacity and \ or compatibility tags) transport
  * `NO_COMPATIBLE_PERFORMER` - the order cannot be completed, since there is not a single compatible (by compatibility tags) performer
  * `PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_ORDER` - for each cargo within the order there must be exactly one loading and exactly one unloading (` precedence_in_order`)
  * `PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_TRIP` - conflicting requirements for the precedence of orders were specified (` precedence_in_trip`)
  * `VIOLATION_PRECEDENCE_IN_TRIP_AND_ORDER` - requirements for the precedence of orders in the trip (`precedence_in_trip`) and in the order (` precedence_in_order`) contradict each other
  * `TIME_WINDOW_VIOLATION` - the start time of the time window is later than the end time of the window
  * `ORDER_WINDOWS_INTERSECTION_VIOLATION` - soft windows should not go beyond the boundaries of the hard window
  * `PERFORMER_SHIFTS_INTERSECTION_VIOLATION` - performer's work shifts should not intersect
  * `TRANSPORT_SHIFTS_INTERSECTION_VIOLATION` - transport's work shifts should not intersect
  * `LOCATION_WINDOWS_INTERSECTION_VIOLATION` - time ranges of working windows of locations should not intersect
  * `INVALID_LOCATION_DURATIONS` - location has a working window that is less than the sum of the times `arrival + departure`
  * `NO_TRANSPORT_BOXES` - if there are orders with cargo, then the transport must have at least one box
  * `MAX_CAPACITY_VIOLATION` - `max_capacity` limit exceeds the total capacity of all boxes or set for only one box or less than the capacity of some box
  * `MAX_BOXES_VIOLATION` - limit `max_boxes` is greater than or equal to the total number of boxes or specified for one box or equal to zero
  * `TOO_MANY_CARGOS_FOR_DROP_VIOLATION` - the number of loads for an order of the` DROP` type must be no more than one
  * `EMPTY_CARGOES_LIST` - empty list of loads for orders of type` DROP` / `PICKUP`
  * `GEODATA_TIME_WINDOW_VIOLATION` - the planning horizon exceeds the maximum available value
  * `SHIFT_RESTRICTIONS_COULD_BE_MORE_PRECISE` - the working window `working_window` of the change of the artist does not lie entirely inside the window of availability `availability_window`
  * `DURATION_DOES_NOT_FIT_INTO_HARD_WINDOW` - the duration of the event does not fit into the hard time window
  * `DURATION_DOES_NOT_FIT_INTO_SOFT_WINDOW` - the duration of the event does not fit into the soft time window

    """


    class MetaOapg:
        enum_value_to_name = {
            "NO_AVAILABLE_TRANSPORT": "NO_AVAILABLE_TRANSPORT",
            "NO_AVAILABLE_PERFORMER": "NO_AVAILABLE_PERFORMER",
            "NO_COMPATIBLE_TRANSPORT": "NO_COMPATIBLE_TRANSPORT",
            "NO_COMPATIBLE_PERFORMER": "NO_COMPATIBLE_PERFORMER",
            "PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_ORDER": "PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_ORDER",
            "PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_TRIP": "PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_TRIP",
            "VIOLATION_PRECEDENCE_IN_TRIP_AND_ORDER": "VIOLATION_PRECEDENCE_IN_TRIP_AND_ORDER",
            "TIME_WINDOW_VIOLATION": "TIME_WINDOW_VIOLATION",
            "ORDER_WINDOWS_INTERSECTION_VIOLATION": "ORDER_WINDOWS_INTERSECTION_VIOLATION",
            "PERFORMER_SHIFTS_INTERSECTION_VIOLATION": "PERFORMER_SHIFTS_INTERSECTION_VIOLATION",
            "TRANSPORT_SHIFTS_INTERSECTION_VIOLATION": "TRANSPORT_SHIFTS_INTERSECTION_VIOLATION",
            "LOCATION_WINDOWS_INTERSECTION_VIOLATION": "LOCATION_WINDOWS_INTERSECTION_VIOLATION",
            "INVALID_LOCATION_DURATIONS": "INVALID_LOCATION_DURATIONS",
            "NO_TRANSPORT_BOXES": "NO_TRANSPORT_BOXES",
            "MAX_CAPACITY_VIOLATION": "MAX_CAPACITY_VIOLATION",
            "MAX_BOXES_VIOLATION": "MAX_BOXES_VIOLATION",
            "TOO_MANY_CARGOS_FOR_DROP_VIOLATION": "TOO_MANY_CARGOS_FOR_DROP_VIOLATION",
            "EMPTY_CARGOES_LIST": "EMPTY_CARGOES_LIST",
            "GEODATA_TIME_WINDOW_VIOLATION": "GEODATA_TIME_WINDOW_VIOLATION",
            "SHIFT_RESTRICTIONS_COULD_BE_MORE_PRECISE": "SHIFT_RESTRICTIONS_COULD_BE_MORE_PRECISE",
            "DURATION_DOES_NOT_FIT_INTO_HARD_WINDOW": "DURATION_DOES_NOT_FIT_INTO_HARD_WINDOW",
            "DURATION_DOES_NOT_FIT_INTO_SOFT_WINDOW": "DURATION_DOES_NOT_FIT_INTO_SOFT_WINDOW",
        }
    
    @schemas.classproperty
    def NO_AVAILABLE_TRANSPORT(cls):
        return cls("NO_AVAILABLE_TRANSPORT")
    
    @schemas.classproperty
    def NO_AVAILABLE_PERFORMER(cls):
        return cls("NO_AVAILABLE_PERFORMER")
    
    @schemas.classproperty
    def NO_COMPATIBLE_TRANSPORT(cls):
        return cls("NO_COMPATIBLE_TRANSPORT")
    
    @schemas.classproperty
    def NO_COMPATIBLE_PERFORMER(cls):
        return cls("NO_COMPATIBLE_PERFORMER")
    
    @schemas.classproperty
    def PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_ORDER(cls):
        return cls("PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_ORDER")
    
    @schemas.classproperty
    def PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_TRIP(cls):
        return cls("PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_TRIP")
    
    @schemas.classproperty
    def VIOLATION_PRECEDENCE_IN_TRIP_AND_ORDER(cls):
        return cls("VIOLATION_PRECEDENCE_IN_TRIP_AND_ORDER")
    
    @schemas.classproperty
    def TIME_WINDOW_VIOLATION(cls):
        return cls("TIME_WINDOW_VIOLATION")
    
    @schemas.classproperty
    def ORDER_WINDOWS_INTERSECTION_VIOLATION(cls):
        return cls("ORDER_WINDOWS_INTERSECTION_VIOLATION")
    
    @schemas.classproperty
    def PERFORMER_SHIFTS_INTERSECTION_VIOLATION(cls):
        return cls("PERFORMER_SHIFTS_INTERSECTION_VIOLATION")
    
    @schemas.classproperty
    def TRANSPORT_SHIFTS_INTERSECTION_VIOLATION(cls):
        return cls("TRANSPORT_SHIFTS_INTERSECTION_VIOLATION")
    
    @schemas.classproperty
    def LOCATION_WINDOWS_INTERSECTION_VIOLATION(cls):
        return cls("LOCATION_WINDOWS_INTERSECTION_VIOLATION")
    
    @schemas.classproperty
    def INVALID_LOCATION_DURATIONS(cls):
        return cls("INVALID_LOCATION_DURATIONS")
    
    @schemas.classproperty
    def NO_TRANSPORT_BOXES(cls):
        return cls("NO_TRANSPORT_BOXES")
    
    @schemas.classproperty
    def MAX_CAPACITY_VIOLATION(cls):
        return cls("MAX_CAPACITY_VIOLATION")
    
    @schemas.classproperty
    def MAX_BOXES_VIOLATION(cls):
        return cls("MAX_BOXES_VIOLATION")
    
    @schemas.classproperty
    def TOO_MANY_CARGOS_FOR_DROP_VIOLATION(cls):
        return cls("TOO_MANY_CARGOS_FOR_DROP_VIOLATION")
    
    @schemas.classproperty
    def EMPTY_CARGOES_LIST(cls):
        return cls("EMPTY_CARGOES_LIST")
    
    @schemas.classproperty
    def GEODATA_TIME_WINDOW_VIOLATION(cls):
        return cls("GEODATA_TIME_WINDOW_VIOLATION")
    
    @schemas.classproperty
    def SHIFT_RESTRICTIONS_COULD_BE_MORE_PRECISE(cls):
        return cls("SHIFT_RESTRICTIONS_COULD_BE_MORE_PRECISE")
    
    @schemas.classproperty
    def DURATION_DOES_NOT_FIT_INTO_HARD_WINDOW(cls):
        return cls("DURATION_DOES_NOT_FIT_INTO_HARD_WINDOW")
    
    @schemas.classproperty
    def DURATION_DOES_NOT_FIT_INTO_SOFT_WINDOW(cls):
        return cls("DURATION_DOES_NOT_FIT_INTO_SOFT_WINDOW")
