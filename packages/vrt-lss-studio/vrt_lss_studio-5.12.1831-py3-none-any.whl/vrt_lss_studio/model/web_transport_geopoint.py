# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class WebTransportGeopoint(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Geopoint for map.
    """


    class MetaOapg:
        required = {
            "point_type",
            "shift_key",
            "transport_key",
            "geopoint",
        }
        
        class properties:
        
            @staticmethod
            def geopoint() -> typing.Type['Geopoint']:
                return Geopoint
            
            
            class transport_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class shift_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class point_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "START": "START",
                        "FINISH": "FINISH",
                    }
                
                @schemas.classproperty
                def START(cls):
                    return cls("START")
                
                @schemas.classproperty
                def FINISH(cls):
                    return cls("FINISH")
            
            
            class trip_key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'trip_key':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class stop_number(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 1000
                    inclusive_minimum = 0
            __annotations__ = {
                "geopoint": geopoint,
                "transport_key": transport_key,
                "shift_key": shift_key,
                "point_type": point_type,
                "trip_key": trip_key,
                "stop_number": stop_number,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    point_type: MetaOapg.properties.point_type
    shift_key: MetaOapg.properties.shift_key
    transport_key: MetaOapg.properties.transport_key
    geopoint: 'Geopoint'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["point_type"]) -> MetaOapg.properties.point_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shift_key"]) -> MetaOapg.properties.shift_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transport_key"]) -> MetaOapg.properties.transport_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geopoint"]) -> 'Geopoint': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trip_key"]) -> MetaOapg.properties.trip_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stop_number"]) -> MetaOapg.properties.stop_number: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["point_type"], typing_extensions.Literal["shift_key"], typing_extensions.Literal["transport_key"], typing_extensions.Literal["geopoint"], typing_extensions.Literal["trip_key"], typing_extensions.Literal["stop_number"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["point_type"]) -> MetaOapg.properties.point_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shift_key"]) -> MetaOapg.properties.shift_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transport_key"]) -> MetaOapg.properties.transport_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geopoint"]) -> 'Geopoint': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trip_key"]) -> typing.Union[MetaOapg.properties.trip_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stop_number"]) -> typing.Union[MetaOapg.properties.stop_number, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["point_type"], typing_extensions.Literal["shift_key"], typing_extensions.Literal["transport_key"], typing_extensions.Literal["geopoint"], typing_extensions.Literal["trip_key"], typing_extensions.Literal["stop_number"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        point_type: typing.Union[MetaOapg.properties.point_type, str, ],
        shift_key: typing.Union[MetaOapg.properties.shift_key, str, ],
        transport_key: typing.Union[MetaOapg.properties.transport_key, str, ],
        geopoint: 'Geopoint',
        trip_key: typing.Union[MetaOapg.properties.trip_key, None, str, schemas.Unset] = schemas.unset,
        stop_number: typing.Union[MetaOapg.properties.stop_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'WebTransportGeopoint':
        return super().__new__(
            cls,
            *args,
            point_type=point_type,
            shift_key=shift_key,
            transport_key=transport_key,
            geopoint=geopoint,
            trip_key=trip_key,
            stop_number=stop_number,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.geopoint import Geopoint
