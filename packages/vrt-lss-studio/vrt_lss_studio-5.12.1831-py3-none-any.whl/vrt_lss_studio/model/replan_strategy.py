# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class ReplanStrategy(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Replan strategy.
    """


    class MetaOapg:
        
        class properties:
            reorder = schemas.BoolSchema
            plan_new_orders = schemas.BoolSchema
            create_new_trips = schemas.BoolSchema
            __annotations__ = {
                "reorder": reorder,
                "plan_new_orders": plan_new_orders,
                "create_new_trips": create_new_trips,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reorder"]) -> MetaOapg.properties.reorder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plan_new_orders"]) -> MetaOapg.properties.plan_new_orders: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_new_trips"]) -> MetaOapg.properties.create_new_trips: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reorder"], typing_extensions.Literal["plan_new_orders"], typing_extensions.Literal["create_new_trips"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reorder"]) -> typing.Union[MetaOapg.properties.reorder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plan_new_orders"]) -> typing.Union[MetaOapg.properties.plan_new_orders, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_new_trips"]) -> typing.Union[MetaOapg.properties.create_new_trips, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reorder"], typing_extensions.Literal["plan_new_orders"], typing_extensions.Literal["create_new_trips"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        reorder: typing.Union[MetaOapg.properties.reorder, bool, schemas.Unset] = schemas.unset,
        plan_new_orders: typing.Union[MetaOapg.properties.plan_new_orders, bool, schemas.Unset] = schemas.unset,
        create_new_trips: typing.Union[MetaOapg.properties.create_new_trips, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ReplanStrategy':
        return super().__new__(
            cls,
            *args,
            reorder=reorder,
            plan_new_orders=plan_new_orders,
            create_new_trips=create_new_trips,
            _configuration=_configuration,
        )
