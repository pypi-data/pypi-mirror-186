# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class AssignedTransport(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Transport's shift assigned to the specified time (`shift_time`).
    """


    class MetaOapg:
        required = {
            "shift_key",
            "transport_key",
            "shift_time",
        }
        
        class properties:
            
            
            class transport_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class shift_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
        
            @staticmethod
            def shift_time() -> typing.Type['TimeWindow']:
                return TimeWindow
            __annotations__ = {
                "transport_key": transport_key,
                "shift_key": shift_key,
                "shift_time": shift_time,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    shift_key: MetaOapg.properties.shift_key
    transport_key: MetaOapg.properties.transport_key
    shift_time: 'TimeWindow'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shift_key"]) -> MetaOapg.properties.shift_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transport_key"]) -> MetaOapg.properties.transport_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shift_time"]) -> 'TimeWindow': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["shift_key"], typing_extensions.Literal["transport_key"], typing_extensions.Literal["shift_time"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shift_key"]) -> MetaOapg.properties.shift_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transport_key"]) -> MetaOapg.properties.transport_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shift_time"]) -> 'TimeWindow': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["shift_key"], typing_extensions.Literal["transport_key"], typing_extensions.Literal["shift_time"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        shift_key: typing.Union[MetaOapg.properties.shift_key, str, ],
        transport_key: typing.Union[MetaOapg.properties.transport_key, str, ],
        shift_time: 'TimeWindow',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AssignedTransport':
        return super().__new__(
            cls,
            *args,
            shift_key=shift_key,
            transport_key=transport_key,
            shift_time=shift_time,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.time_window import TimeWindow
