# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class ExperimentCalculation(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Experiment calculation details.
    """


    class MetaOapg:
        required = {
            "progress",
            "tracedata",
            "info",
        }
        
        class properties:
        
            @staticmethod
            def progress() -> typing.Type['CalculationProgress']:
                return CalculationProgress
        
            @staticmethod
            def info() -> typing.Type['CalculationInfo']:
                return CalculationInfo
        
            @staticmethod
            def tracedata() -> typing.Type['Tracedata']:
                return Tracedata
            __annotations__ = {
                "progress": progress,
                "info": info,
                "tracedata": tracedata,
            }
        additional_properties = schemas.NotAnyTypeSchema

    
    progress: 'CalculationProgress'
    tracedata: 'Tracedata'
    info: 'CalculationInfo'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["progress"]) -> 'CalculationProgress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracedata"]) -> 'Tracedata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["info"]) -> 'CalculationInfo': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["progress"], typing_extensions.Literal["tracedata"], typing_extensions.Literal["info"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["progress"]) -> 'CalculationProgress': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracedata"]) -> 'Tracedata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["info"]) -> 'CalculationInfo': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["progress"], typing_extensions.Literal["tracedata"], typing_extensions.Literal["info"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ExperimentCalculation':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.calculation_info import CalculationInfo
from vrt_lss_studio.model.calculation_progress import CalculationProgress
from vrt_lss_studio.model.tracedata import Tracedata
