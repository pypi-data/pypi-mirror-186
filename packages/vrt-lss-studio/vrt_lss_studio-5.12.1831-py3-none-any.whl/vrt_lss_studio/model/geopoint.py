# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class Geopoint(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Geographical point.
    """


    class MetaOapg:
        required = {
            "latitude",
            "longitude",
        }
        
        class properties:
            
            
            class latitude(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 90
                    inclusive_minimum = -90
            
            
            class longitude(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 180
                    inclusive_minimum = -180
            __annotations__ = {
                "latitude": latitude,
                "longitude": longitude,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    latitude: MetaOapg.properties.latitude
    longitude: MetaOapg.properties.longitude
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["latitude"], typing_extensions.Literal["longitude"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["latitude"], typing_extensions.Literal["longitude"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        latitude: typing.Union[MetaOapg.properties.latitude, decimal.Decimal, int, float, ],
        longitude: typing.Union[MetaOapg.properties.longitude, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Geopoint':
        return super().__new__(
            cls,
            *args,
            latitude=latitude,
            longitude=longitude,
            _configuration=_configuration,
        )
