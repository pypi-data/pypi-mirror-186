# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class TransportLoad(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Transport utilization by load.
    """


    class MetaOapg:
        required = {
            "count",
            "capacity",
        }
        
        class properties:
            
            
            class count(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 30001
                    inclusive_minimum = 0
        
            @staticmethod
            def capacity() -> typing.Type['Capacity']:
                return Capacity
            __annotations__ = {
                "count": count,
                "capacity": capacity,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    count: MetaOapg.properties.count
    capacity: 'Capacity'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity"]) -> 'Capacity': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["count"], typing_extensions.Literal["capacity"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity"]) -> 'Capacity': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["count"], typing_extensions.Literal["capacity"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, ],
        capacity: 'Capacity',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TransportLoad':
        return super().__new__(
            cls,
            *args,
            count=count,
            capacity=capacity,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.capacity import Capacity
