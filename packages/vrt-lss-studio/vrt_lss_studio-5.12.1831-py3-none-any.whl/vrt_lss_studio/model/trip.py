# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class Trip(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A trip is a sequence of states assigned to the specified performer driving the specified transport.

    """


    class MetaOapg:
        required = {
            "performer",
            "transport",
            "key",
            "states",
        }
        
        class properties:
            
            
            class key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
        
            @staticmethod
            def performer() -> typing.Type['AssignedPerformer']:
                return AssignedPerformer
        
            @staticmethod
            def transport() -> typing.Type['AssignedTransport']:
                return AssignedTransport
            
            
            class states(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = False
                    max_items = 30001
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['TripState']:
                        return TripState
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TripState'], typing.List['TripState']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'states':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TripState':
                    return super().__getitem__(i)
        
            @staticmethod
            def waitlist() -> typing.Type['TripWaitlist']:
                return TripWaitlist
        
            @staticmethod
            def attributes() -> typing.Type['Attributes']:
                return Attributes
            __annotations__ = {
                "key": key,
                "performer": performer,
                "transport": transport,
                "states": states,
                "waitlist": waitlist,
                "attributes": attributes,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    performer: 'AssignedPerformer'
    transport: 'AssignedTransport'
    key: MetaOapg.properties.key
    states: MetaOapg.properties.states
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performer"]) -> 'AssignedPerformer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transport"]) -> 'AssignedTransport': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["states"]) -> MetaOapg.properties.states: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waitlist"]) -> 'TripWaitlist': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> 'Attributes': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["performer"], typing_extensions.Literal["transport"], typing_extensions.Literal["key"], typing_extensions.Literal["states"], typing_extensions.Literal["waitlist"], typing_extensions.Literal["attributes"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performer"]) -> 'AssignedPerformer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transport"]) -> 'AssignedTransport': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["states"]) -> MetaOapg.properties.states: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waitlist"]) -> typing.Union['TripWaitlist', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union['Attributes', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["performer"], typing_extensions.Literal["transport"], typing_extensions.Literal["key"], typing_extensions.Literal["states"], typing_extensions.Literal["waitlist"], typing_extensions.Literal["attributes"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        performer: 'AssignedPerformer',
        transport: 'AssignedTransport',
        key: typing.Union[MetaOapg.properties.key, str, ],
        states: typing.Union[MetaOapg.properties.states, list, tuple, ],
        waitlist: typing.Union['TripWaitlist', schemas.Unset] = schemas.unset,
        attributes: typing.Union['Attributes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Trip':
        return super().__new__(
            cls,
            *args,
            performer=performer,
            transport=transport,
            key=key,
            states=states,
            waitlist=waitlist,
            attributes=attributes,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.assigned_performer import AssignedPerformer
from vrt_lss_studio.model.assigned_transport import AssignedTransport
from vrt_lss_studio.model.attributes import Attributes
from vrt_lss_studio.model.trip_state import TripState
from vrt_lss_studio.model.trip_waitlist import TripWaitlist
