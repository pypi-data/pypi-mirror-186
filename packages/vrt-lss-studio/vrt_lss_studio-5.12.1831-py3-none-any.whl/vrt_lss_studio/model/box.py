# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class Box(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A transport box capable to hold a cargo. `capacity` - the compartment capacity, which limits the maximum amount for all `capacity` fields of *all* the cargoes.

    """


    class MetaOapg:
        required = {
            "key",
        }
        
        class properties:
            
            
            class key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
        
            @staticmethod
            def capacity() -> typing.Type['Capacity']:
                return Capacity
        
            @staticmethod
            def compatibilities() -> typing.Type['BoxCompatibilities']:
                return BoxCompatibilities
        
            @staticmethod
            def limits() -> typing.Type['BoxLimits']:
                return BoxLimits
            __annotations__ = {
                "key": key,
                "capacity": capacity,
                "compatibilities": compatibilities,
                "limits": limits,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    key: MetaOapg.properties.key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity"]) -> 'Capacity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compatibilities"]) -> 'BoxCompatibilities': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limits"]) -> 'BoxLimits': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["key"], typing_extensions.Literal["capacity"], typing_extensions.Literal["compatibilities"], typing_extensions.Literal["limits"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity"]) -> typing.Union['Capacity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compatibilities"]) -> typing.Union['BoxCompatibilities', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limits"]) -> typing.Union['BoxLimits', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["key"], typing_extensions.Literal["capacity"], typing_extensions.Literal["compatibilities"], typing_extensions.Literal["limits"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        key: typing.Union[MetaOapg.properties.key, str, ],
        capacity: typing.Union['Capacity', schemas.Unset] = schemas.unset,
        compatibilities: typing.Union['BoxCompatibilities', schemas.Unset] = schemas.unset,
        limits: typing.Union['BoxLimits', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Box':
        return super().__new__(
            cls,
            *args,
            key=key,
            capacity=capacity,
            compatibilities=compatibilities,
            limits=limits,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.box_compatibilities import BoxCompatibilities
from vrt_lss_studio.model.box_limits import BoxLimits
from vrt_lss_studio.model.capacity import Capacity
