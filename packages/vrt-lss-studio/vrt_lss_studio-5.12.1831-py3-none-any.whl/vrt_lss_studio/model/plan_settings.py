# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class PlanSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Planning settings.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def trips_settings() -> typing.Type['TripsSettings']:
                return TripsSettings
        
            @staticmethod
            def geo_settings() -> typing.Type['GeoSettings']:
                return GeoSettings
        
            @staticmethod
            def external_routing() -> typing.Type['RoutingTransportMatrixList']:
                return RoutingTransportMatrixList
        
            @staticmethod
            def calculation_settings() -> typing.Type['CalculationSettings']:
                return CalculationSettings
            __annotations__ = {
                "trips_settings": trips_settings,
                "geo_settings": geo_settings,
                "external_routing": external_routing,
                "calculation_settings": calculation_settings,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trips_settings"]) -> 'TripsSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geo_settings"]) -> 'GeoSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_routing"]) -> 'RoutingTransportMatrixList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calculation_settings"]) -> 'CalculationSettings': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["trips_settings"], typing_extensions.Literal["geo_settings"], typing_extensions.Literal["external_routing"], typing_extensions.Literal["calculation_settings"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trips_settings"]) -> typing.Union['TripsSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geo_settings"]) -> typing.Union['GeoSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_routing"]) -> typing.Union['RoutingTransportMatrixList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calculation_settings"]) -> typing.Union['CalculationSettings', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["trips_settings"], typing_extensions.Literal["geo_settings"], typing_extensions.Literal["external_routing"], typing_extensions.Literal["calculation_settings"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        trips_settings: typing.Union['TripsSettings', schemas.Unset] = schemas.unset,
        geo_settings: typing.Union['GeoSettings', schemas.Unset] = schemas.unset,
        external_routing: typing.Union['RoutingTransportMatrixList', schemas.Unset] = schemas.unset,
        calculation_settings: typing.Union['CalculationSettings', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PlanSettings':
        return super().__new__(
            cls,
            *args,
            trips_settings=trips_settings,
            geo_settings=geo_settings,
            external_routing=external_routing,
            calculation_settings=calculation_settings,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.calculation_settings import CalculationSettings
from vrt_lss_studio.model.geo_settings import GeoSettings
from vrt_lss_studio.model.routing_transport_matrix_list import RoutingTransportMatrixList
from vrt_lss_studio.model.trips_settings import TripsSettings
