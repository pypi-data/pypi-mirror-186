# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class PerformerLimits(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The performer limitations.

    """


    class MetaOapg:
        
        class properties:
            
            
            class max_work_shifts(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 31
                    inclusive_minimum = 1
            __annotations__ = {
                "max_work_shifts": max_work_shifts,
            }
        additional_properties = schemas.NotAnyTypeSchema

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_work_shifts"]) -> MetaOapg.properties.max_work_shifts: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["max_work_shifts"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_work_shifts"]) -> typing.Union[MetaOapg.properties.max_work_shifts, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["max_work_shifts"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        max_work_shifts: typing.Union[MetaOapg.properties.max_work_shifts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PerformerLimits':
        return super().__new__(
            cls,
            *args,
            max_work_shifts=max_work_shifts,
            _configuration=_configuration,
        )
