# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class Order(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The order for delivery/transportation, contains a list of demands.
    """


    class MetaOapg:
        required = {
            "demands",
            "key",
        }
        
        class properties:
            
            
            class key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class demands(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 1000
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Demand']:
                        return Demand
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Demand'], typing.List['Demand']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'demands':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Demand':
                    return super().__getitem__(i)
            
            
            class cargos(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 1000
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['Cargo']:
                        return Cargo
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Cargo'], typing.List['Cargo']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cargos':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Cargo':
                    return super().__getitem__(i)
        
            @staticmethod
            def compatibilities() -> typing.Type['OrderCompatibilities']:
                return OrderCompatibilities
        
            @staticmethod
            def attributes() -> typing.Type['Attributes']:
                return Attributes
            __annotations__ = {
                "key": key,
                "demands": demands,
                "cargos": cargos,
                "compatibilities": compatibilities,
                "attributes": attributes,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    demands: MetaOapg.properties.demands
    key: MetaOapg.properties.key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["demands"]) -> MetaOapg.properties.demands: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cargos"]) -> MetaOapg.properties.cargos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compatibilities"]) -> 'OrderCompatibilities': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> 'Attributes': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["demands"], typing_extensions.Literal["key"], typing_extensions.Literal["cargos"], typing_extensions.Literal["compatibilities"], typing_extensions.Literal["attributes"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["demands"]) -> MetaOapg.properties.demands: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cargos"]) -> typing.Union[MetaOapg.properties.cargos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compatibilities"]) -> typing.Union['OrderCompatibilities', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union['Attributes', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["demands"], typing_extensions.Literal["key"], typing_extensions.Literal["cargos"], typing_extensions.Literal["compatibilities"], typing_extensions.Literal["attributes"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        demands: typing.Union[MetaOapg.properties.demands, list, tuple, ],
        key: typing.Union[MetaOapg.properties.key, str, ],
        cargos: typing.Union[MetaOapg.properties.cargos, list, tuple, schemas.Unset] = schemas.unset,
        compatibilities: typing.Union['OrderCompatibilities', schemas.Unset] = schemas.unset,
        attributes: typing.Union['Attributes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Order':
        return super().__new__(
            cls,
            *args,
            demands=demands,
            key=key,
            cargos=cargos,
            compatibilities=compatibilities,
            attributes=attributes,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.attributes import Attributes
from vrt_lss_studio.model.cargo import Cargo
from vrt_lss_studio.model.demand import Demand
from vrt_lss_studio.model.order_compatibilities import OrderCompatibilities
