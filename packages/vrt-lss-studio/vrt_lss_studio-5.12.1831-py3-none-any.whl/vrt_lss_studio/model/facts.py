# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class Facts(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Events that have taken place.

    """


    class MetaOapg:
        
        class properties:
            
            
            class order_facts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['OrderFact']:
                        return OrderFact
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['OrderFact'], typing.List['OrderFact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'order_facts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'OrderFact':
                    return super().__getitem__(i)
            
            
            class demand_facts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['DemandFact']:
                        return DemandFact
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DemandFact'], typing.List['DemandFact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'demand_facts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DemandFact':
                    return super().__getitem__(i)
            
            
            class performer_facts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['PerformerFact']:
                        return PerformerFact
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PerformerFact'], typing.List['PerformerFact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'performer_facts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PerformerFact':
                    return super().__getitem__(i)
            
            
            class transport_facts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['TransportFact']:
                        return TransportFact
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TransportFact'], typing.List['TransportFact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transport_facts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TransportFact':
                    return super().__getitem__(i)
            __annotations__ = {
                "order_facts": order_facts,
                "demand_facts": demand_facts,
                "performer_facts": performer_facts,
                "transport_facts": transport_facts,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_facts"]) -> MetaOapg.properties.order_facts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["demand_facts"]) -> MetaOapg.properties.demand_facts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performer_facts"]) -> MetaOapg.properties.performer_facts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transport_facts"]) -> MetaOapg.properties.transport_facts: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["order_facts"], typing_extensions.Literal["demand_facts"], typing_extensions.Literal["performer_facts"], typing_extensions.Literal["transport_facts"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_facts"]) -> typing.Union[MetaOapg.properties.order_facts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["demand_facts"]) -> typing.Union[MetaOapg.properties.demand_facts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performer_facts"]) -> typing.Union[MetaOapg.properties.performer_facts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transport_facts"]) -> typing.Union[MetaOapg.properties.transport_facts, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["order_facts"], typing_extensions.Literal["demand_facts"], typing_extensions.Literal["performer_facts"], typing_extensions.Literal["transport_facts"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        order_facts: typing.Union[MetaOapg.properties.order_facts, list, tuple, schemas.Unset] = schemas.unset,
        demand_facts: typing.Union[MetaOapg.properties.demand_facts, list, tuple, schemas.Unset] = schemas.unset,
        performer_facts: typing.Union[MetaOapg.properties.performer_facts, list, tuple, schemas.Unset] = schemas.unset,
        transport_facts: typing.Union[MetaOapg.properties.transport_facts, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Facts':
        return super().__new__(
            cls,
            *args,
            order_facts=order_facts,
            demand_facts=demand_facts,
            performer_facts=performer_facts,
            transport_facts=transport_facts,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.demand_fact import DemandFact
from vrt_lss_studio.model.order_fact import OrderFact
from vrt_lss_studio.model.performer_fact import PerformerFact
from vrt_lss_studio.model.transport_fact import TransportFact
