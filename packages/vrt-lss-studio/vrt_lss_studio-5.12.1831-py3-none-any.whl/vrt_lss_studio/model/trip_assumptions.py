# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class TripAssumptions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Planning assumptions - ability to disable a part of the planning business logic.

    """


    class MetaOapg:
        
        class properties:
            
            
            class transport_factor(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 10
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['TransportFactor']:
                        return TransportFactor
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TransportFactor'], typing.List['TransportFactor']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transport_factor':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TransportFactor':
                    return super().__getitem__(i)
            
            
            class capacity_factor(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 10
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['CapacityFactor']:
                        return CapacityFactor
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CapacityFactor'], typing.List['CapacityFactor']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'capacity_factor':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CapacityFactor':
                    return super().__getitem__(i)
            disable_compatibility = schemas.BoolSchema
            disable_capacity = schemas.BoolSchema
            same_order_time_window = schemas.BoolSchema
            expand_shift_time_window = schemas.BoolSchema
            __annotations__ = {
                "transport_factor": transport_factor,
                "capacity_factor": capacity_factor,
                "disable_compatibility": disable_compatibility,
                "disable_capacity": disable_capacity,
                "same_order_time_window": same_order_time_window,
                "expand_shift_time_window": expand_shift_time_window,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transport_factor"]) -> MetaOapg.properties.transport_factor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity_factor"]) -> MetaOapg.properties.capacity_factor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disable_compatibility"]) -> MetaOapg.properties.disable_compatibility: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disable_capacity"]) -> MetaOapg.properties.disable_capacity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["same_order_time_window"]) -> MetaOapg.properties.same_order_time_window: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expand_shift_time_window"]) -> MetaOapg.properties.expand_shift_time_window: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transport_factor"], typing_extensions.Literal["capacity_factor"], typing_extensions.Literal["disable_compatibility"], typing_extensions.Literal["disable_capacity"], typing_extensions.Literal["same_order_time_window"], typing_extensions.Literal["expand_shift_time_window"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transport_factor"]) -> typing.Union[MetaOapg.properties.transport_factor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity_factor"]) -> typing.Union[MetaOapg.properties.capacity_factor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disable_compatibility"]) -> typing.Union[MetaOapg.properties.disable_compatibility, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disable_capacity"]) -> typing.Union[MetaOapg.properties.disable_capacity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["same_order_time_window"]) -> typing.Union[MetaOapg.properties.same_order_time_window, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expand_shift_time_window"]) -> typing.Union[MetaOapg.properties.expand_shift_time_window, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transport_factor"], typing_extensions.Literal["capacity_factor"], typing_extensions.Literal["disable_compatibility"], typing_extensions.Literal["disable_capacity"], typing_extensions.Literal["same_order_time_window"], typing_extensions.Literal["expand_shift_time_window"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        transport_factor: typing.Union[MetaOapg.properties.transport_factor, list, tuple, schemas.Unset] = schemas.unset,
        capacity_factor: typing.Union[MetaOapg.properties.capacity_factor, list, tuple, schemas.Unset] = schemas.unset,
        disable_compatibility: typing.Union[MetaOapg.properties.disable_compatibility, bool, schemas.Unset] = schemas.unset,
        disable_capacity: typing.Union[MetaOapg.properties.disable_capacity, bool, schemas.Unset] = schemas.unset,
        same_order_time_window: typing.Union[MetaOapg.properties.same_order_time_window, bool, schemas.Unset] = schemas.unset,
        expand_shift_time_window: typing.Union[MetaOapg.properties.expand_shift_time_window, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TripAssumptions':
        return super().__new__(
            cls,
            *args,
            transport_factor=transport_factor,
            capacity_factor=capacity_factor,
            disable_compatibility=disable_compatibility,
            disable_capacity=disable_capacity,
            same_order_time_window=same_order_time_window,
            expand_shift_time_window=expand_shift_time_window,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.capacity_factor import CapacityFactor
from vrt_lss_studio.model.transport_factor import TransportFactor
