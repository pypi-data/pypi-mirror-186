# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class TransportCompatibilities(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Transport [compatibilities](#section/Description/Compatibilities).

    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def transport_features() -> typing.Type['TransportFeatures']:
                return TransportFeatures
        
            @staticmethod
            def performer_restrictions() -> typing.Type['PerformerRestrictions']:
                return PerformerRestrictions
            __annotations__ = {
                "transport_features": transport_features,
                "performer_restrictions": performer_restrictions,
            }
        additional_properties = schemas.NotAnyTypeSchema

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transport_features"]) -> 'TransportFeatures': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performer_restrictions"]) -> 'PerformerRestrictions': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transport_features"], typing_extensions.Literal["performer_restrictions"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transport_features"]) -> typing.Union['TransportFeatures', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performer_restrictions"]) -> typing.Union['PerformerRestrictions', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transport_features"], typing_extensions.Literal["performer_restrictions"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        transport_features: typing.Union['TransportFeatures', schemas.Unset] = schemas.unset,
        performer_restrictions: typing.Union['PerformerRestrictions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TransportCompatibilities':
        return super().__new__(
            cls,
            *args,
            transport_features=transport_features,
            performer_restrictions=performer_restrictions,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.performer_restrictions import PerformerRestrictions
from vrt_lss_studio.model.transport_features import TransportFeatures
