# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class Performer(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Performer. Fulfills orders using transport.

    """


    class MetaOapg:
        required = {
            "shifts",
            "key",
        }
        
        class properties:
            
            
            class key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class shifts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['PerformerShift']:
                        return PerformerShift
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PerformerShift'], typing.List['PerformerShift']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shifts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PerformerShift':
                    return super().__getitem__(i)
        
            @staticmethod
            def own_transport_type() -> typing.Type['TransportType']:
                return TransportType
        
            @staticmethod
            def compatibilities() -> typing.Type['PerformerCompatibilities']:
                return PerformerCompatibilities
        
            @staticmethod
            def limits() -> typing.Type['PerformerLimits']:
                return PerformerLimits
        
            @staticmethod
            def attributes() -> typing.Type['Attributes']:
                return Attributes
            __annotations__ = {
                "key": key,
                "shifts": shifts,
                "own_transport_type": own_transport_type,
                "compatibilities": compatibilities,
                "limits": limits,
                "attributes": attributes,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    shifts: MetaOapg.properties.shifts
    key: MetaOapg.properties.key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shifts"]) -> MetaOapg.properties.shifts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["own_transport_type"]) -> 'TransportType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compatibilities"]) -> 'PerformerCompatibilities': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limits"]) -> 'PerformerLimits': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> 'Attributes': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["shifts"], typing_extensions.Literal["key"], typing_extensions.Literal["own_transport_type"], typing_extensions.Literal["compatibilities"], typing_extensions.Literal["limits"], typing_extensions.Literal["attributes"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shifts"]) -> MetaOapg.properties.shifts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["own_transport_type"]) -> typing.Union['TransportType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compatibilities"]) -> typing.Union['PerformerCompatibilities', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limits"]) -> typing.Union['PerformerLimits', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union['Attributes', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["shifts"], typing_extensions.Literal["key"], typing_extensions.Literal["own_transport_type"], typing_extensions.Literal["compatibilities"], typing_extensions.Literal["limits"], typing_extensions.Literal["attributes"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        shifts: typing.Union[MetaOapg.properties.shifts, list, tuple, ],
        key: typing.Union[MetaOapg.properties.key, str, ],
        own_transport_type: typing.Union['TransportType', schemas.Unset] = schemas.unset,
        compatibilities: typing.Union['PerformerCompatibilities', schemas.Unset] = schemas.unset,
        limits: typing.Union['PerformerLimits', schemas.Unset] = schemas.unset,
        attributes: typing.Union['Attributes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Performer':
        return super().__new__(
            cls,
            *args,
            shifts=shifts,
            key=key,
            own_transport_type=own_transport_type,
            compatibilities=compatibilities,
            limits=limits,
            attributes=attributes,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.attributes import Attributes
from vrt_lss_studio.model.performer_compatibilities import PerformerCompatibilities
from vrt_lss_studio.model.performer_limits import PerformerLimits
from vrt_lss_studio.model.performer_shift import PerformerShift
from vrt_lss_studio.model.transport_type import TransportType
