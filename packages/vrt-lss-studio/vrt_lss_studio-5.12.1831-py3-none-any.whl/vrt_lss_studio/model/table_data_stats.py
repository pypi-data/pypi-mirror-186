# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class TableDataStats(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Data statistics.
    """


    class MetaOapg:
        required = {
            "transports",
            "hardlinks",
            "performers",
            "trips",
            "locations",
            "orders",
        }
        
        class properties:
            
            
            class locations(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 30001
                    inclusive_minimum = 0
            
            
            class orders(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 30001
                    inclusive_minimum = 0
            
            
            class performers(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 30001
                    inclusive_minimum = 0
            
            
            class transports(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 30001
                    inclusive_minimum = 0
            
            
            class hardlinks(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 30001
                    inclusive_minimum = 0
            
            
            class trips(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 30001
                    inclusive_minimum = 0
            __annotations__ = {
                "locations": locations,
                "orders": orders,
                "performers": performers,
                "transports": transports,
                "hardlinks": hardlinks,
                "trips": trips,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    transports: MetaOapg.properties.transports
    hardlinks: MetaOapg.properties.hardlinks
    performers: MetaOapg.properties.performers
    trips: MetaOapg.properties.trips
    locations: MetaOapg.properties.locations
    orders: MetaOapg.properties.orders
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transports"]) -> MetaOapg.properties.transports: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hardlinks"]) -> MetaOapg.properties.hardlinks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performers"]) -> MetaOapg.properties.performers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trips"]) -> MetaOapg.properties.trips: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locations"]) -> MetaOapg.properties.locations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orders"]) -> MetaOapg.properties.orders: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transports"], typing_extensions.Literal["hardlinks"], typing_extensions.Literal["performers"], typing_extensions.Literal["trips"], typing_extensions.Literal["locations"], typing_extensions.Literal["orders"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transports"]) -> MetaOapg.properties.transports: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hardlinks"]) -> MetaOapg.properties.hardlinks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performers"]) -> MetaOapg.properties.performers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trips"]) -> MetaOapg.properties.trips: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locations"]) -> MetaOapg.properties.locations: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orders"]) -> MetaOapg.properties.orders: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transports"], typing_extensions.Literal["hardlinks"], typing_extensions.Literal["performers"], typing_extensions.Literal["trips"], typing_extensions.Literal["locations"], typing_extensions.Literal["orders"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        transports: typing.Union[MetaOapg.properties.transports, decimal.Decimal, int, ],
        hardlinks: typing.Union[MetaOapg.properties.hardlinks, decimal.Decimal, int, ],
        performers: typing.Union[MetaOapg.properties.performers, decimal.Decimal, int, ],
        trips: typing.Union[MetaOapg.properties.trips, decimal.Decimal, int, ],
        locations: typing.Union[MetaOapg.properties.locations, decimal.Decimal, int, ],
        orders: typing.Union[MetaOapg.properties.orders, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TableDataStats':
        return super().__new__(
            cls,
            *args,
            transports=transports,
            hardlinks=hardlinks,
            performers=performers,
            trips=trips,
            locations=locations,
            orders=orders,
            _configuration=_configuration,
        )
