# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class TransportTariffConstraint(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Paid mileage is an integral part of the tariff.
    """


    class MetaOapg:
        
        class properties:
            
            
            class stage_length(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 100000000
                    inclusive_minimum = 1
            
            
            class cost_per_unit(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 10000
                    inclusive_minimum = 0.001
            __annotations__ = {
                "stage_length": stage_length,
                "cost_per_unit": cost_per_unit,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stage_length"]) -> MetaOapg.properties.stage_length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost_per_unit"]) -> MetaOapg.properties.cost_per_unit: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["stage_length"], typing_extensions.Literal["cost_per_unit"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stage_length"]) -> typing.Union[MetaOapg.properties.stage_length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost_per_unit"]) -> typing.Union[MetaOapg.properties.cost_per_unit, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["stage_length"], typing_extensions.Literal["cost_per_unit"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        stage_length: typing.Union[MetaOapg.properties.stage_length, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cost_per_unit: typing.Union[MetaOapg.properties.cost_per_unit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TransportTariffConstraint':
        return super().__new__(
            cls,
            *args,
            stage_length=stage_length,
            cost_per_unit=cost_per_unit,
            _configuration=_configuration,
        )
