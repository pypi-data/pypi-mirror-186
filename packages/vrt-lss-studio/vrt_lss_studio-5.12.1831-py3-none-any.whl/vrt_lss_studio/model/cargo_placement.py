# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class CargoPlacement(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    One cargo placement in the compartment.
    """


    class MetaOapg:
        required = {
            "cargo_key",
            "box_key",
        }
        
        class properties:
            
            
            class box_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class cargo_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            __annotations__ = {
                "box_key": box_key,
                "cargo_key": cargo_key,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    cargo_key: MetaOapg.properties.cargo_key
    box_key: MetaOapg.properties.box_key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cargo_key"]) -> MetaOapg.properties.cargo_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["box_key"]) -> MetaOapg.properties.box_key: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cargo_key"], typing_extensions.Literal["box_key"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cargo_key"]) -> MetaOapg.properties.cargo_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["box_key"]) -> MetaOapg.properties.box_key: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cargo_key"], typing_extensions.Literal["box_key"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cargo_key: typing.Union[MetaOapg.properties.cargo_key, str, ],
        box_key: typing.Union[MetaOapg.properties.box_key, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CargoPlacement':
        return super().__new__(
            cls,
            *args,
            cargo_key=cargo_key,
            box_key=box_key,
            _configuration=_configuration,
        )
