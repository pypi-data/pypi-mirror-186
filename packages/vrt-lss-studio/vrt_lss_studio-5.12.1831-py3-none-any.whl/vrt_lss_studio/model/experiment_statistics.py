# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class ExperimentStatistics(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Experiment statistics.
    """


    class MetaOapg:
        required = {
            "data_statistics",
            "total_statistics",
            "indicators",
        }
        
        class properties:
        
            @staticmethod
            def indicators() -> typing.Type['Indicators']:
                return Indicators
        
            @staticmethod
            def total_statistics() -> typing.Type['Statistics']:
                return Statistics
        
            @staticmethod
            def data_statistics() -> typing.Type['TableDataStats']:
                return TableDataStats
        
            @staticmethod
            def unplanned_items() -> typing.Type['UnplannedItems']:
                return UnplannedItems
            __annotations__ = {
                "indicators": indicators,
                "total_statistics": total_statistics,
                "data_statistics": data_statistics,
                "unplanned_items": unplanned_items,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    data_statistics: 'TableDataStats'
    total_statistics: 'Statistics'
    indicators: 'Indicators'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_statistics"]) -> 'TableDataStats': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_statistics"]) -> 'Statistics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["indicators"]) -> 'Indicators': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unplanned_items"]) -> 'UnplannedItems': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["data_statistics"], typing_extensions.Literal["total_statistics"], typing_extensions.Literal["indicators"], typing_extensions.Literal["unplanned_items"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_statistics"]) -> 'TableDataStats': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_statistics"]) -> 'Statistics': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["indicators"]) -> 'Indicators': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unplanned_items"]) -> typing.Union['UnplannedItems', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data_statistics"], typing_extensions.Literal["total_statistics"], typing_extensions.Literal["indicators"], typing_extensions.Literal["unplanned_items"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        data_statistics: 'TableDataStats',
        total_statistics: 'Statistics',
        indicators: 'Indicators',
        unplanned_items: typing.Union['UnplannedItems', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ExperimentStatistics':
        return super().__new__(
            cls,
            *args,
            data_statistics=data_statistics,
            total_statistics=total_statistics,
            indicators=indicators,
            unplanned_items=unplanned_items,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.indicators import Indicators
from vrt_lss_studio.model.statistics import Statistics
from vrt_lss_studio.model.table_data_stats import TableDataStats
from vrt_lss_studio.model.unplanned_items import UnplannedItems
