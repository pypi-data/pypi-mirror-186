# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class WebTripTrackList(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Tracks for map.
    """


    class MetaOapg:
        required = {
            "tracks",
            "statistics",
        }
        
        class properties:
            
            
            class tracks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = False
                    max_items = 30001
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['WebTripTrack']:
                        return WebTripTrack
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WebTripTrack'], typing.List['WebTripTrack']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tracks':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WebTripTrack':
                    return super().__getitem__(i)
        
            @staticmethod
            def statistics() -> typing.Type['TableListStats']:
                return TableListStats
            __annotations__ = {
                "tracks": tracks,
                "statistics": statistics,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    tracks: MetaOapg.properties.tracks
    statistics: 'TableListStats'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracks"]) -> MetaOapg.properties.tracks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statistics"]) -> 'TableListStats': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tracks"], typing_extensions.Literal["statistics"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracks"]) -> MetaOapg.properties.tracks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statistics"]) -> 'TableListStats': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tracks"], typing_extensions.Literal["statistics"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tracks: typing.Union[MetaOapg.properties.tracks, list, tuple, ],
        statistics: 'TableListStats',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'WebTripTrackList':
        return super().__new__(
            cls,
            *args,
            tracks=tracks,
            statistics=statistics,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.table_list_stats import TableListStats
from vrt_lss_studio.model.web_trip_track import WebTripTrack
