# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class Measurements(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Measurements of times and distances for work on location, individual trips and planning in general.

    """


    class MetaOapg:
        required = {
            "working_time",
            "distance",
            "time_window",
            "waiting_time",
            "driving_time",
            "arriving_time",
            "total_time",
            "departure_time",
        }
        
        class properties:
        
            @staticmethod
            def driving_time() -> typing.Type['TimeDuration']:
                return TimeDuration
        
            @staticmethod
            def waiting_time() -> typing.Type['TimeDuration']:
                return TimeDuration
        
            @staticmethod
            def working_time() -> typing.Type['TimeDuration']:
                return TimeDuration
        
            @staticmethod
            def arriving_time() -> typing.Type['TimeDuration']:
                return TimeDuration
        
            @staticmethod
            def departure_time() -> typing.Type['TimeDuration']:
                return TimeDuration
        
            @staticmethod
            def total_time() -> typing.Type['TimeDuration']:
                return TimeDuration
            
            
            class distance(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_minimum = 0
        
            @staticmethod
            def time_window() -> typing.Type['TimeWindow']:
                return TimeWindow
            __annotations__ = {
                "driving_time": driving_time,
                "waiting_time": waiting_time,
                "working_time": working_time,
                "arriving_time": arriving_time,
                "departure_time": departure_time,
                "total_time": total_time,
                "distance": distance,
                "time_window": time_window,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    working_time: 'TimeDuration'
    distance: MetaOapg.properties.distance
    time_window: 'TimeWindow'
    waiting_time: 'TimeDuration'
    driving_time: 'TimeDuration'
    arriving_time: 'TimeDuration'
    total_time: 'TimeDuration'
    departure_time: 'TimeDuration'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["working_time"]) -> 'TimeDuration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distance"]) -> MetaOapg.properties.distance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_window"]) -> 'TimeWindow': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waiting_time"]) -> 'TimeDuration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["driving_time"]) -> 'TimeDuration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["arriving_time"]) -> 'TimeDuration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_time"]) -> 'TimeDuration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departure_time"]) -> 'TimeDuration': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["working_time"], typing_extensions.Literal["distance"], typing_extensions.Literal["time_window"], typing_extensions.Literal["waiting_time"], typing_extensions.Literal["driving_time"], typing_extensions.Literal["arriving_time"], typing_extensions.Literal["total_time"], typing_extensions.Literal["departure_time"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["working_time"]) -> 'TimeDuration': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distance"]) -> MetaOapg.properties.distance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_window"]) -> 'TimeWindow': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waiting_time"]) -> 'TimeDuration': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["driving_time"]) -> 'TimeDuration': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["arriving_time"]) -> 'TimeDuration': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_time"]) -> 'TimeDuration': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departure_time"]) -> 'TimeDuration': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["working_time"], typing_extensions.Literal["distance"], typing_extensions.Literal["time_window"], typing_extensions.Literal["waiting_time"], typing_extensions.Literal["driving_time"], typing_extensions.Literal["arriving_time"], typing_extensions.Literal["total_time"], typing_extensions.Literal["departure_time"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        working_time: 'TimeDuration',
        distance: typing.Union[MetaOapg.properties.distance, decimal.Decimal, int, ],
        time_window: 'TimeWindow',
        waiting_time: 'TimeDuration',
        driving_time: 'TimeDuration',
        arriving_time: 'TimeDuration',
        total_time: 'TimeDuration',
        departure_time: 'TimeDuration',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Measurements':
        return super().__new__(
            cls,
            *args,
            working_time=working_time,
            distance=distance,
            time_window=time_window,
            waiting_time=waiting_time,
            driving_time=driving_time,
            arriving_time=arriving_time,
            total_time=total_time,
            departure_time=departure_time,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.time_duration import TimeDuration
from vrt_lss_studio.model.time_window import TimeWindow
