# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class TripsSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Trip creation settings.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def configuration() -> typing.Type['PlanConfiguration']:
                return PlanConfiguration
        
            @staticmethod
            def trip_start_time_strategy() -> typing.Type['TripStartTimeStrategy']:
                return TripStartTimeStrategy
        
            @staticmethod
            def assumptions() -> typing.Type['TripAssumptions']:
                return TripAssumptions
        
            @staticmethod
            def penalties() -> typing.Type['TripPenalties']:
                return TripPenalties
            __annotations__ = {
                "configuration": configuration,
                "trip_start_time_strategy": trip_start_time_strategy,
                "assumptions": assumptions,
                "penalties": penalties,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["configuration"]) -> 'PlanConfiguration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trip_start_time_strategy"]) -> 'TripStartTimeStrategy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assumptions"]) -> 'TripAssumptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["penalties"]) -> 'TripPenalties': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["configuration"], typing_extensions.Literal["trip_start_time_strategy"], typing_extensions.Literal["assumptions"], typing_extensions.Literal["penalties"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["configuration"]) -> typing.Union['PlanConfiguration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trip_start_time_strategy"]) -> typing.Union['TripStartTimeStrategy', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assumptions"]) -> typing.Union['TripAssumptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["penalties"]) -> typing.Union['TripPenalties', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["configuration"], typing_extensions.Literal["trip_start_time_strategy"], typing_extensions.Literal["assumptions"], typing_extensions.Literal["penalties"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        configuration: typing.Union['PlanConfiguration', schemas.Unset] = schemas.unset,
        trip_start_time_strategy: typing.Union['TripStartTimeStrategy', schemas.Unset] = schemas.unset,
        assumptions: typing.Union['TripAssumptions', schemas.Unset] = schemas.unset,
        penalties: typing.Union['TripPenalties', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TripsSettings':
        return super().__new__(
            cls,
            *args,
            configuration=configuration,
            trip_start_time_strategy=trip_start_time_strategy,
            assumptions=assumptions,
            penalties=penalties,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.plan_configuration import PlanConfiguration
from vrt_lss_studio.model.trip_assumptions import TripAssumptions
from vrt_lss_studio.model.trip_penalties import TripPenalties
from vrt_lss_studio.model.trip_start_time_strategy import TripStartTimeStrategy
