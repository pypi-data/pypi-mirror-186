# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class DemandFact(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Fact with demand.
    """


    class MetaOapg:
        required = {
            "order_key",
            "demand_key",
            "time",
            "type",
            "key",
        }
        
        class properties:
            
            
            class key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class order_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class demand_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "START": "START",
                        "DONE": "DONE",
                        "CANCEL": "CANCEL",
                    }
                
                @schemas.classproperty
                def START(cls):
                    return cls("START")
                
                @schemas.classproperty
                def DONE(cls):
                    return cls("DONE")
                
                @schemas.classproperty
                def CANCEL(cls):
                    return cls("CANCEL")
            time = schemas.DateTimeSchema
            __annotations__ = {
                "key": key,
                "order_key": order_key,
                "demand_key": demand_key,
                "type": type,
                "time": time,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    order_key: MetaOapg.properties.order_key
    demand_key: MetaOapg.properties.demand_key
    time: MetaOapg.properties.time
    type: MetaOapg.properties.type
    key: MetaOapg.properties.key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_key"]) -> MetaOapg.properties.order_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["demand_key"]) -> MetaOapg.properties.demand_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["order_key"], typing_extensions.Literal["demand_key"], typing_extensions.Literal["time"], typing_extensions.Literal["type"], typing_extensions.Literal["key"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_key"]) -> MetaOapg.properties.order_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["demand_key"]) -> MetaOapg.properties.demand_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["order_key"], typing_extensions.Literal["demand_key"], typing_extensions.Literal["time"], typing_extensions.Literal["type"], typing_extensions.Literal["key"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        order_key: typing.Union[MetaOapg.properties.order_key, str, ],
        demand_key: typing.Union[MetaOapg.properties.demand_key, str, ],
        time: typing.Union[MetaOapg.properties.time, str, datetime, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        key: typing.Union[MetaOapg.properties.key, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DemandFact':
        return super().__new__(
            cls,
            *args,
            order_key=order_key,
            demand_key=demand_key,
            time=time,
            type=type,
            key=key,
            _configuration=_configuration,
        )
