# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class TableOrderFields(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Order\demand fields for table.
    """


    class MetaOapg:
        required = {
            "essence_key",
            "essence_type",
        }
        
        class properties:
        
            @staticmethod
            def essence_key() -> typing.Type['BasicEssenceKey']:
                return BasicEssenceKey
            
            
            class essence_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ORDER": "ORDER",
                        "DEMAND": "DEMAND",
                    }
                
                @schemas.classproperty
                def ORDER(cls):
                    return cls("ORDER")
                
                @schemas.classproperty
                def DEMAND(cls):
                    return cls("DEMAND")
            enabled = schemas.BoolSchema
            pristine = schemas.BoolSchema
        
            @staticmethod
            def state() -> typing.Type['BasicState']:
                return BasicState
            
            
            class type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def hard_time_window() -> typing.Type['BasicTimeWindow']:
                return BasicTimeWindow
        
            @staticmethod
            def soft_time_window() -> typing.Type['BasicTimeWindow']:
                return BasicTimeWindow
            
            
            class reward(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_minimum = 0
            
            
            class mass(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class volume(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class capacity_a(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class capacity_b(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class capacity_c(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
        
            @staticmethod
            def order_features() -> typing.Type['OrderFeatures']:
                return OrderFeatures
        
            @staticmethod
            def order_restrictions() -> typing.Type['OrderRestrictions']:
                return OrderRestrictions
        
            @staticmethod
            def performer_restrictions() -> typing.Type['PerformerRestrictions']:
                return PerformerRestrictions
        
            @staticmethod
            def performer_blacklist() -> typing.Type['PerformerBlacklist']:
                return PerformerBlacklist
            
            
            class width(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class height(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class length(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
        
            @staticmethod
            def rotation() -> typing.Type['CargoRotation']:
                return CargoRotation
        
            @staticmethod
            def box_restrictions() -> typing.Type['BoxRestrictions']:
                return BoxRestrictions
        
            @staticmethod
            def cargo_features() -> typing.Type['CargoFeatures']:
                return CargoFeatures
        
            @staticmethod
            def cargo_restrictions() -> typing.Type['CargoRestrictions']:
                return CargoRestrictions
            
            
            class demands_count(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 30001
                    inclusive_minimum = 0
        
            @staticmethod
            def trip_key() -> typing.Type['BasicEssenceKey']:
                return BasicEssenceKey
            __annotations__ = {
                "essence_key": essence_key,
                "essence_type": essence_type,
                "enabled": enabled,
                "pristine": pristine,
                "state": state,
                "type": type,
                "hard_time_window": hard_time_window,
                "soft_time_window": soft_time_window,
                "reward": reward,
                "mass": mass,
                "volume": volume,
                "capacity_a": capacity_a,
                "capacity_b": capacity_b,
                "capacity_c": capacity_c,
                "order_features": order_features,
                "order_restrictions": order_restrictions,
                "performer_restrictions": performer_restrictions,
                "performer_blacklist": performer_blacklist,
                "width": width,
                "height": height,
                "length": length,
                "rotation": rotation,
                "box_restrictions": box_restrictions,
                "cargo_features": cargo_features,
                "cargo_restrictions": cargo_restrictions,
                "demands_count": demands_count,
                "trip_key": trip_key,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    essence_key: 'BasicEssenceKey'
    essence_type: MetaOapg.properties.essence_type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["essence_key"]) -> 'BasicEssenceKey': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["essence_type"]) -> MetaOapg.properties.essence_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pristine"]) -> MetaOapg.properties.pristine: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'BasicState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hard_time_window"]) -> 'BasicTimeWindow': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["soft_time_window"]) -> 'BasicTimeWindow': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reward"]) -> MetaOapg.properties.reward: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mass"]) -> MetaOapg.properties.mass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volume"]) -> MetaOapg.properties.volume: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity_a"]) -> MetaOapg.properties.capacity_a: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity_b"]) -> MetaOapg.properties.capacity_b: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity_c"]) -> MetaOapg.properties.capacity_c: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_features"]) -> 'OrderFeatures': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_restrictions"]) -> 'OrderRestrictions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performer_restrictions"]) -> 'PerformerRestrictions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performer_blacklist"]) -> 'PerformerBlacklist': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rotation"]) -> 'CargoRotation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["box_restrictions"]) -> 'BoxRestrictions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cargo_features"]) -> 'CargoFeatures': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cargo_restrictions"]) -> 'CargoRestrictions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["demands_count"]) -> MetaOapg.properties.demands_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trip_key"]) -> 'BasicEssenceKey': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["essence_key"], typing_extensions.Literal["essence_type"], typing_extensions.Literal["enabled"], typing_extensions.Literal["pristine"], typing_extensions.Literal["state"], typing_extensions.Literal["type"], typing_extensions.Literal["hard_time_window"], typing_extensions.Literal["soft_time_window"], typing_extensions.Literal["reward"], typing_extensions.Literal["mass"], typing_extensions.Literal["volume"], typing_extensions.Literal["capacity_a"], typing_extensions.Literal["capacity_b"], typing_extensions.Literal["capacity_c"], typing_extensions.Literal["order_features"], typing_extensions.Literal["order_restrictions"], typing_extensions.Literal["performer_restrictions"], typing_extensions.Literal["performer_blacklist"], typing_extensions.Literal["width"], typing_extensions.Literal["height"], typing_extensions.Literal["length"], typing_extensions.Literal["rotation"], typing_extensions.Literal["box_restrictions"], typing_extensions.Literal["cargo_features"], typing_extensions.Literal["cargo_restrictions"], typing_extensions.Literal["demands_count"], typing_extensions.Literal["trip_key"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["essence_key"]) -> 'BasicEssenceKey': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["essence_type"]) -> MetaOapg.properties.essence_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union[MetaOapg.properties.enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pristine"]) -> typing.Union[MetaOapg.properties.pristine, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union['BasicState', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hard_time_window"]) -> typing.Union['BasicTimeWindow', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["soft_time_window"]) -> typing.Union['BasicTimeWindow', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reward"]) -> typing.Union[MetaOapg.properties.reward, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mass"]) -> typing.Union[MetaOapg.properties.mass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volume"]) -> typing.Union[MetaOapg.properties.volume, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity_a"]) -> typing.Union[MetaOapg.properties.capacity_a, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity_b"]) -> typing.Union[MetaOapg.properties.capacity_b, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity_c"]) -> typing.Union[MetaOapg.properties.capacity_c, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_features"]) -> typing.Union['OrderFeatures', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_restrictions"]) -> typing.Union['OrderRestrictions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performer_restrictions"]) -> typing.Union['PerformerRestrictions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performer_blacklist"]) -> typing.Union['PerformerBlacklist', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width"]) -> typing.Union[MetaOapg.properties.width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["height"]) -> typing.Union[MetaOapg.properties.height, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rotation"]) -> typing.Union['CargoRotation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["box_restrictions"]) -> typing.Union['BoxRestrictions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cargo_features"]) -> typing.Union['CargoFeatures', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cargo_restrictions"]) -> typing.Union['CargoRestrictions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["demands_count"]) -> typing.Union[MetaOapg.properties.demands_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trip_key"]) -> typing.Union['BasicEssenceKey', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["essence_key"], typing_extensions.Literal["essence_type"], typing_extensions.Literal["enabled"], typing_extensions.Literal["pristine"], typing_extensions.Literal["state"], typing_extensions.Literal["type"], typing_extensions.Literal["hard_time_window"], typing_extensions.Literal["soft_time_window"], typing_extensions.Literal["reward"], typing_extensions.Literal["mass"], typing_extensions.Literal["volume"], typing_extensions.Literal["capacity_a"], typing_extensions.Literal["capacity_b"], typing_extensions.Literal["capacity_c"], typing_extensions.Literal["order_features"], typing_extensions.Literal["order_restrictions"], typing_extensions.Literal["performer_restrictions"], typing_extensions.Literal["performer_blacklist"], typing_extensions.Literal["width"], typing_extensions.Literal["height"], typing_extensions.Literal["length"], typing_extensions.Literal["rotation"], typing_extensions.Literal["box_restrictions"], typing_extensions.Literal["cargo_features"], typing_extensions.Literal["cargo_restrictions"], typing_extensions.Literal["demands_count"], typing_extensions.Literal["trip_key"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        essence_key: 'BasicEssenceKey',
        essence_type: typing.Union[MetaOapg.properties.essence_type, str, ],
        enabled: typing.Union[MetaOapg.properties.enabled, bool, schemas.Unset] = schemas.unset,
        pristine: typing.Union[MetaOapg.properties.pristine, bool, schemas.Unset] = schemas.unset,
        state: typing.Union['BasicState', schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, None, str, schemas.Unset] = schemas.unset,
        hard_time_window: typing.Union['BasicTimeWindow', schemas.Unset] = schemas.unset,
        soft_time_window: typing.Union['BasicTimeWindow', schemas.Unset] = schemas.unset,
        reward: typing.Union[MetaOapg.properties.reward, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mass: typing.Union[MetaOapg.properties.mass, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        volume: typing.Union[MetaOapg.properties.volume, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        capacity_a: typing.Union[MetaOapg.properties.capacity_a, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        capacity_b: typing.Union[MetaOapg.properties.capacity_b, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        capacity_c: typing.Union[MetaOapg.properties.capacity_c, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        order_features: typing.Union['OrderFeatures', schemas.Unset] = schemas.unset,
        order_restrictions: typing.Union['OrderRestrictions', schemas.Unset] = schemas.unset,
        performer_restrictions: typing.Union['PerformerRestrictions', schemas.Unset] = schemas.unset,
        performer_blacklist: typing.Union['PerformerBlacklist', schemas.Unset] = schemas.unset,
        width: typing.Union[MetaOapg.properties.width, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        height: typing.Union[MetaOapg.properties.height, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        length: typing.Union[MetaOapg.properties.length, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rotation: typing.Union['CargoRotation', schemas.Unset] = schemas.unset,
        box_restrictions: typing.Union['BoxRestrictions', schemas.Unset] = schemas.unset,
        cargo_features: typing.Union['CargoFeatures', schemas.Unset] = schemas.unset,
        cargo_restrictions: typing.Union['CargoRestrictions', schemas.Unset] = schemas.unset,
        demands_count: typing.Union[MetaOapg.properties.demands_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        trip_key: typing.Union['BasicEssenceKey', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TableOrderFields':
        return super().__new__(
            cls,
            *args,
            essence_key=essence_key,
            essence_type=essence_type,
            enabled=enabled,
            pristine=pristine,
            state=state,
            type=type,
            hard_time_window=hard_time_window,
            soft_time_window=soft_time_window,
            reward=reward,
            mass=mass,
            volume=volume,
            capacity_a=capacity_a,
            capacity_b=capacity_b,
            capacity_c=capacity_c,
            order_features=order_features,
            order_restrictions=order_restrictions,
            performer_restrictions=performer_restrictions,
            performer_blacklist=performer_blacklist,
            width=width,
            height=height,
            length=length,
            rotation=rotation,
            box_restrictions=box_restrictions,
            cargo_features=cargo_features,
            cargo_restrictions=cargo_restrictions,
            demands_count=demands_count,
            trip_key=trip_key,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.basic_essence_key import BasicEssenceKey
from vrt_lss_studio.model.basic_state import BasicState
from vrt_lss_studio.model.basic_time_window import BasicTimeWindow
from vrt_lss_studio.model.box_restrictions import BoxRestrictions
from vrt_lss_studio.model.cargo_features import CargoFeatures
from vrt_lss_studio.model.cargo_restrictions import CargoRestrictions
from vrt_lss_studio.model.cargo_rotation import CargoRotation
from vrt_lss_studio.model.order_features import OrderFeatures
from vrt_lss_studio.model.order_restrictions import OrderRestrictions
from vrt_lss_studio.model.performer_blacklist import PerformerBlacklist
from vrt_lss_studio.model.performer_restrictions import PerformerRestrictions
