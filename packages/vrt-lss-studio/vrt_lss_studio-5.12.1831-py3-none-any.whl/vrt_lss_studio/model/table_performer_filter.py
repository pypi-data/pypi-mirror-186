# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class TablePerformerFilter(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Universal filter for table.
    """


    class MetaOapg:
        required = {
            "column",
            "type",
        }
        
        class properties:
        
            @staticmethod
            def type() -> typing.Type['TableFilterType']:
                return TableFilterType
        
            @staticmethod
            def column() -> typing.Type['TablePerformerColumnType']:
                return TablePerformerColumnType
        
            @staticmethod
            def datetime_range() -> typing.Type['TableFilterDatetimeRange']:
                return TableFilterDatetimeRange
        
            @staticmethod
            def int_range() -> typing.Type['TableFilterIntRange']:
                return TableFilterIntRange
        
            @staticmethod
            def float_range() -> typing.Type['TableFilterFloatRange']:
                return TableFilterFloatRange
        
            @staticmethod
            def bool_list() -> typing.Type['TableFilterBoolList']:
                return TableFilterBoolList
        
            @staticmethod
            def string_list() -> typing.Type['TableFilterStringList']:
                return TableFilterStringList
        
            @staticmethod
            def enum_list() -> typing.Type['TableFilterEnumList']:
                return TableFilterEnumList
        
            @staticmethod
            def string_search() -> typing.Type['TableFilterStringSearch']:
                return TableFilterStringSearch
            __annotations__ = {
                "type": type,
                "column": column,
                "datetime_range": datetime_range,
                "int_range": int_range,
                "float_range": float_range,
                "bool_list": bool_list,
                "string_list": string_list,
                "enum_list": enum_list,
                "string_search": string_search,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    column: 'TablePerformerColumnType'
    type: 'TableFilterType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["column"]) -> 'TablePerformerColumnType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'TableFilterType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datetime_range"]) -> 'TableFilterDatetimeRange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["int_range"]) -> 'TableFilterIntRange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["float_range"]) -> 'TableFilterFloatRange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bool_list"]) -> 'TableFilterBoolList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["string_list"]) -> 'TableFilterStringList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enum_list"]) -> 'TableFilterEnumList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["string_search"]) -> 'TableFilterStringSearch': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["column"], typing_extensions.Literal["type"], typing_extensions.Literal["datetime_range"], typing_extensions.Literal["int_range"], typing_extensions.Literal["float_range"], typing_extensions.Literal["bool_list"], typing_extensions.Literal["string_list"], typing_extensions.Literal["enum_list"], typing_extensions.Literal["string_search"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["column"]) -> 'TablePerformerColumnType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'TableFilterType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datetime_range"]) -> typing.Union['TableFilterDatetimeRange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["int_range"]) -> typing.Union['TableFilterIntRange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["float_range"]) -> typing.Union['TableFilterFloatRange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bool_list"]) -> typing.Union['TableFilterBoolList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["string_list"]) -> typing.Union['TableFilterStringList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enum_list"]) -> typing.Union['TableFilterEnumList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["string_search"]) -> typing.Union['TableFilterStringSearch', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["column"], typing_extensions.Literal["type"], typing_extensions.Literal["datetime_range"], typing_extensions.Literal["int_range"], typing_extensions.Literal["float_range"], typing_extensions.Literal["bool_list"], typing_extensions.Literal["string_list"], typing_extensions.Literal["enum_list"], typing_extensions.Literal["string_search"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        column: 'TablePerformerColumnType',
        type: 'TableFilterType',
        datetime_range: typing.Union['TableFilterDatetimeRange', schemas.Unset] = schemas.unset,
        int_range: typing.Union['TableFilterIntRange', schemas.Unset] = schemas.unset,
        float_range: typing.Union['TableFilterFloatRange', schemas.Unset] = schemas.unset,
        bool_list: typing.Union['TableFilterBoolList', schemas.Unset] = schemas.unset,
        string_list: typing.Union['TableFilterStringList', schemas.Unset] = schemas.unset,
        enum_list: typing.Union['TableFilterEnumList', schemas.Unset] = schemas.unset,
        string_search: typing.Union['TableFilterStringSearch', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TablePerformerFilter':
        return super().__new__(
            cls,
            *args,
            column=column,
            type=type,
            datetime_range=datetime_range,
            int_range=int_range,
            float_range=float_range,
            bool_list=bool_list,
            string_list=string_list,
            enum_list=enum_list,
            string_search=string_search,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.table_filter_bool_list import TableFilterBoolList
from vrt_lss_studio.model.table_filter_datetime_range import TableFilterDatetimeRange
from vrt_lss_studio.model.table_filter_enum_list import TableFilterEnumList
from vrt_lss_studio.model.table_filter_float_range import TableFilterFloatRange
from vrt_lss_studio.model.table_filter_int_range import TableFilterIntRange
from vrt_lss_studio.model.table_filter_string_list import TableFilterStringList
from vrt_lss_studio.model.table_filter_string_search import TableFilterStringSearch
from vrt_lss_studio.model.table_filter_type import TableFilterType
from vrt_lss_studio.model.table_performer_column_type import TablePerformerColumnType
