# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class Demand(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Request for a single action with a cargo (pickup / drop) or work at a location.
    """


    class MetaOapg:
        required = {
            "demand_type",
            "possible_events",
            "key",
        }
        
        class properties:
            
            
            class key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class demand_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PICKUP": "PICKUP",
                        "DROP": "DROP",
                        "WORK": "WORK",
                    }
                
                @schemas.classproperty
                def PICKUP(cls):
                    return cls("PICKUP")
                
                @schemas.classproperty
                def DROP(cls):
                    return cls("DROP")
                
                @schemas.classproperty
                def WORK(cls):
                    return cls("WORK")
            
            
            class possible_events(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 25
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['PossibleEvent']:
                        return PossibleEvent
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PossibleEvent'], typing.List['PossibleEvent']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'possible_events':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PossibleEvent':
                    return super().__getitem__(i)
            
            
            class target_cargos(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 1000
                    min_items = 0
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 1024
                            min_length = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'target_cargos':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class precedence_in_trip(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 30001
                    inclusive_minimum = 0
            
            
            class precedence_in_order(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 30001
                    inclusive_minimum = 0
        
            @staticmethod
            def attributes() -> typing.Type['Attributes']:
                return Attributes
            __annotations__ = {
                "key": key,
                "demand_type": demand_type,
                "possible_events": possible_events,
                "target_cargos": target_cargos,
                "precedence_in_trip": precedence_in_trip,
                "precedence_in_order": precedence_in_order,
                "attributes": attributes,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    demand_type: MetaOapg.properties.demand_type
    possible_events: MetaOapg.properties.possible_events
    key: MetaOapg.properties.key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["demand_type"]) -> MetaOapg.properties.demand_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["possible_events"]) -> MetaOapg.properties.possible_events: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_cargos"]) -> MetaOapg.properties.target_cargos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["precedence_in_trip"]) -> MetaOapg.properties.precedence_in_trip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["precedence_in_order"]) -> MetaOapg.properties.precedence_in_order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> 'Attributes': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["demand_type"], typing_extensions.Literal["possible_events"], typing_extensions.Literal["key"], typing_extensions.Literal["target_cargos"], typing_extensions.Literal["precedence_in_trip"], typing_extensions.Literal["precedence_in_order"], typing_extensions.Literal["attributes"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["demand_type"]) -> MetaOapg.properties.demand_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["possible_events"]) -> MetaOapg.properties.possible_events: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_cargos"]) -> typing.Union[MetaOapg.properties.target_cargos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["precedence_in_trip"]) -> typing.Union[MetaOapg.properties.precedence_in_trip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["precedence_in_order"]) -> typing.Union[MetaOapg.properties.precedence_in_order, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union['Attributes', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["demand_type"], typing_extensions.Literal["possible_events"], typing_extensions.Literal["key"], typing_extensions.Literal["target_cargos"], typing_extensions.Literal["precedence_in_trip"], typing_extensions.Literal["precedence_in_order"], typing_extensions.Literal["attributes"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        demand_type: typing.Union[MetaOapg.properties.demand_type, str, ],
        possible_events: typing.Union[MetaOapg.properties.possible_events, list, tuple, ],
        key: typing.Union[MetaOapg.properties.key, str, ],
        target_cargos: typing.Union[MetaOapg.properties.target_cargos, list, tuple, schemas.Unset] = schemas.unset,
        precedence_in_trip: typing.Union[MetaOapg.properties.precedence_in_trip, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        precedence_in_order: typing.Union[MetaOapg.properties.precedence_in_order, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        attributes: typing.Union['Attributes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Demand':
        return super().__new__(
            cls,
            *args,
            demand_type=demand_type,
            possible_events=possible_events,
            key=key,
            target_cargos=target_cargos,
            precedence_in_trip=precedence_in_trip,
            precedence_in_order=precedence_in_order,
            attributes=attributes,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.attributes import Attributes
from vrt_lss_studio.model.possible_event import PossibleEvent
