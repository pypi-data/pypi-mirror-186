# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class CargoCompatibilities(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Cargo [compatibilities](#section/Description/Compatibilities).

    """


    class MetaOapg:
        
        class properties:
            
            
            class width(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class height(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class length(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
        
            @staticmethod
            def rotation() -> typing.Type['CargoRotation']:
                return CargoRotation
        
            @staticmethod
            def box_restrictions() -> typing.Type['BoxRestrictions']:
                return BoxRestrictions
        
            @staticmethod
            def cargo_features() -> typing.Type['CargoFeatures']:
                return CargoFeatures
        
            @staticmethod
            def cargo_restrictions() -> typing.Type['CargoRestrictions']:
                return CargoRestrictions
            __annotations__ = {
                "width": width,
                "height": height,
                "length": length,
                "rotation": rotation,
                "box_restrictions": box_restrictions,
                "cargo_features": cargo_features,
                "cargo_restrictions": cargo_restrictions,
            }
        additional_properties = schemas.NotAnyTypeSchema

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rotation"]) -> 'CargoRotation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["box_restrictions"]) -> 'BoxRestrictions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cargo_features"]) -> 'CargoFeatures': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cargo_restrictions"]) -> 'CargoRestrictions': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["width"], typing_extensions.Literal["height"], typing_extensions.Literal["length"], typing_extensions.Literal["rotation"], typing_extensions.Literal["box_restrictions"], typing_extensions.Literal["cargo_features"], typing_extensions.Literal["cargo_restrictions"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width"]) -> typing.Union[MetaOapg.properties.width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["height"]) -> typing.Union[MetaOapg.properties.height, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rotation"]) -> typing.Union['CargoRotation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["box_restrictions"]) -> typing.Union['BoxRestrictions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cargo_features"]) -> typing.Union['CargoFeatures', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cargo_restrictions"]) -> typing.Union['CargoRestrictions', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["width"], typing_extensions.Literal["height"], typing_extensions.Literal["length"], typing_extensions.Literal["rotation"], typing_extensions.Literal["box_restrictions"], typing_extensions.Literal["cargo_features"], typing_extensions.Literal["cargo_restrictions"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        width: typing.Union[MetaOapg.properties.width, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        height: typing.Union[MetaOapg.properties.height, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        length: typing.Union[MetaOapg.properties.length, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rotation: typing.Union['CargoRotation', schemas.Unset] = schemas.unset,
        box_restrictions: typing.Union['BoxRestrictions', schemas.Unset] = schemas.unset,
        cargo_features: typing.Union['CargoFeatures', schemas.Unset] = schemas.unset,
        cargo_restrictions: typing.Union['CargoRestrictions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CargoCompatibilities':
        return super().__new__(
            cls,
            *args,
            width=width,
            height=height,
            length=length,
            rotation=rotation,
            box_restrictions=box_restrictions,
            cargo_features=cargo_features,
            cargo_restrictions=cargo_restrictions,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.box_restrictions import BoxRestrictions
from vrt_lss_studio.model.cargo_features import CargoFeatures
from vrt_lss_studio.model.cargo_restrictions import CargoRestrictions
from vrt_lss_studio.model.cargo_rotation import CargoRotation
