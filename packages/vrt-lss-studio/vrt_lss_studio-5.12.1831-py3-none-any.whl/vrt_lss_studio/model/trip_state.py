# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class TripState(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Trip state.
    """


    class MetaOapg:
        required = {
            "flags",
            "time",
        }
        
        class properties:
            time = schemas.DateTimeSchema
            
            
            class flags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 9
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['TripStateFlag']:
                        return TripStateFlag
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TripStateFlag'], typing.List['TripStateFlag']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'flags':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TripStateFlag':
                    return super().__getitem__(i)
            
            
            class order_key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'order_key':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class demand_key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'demand_key':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class event_key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'event_key':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class location_key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'location_key':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class cargo_placements(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 1000
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['CargoPlacement']:
                        return CargoPlacement
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CargoPlacement'], typing.List['CargoPlacement']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cargo_placements':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CargoPlacement':
                    return super().__getitem__(i)
        
            @staticmethod
            def attributes() -> typing.Type['Attributes']:
                return Attributes
            __annotations__ = {
                "time": time,
                "flags": flags,
                "order_key": order_key,
                "demand_key": demand_key,
                "event_key": event_key,
                "location_key": location_key,
                "cargo_placements": cargo_placements,
                "attributes": attributes,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    flags: MetaOapg.properties.flags
    time: MetaOapg.properties.time
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_key"]) -> MetaOapg.properties.order_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["demand_key"]) -> MetaOapg.properties.demand_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_key"]) -> MetaOapg.properties.event_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_key"]) -> MetaOapg.properties.location_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cargo_placements"]) -> MetaOapg.properties.cargo_placements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> 'Attributes': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["flags"], typing_extensions.Literal["time"], typing_extensions.Literal["order_key"], typing_extensions.Literal["demand_key"], typing_extensions.Literal["event_key"], typing_extensions.Literal["location_key"], typing_extensions.Literal["cargo_placements"], typing_extensions.Literal["attributes"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_key"]) -> typing.Union[MetaOapg.properties.order_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["demand_key"]) -> typing.Union[MetaOapg.properties.demand_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_key"]) -> typing.Union[MetaOapg.properties.event_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_key"]) -> typing.Union[MetaOapg.properties.location_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cargo_placements"]) -> typing.Union[MetaOapg.properties.cargo_placements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union['Attributes', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["flags"], typing_extensions.Literal["time"], typing_extensions.Literal["order_key"], typing_extensions.Literal["demand_key"], typing_extensions.Literal["event_key"], typing_extensions.Literal["location_key"], typing_extensions.Literal["cargo_placements"], typing_extensions.Literal["attributes"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        flags: typing.Union[MetaOapg.properties.flags, list, tuple, ],
        time: typing.Union[MetaOapg.properties.time, str, datetime, ],
        order_key: typing.Union[MetaOapg.properties.order_key, None, str, schemas.Unset] = schemas.unset,
        demand_key: typing.Union[MetaOapg.properties.demand_key, None, str, schemas.Unset] = schemas.unset,
        event_key: typing.Union[MetaOapg.properties.event_key, None, str, schemas.Unset] = schemas.unset,
        location_key: typing.Union[MetaOapg.properties.location_key, None, str, schemas.Unset] = schemas.unset,
        cargo_placements: typing.Union[MetaOapg.properties.cargo_placements, list, tuple, schemas.Unset] = schemas.unset,
        attributes: typing.Union['Attributes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TripState':
        return super().__new__(
            cls,
            *args,
            flags=flags,
            time=time,
            order_key=order_key,
            demand_key=demand_key,
            event_key=event_key,
            location_key=location_key,
            cargo_placements=cargo_placements,
            attributes=attributes,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.attributes import Attributes
from vrt_lss_studio.model.cargo_placement import CargoPlacement
from vrt_lss_studio.model.trip_state_flag import TripStateFlag
