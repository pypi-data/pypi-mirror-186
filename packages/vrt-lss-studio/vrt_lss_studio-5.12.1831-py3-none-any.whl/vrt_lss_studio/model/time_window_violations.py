# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class TimeWindowViolations(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Statistics of time window violation.

    """


    class MetaOapg:
        required = {
            "before",
            "after",
        }
        
        class properties:
        
            @staticmethod
            def before() -> typing.Type['ObjectMetrics']:
                return ObjectMetrics
        
            @staticmethod
            def after() -> typing.Type['ObjectMetrics']:
                return ObjectMetrics
            __annotations__ = {
                "before": before,
                "after": after,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    before: 'ObjectMetrics'
    after: 'ObjectMetrics'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["before"]) -> 'ObjectMetrics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["after"]) -> 'ObjectMetrics': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["before"], typing_extensions.Literal["after"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["before"]) -> 'ObjectMetrics': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["after"]) -> 'ObjectMetrics': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["before"], typing_extensions.Literal["after"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        before: 'ObjectMetrics',
        after: 'ObjectMetrics',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TimeWindowViolations':
        return super().__new__(
            cls,
            *args,
            before=before,
            after=after,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.object_metrics import ObjectMetrics
