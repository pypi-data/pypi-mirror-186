# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class TripStatistics(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Statistics for a specific trip.

    """


    class MetaOapg:
        required = {
            "total_load",
            "stop_statistics",
            "trip_key",
            "max_transfer_load",
            "max_load",
            "statistics",
        }
        
        class properties:
            
            
            class trip_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
        
            @staticmethod
            def statistics() -> typing.Type['Statistics']:
                return Statistics
            
            
            class stop_statistics(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = False
                    max_items = 30001
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['StopStatistics']:
                        return StopStatistics
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['StopStatistics'], typing.List['StopStatistics']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stop_statistics':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'StopStatistics':
                    return super().__getitem__(i)
        
            @staticmethod
            def total_load() -> typing.Type['TransportLoad']:
                return TransportLoad
        
            @staticmethod
            def max_load() -> typing.Type['TransportLoad']:
                return TransportLoad
        
            @staticmethod
            def max_transfer_load() -> typing.Type['TransportLoad']:
                return TransportLoad
            __annotations__ = {
                "trip_key": trip_key,
                "statistics": statistics,
                "stop_statistics": stop_statistics,
                "total_load": total_load,
                "max_load": max_load,
                "max_transfer_load": max_transfer_load,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    total_load: 'TransportLoad'
    stop_statistics: MetaOapg.properties.stop_statistics
    trip_key: MetaOapg.properties.trip_key
    max_transfer_load: 'TransportLoad'
    max_load: 'TransportLoad'
    statistics: 'Statistics'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_load"]) -> 'TransportLoad': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stop_statistics"]) -> MetaOapg.properties.stop_statistics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trip_key"]) -> MetaOapg.properties.trip_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_transfer_load"]) -> 'TransportLoad': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_load"]) -> 'TransportLoad': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statistics"]) -> 'Statistics': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["total_load"], typing_extensions.Literal["stop_statistics"], typing_extensions.Literal["trip_key"], typing_extensions.Literal["max_transfer_load"], typing_extensions.Literal["max_load"], typing_extensions.Literal["statistics"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_load"]) -> 'TransportLoad': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stop_statistics"]) -> MetaOapg.properties.stop_statistics: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trip_key"]) -> MetaOapg.properties.trip_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_transfer_load"]) -> 'TransportLoad': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_load"]) -> 'TransportLoad': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statistics"]) -> 'Statistics': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total_load"], typing_extensions.Literal["stop_statistics"], typing_extensions.Literal["trip_key"], typing_extensions.Literal["max_transfer_load"], typing_extensions.Literal["max_load"], typing_extensions.Literal["statistics"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        total_load: 'TransportLoad',
        stop_statistics: typing.Union[MetaOapg.properties.stop_statistics, list, tuple, ],
        trip_key: typing.Union[MetaOapg.properties.trip_key, str, ],
        max_transfer_load: 'TransportLoad',
        max_load: 'TransportLoad',
        statistics: 'Statistics',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TripStatistics':
        return super().__new__(
            cls,
            *args,
            total_load=total_load,
            stop_statistics=stop_statistics,
            trip_key=trip_key,
            max_transfer_load=max_transfer_load,
            max_load=max_load,
            statistics=statistics,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.statistics import Statistics
from vrt_lss_studio.model.stop_statistics import StopStatistics
from vrt_lss_studio.model.transport_load import TransportLoad
