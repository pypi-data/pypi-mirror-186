# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class TableHardlinkFields(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Hardlink\essences fields for table.
    """


    class MetaOapg:
        required = {
            "essence_key",
            "essence_type",
        }
        
        class properties:
        
            @staticmethod
            def essence_key() -> typing.Type['BasicEssenceKey']:
                return BasicEssenceKey
            
            
            class essence_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "HARDLINK": "HARDLINK",
                        "ELEMENT": "ELEMENT",
                    }
                
                @schemas.classproperty
                def HARDLINK(cls):
                    return cls("HARDLINK")
                
                @schemas.classproperty
                def ELEMENT(cls):
                    return cls("ELEMENT")
            enabled = schemas.BoolSchema
            pristine = schemas.BoolSchema
            
            
            class element_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ORDER": "ORDER",
                        "PERFORMER_SHIFT": "PERFORMER_SHIFT",
                        "TRANSPORT_SHIFT": "TRANSPORT_SHIFT",
                    }
                
                @schemas.classproperty
                def ORDER(cls):
                    return cls("ORDER")
                
                @schemas.classproperty
                def PERFORMER_SHIFT(cls):
                    return cls("PERFORMER_SHIFT")
                
                @schemas.classproperty
                def TRANSPORT_SHIFT(cls):
                    return cls("TRANSPORT_SHIFT")
            
            
            class elements_count(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 30001
                    inclusive_minimum = 0
        
            @staticmethod
            def trip_key() -> typing.Type['BasicEssenceKey']:
                return BasicEssenceKey
            __annotations__ = {
                "essence_key": essence_key,
                "essence_type": essence_type,
                "enabled": enabled,
                "pristine": pristine,
                "element_type": element_type,
                "elements_count": elements_count,
                "trip_key": trip_key,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    essence_key: 'BasicEssenceKey'
    essence_type: MetaOapg.properties.essence_type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["essence_key"]) -> 'BasicEssenceKey': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["essence_type"]) -> MetaOapg.properties.essence_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pristine"]) -> MetaOapg.properties.pristine: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["element_type"]) -> MetaOapg.properties.element_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elements_count"]) -> MetaOapg.properties.elements_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trip_key"]) -> 'BasicEssenceKey': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["essence_key"], typing_extensions.Literal["essence_type"], typing_extensions.Literal["enabled"], typing_extensions.Literal["pristine"], typing_extensions.Literal["element_type"], typing_extensions.Literal["elements_count"], typing_extensions.Literal["trip_key"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["essence_key"]) -> 'BasicEssenceKey': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["essence_type"]) -> MetaOapg.properties.essence_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union[MetaOapg.properties.enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pristine"]) -> typing.Union[MetaOapg.properties.pristine, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["element_type"]) -> typing.Union[MetaOapg.properties.element_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elements_count"]) -> typing.Union[MetaOapg.properties.elements_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trip_key"]) -> typing.Union['BasicEssenceKey', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["essence_key"], typing_extensions.Literal["essence_type"], typing_extensions.Literal["enabled"], typing_extensions.Literal["pristine"], typing_extensions.Literal["element_type"], typing_extensions.Literal["elements_count"], typing_extensions.Literal["trip_key"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        essence_key: 'BasicEssenceKey',
        essence_type: typing.Union[MetaOapg.properties.essence_type, str, ],
        enabled: typing.Union[MetaOapg.properties.enabled, bool, schemas.Unset] = schemas.unset,
        pristine: typing.Union[MetaOapg.properties.pristine, bool, schemas.Unset] = schemas.unset,
        element_type: typing.Union[MetaOapg.properties.element_type, str, schemas.Unset] = schemas.unset,
        elements_count: typing.Union[MetaOapg.properties.elements_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        trip_key: typing.Union['BasicEssenceKey', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TableHardlinkFields':
        return super().__new__(
            cls,
            *args,
            essence_key=essence_key,
            essence_type=essence_type,
            enabled=enabled,
            pristine=pristine,
            element_type=element_type,
            elements_count=elements_count,
            trip_key=trip_key,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.basic_essence_key import BasicEssenceKey
