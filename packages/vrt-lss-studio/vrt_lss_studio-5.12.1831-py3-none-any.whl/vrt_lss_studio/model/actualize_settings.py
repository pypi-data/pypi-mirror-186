# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class ActualizeSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Actualize settings.

    """


    class MetaOapg:
        
        class properties:
            
            
            class current_time(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'current_time':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def geo_settings() -> typing.Type['GeoSettings']:
                return GeoSettings
        
            @staticmethod
            def calculation_settings() -> typing.Type['CalculationSettings']:
                return CalculationSettings
            __annotations__ = {
                "current_time": current_time,
                "geo_settings": geo_settings,
                "calculation_settings": calculation_settings,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_time"]) -> MetaOapg.properties.current_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geo_settings"]) -> 'GeoSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calculation_settings"]) -> 'CalculationSettings': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["current_time"], typing_extensions.Literal["geo_settings"], typing_extensions.Literal["calculation_settings"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_time"]) -> typing.Union[MetaOapg.properties.current_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geo_settings"]) -> typing.Union['GeoSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calculation_settings"]) -> typing.Union['CalculationSettings', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["current_time"], typing_extensions.Literal["geo_settings"], typing_extensions.Literal["calculation_settings"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        current_time: typing.Union[MetaOapg.properties.current_time, None, str, datetime, schemas.Unset] = schemas.unset,
        geo_settings: typing.Union['GeoSettings', schemas.Unset] = schemas.unset,
        calculation_settings: typing.Union['CalculationSettings', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ActualizeSettings':
        return super().__new__(
            cls,
            *args,
            current_time=current_time,
            geo_settings=geo_settings,
            calculation_settings=calculation_settings,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.calculation_settings import CalculationSettings
from vrt_lss_studio.model.geo_settings import GeoSettings
