# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class WebLocationGeopoint(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Geopoint for map.
    """


    class MetaOapg:
        required = {
            "geopoint",
            "location_key",
            "linked",
        }
        
        class properties:
        
            @staticmethod
            def geopoint() -> typing.Type['Geopoint']:
                return Geopoint
            
            
            class location_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            linked = schemas.BoolSchema
            __annotations__ = {
                "geopoint": geopoint,
                "location_key": location_key,
                "linked": linked,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    geopoint: 'Geopoint'
    location_key: MetaOapg.properties.location_key
    linked: MetaOapg.properties.linked
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geopoint"]) -> 'Geopoint': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_key"]) -> MetaOapg.properties.location_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linked"]) -> MetaOapg.properties.linked: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["geopoint"], typing_extensions.Literal["location_key"], typing_extensions.Literal["linked"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geopoint"]) -> 'Geopoint': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_key"]) -> MetaOapg.properties.location_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linked"]) -> MetaOapg.properties.linked: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["geopoint"], typing_extensions.Literal["location_key"], typing_extensions.Literal["linked"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        geopoint: 'Geopoint',
        location_key: typing.Union[MetaOapg.properties.location_key, str, ],
        linked: typing.Union[MetaOapg.properties.linked, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'WebLocationGeopoint':
        return super().__new__(
            cls,
            *args,
            geopoint=geopoint,
            location_key=location_key,
            linked=linked,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.geopoint import Geopoint
