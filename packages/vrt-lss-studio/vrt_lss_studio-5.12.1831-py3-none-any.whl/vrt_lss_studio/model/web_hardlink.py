# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class WebHardlink(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Web Hardlink.
    """


    class MetaOapg:
        required = {
            "hardlink",
        }
        
        class properties:
        
            @staticmethod
            def hardlink() -> typing.Type['Hardlink']:
                return Hardlink
        
            @staticmethod
            def fields() -> typing.Type['TableHardlinkFields']:
                return TableHardlinkFields
        
            @staticmethod
            def linked_essences() -> typing.Type['LinkedEssenceList']:
                return LinkedEssenceList
            __annotations__ = {
                "hardlink": hardlink,
                "fields": fields,
                "linked_essences": linked_essences,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    hardlink: 'Hardlink'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hardlink"]) -> 'Hardlink': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> 'TableHardlinkFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linked_essences"]) -> 'LinkedEssenceList': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["hardlink"], typing_extensions.Literal["fields"], typing_extensions.Literal["linked_essences"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hardlink"]) -> 'Hardlink': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union['TableHardlinkFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linked_essences"]) -> typing.Union['LinkedEssenceList', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["hardlink"], typing_extensions.Literal["fields"], typing_extensions.Literal["linked_essences"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        hardlink: 'Hardlink',
        fields: typing.Union['TableHardlinkFields', schemas.Unset] = schemas.unset,
        linked_essences: typing.Union['LinkedEssenceList', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'WebHardlink':
        return super().__new__(
            cls,
            *args,
            hardlink=hardlink,
            fields=fields,
            linked_essences=linked_essences,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.hardlink import Hardlink
from vrt_lss_studio.model.linked_essence_list import LinkedEssenceList
from vrt_lss_studio.model.table_hardlink_fields import TableHardlinkFields
