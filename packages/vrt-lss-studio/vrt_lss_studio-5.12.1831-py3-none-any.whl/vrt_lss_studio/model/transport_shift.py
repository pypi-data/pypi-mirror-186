# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class TransportShift(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A transport work shift that determines the availability of a transport for scheduling within its availability time window.

    """


    class MetaOapg:
        required = {
            "working_time",
            "availability_time",
            "key",
        }
        
        class properties:
            
            
            class key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
        
            @staticmethod
            def availability_time() -> typing.Type['TimeWindow']:
                return TimeWindow
        
            @staticmethod
            def working_time() -> typing.Type['TimeWindow']:
                return TimeWindow
            
            
            class start_location_key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'start_location_key':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class finish_location_key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'finish_location_key':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def tariff() -> typing.Type['TransportTariff']:
                return TransportTariff
        
            @staticmethod
            def attributes() -> typing.Type['Attributes']:
                return Attributes
            __annotations__ = {
                "key": key,
                "availability_time": availability_time,
                "working_time": working_time,
                "start_location_key": start_location_key,
                "finish_location_key": finish_location_key,
                "tariff": tariff,
                "attributes": attributes,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    working_time: 'TimeWindow'
    availability_time: 'TimeWindow'
    key: MetaOapg.properties.key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["working_time"]) -> 'TimeWindow': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availability_time"]) -> 'TimeWindow': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_location_key"]) -> MetaOapg.properties.start_location_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finish_location_key"]) -> MetaOapg.properties.finish_location_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tariff"]) -> 'TransportTariff': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> 'Attributes': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["working_time"], typing_extensions.Literal["availability_time"], typing_extensions.Literal["key"], typing_extensions.Literal["start_location_key"], typing_extensions.Literal["finish_location_key"], typing_extensions.Literal["tariff"], typing_extensions.Literal["attributes"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["working_time"]) -> 'TimeWindow': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availability_time"]) -> 'TimeWindow': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_location_key"]) -> typing.Union[MetaOapg.properties.start_location_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finish_location_key"]) -> typing.Union[MetaOapg.properties.finish_location_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tariff"]) -> typing.Union['TransportTariff', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union['Attributes', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["working_time"], typing_extensions.Literal["availability_time"], typing_extensions.Literal["key"], typing_extensions.Literal["start_location_key"], typing_extensions.Literal["finish_location_key"], typing_extensions.Literal["tariff"], typing_extensions.Literal["attributes"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        working_time: 'TimeWindow',
        availability_time: 'TimeWindow',
        key: typing.Union[MetaOapg.properties.key, str, ],
        start_location_key: typing.Union[MetaOapg.properties.start_location_key, None, str, schemas.Unset] = schemas.unset,
        finish_location_key: typing.Union[MetaOapg.properties.finish_location_key, None, str, schemas.Unset] = schemas.unset,
        tariff: typing.Union['TransportTariff', schemas.Unset] = schemas.unset,
        attributes: typing.Union['Attributes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TransportShift':
        return super().__new__(
            cls,
            *args,
            working_time=working_time,
            availability_time=availability_time,
            key=key,
            start_location_key=start_location_key,
            finish_location_key=finish_location_key,
            tariff=tariff,
            attributes=attributes,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.attributes import Attributes
from vrt_lss_studio.model.time_window import TimeWindow
from vrt_lss_studio.model.transport_tariff import TransportTariff
