# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class Statistics(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    General statistics for one or more trips.

    """


    class MetaOapg:
        required = {
            "reward",
            "orders_count",
            "capacity_utilization",
            "cost",
            "plan_orders_count",
            "performers_count",
            "capacity_max",
            "waitlist_orders_count",
            "measurements",
            "quality",
        }
        
        class properties:
            
            
            class cost(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_minimum = 0
            
            
            class reward(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_minimum = 0
        
            @staticmethod
            def measurements() -> typing.Type['Measurements']:
                return Measurements
            
            
            class performers_count(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 30001
                    inclusive_minimum = 0
            
            
            class orders_count(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 30001
                    inclusive_minimum = 0
            
            
            class plan_orders_count(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 30001
                    inclusive_minimum = 0
            
            
            class waitlist_orders_count(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 30001
                    inclusive_minimum = 0
        
            @staticmethod
            def capacity_utilization() -> typing.Type['Capacity']:
                return Capacity
        
            @staticmethod
            def capacity_max() -> typing.Type['Capacity']:
                return Capacity
        
            @staticmethod
            def quality() -> typing.Type['QualityStatistics']:
                return QualityStatistics
            __annotations__ = {
                "cost": cost,
                "reward": reward,
                "measurements": measurements,
                "performers_count": performers_count,
                "orders_count": orders_count,
                "plan_orders_count": plan_orders_count,
                "waitlist_orders_count": waitlist_orders_count,
                "capacity_utilization": capacity_utilization,
                "capacity_max": capacity_max,
                "quality": quality,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    reward: MetaOapg.properties.reward
    orders_count: MetaOapg.properties.orders_count
    capacity_utilization: 'Capacity'
    cost: MetaOapg.properties.cost
    plan_orders_count: MetaOapg.properties.plan_orders_count
    performers_count: MetaOapg.properties.performers_count
    capacity_max: 'Capacity'
    waitlist_orders_count: MetaOapg.properties.waitlist_orders_count
    measurements: 'Measurements'
    quality: 'QualityStatistics'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reward"]) -> MetaOapg.properties.reward: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orders_count"]) -> MetaOapg.properties.orders_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity_utilization"]) -> 'Capacity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost"]) -> MetaOapg.properties.cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plan_orders_count"]) -> MetaOapg.properties.plan_orders_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performers_count"]) -> MetaOapg.properties.performers_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity_max"]) -> 'Capacity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waitlist_orders_count"]) -> MetaOapg.properties.waitlist_orders_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["measurements"]) -> 'Measurements': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quality"]) -> 'QualityStatistics': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reward"], typing_extensions.Literal["orders_count"], typing_extensions.Literal["capacity_utilization"], typing_extensions.Literal["cost"], typing_extensions.Literal["plan_orders_count"], typing_extensions.Literal["performers_count"], typing_extensions.Literal["capacity_max"], typing_extensions.Literal["waitlist_orders_count"], typing_extensions.Literal["measurements"], typing_extensions.Literal["quality"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reward"]) -> MetaOapg.properties.reward: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orders_count"]) -> MetaOapg.properties.orders_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity_utilization"]) -> 'Capacity': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost"]) -> MetaOapg.properties.cost: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plan_orders_count"]) -> MetaOapg.properties.plan_orders_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performers_count"]) -> MetaOapg.properties.performers_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity_max"]) -> 'Capacity': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waitlist_orders_count"]) -> MetaOapg.properties.waitlist_orders_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["measurements"]) -> 'Measurements': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quality"]) -> 'QualityStatistics': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reward"], typing_extensions.Literal["orders_count"], typing_extensions.Literal["capacity_utilization"], typing_extensions.Literal["cost"], typing_extensions.Literal["plan_orders_count"], typing_extensions.Literal["performers_count"], typing_extensions.Literal["capacity_max"], typing_extensions.Literal["waitlist_orders_count"], typing_extensions.Literal["measurements"], typing_extensions.Literal["quality"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        reward: typing.Union[MetaOapg.properties.reward, decimal.Decimal, int, float, ],
        orders_count: typing.Union[MetaOapg.properties.orders_count, decimal.Decimal, int, ],
        capacity_utilization: 'Capacity',
        cost: typing.Union[MetaOapg.properties.cost, decimal.Decimal, int, float, ],
        plan_orders_count: typing.Union[MetaOapg.properties.plan_orders_count, decimal.Decimal, int, ],
        performers_count: typing.Union[MetaOapg.properties.performers_count, decimal.Decimal, int, ],
        capacity_max: 'Capacity',
        waitlist_orders_count: typing.Union[MetaOapg.properties.waitlist_orders_count, decimal.Decimal, int, ],
        measurements: 'Measurements',
        quality: 'QualityStatistics',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Statistics':
        return super().__new__(
            cls,
            *args,
            reward=reward,
            orders_count=orders_count,
            capacity_utilization=capacity_utilization,
            cost=cost,
            plan_orders_count=plan_orders_count,
            performers_count=performers_count,
            capacity_max=capacity_max,
            waitlist_orders_count=waitlist_orders_count,
            measurements=measurements,
            quality=quality,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.capacity import Capacity
from vrt_lss_studio.model.measurements import Measurements
from vrt_lss_studio.model.quality_statistics import QualityStatistics
