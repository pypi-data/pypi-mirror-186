# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class Capacity(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Capacity characteristics.
    """


    class MetaOapg:
        
        class properties:
            
            
            class mass(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class volume(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class capacity_a(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class capacity_b(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class capacity_c(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            __annotations__ = {
                "mass": mass,
                "volume": volume,
                "capacity_a": capacity_a,
                "capacity_b": capacity_b,
                "capacity_c": capacity_c,
            }
        additional_properties = schemas.NotAnyTypeSchema

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mass"]) -> MetaOapg.properties.mass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volume"]) -> MetaOapg.properties.volume: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity_a"]) -> MetaOapg.properties.capacity_a: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity_b"]) -> MetaOapg.properties.capacity_b: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity_c"]) -> MetaOapg.properties.capacity_c: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mass"], typing_extensions.Literal["volume"], typing_extensions.Literal["capacity_a"], typing_extensions.Literal["capacity_b"], typing_extensions.Literal["capacity_c"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mass"]) -> typing.Union[MetaOapg.properties.mass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volume"]) -> typing.Union[MetaOapg.properties.volume, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity_a"]) -> typing.Union[MetaOapg.properties.capacity_a, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity_b"]) -> typing.Union[MetaOapg.properties.capacity_b, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity_c"]) -> typing.Union[MetaOapg.properties.capacity_c, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mass"], typing_extensions.Literal["volume"], typing_extensions.Literal["capacity_a"], typing_extensions.Literal["capacity_b"], typing_extensions.Literal["capacity_c"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        mass: typing.Union[MetaOapg.properties.mass, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        volume: typing.Union[MetaOapg.properties.volume, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        capacity_a: typing.Union[MetaOapg.properties.capacity_a, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        capacity_b: typing.Union[MetaOapg.properties.capacity_b, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        capacity_c: typing.Union[MetaOapg.properties.capacity_c, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Capacity':
        return super().__new__(
            cls,
            *args,
            mass=mass,
            volume=volume,
            capacity_a=capacity_a,
            capacity_b=capacity_b,
            capacity_c=capacity_c,
            _configuration=_configuration,
        )
