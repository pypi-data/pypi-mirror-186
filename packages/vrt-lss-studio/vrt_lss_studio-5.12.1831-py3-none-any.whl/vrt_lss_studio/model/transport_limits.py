# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class TransportLimits(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Transport load limits.

    """


    class MetaOapg:
        
        class properties:
            
            
            class max_boxes(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 100
                    inclusive_minimum = 0
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'max_boxes':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def max_capacity() -> typing.Type['Capacity']:
                return Capacity
            __annotations__ = {
                "max_boxes": max_boxes,
                "max_capacity": max_capacity,
            }
        additional_properties = schemas.NotAnyTypeSchema

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_boxes"]) -> MetaOapg.properties.max_boxes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_capacity"]) -> 'Capacity': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["max_boxes"], typing_extensions.Literal["max_capacity"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_boxes"]) -> typing.Union[MetaOapg.properties.max_boxes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_capacity"]) -> typing.Union['Capacity', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["max_boxes"], typing_extensions.Literal["max_capacity"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        max_boxes: typing.Union[MetaOapg.properties.max_boxes, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_capacity: typing.Union['Capacity', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TransportLimits':
        return super().__new__(
            cls,
            *args,
            max_boxes=max_boxes,
            max_capacity=max_capacity,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.capacity import Capacity
