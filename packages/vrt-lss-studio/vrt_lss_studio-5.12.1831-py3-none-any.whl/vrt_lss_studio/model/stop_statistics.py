# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class StopStatistics(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Statistics for a specific stop during a trip.

    """


    class MetaOapg:
        required = {
            "departure_load",
            "arrival_load",
            "download",
            "upload",
            "demand_ids",
            "location_key",
            "max_load",
            "measurements",
        }
        
        class properties:
            
            
            class location_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class demand_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 1024
                            min_length = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'demand_ids':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def measurements() -> typing.Type['Measurements']:
                return Measurements
        
            @staticmethod
            def upload() -> typing.Type['TransportLoad']:
                return TransportLoad
        
            @staticmethod
            def download() -> typing.Type['TransportLoad']:
                return TransportLoad
        
            @staticmethod
            def max_load() -> typing.Type['TransportLoad']:
                return TransportLoad
        
            @staticmethod
            def arrival_load() -> typing.Type['TransportLoad']:
                return TransportLoad
        
            @staticmethod
            def departure_load() -> typing.Type['TransportLoad']:
                return TransportLoad
            __annotations__ = {
                "location_key": location_key,
                "demand_ids": demand_ids,
                "measurements": measurements,
                "upload": upload,
                "download": download,
                "max_load": max_load,
                "arrival_load": arrival_load,
                "departure_load": departure_load,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    departure_load: 'TransportLoad'
    arrival_load: 'TransportLoad'
    download: 'TransportLoad'
    upload: 'TransportLoad'
    demand_ids: MetaOapg.properties.demand_ids
    location_key: MetaOapg.properties.location_key
    max_load: 'TransportLoad'
    measurements: 'Measurements'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departure_load"]) -> 'TransportLoad': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["arrival_load"]) -> 'TransportLoad': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["download"]) -> 'TransportLoad': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload"]) -> 'TransportLoad': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["demand_ids"]) -> MetaOapg.properties.demand_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_key"]) -> MetaOapg.properties.location_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_load"]) -> 'TransportLoad': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["measurements"]) -> 'Measurements': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["departure_load"], typing_extensions.Literal["arrival_load"], typing_extensions.Literal["download"], typing_extensions.Literal["upload"], typing_extensions.Literal["demand_ids"], typing_extensions.Literal["location_key"], typing_extensions.Literal["max_load"], typing_extensions.Literal["measurements"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departure_load"]) -> 'TransportLoad': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["arrival_load"]) -> 'TransportLoad': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["download"]) -> 'TransportLoad': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload"]) -> 'TransportLoad': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["demand_ids"]) -> MetaOapg.properties.demand_ids: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_key"]) -> MetaOapg.properties.location_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_load"]) -> 'TransportLoad': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["measurements"]) -> 'Measurements': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["departure_load"], typing_extensions.Literal["arrival_load"], typing_extensions.Literal["download"], typing_extensions.Literal["upload"], typing_extensions.Literal["demand_ids"], typing_extensions.Literal["location_key"], typing_extensions.Literal["max_load"], typing_extensions.Literal["measurements"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        departure_load: 'TransportLoad',
        arrival_load: 'TransportLoad',
        download: 'TransportLoad',
        upload: 'TransportLoad',
        demand_ids: typing.Union[MetaOapg.properties.demand_ids, list, tuple, ],
        location_key: typing.Union[MetaOapg.properties.location_key, str, ],
        max_load: 'TransportLoad',
        measurements: 'Measurements',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'StopStatistics':
        return super().__new__(
            cls,
            *args,
            departure_load=departure_load,
            arrival_load=arrival_load,
            download=download,
            upload=upload,
            demand_ids=demand_ids,
            location_key=location_key,
            max_load=max_load,
            measurements=measurements,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.measurements import Measurements
from vrt_lss_studio.model.transport_load import TransportLoad
