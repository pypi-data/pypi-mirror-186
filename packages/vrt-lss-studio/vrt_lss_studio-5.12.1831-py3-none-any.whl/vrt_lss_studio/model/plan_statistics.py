# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class PlanStatistics(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    General statistics on planned trips.

    """


    class MetaOapg:
        required = {
            "total_statistics",
            "trips_statistics",
        }
        
        class properties:
        
            @staticmethod
            def total_statistics() -> typing.Type['Statistics']:
                return Statistics
            
            
            class trips_statistics(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['TripStatistics']:
                        return TripStatistics
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TripStatistics'], typing.List['TripStatistics']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'trips_statistics':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TripStatistics':
                    return super().__getitem__(i)
            __annotations__ = {
                "total_statistics": total_statistics,
                "trips_statistics": trips_statistics,
            }
        additional_properties = schemas.NotAnyTypeSchema

    
    total_statistics: 'Statistics'
    trips_statistics: MetaOapg.properties.trips_statistics
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_statistics"]) -> 'Statistics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trips_statistics"]) -> MetaOapg.properties.trips_statistics: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["total_statistics"], typing_extensions.Literal["trips_statistics"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_statistics"]) -> 'Statistics': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trips_statistics"]) -> MetaOapg.properties.trips_statistics: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total_statistics"], typing_extensions.Literal["trips_statistics"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PlanStatistics':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.statistics import Statistics
from vrt_lss_studio.model.trip_statistics import TripStatistics
