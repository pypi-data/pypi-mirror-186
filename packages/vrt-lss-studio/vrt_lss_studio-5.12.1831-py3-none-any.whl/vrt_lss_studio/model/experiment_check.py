# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class ExperimentCheck(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The result of checking the data on the experiment.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def logical_errors() -> typing.Type['EntityErrorList']:
                return EntityErrorList
        
            @staticmethod
            def validations() -> typing.Type['EntityValidationList']:
                return EntityValidationList
            __annotations__ = {
                "logical_errors": logical_errors,
                "validations": validations,
            }
        additional_properties = schemas.NotAnyTypeSchema

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logical_errors"]) -> 'EntityErrorList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validations"]) -> 'EntityValidationList': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["logical_errors"], typing_extensions.Literal["validations"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logical_errors"]) -> typing.Union['EntityErrorList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validations"]) -> typing.Union['EntityValidationList', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["logical_errors"], typing_extensions.Literal["validations"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        logical_errors: typing.Union['EntityErrorList', schemas.Unset] = schemas.unset,
        validations: typing.Union['EntityValidationList', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ExperimentCheck':
        return super().__new__(
            cls,
            *args,
            logical_errors=logical_errors,
            validations=validations,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.entity_error_list import EntityErrorList
from vrt_lss_studio.model.entity_validation_list import EntityValidationList
