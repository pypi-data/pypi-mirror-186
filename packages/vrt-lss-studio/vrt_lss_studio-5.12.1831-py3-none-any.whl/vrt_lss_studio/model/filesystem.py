# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class Filesystem(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    File system.  Only one object can be of type ROOT.

    """


    class MetaOapg:
        required = {
            "name",
            "type",
            "key",
            "statistics",
        }
        
        class properties:
        
            @staticmethod
            def key() -> typing.Type['UniqueKey']:
                return UniqueKey
        
            @staticmethod
            def type() -> typing.Type['FolderType']:
                return FolderType
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
                    min_length = 1
        
            @staticmethod
            def statistics() -> typing.Type['FolderStats']:
                return FolderStats
            
            
            class elements(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = False
                    max_items = 101
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['Filesystem']:
                        return Filesystem
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Filesystem'], typing.List['Filesystem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'elements':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Filesystem':
                    return super().__getitem__(i)
            __annotations__ = {
                "key": key,
                "type": type,
                "name": name,
                "statistics": statistics,
                "elements": elements,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    name: MetaOapg.properties.name
    type: 'FolderType'
    key: 'UniqueKey'
    statistics: 'FolderStats'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'FolderType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> 'UniqueKey': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statistics"]) -> 'FolderStats': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elements"]) -> MetaOapg.properties.elements: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["type"], typing_extensions.Literal["key"], typing_extensions.Literal["statistics"], typing_extensions.Literal["elements"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'FolderType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> 'UniqueKey': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statistics"]) -> 'FolderStats': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elements"]) -> typing.Union[MetaOapg.properties.elements, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["type"], typing_extensions.Literal["key"], typing_extensions.Literal["statistics"], typing_extensions.Literal["elements"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        type: 'FolderType',
        key: 'UniqueKey',
        statistics: 'FolderStats',
        elements: typing.Union[MetaOapg.properties.elements, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Filesystem':
        return super().__new__(
            cls,
            *args,
            name=name,
            type=type,
            key=key,
            statistics=statistics,
            elements=elements,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.folder_stats import FolderStats
from vrt_lss_studio.model.folder_type import FolderType
from vrt_lss_studio.model.unique_key import UniqueKey
