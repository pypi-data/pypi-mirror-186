# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class WebTripTrack(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Track for map.
    """


    class MetaOapg:
        required = {
            "transport_shift_key",
            "performer_key",
            "transport_key",
            "trip_key",
            "geopoints",
            "performer_shift_key",
        }
        
        class properties:
            
            
            class geopoints(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 1000000
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['Geopoint']:
                        return Geopoint
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Geopoint'], typing.List['Geopoint']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'geopoints':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Geopoint':
                    return super().__getitem__(i)
            
            
            class trip_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class performer_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class performer_shift_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class transport_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class transport_shift_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            __annotations__ = {
                "geopoints": geopoints,
                "trip_key": trip_key,
                "performer_key": performer_key,
                "performer_shift_key": performer_shift_key,
                "transport_key": transport_key,
                "transport_shift_key": transport_shift_key,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    transport_shift_key: MetaOapg.properties.transport_shift_key
    performer_key: MetaOapg.properties.performer_key
    transport_key: MetaOapg.properties.transport_key
    trip_key: MetaOapg.properties.trip_key
    geopoints: MetaOapg.properties.geopoints
    performer_shift_key: MetaOapg.properties.performer_shift_key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transport_shift_key"]) -> MetaOapg.properties.transport_shift_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performer_key"]) -> MetaOapg.properties.performer_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transport_key"]) -> MetaOapg.properties.transport_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trip_key"]) -> MetaOapg.properties.trip_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geopoints"]) -> MetaOapg.properties.geopoints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performer_shift_key"]) -> MetaOapg.properties.performer_shift_key: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transport_shift_key"], typing_extensions.Literal["performer_key"], typing_extensions.Literal["transport_key"], typing_extensions.Literal["trip_key"], typing_extensions.Literal["geopoints"], typing_extensions.Literal["performer_shift_key"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transport_shift_key"]) -> MetaOapg.properties.transport_shift_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performer_key"]) -> MetaOapg.properties.performer_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transport_key"]) -> MetaOapg.properties.transport_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trip_key"]) -> MetaOapg.properties.trip_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geopoints"]) -> MetaOapg.properties.geopoints: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performer_shift_key"]) -> MetaOapg.properties.performer_shift_key: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transport_shift_key"], typing_extensions.Literal["performer_key"], typing_extensions.Literal["transport_key"], typing_extensions.Literal["trip_key"], typing_extensions.Literal["geopoints"], typing_extensions.Literal["performer_shift_key"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        transport_shift_key: typing.Union[MetaOapg.properties.transport_shift_key, str, ],
        performer_key: typing.Union[MetaOapg.properties.performer_key, str, ],
        transport_key: typing.Union[MetaOapg.properties.transport_key, str, ],
        trip_key: typing.Union[MetaOapg.properties.trip_key, str, ],
        geopoints: typing.Union[MetaOapg.properties.geopoints, list, tuple, ],
        performer_shift_key: typing.Union[MetaOapg.properties.performer_shift_key, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'WebTripTrack':
        return super().__new__(
            cls,
            *args,
            transport_shift_key=transport_shift_key,
            performer_key=performer_key,
            transport_key=transport_key,
            trip_key=trip_key,
            geopoints=geopoints,
            performer_shift_key=performer_shift_key,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.geopoint import Geopoint
