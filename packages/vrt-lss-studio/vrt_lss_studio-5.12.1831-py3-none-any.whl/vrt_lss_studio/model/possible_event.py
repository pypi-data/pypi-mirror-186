# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class PossibleEvent(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Possible event.  Combines the geographical location and the time window, when a demand can be completed.

    """


    class MetaOapg:
        required = {
            "hard_time_window",
            "key",
            "location_key",
        }
        
        class properties:
            
            
            class key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class location_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
        
            @staticmethod
            def hard_time_window() -> typing.Type['TimeWindow']:
                return TimeWindow
        
            @staticmethod
            def duration() -> typing.Type['TimeDuration']:
                return TimeDuration
            
            
            class reward(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
        
            @staticmethod
            def soft_time_window() -> typing.Type['TimeWindow']:
                return TimeWindow
            __annotations__ = {
                "key": key,
                "location_key": location_key,
                "hard_time_window": hard_time_window,
                "duration": duration,
                "reward": reward,
                "soft_time_window": soft_time_window,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    hard_time_window: 'TimeWindow'
    key: MetaOapg.properties.key
    location_key: MetaOapg.properties.location_key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hard_time_window"]) -> 'TimeWindow': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_key"]) -> MetaOapg.properties.location_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> 'TimeDuration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reward"]) -> MetaOapg.properties.reward: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["soft_time_window"]) -> 'TimeWindow': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["hard_time_window"], typing_extensions.Literal["key"], typing_extensions.Literal["location_key"], typing_extensions.Literal["duration"], typing_extensions.Literal["reward"], typing_extensions.Literal["soft_time_window"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hard_time_window"]) -> 'TimeWindow': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_key"]) -> MetaOapg.properties.location_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union['TimeDuration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reward"]) -> typing.Union[MetaOapg.properties.reward, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["soft_time_window"]) -> typing.Union['TimeWindow', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["hard_time_window"], typing_extensions.Literal["key"], typing_extensions.Literal["location_key"], typing_extensions.Literal["duration"], typing_extensions.Literal["reward"], typing_extensions.Literal["soft_time_window"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        hard_time_window: 'TimeWindow',
        key: typing.Union[MetaOapg.properties.key, str, ],
        location_key: typing.Union[MetaOapg.properties.location_key, str, ],
        duration: typing.Union['TimeDuration', schemas.Unset] = schemas.unset,
        reward: typing.Union[MetaOapg.properties.reward, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        soft_time_window: typing.Union['TimeWindow', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PossibleEvent':
        return super().__new__(
            cls,
            *args,
            hard_time_window=hard_time_window,
            key=key,
            location_key=location_key,
            duration=duration,
            reward=reward,
            soft_time_window=soft_time_window,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.time_duration import TimeDuration
from vrt_lss_studio.model.time_window import TimeWindow
