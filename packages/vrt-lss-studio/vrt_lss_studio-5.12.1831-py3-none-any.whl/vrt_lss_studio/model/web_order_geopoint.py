# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class WebOrderGeopoint(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Geopoint for map.
    """


    class MetaOapg:
        required = {
            "order_key",
            "demand_key",
            "demand_type",
            "geopoint",
            "event_key",
        }
        
        class properties:
        
            @staticmethod
            def geopoint() -> typing.Type['Geopoint']:
                return Geopoint
            
            
            class order_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class demand_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class event_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class demand_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PICKUP": "PICKUP",
                        "DROP": "DROP",
                        "WORK": "WORK",
                    }
                
                @schemas.classproperty
                def PICKUP(cls):
                    return cls("PICKUP")
                
                @schemas.classproperty
                def DROP(cls):
                    return cls("DROP")
                
                @schemas.classproperty
                def WORK(cls):
                    return cls("WORK")
            
            
            class trip_key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'trip_key':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class stop_number(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 1000
                    inclusive_minimum = 0
            __annotations__ = {
                "geopoint": geopoint,
                "order_key": order_key,
                "demand_key": demand_key,
                "event_key": event_key,
                "demand_type": demand_type,
                "trip_key": trip_key,
                "stop_number": stop_number,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    order_key: MetaOapg.properties.order_key
    demand_key: MetaOapg.properties.demand_key
    demand_type: MetaOapg.properties.demand_type
    geopoint: 'Geopoint'
    event_key: MetaOapg.properties.event_key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_key"]) -> MetaOapg.properties.order_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["demand_key"]) -> MetaOapg.properties.demand_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["demand_type"]) -> MetaOapg.properties.demand_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geopoint"]) -> 'Geopoint': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_key"]) -> MetaOapg.properties.event_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trip_key"]) -> MetaOapg.properties.trip_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stop_number"]) -> MetaOapg.properties.stop_number: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["order_key"], typing_extensions.Literal["demand_key"], typing_extensions.Literal["demand_type"], typing_extensions.Literal["geopoint"], typing_extensions.Literal["event_key"], typing_extensions.Literal["trip_key"], typing_extensions.Literal["stop_number"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_key"]) -> MetaOapg.properties.order_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["demand_key"]) -> MetaOapg.properties.demand_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["demand_type"]) -> MetaOapg.properties.demand_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geopoint"]) -> 'Geopoint': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_key"]) -> MetaOapg.properties.event_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trip_key"]) -> typing.Union[MetaOapg.properties.trip_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stop_number"]) -> typing.Union[MetaOapg.properties.stop_number, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["order_key"], typing_extensions.Literal["demand_key"], typing_extensions.Literal["demand_type"], typing_extensions.Literal["geopoint"], typing_extensions.Literal["event_key"], typing_extensions.Literal["trip_key"], typing_extensions.Literal["stop_number"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        order_key: typing.Union[MetaOapg.properties.order_key, str, ],
        demand_key: typing.Union[MetaOapg.properties.demand_key, str, ],
        demand_type: typing.Union[MetaOapg.properties.demand_type, str, ],
        geopoint: 'Geopoint',
        event_key: typing.Union[MetaOapg.properties.event_key, str, ],
        trip_key: typing.Union[MetaOapg.properties.trip_key, None, str, schemas.Unset] = schemas.unset,
        stop_number: typing.Union[MetaOapg.properties.stop_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'WebOrderGeopoint':
        return super().__new__(
            cls,
            *args,
            order_key=order_key,
            demand_key=demand_key,
            demand_type=demand_type,
            geopoint=geopoint,
            event_key=event_key,
            trip_key=trip_key,
            stop_number=stop_number,
            _configuration=_configuration,
        )

from vrt_lss_studio.model.geopoint import Geopoint
