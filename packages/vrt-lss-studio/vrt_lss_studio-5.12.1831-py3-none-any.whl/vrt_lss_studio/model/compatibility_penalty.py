# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class CompatibilityPenalty(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Penalty for violation of compatibility.

    """


    class MetaOapg:
        required = {
            "penalty",
            "tag",
        }
        
        class properties:
            
            
            class tag(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 256
                    min_length = 1
            
            
            class penalty(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            __annotations__ = {
                "tag": tag,
                "penalty": penalty,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    penalty: MetaOapg.properties.penalty
    tag: MetaOapg.properties.tag
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["penalty"]) -> MetaOapg.properties.penalty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["penalty"], typing_extensions.Literal["tag"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["penalty"]) -> MetaOapg.properties.penalty: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["penalty"], typing_extensions.Literal["tag"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        penalty: typing.Union[MetaOapg.properties.penalty, decimal.Decimal, int, float, ],
        tag: typing.Union[MetaOapg.properties.tag, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CompatibilityPenalty':
        return super().__new__(
            cls,
            *args,
            penalty=penalty,
            tag=tag,
            _configuration=_configuration,
        )
