# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class UnplannedItems(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Unplanned items list.
    """


    class MetaOapg:
        
        class properties:
            
            
            class order_keys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 1024
                            min_length = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'order_keys':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class performer_keys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 1024
                            min_length = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'performer_keys':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class transport_keys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 1024
                            min_length = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transport_keys':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class hardlink_keys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 1024
                            min_length = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hardlink_keys':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "order_keys": order_keys,
                "performer_keys": performer_keys,
                "transport_keys": transport_keys,
                "hardlink_keys": hardlink_keys,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_keys"]) -> MetaOapg.properties.order_keys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performer_keys"]) -> MetaOapg.properties.performer_keys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transport_keys"]) -> MetaOapg.properties.transport_keys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hardlink_keys"]) -> MetaOapg.properties.hardlink_keys: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["order_keys"], typing_extensions.Literal["performer_keys"], typing_extensions.Literal["transport_keys"], typing_extensions.Literal["hardlink_keys"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_keys"]) -> typing.Union[MetaOapg.properties.order_keys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performer_keys"]) -> typing.Union[MetaOapg.properties.performer_keys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transport_keys"]) -> typing.Union[MetaOapg.properties.transport_keys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hardlink_keys"]) -> typing.Union[MetaOapg.properties.hardlink_keys, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["order_keys"], typing_extensions.Literal["performer_keys"], typing_extensions.Literal["transport_keys"], typing_extensions.Literal["hardlink_keys"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        order_keys: typing.Union[MetaOapg.properties.order_keys, list, tuple, schemas.Unset] = schemas.unset,
        performer_keys: typing.Union[MetaOapg.properties.performer_keys, list, tuple, schemas.Unset] = schemas.unset,
        transport_keys: typing.Union[MetaOapg.properties.transport_keys, list, tuple, schemas.Unset] = schemas.unset,
        hardlink_keys: typing.Union[MetaOapg.properties.hardlink_keys, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'UnplannedItems':
        return super().__new__(
            cls,
            *args,
            order_keys=order_keys,
            performer_keys=performer_keys,
            transport_keys=transport_keys,
            hardlink_keys=hardlink_keys,
            _configuration=_configuration,
        )
