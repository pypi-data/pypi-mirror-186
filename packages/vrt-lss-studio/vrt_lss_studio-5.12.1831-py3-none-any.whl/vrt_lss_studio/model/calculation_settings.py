# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_studio import schemas  # noqa: F401


class CalculationSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Calculation settings.
    """


    class MetaOapg:
        
        class properties:
            
            
            class max_calculation_time(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'duration'
                    max_length = 16
                    min_length = 3
                    regex=[{
                        'pattern': r'^P(?!$)((\d+Y)|(\d+\.\d+Y$))?((\d+M)|(\d+\.\d+M$))?((\d+W)|(\d+\.\d+W$))?((\d+D)|(\d+\.\d+D$))?(T(?=\d)((\d+H)|(\d+\.\d+H$))?((\d+M)|(\d+\.\d+M$))?(\d+(\.\d+)?S)?)??$',  # noqa: E501
                    }]
            
            
            class max_waiting_time(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'duration'
                    max_length = 16
                    min_length = 3
                    regex=[{
                        'pattern': r'^P(?!$)((\d+Y)|(\d+\.\d+Y$))?((\d+M)|(\d+\.\d+M$))?((\d+W)|(\d+\.\d+W$))?((\d+D)|(\d+\.\d+D$))?(T(?=\d)((\d+H)|(\d+\.\d+H$))?((\d+M)|(\d+\.\d+M$))?(\d+(\.\d+)?S)?)??$',  # noqa: E501
                    }]
            
            
            class result_ttl(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'duration'
                    max_length = 16
                    min_length = 3
                    regex=[{
                        'pattern': r'^P(?!$)((\d+Y)|(\d+\.\d+Y$))?((\d+M)|(\d+\.\d+M$))?((\d+W)|(\d+\.\d+W$))?((\d+D)|(\d+\.\d+D$))?(T(?=\d)((\d+H)|(\d+\.\d+H$))?((\d+M)|(\d+\.\d+M$))?(\d+(\.\d+)?S)?)??$',  # noqa: E501
                    }]
            
            
            class result_timezone(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 12
                    inclusive_minimum = -12
            treat_validations_as_errors = schemas.BoolSchema
            
            
            class precision(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 6
                    inclusive_minimum = 0
            __annotations__ = {
                "max_calculation_time": max_calculation_time,
                "max_waiting_time": max_waiting_time,
                "result_ttl": result_ttl,
                "result_timezone": result_timezone,
                "treat_validations_as_errors": treat_validations_as_errors,
                "precision": precision,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_calculation_time"]) -> MetaOapg.properties.max_calculation_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_waiting_time"]) -> MetaOapg.properties.max_waiting_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result_ttl"]) -> MetaOapg.properties.result_ttl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result_timezone"]) -> MetaOapg.properties.result_timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["treat_validations_as_errors"]) -> MetaOapg.properties.treat_validations_as_errors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["precision"]) -> MetaOapg.properties.precision: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["max_calculation_time"], typing_extensions.Literal["max_waiting_time"], typing_extensions.Literal["result_ttl"], typing_extensions.Literal["result_timezone"], typing_extensions.Literal["treat_validations_as_errors"], typing_extensions.Literal["precision"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_calculation_time"]) -> typing.Union[MetaOapg.properties.max_calculation_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_waiting_time"]) -> typing.Union[MetaOapg.properties.max_waiting_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result_ttl"]) -> typing.Union[MetaOapg.properties.result_ttl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result_timezone"]) -> typing.Union[MetaOapg.properties.result_timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["treat_validations_as_errors"]) -> typing.Union[MetaOapg.properties.treat_validations_as_errors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["precision"]) -> typing.Union[MetaOapg.properties.precision, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["max_calculation_time"], typing_extensions.Literal["max_waiting_time"], typing_extensions.Literal["result_ttl"], typing_extensions.Literal["result_timezone"], typing_extensions.Literal["treat_validations_as_errors"], typing_extensions.Literal["precision"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        max_calculation_time: typing.Union[MetaOapg.properties.max_calculation_time, str, schemas.Unset] = schemas.unset,
        max_waiting_time: typing.Union[MetaOapg.properties.max_waiting_time, str, schemas.Unset] = schemas.unset,
        result_ttl: typing.Union[MetaOapg.properties.result_ttl, str, schemas.Unset] = schemas.unset,
        result_timezone: typing.Union[MetaOapg.properties.result_timezone, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        treat_validations_as_errors: typing.Union[MetaOapg.properties.treat_validations_as_errors, bool, schemas.Unset] = schemas.unset,
        precision: typing.Union[MetaOapg.properties.precision, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CalculationSettings':
        return super().__new__(
            cls,
            *args,
            max_calculation_time=max_calculation_time,
            max_waiting_time=max_waiting_time,
            result_ttl=result_ttl,
            result_timezone=result_timezone,
            treat_validations_as_errors=treat_validations_as_errors,
            precision=precision,
            _configuration=_configuration,
        )
