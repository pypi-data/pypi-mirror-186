# coding: utf-8

"""
    VRt.Routing [RO]

    # Description  **VRt.Routing** is designed to find a route between locations and build time-distance matrices.  ## Features  * Getting the distance and time between two locations, including traffic jams * Finding a route between specified locations * Creating a time-distance matrix  ## Entity relationship diagram  ![erd](../uml/routing.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_routing import schemas  # noqa: F401


class GeoSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Geodata usage settings.

    """


    class MetaOapg:
        
        class properties:
            
            
            class geo_provider(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 256
                    min_length = 1
            toll_roads = schemas.BoolSchema
            ferry_crossing = schemas.BoolSchema
            traffic_jams = schemas.BoolSchema
            flight_distance = schemas.BoolSchema
            
            
            class restricted_zones(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 5
                    min_items = 0
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 256
                            min_length = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'restricted_zones':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "geo_provider": geo_provider,
                "toll_roads": toll_roads,
                "ferry_crossing": ferry_crossing,
                "traffic_jams": traffic_jams,
                "flight_distance": flight_distance,
                "restricted_zones": restricted_zones,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geo_provider"]) -> MetaOapg.properties.geo_provider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toll_roads"]) -> MetaOapg.properties.toll_roads: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ferry_crossing"]) -> MetaOapg.properties.ferry_crossing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traffic_jams"]) -> MetaOapg.properties.traffic_jams: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flight_distance"]) -> MetaOapg.properties.flight_distance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["restricted_zones"]) -> MetaOapg.properties.restricted_zones: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["geo_provider"], typing_extensions.Literal["toll_roads"], typing_extensions.Literal["ferry_crossing"], typing_extensions.Literal["traffic_jams"], typing_extensions.Literal["flight_distance"], typing_extensions.Literal["restricted_zones"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geo_provider"]) -> typing.Union[MetaOapg.properties.geo_provider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toll_roads"]) -> typing.Union[MetaOapg.properties.toll_roads, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ferry_crossing"]) -> typing.Union[MetaOapg.properties.ferry_crossing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traffic_jams"]) -> typing.Union[MetaOapg.properties.traffic_jams, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flight_distance"]) -> typing.Union[MetaOapg.properties.flight_distance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["restricted_zones"]) -> typing.Union[MetaOapg.properties.restricted_zones, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["geo_provider"], typing_extensions.Literal["toll_roads"], typing_extensions.Literal["ferry_crossing"], typing_extensions.Literal["traffic_jams"], typing_extensions.Literal["flight_distance"], typing_extensions.Literal["restricted_zones"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        geo_provider: typing.Union[MetaOapg.properties.geo_provider, str, schemas.Unset] = schemas.unset,
        toll_roads: typing.Union[MetaOapg.properties.toll_roads, bool, schemas.Unset] = schemas.unset,
        ferry_crossing: typing.Union[MetaOapg.properties.ferry_crossing, bool, schemas.Unset] = schemas.unset,
        traffic_jams: typing.Union[MetaOapg.properties.traffic_jams, bool, schemas.Unset] = schemas.unset,
        flight_distance: typing.Union[MetaOapg.properties.flight_distance, bool, schemas.Unset] = schemas.unset,
        restricted_zones: typing.Union[MetaOapg.properties.restricted_zones, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'GeoSettings':
        return super().__new__(
            cls,
            *args,
            geo_provider=geo_provider,
            toll_roads=toll_roads,
            ferry_crossing=ferry_crossing,
            traffic_jams=traffic_jams,
            flight_distance=flight_distance,
            restricted_zones=restricted_zones,
            _configuration=_configuration,
        )
