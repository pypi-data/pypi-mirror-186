# coding: utf-8

"""
    VRt.Routing [RO]

    # Description  **VRt.Routing** is designed to find a route between locations and build time-distance matrices.  ## Features  * Getting the distance and time between two locations, including traffic jams * Finding a route between specified locations * Creating a time-distance matrix  ## Entity relationship diagram  ![erd](../uml/routing.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_routing import schemas  # noqa: F401


class Tracedata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Data for request tracing.
    """


    class MetaOapg:
        required = {
            "server",
            "code",
            "service",
            "client",
            "time",
            "operation",
        }
        
        class properties:
            code = schemas.UUIDSchema
            
            
            class client(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 256
                    min_length = 2
                    regex=[{
                        'pattern': r'\w+',  # noqa: E501
                    }]
            
            
            class server(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 256
                    min_length = 2
                    regex=[{
                        'pattern': r'\w+',  # noqa: E501
                    }]
        
            @staticmethod
            def service() -> typing.Type['ServiceName']:
                return ServiceName
        
            @staticmethod
            def operation() -> typing.Type['OperationId']:
                return OperationId
            time = schemas.DateTimeSchema
            __annotations__ = {
                "code": code,
                "client": client,
                "server": server,
                "service": service,
                "operation": operation,
                "time": time,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    server: MetaOapg.properties.server
    code: MetaOapg.properties.code
    service: 'ServiceName'
    client: MetaOapg.properties.client
    time: MetaOapg.properties.time
    operation: 'OperationId'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["server"]) -> MetaOapg.properties.server: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service"]) -> 'ServiceName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client"]) -> MetaOapg.properties.client: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operation"]) -> 'OperationId': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["server"], typing_extensions.Literal["code"], typing_extensions.Literal["service"], typing_extensions.Literal["client"], typing_extensions.Literal["time"], typing_extensions.Literal["operation"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["server"]) -> MetaOapg.properties.server: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service"]) -> 'ServiceName': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client"]) -> MetaOapg.properties.client: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operation"]) -> 'OperationId': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["server"], typing_extensions.Literal["code"], typing_extensions.Literal["service"], typing_extensions.Literal["client"], typing_extensions.Literal["time"], typing_extensions.Literal["operation"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        server: typing.Union[MetaOapg.properties.server, str, ],
        code: typing.Union[MetaOapg.properties.code, str, uuid.UUID, ],
        service: 'ServiceName',
        client: typing.Union[MetaOapg.properties.client, str, ],
        time: typing.Union[MetaOapg.properties.time, str, datetime, ],
        operation: 'OperationId',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Tracedata':
        return super().__new__(
            cls,
            *args,
            server=server,
            code=code,
            service=service,
            client=client,
            time=time,
            operation=operation,
            _configuration=_configuration,
        )

from vrt_lss_routing.model.operation_id import OperationId
from vrt_lss_routing.model.service_name import ServiceName
