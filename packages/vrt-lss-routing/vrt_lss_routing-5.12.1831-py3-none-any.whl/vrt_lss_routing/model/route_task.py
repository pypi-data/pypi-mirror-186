# coding: utf-8

"""
    VRt.Routing [RO]

    # Description  **VRt.Routing** is designed to find a route between locations and build time-distance matrices.  ## Features  * Getting the distance and time between two locations, including traffic jams * Finding a route between specified locations * Creating a time-distance matrix  ## Entity relationship diagram  ![erd](../uml/routing.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_routing import schemas  # noqa: F401


class RouteTask(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Task for route planning. The departure time considers traffic jams.

    """


    class MetaOapg:
        required = {
            "waypoints",
        }
        
        class properties:
            
            
            class waypoints(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = False
                    max_items = 30001
                    min_items = 2
                    
                    @staticmethod
                    def items() -> typing.Type['Waypoint']:
                        return Waypoint
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Waypoint'], typing.List['Waypoint']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'waypoints':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Waypoint':
                    return super().__getitem__(i)
        
            @staticmethod
            def transport_type() -> typing.Type['TransportType']:
                return TransportType
        
            @staticmethod
            def geo_settings() -> typing.Type['GeoSettings']:
                return GeoSettings
            
            
            class departure_time(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'departure_time':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class result_timezone(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 12
                    inclusive_minimum = -12
            detail = schemas.BoolSchema
            full_segments = schemas.BoolSchema
            polyline = schemas.BoolSchema
            __annotations__ = {
                "waypoints": waypoints,
                "transport_type": transport_type,
                "geo_settings": geo_settings,
                "departure_time": departure_time,
                "result_timezone": result_timezone,
                "detail": detail,
                "full_segments": full_segments,
                "polyline": polyline,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    waypoints: MetaOapg.properties.waypoints
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waypoints"]) -> MetaOapg.properties.waypoints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transport_type"]) -> 'TransportType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geo_settings"]) -> 'GeoSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departure_time"]) -> MetaOapg.properties.departure_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result_timezone"]) -> MetaOapg.properties.result_timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_segments"]) -> MetaOapg.properties.full_segments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["polyline"]) -> MetaOapg.properties.polyline: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["waypoints"], typing_extensions.Literal["transport_type"], typing_extensions.Literal["geo_settings"], typing_extensions.Literal["departure_time"], typing_extensions.Literal["result_timezone"], typing_extensions.Literal["detail"], typing_extensions.Literal["full_segments"], typing_extensions.Literal["polyline"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waypoints"]) -> MetaOapg.properties.waypoints: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transport_type"]) -> typing.Union['TransportType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geo_settings"]) -> typing.Union['GeoSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departure_time"]) -> typing.Union[MetaOapg.properties.departure_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result_timezone"]) -> typing.Union[MetaOapg.properties.result_timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_segments"]) -> typing.Union[MetaOapg.properties.full_segments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["polyline"]) -> typing.Union[MetaOapg.properties.polyline, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["waypoints"], typing_extensions.Literal["transport_type"], typing_extensions.Literal["geo_settings"], typing_extensions.Literal["departure_time"], typing_extensions.Literal["result_timezone"], typing_extensions.Literal["detail"], typing_extensions.Literal["full_segments"], typing_extensions.Literal["polyline"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        waypoints: typing.Union[MetaOapg.properties.waypoints, list, tuple, ],
        transport_type: typing.Union['TransportType', schemas.Unset] = schemas.unset,
        geo_settings: typing.Union['GeoSettings', schemas.Unset] = schemas.unset,
        departure_time: typing.Union[MetaOapg.properties.departure_time, None, str, datetime, schemas.Unset] = schemas.unset,
        result_timezone: typing.Union[MetaOapg.properties.result_timezone, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        detail: typing.Union[MetaOapg.properties.detail, bool, schemas.Unset] = schemas.unset,
        full_segments: typing.Union[MetaOapg.properties.full_segments, bool, schemas.Unset] = schemas.unset,
        polyline: typing.Union[MetaOapg.properties.polyline, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RouteTask':
        return super().__new__(
            cls,
            *args,
            waypoints=waypoints,
            transport_type=transport_type,
            geo_settings=geo_settings,
            departure_time=departure_time,
            result_timezone=result_timezone,
            detail=detail,
            full_segments=full_segments,
            polyline=polyline,
            _configuration=_configuration,
        )

from vrt_lss_routing.model.geo_settings import GeoSettings
from vrt_lss_routing.model.transport_type import TransportType
from vrt_lss_routing.model.waypoint import Waypoint
