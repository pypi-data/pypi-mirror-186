# coding: utf-8

"""
    VRt.Routing [RO]

    # Description  **VRt.Routing** is designed to find a route between locations and build time-distance matrices.  ## Features  * Getting the distance and time between two locations, including traffic jams * Finding a route between specified locations * Creating a time-distance matrix  ## Entity relationship diagram  ![erd](../uml/routing.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_routing import schemas  # noqa: F401


class RouteStep(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Route segment step (a separate step for a separate type of transports).
    """


    class MetaOapg:
        required = {
            "transport_type",
            "polyline",
        }
        
        class properties:
        
            @staticmethod
            def transport_type() -> typing.Type['TransportType']:
                return TransportType
        
            @staticmethod
            def polyline() -> typing.Type['RoutePolyline']:
                return RoutePolyline
            __annotations__ = {
                "transport_type": transport_type,
                "polyline": polyline,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    transport_type: 'TransportType'
    polyline: 'RoutePolyline'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transport_type"]) -> 'TransportType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["polyline"]) -> 'RoutePolyline': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transport_type"], typing_extensions.Literal["polyline"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transport_type"]) -> 'TransportType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["polyline"]) -> 'RoutePolyline': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transport_type"], typing_extensions.Literal["polyline"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        transport_type: 'TransportType',
        polyline: 'RoutePolyline',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RouteStep':
        return super().__new__(
            cls,
            *args,
            transport_type=transport_type,
            polyline=polyline,
            _configuration=_configuration,
        )

from vrt_lss_routing.model.route_polyline import RoutePolyline
from vrt_lss_routing.model.transport_type import TransportType
