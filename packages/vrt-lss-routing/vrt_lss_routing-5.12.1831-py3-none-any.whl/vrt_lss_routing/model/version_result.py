# coding: utf-8

"""
    VRt.Routing [RO]

    # Description  **VRt.Routing** is designed to find a route between locations and build time-distance matrices.  ## Features  * Getting the distance and time between two locations, including traffic jams * Finding a route between specified locations * Creating a time-distance matrix  ## Entity relationship diagram  ![erd](../uml/routing.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_routing import schemas  # noqa: F401


class VersionResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Service version.
    """


    class MetaOapg:
        required = {
            "major",
            "minor",
            "build",
        }
        
        class properties:
            
            
            class major(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 100
                    inclusive_minimum = 1
            
            
            class minor(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 111
                    inclusive_minimum = 0
            
            
            class build(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 64
                    min_length = 1
            __annotations__ = {
                "major": major,
                "minor": minor,
                "build": build,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    major: MetaOapg.properties.major
    minor: MetaOapg.properties.minor
    build: MetaOapg.properties.build
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["major"]) -> MetaOapg.properties.major: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minor"]) -> MetaOapg.properties.minor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["build"]) -> MetaOapg.properties.build: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["major"], typing_extensions.Literal["minor"], typing_extensions.Literal["build"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["major"]) -> MetaOapg.properties.major: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minor"]) -> MetaOapg.properties.minor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["build"]) -> MetaOapg.properties.build: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["major"], typing_extensions.Literal["minor"], typing_extensions.Literal["build"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        major: typing.Union[MetaOapg.properties.major, decimal.Decimal, int, ],
        minor: typing.Union[MetaOapg.properties.minor, decimal.Decimal, int, ],
        build: typing.Union[MetaOapg.properties.build, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'VersionResult':
        return super().__new__(
            cls,
            *args,
            major=major,
            minor=minor,
            build=build,
            _configuration=_configuration,
        )
