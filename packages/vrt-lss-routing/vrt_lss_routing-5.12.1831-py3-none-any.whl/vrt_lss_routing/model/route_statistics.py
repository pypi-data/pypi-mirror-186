# coding: utf-8

"""
    VRt.Routing [RO]

    # Description  **VRt.Routing** is designed to find a route between locations and build time-distance matrices.  ## Features  * Getting the distance and time between two locations, including traffic jams * Finding a route between specified locations * Creating a time-distance matrix  ## Entity relationship diagram  ![erd](../uml/routing.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_routing import schemas  # noqa: F401


class RouteStatistics(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    General route statistics.

    """


    class MetaOapg:
        required = {
            "duration",
            "distance",
            "time_window",
            "stopping_time",
        }
        
        class properties:
            
            
            class distance(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 40000000
                    inclusive_minimum = 0
        
            @staticmethod
            def time_window() -> typing.Type['TimeWindow']:
                return TimeWindow
        
            @staticmethod
            def duration() -> typing.Type['TimeDuration']:
                return TimeDuration
        
            @staticmethod
            def stopping_time() -> typing.Type['TimeDuration']:
                return TimeDuration
            __annotations__ = {
                "distance": distance,
                "time_window": time_window,
                "duration": duration,
                "stopping_time": stopping_time,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    duration: 'TimeDuration'
    distance: MetaOapg.properties.distance
    time_window: 'TimeWindow'
    stopping_time: 'TimeDuration'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> 'TimeDuration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distance"]) -> MetaOapg.properties.distance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_window"]) -> 'TimeWindow': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopping_time"]) -> 'TimeDuration': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["duration"], typing_extensions.Literal["distance"], typing_extensions.Literal["time_window"], typing_extensions.Literal["stopping_time"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> 'TimeDuration': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distance"]) -> MetaOapg.properties.distance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_window"]) -> 'TimeWindow': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopping_time"]) -> 'TimeDuration': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["duration"], typing_extensions.Literal["distance"], typing_extensions.Literal["time_window"], typing_extensions.Literal["stopping_time"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        duration: 'TimeDuration',
        distance: typing.Union[MetaOapg.properties.distance, decimal.Decimal, int, ],
        time_window: 'TimeWindow',
        stopping_time: 'TimeDuration',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RouteStatistics':
        return super().__new__(
            cls,
            *args,
            duration=duration,
            distance=distance,
            time_window=time_window,
            stopping_time=stopping_time,
            _configuration=_configuration,
        )

from vrt_lss_routing.model.time_duration import TimeDuration
from vrt_lss_routing.model.time_window import TimeWindow
