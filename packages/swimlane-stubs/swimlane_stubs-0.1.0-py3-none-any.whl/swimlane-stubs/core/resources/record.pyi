from typing import Any, Dict, Tuple

from _typeshed import Incomplete

from swimlane.core.resources.base import APIResource as APIResource
from swimlane.core.resources.usergroup import Group as Group
from swimlane.core.resources.usergroup import User as User
from swimlane.core.resources.usergroup import UserGroup as UserGroup
from swimlane.exceptions import SwimlaneException as SwimlaneException
from swimlane.exceptions import UnknownField as UnknownField
from swimlane.exceptions import ValidationError as ValidationError

class Record(APIResource):
    is_new: Incomplete
    id: Incomplete
    tracking_id: Incomplete
    created: Incomplete
    modified: Incomplete
    locked: bool
    locking_user: Incomplete
    locked_date: Incomplete
    revisions: Incomplete
    _raw: Dict[str, Any]

    def __init__(self, app, raw) -> None: ...
    @property
    def app(self): ...
    def __setitem__(self, field_name, value) -> None: ...
    def __getitem__(self, field_name): ...
    def __delitem__(self, field_name) -> None: ...
    def __iter__(self): ...
    def __hash__(self): ...
    def __lt__(self, other): ...
    def get_cache_index_keys(self): ...
    def get_field(self, field_name): ...
    def validate(self) -> None: ...
    def save(self) -> None: ...
    def patch(self) -> None: ...
    def delete(self) -> None: ...
    def for_json(self, *field_names): ...
    @property
    def restrictions(self): ...
    def add_restriction(self, *usergroups: Group) -> None: ...
    def remove_restriction(self, *usergroups) -> None: ...
    def lock(self) -> None: ...
    def unlock(self) -> None: ...
    def execute_task(self, task_name, timeout=...) -> None: ...

def record_factory(app, fields: Incomplete | None = ...): ...
