# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import market_pb2 as market__pb2


class OrderMasterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """


class OrderMasterServicer(object):
    """Missing associated documentation comment in .proto file."""


def add_OrderMasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ims.market.OrderMaster', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OrderMaster(object):
    """Missing associated documentation comment in .proto file."""


class OrderMinionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.production_assign = channel.unary_unary(
                '/ims.market.OrderMinion/production_assign',
                request_serializer=market__pb2.Production.SerializeToString,
                response_deserializer=market__pb2.Production.FromString,
                )
        self.production_cancel = channel.unary_unary(
                '/ims.market.OrderMinion/production_cancel',
                request_serializer=market__pb2.Cancel.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.production_offer = channel.unary_unary(
                '/ims.market.OrderMinion/production_offer',
                request_serializer=market__pb2.Production.SerializeToString,
                response_deserializer=market__pb2.Production.FromString,
                )
        self.transport_assign = channel.unary_unary(
                '/ims.market.OrderMinion/transport_assign',
                request_serializer=market__pb2.Transport.SerializeToString,
                response_deserializer=market__pb2.Transport.FromString,
                )
        self.transport_cancel = channel.unary_unary(
                '/ims.market.OrderMinion/transport_cancel',
                request_serializer=market__pb2.Cancel.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.transport_offer = channel.unary_unary(
                '/ims.market.OrderMinion/transport_offer',
                request_serializer=market__pb2.Transport.SerializeToString,
                response_deserializer=market__pb2.Transport.FromString,
                )


class OrderMinionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def production_assign(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def production_cancel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def production_offer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def transport_assign(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def transport_cancel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def transport_offer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderMinionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'production_assign': grpc.unary_unary_rpc_method_handler(
                    servicer.production_assign,
                    request_deserializer=market__pb2.Production.FromString,
                    response_serializer=market__pb2.Production.SerializeToString,
            ),
            'production_cancel': grpc.unary_unary_rpc_method_handler(
                    servicer.production_cancel,
                    request_deserializer=market__pb2.Cancel.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'production_offer': grpc.unary_unary_rpc_method_handler(
                    servicer.production_offer,
                    request_deserializer=market__pb2.Production.FromString,
                    response_serializer=market__pb2.Production.SerializeToString,
            ),
            'transport_assign': grpc.unary_unary_rpc_method_handler(
                    servicer.transport_assign,
                    request_deserializer=market__pb2.Transport.FromString,
                    response_serializer=market__pb2.Transport.SerializeToString,
            ),
            'transport_cancel': grpc.unary_unary_rpc_method_handler(
                    servicer.transport_cancel,
                    request_deserializer=market__pb2.Cancel.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'transport_offer': grpc.unary_unary_rpc_method_handler(
                    servicer.transport_offer,
                    request_deserializer=market__pb2.Transport.FromString,
                    response_serializer=market__pb2.Transport.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ims.market.OrderMinion', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OrderMinion(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def production_assign(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ims.market.OrderMinion/production_assign',
            market__pb2.Production.SerializeToString,
            market__pb2.Production.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def production_cancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ims.market.OrderMinion/production_cancel',
            market__pb2.Cancel.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def production_offer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ims.market.OrderMinion/production_offer',
            market__pb2.Production.SerializeToString,
            market__pb2.Production.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def transport_assign(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ims.market.OrderMinion/transport_assign',
            market__pb2.Transport.SerializeToString,
            market__pb2.Transport.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def transport_cancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ims.market.OrderMinion/transport_cancel',
            market__pb2.Cancel.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def transport_offer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ims.market.OrderMinion/transport_offer',
            market__pb2.Transport.SerializeToString,
            market__pb2.Transport.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
