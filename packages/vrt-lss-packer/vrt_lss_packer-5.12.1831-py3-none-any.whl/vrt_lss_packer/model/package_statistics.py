# coding: utf-8

"""
    VRt.Packer [PC]

    Veeroute Packer API.  # Description  The service is designed to calculate the placement of goods inside given packages.  ## Types of packages  ### Pallet  ![pallet](../images/packer_pallet.svg)  *Mono-pallet*  If the pallet is fully equipped with the same product, then such a pallet is called **mono-pallet**, such a pallet has the following loading rules:  1. The maximum allowable height of the pallet with the goods laid on it is taken into account. 1. The maximum allowable weight of the loaded pallet is taken into account. 1. Goods packages can only be stacked parallel to the walls of the pallet. 1. It is allowed to rotate packages around the vertical Z-axis and only at a right angle. 1. In order to equalize the height between the positions (to place another pallet on top), empty spaces can be added to the stacking by layers.  *Zone tray*  After the formation of mono-pallets, the remaining part of the goods of the same article is placed on the next pallet, which is divided into zones by means of a cardboard partition in such a way that only one item of goods is placed in each zone, while the zones have the following restrictions:  1. The zones are rectangular. 1. The ratio between the sides of the zones can be any. 1. One of the sides of any zone is always in contact with the edge of the pallet. 1. Permissible number of zones on a pallet: from 2 to 6. 1. Each zone is filled according to the rules for filling a mono-pallet. 1. The stacking height of all goods does not exceed 50 mm, so that another pallet can be placed on top of such a pallet. 1. It is allowed to form pallets with different stacking heights for different positions (height difference is more than 50 mm), if these are the top pallets in the stack.  ### Mixbox  ![mixbox](../images/packer_mixbox.svg)  If the above steps fail to place the item in this way, so that the pallet is of the required height or weight, mixboxes are used:  1. Mixbox can only be placed in one layer. 1. Different goods can be placed in one mixbox, in this case it is divided by partitions similarly to a pallet (the only difference is that the height of the packed goods is not aligned). 1. Mixboxes can be mixed with items on the same pallet. 1. One product can be packed in different mixboxes.  ### Slot  ![slot](../images/packer_slot.svg)  The loaded pallets are stacked on top of each other, the slot is where the stack of pallets is placed. The slot has no physical body - so the dimensions of the `body` of the slot are zero.  ## Coordinate system  ![coordinates](../images/packer_coordinates.svg)  To indicate the location of packages and goods, a local coordinate system is used, in which the coordinates of a particular object are indicated relative to the near left lower corner of the parent object, while:  * Horizontal plane - axes **X**, **Y** * Vertical - **Z** axis  The ratio of the axes of goods and packages:  * Width - **X** * Length - **Y** * Height - **Z**  ## Entity diagram  ![erd](../uml/packer.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_packer import schemas  # noqa: F401


class PackageStatistics(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Statistics for package.
    """


    class MetaOapg:
        required = {
            "package_key",
            "utilization_by_mass",
            "max_container_volume",
            "utilization_by_volume",
            "count",
            "package_type",
            "max_container_mass",
        }
        
        class properties:
            
            
            class package_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
        
            @staticmethod
            def package_type() -> typing.Type['PackageType']:
                return PackageType
            
            
            class count(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 700001
                    inclusive_minimum = 0
            
            
            class max_container_mass(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class max_container_volume(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class utilization_by_mass(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1
                    inclusive_minimum = 0
            
            
            class utilization_by_volume(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 1
                    inclusive_minimum = 0
            __annotations__ = {
                "package_key": package_key,
                "package_type": package_type,
                "count": count,
                "max_container_mass": max_container_mass,
                "max_container_volume": max_container_volume,
                "utilization_by_mass": utilization_by_mass,
                "utilization_by_volume": utilization_by_volume,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    package_key: MetaOapg.properties.package_key
    utilization_by_mass: MetaOapg.properties.utilization_by_mass
    max_container_volume: MetaOapg.properties.max_container_volume
    utilization_by_volume: MetaOapg.properties.utilization_by_volume
    count: MetaOapg.properties.count
    package_type: 'PackageType'
    max_container_mass: MetaOapg.properties.max_container_mass
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["package_key"]) -> MetaOapg.properties.package_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utilization_by_mass"]) -> MetaOapg.properties.utilization_by_mass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_container_volume"]) -> MetaOapg.properties.max_container_volume: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utilization_by_volume"]) -> MetaOapg.properties.utilization_by_volume: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["package_type"]) -> 'PackageType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_container_mass"]) -> MetaOapg.properties.max_container_mass: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["package_key"], typing_extensions.Literal["utilization_by_mass"], typing_extensions.Literal["max_container_volume"], typing_extensions.Literal["utilization_by_volume"], typing_extensions.Literal["count"], typing_extensions.Literal["package_type"], typing_extensions.Literal["max_container_mass"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["package_key"]) -> MetaOapg.properties.package_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utilization_by_mass"]) -> MetaOapg.properties.utilization_by_mass: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_container_volume"]) -> MetaOapg.properties.max_container_volume: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utilization_by_volume"]) -> MetaOapg.properties.utilization_by_volume: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["package_type"]) -> 'PackageType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_container_mass"]) -> MetaOapg.properties.max_container_mass: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["package_key"], typing_extensions.Literal["utilization_by_mass"], typing_extensions.Literal["max_container_volume"], typing_extensions.Literal["utilization_by_volume"], typing_extensions.Literal["count"], typing_extensions.Literal["package_type"], typing_extensions.Literal["max_container_mass"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        package_key: typing.Union[MetaOapg.properties.package_key, str, ],
        utilization_by_mass: typing.Union[MetaOapg.properties.utilization_by_mass, decimal.Decimal, int, float, ],
        max_container_volume: typing.Union[MetaOapg.properties.max_container_volume, decimal.Decimal, int, float, ],
        utilization_by_volume: typing.Union[MetaOapg.properties.utilization_by_volume, decimal.Decimal, int, float, ],
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, ],
        package_type: 'PackageType',
        max_container_mass: typing.Union[MetaOapg.properties.max_container_mass, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PackageStatistics':
        return super().__new__(
            cls,
            *args,
            package_key=package_key,
            utilization_by_mass=utilization_by_mass,
            max_container_volume=max_container_volume,
            utilization_by_volume=utilization_by_volume,
            count=count,
            package_type=package_type,
            max_container_mass=max_container_mass,
            _configuration=_configuration,
        )

from vrt_lss_packer.model.package_type import PackageType
