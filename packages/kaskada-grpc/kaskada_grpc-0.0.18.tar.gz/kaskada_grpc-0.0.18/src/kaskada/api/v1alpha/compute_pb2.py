# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: kaskada/api/v1alpha/compute.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from google.protobuf import duration_pb2 as google_dot_protobuf_dot_duration__pb2
from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2
from kaskada.api.v1alpha import shared_pb2 as kaskada_dot_api_dot_v1alpha_dot_shared__pb2
from kaskada.api.v1alpha import query_pb2 as kaskada_dot_api_dot_v1alpha_dot_query__pb2
from kaskada.errdetails.v1alpha import fenl_diagnostics_pb2 as kaskada_dot_errdetails_dot_v1alpha_dot_fenl__diagnostics__pb2
from kaskada.fenl.v1alpha import schema_pb2 as kaskada_dot_fenl_dot_v1alpha_dot_schema__pb2
from kaskada.prepare.v1alpha import slice_pb2 as kaskada_dot_prepare_dot_v1alpha_dot_slice__pb2
from validate import validate_pb2 as validate_dot_validate__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n!kaskada/api/v1alpha/compute.proto\x12\x13kaskada.api.v1alpha\x1a\x1cgoogle/api/annotations.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a kaskada/api/v1alpha/shared.proto\x1a\x1fkaskada/api/v1alpha/query.proto\x1a\x31kaskada/errdetails/v1alpha/fenl_diagnostics.proto\x1a!kaskada/fenl/v1alpha/schema.proto\x1a#kaskada/prepare/v1alpha/slice.proto\x1a\x17validate/validate.proto\"\xd4\x02\n\tWithTable\x12\x1b\n\x04name\x18\x01 \x01(\tB\x07\xfa\x42\x04r\x02\x10\x01R\x04name\x12\x1f\n\x06\x65ntity\x18\x02 \x01(\tB\x07\xfa\x42\x04r\x02\x10\x01R\x06\x65ntity\x12\x1b\n\x04time\x18\x03 \x01(\tB\x07\xfa\x42\x04r\x02\x10\x01R\x04time\x12%\n\rparquet_bytes\x18\x04 \x01(\x0cH\x00R\x0cparquetBytes\x12#\n\x0cparquet_path\x18\x05 \x01(\tH\x00R\x0bparquetPath\x12L\n\x0bjson_values\x18\x06 \x01(\x0b\x32).kaskada.api.v1alpha.WithTable.JSONValuesH\x00R\njsonValues\x1a\x45\n\nJSONValues\x12\x1f\n\x06schema\x18\x01 \x01(\tB\x07\xfa\x42\x04r\x02\x10\x01R\x06schema\x12\x16\n\x06values\x18\x02 \x03(\tR\x06valuesB\x0b\n\x04\x64\x61ta\x12\x03\xf8\x42\x01\"P\n\x08WithView\x12\x1b\n\x04name\x18\x01 \x01(\tB\x07\xfa\x42\x04r\x02\x10\x01R\x04name\x12\'\n\nexpression\x18\x02 \x01(\tB\x07\xfa\x42\x04r\x02\x10\x01R\nexpression\"@\n\tWithViews\x12\x33\n\x05views\x18\x01 \x03(\x0b\x32\x1d.kaskada.api.v1alpha.WithViewR\x05views\"H\n\x0e\x41nalyzeRequest\x12\x1d\n\x05query\x18\x01 \x01(\tB\x07\xfa\x42\x04r\x02\x10\x01R\x05query\x12\x17\n\x07is_view\x18\x02 \x01(\x08R\x06isView\"\xdb\x01\n\x0f\x41nalyzeResponse\x12?\n\x0bresult_type\x18\x01 \x01(\x0b\x32\x1e.kaskada.fenl.v1alpha.DataTypeR\nresultType\x12L\n\x0frequest_details\x18\x02 \x01(\x0b\x32#.kaskada.api.v1alpha.RequestDetailsR\x0erequestDetails\x12\x39\n\x08\x61nalysis\x18\x03 \x01(\x0b\x32\x1d.kaskada.api.v1alpha.AnalysisR\x08\x61nalysis\"\xbc\n\n\x0cQueryRequest\x12\x1d\n\x05query\x18\x01 \x01(\tB\x07\xfa\x42\x04r\x02\x10\x01R\x05query\x12?\n\x0bwith_tables\x18\x02 \x03(\x0b\x32\x1e.kaskada.api.v1alpha.WithTableR\nwithTables\x12<\n\nwith_views\x18\x03 \x03(\x0b\x32\x1d.kaskada.api.v1alpha.WithViewR\twithViews\x12J\n\x0bjson_values\x18\x04 \x01(\x0b\x32\'.kaskada.api.v1alpha.QueryRequest.EmptyH\x00R\njsonValues\x12\x43\n\x07parquet\x18\x05 \x01(\x0b\x32\'.kaskada.api.v1alpha.QueryRequest.EmptyH\x00R\x07parquet\x12T\n\nredis_bulk\x18\x06 \x01(\x0b\x32\x33.kaskada.api.v1alpha.QueryRequest.RedisBulkResponseH\x00R\tredisBulk\x12G\n\tredis_a_i\x18\x08 \x01(\x0b\x32).kaskada.api.v1alpha.QueryRequest.RedisAIH\x00R\x07redisAI\x12\"\n\rdata_token_id\x18\x07 \x01(\tR\x0b\x64\x61taTokenId\x12Y\n\x0fresult_behavior\x18\t \x01(\x0e\x32\x30.kaskada.api.v1alpha.QueryRequest.ResultBehaviorR\x0eresultBehavior\x12@\n\x06limits\x18\n \x01(\x0b\x32(.kaskada.api.v1alpha.QueryRequest.LimitsR\x06limits\x12;\n\x05slice\x18\x0c \x01(\x0b\x32%.kaskada.prepare.v1alpha.SliceRequestR\x05slice\x12\x17\n\x07\x64ry_run\x18\r \x01(\x08R\x06\x64ryRun\x12H\n\x12\x63hanged_since_time\x18\x0e \x01(\x0b\x32\x1a.google.protobuf.TimestampR\x10\x63hangedSinceTime\x12\x33\n\x15\x65xperimental_features\x18\x0f \x01(\x08R\x14\x65xperimentalFeatures\x12\x46\n\x11\x66inal_result_time\x18\x10 \x01(\x0b\x32\x1a.google.protobuf.TimestampR\x0f\x66inalResultTime\x1a\x07\n\x05\x45mpty\x1a+\n\x06Limits\x12!\n\x0cpreview_rows\x18\x01 \x01(\x03R\x0bpreviewRows\x1a)\n\x11RedisBulkResponse\x12\x14\n\x05shape\x18\x01 \x03(\x05R\x05shape\x1a\x62\n\x07RedisAI\x12\x19\n\x02\x64\x62\x18\x01 \x01(\x05\x42\t\xfa\x42\x06\x1a\x04\x18\x0f(\x00R\x02\x64\x62\x12\x1b\n\x04host\x18\x02 \x01(\tB\x07\xfa\x42\x04r\x02\x10\x01R\x04host\x12\x1f\n\x04port\x18\x03 \x01(\x05\x42\x0b\xfa\x42\x08\x1a\x06\x18\xff\xff\x03 \x00R\x04port\"\xa0\x01\n\x0eResultBehavior\x12\x1f\n\x1bRESULT_BEHAVIOR_UNSPECIFIED\x10\x00\x12\x1f\n\x1bRESULT_BEHAVIOR_ALL_RESULTS\x10\x01\x12!\n\x1dRESULT_BEHAVIOR_FINAL_RESULTS\x10\x02\x12)\n%RESULT_BEHAVIOR_FINAL_RESULTS_AT_TIME\x10\x03\x42\x12\n\x0bresponse_as\x12\x03\xf8\x42\x01J\x04\x08\x0b\x10\x0c\"\x81\x06\n\rQueryResponse\x12P\n\x0bjson_values\x18\x02 \x01(\x0b\x32-.kaskada.api.v1alpha.QueryResponse.JSONValuesH\x00R\njsonValues\x12\x46\n\x07parquet\x18\x03 \x01(\x0b\x32*.kaskada.api.v1alpha.QueryResponse.ParquetH\x00R\x07parquet\x12M\n\nredis_bulk\x18\x04 \x01(\x0b\x32,.kaskada.api.v1alpha.QueryResponse.RedisBulkH\x00R\tredisBulk\x12H\n\tredis_a_i\x18\x06 \x01(\x0b\x32*.kaskada.api.v1alpha.QueryResponse.RedisAIH\x00R\x07redisAI\x12\"\n\rdata_token_id\x18\x05 \x01(\tR\x0b\x64\x61taTokenId\x12L\n\x0frequest_details\x18\x07 \x01(\x0b\x32#.kaskada.api.v1alpha.RequestDetailsR\x0erequestDetails\x12\x39\n\x08\x61nalysis\x18\t \x01(\x0b\x32\x1d.kaskada.api.v1alpha.AnalysisR\x08\x61nalysis\x12\x34\n\x06schema\x18\n \x01(\x0b\x32\x1c.kaskada.fenl.v1alpha.SchemaR\x06schema\x12;\n\x05slice\x18\x0b \x01(\x0b\x32%.kaskada.prepare.v1alpha.SliceRequestR\x05slice\x12\x19\n\x08query_id\x18\x0c \x01(\tR\x07queryId\x1a&\n\nJSONValues\x12\x18\n\x07results\x18\x01 \x03(\tR\x07results\x1a\x1d\n\x07Parquet\x12\x12\n\x04path\x18\x01 \x01(\tR\x04path\x1a\x1f\n\tRedisBulk\x12\x12\n\x04path\x18\x01 \x01(\tR\x04path\x1a\t\n\x07RedisAIB\t\n\x07resultsJ\x04\x08\x08\x10\t\"\xf7\t\n\x12StreamQueryRequest\x12\x1d\n\x05query\x18\x01 \x01(\tB\x07\xfa\x42\x04r\x02\x10\x01R\x05query\x12<\n\nwith_views\x18\x02 \x03(\x0b\x32\x1d.kaskada.api.v1alpha.WithViewR\twithViews\x12K\n\x07parquet\x18\x03 \x01(\x0b\x32/.kaskada.api.v1alpha.StreamQueryRequest.ParquetH\x00R\x07parquet\x12R\n\nredis_bulk\x18\x04 \x01(\x0b\x32\x31.kaskada.api.v1alpha.StreamQueryRequest.RedisBulkH\x00R\tredisBulk\x12M\n\tredis_a_i\x18\x05 \x01(\x0b\x32/.kaskada.api.v1alpha.StreamQueryRequest.RedisAIH\x00R\x07redisAI\x12\"\n\rdata_token_id\x18\x06 \x01(\tR\x0b\x64\x61taTokenId\x12_\n\x0fresult_behavior\x18\x07 \x01(\x0e\x32\x36.kaskada.api.v1alpha.StreamQueryRequest.ResultBehaviorR\x0eresultBehavior\x12\x46\n\x06limits\x18\x08 \x01(\x0b\x32..kaskada.api.v1alpha.StreamQueryRequest.LimitsR\x06limits\x12J\n\rslice_request\x18\t \x01(\x0b\x32%.kaskada.prepare.v1alpha.SliceRequestR\x0csliceRequest\x12\x17\n\x07\x64ry_run\x18\n \x01(\x08R\x06\x64ryRun\x12\x33\n\x15\x65xperimental_features\x18\x0b \x01(\x08R\x14\x65xperimentalFeatures\x12%\n\x0estream_metrics\x18\x0c \x01(\x08R\rstreamMetrics\x12H\n\x12\x63hanged_since_time\x18\r \x01(\x0b\x32\x1a.google.protobuf.TimestampR\x10\x63hangedSinceTime\x12\x46\n\x11\x66inal_result_time\x18\x0e \x01(\x0b\x32\x1a.google.protobuf.TimestampR\x0f\x66inalResultTime\x1a+\n\x06Limits\x12!\n\x0cpreview_rows\x18\x01 \x01(\x03R\x0bpreviewRows\x1a\t\n\x07Parquet\x1a!\n\tRedisBulk\x12\x14\n\x05shape\x18\x01 \x03(\x05R\x05shape\x1a\x62\n\x07RedisAI\x12\x19\n\x02\x64\x62\x18\x01 \x01(\x05\x42\t\xfa\x42\x06\x1a\x04\x18\x0f(\x00R\x02\x64\x62\x12\x1b\n\x04host\x18\x02 \x01(\tB\x07\xfa\x42\x04r\x02\x10\x01R\x04host\x12\x1f\n\x04port\x18\x03 \x01(\x05\x42\x0b\xfa\x42\x08\x1a\x06\x18\xff\xff\x03 \x00R\x04port\"\xa0\x01\n\x0eResultBehavior\x12\x1f\n\x1bRESULT_BEHAVIOR_UNSPECIFIED\x10\x00\x12\x1f\n\x1bRESULT_BEHAVIOR_ALL_RESULTS\x10\x01\x12!\n\x1dRESULT_BEHAVIOR_FINAL_RESULTS\x10\x02\x12)\n%RESULT_BEHAVIOR_FINAL_RESULTS_AT_TIME\x10\x03\x42\x12\n\x0bresponse_as\x12\x03\xf8\x42\x01\"\xc7\n\n\x13StreamQueryResponse\x12\x44\n\x05state\x18\x01 \x01(\x0e\x32..kaskada.api.v1alpha.StreamQueryResponse.StateR\x05state\x12G\n\x06\x63onfig\x18\x02 \x01(\x0b\x32/.kaskada.api.v1alpha.StreamQueryResponse.ConfigR\x06\x63onfig\x12M\n\x08\x61nalysis\x18\x03 \x01(\x0b\x32\x31.kaskada.api.v1alpha.StreamQueryResponse.AnalysisR\x08\x61nalysis\x12V\n\x10\x66\x65nl_diagnostics\x18\x04 \x01(\x0b\x32+.kaskada.errdetails.v1alpha.FenlDiagnosticsR\x0f\x66\x65nlDiagnostics\x12J\n\x07metrics\x18\x05 \x01(\x0b\x32\x30.kaskada.api.v1alpha.StreamQueryResponse.MetricsR\x07metrics\x12L\n\x07parquet\x18\x06 \x01(\x0b\x32\x30.kaskada.api.v1alpha.StreamQueryResponse.ParquetH\x00R\x07parquet\x12S\n\nredis_bulk\x18\x07 \x01(\x0b\x32\x32.kaskada.api.v1alpha.StreamQueryResponse.RedisBulkH\x00R\tredisBulk\x12N\n\tredis_a_i\x18\x08 \x01(\x0b\x32\x30.kaskada.api.v1alpha.StreamQueryResponse.RedisAIH\x00R\x07redisAI\x12L\n\x0frequest_details\x18\t \x01(\x0b\x32#.kaskada.api.v1alpha.RequestDetailsR\x0erequestDetails\x1a\x61\n\x08\x41nalysis\x12\x1f\n\x0b\x63\x61n_execute\x18\x01 \x01(\x08R\ncanExecute\x12\x34\n\x06schema\x18\x02 \x01(\x0b\x32\x1c.kaskada.fenl.v1alpha.SchemaR\x06schema\x1ax\n\x06\x43onfig\x12\"\n\rdata_token_id\x18\x01 \x01(\tR\x0b\x64\x61taTokenId\x12J\n\rslice_request\x18\x02 \x01(\x0b\x32%.kaskada.prepare.v1alpha.SliceRequestR\x0csliceRequest\x1a\xb0\x01\n\x07Metrics\x12@\n\x0etime_preparing\x18\x01 \x01(\x0b\x32\x19.google.protobuf.DurationR\rtimePreparing\x12@\n\x0etime_computing\x18\x02 \x01(\x0b\x32\x19.google.protobuf.DurationR\rtimeComputing\x12!\n\x0coutput_files\x18\x03 \x01(\x03R\x0boutputFiles\x1a\x1f\n\x07Parquet\x12\x14\n\x05paths\x18\x01 \x03(\tR\x05paths\x1a!\n\tRedisBulk\x12\x14\n\x05paths\x18\x01 \x03(\tR\x05paths\x1a\t\n\x07RedisAI\"\x82\x01\n\x05State\x12\x15\n\x11STATE_UNSPECIFIED\x10\x00\x12\x12\n\x0eSTATE_ANALYSIS\x10\x01\x12\x13\n\x0fSTATE_PREPARING\x10\x02\x12\x13\n\x0fSTATE_COMPUTING\x10\x03\x12\x11\n\rSTATE_SUCCESS\x10\x04\x12\x11\n\rSTATE_FAILURE\x10\x05\x42\t\n\x07results\"\x80\x0c\n\x15StreamQueryV2Response\x12\x46\n\x05state\x18\x01 \x01(\x0e\x32\x30.kaskada.api.v1alpha.StreamQueryV2Response.StateR\x05state\x12I\n\x06\x63onfig\x18\x02 \x01(\x0b\x32\x31.kaskada.api.v1alpha.StreamQueryV2Response.ConfigR\x06\x63onfig\x12O\n\x08\x61nalysis\x18\x03 \x01(\x0b\x32\x33.kaskada.api.v1alpha.StreamQueryV2Response.AnalysisR\x08\x61nalysis\x12V\n\x10\x66\x65nl_diagnostics\x18\x04 \x01(\x0b\x32+.kaskada.errdetails.v1alpha.FenlDiagnosticsR\x0f\x66\x65nlDiagnostics\x12L\n\x07metrics\x18\x05 \x01(\x0b\x32\x32.kaskada.api.v1alpha.StreamQueryV2Response.MetricsR\x07metrics\x12N\n\x07parquet\x18\x06 \x01(\x0b\x32\x32.kaskada.api.v1alpha.StreamQueryV2Response.ParquetH\x00R\x07parquet\x12U\n\nredis_bulk\x18\x07 \x01(\x0b\x32\x34.kaskada.api.v1alpha.StreamQueryV2Response.RedisBulkH\x00R\tredisBulk\x12P\n\tredis_a_i\x18\x08 \x01(\x0b\x32\x32.kaskada.api.v1alpha.StreamQueryV2Response.RedisAIH\x00R\x07redisAI\x12L\n\x0frequest_details\x18\t \x01(\x0b\x32#.kaskada.api.v1alpha.RequestDetailsR\x0erequestDetails\x12\x19\n\x08query_id\x18\n \x01(\tR\x07queryId\x1a\x61\n\x08\x41nalysis\x12\x1f\n\x0b\x63\x61n_execute\x18\x01 \x01(\x08R\ncanExecute\x12\x34\n\x06schema\x18\x02 \x01(\x0b\x32\x1c.kaskada.fenl.v1alpha.SchemaR\x06schema\x1ax\n\x06\x43onfig\x12\"\n\rdata_token_id\x18\x01 \x01(\tR\x0b\x64\x61taTokenId\x12J\n\rslice_request\x18\x02 \x01(\x0b\x32%.kaskada.prepare.v1alpha.SliceRequestR\x0csliceRequest\x1a\xbe\x02\n\x07Metrics\x12@\n\x0etime_preparing\x18\x01 \x01(\x0b\x32\x19.google.protobuf.DurationR\rtimePreparing\x12@\n\x0etime_computing\x18\x02 \x01(\x0b\x32\x19.google.protobuf.DurationR\rtimeComputing\x12!\n\x0coutput_files\x18\x03 \x01(\x03R\x0boutputFiles\x12(\n\x10total_input_rows\x18\x04 \x01(\x03R\x0etotalInputRows\x12\x30\n\x14processed_input_rows\x18\x05 \x01(\x03R\x12processedInputRows\x12\x30\n\x14produced_output_rows\x18\x06 \x01(\x03R\x12producedOutputRows\x1a\x1f\n\x07Parquet\x12\x14\n\x05paths\x18\x01 \x03(\tR\x05paths\x1a!\n\tRedisBulk\x12\x14\n\x05paths\x18\x01 \x03(\tR\x05paths\x1a\t\n\x07RedisAI\"\x82\x01\n\x05State\x12\x15\n\x11STATE_UNSPECIFIED\x10\x00\x12\x12\n\x0eSTATE_ANALYSIS\x10\x01\x12\x13\n\x0fSTATE_PREPARING\x10\x02\x12\x13\n\x0fSTATE_COMPUTING\x10\x03\x12\x11\n\rSTATE_SUCCESS\x10\x04\x12\x11\n\rSTATE_FAILURE\x10\x05\x42\t\n\x07results\"\x83\x01\n\x0cQueryOptions\x12\x17\n\x07\x64ry_run\x18\x01 \x01(\x08R\x06\x64ryRun\x12\x33\n\x15\x65xperimental_features\x18\x02 \x01(\x08R\x14\x65xperimentalFeatures\x12%\n\x0estream_metrics\x18\x03 \x01(\x08R\rstreamMetrics\"\x9f\x01\n\x14StreamQueryV2Request\x12?\n\rquery_request\x18\x01 \x01(\x0b\x32\x1a.kaskada.api.v1alpha.QueryR\x0cqueryRequest\x12\x46\n\rquery_options\x18\x02 \x01(\x0b\x32!.kaskada.api.v1alpha.QueryOptionsR\x0cqueryOptions2\xcc\x03\n\x0e\x43omputeService\x12y\n\x07\x41nalyze\x12#.kaskada.api.v1alpha.AnalyzeRequest\x1a$.kaskada.api.v1alpha.AnalyzeResponse\"#\x82\xd3\xe4\x93\x02\x1d:\x01*\"\x18/v1alpha/compute/analyze\x12q\n\x05Query\x12!.kaskada.api.v1alpha.QueryRequest\x1a\".kaskada.api.v1alpha.QueryResponse\"!\x82\xd3\xe4\x93\x02\x1b:\x01*\"\x16/v1alpha/compute/query\x12\x62\n\x0bStreamQuery\x12\'.kaskada.api.v1alpha.StreamQueryRequest\x1a(.kaskada.api.v1alpha.StreamQueryResponse0\x01\x12h\n\rStreamQueryV2\x12).kaskada.api.v1alpha.StreamQueryV2Request\x1a*.kaskada.api.v1alpha.StreamQueryV2Response0\x01\x42\xdc\x01\n\x17\x63om.kaskada.api.v1alphaB\x0c\x43omputeProtoP\x01ZEgitlab.com/kaskada/kaskada/wren/gen/go/kaskada/api/v1alpha;apiv1alpha\xa2\x02\x03KAX\xaa\x02\x13Kaskada.Api.V1alpha\xca\x02\x13Kaskada\\Api\\V1alpha\xe2\x02\x1fKaskada\\Api\\V1alpha\\GPBMetadata\xea\x02\x15Kaskada::Api::V1alphab\x06proto3')



_WITHTABLE = DESCRIPTOR.message_types_by_name['WithTable']
_WITHTABLE_JSONVALUES = _WITHTABLE.nested_types_by_name['JSONValues']
_WITHVIEW = DESCRIPTOR.message_types_by_name['WithView']
_WITHVIEWS = DESCRIPTOR.message_types_by_name['WithViews']
_ANALYZEREQUEST = DESCRIPTOR.message_types_by_name['AnalyzeRequest']
_ANALYZERESPONSE = DESCRIPTOR.message_types_by_name['AnalyzeResponse']
_QUERYREQUEST = DESCRIPTOR.message_types_by_name['QueryRequest']
_QUERYREQUEST_EMPTY = _QUERYREQUEST.nested_types_by_name['Empty']
_QUERYREQUEST_LIMITS = _QUERYREQUEST.nested_types_by_name['Limits']
_QUERYREQUEST_REDISBULKRESPONSE = _QUERYREQUEST.nested_types_by_name['RedisBulkResponse']
_QUERYREQUEST_REDISAI = _QUERYREQUEST.nested_types_by_name['RedisAI']
_QUERYRESPONSE = DESCRIPTOR.message_types_by_name['QueryResponse']
_QUERYRESPONSE_JSONVALUES = _QUERYRESPONSE.nested_types_by_name['JSONValues']
_QUERYRESPONSE_PARQUET = _QUERYRESPONSE.nested_types_by_name['Parquet']
_QUERYRESPONSE_REDISBULK = _QUERYRESPONSE.nested_types_by_name['RedisBulk']
_QUERYRESPONSE_REDISAI = _QUERYRESPONSE.nested_types_by_name['RedisAI']
_STREAMQUERYREQUEST = DESCRIPTOR.message_types_by_name['StreamQueryRequest']
_STREAMQUERYREQUEST_LIMITS = _STREAMQUERYREQUEST.nested_types_by_name['Limits']
_STREAMQUERYREQUEST_PARQUET = _STREAMQUERYREQUEST.nested_types_by_name['Parquet']
_STREAMQUERYREQUEST_REDISBULK = _STREAMQUERYREQUEST.nested_types_by_name['RedisBulk']
_STREAMQUERYREQUEST_REDISAI = _STREAMQUERYREQUEST.nested_types_by_name['RedisAI']
_STREAMQUERYRESPONSE = DESCRIPTOR.message_types_by_name['StreamQueryResponse']
_STREAMQUERYRESPONSE_ANALYSIS = _STREAMQUERYRESPONSE.nested_types_by_name['Analysis']
_STREAMQUERYRESPONSE_CONFIG = _STREAMQUERYRESPONSE.nested_types_by_name['Config']
_STREAMQUERYRESPONSE_METRICS = _STREAMQUERYRESPONSE.nested_types_by_name['Metrics']
_STREAMQUERYRESPONSE_PARQUET = _STREAMQUERYRESPONSE.nested_types_by_name['Parquet']
_STREAMQUERYRESPONSE_REDISBULK = _STREAMQUERYRESPONSE.nested_types_by_name['RedisBulk']
_STREAMQUERYRESPONSE_REDISAI = _STREAMQUERYRESPONSE.nested_types_by_name['RedisAI']
_STREAMQUERYV2RESPONSE = DESCRIPTOR.message_types_by_name['StreamQueryV2Response']
_STREAMQUERYV2RESPONSE_ANALYSIS = _STREAMQUERYV2RESPONSE.nested_types_by_name['Analysis']
_STREAMQUERYV2RESPONSE_CONFIG = _STREAMQUERYV2RESPONSE.nested_types_by_name['Config']
_STREAMQUERYV2RESPONSE_METRICS = _STREAMQUERYV2RESPONSE.nested_types_by_name['Metrics']
_STREAMQUERYV2RESPONSE_PARQUET = _STREAMQUERYV2RESPONSE.nested_types_by_name['Parquet']
_STREAMQUERYV2RESPONSE_REDISBULK = _STREAMQUERYV2RESPONSE.nested_types_by_name['RedisBulk']
_STREAMQUERYV2RESPONSE_REDISAI = _STREAMQUERYV2RESPONSE.nested_types_by_name['RedisAI']
_QUERYOPTIONS = DESCRIPTOR.message_types_by_name['QueryOptions']
_STREAMQUERYV2REQUEST = DESCRIPTOR.message_types_by_name['StreamQueryV2Request']
_QUERYREQUEST_RESULTBEHAVIOR = _QUERYREQUEST.enum_types_by_name['ResultBehavior']
_STREAMQUERYREQUEST_RESULTBEHAVIOR = _STREAMQUERYREQUEST.enum_types_by_name['ResultBehavior']
_STREAMQUERYRESPONSE_STATE = _STREAMQUERYRESPONSE.enum_types_by_name['State']
_STREAMQUERYV2RESPONSE_STATE = _STREAMQUERYV2RESPONSE.enum_types_by_name['State']
WithTable = _reflection.GeneratedProtocolMessageType('WithTable', (_message.Message,), {

  'JSONValues' : _reflection.GeneratedProtocolMessageType('JSONValues', (_message.Message,), {
    'DESCRIPTOR' : _WITHTABLE_JSONVALUES,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.WithTable.JSONValues)
    })
  ,
  'DESCRIPTOR' : _WITHTABLE,
  '__module__' : 'kaskada.api.v1alpha.compute_pb2'
  # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.WithTable)
  })
_sym_db.RegisterMessage(WithTable)
_sym_db.RegisterMessage(WithTable.JSONValues)

WithView = _reflection.GeneratedProtocolMessageType('WithView', (_message.Message,), {
  'DESCRIPTOR' : _WITHVIEW,
  '__module__' : 'kaskada.api.v1alpha.compute_pb2'
  # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.WithView)
  })
_sym_db.RegisterMessage(WithView)

WithViews = _reflection.GeneratedProtocolMessageType('WithViews', (_message.Message,), {
  'DESCRIPTOR' : _WITHVIEWS,
  '__module__' : 'kaskada.api.v1alpha.compute_pb2'
  # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.WithViews)
  })
_sym_db.RegisterMessage(WithViews)

AnalyzeRequest = _reflection.GeneratedProtocolMessageType('AnalyzeRequest', (_message.Message,), {
  'DESCRIPTOR' : _ANALYZEREQUEST,
  '__module__' : 'kaskada.api.v1alpha.compute_pb2'
  # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.AnalyzeRequest)
  })
_sym_db.RegisterMessage(AnalyzeRequest)

AnalyzeResponse = _reflection.GeneratedProtocolMessageType('AnalyzeResponse', (_message.Message,), {
  'DESCRIPTOR' : _ANALYZERESPONSE,
  '__module__' : 'kaskada.api.v1alpha.compute_pb2'
  # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.AnalyzeResponse)
  })
_sym_db.RegisterMessage(AnalyzeResponse)

QueryRequest = _reflection.GeneratedProtocolMessageType('QueryRequest', (_message.Message,), {

  'Empty' : _reflection.GeneratedProtocolMessageType('Empty', (_message.Message,), {
    'DESCRIPTOR' : _QUERYREQUEST_EMPTY,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.QueryRequest.Empty)
    })
  ,

  'Limits' : _reflection.GeneratedProtocolMessageType('Limits', (_message.Message,), {
    'DESCRIPTOR' : _QUERYREQUEST_LIMITS,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.QueryRequest.Limits)
    })
  ,

  'RedisBulkResponse' : _reflection.GeneratedProtocolMessageType('RedisBulkResponse', (_message.Message,), {
    'DESCRIPTOR' : _QUERYREQUEST_REDISBULKRESPONSE,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.QueryRequest.RedisBulkResponse)
    })
  ,

  'RedisAI' : _reflection.GeneratedProtocolMessageType('RedisAI', (_message.Message,), {
    'DESCRIPTOR' : _QUERYREQUEST_REDISAI,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.QueryRequest.RedisAI)
    })
  ,
  'DESCRIPTOR' : _QUERYREQUEST,
  '__module__' : 'kaskada.api.v1alpha.compute_pb2'
  # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.QueryRequest)
  })
_sym_db.RegisterMessage(QueryRequest)
_sym_db.RegisterMessage(QueryRequest.Empty)
_sym_db.RegisterMessage(QueryRequest.Limits)
_sym_db.RegisterMessage(QueryRequest.RedisBulkResponse)
_sym_db.RegisterMessage(QueryRequest.RedisAI)

QueryResponse = _reflection.GeneratedProtocolMessageType('QueryResponse', (_message.Message,), {

  'JSONValues' : _reflection.GeneratedProtocolMessageType('JSONValues', (_message.Message,), {
    'DESCRIPTOR' : _QUERYRESPONSE_JSONVALUES,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.QueryResponse.JSONValues)
    })
  ,

  'Parquet' : _reflection.GeneratedProtocolMessageType('Parquet', (_message.Message,), {
    'DESCRIPTOR' : _QUERYRESPONSE_PARQUET,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.QueryResponse.Parquet)
    })
  ,

  'RedisBulk' : _reflection.GeneratedProtocolMessageType('RedisBulk', (_message.Message,), {
    'DESCRIPTOR' : _QUERYRESPONSE_REDISBULK,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.QueryResponse.RedisBulk)
    })
  ,

  'RedisAI' : _reflection.GeneratedProtocolMessageType('RedisAI', (_message.Message,), {
    'DESCRIPTOR' : _QUERYRESPONSE_REDISAI,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.QueryResponse.RedisAI)
    })
  ,
  'DESCRIPTOR' : _QUERYRESPONSE,
  '__module__' : 'kaskada.api.v1alpha.compute_pb2'
  # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.QueryResponse)
  })
_sym_db.RegisterMessage(QueryResponse)
_sym_db.RegisterMessage(QueryResponse.JSONValues)
_sym_db.RegisterMessage(QueryResponse.Parquet)
_sym_db.RegisterMessage(QueryResponse.RedisBulk)
_sym_db.RegisterMessage(QueryResponse.RedisAI)

StreamQueryRequest = _reflection.GeneratedProtocolMessageType('StreamQueryRequest', (_message.Message,), {

  'Limits' : _reflection.GeneratedProtocolMessageType('Limits', (_message.Message,), {
    'DESCRIPTOR' : _STREAMQUERYREQUEST_LIMITS,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryRequest.Limits)
    })
  ,

  'Parquet' : _reflection.GeneratedProtocolMessageType('Parquet', (_message.Message,), {
    'DESCRIPTOR' : _STREAMQUERYREQUEST_PARQUET,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryRequest.Parquet)
    })
  ,

  'RedisBulk' : _reflection.GeneratedProtocolMessageType('RedisBulk', (_message.Message,), {
    'DESCRIPTOR' : _STREAMQUERYREQUEST_REDISBULK,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryRequest.RedisBulk)
    })
  ,

  'RedisAI' : _reflection.GeneratedProtocolMessageType('RedisAI', (_message.Message,), {
    'DESCRIPTOR' : _STREAMQUERYREQUEST_REDISAI,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryRequest.RedisAI)
    })
  ,
  'DESCRIPTOR' : _STREAMQUERYREQUEST,
  '__module__' : 'kaskada.api.v1alpha.compute_pb2'
  # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryRequest)
  })
_sym_db.RegisterMessage(StreamQueryRequest)
_sym_db.RegisterMessage(StreamQueryRequest.Limits)
_sym_db.RegisterMessage(StreamQueryRequest.Parquet)
_sym_db.RegisterMessage(StreamQueryRequest.RedisBulk)
_sym_db.RegisterMessage(StreamQueryRequest.RedisAI)

StreamQueryResponse = _reflection.GeneratedProtocolMessageType('StreamQueryResponse', (_message.Message,), {

  'Analysis' : _reflection.GeneratedProtocolMessageType('Analysis', (_message.Message,), {
    'DESCRIPTOR' : _STREAMQUERYRESPONSE_ANALYSIS,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryResponse.Analysis)
    })
  ,

  'Config' : _reflection.GeneratedProtocolMessageType('Config', (_message.Message,), {
    'DESCRIPTOR' : _STREAMQUERYRESPONSE_CONFIG,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryResponse.Config)
    })
  ,

  'Metrics' : _reflection.GeneratedProtocolMessageType('Metrics', (_message.Message,), {
    'DESCRIPTOR' : _STREAMQUERYRESPONSE_METRICS,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryResponse.Metrics)
    })
  ,

  'Parquet' : _reflection.GeneratedProtocolMessageType('Parquet', (_message.Message,), {
    'DESCRIPTOR' : _STREAMQUERYRESPONSE_PARQUET,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryResponse.Parquet)
    })
  ,

  'RedisBulk' : _reflection.GeneratedProtocolMessageType('RedisBulk', (_message.Message,), {
    'DESCRIPTOR' : _STREAMQUERYRESPONSE_REDISBULK,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryResponse.RedisBulk)
    })
  ,

  'RedisAI' : _reflection.GeneratedProtocolMessageType('RedisAI', (_message.Message,), {
    'DESCRIPTOR' : _STREAMQUERYRESPONSE_REDISAI,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryResponse.RedisAI)
    })
  ,
  'DESCRIPTOR' : _STREAMQUERYRESPONSE,
  '__module__' : 'kaskada.api.v1alpha.compute_pb2'
  # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryResponse)
  })
_sym_db.RegisterMessage(StreamQueryResponse)
_sym_db.RegisterMessage(StreamQueryResponse.Analysis)
_sym_db.RegisterMessage(StreamQueryResponse.Config)
_sym_db.RegisterMessage(StreamQueryResponse.Metrics)
_sym_db.RegisterMessage(StreamQueryResponse.Parquet)
_sym_db.RegisterMessage(StreamQueryResponse.RedisBulk)
_sym_db.RegisterMessage(StreamQueryResponse.RedisAI)

StreamQueryV2Response = _reflection.GeneratedProtocolMessageType('StreamQueryV2Response', (_message.Message,), {

  'Analysis' : _reflection.GeneratedProtocolMessageType('Analysis', (_message.Message,), {
    'DESCRIPTOR' : _STREAMQUERYV2RESPONSE_ANALYSIS,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryV2Response.Analysis)
    })
  ,

  'Config' : _reflection.GeneratedProtocolMessageType('Config', (_message.Message,), {
    'DESCRIPTOR' : _STREAMQUERYV2RESPONSE_CONFIG,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryV2Response.Config)
    })
  ,

  'Metrics' : _reflection.GeneratedProtocolMessageType('Metrics', (_message.Message,), {
    'DESCRIPTOR' : _STREAMQUERYV2RESPONSE_METRICS,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryV2Response.Metrics)
    })
  ,

  'Parquet' : _reflection.GeneratedProtocolMessageType('Parquet', (_message.Message,), {
    'DESCRIPTOR' : _STREAMQUERYV2RESPONSE_PARQUET,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryV2Response.Parquet)
    })
  ,

  'RedisBulk' : _reflection.GeneratedProtocolMessageType('RedisBulk', (_message.Message,), {
    'DESCRIPTOR' : _STREAMQUERYV2RESPONSE_REDISBULK,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryV2Response.RedisBulk)
    })
  ,

  'RedisAI' : _reflection.GeneratedProtocolMessageType('RedisAI', (_message.Message,), {
    'DESCRIPTOR' : _STREAMQUERYV2RESPONSE_REDISAI,
    '__module__' : 'kaskada.api.v1alpha.compute_pb2'
    # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryV2Response.RedisAI)
    })
  ,
  'DESCRIPTOR' : _STREAMQUERYV2RESPONSE,
  '__module__' : 'kaskada.api.v1alpha.compute_pb2'
  # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryV2Response)
  })
_sym_db.RegisterMessage(StreamQueryV2Response)
_sym_db.RegisterMessage(StreamQueryV2Response.Analysis)
_sym_db.RegisterMessage(StreamQueryV2Response.Config)
_sym_db.RegisterMessage(StreamQueryV2Response.Metrics)
_sym_db.RegisterMessage(StreamQueryV2Response.Parquet)
_sym_db.RegisterMessage(StreamQueryV2Response.RedisBulk)
_sym_db.RegisterMessage(StreamQueryV2Response.RedisAI)

QueryOptions = _reflection.GeneratedProtocolMessageType('QueryOptions', (_message.Message,), {
  'DESCRIPTOR' : _QUERYOPTIONS,
  '__module__' : 'kaskada.api.v1alpha.compute_pb2'
  # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.QueryOptions)
  })
_sym_db.RegisterMessage(QueryOptions)

StreamQueryV2Request = _reflection.GeneratedProtocolMessageType('StreamQueryV2Request', (_message.Message,), {
  'DESCRIPTOR' : _STREAMQUERYV2REQUEST,
  '__module__' : 'kaskada.api.v1alpha.compute_pb2'
  # @@protoc_insertion_point(class_scope:kaskada.api.v1alpha.StreamQueryV2Request)
  })
_sym_db.RegisterMessage(StreamQueryV2Request)

_COMPUTESERVICE = DESCRIPTOR.services_by_name['ComputeService']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\027com.kaskada.api.v1alphaB\014ComputeProtoP\001ZEgitlab.com/kaskada/kaskada/wren/gen/go/kaskada/api/v1alpha;apiv1alpha\242\002\003KAX\252\002\023Kaskada.Api.V1alpha\312\002\023Kaskada\\Api\\V1alpha\342\002\037Kaskada\\Api\\V1alpha\\GPBMetadata\352\002\025Kaskada::Api::V1alpha'
  _WITHTABLE_JSONVALUES.fields_by_name['schema']._options = None
  _WITHTABLE_JSONVALUES.fields_by_name['schema']._serialized_options = b'\372B\004r\002\020\001'
  _WITHTABLE.oneofs_by_name['data']._options = None
  _WITHTABLE.oneofs_by_name['data']._serialized_options = b'\370B\001'
  _WITHTABLE.fields_by_name['name']._options = None
  _WITHTABLE.fields_by_name['name']._serialized_options = b'\372B\004r\002\020\001'
  _WITHTABLE.fields_by_name['entity']._options = None
  _WITHTABLE.fields_by_name['entity']._serialized_options = b'\372B\004r\002\020\001'
  _WITHTABLE.fields_by_name['time']._options = None
  _WITHTABLE.fields_by_name['time']._serialized_options = b'\372B\004r\002\020\001'
  _WITHVIEW.fields_by_name['name']._options = None
  _WITHVIEW.fields_by_name['name']._serialized_options = b'\372B\004r\002\020\001'
  _WITHVIEW.fields_by_name['expression']._options = None
  _WITHVIEW.fields_by_name['expression']._serialized_options = b'\372B\004r\002\020\001'
  _ANALYZEREQUEST.fields_by_name['query']._options = None
  _ANALYZEREQUEST.fields_by_name['query']._serialized_options = b'\372B\004r\002\020\001'
  _QUERYREQUEST_REDISAI.fields_by_name['db']._options = None
  _QUERYREQUEST_REDISAI.fields_by_name['db']._serialized_options = b'\372B\006\032\004\030\017(\000'
  _QUERYREQUEST_REDISAI.fields_by_name['host']._options = None
  _QUERYREQUEST_REDISAI.fields_by_name['host']._serialized_options = b'\372B\004r\002\020\001'
  _QUERYREQUEST_REDISAI.fields_by_name['port']._options = None
  _QUERYREQUEST_REDISAI.fields_by_name['port']._serialized_options = b'\372B\010\032\006\030\377\377\003 \000'
  _QUERYREQUEST.oneofs_by_name['response_as']._options = None
  _QUERYREQUEST.oneofs_by_name['response_as']._serialized_options = b'\370B\001'
  _QUERYREQUEST.fields_by_name['query']._options = None
  _QUERYREQUEST.fields_by_name['query']._serialized_options = b'\372B\004r\002\020\001'
  _STREAMQUERYREQUEST_REDISAI.fields_by_name['db']._options = None
  _STREAMQUERYREQUEST_REDISAI.fields_by_name['db']._serialized_options = b'\372B\006\032\004\030\017(\000'
  _STREAMQUERYREQUEST_REDISAI.fields_by_name['host']._options = None
  _STREAMQUERYREQUEST_REDISAI.fields_by_name['host']._serialized_options = b'\372B\004r\002\020\001'
  _STREAMQUERYREQUEST_REDISAI.fields_by_name['port']._options = None
  _STREAMQUERYREQUEST_REDISAI.fields_by_name['port']._serialized_options = b'\372B\010\032\006\030\377\377\003 \000'
  _STREAMQUERYREQUEST.oneofs_by_name['response_as']._options = None
  _STREAMQUERYREQUEST.oneofs_by_name['response_as']._serialized_options = b'\370B\001'
  _STREAMQUERYREQUEST.fields_by_name['query']._options = None
  _STREAMQUERYREQUEST.fields_by_name['query']._serialized_options = b'\372B\004r\002\020\001'
  _COMPUTESERVICE.methods_by_name['Analyze']._options = None
  _COMPUTESERVICE.methods_by_name['Analyze']._serialized_options = b'\202\323\344\223\002\035:\001*\"\030/v1alpha/compute/analyze'
  _COMPUTESERVICE.methods_by_name['Query']._options = None
  _COMPUTESERVICE.methods_by_name['Query']._serialized_options = b'\202\323\344\223\002\033:\001*\"\026/v1alpha/compute/query'
  _WITHTABLE._serialized_start=369
  _WITHTABLE._serialized_end=709
  _WITHTABLE_JSONVALUES._serialized_start=627
  _WITHTABLE_JSONVALUES._serialized_end=696
  _WITHVIEW._serialized_start=711
  _WITHVIEW._serialized_end=791
  _WITHVIEWS._serialized_start=793
  _WITHVIEWS._serialized_end=857
  _ANALYZEREQUEST._serialized_start=859
  _ANALYZEREQUEST._serialized_end=931
  _ANALYZERESPONSE._serialized_start=934
  _ANALYZERESPONSE._serialized_end=1153
  _QUERYREQUEST._serialized_start=1156
  _QUERYREQUEST._serialized_end=2496
  _QUERYREQUEST_EMPTY._serialized_start=2112
  _QUERYREQUEST_EMPTY._serialized_end=2119
  _QUERYREQUEST_LIMITS._serialized_start=2121
  _QUERYREQUEST_LIMITS._serialized_end=2164
  _QUERYREQUEST_REDISBULKRESPONSE._serialized_start=2166
  _QUERYREQUEST_REDISBULKRESPONSE._serialized_end=2207
  _QUERYREQUEST_REDISAI._serialized_start=2209
  _QUERYREQUEST_REDISAI._serialized_end=2307
  _QUERYREQUEST_RESULTBEHAVIOR._serialized_start=2310
  _QUERYREQUEST_RESULTBEHAVIOR._serialized_end=2470
  _QUERYRESPONSE._serialized_start=2499
  _QUERYRESPONSE._serialized_end=3268
  _QUERYRESPONSE_JSONVALUES._serialized_start=3138
  _QUERYRESPONSE_JSONVALUES._serialized_end=3176
  _QUERYRESPONSE_PARQUET._serialized_start=3178
  _QUERYRESPONSE_PARQUET._serialized_end=3207
  _QUERYRESPONSE_REDISBULK._serialized_start=3209
  _QUERYRESPONSE_REDISBULK._serialized_end=3240
  _QUERYRESPONSE_REDISAI._serialized_start=2209
  _QUERYRESPONSE_REDISAI._serialized_end=2218
  _STREAMQUERYREQUEST._serialized_start=3271
  _STREAMQUERYREQUEST._serialized_end=4542
  _STREAMQUERYREQUEST_LIMITS._serialized_start=2121
  _STREAMQUERYREQUEST_LIMITS._serialized_end=2164
  _STREAMQUERYREQUEST_PARQUET._serialized_start=3178
  _STREAMQUERYREQUEST_PARQUET._serialized_end=3187
  _STREAMQUERYREQUEST_REDISBULK._serialized_start=4226
  _STREAMQUERYREQUEST_REDISBULK._serialized_end=4259
  _STREAMQUERYREQUEST_REDISAI._serialized_start=2209
  _STREAMQUERYREQUEST_REDISAI._serialized_end=2307
  _STREAMQUERYREQUEST_RESULTBEHAVIOR._serialized_start=2310
  _STREAMQUERYREQUEST_RESULTBEHAVIOR._serialized_end=2470
  _STREAMQUERYRESPONSE._serialized_start=4545
  _STREAMQUERYRESPONSE._serialized_end=5896
  _STREAMQUERYRESPONSE_ANALYSIS._serialized_start=5275
  _STREAMQUERYRESPONSE_ANALYSIS._serialized_end=5372
  _STREAMQUERYRESPONSE_CONFIG._serialized_start=5374
  _STREAMQUERYRESPONSE_CONFIG._serialized_end=5494
  _STREAMQUERYRESPONSE_METRICS._serialized_start=5497
  _STREAMQUERYRESPONSE_METRICS._serialized_end=5673
  _STREAMQUERYRESPONSE_PARQUET._serialized_start=5675
  _STREAMQUERYRESPONSE_PARQUET._serialized_end=5706
  _STREAMQUERYRESPONSE_REDISBULK._serialized_start=5708
  _STREAMQUERYRESPONSE_REDISBULK._serialized_end=5741
  _STREAMQUERYRESPONSE_REDISAI._serialized_start=2209
  _STREAMQUERYRESPONSE_REDISAI._serialized_end=2218
  _STREAMQUERYRESPONSE_STATE._serialized_start=5755
  _STREAMQUERYRESPONSE_STATE._serialized_end=5885
  _STREAMQUERYV2RESPONSE._serialized_start=5899
  _STREAMQUERYV2RESPONSE._serialized_end=7435
  _STREAMQUERYV2RESPONSE_ANALYSIS._serialized_start=5275
  _STREAMQUERYV2RESPONSE_ANALYSIS._serialized_end=5372
  _STREAMQUERYV2RESPONSE_CONFIG._serialized_start=5374
  _STREAMQUERYV2RESPONSE_CONFIG._serialized_end=5494
  _STREAMQUERYV2RESPONSE_METRICS._serialized_start=6894
  _STREAMQUERYV2RESPONSE_METRICS._serialized_end=7212
  _STREAMQUERYV2RESPONSE_PARQUET._serialized_start=5675
  _STREAMQUERYV2RESPONSE_PARQUET._serialized_end=5706
  _STREAMQUERYV2RESPONSE_REDISBULK._serialized_start=5708
  _STREAMQUERYV2RESPONSE_REDISBULK._serialized_end=5741
  _STREAMQUERYV2RESPONSE_REDISAI._serialized_start=2209
  _STREAMQUERYV2RESPONSE_REDISAI._serialized_end=2218
  _STREAMQUERYV2RESPONSE_STATE._serialized_start=5755
  _STREAMQUERYV2RESPONSE_STATE._serialized_end=5885
  _QUERYOPTIONS._serialized_start=7438
  _QUERYOPTIONS._serialized_end=7569
  _STREAMQUERYV2REQUEST._serialized_start=7572
  _STREAMQUERYV2REQUEST._serialized_end=7731
  _COMPUTESERVICE._serialized_start=7734
  _COMPUTESERVICE._serialized_end=8194
# @@protoc_insertion_point(module_scope)
