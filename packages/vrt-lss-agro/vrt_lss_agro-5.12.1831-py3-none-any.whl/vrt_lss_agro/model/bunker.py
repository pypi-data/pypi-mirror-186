# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class Bunker(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A bunker.

    """


    class MetaOapg:
        required = {
            "capacity_forecast",
            "key",
        }
        
        class properties:
            
            
            class key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
        
            @staticmethod
            def capacity_forecast() -> typing.Type['CapacityForecast']:
                return CapacityForecast
        
            @staticmethod
            def cost_forecast() -> typing.Type['CostForecast']:
                return CostForecast
        
            @staticmethod
            def attributes() -> typing.Type['Attributes']:
                return Attributes
            __annotations__ = {
                "key": key,
                "capacity_forecast": capacity_forecast,
                "cost_forecast": cost_forecast,
                "attributes": attributes,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    capacity_forecast: 'CapacityForecast'
    key: MetaOapg.properties.key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity_forecast"]) -> 'CapacityForecast': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost_forecast"]) -> 'CostForecast': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> 'Attributes': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["capacity_forecast"], typing_extensions.Literal["key"], typing_extensions.Literal["cost_forecast"], typing_extensions.Literal["attributes"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity_forecast"]) -> 'CapacityForecast': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost_forecast"]) -> typing.Union['CostForecast', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union['Attributes', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["capacity_forecast"], typing_extensions.Literal["key"], typing_extensions.Literal["cost_forecast"], typing_extensions.Literal["attributes"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        capacity_forecast: 'CapacityForecast',
        key: typing.Union[MetaOapg.properties.key, str, ],
        cost_forecast: typing.Union['CostForecast', schemas.Unset] = schemas.unset,
        attributes: typing.Union['Attributes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Bunker':
        return super().__new__(
            cls,
            *args,
            capacity_forecast=capacity_forecast,
            key=key,
            cost_forecast=cost_forecast,
            attributes=attributes,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.attributes import Attributes
from vrt_lss_agro.model.capacity_forecast import CapacityForecast
from vrt_lss_agro.model.cost_forecast import CostForecast
