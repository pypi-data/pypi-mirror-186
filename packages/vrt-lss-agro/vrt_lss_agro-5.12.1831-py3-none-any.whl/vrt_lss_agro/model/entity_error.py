# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class EntityError(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Description of the error in the input data.
    """


    class MetaOapg:
        required = {
            "entities",
            "type",
        }
        
        class properties:
        
            @staticmethod
            def type() -> typing.Type['EntityErrorType']:
                return EntityErrorType
            
            
            class entities(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = False
                    max_items = 100001
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['EntityPath']:
                        return EntityPath
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EntityPath'], typing.List['EntityPath']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'entities':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EntityPath':
                    return super().__getitem__(i)
            
            
            class info(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 2048
                    min_length = 0
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'info':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "type": type,
                "entities": entities,
                "info": info,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    entities: MetaOapg.properties.entities
    type: 'EntityErrorType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entities"]) -> MetaOapg.properties.entities: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'EntityErrorType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["info"]) -> MetaOapg.properties.info: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entities"], typing_extensions.Literal["type"], typing_extensions.Literal["info"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entities"]) -> MetaOapg.properties.entities: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'EntityErrorType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["info"]) -> typing.Union[MetaOapg.properties.info, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entities"], typing_extensions.Literal["type"], typing_extensions.Literal["info"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entities: typing.Union[MetaOapg.properties.entities, list, tuple, ],
        type: 'EntityErrorType',
        info: typing.Union[MetaOapg.properties.info, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'EntityError':
        return super().__new__(
            cls,
            *args,
            entities=entities,
            type=type,
            info=info,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.entity_error_type import EntityErrorType
from vrt_lss_agro.model.entity_path import EntityPath
