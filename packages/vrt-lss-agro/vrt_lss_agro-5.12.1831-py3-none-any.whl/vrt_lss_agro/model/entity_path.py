# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class EntityPath(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The description of the entity and the path to it.

    """


    class MetaOapg:
        required = {
            "entity_key",
            "entity_type",
        }
        
        class properties:
            
            
            class entity_key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1024
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'entity_key':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def entity_type() -> typing.Type['EntityType']:
                return EntityType
        
            @staticmethod
            def child_entity() -> typing.Type['EntityPath']:
                return EntityPath
            __annotations__ = {
                "entity_key": entity_key,
                "entity_type": entity_type,
                "child_entity": child_entity,
            }
        additional_properties = schemas.NotAnyTypeSchema

    
    entity_key: MetaOapg.properties.entity_key
    entity_type: 'EntityType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity_key"]) -> MetaOapg.properties.entity_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity_type"]) -> 'EntityType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["child_entity"]) -> 'EntityPath': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity_key"], typing_extensions.Literal["entity_type"], typing_extensions.Literal["child_entity"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity_key"]) -> MetaOapg.properties.entity_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity_type"]) -> 'EntityType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["child_entity"]) -> typing.Union['EntityPath', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity_key"], typing_extensions.Literal["entity_type"], typing_extensions.Literal["child_entity"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        child_entity: typing.Union['EntityPath', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'EntityPath':
        return super().__new__(
            cls,
            *args,
            child_entity=child_entity,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.entity_type import EntityType
