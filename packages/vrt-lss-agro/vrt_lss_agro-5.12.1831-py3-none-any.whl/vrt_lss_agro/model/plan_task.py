# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class PlanTask(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Initial task.
    """


    class MetaOapg:
        required = {
            "movement_matrix",
            "factories",
            "crops",
            "plan_settings",
            "fields",
        }
        
        class properties:
            
            
            class crops(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 201
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Crop']:
                        return Crop
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Crop'], typing.List['Crop']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'crops':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Crop':
                    return super().__getitem__(i)
            
            
            class fields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Field']:
                        return Field
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Field'], typing.List['Field']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Field':
                    return super().__getitem__(i)
            
            
            class factories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 201
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Factory']:
                        return Factory
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Factory'], typing.List['Factory']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'factories':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Factory':
                    return super().__getitem__(i)
        
            @staticmethod
            def movement_matrix() -> typing.Type['MovementMatrix']:
                return MovementMatrix
        
            @staticmethod
            def plan_settings() -> typing.Type['PlanSettings']:
                return PlanSettings
            
            
            class elevators(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 201
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Elevator']:
                        return Elevator
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Elevator'], typing.List['Elevator']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'elevators':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Elevator':
                    return super().__getitem__(i)
            
            
            class markets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 201
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Market']:
                        return Market
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Market'], typing.List['Market']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'markets':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Market':
                    return super().__getitem__(i)
            
            
            class leftovers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 100001
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Leftover']:
                        return Leftover
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Leftover'], typing.List['Leftover']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'leftovers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Leftover':
                    return super().__getitem__(i)
            __annotations__ = {
                "crops": crops,
                "fields": fields,
                "factories": factories,
                "movement_matrix": movement_matrix,
                "plan_settings": plan_settings,
                "elevators": elevators,
                "markets": markets,
                "leftovers": leftovers,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    movement_matrix: 'MovementMatrix'
    factories: MetaOapg.properties.factories
    crops: MetaOapg.properties.crops
    plan_settings: 'PlanSettings'
    fields: MetaOapg.properties.fields
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["movement_matrix"]) -> 'MovementMatrix': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["factories"]) -> MetaOapg.properties.factories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crops"]) -> MetaOapg.properties.crops: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plan_settings"]) -> 'PlanSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elevators"]) -> MetaOapg.properties.elevators: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["markets"]) -> MetaOapg.properties.markets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leftovers"]) -> MetaOapg.properties.leftovers: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["movement_matrix"], typing_extensions.Literal["factories"], typing_extensions.Literal["crops"], typing_extensions.Literal["plan_settings"], typing_extensions.Literal["fields"], typing_extensions.Literal["elevators"], typing_extensions.Literal["markets"], typing_extensions.Literal["leftovers"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["movement_matrix"]) -> 'MovementMatrix': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["factories"]) -> MetaOapg.properties.factories: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crops"]) -> MetaOapg.properties.crops: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plan_settings"]) -> 'PlanSettings': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elevators"]) -> typing.Union[MetaOapg.properties.elevators, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["markets"]) -> typing.Union[MetaOapg.properties.markets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leftovers"]) -> typing.Union[MetaOapg.properties.leftovers, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["movement_matrix"], typing_extensions.Literal["factories"], typing_extensions.Literal["crops"], typing_extensions.Literal["plan_settings"], typing_extensions.Literal["fields"], typing_extensions.Literal["elevators"], typing_extensions.Literal["markets"], typing_extensions.Literal["leftovers"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        movement_matrix: 'MovementMatrix',
        factories: typing.Union[MetaOapg.properties.factories, list, tuple, ],
        crops: typing.Union[MetaOapg.properties.crops, list, tuple, ],
        plan_settings: 'PlanSettings',
        fields: typing.Union[MetaOapg.properties.fields, list, tuple, ],
        elevators: typing.Union[MetaOapg.properties.elevators, list, tuple, schemas.Unset] = schemas.unset,
        markets: typing.Union[MetaOapg.properties.markets, list, tuple, schemas.Unset] = schemas.unset,
        leftovers: typing.Union[MetaOapg.properties.leftovers, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PlanTask':
        return super().__new__(
            cls,
            *args,
            movement_matrix=movement_matrix,
            factories=factories,
            crops=crops,
            plan_settings=plan_settings,
            fields=fields,
            elevators=elevators,
            markets=markets,
            leftovers=leftovers,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.crop import Crop
from vrt_lss_agro.model.elevator import Elevator
from vrt_lss_agro.model.factory import Factory
from vrt_lss_agro.model.field import Field
from vrt_lss_agro.model.leftover import Leftover
from vrt_lss_agro.model.market import Market
from vrt_lss_agro.model.movement_matrix import MovementMatrix
from vrt_lss_agro.model.plan_settings import PlanSettings
