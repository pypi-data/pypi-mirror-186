# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class Factory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A production facility.

    """


    class MetaOapg:
        required = {
            "consumers",
            "gate",
            "key",
            "bunkers",
        }
        
        class properties:
            
            
            class key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
        
            @staticmethod
            def gate() -> typing.Type['Gate']:
                return Gate
            
            
            class bunkers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 201
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Bunker']:
                        return Bunker
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Bunker'], typing.List['Bunker']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bunkers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Bunker':
                    return super().__getitem__(i)
            
            
            class consumers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 201
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Consumer']:
                        return Consumer
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Consumer'], typing.List['Consumer']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'consumers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Consumer':
                    return super().__getitem__(i)
            
            
            class dryers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 201
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['Dryer']:
                        return Dryer
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Dryer'], typing.List['Dryer']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dryers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Dryer':
                    return super().__getitem__(i)
        
            @staticmethod
            def attributes() -> typing.Type['Attributes']:
                return Attributes
            __annotations__ = {
                "key": key,
                "gate": gate,
                "bunkers": bunkers,
                "consumers": consumers,
                "dryers": dryers,
                "attributes": attributes,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    consumers: MetaOapg.properties.consumers
    gate: 'Gate'
    key: MetaOapg.properties.key
    bunkers: MetaOapg.properties.bunkers
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consumers"]) -> MetaOapg.properties.consumers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gate"]) -> 'Gate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bunkers"]) -> MetaOapg.properties.bunkers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dryers"]) -> MetaOapg.properties.dryers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> 'Attributes': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["consumers"], typing_extensions.Literal["gate"], typing_extensions.Literal["key"], typing_extensions.Literal["bunkers"], typing_extensions.Literal["dryers"], typing_extensions.Literal["attributes"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consumers"]) -> MetaOapg.properties.consumers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gate"]) -> 'Gate': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bunkers"]) -> MetaOapg.properties.bunkers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dryers"]) -> typing.Union[MetaOapg.properties.dryers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union['Attributes', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["consumers"], typing_extensions.Literal["gate"], typing_extensions.Literal["key"], typing_extensions.Literal["bunkers"], typing_extensions.Literal["dryers"], typing_extensions.Literal["attributes"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        consumers: typing.Union[MetaOapg.properties.consumers, list, tuple, ],
        gate: 'Gate',
        key: typing.Union[MetaOapg.properties.key, str, ],
        bunkers: typing.Union[MetaOapg.properties.bunkers, list, tuple, ],
        dryers: typing.Union[MetaOapg.properties.dryers, list, tuple, schemas.Unset] = schemas.unset,
        attributes: typing.Union['Attributes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Factory':
        return super().__new__(
            cls,
            *args,
            consumers=consumers,
            gate=gate,
            key=key,
            bunkers=bunkers,
            dryers=dryers,
            attributes=attributes,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.attributes import Attributes
from vrt_lss_agro.model.bunker import Bunker
from vrt_lss_agro.model.consumer import Consumer
from vrt_lss_agro.model.dryer import Dryer
from vrt_lss_agro.model.gate import Gate
