# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class Pricelist(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Price forecast for a particular crop.

    """


    class MetaOapg:
        required = {
            "crop_key",
            "price_forecast",
        }
        
        class properties:
            
            
            class crop_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
        
            @staticmethod
            def price_forecast() -> typing.Type['PriceForecast']:
                return PriceForecast
        
            @staticmethod
            def capacity_forecast() -> typing.Type['CapacityForecast']:
                return CapacityForecast
            __annotations__ = {
                "crop_key": crop_key,
                "price_forecast": price_forecast,
                "capacity_forecast": capacity_forecast,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    crop_key: MetaOapg.properties.crop_key
    price_forecast: 'PriceForecast'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crop_key"]) -> MetaOapg.properties.crop_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price_forecast"]) -> 'PriceForecast': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity_forecast"]) -> 'CapacityForecast': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["crop_key"], typing_extensions.Literal["price_forecast"], typing_extensions.Literal["capacity_forecast"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crop_key"]) -> MetaOapg.properties.crop_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price_forecast"]) -> 'PriceForecast': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity_forecast"]) -> typing.Union['CapacityForecast', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["crop_key"], typing_extensions.Literal["price_forecast"], typing_extensions.Literal["capacity_forecast"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        crop_key: typing.Union[MetaOapg.properties.crop_key, str, ],
        price_forecast: 'PriceForecast',
        capacity_forecast: typing.Union['CapacityForecast', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Pricelist':
        return super().__new__(
            cls,
            *args,
            crop_key=crop_key,
            price_forecast=price_forecast,
            capacity_forecast=capacity_forecast,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.capacity_forecast import CapacityForecast
from vrt_lss_agro.model.price_forecast import PriceForecast
