# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class UnplannedItems(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Unplanned items list.
    """


    class MetaOapg:
        
        class properties:
            
            
            class crop_keys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 201
                    min_items = 0
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 1024
                            min_length = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'crop_keys':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class field_keys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 30001
                    min_items = 0
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 1024
                            min_length = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'field_keys':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class elevator_keys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 201
                    min_items = 0
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 1024
                            min_length = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'elevator_keys':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class factory_keys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    max_items = 201
                    min_items = 0
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 1024
                            min_length = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'factory_keys':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "crop_keys": crop_keys,
                "field_keys": field_keys,
                "elevator_keys": elevator_keys,
                "factory_keys": factory_keys,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crop_keys"]) -> MetaOapg.properties.crop_keys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field_keys"]) -> MetaOapg.properties.field_keys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elevator_keys"]) -> MetaOapg.properties.elevator_keys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["factory_keys"]) -> MetaOapg.properties.factory_keys: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["crop_keys"], typing_extensions.Literal["field_keys"], typing_extensions.Literal["elevator_keys"], typing_extensions.Literal["factory_keys"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crop_keys"]) -> typing.Union[MetaOapg.properties.crop_keys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field_keys"]) -> typing.Union[MetaOapg.properties.field_keys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elevator_keys"]) -> typing.Union[MetaOapg.properties.elevator_keys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["factory_keys"]) -> typing.Union[MetaOapg.properties.factory_keys, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["crop_keys"], typing_extensions.Literal["field_keys"], typing_extensions.Literal["elevator_keys"], typing_extensions.Literal["factory_keys"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        crop_keys: typing.Union[MetaOapg.properties.crop_keys, list, tuple, schemas.Unset] = schemas.unset,
        field_keys: typing.Union[MetaOapg.properties.field_keys, list, tuple, schemas.Unset] = schemas.unset,
        elevator_keys: typing.Union[MetaOapg.properties.elevator_keys, list, tuple, schemas.Unset] = schemas.unset,
        factory_keys: typing.Union[MetaOapg.properties.factory_keys, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'UnplannedItems':
        return super().__new__(
            cls,
            *args,
            crop_keys=crop_keys,
            field_keys=field_keys,
            elevator_keys=elevator_keys,
            factory_keys=factory_keys,
            _configuration=_configuration,
        )
