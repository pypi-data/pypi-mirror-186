# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class PriceForecastElement(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Grain price forecast for the specified date.
    """


    class MetaOapg:
        required = {
            "price",
            "date_window",
        }
        
        class properties:
        
            @staticmethod
            def date_window() -> typing.Type['DateWindow']:
                return DateWindow
            
            
            class price(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 10000000
                    inclusive_minimum = 0
            __annotations__ = {
                "date_window": date_window,
                "price": price,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    price: MetaOapg.properties.price
    date_window: 'DateWindow'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_window"]) -> 'DateWindow': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["price"], typing_extensions.Literal["date_window"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_window"]) -> 'DateWindow': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["price"], typing_extensions.Literal["date_window"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, ],
        date_window: 'DateWindow',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PriceForecastElement':
        return super().__new__(
            cls,
            *args,
            price=price,
            date_window=date_window,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.date_window import DateWindow
