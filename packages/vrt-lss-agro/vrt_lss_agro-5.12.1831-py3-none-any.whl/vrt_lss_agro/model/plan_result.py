# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class PlanResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Planning result.
    """


    class MetaOapg:
        required = {
            "progress",
            "project",
            "tracedata",
            "info",
            "statistics",
        }
        
        class properties:
        
            @staticmethod
            def tracedata() -> typing.Type['Tracedata']:
                return Tracedata
        
            @staticmethod
            def project() -> typing.Type['Project']:
                return Project
        
            @staticmethod
            def statistics() -> typing.Type['PlanStatistics']:
                return PlanStatistics
        
            @staticmethod
            def progress() -> typing.Type['CalculationProgress']:
                return CalculationProgress
        
            @staticmethod
            def info() -> typing.Type['CalculationInfo']:
                return CalculationInfo
        
            @staticmethod
            def validations() -> typing.Type['EntityValidationList']:
                return EntityValidationList
        
            @staticmethod
            def unplanned_items() -> typing.Type['UnplannedItems']:
                return UnplannedItems
            __annotations__ = {
                "tracedata": tracedata,
                "project": project,
                "statistics": statistics,
                "progress": progress,
                "info": info,
                "validations": validations,
                "unplanned_items": unplanned_items,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    progress: 'CalculationProgress'
    project: 'Project'
    tracedata: 'Tracedata'
    info: 'CalculationInfo'
    statistics: 'PlanStatistics'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["progress"]) -> 'CalculationProgress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'Project': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracedata"]) -> 'Tracedata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["info"]) -> 'CalculationInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statistics"]) -> 'PlanStatistics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validations"]) -> 'EntityValidationList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unplanned_items"]) -> 'UnplannedItems': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["progress"], typing_extensions.Literal["project"], typing_extensions.Literal["tracedata"], typing_extensions.Literal["info"], typing_extensions.Literal["statistics"], typing_extensions.Literal["validations"], typing_extensions.Literal["unplanned_items"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["progress"]) -> 'CalculationProgress': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> 'Project': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracedata"]) -> 'Tracedata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["info"]) -> 'CalculationInfo': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statistics"]) -> 'PlanStatistics': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validations"]) -> typing.Union['EntityValidationList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unplanned_items"]) -> typing.Union['UnplannedItems', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["progress"], typing_extensions.Literal["project"], typing_extensions.Literal["tracedata"], typing_extensions.Literal["info"], typing_extensions.Literal["statistics"], typing_extensions.Literal["validations"], typing_extensions.Literal["unplanned_items"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        progress: 'CalculationProgress',
        project: 'Project',
        tracedata: 'Tracedata',
        info: 'CalculationInfo',
        statistics: 'PlanStatistics',
        validations: typing.Union['EntityValidationList', schemas.Unset] = schemas.unset,
        unplanned_items: typing.Union['UnplannedItems', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PlanResult':
        return super().__new__(
            cls,
            *args,
            progress=progress,
            project=project,
            tracedata=tracedata,
            info=info,
            statistics=statistics,
            validations=validations,
            unplanned_items=unplanned_items,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.calculation_info import CalculationInfo
from vrt_lss_agro.model.calculation_progress import CalculationProgress
from vrt_lss_agro.model.entity_validation_list import EntityValidationList
from vrt_lss_agro.model.plan_statistics import PlanStatistics
from vrt_lss_agro.model.project import Project
from vrt_lss_agro.model.tracedata import Tracedata
from vrt_lss_agro.model.unplanned_items import UnplannedItems
