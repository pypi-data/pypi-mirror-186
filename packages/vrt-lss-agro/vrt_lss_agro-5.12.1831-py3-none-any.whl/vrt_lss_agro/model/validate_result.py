# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class ValidateResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Data validation result.
    """


    class MetaOapg:
        required = {
            "validations",
            "tracedata",
        }
        
        class properties:
        
            @staticmethod
            def tracedata() -> typing.Type['Tracedata']:
                return Tracedata
        
            @staticmethod
            def validations() -> typing.Type['EntityValidationList']:
                return EntityValidationList
            __annotations__ = {
                "tracedata": tracedata,
                "validations": validations,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    validations: 'EntityValidationList'
    tracedata: 'Tracedata'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validations"]) -> 'EntityValidationList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracedata"]) -> 'Tracedata': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["validations"], typing_extensions.Literal["tracedata"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validations"]) -> 'EntityValidationList': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracedata"]) -> 'Tracedata': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["validations"], typing_extensions.Literal["tracedata"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        validations: 'EntityValidationList',
        tracedata: 'Tracedata',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ValidateResult':
        return super().__new__(
            cls,
            *args,
            validations=validations,
            tracedata=tracedata,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.entity_validation_list import EntityValidationList
from vrt_lss_agro.model.tracedata import Tracedata
