# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class HumidityForecastElement(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Humidity forecast.
    """


    class MetaOapg:
        required = {
            "humidity",
            "date_window",
        }
        
        class properties:
        
            @staticmethod
            def date_window() -> typing.Type['DateWindow']:
                return DateWindow
        
            @staticmethod
            def humidity() -> typing.Type['Humidity']:
                return Humidity
            __annotations__ = {
                "date_window": date_window,
                "humidity": humidity,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    humidity: 'Humidity'
    date_window: 'DateWindow'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["humidity"]) -> 'Humidity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_window"]) -> 'DateWindow': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["humidity"], typing_extensions.Literal["date_window"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["humidity"]) -> 'Humidity': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_window"]) -> 'DateWindow': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["humidity"], typing_extensions.Literal["date_window"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        humidity: 'Humidity',
        date_window: 'DateWindow',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'HumidityForecastElement':
        return super().__new__(
            cls,
            *args,
            humidity=humidity,
            date_window=date_window,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.date_window import DateWindow
from vrt_lss_agro.model.humidity import Humidity
