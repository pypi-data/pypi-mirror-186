# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class OperationMeasurements(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Operation measurements.

    """


    class MetaOapg:
        required = {
            "cost",
            "distance",
        }
        
        class properties:
            
            
            class distance(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 40000
                    inclusive_minimum = 0
            
            
            class cost(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 10000000
                    inclusive_minimum = 0
            __annotations__ = {
                "distance": distance,
                "cost": cost,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    cost: MetaOapg.properties.cost
    distance: MetaOapg.properties.distance
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost"]) -> MetaOapg.properties.cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distance"]) -> MetaOapg.properties.distance: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cost"], typing_extensions.Literal["distance"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost"]) -> MetaOapg.properties.cost: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distance"]) -> MetaOapg.properties.distance: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cost"], typing_extensions.Literal["distance"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cost: typing.Union[MetaOapg.properties.cost, decimal.Decimal, int, float, ],
        distance: typing.Union[MetaOapg.properties.distance, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'OperationMeasurements':
        return super().__new__(
            cls,
            *args,
            cost=cost,
            distance=distance,
            _configuration=_configuration,
        )
