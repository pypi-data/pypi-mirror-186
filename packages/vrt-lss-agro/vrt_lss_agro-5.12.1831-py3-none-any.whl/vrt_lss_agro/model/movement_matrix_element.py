# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class MovementMatrixElement(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Time and distance matrix.
    """


    class MetaOapg:
        required = {
            "distance",
            "destination_key",
            "source_key",
        }
        
        class properties:
            
            
            class source_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class destination_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class distance(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 40000
                    inclusive_minimum = 0
            
            
            class cost_per_ton(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class cost_per_transport(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            __annotations__ = {
                "source_key": source_key,
                "destination_key": destination_key,
                "distance": distance,
                "cost_per_ton": cost_per_ton,
                "cost_per_transport": cost_per_transport,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    distance: MetaOapg.properties.distance
    destination_key: MetaOapg.properties.destination_key
    source_key: MetaOapg.properties.source_key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distance"]) -> MetaOapg.properties.distance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_key"]) -> MetaOapg.properties.destination_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_key"]) -> MetaOapg.properties.source_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost_per_ton"]) -> MetaOapg.properties.cost_per_ton: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost_per_transport"]) -> MetaOapg.properties.cost_per_transport: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["distance"], typing_extensions.Literal["destination_key"], typing_extensions.Literal["source_key"], typing_extensions.Literal["cost_per_ton"], typing_extensions.Literal["cost_per_transport"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distance"]) -> MetaOapg.properties.distance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_key"]) -> MetaOapg.properties.destination_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_key"]) -> MetaOapg.properties.source_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost_per_ton"]) -> typing.Union[MetaOapg.properties.cost_per_ton, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost_per_transport"]) -> typing.Union[MetaOapg.properties.cost_per_transport, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["distance"], typing_extensions.Literal["destination_key"], typing_extensions.Literal["source_key"], typing_extensions.Literal["cost_per_ton"], typing_extensions.Literal["cost_per_transport"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        distance: typing.Union[MetaOapg.properties.distance, decimal.Decimal, int, ],
        destination_key: typing.Union[MetaOapg.properties.destination_key, str, ],
        source_key: typing.Union[MetaOapg.properties.source_key, str, ],
        cost_per_ton: typing.Union[MetaOapg.properties.cost_per_ton, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cost_per_transport: typing.Union[MetaOapg.properties.cost_per_transport, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MovementMatrixElement':
        return super().__new__(
            cls,
            *args,
            distance=distance,
            destination_key=destination_key,
            source_key=source_key,
            cost_per_ton=cost_per_ton,
            cost_per_transport=cost_per_transport,
            _configuration=_configuration,
        )
