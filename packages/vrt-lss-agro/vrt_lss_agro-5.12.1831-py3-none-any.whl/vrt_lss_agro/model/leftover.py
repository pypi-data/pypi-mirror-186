# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class Leftover(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A leftover.

    """


    class MetaOapg:
        required = {
            "amount",
            "target_key",
            "humidity",
            "crop_key",
        }
        
        class properties:
            
            
            class crop_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
        
            @staticmethod
            def humidity() -> typing.Type['Humidity']:
                return Humidity
            
            
            class target_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class amount(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 10000000.1
                    inclusive_minimum = 0
            
            
            class target_detail_key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'target_detail_key':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "crop_key": crop_key,
                "humidity": humidity,
                "target_key": target_key,
                "amount": amount,
                "target_detail_key": target_detail_key,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    amount: MetaOapg.properties.amount
    target_key: MetaOapg.properties.target_key
    humidity: 'Humidity'
    crop_key: MetaOapg.properties.crop_key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_key"]) -> MetaOapg.properties.target_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["humidity"]) -> 'Humidity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crop_key"]) -> MetaOapg.properties.crop_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_detail_key"]) -> MetaOapg.properties.target_detail_key: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount"], typing_extensions.Literal["target_key"], typing_extensions.Literal["humidity"], typing_extensions.Literal["crop_key"], typing_extensions.Literal["target_detail_key"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_key"]) -> MetaOapg.properties.target_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["humidity"]) -> 'Humidity': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crop_key"]) -> MetaOapg.properties.crop_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_detail_key"]) -> typing.Union[MetaOapg.properties.target_detail_key, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount"], typing_extensions.Literal["target_key"], typing_extensions.Literal["humidity"], typing_extensions.Literal["crop_key"], typing_extensions.Literal["target_detail_key"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        target_key: typing.Union[MetaOapg.properties.target_key, str, ],
        humidity: 'Humidity',
        crop_key: typing.Union[MetaOapg.properties.crop_key, str, ],
        target_detail_key: typing.Union[MetaOapg.properties.target_detail_key, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Leftover':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            target_key=target_key,
            humidity=humidity,
            crop_key=crop_key,
            target_detail_key=target_detail_key,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.humidity import Humidity
