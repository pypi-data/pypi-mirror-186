# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class Contract(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Contract - defines a list of purchase and sale prices for a specific group of sellers and buyers.

    """


    class MetaOapg:
        required = {
            "pricelist",
            "target_keys",
            "type",
            "key",
        }
        
        class properties:
            
            
            class key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
        
            @staticmethod
            def type() -> typing.Type['ContractType']:
                return ContractType
        
            @staticmethod
            def target_keys() -> typing.Type['ContractTargetKeys']:
                return ContractTargetKeys
            
            
            class pricelist(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = False
                    max_items = 50
                    min_items = 0
                    
                    @staticmethod
                    def items() -> typing.Type['Pricelist']:
                        return Pricelist
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Pricelist'], typing.List['Pricelist']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pricelist':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Pricelist':
                    return super().__getitem__(i)
        
            @staticmethod
            def attributes() -> typing.Type['Attributes']:
                return Attributes
            __annotations__ = {
                "key": key,
                "type": type,
                "target_keys": target_keys,
                "pricelist": pricelist,
                "attributes": attributes,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    pricelist: MetaOapg.properties.pricelist
    target_keys: 'ContractTargetKeys'
    type: 'ContractType'
    key: MetaOapg.properties.key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pricelist"]) -> MetaOapg.properties.pricelist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_keys"]) -> 'ContractTargetKeys': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'ContractType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> 'Attributes': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pricelist"], typing_extensions.Literal["target_keys"], typing_extensions.Literal["type"], typing_extensions.Literal["key"], typing_extensions.Literal["attributes"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pricelist"]) -> MetaOapg.properties.pricelist: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_keys"]) -> 'ContractTargetKeys': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'ContractType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union['Attributes', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pricelist"], typing_extensions.Literal["target_keys"], typing_extensions.Literal["type"], typing_extensions.Literal["key"], typing_extensions.Literal["attributes"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        pricelist: typing.Union[MetaOapg.properties.pricelist, list, tuple, ],
        target_keys: 'ContractTargetKeys',
        type: 'ContractType',
        key: typing.Union[MetaOapg.properties.key, str, ],
        attributes: typing.Union['Attributes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Contract':
        return super().__new__(
            cls,
            *args,
            pricelist=pricelist,
            target_keys=target_keys,
            type=type,
            key=key,
            attributes=attributes,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.attributes import Attributes
from vrt_lss_agro.model.contract_target_keys import ContractTargetKeys
from vrt_lss_agro.model.contract_type import ContractType
from vrt_lss_agro.model.pricelist import Pricelist
