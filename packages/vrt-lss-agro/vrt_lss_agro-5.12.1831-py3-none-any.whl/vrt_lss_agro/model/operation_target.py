# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class OperationTarget(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Operation target.

    """


    class MetaOapg:
        required = {
            "date",
            "mass",
            "target_key",
            "target_type",
            "crop_type",
        }
        
        class properties:
            date = schemas.DateSchema
            
            
            class target_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
        
            @staticmethod
            def target_type() -> typing.Type['ObjectType']:
                return ObjectType
        
            @staticmethod
            def crop_type() -> typing.Type['CropType']:
                return CropType
            
            
            class mass(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 10000000.1
                    inclusive_minimum = 0
            
            
            class target_detail_key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'target_detail_key':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def attributes() -> typing.Type['Attributes']:
                return Attributes
            __annotations__ = {
                "date": date,
                "target_key": target_key,
                "target_type": target_type,
                "crop_type": crop_type,
                "mass": mass,
                "target_detail_key": target_detail_key,
                "attributes": attributes,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    date: MetaOapg.properties.date
    mass: MetaOapg.properties.mass
    target_key: MetaOapg.properties.target_key
    target_type: 'ObjectType'
    crop_type: 'CropType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mass"]) -> MetaOapg.properties.mass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_key"]) -> MetaOapg.properties.target_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_type"]) -> 'ObjectType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crop_type"]) -> 'CropType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_detail_key"]) -> MetaOapg.properties.target_detail_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> 'Attributes': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date"], typing_extensions.Literal["mass"], typing_extensions.Literal["target_key"], typing_extensions.Literal["target_type"], typing_extensions.Literal["crop_type"], typing_extensions.Literal["target_detail_key"], typing_extensions.Literal["attributes"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mass"]) -> MetaOapg.properties.mass: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_key"]) -> MetaOapg.properties.target_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_type"]) -> 'ObjectType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crop_type"]) -> 'CropType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_detail_key"]) -> typing.Union[MetaOapg.properties.target_detail_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union['Attributes', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date"], typing_extensions.Literal["mass"], typing_extensions.Literal["target_key"], typing_extensions.Literal["target_type"], typing_extensions.Literal["crop_type"], typing_extensions.Literal["target_detail_key"], typing_extensions.Literal["attributes"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, date, ],
        mass: typing.Union[MetaOapg.properties.mass, decimal.Decimal, int, float, ],
        target_key: typing.Union[MetaOapg.properties.target_key, str, ],
        target_type: 'ObjectType',
        crop_type: 'CropType',
        target_detail_key: typing.Union[MetaOapg.properties.target_detail_key, None, str, schemas.Unset] = schemas.unset,
        attributes: typing.Union['Attributes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'OperationTarget':
        return super().__new__(
            cls,
            *args,
            date=date,
            mass=mass,
            target_key=target_key,
            target_type=target_type,
            crop_type=crop_type,
            target_detail_key=target_detail_key,
            attributes=attributes,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.attributes import Attributes
from vrt_lss_agro.model.crop_type import CropType
from vrt_lss_agro.model.object_type import ObjectType
