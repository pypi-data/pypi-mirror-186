# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class CalculationInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Calculation information.
    """


    class MetaOapg:
        required = {
            "calculation_time",
            "waiting_time",
            "result_version",
            "status",
        }
        
        class properties:
        
            @staticmethod
            def status() -> typing.Type['CalculationStatus']:
                return CalculationStatus
            
            
            class result_version(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
        
            @staticmethod
            def calculation_time() -> typing.Type['TimeDuration']:
                return TimeDuration
        
            @staticmethod
            def waiting_time() -> typing.Type['TimeDuration']:
                return TimeDuration
            __annotations__ = {
                "status": status,
                "result_version": result_version,
                "calculation_time": calculation_time,
                "waiting_time": waiting_time,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    calculation_time: 'TimeDuration'
    waiting_time: 'TimeDuration'
    result_version: MetaOapg.properties.result_version
    status: 'CalculationStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calculation_time"]) -> 'TimeDuration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waiting_time"]) -> 'TimeDuration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result_version"]) -> MetaOapg.properties.result_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'CalculationStatus': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["calculation_time"], typing_extensions.Literal["waiting_time"], typing_extensions.Literal["result_version"], typing_extensions.Literal["status"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calculation_time"]) -> 'TimeDuration': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waiting_time"]) -> 'TimeDuration': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result_version"]) -> MetaOapg.properties.result_version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'CalculationStatus': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["calculation_time"], typing_extensions.Literal["waiting_time"], typing_extensions.Literal["result_version"], typing_extensions.Literal["status"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        calculation_time: 'TimeDuration',
        waiting_time: 'TimeDuration',
        result_version: typing.Union[MetaOapg.properties.result_version, decimal.Decimal, int, ],
        status: 'CalculationStatus',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CalculationInfo':
        return super().__new__(
            cls,
            *args,
            calculation_time=calculation_time,
            waiting_time=waiting_time,
            result_version=result_version,
            status=status,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.calculation_status import CalculationStatus
from vrt_lss_agro.model.time_duration import TimeDuration
