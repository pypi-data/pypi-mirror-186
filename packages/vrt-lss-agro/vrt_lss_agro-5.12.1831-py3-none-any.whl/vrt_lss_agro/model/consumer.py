# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class Consumer(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Grain process.

    """


    class MetaOapg:
        required = {
            "consumption_forecast",
            "min_stock_days",
            "crop_key",
            "key",
        }
        
        class properties:
            
            
            class key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
            
            
            class crop_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
                    min_length = 1
        
            @staticmethod
            def consumption_forecast() -> typing.Type['CapacityForecast']:
                return CapacityForecast
            
            
            class min_stock_days(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 365
                    inclusive_minimum = 0
            __annotations__ = {
                "key": key,
                "crop_key": crop_key,
                "consumption_forecast": consumption_forecast,
                "min_stock_days": min_stock_days,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    consumption_forecast: 'CapacityForecast'
    min_stock_days: MetaOapg.properties.min_stock_days
    crop_key: MetaOapg.properties.crop_key
    key: MetaOapg.properties.key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consumption_forecast"]) -> 'CapacityForecast': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min_stock_days"]) -> MetaOapg.properties.min_stock_days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crop_key"]) -> MetaOapg.properties.crop_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["consumption_forecast"], typing_extensions.Literal["min_stock_days"], typing_extensions.Literal["crop_key"], typing_extensions.Literal["key"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consumption_forecast"]) -> 'CapacityForecast': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min_stock_days"]) -> MetaOapg.properties.min_stock_days: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crop_key"]) -> MetaOapg.properties.crop_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["consumption_forecast"], typing_extensions.Literal["min_stock_days"], typing_extensions.Literal["crop_key"], typing_extensions.Literal["key"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        consumption_forecast: 'CapacityForecast',
        min_stock_days: typing.Union[MetaOapg.properties.min_stock_days, decimal.Decimal, int, ],
        crop_key: typing.Union[MetaOapg.properties.crop_key, str, ],
        key: typing.Union[MetaOapg.properties.key, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Consumer':
        return super().__new__(
            cls,
            *args,
            consumption_forecast=consumption_forecast,
            min_stock_days=min_stock_days,
            crop_key=crop_key,
            key=key,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.capacity_forecast import CapacityForecast
