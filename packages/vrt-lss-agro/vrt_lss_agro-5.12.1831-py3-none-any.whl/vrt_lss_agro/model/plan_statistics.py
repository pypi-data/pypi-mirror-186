# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class PlanStatistics(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    General statistics.

    """


    class MetaOapg:
        required = {
            "elevators_count",
            "total_cost",
            "total_distance",
            "fields_count",
            "days_count",
            "markets_count",
            "factory_count",
        }
        
        class properties:
            
            
            class days_count(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 3653
                    inclusive_minimum = 0
            
            
            class fields_count(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 10001
                    inclusive_minimum = 0
            
            
            class elevators_count(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 10001
                    inclusive_minimum = 0
            
            
            class factory_count(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 10001
                    inclusive_minimum = 0
            
            
            class markets_count(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 10001
                    inclusive_minimum = 0
            
            
            class total_distance(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 10000000
                    inclusive_minimum = 0
            
            
            class total_cost(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 10000000
                    inclusive_minimum = 0
            __annotations__ = {
                "days_count": days_count,
                "fields_count": fields_count,
                "elevators_count": elevators_count,
                "factory_count": factory_count,
                "markets_count": markets_count,
                "total_distance": total_distance,
                "total_cost": total_cost,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    elevators_count: MetaOapg.properties.elevators_count
    total_cost: MetaOapg.properties.total_cost
    total_distance: MetaOapg.properties.total_distance
    fields_count: MetaOapg.properties.fields_count
    days_count: MetaOapg.properties.days_count
    markets_count: MetaOapg.properties.markets_count
    factory_count: MetaOapg.properties.factory_count
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elevators_count"]) -> MetaOapg.properties.elevators_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_cost"]) -> MetaOapg.properties.total_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_distance"]) -> MetaOapg.properties.total_distance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields_count"]) -> MetaOapg.properties.fields_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_count"]) -> MetaOapg.properties.days_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["markets_count"]) -> MetaOapg.properties.markets_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["factory_count"]) -> MetaOapg.properties.factory_count: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["elevators_count"], typing_extensions.Literal["total_cost"], typing_extensions.Literal["total_distance"], typing_extensions.Literal["fields_count"], typing_extensions.Literal["days_count"], typing_extensions.Literal["markets_count"], typing_extensions.Literal["factory_count"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elevators_count"]) -> MetaOapg.properties.elevators_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_cost"]) -> MetaOapg.properties.total_cost: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_distance"]) -> MetaOapg.properties.total_distance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields_count"]) -> MetaOapg.properties.fields_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_count"]) -> MetaOapg.properties.days_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["markets_count"]) -> MetaOapg.properties.markets_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["factory_count"]) -> MetaOapg.properties.factory_count: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["elevators_count"], typing_extensions.Literal["total_cost"], typing_extensions.Literal["total_distance"], typing_extensions.Literal["fields_count"], typing_extensions.Literal["days_count"], typing_extensions.Literal["markets_count"], typing_extensions.Literal["factory_count"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        elevators_count: typing.Union[MetaOapg.properties.elevators_count, decimal.Decimal, int, ],
        total_cost: typing.Union[MetaOapg.properties.total_cost, decimal.Decimal, int, float, ],
        total_distance: typing.Union[MetaOapg.properties.total_distance, decimal.Decimal, int, ],
        fields_count: typing.Union[MetaOapg.properties.fields_count, decimal.Decimal, int, ],
        days_count: typing.Union[MetaOapg.properties.days_count, decimal.Decimal, int, ],
        markets_count: typing.Union[MetaOapg.properties.markets_count, decimal.Decimal, int, ],
        factory_count: typing.Union[MetaOapg.properties.factory_count, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PlanStatistics':
        return super().__new__(
            cls,
            *args,
            elevators_count=elevators_count,
            total_cost=total_cost,
            total_distance=total_distance,
            fields_count=fields_count,
            days_count=days_count,
            markets_count=markets_count,
            factory_count=factory_count,
            _configuration=_configuration,
        )
