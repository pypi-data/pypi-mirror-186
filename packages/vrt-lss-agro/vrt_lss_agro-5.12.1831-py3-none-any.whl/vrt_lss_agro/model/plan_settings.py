# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class PlanSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Plan settings.
    """


    class MetaOapg:
        required = {
            "project_settings",
        }
        
        class properties:
        
            @staticmethod
            def project_settings() -> typing.Type['ProjectSettings']:
                return ProjectSettings
        
            @staticmethod
            def calculation_settings() -> typing.Type['CalculationSettings']:
                return CalculationSettings
            __annotations__ = {
                "project_settings": project_settings,
                "calculation_settings": calculation_settings,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    project_settings: 'ProjectSettings'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_settings"]) -> 'ProjectSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calculation_settings"]) -> 'CalculationSettings': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["project_settings"], typing_extensions.Literal["calculation_settings"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_settings"]) -> 'ProjectSettings': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calculation_settings"]) -> typing.Union['CalculationSettings', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["project_settings"], typing_extensions.Literal["calculation_settings"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        project_settings: 'ProjectSettings',
        calculation_settings: typing.Union['CalculationSettings', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PlanSettings':
        return super().__new__(
            cls,
            *args,
            project_settings=project_settings,
            calculation_settings=calculation_settings,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.calculation_settings import CalculationSettings
from vrt_lss_agro.model.project_settings import ProjectSettings
