# coding: utf-8

"""
    VRt.Agro [AG]

    Veeroute Agro API.  # Description  The service is designed to calculate the work plan of production facilities.  ## Objects overview  ![objects](../images/agro_objects.svg)  ## Entity relationship diagram  ![erd](../uml/agro.svg)  # noqa: E501

    The version of the OpenAPI document: 5.12.1831
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vrt_lss_agro import schemas  # noqa: F401


class ProjectSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Project settings.
    """


    class MetaOapg:
        required = {
            "end_date",
            "start_date",
        }
        
        class properties:
            start_date = schemas.DateSchema
            end_date = schemas.DateSchema
        
            @staticmethod
            def configuration() -> typing.Type['ProjectConfiguration']:
                return ProjectConfiguration
            
            
            class transport_capacity(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 80
                    inclusive_minimum = 1
            __annotations__ = {
                "start_date": start_date,
                "end_date": end_date,
                "configuration": configuration,
                "transport_capacity": transport_capacity,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    end_date: MetaOapg.properties.end_date
    start_date: MetaOapg.properties.start_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["configuration"]) -> 'ProjectConfiguration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transport_capacity"]) -> MetaOapg.properties.transport_capacity: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["end_date"], typing_extensions.Literal["start_date"], typing_extensions.Literal["configuration"], typing_extensions.Literal["transport_capacity"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["configuration"]) -> typing.Union['ProjectConfiguration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transport_capacity"]) -> typing.Union[MetaOapg.properties.transport_capacity, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["end_date"], typing_extensions.Literal["start_date"], typing_extensions.Literal["configuration"], typing_extensions.Literal["transport_capacity"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        end_date: typing.Union[MetaOapg.properties.end_date, str, date, ],
        start_date: typing.Union[MetaOapg.properties.start_date, str, date, ],
        configuration: typing.Union['ProjectConfiguration', schemas.Unset] = schemas.unset,
        transport_capacity: typing.Union[MetaOapg.properties.transport_capacity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ProjectSettings':
        return super().__new__(
            cls,
            *args,
            end_date=end_date,
            start_date=start_date,
            configuration=configuration,
            transport_capacity=transport_capacity,
            _configuration=_configuration,
        )

from vrt_lss_agro.model.project_configuration import ProjectConfiguration
