Metadata-Version: 2.1
Name: onipkg-api
Version: 1.0.15
Summary: Helper para consumo de APIs
Home-page: https://github.com/LucasHeilbuth
Download-URL: https://github.com/Onimusic/oni_api_helper.git
Author: Lucas Heilbuth Nazareth de Sousa
Author-email: lucasheilbuth@yahoo.com.br
Keywords: onimusic
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: cachetools (==5.2.0)
Requires-Dist: certifi (==2022.9.24)
Requires-Dist: charset-normalizer (==2.1.1)
Requires-Dist: google-api-core (==2.10.1)
Requires-Dist: google-api-python-client (==2.63.0)
Requires-Dist: google-auth (==2.12.0)
Requires-Dist: google-auth-httplib2 (==0.1.0)
Requires-Dist: googleapis-common-protos (==1.56.4)
Requires-Dist: httplib2 (==0.20.4)
Requires-Dist: idna (==3.4)
Requires-Dist: numpy (==1.23.3)
Requires-Dist: pandas (==1.5.0)
Requires-Dist: protobuf (==4.21.7)
Requires-Dist: pyasn1 (==0.4.8)
Requires-Dist: pyasn1-modules (==0.2.8)
Requires-Dist: pyparsing (==3.0.9)
Requires-Dist: python-dateutil (==2.8.2)
Requires-Dist: pytz (==2022.2.1)
Requires-Dist: requests (==2.28.1)
Requires-Dist: rsa (==4.9)
Requires-Dist: six (==1.16.0)
Requires-Dist: uritemplate (==4.1.1)
Requires-Dist: urllib3 (==1.26.12)

# OniDev's Helper Para Consumo das API's

Retorna objeto json da requisição das API's trabalhadas até o momento.

## Como testar sua contribuíção antes de enviar uma PR
Primeiramente faça a desinstalação do pacote presente em sua `venv`.

```bash
pip uninstall onipkg_api
```

Após a desinstalação, instale o pacote atráves do código fonte modificado.

```bash
pip install -e <path>/onipkg_api/
```

Teste a implementação feita em um projeto terceiro ou até mesmo usando os códigos de teste disponíveis. Após testar o código atual faça a desinstalação do pacote novamente.

```bash
pip uninstall onipkg_api
```

Após o teste crie sua PR e envie para avaliação.
Se deseja que sua PR vire uma nova release, não se esqueça de mudar no `setup.py` na opção version adicione o nome da
próxima versão proposta para o pacote.

## Como criar uma nova release do projeto
Uma vez que sua contribuição for aprovada via PR você está preparado para criar uma nova release do projeto.

O primeiro passo é criar uma nova tag com base no commit que foi aprovado. Para isso na branch master execute o comando:

```bash
git tag -a <tag_name> -m "<comentário descritivo da tag>"
```

Exemplos de `tag_name`: `v1.2`, `v1.2.3` ou `v1.2-beta`

Com a tag criada faça o seu envio para o repositório no `GitHub`.

```bash
git push origin <tag_name>
```

Com a tag enviada podemos seguir para a criação de uma release.
Essa pode ser criada diretamente pelo github com os seguintes passos:
 - Vá no repositório do projeto no GitHub na aba Code.
 - Acesse o menu Releases presente, normalmente, no lado direito.
 - Clique na opção Tags para ver a listagem de tags.
 - Clique nos três pontinhos a direita na tag que você acabou de criar.
 - Selecione a opção create release.
 - Adicione um nome na release (pode ser o mesmo nome da tag) e uma descrição para as novas features da tag.
