# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['daml_dit_ddit']

package_data = \
{'': ['*']}

install_requires = \
['GitPython==3.1.12',
 'PyGithub==1.54.1',
 'dacite',
 'daml-dit-api==0.4.5',
 'dazl>=7,<8',
 'pex==2.1.30',
 'pyyaml>=5,<6',
 'semver']

entry_points = \
{'console_scripts': ['ddit = daml_dit_ddit:main']}

setup_kwargs = {
    'name': 'daml-dit-ddit',
    'version': '0.6.6',
    'description': 'Daml Hub DIT File Tool',
    'long_description': "# daml-dit-ddit\n\n`ddit` is a command line tool that streamlines and automates the\nprocess of building composite artifacts for\n[Daml Hub](https://hub.daml.com/). A composite artifact is a\ncollection of multiple single artifacts packaged into a\n[DIT file](https://github.com/digital-asset/daml-dit-api).\nArtifacts in a DIT file can include Daml Models and Triggers,\nPython Bots, Custom UI code, and Integration Types. Daml Hub\nuses DIT files to package sample applications, libraries, and\nintegrations into a single deployable entity.\n\n# Installing `ddit`\n\n`ddit` is a Python executable distributed via the\n[PyPI](https://pypi.org/project/daml-dit-ddit/) package index. Given a\nPython installation of version 3.7 or later, `ddit` can be installed\nusing `pip3`:\n\n```sh\n$ pip3 install daml-dit-ddit\n```\n\nOnce installed, verify `ddit` by launching it without arguments:\n\n```sh\n$ ddit\nusage: ddit [-h] [--verbose] {build,clean,ditversion,genargs,inspect,install,publish,release,run,show,targetname} ...\n\npositional arguments:\n  {build,clean,ditversion,genargs,inspect,install,publish,release,run,show,targetname}\n                        subcommand\n    build               Build a DIT file.\n    clean               Resets the local build target and virtual environment to an empty state.\n    ditversion          Print the current version in dabl-meta.yaml\n    genargs             Write a template integration argfile to stdout\n    inspect             Inspect the contents of a DIT file.\n    install             Install the DIT file's dependencies into a local virtual environment.\n    publish             Tag and release the current DIT file.\n    release             Tag and release the current DIT file.\n    run                 Run the current project as an integration.\n    show                Verify and print the current metadata file.\n    targetname          Print the build target filename to stdout\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --verbose             Turn on additional logging.\n2021-06-30T13:20:33-0500 [ERROR] (ddit) Fatal Error: Subcommand missing.\n```\n\n# `ddit` Project structure\n\nIn common with other build tools, `ddit` exposes its interface via a\nset of subcommands and operates in project directories with a standard\nlayout. There are three requirements for a `ddit` project directory:\n\n* `dabl-meta.yaml` - A metadata file at the root of the project that\n  contains information on the contents of the project. (Name, version,\n  URL links, etc.)\n* `pkg/` - A subdirectory containing resources and files that will be\n  included in the output DIT.\n* An optional Daml model build, also at the project root. (`daml.yaml`\n  and a source directory.)\n\n## `dabl-meta.yaml`\n\nEvery project has a `dabl-meta.yaml` file at its root. The format of\nthe file is defined in [`daml-dit-api`](https://github.com/digital-asset/daml-dit-api/blob/master/daml_dit_api/package_metadata.py), and a typical example\nlooks like this:\n\n```yaml\ncatalog:\n    name: openwork-board\n    version: 3.2.2\n    short_description: OpenWork Board\n    description: A privacy-focused Kanban board.\n    author: Digital Asset (Switzerland) GmbH\n    url: https://github.com/digital-asset/danban\n    license: Apache-2.0\n    demo_url: https://board.opensaasame.org/\n    tags: [application]\n    icon_file: danban-icon.png\n```\n\nAvailable catalog fields include the following:\n\n| Field | Description |\n|-------|-------------|\n| `name` | Machine-readable name for the project. All DIT files with the same project name are considered to be different versions of the same project. |\n| `version` | The version number of the project |\n| `short_description` | A short description of the project, displayed in the App tile on the console.|\n| `description` | An optional long-form description of the project. |\n| `author` | The name of the author. |\n| `email` | Contract e-mail address for project support. |\n| `url` | The URL to the project's home page, |\n| `license` | The name of project's license. |\n| `demo_url` | An optional link to a live Demonstration instance of the project. |\n| `source_url` | A optional link to the project's source repository. |\n| `tags` | A list of tags associated with the project. These can be used to query specific sets of artifacts from the arcade for display in the console. |\n| `icon_file` | The filename for the project's icon file. This file can be either a `PNG` or `SVG` image and must be present by that name in the output DIT. By default, `ddit` will look for the icon file in the project root and include from there if found.  |\n\nNote that there are a few other catalog fields listed in the API\nsource and shown in the output of `ddit inspect`. These are generally\nlegacy fields used in earlier versions of Daml Hub. To ensure\ncompatability, `ddit` will normalize the contents of `dabl-meta.yaml`\nto include values for these fields (and some of these other fields can\nstill be specified in `dabl-meta.yaml` for their original purpose.)\nThese other fields (the ones not listed above) should be considered\ndeprecated for future use.\n\n## `pkg/`\n\nThis is an optional directory that contains other resources to be\nincludued in the output DIT. \n\n## Daml Project\n\n`ddit` is integrated into the\n[Daml SDK]((https://docs.daml.com/getting-started/installation.html)), \nand DIT file projects can be colocated in the same directory as `daml.yaml`.\nIf a Daml project is present, `ddit` will automatically manage the build\nof the resultant DAR and include it in the output DIT. For projects that\nneed more control over the DAR build process, the automatic DAR build \ncan be disabled with `--skip-dar-build`.\n\n# Building a project with `ddit`\n\nA project can be built with `ddit build`. For examples of what this\nlooks like in practice, please see one of several sample applications\navailable through Daml Hub:\n\n- <https://github.com/digital-asset/dablchat>\n- <https://github.com/digital-asset/dablchess>\n- <https://github.com/OpenSaaSame/board>\n\nThese are all built using Makefiles that manage the build of\nindividual artifacts within each project. `ddit` does not build user\ninterfaces, so the Makefile handles that aspect of the build and\ndelegates to `ddit` to manage build, packaging, and release of the DIT\nfile itself. `ddit` primarily serves to assemble packages out of\ncomponents built by other build processes. To include these sorts of\nartifacts into a DIT file, `ddit build` has a `--subdeployments`\noption that takes a list of other artifacts that will be included in\nthe DIT file and deployed as part of the DIT file deployment.\n\n# Inspecting a DIT file.\n\nTo facilitate management of DIT files, `ddit inspect` can be used to\nview a summary of the contents of a DIT file. This includes relevent\nartifact hashes, information on the associated Daml model, and catalog\ninformation for the file.\n\n```sh\n$ ddit inspect dabl-integration-core-0.9.7.dit\nArtifact hash:  7663d38129c2ed47e921a99713f1ca95285b0a1ff9e0bbad3768363cc3158d15\n\nPackage Catalog:\n   name : dabl-integration-core\n   version : 0.9.7\n   description : Timer and Loopback Integrations\n   release_date : 2021-06-22\n   author : Digital Asset (Switzerland) GmbH\n   url : None\n   email : None\n   license : Apache-2.0\n   experimental : False\n   demo_url : None\n   source_url : https://github.com/digital-asset/daml-dit-integration-core\n   tags : ['integration']\n   short_description : The Core Pack\n   group_id : com.digitalasset\n   icon_file : integration-icon.svg\n\nDaml Model:\n   Name/Version: dabl-integration-core:1.1.1\n   Package ID: 779c8ad14dd7c7bce05035bbdf7e374e0a349ac501bc4289246b2eaeaef7f990\n\nIntegration Types:\n   loopback - Loopback\n   timer - Timer\n   ledger_event_log - Ledger Event Log\n   table - Table\n\nSubdeployments:\n   dabl-integration-core-1.1.1.dar (234742 bytes, 6c2b1589f5c3083114c78d195af2f1f139661c3cdfb13f4b9f143f9706576f92)\n```\n\n# Building integrations\n\nIntegration DIT files differ from applications in that they contain\ncode that runs inside Daml Hub with elevated permissions that enable\nthem to access external network connections. Integrations are the only\ndeployable code that has this permission. Because of these elevated\nruntime rights, specific user permissions are required to deploy\nintegration DIT files to Daml Hub. Please contact\n[Digital Asset](https://discuss.daml.com/) for more information on\ndeploying custom integration types into Daml Hub.\n\n`ddit` will build an integration DIT file for projects that define\n`integration_types` in their `dabl-meta.yaml` This section specifies\nthe integration types contained in the DIT file. When building as an\nintegration, the DIT file project directory gains some of the traits\nof a Python project.\n\n* Python dependencies to be included in the output DIT can be\n  specified in an optional `requirements.txt` file at the root of the\n  project.\n* Python source for the integrations is stored in `src/`.\n\n`ddit` provides several additional utility commands to assist\ndeveloping an integration:\n\n* `ddit genargs` - This generates a template argument file for the\n  integration to be run locally. Once generated, the template should be\n  edited to include the desired configuration values.\n* `ddit run` - This runs an integration locally against a locally\n  running ledger.\n\n For more details on implementing an integration, see the\n[`daml-dit-if`](https://github.com/digital-asset/daml-dit-if)\ndocumeentation.\n",
    'author': 'Mike Schaeffer',
    'author_email': 'mike.schaeffer@digitalasset.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/digital-asset/daml-dit-ddit',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<3.10',
}


setup(**setup_kwargs)
