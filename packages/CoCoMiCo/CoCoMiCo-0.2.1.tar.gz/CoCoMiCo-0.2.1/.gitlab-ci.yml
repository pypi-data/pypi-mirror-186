image: python:latest

default:
  tags:
    - small

before_script:
  - python -V
  - pip install tox

stages:
  - check
  - test
  - build
  - quality
  - doc
  - pypi_deploy

check:
  stage: check
  script:
    - tox -e check
  allow_failure: true

smoke test:
  stage: test
  script:
    - tox -e clean,py38-nocov,py311-nocov
  artifacts:
    reports:
      junit: toxtests.xml

coverage test:
  stage: test
  script:
    - tox -e clean,py311-cover,report
  artifacts:
    paths:
      - htmlcov/
    reports:
      junit: toxtests.xml

build:
  stage: build
  variables:
    TWINE_PASSWORD: ${CI_JOB_TOKEN}
    TWINE_USERNAME: gitlab-ci-token
    PACKAGE_REPOSITORY: https://gitlab.inria.fr/api/v4/projects/${CI_PROJECT_ID}/packages/pypi
  script:
    - tox -e build
    - pip install twine
    - python -m twine upload --repository-url ${PACKAGE_REPOSITORY} --skip-existing dist/*
  artifacts:
    paths:
      - dist/*.whl
    expire_in: 8 days
  # only:
  #   - main
  #   - merge_requests

sonar coverage:
  stage: quality
  needs: [ "coverage test" ]
  before_script:
    - python -V
    - apk add py3-tox
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  script:
    - tox -e sonar
  allow_failure: true
  artifacts:
    paths:
      - pylint-report.txt
  # only:
  #   - main
  #   - merge_requests

pypi_deploy:
  stage: pypi_deploy
  variables:
    TWINE_PASSWORD: ${PYPI_PROD_TOKEN}
    TWINE_USERNAME: __token__
  script:
    - tox -e build
    - pip install twine
    - python -m twine upload --repository-url https://upload.pypi.org/legacy/ dist/*
  only:
    - tags
