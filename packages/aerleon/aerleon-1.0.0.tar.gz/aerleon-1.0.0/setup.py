# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['aerleon', 'aerleon.lib', 'aerleon.utils', 'lib']

package_data = \
{'': ['*']}

install_requires = \
['PyYAML>=6.0,<7.0',
 'absl-py>=1.2.0,<2.0.0',
 'ply>=3.11,<4.0',
 'typing_extensions>=4.4.0,<5.0.0']

extras_require = \
{':python_version <= "3.10"': ['importlib-metadata>=4.2,<5.0']}

entry_points = \
{'console_scripts': ['aclgen = aerleon.aclgen:EntryPoint']}

setup_kwargs = {
    'name': 'aerleon',
    'version': '1.0.0',
    'description': 'A firewall generation tool',
    'long_description': '![GitHub](https://img.shields.io/github/license/aerleon/aerleon) [![PyPI version](https://badge.fury.io/py/aerleon.svg)](https://badge.fury.io/py/aerleon) ![PyPI - Status](https://img.shields.io/pypi/status/aerleon) ![PyPI - Downloads](https://img.shields.io/pypi/dm/aerleon)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/aerleon) [![Code Style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black) ![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/aerleon/aerleon/main.yml?branch=main) ![Snyk Vulnerabilities for GitHub Repo](https://img.shields.io/snyk/vulnerabilities/github/aerleon/aerleon)[![codecov](https://codecov.io/gh/aerleon/aerleon/branch/main/graph/badge.svg?token=C13SR6GMTD)](https://codecov.io/gh/aerleon/aerleon)\n\n# Aerleon\n\nGenerate firewall configs for multiple platforms at once.\n\nAerleon is a fork of [Capirca](https://github.com/google/capirca) with the following enhancements:\n\n- Support for new firewall platforms can be added through plugins. Plugins for\n  common platforms are built-in. Users with experimental or non-public platforms\n  can add support without forking this repo.\n- Policy files can be given as YAML (.pol.yaml).\n- Address Book data can be loaded from standard data formats like JSON, CSV.\n- Existing .net, .svc and .pol files are still supported.\n- Remote Address Book sources are supported. Users can link directly to IPAM.\n- Performance is generally faster.\n- A well-documented Python API is provided which accepts native types.\n- A cleaner test harness is provided for end-to-end tests.\n- "Shade checking" is faster and more correct.\n- --help mode is much cleaner.\n\n## Using Aerleon\n\nAerleon provides a command-line script `aclgen` which will generate firewall\nACLs from high-level policy files.\n\nEach [policy file](#policy-files) in the input directory is visited and ACLs are\ngenerated from the _term_ and _header_ blocks within. ACLs are then rendered to\none or more platform-specific configs according to the \'target\' keyword(s) used.\n\nSymbolic names can be used for IP networks, hosts, and services defined in the\n[Address Book](#address-book).\n\nA [Getting Started](wiki/getting-started.md) guide can be found on the wiki.\n\n### Examples\n\nThe `aclgen` script will visit each policy file in the policies directory\n`./policies` and place generated firewall configs in the current directory. To\nget started, create a policy file and run:\n\n```\naclgen\n```\n\nYou can configure the input and output directories through the command line:\n\n```\naclgen --input-dir ./acl-policies \\\n  --input-dir ./address-book-generated \\\n  --input-dir ./address-book-static \\\n  --output-dir ./acl-generated\n```\n\nSee [Usage](#usage) for more details.\n\n### Supported Platforms\n\nThe following list contains links to the documentation of the individual policy\ngenerators:\n\n<!-- begin-generator-term-links -->\n\n- [`arista`](./doc/generators/arista.md): Arista\n- [`aruba`](./doc/generators/aruba.md): Aruba\n- [`brocade`](./doc/generators/brocade.md): Brocade\n- [`cisco`](./doc/generators/cisco.md): Cisco\n- [`ciscoasa`](./doc/generators/ciscoasa.md): Cisco ASA\n- [`cisconx`](./doc/generators/cisconx.md): Cisco NX\n- [`ciscoxr`](./doc/generators/ciscoxr.md): Cisco XR\n- [`cloudarmor`](./doc/generators/cloudarmor.md): cloudarmor\n- [`gce`](./doc/generators/gce.md): GCE\n- `gcp_hf`\n- [`ipset`](./doc/generators/ipset.md): ipset\n- [`iptables`](./doc/generators/iptables.md): iptables\n- [`juniper`](./doc/generators/juniper.md): Juniper\n- [`juniperevo`](./doc/generators/juniperevo.md): Juniper EVO\n- [`junipermsmpc`](./doc/generators/junipermsmpc.md): Juniper\n- [`junipersrx`](./doc/generators/junipersrx.md): Juniper SRX\n- [`k8s`](./doc/generators/k8s.md): Kubernetes NetworkPolicy\n- [`nftables`](./doc/generators/nftables.md): nftables\n- [`nsxv`](./doc/generators/nsxv.md): NSX\n- [`packetfilter`](./doc/generators/packetfilter.md): PacketFilter\n- [`paloaltofw`](./doc/generators/paloaltofw.md): Palo Alto PANOS\n- [`pcap`](./doc/generators/pcap.md): PcapFilter\n- [`speedway`](./doc/generators/speedway.md): Speedway\n- [`srxlo`](./doc/generators/srxlo.md): Stateless Juniper ACL\n- [`windows_advfirewall`](./doc/generators/windows_advfirewall.md): Windows\n  Advanced Firewall <!-- begin-generator-term-links -->\n\nSee also [Adding A Platform Generator](wiki/adding-a-platform-generator.md) on\nthe wiki.\n\n### Usage\n\n```\n  Usage: aclgen [OPTION]... Generate firewall configs for multiple platforms at\n  once\n\n  Each policy file (.pol, .pol.yaml) in the input directory is visited and ACLs\n  are generated from the term and header blocks within. Symbolic names that\n  reference address book files (.net) in the input directory can be used for IP\n  networks, hosts, and services. ACLs are then rendered to one or more\n  platform-specific configs according to the ‘target’ keyword(s) used.\n\n  Policy files can be given as .pol files or .pol.yaml files. Address books are\n  defined by .net, .net.json, or .net.csv files.\n\n  Where OPTION is:\n\n    --input-dir=DIRECTORY: Search this directory recursively for input files.\n    Defaults to ‘./policies’. If ‘--input-dir’ is given multiple times, all given\n    directories will be searched.\n\n    --output-dir=DIRECTORY: Place all generated files here. Defaults to the current\n    working directory.\n\n    --config=FILE: Read configuration options from FILE (JSON). Defaults to\n    ‘./config.json’. The command line value is used if an option is provided in both\n    the command line and the configuration file. Some options are only available in\n    the configuration file.\n\n    --plugin-dir=DIRECTORY: Search this directory recursively for plugins. Defaults\n    to ‘./plugins. If ‘--plugin-dir’ is given multiple times, all given directories\n    will be searched.\n\n    --dry-run: Do not write out any output files.\n\n    --help: Display this message.\n\n    --version: Display version information.\n```\n\n## Policy Files\n\nA policy file describes a security policy using _header_ and _term_ blocks.\nHeader blocks describe how to generate the output configuration of the security\npolicy. Term blocks define the access control rules within an ACL.\n\nIn .pol.yaml files, each ACL has exactly one header and one or more term\nsections. In .pol file format, each ACL is defined by a top-level header block\nfollowed by one or more top-level term blocks.\n\n```yaml\nacls:\n  - header:\n      comment:\n        this is a sample policy for a zone based filter that generates multiple\n        output formats. It checks logging options, tcp, udp and icmp type\n        options.\n      targets:\n        paloalto: from-zone internal to-zone external\n        srx: from-zone internal to-zone external\n    terms:\n      - name: test-tcp-log-both\n        comment: Testing log-both for tcp.\n        protocol: tcp\n        logging: log-both\n        action: accept\n      - name: test-udp-log\n        comment: Testing logging for udp.\n        protocol: udp\n        logging: true\n        action: accept\n```\n\nSee [Policy Files](wiki/policy-files.md) on the wiki for full details.\n\n## Address Book\n\nAddress book files define symbolic names for IP networks, hosts, and services.\nPolicy files may reference these names.\n\n```yaml\nterms:\n  - name: deny-to-bad-destinations\n    destination-address: RFC1918 BOGON RESERVED\n    action: deny\n```\n\n```\nRFC1918 = 10.0.0.0/8      # non-public\n          172.16.0.0/12   # non-public\n          192.168.0.0/16  # non-public\n\nBOGON = 0.0.0.0/8\n        192.0.0.0/24\n...skipped...\n\nRESERVED = 0.0.0.0/8      # reserved\n           RFC1918\n           LOOPBACK\n...skipped...\n```\n\nUsers may wish to auto-generate address book files to keep them up to date. JSON\nand CSV are accepted for this reason. See [Address Book](wiki/address-book.md)\non the wiki for full details.\n\n## Advanced Usage\n\nThe `aerleon` Python package also provides a Python API. See\n[Python Package](wiki/python-package.md) on the wiki.\n\nTo build from source, see\n[Getting Started With Source](wiki/getting-started-source.md) on the wiki.\n\n## Contributing\n\nContributions are welcome. Please review the contributing guidelines and code of\nconduct for this project.\n\nThe [Getting Started With Source](wiki/getting-started-source.md) guide has\ninformation on how to approach code changes to this project.\n\n## Contact\n\nOfficial channels for communicating issues is via [Github Issues](https://github.com/aerleon/aerleon/issues)\n\nGeneral discussions can be had either in [Github Discussions](https://github.com/aerleon/aerleon/discussions) or in our [Slack Server]((https://aerleon.slack.com/)\n\n### Contact Maintainers\n\nYou can always reach out to us on  [Slack]((https://aerleon.slack.com/)\nYou many also reach out to us via e-mail\n\nRob Ankeny ([ankenyr@gmail.com](mailto:ankenyr@gmail.com))\n\nJason Benterou ([jason.benterou@gmail.com](mailto:jason.benterou@gmail.com))\n\n## Resources\n\nAerleon is a fork of [Capirca](https://github.com/google/capirca).\n\nAdditional documentation:\n\n- [aclcheck library](./doc/wiki/AclCheck-library.md)\n- [policy reader library](./doc/wiki/PolicyReader-library.md)\n- [policy library](./doc/wiki/Policy-library.md)\n- [naming library](./doc/wiki/Naming-library.md)\n- [capirca design doc](./doc/wiki/Capirca-design.md)\n\nExternal links, resources and references:\n\n- [Brief Overview (4 slides):](https://docs.google.com/present/embed?id=dhtc9k26_13cz9fphfb&autoStart=true&loop=true&size=1)\n- [Nanog49; Enterprise QoS](http://www.nanog.org/meetings/nanog49/presentations/Tuesday/Chung-EnterpriseQoS-final.pdf)\n- [Blog Post: Safe ACL Change through Model-based Analysis](https://tech.ebayinc.com/engineering/safe-acl-change-through-model-based-analysis/)\n- [Aerleon Slack](https://aerleon.slack.com/)\n- [#aerleon at NetworkToCode Slack](https://networktocode.slack.com/)\n\n## Contributors ✨\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align="center"><a href="https://github.com/itdependsnetworks"><img src="https://avatars.githubusercontent.com/u/9260483?v=4?s=100" width="100px;" alt="Ken Celenza"/><br /><sub><b>Ken Celenza</b></sub></a><br /><a href="https://github.com/aerleon/aerleon/commits?author=itdependsnetworks" title="Documentation">📖</a></td>\n      <td align="center"><a href="https://github.com/fischa"><img src="https://avatars.githubusercontent.com/u/11302991?v=4?s=100" width="100px;" alt="Axel F"/><br /><sub><b>Axel F</b></sub></a><br /><a href="https://github.com/aerleon/aerleon/commits?author=fischa" title="Documentation">📖</a></td>\n    </tr>\n  </tbody>\n  <tfoot>\n    <tr>\n      <td align="center" size="13px" colspan="7">\n        <img src="https://raw.githubusercontent.com/all-contributors/all-contributors-cli/1b8533af435da9854653492b1327a23a4dbd0a10/assets/logo-small.svg">\n          <a href="https://all-contributors.js.org/docs/en/bot/usage">Add your contributions</a>\n        </img>\n      </td>\n    </tr>\n  </tfoot>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Credit\n\nFiles and code included in this project from Capirca are copyright Google and\nare included under the terms of the Apache License, Version 2.0. You may obtain\na copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nContributors who wish to modify files bearing a copyright notice are obligated\nby the terms of the Apache License, Version 2.0 to include at the top of the\nfile a prominent notice stating as much. Copyright notices must not be removed\nfrom files in this repository.\n\nThis README file may contain phrases and sections that are copyright Google.\nThis file is modified from the original.\n',
    'author': 'Rob Ankeny',
    'author_email': 'ankenyr@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/aerleon/aerleon',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
